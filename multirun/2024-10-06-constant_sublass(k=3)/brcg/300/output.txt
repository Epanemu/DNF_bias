Command:
python test_script.py -s constant_subclass -d 8 -n 1000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.158
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 8.

Computed total variation: 0.44000000000000006
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:44 PM: Your problem has 517 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:44 PM: Finished problem compilation (took 4.700e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 517
  constraints   = 1017
  nnz(P)        = 0
  nnz(A)        = 5517
  cones (total) = 1
    : Nonnegative = 1,  numel = 1017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +5.0085e+02  5.00e+02  9.55e-01  3.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.8382e-01  +1.0732e+02  1.07e+02  4.03e-01  2.15e+01  3.82e-03  5.62e-01  5.98e-01  
  2  +5.3328e-01  +1.2793e+01  1.23e+01  1.39e-01  9.39e+00  1.49e-02  2.59e-01  9.18e-01  
  3  +5.0591e-01  +3.0729e+00  2.57e+00  5.30e-02  3.48e+00  3.51e-05  2.31e-01  4.04e-01  
  4  +5.0063e-01  +7.9180e-01  2.91e-01  6.43e-03  4.43e-01  1.03e-05  7.20e-02  8.11e-01  
  5  +4.9971e-01  +7.0758e-01  2.08e-01  3.73e-03  2.60e-01  2.15e-05  1.68e-02  8.39e-01  
  6  +4.9093e-01  +6.5463e-01  1.64e-01  5.14e-04  3.63e-02  1.53e-04  1.56e-03  9.11e-01  
  7  +4.7778e-01  +5.7916e-01  1.01e-01  2.69e-04  1.89e-02  7.12e-05  8.90e-04  5.76e-01  
  8  +4.7001e-01  +5.3941e-01  6.94e-02  1.76e-04  1.23e-02  3.57e-05  6.19e-04  5.46e-01  
  9  +4.5583e-01  +4.7378e-01  1.79e-02  3.88e-05  2.71e-03  7.07e-06  1.54e-04  8.22e-01  
 10  +4.5066e-01  +4.5231e-01  1.65e-03  3.34e-06  2.34e-04  7.32e-07  1.42e-05  9.90e-01  
 11  +4.5011e-01  +4.5012e-01  1.69e-05  3.41e-08  2.39e-06  7.46e-09  1.46e-07  9.90e-01  
 12  +4.5010e-01  +4.5010e-01  1.69e-07  3.41e-10  2.39e-08  7.46e-11  1.46e-09  9.90e-01  
 13  +4.5010e-01  +4.5010e-01  1.69e-09  3.41e-12  2.39e-10  7.47e-13  1.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0935ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:44 PM: Optimal value: 4.501e-01
(CVXPY) Oct 06 04:08:44 PM: Compilation took 4.700e-02 seconds
(CVXPY) Oct 06 04:08:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:44 PM: Your problem has 527 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:44 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 1027
  nnz(P)        = 0
  nnz(A)        = 6547
  cones (total) = 1
    : Nonnegative = 1,  numel = 1027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0136e+02  5.01e+02  9.55e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.8263e-01  +1.0759e+02  1.07e+02  4.07e-01  2.24e+01  3.81e-03  5.69e-01  5.96e-01  
  2  +5.3160e-01  +1.2487e+01  1.20e+01  1.37e-01  9.51e+00  1.54e-02  2.58e-01  9.37e-01  
  3  +5.0514e-01  +2.9114e+00  2.41e+00  5.03e-02  3.43e+00  3.62e-05  2.20e-01  4.98e-01  
  4  +5.0107e-01  +1.0521e+00  5.51e-01  1.22e-02  8.65e-01  1.35e-05  9.38e-02  6.36e-01  
  5  +4.9930e-01  +7.8609e-01  2.87e-01  4.93e-03  3.58e-01  2.33e-05  1.90e-02  8.84e-01  
  6  +4.8987e-01  +7.1810e-01  2.28e-01  9.84e-04  7.31e-02  1.06e-04  2.80e-03  8.60e-01  
  7  +4.8590e-01  +7.0619e-01  2.20e-01  7.03e-04  5.21e-02  1.25e-04  1.99e-03  3.71e-01  
  8  +4.8008e-01  +6.7697e-01  1.97e-01  5.28e-04  3.90e-02  1.12e-04  1.50e-03  4.58e-01  
  9  +4.7017e-01  +6.2763e-01  1.57e-01  3.44e-04  2.55e-02  8.69e-05  9.78e-04  7.30e-01  
 10  +4.6444e-01  +6.0395e-01  1.40e-01  3.13e-04  2.32e-02  7.05e-05  9.06e-04  3.66e-01  
 11  +4.4438e-01  +5.2399e-01  7.96e-02  1.43e-04  1.06e-02  4.50e-05  4.25e-04  5.82e-01  
 12  +4.2054e-01  +4.3021e-01  9.68e-03  1.65e-05  1.22e-03  4.15e-06  5.15e-05  9.54e-01  
 13  +4.1833e-01  +4.2273e-01  4.41e-03  7.40e-06  5.54e-04  2.16e-06  2.32e-05  6.24e-01  
 14  +4.1710e-01  +4.1889e-01  1.79e-03  2.93e-06  2.23e-04  1.39e-06  9.22e-06  9.90e-01  
 15  +4.1631e-01  +4.1634e-01  2.90e-05  4.71e-08  3.60e-06  2.30e-08  1.49e-07  9.84e-01  
 16  +4.1630e-01  +4.1630e-01  2.90e-07  4.71e-10  3.61e-08  2.30e-10  1.49e-09  9.90e-01  
 17  +4.1630e-01  +4.1630e-01  2.90e-09  4.71e-12  3.61e-10  2.30e-12  1.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.1797ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:44 PM: Optimal value: 4.163e-01
(CVXPY) Oct 06 04:08:44 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:08:44 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 2, Objective: 0.4163
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:44 PM: Your problem has 537 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:44 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 537
  constraints   = 1037
  nnz(P)        = 0
  nnz(A)        = 6953
  cones (total) = 1
    : Nonnegative = 1,  numel = 1037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0171e+02  5.01e+02  9.56e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.8178e-01  +1.0764e+02  1.07e+02  4.08e-01  2.23e+01  3.81e-03  5.70e-01  5.96e-01  
  2  +5.3070e-01  +1.2313e+01  1.18e+01  1.35e-01  9.29e+00  1.56e-02  2.54e-01  9.49e-01  
  3  +5.0460e-01  +2.7978e+00  2.29e+00  4.81e-02  3.29e+00  3.68e-05  2.09e-01  5.70e-01  
  4  +5.0125e-01  +1.2523e+00  7.51e-01  1.65e-02  1.16e+00  1.71e-05  1.00e-01  5.56e-01  
  5  +4.9733e-01  +8.7568e-01  3.78e-01  4.47e-03  3.30e-01  4.54e-05  1.36e-02  9.65e-01  
  6  +4.8350e-01  +7.8033e-01  2.97e-01  1.12e-03  8.37e-02  1.34e-04  3.06e-03  7.85e-01  
  7  +4.7099e-01  +7.2377e-01  2.53e-01  6.72e-04  5.02e-02  1.44e-04  1.86e-03  4.86e-01  
  8  +4.4691e-01  +6.2315e-01  1.76e-01  3.84e-04  2.86e-02  9.61e-05  1.11e-03  6.64e-01  
  9  +4.2630e-01  +5.3281e-01  1.07e-01  2.17e-04  1.61e-02  5.52e-05  6.59e-04  5.01e-01  
 10  +4.1769e-01  +4.9373e-01  7.60e-02  1.55e-04  1.15e-02  4.18e-05  4.79e-04  6.14e-01  
 11  +4.1592e-01  +4.8745e-01  7.15e-02  1.38e-04  1.03e-02  4.54e-05  4.24e-04  6.01e-01  
 12  +4.0003e-01  +4.2197e-01  2.19e-02  4.15e-05  3.10e-03  1.37e-05  1.33e-04  7.28e-01  
 13  +3.9873e-01  +4.1739e-01  1.87e-02  3.41e-05  2.56e-03  1.20e-05  1.09e-04  2.53e-01  
 14  +3.9709e-01  +4.1090e-01  1.38e-02  2.50e-05  1.89e-03  9.23e-06  8.01e-05  5.52e-01  
 15  +3.9346e-01  +3.9779e-01  4.34e-03  7.71e-06  5.90e-04  2.94e-06  2.49e-05  7.77e-01  
 16  +3.9194e-01  +3.9270e-01  7.61e-04  1.31e-06  1.02e-04  5.50e-07  4.28e-06  9.90e-01  
 17  +3.9160e-01  +3.9161e-01  8.53e-06  1.46e-08  1.15e-06  6.18e-09  4.79e-08  9.89e-01  
 18  +3.9160e-01  +3.9160e-01  8.53e-08  1.46e-10  1.15e-08  6.18e-11  4.79e-10  9.90e-01  
 19  +3.9160e-01  +3.9160e-01  8.53e-10  1.46e-12  1.15e-10  6.18e-13  4.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.3361ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:44 PM: Optimal value: 3.916e-01
(CVXPY) Oct 06 04:08:44 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:08:44 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 3, Objective: 0.3916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:45 PM: Your problem has 547 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Finished problem compilation (took 1.513e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 547
  constraints   = 1047
  nnz(P)        = 0
  nnz(A)        = 7307
  cones (total) = 1
    : Nonnegative = 1,  numel = 1047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0148e+02  5.01e+02  9.56e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.7897e-01  +1.0777e+02  1.07e+02  4.10e-01  2.23e+01  3.81e-03  5.70e-01  5.95e-01  
  2  +5.2824e-01  +1.1811e+01  1.13e+01  1.28e-01  8.88e+00  1.60e-02  2.43e-01  9.79e-01  
  3  +5.0354e-01  +2.5781e+00  2.07e+00  4.35e-02  3.01e+00  3.99e-05  1.80e-01  7.40e-01  
  4  +5.0001e-01  +1.3195e+00  8.20e-01  1.62e-02  1.17e+00  3.02e-05  6.50e-02  6.70e-01  
  5  +4.8159e-01  +1.2003e+00  7.19e-01  3.10e-03  2.33e-01  1.69e-04  8.12e-03  9.12e-01  
  6  +4.6483e-01  +1.0104e+00  5.46e-01  1.77e-03  1.33e-01  1.62e-04  4.79e-03  5.27e-01  
  7  +4.4380e-01  +8.3661e-01  3.93e-01  9.91e-04  7.38e-02  1.44e-04  2.78e-03  5.39e-01  
  8  +4.2670e-01  +7.1840e-01  2.92e-01  6.80e-04  5.05e-02  1.17e-04  1.98e-03  5.03e-01  
  9  +3.9139e-01  +4.8617e-01  9.48e-02  2.17e-04  1.60e-02  4.13e-05  7.14e-04  9.90e-01  
 10  +3.7531e-01  +4.0951e-01  3.42e-02  7.53e-05  5.54e-03  1.48e-05  2.64e-04  6.83e-01  
 11  +3.7178e-01  +3.9446e-01  2.27e-02  4.63e-05  3.44e-03  1.17e-05  1.64e-04  6.68e-01  
 12  +3.6884e-01  +3.8337e-01  1.45e-02  2.85e-05  2.12e-03  7.63e-06  1.03e-04  5.06e-01  
 13  +3.6428e-01  +3.6578e-01  1.50e-03  2.84e-06  2.12e-04  8.49e-07  1.07e-05  9.70e-01  
 14  +3.6371e-01  +3.6372e-01  1.77e-05  3.33e-08  2.49e-06  9.93e-09  1.26e-07  9.88e-01  
 15  +3.6370e-01  +3.6370e-01  1.77e-07  3.33e-10  2.49e-08  9.93e-11  1.26e-09  9.90e-01  
 16  +3.6370e-01  +3.6370e-01  1.77e-09  3.33e-12  2.49e-10  9.94e-13  1.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.9865ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:45 PM: Optimal value: 3.637e-01
(CVXPY) Oct 06 04:08:45 PM: Compilation took 1.513e-02 seconds
(CVXPY) Oct 06 04:08:45 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 4, Objective: 0.3637
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:45 PM: Your problem has 557 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 1057
  nnz(P)        = 0
  nnz(A)        = 7614
  cones (total) = 1
    : Nonnegative = 1,  numel = 1057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0157e+02  5.01e+02  9.56e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.7767e-01  +1.0785e+02  1.07e+02  4.11e-01  2.22e+01  3.81e-03  5.70e-01  5.95e-01  
  2  +5.2738e-01  +1.1646e+01  1.11e+01  1.26e-01  8.68e+00  1.62e-02  2.39e-01  9.90e-01  
  3  +5.0329e-01  +2.5212e+00  2.02e+00  4.23e-02  2.94e+00  4.19e-05  1.68e-01  7.96e-01  
  4  +4.9948e-01  +1.3939e+00  8.94e-01  1.65e-02  1.20e+00  3.84e-05  5.80e-02  6.87e-01  
  5  +4.8384e-01  +1.2104e+00  7.27e-01  3.81e-03  2.88e-01  1.43e-04  1.00e-02  8.55e-01  
  6  +4.7823e-01  +1.1941e+00  7.16e-01  2.76e-03  2.08e-01  1.98e-04  7.16e-03  6.06e-01  
  7  +4.4795e-01  +8.7894e-01  4.31e-01  1.08e-03  8.11e-02  1.84e-04  2.95e-03  8.00e-01  
  8  +4.3101e-01  +7.7256e-01  3.42e-01  8.41e-04  6.28e-02  1.40e-04  2.39e-03  3.59e-01  
  9  +3.8693e-01  +5.1574e-01  1.29e-01  2.83e-04  2.09e-02  4.42e-05  9.01e-04  7.05e-01  
 10  +3.6878e-01  +4.2551e-01  5.67e-02  1.22e-04  9.02e-03  2.79e-05  4.13e-04  7.94e-01  
 11  +3.6280e-01  +3.9714e-01  3.43e-02  7.34e-05  5.42e-03  1.79e-05  2.55e-04  5.96e-01  
 12  +3.5605e-01  +3.6633e-01  1.03e-02  2.16e-05  1.59e-03  5.81e-06  7.79e-05  9.29e-01  
 13  +3.5319e-01  +3.5527e-01  2.08e-03  4.29e-06  3.19e-04  1.15e-06  1.61e-05  9.14e-01  
 14  +3.5246e-01  +3.5249e-01  3.03e-05  6.20e-08  4.61e-06  1.66e-08  2.35e-07  9.86e-01  
 15  +3.5245e-01  +3.5245e-01  3.03e-07  6.20e-10  4.61e-08  1.66e-10  2.35e-09  9.90e-01  
 16  +3.5245e-01  +3.5245e-01  3.03e-09  6.20e-12  4.61e-10  1.66e-12  2.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.293ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:45 PM: Optimal value: 3.525e-01
(CVXPY) Oct 06 04:08:45 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:08:45 PM: Solver (including time spent in interface) took 1.569e-02 seconds
Iteration: 5, Objective: 0.3525
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:45 PM: Your problem has 567 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 567
  constraints   = 1067
  nnz(P)        = 0
  nnz(A)        = 7832
  cones (total) = 1
    : Nonnegative = 1,  numel = 1067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0157e+02  5.01e+02  9.56e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.7618e-01  +1.0790e+02  1.07e+02  4.12e-01  2.21e+01  3.81e-03  5.70e-01  5.95e-01  
  2  +5.2654e-01  +1.1752e+01  1.12e+01  1.26e-01  8.60e+00  1.63e-02  2.38e-01  9.90e-01  
  3  +5.0401e-01  +2.4260e+00  1.92e+00  4.09e-02  2.89e+00  4.88e-05  1.37e-01  8.64e-01  
  4  +4.9897e-01  +1.4531e+00  9.54e-01  1.43e-02  1.06e+00  6.19e-05  4.10e-02  7.32e-01  
  5  +4.8658e-01  +1.2848e+00  7.98e-01  4.46e-03  3.38e-01  1.51e-04  1.14e-02  7.37e-01  
  6  +4.7318e-01  +1.2003e+00  7.27e-01  2.55e-03  1.93e-01  2.25e-04  6.57e-03  7.19e-01  
  7  +4.4880e-01  +9.8932e-01  5.41e-01  1.44e-03  1.08e-01  2.08e-04  3.85e-03  5.65e-01  
  8  +4.1215e-01  +7.1769e-01  3.06e-01  7.62e-04  5.66e-02  1.12e-04  2.23e-03  7.10e-01  
  9  +3.8232e-01  +5.5412e-01  1.72e-01  4.08e-04  3.01e-02  8.22e-05  1.30e-03  9.90e-01  
 10  +3.5167e-01  +3.9610e-01  4.44e-02  9.92e-05  7.29e-03  1.83e-05  3.51e-04  7.58e-01  
 11  +3.4577e-01  +3.7070e-01  2.49e-02  5.42e-05  3.97e-03  1.07e-05  2.00e-04  5.21e-01  
 12  +3.4212e-01  +3.5439e-01  1.23e-02  2.62e-05  1.92e-03  5.59e-06  9.93e-05  6.29e-01  
 13  +3.3905e-01  +3.4196e-01  2.90e-03  6.01e-06  4.41e-04  1.48e-06  2.38e-05  9.90e-01  
 14  +3.3806e-01  +3.3822e-01  1.64e-04  3.35e-07  2.46e-05  8.19e-08  1.36e-06  9.47e-01  
 15  +3.3800e-01  +3.3800e-01  1.80e-06  3.67e-09  2.69e-07  8.98e-10  1.49e-08  9.89e-01  
 16  +3.3800e-01  +3.3800e-01  1.80e-08  3.67e-11  2.69e-09  8.99e-12  1.49e-10  9.90e-01  
 17  +3.3800e-01  +3.3800e-01  1.80e-10  3.67e-13  2.69e-11  9.04e-14  1.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.3904ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:45 PM: Optimal value: 3.380e-01
(CVXPY) Oct 06 04:08:45 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:08:45 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 6, Objective: 0.3380
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:45 PM: Your problem has 577 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Finished problem compilation (took 1.554e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 577
  constraints   = 1077
  nnz(P)        = 0
  nnz(A)        = 7980
  cones (total) = 1
    : Nonnegative = 1,  numel = 1077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0159e+02  5.01e+02  9.57e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7555e-01  +1.0786e+02  1.07e+02  4.13e-01  2.19e+01  3.82e-03  5.69e-01  5.95e-01  
  2  +5.2591e-01  +1.1799e+01  1.13e+01  1.26e-01  8.50e+00  1.64e-02  2.37e-01  9.90e-01  
  3  +5.0423e-01  +2.2418e+00  1.74e+00  3.68e-02  2.63e+00  5.26e-05  1.14e-01  9.18e-01  
  4  +4.9567e-01  +1.4990e+00  1.00e+00  8.04e-03  6.08e-01  1.46e-04  2.03e-02  8.94e-01  
  5  +4.7631e-01  +1.2512e+00  7.75e-01  2.91e-03  2.21e-01  2.42e-04  7.36e-03  6.93e-01  
  6  +4.5428e-01  +1.1143e+00  6.60e-01  1.74e-03  1.31e-01  2.72e-04  4.54e-03  5.04e-01  
  7  +4.1576e-01  +7.9196e-01  3.76e-01  9.41e-04  6.98e-02  1.42e-04  2.70e-03  7.18e-01  
  8  +3.8258e-01  +5.8454e-01  2.02e-01  4.72e-04  3.48e-02  7.23e-05  1.48e-03  5.07e-01  
  9  +3.4912e-01  +4.0873e-01  5.96e-02  1.33e-04  9.75e-03  2.81e-05  4.73e-04  9.32e-01  
 10  +3.3918e-01  +3.6487e-01  2.57e-02  5.59e-05  4.08e-03  1.22e-05  2.11e-04  6.35e-01  
 11  +3.3275e-01  +3.3745e-01  4.71e-03  9.98e-06  7.30e-04  2.38e-06  4.00e-05  9.90e-01  
 12  +3.3123e-01  +3.3159e-01  3.60e-04  7.55e-07  5.51e-05  1.76e-07  3.11e-06  9.31e-01  
 13  +3.3110e-01  +3.3111e-01  5.69e-06  1.19e-08  8.68e-07  2.76e-09  4.93e-08  9.87e-01  
 14  +3.3110e-01  +3.3110e-01  5.70e-08  1.19e-10  8.69e-09  2.76e-11  4.93e-10  9.90e-01  
 15  +3.3110e-01  +3.3110e-01  5.70e-10  1.19e-12  8.69e-11  2.78e-13  4.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.2468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:45 PM: Optimal value: 3.311e-01
(CVXPY) Oct 06 04:08:45 PM: Compilation took 1.554e-02 seconds
(CVXPY) Oct 06 04:08:45 PM: Solver (including time spent in interface) took 1.570e-02 seconds
Iteration: 7, Objective: 0.3311
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:45 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:45 PM: Finished problem compilation (took 1.308e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 8155
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0164e+02  5.01e+02  9.57e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7533e-01  +1.0787e+02  1.07e+02  4.14e-01  2.17e+01  3.82e-03  5.69e-01  5.95e-01  
  2  +5.2558e-01  +1.1805e+01  1.13e+01  1.26e-01  8.41e+00  1.64e-02  2.37e-01  9.90e-01  
  3  +5.0429e-01  +2.1556e+00  1.65e+00  3.47e-02  2.48e+00  5.43e-05  1.05e-01  9.37e-01  
  4  +4.9832e-01  +1.8679e+00  1.37e+00  1.16e-02  8.75e-01  1.45e-04  2.89e-02  7.91e-01  
  5  +4.8022e-01  +1.4871e+00  1.01e+00  3.88e-03  2.94e-01  2.34e-04  9.69e-03  6.80e-01  
  6  +4.5905e-01  +1.2656e+00  8.07e-01  2.29e-03  1.72e-01  2.66e-04  5.95e-03  5.82e-01  
  7  +4.3905e-01  +1.0519e+00  6.13e-01  1.59e-03  1.18e-01  2.21e-04  4.30e-03  4.60e-01  
  8  +4.0661e-01  +7.6811e-01  3.62e-01  8.82e-04  6.50e-02  1.37e-04  2.59e-03  6.55e-01  
  9  +3.8354e-01  +6.1542e-01  2.32e-01  5.71e-04  4.18e-02  1.12e-04  1.84e-03  9.90e-01  
 10  +3.4882e-01  +4.2910e-01  8.03e-02  1.81e-04  1.32e-02  3.50e-05  6.51e-04  6.97e-01  
 11  +3.3551e-01  +3.6977e-01  3.43e-02  7.48e-05  5.46e-03  1.55e-05  2.91e-04  6.74e-01  
 12  +3.2628e-01  +3.2940e-01  3.12e-03  6.72e-06  4.89e-04  1.43e-06  2.80e-05  9.78e-01  
 13  +3.2530e-01  +3.2556e-01  2.69e-04  5.76e-07  4.19e-05  1.22e-07  2.45e-06  9.35e-01  
 14  +3.2520e-01  +3.2520e-01  2.71e-06  5.80e-09  4.22e-07  1.22e-09  2.47e-08  9.90e-01  
 15  +3.2520e-01  +3.2520e-01  2.71e-08  5.80e-11  4.21e-09  1.22e-11  2.47e-10  9.90e-01  
 16  +3.2520e-01  +3.2520e-01  2.71e-10  5.80e-13  4.22e-11  1.23e-13  2.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.3023ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:45 PM: Optimal value: 3.252e-01
(CVXPY) Oct 06 04:08:45 PM: Compilation took 1.308e-02 seconds
(CVXPY) Oct 06 04:08:45 PM: Solver (including time spent in interface) took 1.571e-02 seconds
Iteration: 8, Objective: 0.3252
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:46 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Finished problem compilation (took 1.638e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 8457
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0159e+02  5.01e+02  9.57e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7441e-01  +1.0792e+02  1.07e+02  4.15e-01  2.16e+01  3.82e-03  5.69e-01  5.95e-01  
  2  +5.2487e-01  +1.1857e+01  1.13e+01  1.26e-01  8.36e+00  1.65e-02  2.37e-01  9.90e-01  
  3  +5.0485e-01  +2.1582e+00  1.65e+00  3.32e-02  2.40e+00  3.85e-04  9.38e-02  9.15e-01  
  4  +5.0192e-01  +2.1533e+00  1.65e+00  1.63e-02  1.22e+00  7.59e-04  3.99e-02  6.34e-01  
  5  +4.8882e-01  +1.8081e+00  1.32e+00  5.74e-03  4.37e-01  1.26e-03  1.40e-02  6.75e-01  
  6  +4.7084e-01  +1.4480e+00  9.77e-01  3.47e-03  2.61e-01  8.94e-04  8.80e-03  4.76e-01  
  7  +4.5207e-01  +1.2606e+00  8.09e-01  2.24e-03  1.68e-01  8.20e-04  5.84e-03  3.94e-01  
  8  +4.3030e-01  +1.0386e+00  6.08e-01  1.50e-03  1.12e-01  5.34e-04  4.09e-03  4.45e-01  
  9  +4.0487e-01  +7.9029e-01  3.85e-01  9.89e-04  7.28e-02  1.74e-04  2.93e-03  7.43e-01  
 10  +3.5494e-01  +4.6480e-01  1.10e-01  2.55e-04  1.86e-02  3.30e-05  8.72e-04  7.59e-01  
 11  +3.3667e-01  +3.7867e-01  4.20e-02  9.56e-05  6.97e-03  1.60e-05  3.57e-04  7.38e-01  
 12  +3.3009e-01  +3.4899e-01  1.89e-02  4.25e-05  3.10e-03  8.02e-06  1.66e-04  7.05e-01  
 13  +3.2494e-01  +3.2689e-01  1.95e-03  4.34e-06  3.17e-04  8.14e-07  1.79e-05  9.15e-01  
 14  +3.2466e-01  +3.2571e-01  1.05e-03  2.30e-06  1.69e-04  4.64e-07  9.58e-06  8.29e-01  
 15  +3.2431e-01  +3.2432e-01  1.77e-05  3.89e-08  2.84e-06  7.75e-09  1.63e-07  9.83e-01  
 16  +3.2430e-01  +3.2430e-01  1.77e-07  3.89e-10  2.84e-08  7.75e-11  1.63e-09  9.90e-01  
 17  +3.2430e-01  +3.2430e-01  1.77e-09  3.89e-12  2.84e-10  7.78e-13  1.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.5227ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:46 PM: Optimal value: 3.243e-01
(CVXPY) Oct 06 04:08:46 PM: Compilation took 1.638e-02 seconds
(CVXPY) Oct 06 04:08:46 PM: Solver (including time spent in interface) took 1.508e-02 seconds
Iteration: 9, Objective: 0.3243
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:46 PM: Your problem has 602 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 602
  constraints   = 1102
  nnz(P)        = 0
  nnz(A)        = 8564
  cones (total) = 1
    : Nonnegative = 1,  numel = 1102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0163e+02  5.01e+02  9.57e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7282e-01  +1.0804e+02  1.07e+02  4.16e-01  2.16e+01  3.82e-03  5.70e-01  5.94e-01  
  2  +5.2401e-01  +1.1975e+01  1.15e+01  1.26e-01  8.35e+00  1.67e-02  2.37e-01  9.90e-01  
  3  +5.0509e-01  +2.0041e+00  1.50e+00  2.86e-02  2.09e+00  4.81e-04  7.73e-02  9.23e-01  
  4  +5.0438e-01  +2.1160e+00  1.61e+00  1.87e-02  1.41e+00  7.84e-04  4.57e-02  4.55e-01  
  5  +4.9638e-01  +2.1802e+00  1.68e+00  8.46e-03  6.45e-01  1.31e-03  2.00e-02  7.50e-01  
  6  +4.7166e-01  +1.3770e+00  9.05e-01  3.43e-03  2.58e-01  6.13e-04  8.67e-03  7.03e-01  
  7  +4.5729e-01  +1.2844e+00  8.27e-01  2.43e-03  1.82e-01  6.03e-04  6.23e-03  4.27e-01  
  8  +4.4104e-01  +1.1491e+00  7.08e-01  1.83e-03  1.36e-01  4.84e-04  4.83e-03  4.05e-01  
  9  +4.1869e-01  +9.3057e-01  5.12e-01  1.37e-03  1.01e-01  2.60e-04  3.88e-03  4.35e-01  
 10  +3.7167e-01  +5.8704e-01  2.15e-01  5.27e-04  3.84e-02  8.20e-05  1.69e-03  6.79e-01  
 11  +3.4157e-01  +4.2103e-01  7.95e-02  1.90e-04  1.38e-02  2.96e-05  6.89e-04  6.73e-01  
 12  +3.3445e-01  +3.8434e-01  4.99e-02  1.18e-04  8.58e-03  2.01e-05  4.51e-04  6.10e-01  
 13  +3.3252e-01  +3.7377e-01  4.13e-02  9.73e-05  7.07e-03  1.76e-05  3.75e-04  3.97e-01  
 14  +3.2957e-01  +3.6127e-01  3.17e-02  7.33e-05  5.33e-03  1.44e-05  2.86e-04  4.82e-01  
 15  +3.2258e-01  +3.2973e-01  7.15e-03  1.64e-05  1.19e-03  3.18e-06  6.77e-05  7.95e-01  
 16  +3.2094e-01  +3.2266e-01  1.72e-03  3.90e-06  2.84e-04  7.57e-07  1.66e-05  8.12e-01  
 17  +3.2058e-01  +3.2111e-01  5.23e-04  1.18e-06  8.62e-05  2.25e-07  5.06e-06  9.90e-01  
 18  +3.2040e-01  +3.2041e-01  6.31e-06  1.42e-08  1.04e-06  2.71e-09  6.11e-08  9.88e-01  
 19  +3.2040e-01  +3.2040e-01  6.31e-08  1.42e-10  1.04e-08  2.71e-11  6.11e-10  9.90e-01  
 20  +3.2040e-01  +3.2040e-01  6.31e-10  1.42e-12  1.04e-10  2.71e-13  6.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.3515ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:46 PM: Optimal value: 3.204e-01
(CVXPY) Oct 06 04:08:46 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:08:46 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 10, Objective: 0.3204
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:46 PM: Your problem has 612 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 612
  constraints   = 1112
  nnz(P)        = 0
  nnz(A)        = 8712
  cones (total) = 1
    : Nonnegative = 1,  numel = 1112

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0163e+02  5.01e+02  9.57e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.7166e-01  +1.0804e+02  1.07e+02  4.17e-01  2.15e+01  3.82e-03  5.70e-01  5.95e-01  
  2  +5.2302e-01  +1.2062e+01  1.15e+01  1.25e-01  8.28e+00  1.68e-02  2.36e-01  9.90e-01  
  3  +5.0614e-01  +2.4148e+00  1.91e+00  3.29e-02  2.41e+00  1.47e-03  8.33e-02  8.13e-01  
  4  +5.0575e-01  +2.4481e+00  1.94e+00  2.50e-02  1.86e+00  1.93e-03  6.02e-02  2.93e-01  
  5  +5.0277e-01  +2.3252e+00  1.82e+00  2.28e-02  1.68e+00  1.37e-03  5.86e-02  2.00e-01  
  6  +4.9115e-01  +2.0104e+00  1.52e+00  6.47e-03  4.95e-01  3.32e-03  1.53e-02  7.49e-01  
  7  +4.7280e-01  +1.6661e+00  1.19e+00  4.07e-03  3.07e-01  2.47e-03  9.99e-03  4.57e-01  
  8  +4.5571e-01  +1.4861e+00  1.03e+00  2.80e-03  2.10e-01  2.09e-03  7.06e-03  4.16e-01  
  9  +4.1600e-01  +9.3049e-01  5.14e-01  1.44e-03  1.06e-01  1.81e-05  4.06e-03  7.68e-01  
 10  +3.7188e-01  +6.1959e-01  2.48e-01  6.43e-04  4.66e-02  2.40e-05  2.05e-03  5.66e-01  
 11  +3.5136e-01  +5.0056e-01  1.49e-01  3.81e-04  2.75e-02  1.94e-05  1.31e-03  4.20e-01  
 12  +3.4193e-01  +4.4834e-01  1.06e-01  2.65e-04  1.91e-02  2.53e-05  9.49e-04  5.00e-01  
 13  +3.2565e-01  +3.5963e-01  3.40e-02  8.25e-05  5.96e-03  1.39e-05  3.20e-04  9.04e-01  
 14  +3.2003e-01  +3.3168e-01  1.17e-02  2.79e-05  2.02e-03  5.12e-06  1.12e-04  9.02e-01  
 15  +3.1748e-01  +3.2061e-01  3.13e-03  7.39e-06  5.35e-04  1.35e-06  3.07e-05  8.31e-01  
 16  +3.1679e-01  +3.1767e-01  8.83e-04  2.06e-06  1.50e-04  3.74e-07  8.81e-06  7.69e-01  
 17  +3.1661e-01  +3.1693e-01  3.18e-04  7.36e-07  5.35e-05  1.32e-07  3.17e-06  9.90e-01  
 18  +3.1650e-01  +3.1651e-01  5.29e-06  1.22e-08  8.88e-07  2.18e-09  5.29e-08  9.84e-01  
 19  +3.1650e-01  +3.1650e-01  5.29e-08  1.22e-10  8.88e-09  2.19e-11  5.29e-10  9.90e-01  
 20  +3.1650e-01  +3.1650e-01  5.29e-10  1.22e-12  8.88e-11  2.19e-13  5.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.9066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:46 PM: Optimal value: 3.165e-01
(CVXPY) Oct 06 04:08:46 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:08:46 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 11, Objective: 0.3165
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:46 PM: Your problem has 622 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Finished problem compilation (took 4.439e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 622
  constraints   = 1122
  nnz(P)        = 0
  nnz(A)        = 8926
  cones (total) = 1
    : Nonnegative = 1,  numel = 1122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9924e-01  +5.0165e+02  5.01e+02  9.57e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.7092e-01  +1.0807e+02  1.08e+02  4.18e-01  2.14e+01  3.83e-03  5.69e-01  5.95e-01  
  2  +5.2249e-01  +1.2087e+01  1.16e+01  1.25e-01  8.20e+00  1.68e-02  2.36e-01  9.90e-01  
  3  +5.0657e-01  +2.6662e+00  2.16e+00  3.55e-02  2.59e+00  2.03e-03  8.76e-02  7.63e-01  
  4  +5.0596e-01  +2.6621e+00  2.16e+00  2.72e-02  2.01e+00  2.56e-03  6.48e-02  2.72e-01  
  5  +5.0287e-01  +2.5084e+00  2.01e+00  2.48e-02  1.82e+00  1.77e-03  6.28e-02  2.08e-01  
  6  +4.9109e-01  +2.1041e+00  1.61e+00  7.22e-03  5.50e-01  3.89e-03  1.71e-02  7.37e-01  
  7  +4.7190e-01  +1.6603e+00  1.19e+00  4.42e-03  3.32e-01  2.48e-03  1.10e-02  4.82e-01  
  8  +4.5375e-01  +1.4912e+00  1.04e+00  2.91e-03  2.18e-01  2.30e-03  7.40e-03  4.25e-01  
  9  +4.3679e-01  +1.2550e+00  8.18e-01  2.24e-03  1.67e-01  1.23e-03  5.95e-03  3.95e-01  
 10  +3.8572e-01  +7.1186e-01  3.26e-01  8.58e-04  6.22e-02  3.83e-05  2.61e-03  8.44e-01  
 11  +3.5166e-01  +5.0538e-01  1.54e-01  3.94e-04  2.84e-02  2.38e-05  1.35e-03  5.52e-01  
 12  +3.3575e-01  +4.1988e-01  8.41e-02  2.09e-04  1.51e-02  1.70e-05  7.66e-04  5.18e-01  
 13  +3.2723e-01  +3.7441e-01  4.72e-02  1.15e-04  8.32e-03  1.59e-05  4.37e-04  7.15e-01  
 14  +3.1999e-01  +3.3822e-01  1.82e-02  4.41e-05  3.19e-03  6.53e-06  1.75e-04  6.81e-01  
 15  +3.1777e-01  +3.2717e-01  9.40e-03  2.24e-05  1.62e-03  3.72e-06  8.98e-05  6.92e-01  
 16  +3.1656e-01  +3.2142e-01  4.86e-03  1.15e-05  8.34e-04  2.08e-06  4.61e-05  8.46e-01  
 17  +3.1561e-01  +3.1760e-01  1.99e-03  4.57e-06  3.37e-04  8.72e-07  1.86e-05  6.94e-01  
 18  +3.1498e-01  +3.1521e-01  2.33e-04  5.18e-07  3.87e-05  1.03e-07  2.16e-06  9.26e-01  
 19  +3.1490e-01  +3.1490e-01  2.96e-06  6.58e-09  4.92e-07  1.31e-09  2.74e-08  9.87e-01  
 20  +3.1490e-01  +3.1490e-01  2.97e-08  6.59e-11  4.93e-09  1.31e-11  2.75e-10  9.90e-01  
 21  +3.1490e-01  +3.1490e-01  2.97e-10  6.59e-13  4.93e-11  1.31e-13  2.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.3724ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:46 PM: Optimal value: 3.149e-01
(CVXPY) Oct 06 04:08:46 PM: Compilation took 4.439e-03 seconds
(CVXPY) Oct 06 04:08:46 PM: Solver (including time spent in interface) took 3.625e-02 seconds
Iteration: 12, Objective: 0.3149
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:46 PM: Your problem has 628 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:46 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 628
  constraints   = 1128
  nnz(P)        = 0
  nnz(A)        = 9036
  cones (total) = 1
    : Nonnegative = 1,  numel = 1128

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0171e+02  5.01e+02  9.58e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7043e-01  +1.0813e+02  1.08e+02  4.19e-01  2.13e+01  3.83e-03  5.69e-01  5.94e-01  
  2  +5.2209e-01  +1.2131e+01  1.16e+01  1.26e-01  8.15e+00  1.69e-02  2.36e-01  9.90e-01  
  3  +5.0675e-01  +2.7917e+00  2.28e+00  3.64e-02  2.64e+00  2.35e-03  8.84e-02  7.40e-01  
  4  +5.0608e-01  +2.7774e+00  2.27e+00  2.82e-02  2.08e+00  2.90e-03  6.68e-02  2.54e-01  
  5  +5.0291e-01  +2.6244e+00  2.12e+00  2.58e-02  1.88e+00  2.01e-03  6.46e-02  2.18e-01  
  6  +4.9073e-01  +2.1825e+00  1.69e+00  7.59e-03  5.78e-01  4.24e-03  1.79e-02  7.33e-01  
  7  +4.6986e-01  +1.6524e+00  1.18e+00  4.45e-03  3.34e-01  2.44e-03  1.11e-02  5.11e-01  
  8  +4.5188e-01  +1.5009e+00  1.05e+00  2.96e-03  2.21e-01  2.34e-03  7.57e-03  4.10e-01  
  9  +4.3710e-01  +1.2960e+00  8.59e-01  2.38e-03  1.76e-01  1.43e-03  6.29e-03  3.30e-01  
 10  +3.9216e-01  +7.8361e-01  3.91e-01  1.07e-03  7.74e-02  1.29e-05  3.20e-03  8.73e-01  
 11  +3.5705e-01  +5.4505e-01  1.88e-01  4.95e-04  3.55e-02  1.42e-05  1.67e-03  5.33e-01  
 12  +3.3386e-01  +4.1143e-01  7.76e-02  1.95e-04  1.40e-02  1.99e-05  7.17e-04  7.70e-01  
 13  +3.2705e-01  +3.7542e-01  4.84e-02  1.19e-04  8.59e-03  1.57e-05  4.50e-04  5.79e-01  
 14  +3.2024e-01  +3.4158e-01  2.13e-02  5.15e-05  3.72e-03  7.39e-06  2.02e-04  6.28e-01  
 15  +3.1668e-01  +3.2318e-01  6.50e-03  1.56e-05  1.13e-03  2.63e-06  6.29e-05  8.94e-01  
 16  +3.1510e-01  +3.1609e-01  9.97e-04  2.40e-06  1.73e-04  4.03e-07  9.85e-06  9.07e-01  
 17  +3.1483e-01  +3.1494e-01  1.06e-04  2.56e-07  1.84e-05  4.30e-08  1.06e-06  9.02e-01  
 18  +3.1480e-01  +3.1480e-01  1.19e-06  2.87e-09  2.06e-07  4.81e-10  1.18e-08  9.89e-01  
 19  +3.1480e-01  +3.1480e-01  1.20e-08  2.88e-11  2.07e-09  4.83e-12  1.19e-10  9.90e-01  
 20  +3.1480e-01  +3.1480e-01  1.20e-10  2.88e-13  2.08e-11  4.83e-14  1.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.0724ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:46 PM: Optimal value: 3.148e-01
(CVXPY) Oct 06 04:08:46 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:08:46 PM: Solver (including time spent in interface) took 3.162e-02 seconds
Iteration: 13, Objective: 0.3148
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:47 PM: Your problem has 630 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Finished problem compilation (took 1.560e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 630
  constraints   = 1130
  nnz(P)        = 0
  nnz(A)        = 9092
  cones (total) = 1
    : Nonnegative = 1,  numel = 1130

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +5.0172e+02  5.01e+02  9.58e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7024e-01  +1.0811e+02  1.08e+02  4.18e-01  2.13e+01  3.83e-03  5.68e-01  5.95e-01  
  2  +5.2195e-01  +1.2124e+01  1.16e+01  1.25e-01  8.13e+00  1.69e-02  2.35e-01  9.90e-01  
  3  +5.0671e-01  +2.7947e+00  2.29e+00  3.60e-02  2.62e+00  2.40e-03  8.73e-02  7.38e-01  
  4  +5.0605e-01  +2.7853e+00  2.28e+00  2.81e-02  2.08e+00  2.95e-03  6.65e-02  2.48e-01  
  5  +5.0291e-01  +2.6457e+00  2.14e+00  2.58e-02  1.89e+00  2.07e-03  6.42e-02  2.22e-01  
  6  +4.9070e-01  +2.2071e+00  1.72e+00  7.71e-03  5.87e-01  4.32e-03  1.82e-02  7.26e-01  
  7  +4.6832e-01  +1.6259e+00  1.16e+00  4.38e-03  3.28e-01  2.28e-03  1.10e-02  5.37e-01  
  8  +4.4896e-01  +1.4844e+00  1.04e+00  2.84e-03  2.12e-01  2.29e-03  7.27e-03  4.28e-01  
  9  +4.2237e-01  +1.1025e+00  6.80e-01  1.91e-03  1.41e-01  4.91e-04  5.27e-03  6.22e-01  
 10  +3.6836e-01  +6.1293e-01  2.45e-01  6.35e-04  4.57e-02  9.41e-05  2.04e-03  7.10e-01  
 11  +3.4137e-01  +4.5882e-01  1.17e-01  3.01e-04  2.16e-02  4.77e-05  1.08e-03  6.29e-01  
 12  +3.3744e-01  +4.3743e-01  1.00e-01  2.51e-04  1.80e-02  4.20e-05  9.19e-04  2.65e-01  
 13  +3.2515e-01  +3.6974e-01  4.46e-02  1.09e-04  7.82e-03  1.96e-05  4.24e-04  6.70e-01  
 14  +3.1871e-01  +3.3552e-01  1.68e-02  4.05e-05  2.91e-03  7.57e-06  1.64e-04  8.82e-01  
 15  +3.1592e-01  +3.2282e-01  6.90e-03  1.65e-05  1.18e-03  3.07e-06  6.81e-05  6.60e-01  
 16  +3.1438e-01  +3.1579e-01  1.41e-03  3.35e-06  2.40e-04  5.71e-07  1.43e-05  9.90e-01  
 17  +3.1399e-01  +3.1424e-01  2.56e-04  5.95e-07  4.26e-05  1.00e-07  2.66e-06  9.00e-01  
 18  +3.1391e-01  +3.1392e-01  1.66e-05  3.82e-08  2.74e-06  6.45e-09  1.74e-07  9.39e-01  
 19  +3.1390e-01  +3.1390e-01  1.70e-07  3.90e-10  2.80e-08  6.59e-11  1.79e-09  9.90e-01  
 20  +3.1390e-01  +3.1390e-01  1.70e-09  3.90e-12  2.80e-10  6.60e-13  1.79e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.0778ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:47 PM: Optimal value: 3.139e-01
(CVXPY) Oct 06 04:08:47 PM: Compilation took 1.560e-02 seconds
(CVXPY) Oct 06 04:08:47 PM: Solver (including time spent in interface) took 3.161e-02 seconds
Iteration: 14, Objective: 0.3139
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:47 PM: Your problem has 640 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Finished problem compilation (took 1.451e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 640
  constraints   = 1140
  nnz(P)        = 0
  nnz(A)        = 9198
  cones (total) = 1
    : Nonnegative = 1,  numel = 1140

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0172e+02  5.01e+02  9.58e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.6955e-01  +1.0818e+02  1.08e+02  4.19e-01  2.12e+01  3.83e-03  5.68e-01  5.94e-01  
  2  +5.2149e-01  +1.2176e+01  1.17e+01  1.25e-01  8.07e+00  1.70e-02  2.35e-01  9.90e-01  
  3  +5.0683e-01  +2.8867e+00  2.38e+00  3.64e-02  2.63e+00  2.64e-03  8.73e-02  7.22e-01  
  4  +5.0614e-01  +2.8667e+00  2.36e+00  2.87e-02  2.11e+00  3.18e-03  6.75e-02  2.35e-01  
  5  +5.0299e-01  +2.7375e+00  2.23e+00  2.63e-02  1.92e+00  2.25e-03  6.49e-02  2.35e-01  
  6  +4.9062e-01  +2.2587e+00  1.77e+00  7.92e-03  6.01e-01  4.54e-03  1.87e-02  7.21e-01  
  7  +4.6684e-01  +1.6530e+00  1.19e+00  4.31e-03  3.22e-01  2.49e-03  1.08e-02  5.59e-01  
  8  +4.4852e-01  +1.5091e+00  1.06e+00  2.91e-03  2.16e-01  2.24e-03  7.44e-03  4.53e-01  
  9  +4.2083e-01  +1.0454e+00  6.25e-01  1.93e-03  1.41e-01  2.42e-04  5.45e-03  6.05e-01  
 10  +3.8355e-01  +7.4441e-01  3.61e-01  1.00e-03  7.21e-02  1.29e-04  3.11e-03  5.51e-01  
 11  +3.4775e-01  +5.0183e-01  1.54e-01  4.08e-04  2.91e-02  4.90e-05  1.43e-03  6.05e-01  
 12  +3.3976e-01  +4.5681e-01  1.17e-01  2.99e-04  2.14e-02  4.22e-05  1.08e-03  4.27e-01  
 13  +3.2584e-01  +3.7945e-01  5.36e-02  1.32e-04  9.47e-03  2.25e-05  4.99e-04  7.52e-01  
 14  +3.2072e-01  +3.5342e-01  3.27e-02  7.82e-05  5.66e-03  1.44e-05  3.03e-04  6.21e-01  
 15  +3.1641e-01  +3.3415e-01  1.77e-02  4.10e-05  2.99e-03  7.86e-06  1.64e-04  5.34e-01  
 16  +3.1297e-01  +3.1843e-01  5.47e-03  1.24e-05  9.04e-04  2.42e-06  5.17e-05  9.90e-01  
 17  +3.1126e-01  +3.1172e-01  4.61e-04  1.03e-06  7.54e-05  1.97e-07  4.42e-06  9.23e-01  
 18  +3.1110e-01  +3.1111e-01  5.91e-06  1.32e-08  9.65e-07  2.51e-09  5.68e-08  9.89e-01  
 19  +3.1110e-01  +3.1110e-01  5.91e-08  1.32e-10  9.66e-09  2.52e-11  5.68e-10  9.90e-01  
 20  +3.1110e-01  +3.1110e-01  5.91e-10  1.32e-12  9.66e-11  2.52e-13  5.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.4499ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:47 PM: Optimal value: 3.111e-01
(CVXPY) Oct 06 04:08:47 PM: Compilation took 1.451e-02 seconds
(CVXPY) Oct 06 04:08:47 PM: Solver (including time spent in interface) took 1.666e-02 seconds
Iteration: 15, Objective: 0.3111
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:47 PM: Your problem has 650 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 650
  constraints   = 1150
  nnz(P)        = 0
  nnz(A)        = 9311
  cones (total) = 1
    : Nonnegative = 1,  numel = 1150

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0183e+02  5.01e+02  9.58e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.6793e-01  +1.0829e+02  1.08e+02  4.20e-01  2.10e+01  3.83e-03  5.68e-01  5.94e-01  
  2  +5.2029e-01  +1.2266e+01  1.17e+01  1.25e-01  8.02e+00  1.71e-02  2.34e-01  9.90e-01  
  3  +5.0618e-01  +2.7703e+00  2.26e+00  3.23e-02  2.35e+00  2.81e-03  7.72e-02  7.32e-01  
  4  +5.0588e-01  +2.8673e+00  2.36e+00  2.76e-02  2.03e+00  3.30e-03  6.45e-02  2.13e-01  
  5  +5.0266e-01  +3.0111e+00  2.51e+00  2.45e-02  1.80e+00  2.75e-03  5.81e-02  3.85e-01  
  6  +4.8987e-01  +2.4545e+00  1.96e+00  8.92e-03  6.74e-01  4.36e-03  2.09e-02  6.46e-01  
  7  +4.6440e-01  +1.7251e+00  1.26e+00  4.80e-03  3.56e-01  2.23e-03  1.21e-02  5.69e-01  
  8  +4.4519e-01  +1.5907e+00  1.15e+00  3.16e-03  2.34e-01  2.09e-03  8.13e-03  4.82e-01  
  9  +4.1932e-01  +1.0818e+00  6.62e-01  2.13e-03  1.55e-01  2.25e-04  6.03e-03  5.69e-01  
 10  +3.6557e-01  +6.3141e-01  2.66e-01  7.12e-04  5.08e-02  8.43e-05  2.31e-03  7.09e-01  
 11  +3.4427e-01  +5.0156e-01  1.57e-01  4.17e-04  2.96e-02  5.36e-05  1.47e-03  4.73e-01  
 12  +3.3475e-01  +4.4554e-01  1.11e-01  2.86e-04  2.02e-02  4.12e-05  1.05e-03  4.23e-01  
 13  +3.2056e-01  +3.6277e-01  4.22e-02  1.06e-04  7.53e-03  1.92e-05  4.17e-04  9.51e-01  
 14  +3.1526e-01  +3.3533e-01  2.01e-02  4.96e-05  3.54e-03  9.17e-06  2.01e-04  7.06e-01  
 15  +3.1298e-01  +3.2474e-01  1.18e-02  2.86e-05  2.05e-03  5.33e-06  1.18e-04  5.00e-01  
 16  +3.1032e-01  +3.1229e-01  1.97e-03  4.77e-06  3.42e-04  8.07e-07  2.01e-05  9.90e-01  
 17  +3.0973e-01  +3.0983e-01  9.76e-05  2.36e-07  1.69e-05  3.93e-08  1.00e-06  9.53e-01  
 18  +3.0970e-01  +3.0970e-01  9.87e-07  2.38e-09  1.71e-07  3.98e-10  1.02e-08  9.90e-01  
 19  +3.0970e-01  +3.0970e-01  9.88e-09  2.38e-11  1.71e-09  3.98e-12  1.02e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.6984ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:47 PM: Optimal value: 3.097e-01
(CVXPY) Oct 06 04:08:47 PM: Compilation took 1.555e-02 seconds
(CVXPY) Oct 06 04:08:47 PM: Solver (including time spent in interface) took 3.133e-02 seconds
Iteration: 16, Objective: 0.3097
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:47 PM: Your problem has 658 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Finished problem compilation (took 1.797e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 658
  constraints   = 1158
  nnz(P)        = 0
  nnz(A)        = 9430
  cones (total) = 1
    : Nonnegative = 1,  numel = 1158

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0183e+02  5.01e+02  9.58e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.6780e-01  +1.0828e+02  1.08e+02  4.20e-01  2.09e+01  3.84e-03  5.68e-01  5.94e-01  
  2  +5.2003e-01  +1.2254e+01  1.17e+01  1.24e-01  7.97e+00  1.71e-02  2.34e-01  9.90e-01  
  3  +5.0597e-01  +2.7165e+00  2.21e+00  3.12e-02  2.26e+00  2.80e-03  7.46e-02  7.38e-01  
  4  +5.0571e-01  +2.8277e+00  2.32e+00  2.69e-02  1.97e+00  3.27e-03  6.29e-02  2.13e-01  
  5  +5.0239e-01  +3.0286e+00  2.53e+00  2.35e-02  1.72e+00  2.82e-03  5.56e-02  4.19e-01  
  6  +4.8930e-01  +2.4503e+00  1.96e+00  8.82e-03  6.64e-01  4.26e-03  2.08e-02  6.32e-01  
  7  +4.6094e-01  +1.6799e+00  1.22e+00  4.49e-03  3.32e-01  2.14e-03  1.14e-02  6.07e-01  
  8  +4.4527e-01  +1.5639e+00  1.12e+00  3.21e-03  2.37e-01  1.73e-03  8.29e-03  4.95e-01  
  9  +4.1867e-01  +1.0727e+00  6.54e-01  2.12e-03  1.53e-01  2.03e-04  6.02e-03  6.11e-01  
 10  +3.7095e-01  +6.7357e-01  3.03e-01  8.36e-04  5.95e-02  8.87e-05  2.69e-03  6.40e-01  
 11  +3.4346e-01  +4.9787e-01  1.54e-01  4.16e-04  2.94e-02  4.69e-05  1.49e-03  5.43e-01  
 12  +3.3622e-01  +4.5552e-01  1.19e-01  3.12e-04  2.21e-02  4.03e-05  1.15e-03  3.81e-01  
 13  +3.2376e-01  +3.8164e-01  5.79e-02  1.48e-04  1.05e-02  2.45e-05  5.73e-04  8.57e-01  
 14  +3.1667e-01  +3.4351e-01  2.68e-02  6.74e-05  4.79e-03  1.16e-05  2.71e-04  6.93e-01  
 15  +3.1426e-01  +3.3168e-01  1.74e-02  4.32e-05  3.09e-03  7.56e-06  1.76e-04  4.21e-01  
 16  +3.1066e-01  +3.1383e-01  3.16e-03  7.80e-06  5.56e-04  1.28e-06  3.28e-05  9.90e-01  
 17  +3.0985e-01  +3.1035e-01  4.98e-04  1.22e-06  8.71e-05  2.00e-07  5.20e-06  8.72e-01  
 18  +3.0970e-01  +3.0971e-01  6.77e-06  1.66e-08  1.18e-06  2.71e-09  7.09e-08  9.87e-01  
 19  +3.0970e-01  +3.0970e-01  6.77e-08  1.66e-10  1.18e-08  2.71e-11  7.09e-10  9.90e-01  
 20  +3.0970e-01  +3.0970e-01  6.78e-10  1.66e-12  1.19e-10  2.71e-13  7.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.3182ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:47 PM: Optimal value: 3.097e-01
(CVXPY) Oct 06 04:08:47 PM: Compilation took 1.797e-03 seconds
(CVXPY) Oct 06 04:08:47 PM: Solver (including time spent in interface) took 2.880e-02 seconds
Iteration: 17, Objective: 0.3097
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:47 PM: Your problem has 667 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:47 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 667
  constraints   = 1167
  nnz(P)        = 0
  nnz(A)        = 9501
  cones (total) = 1
    : Nonnegative = 1,  numel = 1167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0183e+02  5.01e+02  9.58e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.6770e-01  +1.0831e+02  1.08e+02  4.21e-01  2.08e+01  3.84e-03  5.68e-01  5.94e-01  
  2  +5.1983e-01  +1.2255e+01  1.17e+01  1.25e-01  7.91e+00  1.71e-02  2.35e-01  9.90e-01  
  3  +5.0581e-01  +2.6729e+00  2.17e+00  3.03e-02  2.19e+00  2.80e-03  7.27e-02  7.43e-01  
  4  +5.0556e-01  +2.7959e+00  2.29e+00  2.63e-02  1.92e+00  3.25e-03  6.17e-02  2.15e-01  
  5  +5.0213e-01  +3.0441e+00  2.54e+00  2.27e-02  1.66e+00  2.90e-03  5.36e-02  4.46e-01  
  6  +4.8871e-01  +2.4451e+00  1.96e+00  8.76e-03  6.56e-01  4.17e-03  2.07e-02  6.19e-01  
  7  +4.5909e-01  +1.6766e+00  1.22e+00  4.38e-03  3.23e-01  2.18e-03  1.12e-02  6.14e-01  
  8  +4.4513e-01  +1.5418e+00  1.10e+00  3.24e-03  2.38e-01  1.61e-03  8.43e-03  4.85e-01  
  9  +4.1558e-01  +1.0347e+00  6.19e-01  2.02e-03  1.45e-01  1.28e-04  5.82e-03  6.74e-01  
 10  +3.8011e-01  +7.5060e-01  3.70e-01  1.07e-03  7.61e-02  8.10e-05  3.39e-03  4.88e-01  
 11  +3.4930e-01  +5.3681e-01  1.88e-01  5.17e-04  3.64e-02  4.17e-05  1.82e-03  5.24e-01  
 12  +3.3176e-01  +4.2993e-01  9.82e-02  2.57e-04  1.81e-02  3.07e-05  9.72e-04  6.85e-01  
 13  +3.2286e-01  +3.7496e-01  5.21e-02  1.35e-04  9.49e-03  2.25e-05  5.24e-04  9.90e-01  
 14  +3.1926e-01  +3.5658e-01  3.73e-02  9.44e-05  6.70e-03  1.64e-05  3.72e-04  4.93e-01  
 15  +3.1342e-01  +3.2723e-01  1.38e-02  3.44e-05  2.45e-03  5.91e-06  1.41e-04  8.56e-01  
 16  +3.1054e-01  +3.1364e-01  3.10e-03  7.69e-06  5.47e-04  1.28e-06  3.25e-05  8.23e-01  
 17  +3.0983e-01  +3.1043e-01  5.93e-04  1.47e-06  1.04e-04  2.34e-07  6.30e-06  9.43e-01  
 18  +3.0965e-01  +3.0966e-01  1.10e-05  2.72e-08  1.93e-06  4.32e-09  1.18e-07  9.82e-01  
 19  +3.0965e-01  +3.0965e-01  1.10e-07  2.72e-10  1.93e-08  4.32e-11  1.18e-09  9.90e-01  
 20  +3.0965e-01  +3.0965e-01  1.11e-09  2.73e-12  1.94e-10  4.33e-13  1.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.9919ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:47 PM: Optimal value: 3.097e-01
(CVXPY) Oct 06 04:08:47 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:08:47 PM: Solver (including time spent in interface) took 3.153e-02 seconds
Iteration: 18, Objective: 0.3097
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:08:48 PM: Your problem has 668 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:08:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:08:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:08:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:08:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:08:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:08:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:08:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:08:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:08:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:08:48 PM: Finished problem compilation (took 1.681e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 668
  constraints   = 1168
  nnz(P)        = 0
  nnz(A)        = 9524
  cones (total) = 1
    : Nonnegative = 1,  numel = 1168

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0183e+02  5.01e+02  9.58e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.6765e-01  +1.0832e+02  1.08e+02  4.21e-01  2.08e+01  3.84e-03  5.68e-01  5.94e-01  
  2  +5.1970e-01  +1.2260e+01  1.17e+01  1.25e-01  7.91e+00  1.71e-02  2.35e-01  9.90e-01  
  3  +5.0572e-01  +2.6492e+00  2.14e+00  2.99e-02  2.16e+00  2.79e-03  7.16e-02  7.46e-01  
  4  +5.0548e-01  +2.7772e+00  2.27e+00  2.59e-02  1.89e+00  3.24e-03  6.10e-02  2.16e-01  
  5  +5.0197e-01  +3.0478e+00  2.55e+00  2.23e-02  1.63e+00  2.93e-03  5.24e-02  4.61e-01  
  6  +4.8836e-01  +2.4346e+00  1.95e+00  8.70e-03  6.51e-01  4.10e-03  2.06e-02  6.13e-01  
  7  +4.5882e-01  +1.6923e+00  1.23e+00  4.40e-03  3.24e-01  2.26e-03  1.12e-02  6.04e-01  
  8  +4.4482e-01  +1.5543e+00  1.11e+00  3.25e-03  2.38e-01  1.66e-03  8.46e-03  4.85e-01  
  9  +4.1547e-01  +1.0415e+00  6.26e-01  2.03e-03  1.46e-01  1.35e-04  5.87e-03  6.68e-01  
 10  +3.7904e-01  +7.4564e-01  3.67e-01  1.06e-03  7.49e-02  8.26e-05  3.35e-03  4.97e-01  
 11  +3.4830e-01  +5.3160e-01  1.83e-01  5.05e-04  3.55e-02  4.14e-05  1.79e-03  5.24e-01  
 12  +3.3215e-01  +4.3349e-01  1.01e-01  2.66e-04  1.87e-02  3.16e-05  1.00e-03  6.57e-01  
 13  +3.2308e-01  +3.7693e-01  5.39e-02  1.39e-04  9.77e-03  2.35e-05  5.41e-04  9.90e-01  
 14  +3.1872e-01  +3.5403e-01  3.53e-02  8.96e-05  6.34e-03  1.56e-05  3.56e-04  5.32e-01  
 15  +3.1322e-01  +3.2614e-01  1.29e-02  3.23e-05  2.30e-03  5.61e-06  1.33e-04  8.33e-01  
 16  +3.1097e-01  +3.1526e-01  4.29e-03  1.07e-05  7.59e-04  1.71e-06  4.51e-05  9.84e-01  
 17  +3.0993e-01  +3.1082e-01  8.90e-04  2.20e-06  1.57e-04  3.49e-07  9.47e-06  8.68e-01  
 18  +3.0966e-01  +3.0969e-01  2.84e-05  7.02e-08  4.98e-06  1.10e-08  3.04e-07  9.72e-01  
 19  +3.0965e-01  +3.0965e-01  2.85e-07  7.04e-10  4.99e-08  1.10e-10  3.04e-09  9.90e-01  
 20  +3.0965e-01  +3.0965e-01  2.85e-09  7.04e-12  5.00e-10  1.10e-12  3.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.0359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:08:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:08:48 PM: Optimal value: 3.097e-01
(CVXPY) Oct 06 04:08:48 PM: Compilation took 1.681e-02 seconds
(CVXPY) Oct 06 04:08:48 PM: Solver (including time spent in interface) took 3.099e-02 seconds
FULL MODEL:
  Accruacy: 0.656
  Our objective: 0.31199999999999994

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.158)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0)                                  <-- (term's our objective: 0.028)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.674567461013794
Best over terms:
  Our final objective: 0.15799999999999997
    Its accruacy: 0.579
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15799999999999997
  Highest accruacy: 0.579
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

