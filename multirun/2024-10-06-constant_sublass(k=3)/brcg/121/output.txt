Command:
python test_script.py -s constant_subclass -d 4 -n 10 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 4.

Computed total variation: 0.8
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:41 PM: Your problem has 14 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:41 PM: Finished problem compilation (took 5.010e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 14
  constraints   = 19
  nnz(P)        = 0
  nnz(A)        = 44
  cones (total) = 1
    : Nonnegative = 1,  numel = 19

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7165e-01  +5.7342e+00  5.26e+00  7.13e-01  2.28e+00  1.00e+00  1.23e+00   ------   
  1  +5.5712e-01  +1.3393e+00  7.82e-01  2.47e-01  1.01e+00  4.01e-03  5.60e-01  6.90e-01  
  2  +4.5234e-01  +5.9136e-01  1.39e-01  4.89e-02  2.25e-01  1.01e-02  1.64e-01  8.38e-01  
  3  +4.0352e-01  +4.2216e-01  1.86e-02  5.65e-03  2.68e-02  1.26e-03  2.35e-02  9.39e-01  
  4  +4.0022e-01  +4.0057e-01  3.53e-04  1.07e-04  5.07e-04  2.47e-05  4.52e-04  9.81e-01  
  5  +4.0015e-01  +4.0025e-01  9.88e-05  2.77e-05  1.33e-04  7.28e-06  1.20e-04  7.82e-01  
  6  +4.0010e-01  +4.0011e-01  1.05e-05  2.72e-06  1.32e-05  6.44e-07  1.24e-05  9.72e-01  
  7  +4.0010e-01  +4.0010e-01  1.07e-07  2.77e-08  1.35e-07  6.61e-09  1.27e-07  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  1.07e-09  2.77e-10  1.35e-09  6.61e-11  1.27e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 223.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:41 PM: Optimal value: 4.001e-01
(CVXPY) Oct 06 03:48:41 PM: Compilation took 5.010e-02 seconds
(CVXPY) Oct 06 03:48:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:41 PM: Your problem has 16 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:41 PM: Finished problem compilation (took 1.045e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 16
  constraints   = 21
  nnz(P)        = 0
  nnz(A)        = 51
  cones (total) = 1
    : Nonnegative = 1,  numel = 21

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4820e-01  +6.0154e+00  5.57e+00  7.27e-01  2.40e+00  1.00e+00  1.30e+00   ------   
  1  +5.0077e-01  +1.3352e+00  8.34e-01  2.58e-01  1.08e+00  3.94e-03  5.98e-01  6.89e-01  
  2  +3.4697e-01  +4.6064e-01  1.14e-01  3.50e-02  1.66e-01  1.09e-02  1.28e-01  9.23e-01  
  3  +3.0322e-01  +3.1018e-01  6.96e-03  2.10e-03  1.01e-02  5.25e-04  9.09e-03  9.50e-01  
  4  +3.0037e-01  +3.0080e-01  4.27e-04  1.28e-04  6.14e-04  3.28e-05  5.61e-04  9.38e-01  
  5  +3.0027e-01  +3.0058e-01  3.08e-04  7.49e-05  3.74e-04  2.34e-05  3.79e-04  4.77e-01  
  6  +3.0011e-01  +3.0013e-01  1.94e-05  4.45e-06  2.24e-05  1.35e-06  2.43e-05  9.39e-01  
  7  +3.0010e-01  +3.0010e-01  2.04e-07  4.60e-08  2.32e-07  1.37e-08  2.58e-07  9.90e-01  
  8  +3.0010e-01  +3.0010e-01  2.04e-09  4.60e-10  2.32e-09  1.37e-10  2.58e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:41 PM: Optimal value: 3.001e-01
(CVXPY) Oct 06 03:48:41 PM: Compilation took 1.045e-02 seconds
(CVXPY) Oct 06 03:48:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:41 PM: Your problem has 18 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:41 PM: Finished problem compilation (took 1.363e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 18
  constraints   = 23
  nnz(P)        = 0
  nnz(A)        = 56
  cones (total) = 1
    : Nonnegative = 1,  numel = 23

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2714e-01  +6.0470e+00  5.62e+00  7.37e-01  2.41e+00  1.00e+00  1.29e+00   ------   
  1  +4.4674e-01  +1.3006e+00  8.54e-01  2.66e-01  1.10e+00  3.94e-03  6.01e-01  6.83e-01  
  2  +2.5796e-01  +4.1625e-01  1.58e-01  4.76e-02  2.17e-01  1.05e-02  1.65e-01  8.42e-01  
  3  +2.0376e-01  +2.1888e-01  1.51e-02  4.13e-03  1.92e-02  1.23e-03  1.89e-02  9.17e-01  
  4  +2.0025e-01  +2.0044e-01  1.94e-04  5.41e-05  2.51e-04  1.49e-05  2.55e-04  9.87e-01  
  5  +2.0020e-01  +2.0021e-01  9.92e-06  2.86e-06  1.32e-05  6.40e-07  1.37e-05  9.48e-01  
  6  +2.0020e-01  +2.0020e-01  1.03e-07  2.97e-08  1.37e-07  6.62e-09  1.42e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  1.03e-09  2.97e-10  1.37e-09  6.62e-11  1.42e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:41 PM: Optimal value: 2.002e-01
(CVXPY) Oct 06 03:48:41 PM: Compilation took 1.363e-02 seconds
(CVXPY) Oct 06 03:48:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:41 PM: Your problem has 21 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:41 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 21
  constraints   = 26
  nnz(P)        = 0
  nnz(A)        = 62
  cones (total) = 1
    : Nonnegative = 1,  numel = 26

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.1071e-01  +6.0434e+00  5.63e+00  7.48e-01  2.38e+00  1.00e+00  1.27e+00   ------   
  1  +3.7922e-01  +1.2494e+00  8.70e-01  2.69e-01  1.06e+00  4.05e-03  5.87e-01  6.78e-01  
  2  +1.8118e-01  +3.4648e-01  1.65e-01  4.83e-02  2.10e-01  1.02e-02  1.54e-01  8.38e-01  
  3  +1.0847e-01  +1.2973e-01  2.13e-02  5.26e-03  2.35e-02  1.45e-03  2.09e-02  9.32e-01  
  4  +1.0048e-01  +1.0086e-01  3.80e-04  9.53e-05  4.26e-04  2.20e-05  3.91e-04  9.81e-01  
  5  +1.0032e-01  +1.0036e-01  3.41e-05  9.24e-06  4.06e-05  1.21e-06  4.11e-05  9.14e-01  
  6  +1.0030e-01  +1.0030e-01  5.37e-07  1.45e-07  6.36e-07  1.99e-08  6.82e-07  9.86e-01  
  7  +1.0030e-01  +1.0030e-01  5.36e-09  1.45e-09  6.36e-09  1.99e-10  6.82e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 165.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:41 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:41 PM: Optimal value: 1.003e-01
(CVXPY) Oct 06 03:48:41 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:48:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.8

IF 
    (x0 = 0 AND x2 = 0)                       <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.2)
 OR (x1 = 0 AND x2 = 1)                       <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.3362278938293457
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

