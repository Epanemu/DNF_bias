Command:
python test_script.py -s constant_subclass -d 4 -n 50 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:07 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:07 PM: Finished problem compilation (took 4.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9261e-01  +2.5881e+01  2.54e+01  8.14e-01  5.40e+00  1.00e+00  1.07e+00   ------   
  1  +5.9771e-01  +5.2789e+00  4.68e+00  2.82e-01  2.76e+00  4.06e-03  5.06e-01  6.70e-01  
  2  +5.1836e-01  +9.5445e-01  4.36e-01  4.65e-02  5.27e-01  1.05e-02  1.33e-01  9.78e-01  
  3  +5.0336e-01  +8.7422e-01  3.71e-01  2.58e-02  3.01e-01  1.13e-02  7.86e-02  4.94e-01  
  4  +4.7287e-01  +6.6048e-01  1.88e-01  9.71e-03  1.15e-01  6.04e-03  3.39e-02  6.21e-01  
  5  +4.4957e-01  +4.8066e-01  3.11e-02  1.68e-03  1.97e-02  7.30e-04  6.66e-03  8.59e-01  
  6  +4.4244e-01  +4.5176e-01  9.31e-03  4.23e-04  4.99e-03  1.74e-04  1.84e-03  8.44e-01  
  7  +4.4013e-01  +4.4025e-01  1.19e-04  5.38e-06  6.34e-05  2.11e-06  2.38e-05  9.87e-01  
  8  +4.4010e-01  +4.4010e-01  1.19e-06  5.38e-08  6.34e-07  2.11e-08  2.38e-07  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  1.19e-08  5.38e-10  6.34e-09  2.11e-10  2.38e-09  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  1.19e-10  5.38e-12  6.34e-11  2.11e-12  2.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 474.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:07 PM: Optimal value: 4.401e-01
(CVXPY) Oct 06 03:49:07 PM: Compilation took 4.501e-02 seconds
(CVXPY) Oct 06 03:49:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:07 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:07 PM: Finished problem compilation (took 5.210e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 251
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7496e-01  +2.6431e+01  2.60e+01  8.30e-01  5.63e+00  1.00e+00  1.11e+00   ------   
  1  +5.3082e-01  +5.4518e+00  4.92e+00  3.08e-01  2.88e+00  4.01e-03  5.46e-01  6.53e-01  
  2  +4.5542e-01  +1.2180e+00  7.63e-01  6.54e-02  7.62e-01  1.30e-02  1.74e-01  8.78e-01  
  3  +3.7032e-01  +8.1477e-01  4.44e-01  2.19e-02  2.60e-01  1.06e-02  6.97e-02  6.90e-01  
  4  +3.0738e-01  +4.3512e-01  1.28e-01  6.21e-03  7.25e-02  2.00e-03  2.29e-02  7.47e-01  
  5  +2.8150e-01  +2.8582e-01  4.32e-03  2.18e-04  2.50e-03  3.09e-05  9.00e-04  9.70e-01  
  6  +2.8049e-01  +2.8122e-01  7.27e-04  3.69e-05  4.22e-04  4.95e-06  1.57e-04  8.33e-01  
  7  +2.8033e-01  +2.8072e-01  3.85e-04  1.77e-05  2.03e-04  2.73e-06  8.30e-05  6.11e-01  
  8  +2.8021e-01  +2.8022e-01  1.36e-05  6.20e-07  7.10e-06  6.22e-08  3.16e-06  9.70e-01  
  9  +2.8020e-01  +2.8020e-01  1.38e-07  6.27e-09  7.18e-08  6.32e-10  3.22e-08  9.90e-01  
 10  +2.8020e-01  +2.8020e-01  1.38e-09  6.28e-11  7.19e-10  6.33e-12  3.23e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 429.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:07 PM: Optimal value: 2.802e-01
(CVXPY) Oct 06 03:49:07 PM: Compilation took 5.210e-03 seconds
(CVXPY) Oct 06 03:49:07 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:07 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:07 PM: Finished problem compilation (took 5.216e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 258
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7021e-01  +2.6659e+01  2.62e+01  8.32e-01  5.59e+00  1.00e+00  1.12e+00   ------   
  1  +5.0662e-01  +5.4681e+00  4.96e+00  3.07e-01  2.85e+00  4.03e-03  5.46e-01  6.54e-01  
  2  +4.1689e-01  +1.2897e+00  8.73e-01  6.49e-02  7.53e-01  1.30e-02  1.70e-01  8.54e-01  
  3  +3.1530e-01  +6.8674e-01  3.71e-01  1.98e-02  2.29e-01  6.01e-03  6.32e-02  7.20e-01  
  4  +2.5102e-01  +3.0028e-01  4.93e-02  2.57e-03  2.91e-02  1.55e-04  1.02e-02  9.26e-01  
  5  +2.4071e-01  +2.4215e-01  1.44e-03  7.61e-05  8.54e-04  4.48e-06  3.22e-04  9.70e-01  
  6  +2.4045e-01  +2.4089e-01  4.39e-04  2.16e-05  2.42e-04  1.93e-06  1.01e-04  7.53e-01  
  7  +2.4032e-01  +2.4039e-01  6.68e-05  3.23e-06  3.61e-05  3.92e-07  1.68e-05  9.32e-01  
  8  +2.4030e-01  +2.4030e-01  9.41e-07  4.49e-08  5.03e-07  4.91e-09  2.41e-07  9.86e-01  
  9  +2.4030e-01  +2.4030e-01  9.41e-09  4.49e-10  5.03e-09  4.91e-11  2.41e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 407.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:07 PM: Optimal value: 2.403e-01
(CVXPY) Oct 06 03:49:07 PM: Compilation took 5.216e-03 seconds
(CVXPY) Oct 06 03:49:07 PM: Solver (including time spent in interface) took 4.599e-03 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.52

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.28)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.210185766220093
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

