Command:
python test_script.py -s constant_subclass -d 10 -n 5000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.152
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 10.

Computed total variation: 0.4152
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:49 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:49 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 32521
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5009e+03  2.50e+03  9.80e-01  8.55e+01  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4952e+02  5.49e+02  4.39e-01  5.64e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2922e-01  +6.0303e+01  5.98e+01  1.72e-01  2.83e+01  1.78e-02  2.89e-01  9.57e-01  
  3  +5.0807e-01  +1.5592e+01  1.51e+01  1.06e-01  1.73e+01  4.98e-05  2.61e-01  3.63e-01  
  4  +5.0083e-01  +1.5522e+00  1.05e+00  1.03e-02  1.74e+00  6.81e-06  1.29e-01  7.83e-01  
  5  +5.0012e-01  +6.9280e-01  1.93e-01  1.83e-03  3.13e-01  1.51e-05  2.96e-02  9.75e-01  
  6  +4.9977e-01  +8.0010e-01  3.00e-01  8.21e-04  1.43e-01  2.34e-04  2.53e-03  9.38e-01  
  7  +4.9742e-01  +7.7628e-01  2.79e-01  1.75e-04  3.04e-02  1.02e-03  5.03e-04  8.21e-01  
  8  +4.8602e-01  +6.3906e-01  1.53e-01  1.06e-04  1.83e-02  8.62e-06  3.28e-04  6.95e-01  
  9  +4.7477e-01  +5.7998e-01  1.05e-01  5.66e-05  9.79e-03  6.79e-06  1.85e-04  5.44e-01  
 10  +4.6961e-01  +5.5442e-01  8.48e-02  4.58e-05  7.92e-03  5.67e-06  1.57e-04  5.28e-01  
 11  +4.5967e-01  +5.0812e-01  4.84e-02  2.35e-05  4.05e-03  3.12e-06  8.69e-05  5.03e-01  
 12  +4.5143e-01  +4.7124e-01  1.98e-02  8.66e-06  1.49e-03  1.52e-06  3.44e-05  8.38e-01  
 13  +4.4555e-01  +4.4633e-01  7.79e-04  3.23e-07  5.57e-05  5.01e-08  1.37e-06  9.63e-01  
 14  +4.4530e-01  +4.4531e-01  7.86e-06  3.25e-09  5.61e-07  5.06e-10  1.38e-08  9.90e-01  
 15  +4.4530e-01  +4.4530e-01  7.86e-08  3.25e-11  5.61e-09  5.06e-12  1.38e-10  9.90e-01  
 16  +4.4530e-01  +4.4530e-01  7.86e-10  3.25e-13  5.61e-11  5.09e-14  1.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.7149ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:49 PM: Optimal value: 4.453e-01
(CVXPY) Oct 06 04:26:49 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:26:49 PM: Solver (including time spent in interface) took 9.376e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:49 PM: Your problem has 2531 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:49 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2531
  constraints   = 5031
  nnz(P)        = 0
  nnz(A)        = 36952
  cones (total) = 1
    : Nonnegative = 1,  numel = 5031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5012e+03  2.50e+03  9.80e-01  8.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.7812e-01  +5.4982e+02  5.49e+02  4.40e-01  5.81e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2898e-01  +6.0124e+01  5.96e+01  1.73e-01  2.92e+01  1.79e-02  2.90e-01  9.59e-01  
  3  +5.0798e-01  +1.5491e+01  1.50e+01  1.06e-01  1.77e+01  5.02e-05  2.60e-01  3.74e-01  
  4  +5.0079e-01  +1.5038e+00  1.00e+00  9.85e-03  1.72e+00  6.92e-06  1.22e-01  8.12e-01  
  5  +5.0022e-01  +8.0530e-01  3.05e-01  2.91e-03  5.14e-01  1.19e-05  4.23e-02  8.54e-01  
  6  +5.0013e-01  +7.8165e-01  2.82e-01  1.78e-03  3.17e-01  4.99e-05  6.63e-03  8.97e-01  
  7  +4.9949e-01  +7.7814e-01  2.79e-01  3.44e-04  6.19e-02  3.22e-04  9.54e-04  8.56e-01  
  8  +4.9751e-01  +7.4008e-01  2.43e-01  1.50e-04  2.70e-02  4.98e-04  4.09e-04  7.22e-01  
  9  +4.9515e-01  +7.1935e-01  2.24e-01  1.31e-04  2.35e-02  4.31e-04  3.58e-04  2.05e-01  
 10  +4.9380e-01  +7.0941e-01  2.16e-01  1.18e-04  2.12e-02  3.79e-04  3.23e-04  2.08e-01  
 11  +4.9123e-01  +6.8529e-01  1.94e-01  1.08e-04  1.95e-02  1.69e-04  3.00e-04  4.48e-01  
 12  +4.8595e-01  +6.6012e-01  1.74e-01  8.06e-05  1.44e-02  1.54e-04  2.25e-04  3.48e-01  
 13  +4.8105e-01  +6.3635e-01  1.55e-01  7.03e-05  1.26e-02  9.56e-05  1.98e-04  3.47e-01  
 14  +4.7303e-01  +6.0304e-01  1.30e-01  5.27e-05  9.42e-03  7.59e-05  1.51e-04  3.06e-01  
 15  +4.7014e-01  +5.9075e-01  1.21e-01  5.01e-05  8.94e-03  5.08e-05  1.49e-04  2.25e-01  
 16  +4.6163e-01  +5.4984e-01  8.82e-02  3.54e-05  6.30e-03  3.40e-06  1.05e-04  9.90e-01  
 17  +4.5763e-01  +5.3676e-01  7.91e-02  3.00e-05  5.35e-03  3.38e-06  8.95e-05  1.81e-01  
 18  +4.4936e-01  +5.1067e-01  6.13e-02  2.09e-05  3.73e-03  6.69e-06  6.30e-05  7.86e-01  
 19  +4.2848e-01  +4.3858e-01  1.01e-02  3.20e-06  5.69e-04  1.15e-06  1.01e-05  9.90e-01  
 20  +4.2420e-01  +4.2444e-01  2.38e-04  7.49e-08  1.33e-05  2.61e-08  2.41e-07  9.78e-01  
 21  +4.2410e-01  +4.2410e-01  2.38e-06  7.49e-10  1.33e-07  2.61e-10  2.41e-09  9.90e-01  
 22  +4.2410e-01  +4.2410e-01  2.38e-08  7.49e-12  1.33e-09  2.61e-12  2.41e-11  9.90e-01  
 23  +4.2410e-01  +4.2410e-01  2.38e-10  7.50e-14  1.33e-11  2.62e-14  2.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 140.1774ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:49 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 04:26:49 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:49 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 2, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:49 PM: Your problem has 2541 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:49 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2541
  constraints   = 5041
  nnz(P)        = 0
  nnz(A)        = 37972
  cones (total) = 1
    : Nonnegative = 1,  numel = 5041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7792e-01  +5.4988e+02  5.49e+02  4.41e-01  5.81e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2881e-01  +5.9961e+01  5.94e+01  1.72e-01  2.90e+01  1.79e-02  2.89e-01  9.61e-01  
  3  +5.0793e-01  +1.5433e+01  1.49e+01  1.05e-01  1.76e+01  5.04e-05  2.59e-01  3.81e-01  
  4  +5.0092e-01  +1.7739e+00  1.27e+00  1.25e-02  2.18e+00  7.90e-06  1.36e-01  7.19e-01  
  5  +5.0020e-01  +9.0602e-01  4.06e-01  3.87e-03  6.83e-01  9.20e-06  5.94e-02  6.78e-01  
  6  +4.9991e-01  +8.4367e-01  3.44e-01  2.62e-03  4.66e-01  2.66e-05  1.19e-02  8.71e-01  
  7  +4.9529e-01  +8.0319e-01  3.08e-01  2.79e-04  5.04e-02  3.29e-04  7.71e-04  9.38e-01  
  8  +4.9331e-01  +7.7752e-01  2.84e-01  2.15e-04  3.88e-02  2.88e-04  5.91e-04  3.96e-01  
  9  +4.8933e-01  +7.3289e-01  2.44e-01  1.50e-04  2.70e-02  1.75e-04  4.15e-04  6.04e-01  
 10  +4.8526e-01  +6.9829e-01  2.13e-01  1.18e-04  2.13e-02  6.48e-05  3.29e-04  6.82e-01  
 11  +4.8322e-01  +6.8794e-01  2.05e-01  1.09e-04  1.96e-02  5.89e-05  3.03e-04  1.61e-01  
 12  +4.7961e-01  +6.7019e-01  1.91e-01  9.32e-05  1.67e-02  4.26e-05  2.61e-04  4.07e-01  
 13  +4.7594e-01  +6.5298e-01  1.77e-01  8.30e-05  1.49e-02  3.17e-05  2.34e-04  3.63e-01  
 14  +4.4677e-01  +5.2941e-01  8.26e-02  2.94e-05  5.26e-03  8.72e-06  8.77e-05  9.69e-01  
 15  +4.4450e-01  +5.2205e-01  7.76e-02  2.68e-05  4.79e-03  8.61e-06  7.99e-05  1.67e-01  
 16  +4.3109e-01  +4.7478e-01  4.37e-02  1.51e-05  2.70e-03  5.59e-06  4.78e-05  9.11e-01  
 17  +4.2256e-01  +4.4095e-01  1.84e-02  6.08e-06  1.08e-03  2.92e-06  1.94e-05  9.75e-01  
 18  +4.1501e-01  +4.1640e-01  1.40e-03  4.54e-07  8.09e-05  1.92e-07  1.50e-06  9.41e-01  
 19  +4.1441e-01  +4.1442e-01  1.44e-05  4.68e-09  8.34e-07  1.97e-09  1.55e-08  9.90e-01  
 20  +4.1440e-01  +4.1440e-01  1.44e-07  4.68e-11  8.34e-09  1.97e-11  1.55e-10  9.90e-01  
 21  +4.1440e-01  +4.1440e-01  1.44e-09  4.68e-13  8.34e-11  1.98e-13  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.5316ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:50 PM: Optimal value: 4.144e-01
(CVXPY) Oct 06 04:26:50 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:26:50 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 3, Objective: 0.4144
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:50 PM: Your problem has 2551 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:50 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2551
  constraints   = 5051
  nnz(P)        = 0
  nnz(A)        = 38595
  cones (total) = 1
    : Nonnegative = 1,  numel = 5051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.7769e-01  +5.4994e+02  5.49e+02  4.41e-01  5.80e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2863e-01  +5.9784e+01  5.93e+01  1.72e-01  2.89e+01  1.80e-02  2.88e-01  9.64e-01  
  3  +5.0789e-01  +1.5381e+01  1.49e+01  1.05e-01  1.76e+01  5.06e-05  2.57e-01  3.87e-01  
  4  +5.0090e-01  +1.7478e+00  1.25e+00  1.23e-02  2.13e+00  7.94e-06  1.32e-01  7.32e-01  
  5  +5.0021e-01  +9.2220e-01  4.22e-01  4.03e-03  7.10e-01  1.00e-05  5.34e-02  7.14e-01  
  6  +4.9978e-01  +9.2995e-01  4.30e-01  2.59e-03  4.63e-01  4.24e-05  9.23e-03  8.93e-01  
  7  +4.9450e-01  +8.6342e-01  3.69e-01  3.05e-04  5.52e-02  3.65e-04  8.29e-04  9.11e-01  
  8  +4.9454e-01  +8.5317e-01  3.59e-01  2.70e-04  4.90e-02  2.98e-04  7.26e-04  3.16e-01  
  9  +4.9305e-01  +8.2856e-01  3.36e-01  2.38e-04  4.32e-02  2.48e-04  6.43e-04  2.39e-01  
 10  +4.8695e-01  +7.7457e-01  2.88e-01  1.58e-04  2.86e-02  2.21e-04  4.32e-04  4.50e-01  
 11  +4.8554e-01  +7.5843e-01  2.73e-01  1.57e-04  2.83e-02  1.84e-04  4.30e-04  7.29e-02  
 12  +4.8096e-01  +7.2774e-01  2.47e-01  1.28e-04  2.31e-02  1.47e-04  3.53e-04  3.16e-01  
 13  +4.7818e-01  +7.0328e-01  2.25e-01  1.11e-04  1.99e-02  6.71e-05  3.06e-04  5.58e-01  
 14  +4.7432e-01  +6.8217e-01  2.08e-01  9.85e-05  1.77e-02  4.51e-05  2.75e-04  3.89e-01  
 15  +4.5897e-01  +6.1326e-01  1.54e-01  6.12e-05  1.10e-02  2.62e-05  1.76e-04  6.27e-01  
 16  +4.4267e-01  +5.4441e-01  1.02e-01  3.81e-05  6.82e-03  1.52e-05  1.14e-04  4.42e-01  
 17  +4.3714e-01  +5.2215e-01  8.50e-02  3.11e-05  5.55e-03  1.24e-05  9.46e-05  2.76e-01  
 18  +4.2289e-01  +4.6574e-01  4.28e-02  1.48e-05  2.65e-03  5.86e-06  4.69e-05  7.62e-01  
 19  +4.1556e-01  +4.3765e-01  2.21e-02  7.42e-06  1.32e-03  3.29e-06  2.40e-05  9.90e-01  
 20  +4.0716e-01  +4.0916e-01  1.99e-03  6.65e-07  1.19e-04  2.88e-07  2.24e-06  9.19e-01  
 21  +4.0631e-01  +4.0633e-01  2.15e-05  7.17e-09  1.28e-06  3.09e-09  2.42e-08  9.89e-01  
 22  +4.0630e-01  +4.0630e-01  2.15e-07  7.17e-11  1.28e-08  3.09e-11  2.42e-10  9.90e-01  
 23  +4.0630e-01  +4.0630e-01  2.15e-09  7.17e-13  1.28e-10  3.09e-13  2.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.9114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:50 PM: Optimal value: 4.063e-01
(CVXPY) Oct 06 04:26:50 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:26:50 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 4, Objective: 0.4063
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:50 PM: Your problem has 2561 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:50 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2561
  constraints   = 5061
  nnz(P)        = 0
  nnz(A)        = 39026
  cones (total) = 1
    : Nonnegative = 1,  numel = 5061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.7747e-01  +5.4998e+02  5.49e+02  4.41e-01  5.79e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2848e-01  +5.9651e+01  5.91e+01  1.71e-01  2.87e+01  1.80e-02  2.87e-01  9.66e-01  
  3  +5.0786e-01  +1.5340e+01  1.48e+01  1.04e-01  1.75e+01  5.09e-05  2.56e-01  3.93e-01  
  4  +5.0091e-01  +1.7617e+00  1.26e+00  1.24e-02  2.16e+00  8.07e-06  1.31e-01  7.31e-01  
  5  +5.0023e-01  +9.6269e-01  4.62e-01  4.42e-03  7.78e-01  1.03e-05  5.40e-02  7.03e-01  
  6  +4.9975e-01  +1.0027e+00  5.03e-01  2.80e-03  5.03e-01  4.64e-05  9.49e-03  8.93e-01  
  7  +4.9415e-01  +9.2140e-01  4.27e-01  3.46e-04  6.27e-02  3.58e-04  9.37e-04  9.02e-01  
  8  +4.9331e-01  +8.8183e-01  3.89e-01  2.83e-04  5.12e-02  2.31e-04  7.56e-04  4.64e-01  
  9  +4.8956e-01  +8.4276e-01  3.53e-01  2.08e-04  3.77e-02  2.24e-04  5.58e-04  3.57e-01  
 10  +4.8675e-01  +8.1017e-01  3.23e-01  1.73e-04  3.12e-02  1.73e-04  4.65e-04  3.47e-01  
 11  +4.8555e-01  +7.8928e-01  3.04e-01  1.67e-04  3.02e-02  1.23e-04  4.52e-04  2.25e-01  
 12  +4.7751e-01  +7.3601e-01  2.59e-01  1.20e-04  2.16e-02  8.39e-05  3.29e-04  5.13e-01  
 13  +4.6941e-01  +6.8778e-01  2.18e-01  1.02e-04  1.84e-02  4.12e-05  2.89e-04  4.69e-01  
 14  +4.4424e-01  +5.7311e-01  1.29e-01  5.02e-05  8.99e-03  2.26e-05  1.50e-04  5.50e-01  
 15  +4.2975e-01  +5.1520e-01  8.54e-02  3.16e-05  5.65e-03  1.29e-05  9.79e-05  5.53e-01  
 16  +4.2117e-01  +4.8027e-01  5.91e-02  2.11e-05  3.77e-03  8.10e-06  6.75e-05  8.24e-01  
 17  +4.1659e-01  +4.6269e-01  4.61e-02  1.63e-05  2.92e-03  6.35e-06  5.30e-05  3.27e-01  
 18  +4.1267e-01  +4.4709e-01  3.44e-02  1.20e-05  2.15e-03  5.01e-06  3.92e-05  7.59e-01  
 19  +4.0632e-01  +4.2518e-01  1.89e-02  6.51e-06  1.16e-03  2.76e-06  2.17e-05  5.41e-01  
 20  +3.9915e-01  +4.0000e-01  8.48e-04  2.92e-07  5.23e-05  1.14e-07  1.01e-06  9.65e-01  
 21  +3.9880e-01  +3.9881e-01  8.64e-06  2.98e-09  5.33e-07  1.16e-09  1.03e-08  9.90e-01  
 22  +3.9880e-01  +3.9880e-01  8.64e-08  2.98e-11  5.33e-09  1.16e-11  1.03e-10  9.90e-01  
 23  +3.9880e-01  +3.9880e-01  8.64e-10  2.98e-13  5.33e-11  1.16e-13  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.5434ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:50 PM: Optimal value: 3.988e-01
(CVXPY) Oct 06 04:26:50 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:26:50 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 5, Objective: 0.3988
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:51 PM: Your problem has 2571 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:51 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2571
  constraints   = 5071
  nnz(P)        = 0
  nnz(A)        = 39533
  cones (total) = 1
    : Nonnegative = 1,  numel = 5071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7718e-01  +5.4997e+02  5.49e+02  4.41e-01  5.79e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2824e-01  +5.9417e+01  5.89e+01  1.70e-01  2.85e+01  1.81e-02  2.86e-01  9.69e-01  
  3  +5.0780e-01  +1.5270e+01  1.48e+01  1.04e-01  1.74e+01  5.12e-05  2.53e-01  4.02e-01  
  4  +5.0085e-01  +1.6775e+00  1.18e+00  1.16e-02  2.02e+00  7.97e-06  1.23e-01  7.66e-01  
  5  +5.0033e-01  +1.0992e+00  5.99e-01  5.71e-03  1.00e+00  1.28e-05  5.14e-02  7.19e-01  
  6  +4.9941e-01  +9.9280e-01  4.93e-01  1.67e-03  3.03e-01  8.05e-05  4.80e-03  9.40e-01  
  7  +4.9474e-01  +9.4183e-01  4.47e-01  3.68e-04  6.70e-02  3.35e-04  9.69e-04  8.02e-01  
  8  +4.8999e-01  +8.8716e-01  3.97e-01  2.66e-04  4.82e-02  3.09e-04  7.02e-04  3.82e-01  
  9  +4.8825e-01  +8.4583e-01  3.58e-01  2.21e-04  4.00e-02  1.16e-04  5.86e-04  6.60e-01  
 10  +4.8366e-01  +8.1916e-01  3.35e-01  1.76e-04  3.20e-02  1.10e-04  4.72e-04  3.05e-01  
 11  +4.7199e-01  +7.3969e-01  2.68e-01  1.34e-04  2.42e-02  3.95e-05  3.70e-04  6.70e-01  
 12  +4.3980e-01  +5.8724e-01  1.47e-01  5.89e-05  1.06e-02  1.48e-05  1.75e-04  8.77e-01  
 13  +4.3003e-01  +5.4793e-01  1.18e-01  4.61e-05  8.26e-03  1.22e-05  1.41e-04  3.72e-01  
 14  +4.2172e-01  +5.1454e-01  9.28e-02  3.56e-05  6.37e-03  9.86e-06  1.12e-04  3.31e-01  
 15  +4.1007e-01  +4.6702e-01  5.70e-02  2.12e-05  3.78e-03  7.54e-06  6.91e-05  9.90e-01  
 16  +3.9649e-01  +4.1525e-01  1.88e-02  6.87e-06  1.23e-03  2.40e-06  2.37e-05  6.97e-01  
 17  +3.9222e-01  +3.9895e-01  6.74e-03  2.45e-06  4.39e-04  8.46e-07  8.66e-06  9.90e-01  
 18  +3.9000e-01  +3.9117e-01  1.18e-03  4.26e-07  7.63e-05  1.50e-07  1.52e-06  8.52e-01  
 19  +3.8951e-01  +3.8952e-01  1.52e-05  5.51e-09  9.86e-07  1.91e-09  1.98e-08  9.90e-01  
 20  +3.8950e-01  +3.8950e-01  1.52e-07  5.51e-11  9.86e-09  1.91e-11  1.98e-10  9.90e-01  
 21  +3.8950e-01  +3.8950e-01  1.52e-09  5.51e-13  9.86e-11  1.92e-13  1.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.5785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:51 PM: Optimal value: 3.895e-01
(CVXPY) Oct 06 04:26:51 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:51 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 6, Objective: 0.3895
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:51 PM: Your problem has 2581 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:51 PM: Finished problem compilation (took 3.127e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2581
  constraints   = 5081
  nnz(P)        = 0
  nnz(A)        = 39945
  cones (total) = 1
    : Nonnegative = 1,  numel = 5081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7702e-01  +5.5003e+02  5.49e+02  4.42e-01  5.78e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2810e-01  +5.9289e+01  5.88e+01  1.70e-01  2.84e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0776e-01  +1.5225e+01  1.47e+01  1.03e-01  1.73e+01  5.14e-05  2.52e-01  4.08e-01  
  4  +5.0088e-01  +1.7422e+00  1.24e+00  1.22e-02  2.13e+00  8.28e-06  1.25e-01  7.48e-01  
  5  +5.0027e-01  +1.0731e+00  5.73e-01  5.44e-03  9.56e-01  1.33e-05  4.62e-02  7.64e-01  
  6  +4.9844e-01  +1.0797e+00  5.81e-01  1.28e-03  2.32e-01  1.35e-04  3.48e-03  9.56e-01  
  7  +4.9181e-01  +9.8939e-01  4.98e-01  3.71e-04  6.75e-02  3.65e-04  9.76e-04  7.29e-01  
  8  +4.9084e-01  +9.7355e-01  4.83e-01  3.27e-04  5.94e-02  3.29e-04  8.56e-04  2.48e-01  
  9  +4.8455e-01  +9.0064e-01  4.16e-01  2.40e-04  4.35e-02  2.61e-04  6.35e-04  3.97e-01  
 10  +4.7640e-01  +8.2493e-01  3.49e-01  1.78e-04  3.22e-02  1.63e-04  4.81e-04  4.60e-01  
 11  +4.7105e-01  +7.8577e-01  3.15e-01  1.55e-04  2.80e-02  1.08e-04  4.25e-04  3.47e-01  
 12  +4.6243e-01  +7.2536e-01  2.63e-01  1.28e-04  2.31e-02  3.02e-05  3.61e-04  7.16e-01  
 13  +4.4516e-01  +6.4122e-01  1.96e-01  8.54e-05  1.53e-02  2.20e-05  2.51e-04  3.59e-01  
 14  +4.4288e-01  +6.3017e-01  1.87e-01  8.04e-05  1.44e-02  2.08e-05  2.38e-04  3.27e-01  
 15  +4.1513e-01  +5.0613e-01  9.10e-02  3.57e-05  6.37e-03  8.74e-06  1.14e-04  5.50e-01  
 16  +3.9403e-01  +4.1798e-01  2.40e-02  9.00e-06  1.60e-03  2.43e-06  3.11e-05  8.79e-01  
 17  +3.8769e-01  +3.9391e-01  6.22e-03  2.32e-06  4.12e-04  6.35e-07  8.28e-06  7.59e-01  
 18  +3.8562e-01  +3.8617e-01  5.50e-04  2.04e-07  3.63e-05  6.14e-08  7.41e-07  9.61e-01  
 19  +3.8540e-01  +3.8541e-01  6.86e-06  2.54e-09  4.53e-07  7.64e-10  9.28e-09  9.90e-01  
 20  +3.8540e-01  +3.8540e-01  6.88e-08  2.55e-11  4.55e-09  7.66e-12  9.31e-11  9.90e-01  
 21  +3.8540e-01  +3.8540e-01  6.88e-10  2.55e-13  4.55e-11  7.67e-14  9.32e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.4123ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:51 PM: Optimal value: 3.854e-01
(CVXPY) Oct 06 04:26:51 PM: Compilation took 3.127e-02 seconds
(CVXPY) Oct 06 04:26:51 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 7, Objective: 0.3854
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:51 PM: Your problem has 2591 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:51 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2591
  constraints   = 5091
  nnz(P)        = 0
  nnz(A)        = 40354
  cones (total) = 1
    : Nonnegative = 1,  numel = 5091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.7682e-01  +5.5003e+02  5.49e+02  4.42e-01  5.77e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2795e-01  +5.9135e+01  5.86e+01  1.70e-01  2.83e+01  1.81e-02  2.85e-01  9.74e-01  
  3  +5.0773e-01  +1.5181e+01  1.47e+01  1.03e-01  1.72e+01  5.16e-05  2.51e-01  4.14e-01  
  4  +5.0092e-01  +1.8217e+00  1.32e+00  1.30e-02  2.26e+00  8.63e-06  1.28e-01  7.26e-01  
  5  +5.0023e-01  +1.0509e+00  5.51e-01  5.24e-03  9.21e-01  1.23e-05  4.54e-02  7.41e-01  
  6  +4.9745e-01  +1.2781e+00  7.81e-01  1.28e-03  2.33e-01  1.77e-04  3.39e-03  9.82e-01  
  7  +4.8965e-01  +1.1056e+00  6.16e-01  4.46e-04  8.11e-02  3.27e-04  1.17e-03  6.80e-01  
  8  +4.8441e-01  +1.0274e+00  5.43e-01  3.02e-04  5.49e-02  2.94e-04  7.93e-04  4.59e-01  
  9  +4.8098e-01  +9.2480e-01  4.44e-01  2.52e-04  4.57e-02  1.33e-04  6.71e-04  4.53e-01  
 10  +4.6987e-01  +8.3653e-01  3.67e-01  1.78e-04  3.21e-02  1.04e-04  4.83e-04  3.99e-01  
 11  +4.6050e-01  +7.7625e-01  3.16e-01  1.44e-04  2.60e-02  8.13e-05  4.02e-04  2.54e-01  
 12  +4.4361e-01  +6.5000e-01  2.06e-01  9.35e-05  1.68e-02  6.12e-06  2.76e-04  9.90e-01  
 13  +4.1429e-01  +5.1814e-01  1.04e-01  4.19e-05  7.47e-03  5.82e-06  1.34e-04  6.83e-01  
 14  +3.9329e-01  +4.3148e-01  3.82e-02  1.47e-05  2.62e-03  2.35e-06  5.11e-05  6.84e-01  
 15  +3.8378e-01  +3.9471e-01  1.09e-02  4.12e-06  7.33e-04  7.80e-07  1.51e-05  7.62e-01  
 16  +3.7993e-01  +3.8027e-01  3.40e-04  1.27e-07  2.26e-05  2.51e-08  4.78e-07  9.72e-01  
 17  +3.7980e-01  +3.7980e-01  3.42e-06  1.27e-09  2.27e-07  2.51e-10  4.80e-09  9.90e-01  
 18  +3.7980e-01  +3.7980e-01  3.42e-08  1.27e-11  2.27e-09  2.51e-12  4.80e-11  9.90e-01  
 19  +3.7980e-01  +3.7980e-01  3.42e-10  1.27e-13  2.27e-11  2.52e-14  4.80e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 128.1166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:52 PM: Optimal value: 3.798e-01
(CVXPY) Oct 06 04:26:52 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:26:52 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 8, Objective: 0.3798
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:52 PM: Your problem has 2601 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:52 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2601
  constraints   = 5101
  nnz(P)        = 0
  nnz(A)        = 40675
  cones (total) = 1
    : Nonnegative = 1,  numel = 5101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.80e-01  8.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.7655e-01  +5.5007e+02  5.49e+02  4.42e-01  5.76e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2779e-01  +5.9003e+01  5.85e+01  1.69e-01  2.81e+01  1.82e-02  2.84e-01  9.76e-01  
  3  +5.0771e-01  +1.5145e+01  1.46e+01  1.03e-01  1.71e+01  5.19e-05  2.49e-01  4.20e-01  
  4  +5.0094e-01  +1.8713e+00  1.37e+00  1.35e-02  2.34e+00  8.90e-06  1.28e-01  7.14e-01  
  5  +5.0015e-01  +1.0041e+00  5.04e-01  4.76e-03  8.36e-01  1.35e-05  3.77e-02  8.16e-01  
  6  +4.9617e-01  +1.1841e+00  6.88e-01  9.95e-04  1.81e-01  2.19e-04  2.62e-03  9.62e-01  
  7  +4.8880e-01  +1.0535e+00  5.65e-01  4.32e-04  7.86e-02  3.27e-04  1.13e-03  6.22e-01  
  8  +4.8233e-01  +9.7430e-01  4.92e-01  2.92e-04  5.29e-02  2.89e-04  7.67e-04  4.67e-01  
  9  +4.7415e-01  +8.9430e-01  4.20e-01  2.13e-04  3.85e-02  1.96e-04  5.70e-04  4.73e-01  
 10  +4.5451e-01  +7.4532e-01  2.91e-01  1.34e-04  2.41e-02  6.59e-05  3.78e-04  6.36e-01  
 11  +4.3316e-01  +6.2110e-01  1.88e-01  8.61e-05  1.54e-02  6.72e-06  2.63e-04  9.90e-01  
 12  +4.0442e-01  +4.9263e-01  8.82e-02  3.64e-05  6.47e-03  3.58e-06  1.21e-04  5.93e-01  
 13  +3.8974e-01  +4.3168e-01  4.19e-02  1.67e-05  2.97e-03  2.21e-06  5.87e-05  6.02e-01  
 14  +3.7875e-01  +3.8743e-01  8.68e-03  3.38e-06  6.01e-04  5.00e-07  1.26e-05  8.12e-01  
 15  +3.7674e-01  +3.7967e-01  2.93e-03  1.13e-06  2.00e-04  2.00e-07  4.26e-06  7.26e-01  
 16  +3.7571e-01  +3.7576e-01  4.11e-05  1.58e-08  2.81e-06  2.98e-09  6.02e-08  9.88e-01  
 17  +3.7570e-01  +3.7570e-01  4.11e-07  1.58e-10  2.81e-08  2.98e-11  6.02e-10  9.90e-01  
 18  +3.7570e-01  +3.7570e-01  4.11e-09  1.58e-12  2.81e-10  2.98e-13  6.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.5537ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:52 PM: Optimal value: 3.757e-01
(CVXPY) Oct 06 04:26:52 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:52 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 9, Objective: 0.3757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:52 PM: Your problem has 2611 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:52 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2611
  constraints   = 5111
  nnz(P)        = 0
  nnz(A)        = 41041
  cones (total) = 1
    : Nonnegative = 1,  numel = 5111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.80e-01  8.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.7641e-01  +5.5008e+02  5.49e+02  4.43e-01  5.75e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2770e-01  +5.8915e+01  5.84e+01  1.69e-01  2.80e+01  1.82e-02  2.83e-01  9.77e-01  
  3  +5.0769e-01  +1.5119e+01  1.46e+01  1.02e-01  1.70e+01  5.20e-05  2.48e-01  4.23e-01  
  4  +5.0095e-01  +1.8983e+00  1.40e+00  1.38e-02  2.39e+00  9.06e-06  1.28e-01  7.09e-01  
  5  +5.0014e-01  +1.0165e+00  5.16e-01  4.86e-03  8.53e-01  1.40e-05  3.68e-02  8.25e-01  
  6  +4.9573e-01  +1.1640e+00  6.68e-01  9.26e-04  1.69e-01  2.30e-04  2.42e-03  9.56e-01  
  7  +4.8889e-01  +1.0671e+00  5.78e-01  4.47e-04  8.14e-02  3.40e-04  1.16e-03  5.66e-01  
  8  +4.8053e-01  +9.6988e-01  4.89e-01  2.89e-04  5.23e-02  3.01e-04  7.60e-04  4.78e-01  
  9  +4.6786e-01  +8.5234e-01  3.84e-01  1.94e-04  3.50e-02  1.68e-04  5.25e-04  5.43e-01  
 10  +4.6433e-01  +8.1874e-01  3.54e-01  1.82e-04  3.29e-02  9.83e-05  5.04e-04  3.48e-01  
 11  +4.5057e-01  +7.3825e-01  2.88e-01  1.36e-04  2.45e-02  7.17e-05  3.90e-04  3.09e-01  
 12  +4.2307e-01  +5.8704e-01  1.64e-01  7.12e-05  1.27e-02  1.85e-05  2.20e-04  7.69e-01  
 13  +3.9171e-01  +4.4216e-01  5.04e-02  2.05e-05  3.64e-03  4.32e-06  7.05e-05  7.80e-01  
 14  +3.8485e-01  +4.1404e-01  2.92e-02  1.16e-05  2.06e-03  2.79e-06  4.14e-05  5.93e-01  
 15  +3.7827e-01  +3.8767e-01  9.39e-03  3.68e-06  6.52e-04  9.93e-07  1.36e-05  8.26e-01  
 16  +3.7689e-01  +3.8239e-01  5.50e-03  2.14e-06  3.80e-04  5.87e-07  8.04e-06  4.81e-01  
 17  +3.7523e-01  +3.7609e-01  8.61e-04  3.33e-07  5.91e-05  9.59e-08  1.27e-06  9.90e-01  
 18  +3.7490e-01  +3.7491e-01  9.79e-06  3.78e-09  6.71e-07  1.09e-09  1.45e-08  9.90e-01  
 19  +3.7490e-01  +3.7490e-01  9.80e-08  3.79e-11  6.72e-09  1.09e-11  1.45e-10  9.90e-01  
 20  +3.7490e-01  +3.7490e-01  9.80e-10  3.79e-13  6.72e-11  1.09e-13  1.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.6452ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:52 PM: Optimal value: 3.749e-01
(CVXPY) Oct 06 04:26:52 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:26:52 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 10, Objective: 0.3749
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:53 PM: Your problem has 2621 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:53 PM: Finished problem compilation (took 3.132e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2621
  constraints   = 5121
  nnz(P)        = 0
  nnz(A)        = 41413
  cones (total) = 1
    : Nonnegative = 1,  numel = 5121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.7599e-01  +5.5026e+02  5.50e+02  4.43e-01  5.74e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2742e-01  +5.8671e+01  5.81e+01  1.68e-01  2.78e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0764e-01  +1.5058e+01  1.46e+01  1.02e-01  1.69e+01  5.26e-05  2.46e-01  4.34e-01  
  4  +5.0095e-01  +1.9056e+00  1.40e+00  1.39e-02  2.40e+00  9.27e-06  1.26e-01  7.13e-01  
  5  +5.0027e-01  +1.2433e+00  7.43e-01  6.91e-03  1.21e+00  1.64e-05  4.31e-02  7.86e-01  
  6  +4.9655e-01  +1.2083e+00  7.12e-01  1.09e-03  1.99e-01  1.85e-04  2.82e-03  9.57e-01  
  7  +4.8923e-01  +1.0870e+00  5.98e-01  4.93e-04  9.00e-02  2.79e-04  1.27e-03  5.89e-01  
  8  +4.8474e-01  +1.0359e+00  5.51e-01  3.53e-04  6.43e-02  2.46e-04  9.13e-04  4.77e-01  
  9  +4.7553e-01  +9.2658e-01  4.51e-01  2.45e-04  4.44e-02  1.27e-04  6.47e-04  6.24e-01  
 10  +4.7293e-01  +9.0631e-01  4.33e-01  2.33e-04  4.23e-02  1.15e-04  6.21e-04  9.64e-02  
 11  +4.5353e-01  +7.6093e-01  3.07e-01  1.53e-04  2.76e-02  2.73e-05  4.31e-04  8.00e-01  
 12  +4.3588e-01  +6.7125e-01  2.35e-01  1.13e-04  2.01e-02  2.08e-05  3.36e-04  9.90e-01  
 13  +4.0269e-01  +5.0768e-01  1.05e-01  4.45e-05  7.92e-03  8.24e-06  1.47e-04  6.31e-01  
 14  +3.8938e-01  +4.4849e-01  5.91e-02  2.46e-05  4.36e-03  4.59e-06  8.55e-05  4.53e-01  
 15  +3.7762e-01  +3.9760e-01  2.00e-02  8.08e-06  1.43e-03  1.73e-06  2.99e-05  7.55e-01  
 16  +3.7321e-01  +3.7944e-01  6.23e-03  2.48e-06  4.40e-04  6.12e-07  9.49e-06  8.36e-01  
 17  +3.7257e-01  +3.7700e-01  4.43e-03  1.75e-06  3.11e-04  4.40e-07  6.73e-06  3.50e-01  
 18  +3.7185e-01  +3.7408e-01  2.22e-03  8.75e-07  1.55e-04  2.38e-07  3.39e-06  9.90e-01  
 19  +3.7102e-01  +3.7106e-01  4.54e-05  1.78e-08  3.16e-06  4.72e-09  6.98e-08  9.86e-01  
 20  +3.7100e-01  +3.7100e-01  4.55e-07  1.79e-10  3.17e-08  4.72e-11  7.00e-10  9.90e-01  
 21  +3.7100e-01  +3.7100e-01  4.55e-09  1.79e-12  3.17e-10  4.75e-13  7.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.3115ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:53 PM: Optimal value: 3.710e-01
(CVXPY) Oct 06 04:26:53 PM: Compilation took 3.132e-02 seconds
(CVXPY) Oct 06 04:26:53 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 11, Objective: 0.3710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:53 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:53 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 41629
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.7584e-01  +5.5024e+02  5.50e+02  4.43e-01  5.73e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2729e-01  +5.8545e+01  5.80e+01  1.68e-01  2.77e+01  1.83e-02  2.81e-01  9.83e-01  
  3  +5.0762e-01  +1.5027e+01  1.45e+01  1.01e-01  1.69e+01  5.28e-05  2.44e-01  4.38e-01  
  4  +5.0095e-01  +1.9074e+00  1.41e+00  1.39e-02  2.40e+00  9.34e-06  1.24e-01  7.15e-01  
  5  +5.0027e-01  +1.2689e+00  7.69e-01  7.09e-03  1.24e+00  1.73e-05  4.16e-02  7.97e-01  
  6  +4.9646e-01  +1.2531e+00  7.57e-01  1.14e-03  2.08e-01  1.88e-04  2.93e-03  9.53e-01  
  7  +4.8882e-01  +1.1192e+00  6.30e-01  5.02e-04  9.15e-02  2.84e-04  1.29e-03  6.10e-01  
  8  +4.8316e-01  +1.0616e+00  5.78e-01  3.55e-04  6.46e-02  2.76e-04  9.16e-04  4.18e-01  
  9  +4.7278e-01  +9.4097e-01  4.68e-01  2.50e-04  4.53e-02  1.49e-04  6.62e-04  5.60e-01  
 10  +4.7072e-01  +9.2359e-01  4.53e-01  2.41e-04  4.37e-02  1.36e-04  6.43e-04  7.91e-02  
 11  +4.5036e-01  +7.5942e-01  3.09e-01  1.56e-04  2.80e-02  1.52e-05  4.43e-04  8.72e-01  
 12  +4.3435e-01  +6.8196e-01  2.48e-01  1.20e-04  2.15e-02  2.39e-05  3.62e-04  9.63e-01  
 13  +4.0113e-01  +5.1449e-01  1.13e-01  4.90e-05  8.71e-03  9.53e-06  1.63e-04  6.13e-01  
 14  +3.9433e-01  +4.8454e-01  9.02e-02  3.83e-05  6.80e-03  8.05e-06  1.31e-04  3.56e-01  
 15  +3.7665e-01  +4.0751e-01  3.09e-02  1.26e-05  2.23e-03  3.11e-06  4.68e-05  8.80e-01  
 16  +3.7269e-01  +3.9124e-01  1.86e-02  7.52e-06  1.33e-03  1.89e-06  2.87e-05  4.62e-01  
 17  +3.6709e-01  +3.6855e-01  1.46e-03  5.87e-07  1.04e-04  1.44e-07  2.34e-06  9.34e-01  
 18  +3.6661e-01  +3.6662e-01  1.54e-05  6.18e-09  1.10e-06  1.51e-09  2.48e-08  9.90e-01  
 19  +3.6660e-01  +3.6660e-01  1.54e-07  6.19e-11  1.10e-08  1.51e-11  2.48e-10  9.90e-01  
 20  +3.6660e-01  +3.6660e-01  1.54e-09  6.19e-13  1.10e-10  1.52e-13  2.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 139.3303ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:53 PM: Optimal value: 3.666e-01
(CVXPY) Oct 06 04:26:53 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:26:53 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 12, Objective: 0.3666
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:53 PM: Your problem has 2641 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:53 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2641
  constraints   = 5141
  nnz(P)        = 0
  nnz(A)        = 41932
  cones (total) = 1
    : Nonnegative = 1,  numel = 5141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.7567e-01  +5.5022e+02  5.50e+02  4.43e-01  5.72e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2719e-01  +5.8442e+01  5.79e+01  1.67e-01  2.75e+01  1.83e-02  2.81e-01  9.85e-01  
  3  +5.0760e-01  +1.5000e+01  1.45e+01  1.01e-01  1.68e+01  5.30e-05  2.43e-01  4.42e-01  
  4  +5.0094e-01  +1.9013e+00  1.40e+00  1.39e-02  2.39e+00  9.38e-06  1.23e-01  7.18e-01  
  5  +5.0025e-01  +1.2750e+00  7.75e-01  7.07e-03  1.24e+00  1.82e-05  3.91e-02  8.17e-01  
  6  +4.9634e-01  +1.2533e+00  7.57e-01  1.11e-03  2.03e-01  1.92e-04  2.85e-03  9.46e-01  
  7  +4.8764e-01  +1.1059e+00  6.18e-01  4.59e-04  8.37e-02  3.01e-04  1.17e-03  6.42e-01  
  8  +4.8119e-01  +1.0512e+00  5.70e-01  3.25e-04  5.92e-02  3.02e-04  8.37e-04  3.96e-01  
  9  +4.7234e-01  +9.5547e-01  4.83e-01  2.53e-04  4.58e-02  1.79e-04  6.65e-04  4.52e-01  
 10  +4.5313e-01  +8.0318e-01  3.50e-01  1.71e-04  3.08e-02  6.49e-05  4.77e-04  6.03e-01  
 11  +4.2196e-01  +6.1898e-01  1.97e-01  9.08e-05  1.62e-02  8.15e-06  2.79e-04  9.90e-01  
 12  +3.9133e-01  +4.7511e-01  8.38e-02  3.58e-05  6.33e-03  3.69e-06  1.22e-04  6.26e-01  
 13  +3.7754e-01  +4.1585e-01  3.83e-02  1.58e-05  2.79e-03  2.17e-06  5.75e-05  6.25e-01  
 14  +3.7690e-01  +4.1282e-01  3.59e-02  1.49e-05  2.63e-03  2.25e-06  5.46e-05  1.75e-01  
 15  +3.7680e-01  +4.1240e-01  3.56e-02  1.47e-05  2.60e-03  2.36e-06  5.38e-05  8.33e-02  
 16  +3.7293e-01  +3.9664e-01  2.37e-02  9.63e-06  1.70e-03  1.78e-06  3.61e-05  4.63e-01  
 17  +3.6617e-01  +3.6928e-01  3.10e-03  1.25e-06  2.21e-04  2.62e-07  4.91e-06  9.10e-01  
 18  +3.6513e-01  +3.6520e-01  7.29e-05  2.93e-08  5.18e-06  6.22e-09  1.16e-07  9.79e-01  
 19  +3.6510e-01  +3.6510e-01  7.29e-07  2.93e-10  5.19e-08  6.22e-11  1.16e-09  9.90e-01  
 20  +3.6510e-01  +3.6510e-01  7.29e-09  2.93e-12  5.19e-10  6.23e-13  1.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.1265ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:54 PM: Optimal value: 3.651e-01
(CVXPY) Oct 06 04:26:54 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:54 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 13, Objective: 0.3651
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:54 PM: Your problem has 2651 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:54 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2651
  constraints   = 5151
  nnz(P)        = 0
  nnz(A)        = 42238
  cones (total) = 1
    : Nonnegative = 1,  numel = 5151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.80e-01  8.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.7554e-01  +5.5009e+02  5.50e+02  4.43e-01  5.71e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2711e-01  +5.8361e+01  5.78e+01  1.67e-01  2.74e+01  1.84e-02  2.80e-01  9.86e-01  
  3  +5.0758e-01  +1.4970e+01  1.45e+01  1.01e-01  1.67e+01  5.31e-05  2.42e-01  4.46e-01  
  4  +5.0093e-01  +1.8816e+00  1.38e+00  1.37e-02  2.36e+00  9.40e-06  1.21e-01  7.26e-01  
  5  +5.0025e-01  +1.3026e+00  8.02e-01  7.18e-03  1.26e+00  1.96e-05  3.64e-02  8.34e-01  
  6  +4.9615e-01  +1.2673e+00  7.71e-01  1.07e-03  1.96e-01  2.02e-04  2.72e-03  9.39e-01  
  7  +4.8527e-01  +1.1181e+00  6.33e-01  3.92e-04  7.15e-02  3.75e-04  9.91e-04  6.68e-01  
  8  +4.7327e-01  +9.8550e-01  5.12e-01  2.67e-04  4.84e-02  2.43e-04  6.93e-04  5.06e-01  
  9  +4.5401e-01  +8.3197e-01  3.78e-01  1.86e-04  3.34e-02  1.00e-04  5.09e-04  5.30e-01  
 10  +4.3541e-01  +7.1420e-01  2.79e-01  1.36e-04  2.43e-02  3.72e-05  4.00e-04  5.83e-01  
 11  +4.0623e-01  +5.6037e-01  1.54e-01  6.87e-05  1.22e-02  1.73e-05  2.21e-04  5.48e-01  
 12  +3.8545e-01  +4.6345e-01  7.80e-02  3.29e-05  5.82e-03  8.21e-06  1.15e-04  7.90e-01  
 13  +3.7268e-01  +4.0674e-01  3.41e-02  1.41e-05  2.49e-03  3.52e-06  5.27e-05  6.25e-01  
 14  +3.6822e-01  +3.8742e-01  1.92e-02  7.87e-06  1.39e-03  2.01e-06  3.03e-05  5.57e-01  
 15  +3.6249e-01  +3.6358e-01  1.08e-03  4.40e-07  7.77e-05  1.09e-07  1.78e-06  9.90e-01  
 16  +3.6210e-01  +3.6212e-01  1.16e-05  4.70e-09  8.29e-07  1.16e-09  1.91e-08  9.89e-01  
 17  +3.6210e-01  +3.6210e-01  1.16e-07  4.70e-11  8.29e-09  1.16e-11  1.91e-10  9.90e-01  
 18  +3.6210e-01  +3.6210e-01  1.16e-09  4.70e-13  8.29e-11  1.17e-13  1.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.4512ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:54 PM: Optimal value: 3.621e-01
(CVXPY) Oct 06 04:26:54 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:54 PM: Solver (including time spent in interface) took 1.409e-01 seconds
Iteration: 14, Objective: 0.3621
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:54 PM: Your problem has 2661 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:54 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2661
  constraints   = 5161
  nnz(P)        = 0
  nnz(A)        = 42771
  cones (total) = 1
    : Nonnegative = 1,  numel = 5161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.80e-01  8.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7546e-01  +5.5006e+02  5.49e+02  4.43e-01  5.70e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2703e-01  +5.8267e+01  5.77e+01  1.66e-01  2.73e+01  1.84e-02  2.79e-01  9.87e-01  
  3  +5.0757e-01  +1.4946e+01  1.44e+01  1.01e-01  1.67e+01  5.32e-05  2.41e-01  4.49e-01  
  4  +5.0093e-01  +1.9009e+00  1.40e+00  1.39e-02  2.39e+00  9.51e-06  1.21e-01  7.22e-01  
  5  +5.0032e-01  +1.3659e+00  8.66e-01  7.87e-03  1.38e+00  1.82e-05  4.15e-02  7.76e-01  
  6  +4.9667e-01  +1.3015e+00  8.05e-01  1.20e-03  2.20e-01  1.76e-04  3.06e-03  9.49e-01  
  7  +4.8620e-01  +1.1486e+00  6.62e-01  4.19e-04  7.66e-02  3.51e-04  1.06e-03  6.82e-01  
  8  +4.7206e-01  +9.9186e-01  5.20e-01  2.59e-04  4.71e-02  2.36e-04  6.72e-04  5.65e-01  
  9  +4.5131e-01  +8.1887e-01  3.68e-01  1.82e-04  3.27e-02  7.59e-05  5.01e-04  5.53e-01  
 10  +4.2876e-01  +6.7787e-01  2.49e-01  1.21e-04  2.16e-02  1.10e-05  3.61e-04  9.90e-01  
 11  +3.9424e-01  +5.0490e-01  1.11e-01  4.81e-05  8.52e-03  4.75e-06  1.60e-04  5.98e-01  
 12  +3.7768e-01  +4.3023e-01  5.26e-02  2.22e-05  3.92e-03  2.60e-06  7.95e-05  5.67e-01  
 13  +3.6784e-01  +3.8718e-01  1.93e-02  8.01e-06  1.41e-03  1.37e-06  3.04e-05  7.60e-01  
 14  +3.6505e-01  +3.7485e-01  9.80e-03  4.00e-06  7.07e-04  1.03e-06  1.56e-05  9.90e-01  
 15  +3.6313e-01  +3.6744e-01  4.31e-03  1.76e-06  3.10e-04  4.52e-07  7.00e-06  6.55e-01  
 16  +3.6167e-01  +3.6186e-01  1.92e-04  7.82e-08  1.38e-05  1.97e-08  3.17e-07  9.61e-01  
 17  +3.6160e-01  +3.6160e-01  1.93e-06  7.84e-10  1.38e-07  1.97e-10  3.19e-09  9.90e-01  
 18  +3.6160e-01  +3.6160e-01  1.93e-08  7.84e-12  1.38e-09  1.97e-12  3.19e-11  9.90e-01  
 19  +3.6160e-01  +3.6160e-01  1.93e-10  7.85e-14  1.39e-11  1.98e-14  3.20e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.693ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:54 PM: Optimal value: 3.616e-01
(CVXPY) Oct 06 04:26:54 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:54 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 15, Objective: 0.3616
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:55 PM: Your problem has 2671 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:55 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2671
  constraints   = 5171
  nnz(P)        = 0
  nnz(A)        = 42943
  cones (total) = 1
    : Nonnegative = 1,  numel = 5171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.80e-01  8.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7526e-01  +5.5010e+02  5.50e+02  4.44e-01  5.69e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2690e-01  +5.8149e+01  5.76e+01  1.66e-01  2.72e+01  1.84e-02  2.79e-01  9.89e-01  
  3  +5.0755e-01  +1.4915e+01  1.44e+01  1.00e-01  1.66e+01  5.34e-05  2.40e-01  4.54e-01  
  4  +5.0093e-01  +1.9015e+00  1.40e+00  1.39e-02  2.39e+00  9.59e-06  1.19e-01  7.24e-01  
  5  +5.0032e-01  +1.3436e+00  8.43e-01  7.72e-03  1.35e+00  1.71e-05  4.09e-02  7.38e-01  
  6  +4.9690e-01  +1.3399e+00  8.43e-01  1.31e-03  2.39e-01  1.64e-04  3.31e-03  9.46e-01  
  7  +4.8664e-01  +1.1781e+00  6.91e-01  4.45e-04  8.13e-02  3.34e-04  1.11e-03  6.90e-01  
  8  +4.7581e-01  +1.0619e+00  5.86e-01  3.02e-04  5.49e-02  2.70e-04  7.72e-04  4.59e-01  
  9  +4.5144e-01  +8.4010e-01  3.89e-01  1.85e-04  3.33e-02  9.34e-05  5.04e-04  5.92e-01  
 10  +4.2686e-01  +6.8321e-01  2.56e-01  1.23e-04  2.19e-02  1.89e-05  3.67e-04  7.97e-01  
 11  +3.9993e-01  +5.4229e-01  1.42e-01  6.36e-05  1.13e-02  9.87e-06  2.07e-04  4.90e-01  
 12  +3.7620e-01  +4.3067e-01  5.45e-02  2.31e-05  4.08e-03  3.75e-06  8.28e-05  6.69e-01  
 13  +3.6695e-01  +3.8914e-01  2.22e-02  9.21e-06  1.62e-03  1.90e-06  3.49e-05  7.59e-01  
 14  +3.6234e-01  +3.6927e-01  6.93e-03  2.84e-06  5.01e-04  7.32e-07  1.13e-05  9.90e-01  
 15  +3.6009e-01  +3.6062e-01  5.34e-04  2.18e-07  3.84e-05  5.49e-08  8.89e-07  9.34e-01  
 16  +3.5990e-01  +3.5991e-01  5.51e-06  2.25e-09  3.96e-07  5.65e-10  9.20e-09  9.90e-01  
 17  +3.5990e-01  +3.5990e-01  5.51e-08  2.25e-11  3.96e-09  5.65e-12  9.21e-11  9.90e-01  
 18  +3.5990e-01  +3.5990e-01  5.51e-10  2.25e-13  3.96e-11  5.67e-14  9.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 128.5707ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:55 PM: Optimal value: 3.599e-01
(CVXPY) Oct 06 04:26:55 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:26:55 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 16, Objective: 0.3599
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:55 PM: Your problem has 2681 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:55 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2681
  constraints   = 5181
  nnz(P)        = 0
  nnz(A)        = 43206
  cones (total) = 1
    : Nonnegative = 1,  numel = 5181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.81e-01  8.74e+01  1.00e+00  1.00e+00   ------   
  1  +5.7512e-01  +5.5012e+02  5.50e+02  4.44e-01  5.68e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2681e-01  +5.8090e+01  5.76e+01  1.66e-01  2.71e+01  1.84e-02  2.78e-01  9.90e-01  
  3  +5.0755e-01  +1.4904e+01  1.44e+01  1.00e-01  1.65e+01  5.37e-05  2.39e-01  4.59e-01  
  4  +5.0092e-01  +1.8901e+00  1.39e+00  1.38e-02  2.38e+00  9.65e-06  1.18e-01  7.29e-01  
  5  +5.0038e-01  +1.4342e+00  9.34e-01  8.48e-03  1.49e+00  1.81e-05  4.25e-02  7.26e-01  
  6  +4.9717e-01  +1.3849e+00  8.88e-01  1.42e-03  2.61e-01  1.54e-04  3.60e-03  9.48e-01  
  7  +4.8724e-01  +1.2071e+00  7.20e-01  4.80e-04  8.78e-02  3.10e-04  1.20e-03  6.95e-01  
  8  +4.7846e-01  +1.1073e+00  6.29e-01  3.38e-04  6.15e-02  2.58e-04  8.58e-04  4.39e-01  
  9  +4.6696e-01  +9.6253e-01  4.96e-01  2.62e-04  4.75e-02  1.04e-04  6.89e-04  5.33e-01  
 10  +4.4555e-01  +8.1126e-01  3.66e-01  1.74e-04  3.12e-02  6.56e-05  4.82e-04  4.17e-01  
 11  +4.1879e-01  +6.4230e-01  2.24e-01  1.05e-04  1.86e-02  1.33e-05  3.19e-04  9.69e-01  
 12  +3.8682e-01  +4.8359e-01  9.68e-02  4.19e-05  7.40e-03  5.32e-06  1.42e-04  6.08e-01  
 13  +3.7239e-01  +4.1843e-01  4.60e-02  1.94e-05  3.41e-03  2.95e-06  6.97e-05  6.02e-01  
 14  +3.6475e-01  +3.8498e-01  2.02e-02  8.33e-06  1.47e-03  1.71e-06  3.12e-05  7.52e-01  
 15  +3.5982e-01  +3.6496e-01  5.14e-03  2.06e-06  3.63e-04  4.81e-07  8.03e-06  8.27e-01  
 16  +3.5815e-01  +3.5854e-01  3.95e-04  1.57e-07  2.76e-05  3.86e-08  6.24e-07  9.67e-01  
 17  +3.5800e-01  +3.5801e-01  4.02e-06  1.59e-09  2.81e-07  3.92e-10  6.36e-09  9.90e-01  
 18  +3.5800e-01  +3.5800e-01  4.02e-08  1.59e-11  2.81e-09  3.92e-12  6.36e-11  9.90e-01  
 19  +3.5800e-01  +3.5800e-01  4.02e-10  1.59e-13  2.81e-11  3.96e-14  6.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 139.6345ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:55 PM: Optimal value: 3.580e-01
(CVXPY) Oct 06 04:26:55 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:55 PM: Solver (including time spent in interface) took 1.410e-01 seconds
Iteration: 17, Objective: 0.3580
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:55 PM: Your problem has 2691 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:55 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2691
  constraints   = 5191
  nnz(P)        = 0
  nnz(A)        = 43535
  cones (total) = 1
    : Nonnegative = 1,  numel = 5191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5016e+03  2.50e+03  9.81e-01  8.73e+01  1.00e+00  1.00e+00   ------   
  1  +5.7494e-01  +5.5012e+02  5.50e+02  4.44e-01  5.67e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2670e-01  +5.8151e+01  5.76e+01  1.66e-01  2.70e+01  1.84e-02  2.78e-01  9.90e-01  
  3  +5.0764e-01  +1.4918e+01  1.44e+01  9.97e-02  1.65e+01  5.45e-05  2.35e-01  4.71e-01  
  4  +5.0089e-01  +1.8774e+00  1.38e+00  1.38e-02  2.36e+00  9.93e-06  1.17e-01  7.33e-01  
  5  +5.0037e-01  +1.5137e+00  1.01e+00  8.99e-03  1.58e+00  2.03e-05  4.11e-02  7.54e-01  
  6  +4.9681e-01  +1.4027e+00  9.06e-01  1.42e-03  2.61e-01  1.57e-04  3.59e-03  9.39e-01  
  7  +4.8651e-01  +1.2155e+00  7.29e-01  4.97e-04  9.09e-02  2.99e-04  1.24e-03  6.85e-01  
  8  +4.7693e-01  +1.1193e+00  6.42e-01  3.39e-04  6.16e-02  2.68e-04  8.59e-04  4.47e-01  
  9  +4.6636e-01  +9.8366e-01  5.17e-01  2.75e-04  4.97e-02  1.13e-04  7.21e-04  4.93e-01  
 10  +4.1951e-01  +6.4878e-01  2.29e-01  9.92e-05  1.77e-02  2.21e-05  2.91e-04  8.29e-01  
 11  +3.9704e-01  +5.4339e-01  1.46e-01  6.32e-05  1.12e-02  1.37e-05  2.02e-04  4.22e-01  
 12  +3.7543e-01  +4.4330e-01  6.79e-02  2.88e-05  5.08e-03  6.34e-06  1.01e-04  6.08e-01  
 13  +3.6902e-01  +4.1488e-01  4.59e-02  1.92e-05  3.39e-03  4.34e-06  7.00e-05  3.62e-01  
 14  +3.6155e-01  +3.8165e-01  2.01e-02  8.25e-06  1.45e-03  2.14e-06  3.14e-05  8.47e-01  
 15  +3.5570e-01  +3.5789e-01  2.19e-03  8.87e-07  1.56e-04  2.33e-07  3.55e-06  9.74e-01  
 16  +3.5491e-01  +3.5495e-01  3.77e-05  1.52e-08  2.68e-06  3.87e-09  6.16e-08  9.90e-01  
 17  +3.5490e-01  +3.5490e-01  3.77e-07  1.52e-10  2.68e-08  3.87e-11  6.16e-10  9.90e-01  
 18  +3.5490e-01  +3.5490e-01  3.77e-09  1.52e-12  2.68e-10  3.89e-13  6.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.6672ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:56 PM: Optimal value: 3.549e-01
(CVXPY) Oct 06 04:26:56 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:56 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 18, Objective: 0.3549
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:56 PM: Your problem has 2701 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:56 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2701
  constraints   = 5201
  nnz(P)        = 0
  nnz(A)        = 43734
  cones (total) = 1
    : Nonnegative = 1,  numel = 5201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.7471e-01  +5.5020e+02  5.50e+02  4.45e-01  5.67e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2657e-01  +5.8259e+01  5.77e+01  1.66e-01  2.69e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0774e-01  +1.4834e+01  1.43e+01  9.88e-02  1.64e+01  5.52e-05  2.31e-01  4.91e-01  
  4  +5.0089e-01  +1.9338e+00  1.43e+00  1.44e-02  2.47e+00  1.05e-05  1.20e-01  7.13e-01  
  5  +5.0031e-01  +1.4716e+00  9.71e-01  8.87e-03  1.55e+00  1.81e-05  4.38e-02  7.21e-01  
  6  +4.9632e-01  +1.4205e+00  9.24e-01  1.48e-03  2.71e-01  1.53e-04  3.75e-03  9.50e-01  
  7  +4.8381e-01  +1.1959e+00  7.12e-01  4.61e-04  8.42e-02  3.05e-04  1.15e-03  7.25e-01  
  8  +4.7396e-01  +1.1033e+00  6.29e-01  3.22e-04  5.86e-02  2.68e-04  8.19e-04  4.33e-01  
  9  +4.6069e-01  +9.7111e-01  5.10e-01  2.54e-04  4.58e-02  1.41e-04  6.68e-04  4.31e-01  
 10  +4.1718e-01  +6.5169e-01  2.35e-01  1.06e-04  1.89e-02  2.10e-05  3.16e-04  7.44e-01  
 11  +3.9690e-01  +5.5278e-01  1.56e-01  6.89e-05  1.22e-02  1.35e-05  2.20e-04  3.96e-01  
 12  +3.8176e-01  +4.8184e-01  1.00e-01  4.32e-05  7.61e-03  8.74e-06  1.47e-04  4.19e-01  
 13  +3.6566e-01  +4.0831e-01  4.27e-02  1.78e-05  3.13e-03  4.28e-06  6.55e-05  8.09e-01  
 14  +3.5797e-01  +3.7539e-01  1.74e-02  7.13e-06  1.25e-03  1.82e-06  2.76e-05  7.36e-01  
 15  +3.5277e-01  +3.5412e-01  1.36e-03  5.50e-07  9.67e-05  1.37e-07  2.23e-06  9.39e-01  
 16  +3.5231e-01  +3.5232e-01  1.44e-05  5.84e-09  1.03e-06  1.45e-09  2.38e-08  9.90e-01  
 17  +3.5230e-01  +3.5230e-01  1.44e-07  5.84e-11  1.03e-08  1.45e-11  2.38e-10  9.90e-01  
 18  +3.5230e-01  +3.5230e-01  1.44e-09  5.84e-13  1.03e-10  1.45e-13  2.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 150.4314ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:56 PM: Optimal value: 3.523e-01
(CVXPY) Oct 06 04:26:56 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:56 PM: Solver (including time spent in interface) took 1.569e-01 seconds
Iteration: 19, Objective: 0.3523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:56 PM: Your problem has 2711 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:56 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2711
  constraints   = 5211
  nnz(P)        = 0
  nnz(A)        = 43907
  cones (total) = 1
    : Nonnegative = 1,  numel = 5211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.7459e-01  +5.5010e+02  5.50e+02  4.45e-01  5.65e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2649e-01  +5.8310e+01  5.78e+01  1.66e-01  2.68e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0778e-01  +1.4735e+01  1.42e+01  9.79e-02  1.63e+01  5.56e-05  2.27e-01  5.04e-01  
  4  +5.0085e-01  +1.9300e+00  1.43e+00  1.44e-02  2.46e+00  1.08e-05  1.19e-01  7.11e-01  
  5  +5.0027e-01  +1.4765e+00  9.76e-01  8.87e-03  1.55e+00  1.86e-05  4.26e-02  7.29e-01  
  6  +4.9574e-01  +1.4248e+00  9.29e-01  1.43e-03  2.62e-01  1.61e-04  3.60e-03  9.46e-01  
  7  +4.8313e-01  +1.2274e+00  7.44e-01  4.80e-04  8.76e-02  3.17e-04  1.20e-03  6.95e-01  
  8  +4.6906e-01  +1.0864e+00  6.17e-01  3.10e-04  5.63e-02  2.62e-04  7.94e-04  4.68e-01  
  9  +4.5325e-01  +9.4252e-01  4.89e-01  2.42e-04  4.35e-02  1.56e-04  6.45e-04  3.25e-01  
 10  +4.1025e-01  +6.3318e-01  2.23e-01  1.01e-04  1.80e-02  1.93e-05  3.07e-04  7.70e-01  
 11  +3.9256e-01  +5.4487e-01  1.52e-01  6.78e-05  1.20e-02  1.30e-05  2.20e-04  3.74e-01  
 12  +3.7658e-01  +4.6803e-01  9.15e-02  3.97e-05  6.98e-03  7.87e-06  1.38e-04  4.53e-01  
 13  +3.6210e-01  +4.0024e-01  3.81e-02  1.61e-05  2.82e-03  3.80e-06  6.00e-05  8.12e-01  
 14  +3.5566e-01  +3.7257e-01  1.69e-02  7.02e-06  1.23e-03  1.71e-06  2.74e-05  6.33e-01  
 15  +3.5071e-01  +3.5193e-01  1.22e-03  4.99e-07  8.77e-05  1.19e-07  2.04e-06  9.44e-01  
 16  +3.5030e-01  +3.5032e-01  1.28e-05  5.24e-09  9.21e-07  1.24e-09  2.15e-08  9.90e-01  
 17  +3.5030e-01  +3.5030e-01  1.28e-07  5.24e-11  9.21e-09  1.24e-11  2.15e-10  9.90e-01  
 18  +3.5030e-01  +3.5030e-01  1.28e-09  5.24e-13  9.21e-11  1.25e-13  2.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.473ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:56 PM: Optimal value: 3.503e-01
(CVXPY) Oct 06 04:26:56 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:56 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 20, Objective: 0.3503
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:57 PM: Your problem has 2721 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:57 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2721
  constraints   = 5221
  nnz(P)        = 0
  nnz(A)        = 44060
  cones (total) = 1
    : Nonnegative = 1,  numel = 5221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.7438e-01  +5.5016e+02  5.50e+02  4.45e-01  5.64e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2638e-01  +5.8409e+01  5.79e+01  1.66e-01  2.68e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0783e-01  +1.4586e+01  1.41e+01  9.67e-02  1.61e+01  5.61e-05  2.23e-01  5.23e-01  
  4  +5.0082e-01  +1.9371e+00  1.44e+00  1.45e-02  2.48e+00  1.13e-05  1.20e-01  7.02e-01  
  5  +5.0021e-01  +1.4602e+00  9.60e-01  8.77e-03  1.53e+00  1.84e-05  4.23e-02  7.26e-01  
  6  +4.9505e-01  +1.4243e+00  9.29e-01  1.40e-03  2.55e-01  1.66e-04  3.51e-03  9.46e-01  
  7  +4.8158e-01  +1.2227e+00  7.41e-01  4.77e-04  8.70e-02  3.18e-04  1.19e-03  6.89e-01  
  8  +4.6430e-01  +1.0455e+00  5.81e-01  2.91e-04  5.26e-02  2.37e-04  7.50e-04  5.14e-01  
  9  +4.4508e-01  +8.7513e-01  4.30e-01  2.15e-04  3.86e-02  9.83e-05  5.89e-04  4.66e-01  
 10  +4.0490e-01  +6.1505e-01  2.10e-01  9.55e-05  1.69e-02  2.72e-05  2.94e-04  6.59e-01  
 11  +3.8431e-01  +5.1193e-01  1.28e-01  5.62e-05  9.90e-03  1.52e-05  1.87e-04  4.70e-01  
 12  +3.7247e-01  +4.5635e-01  8.39e-02  3.60e-05  6.32e-03  9.82e-06  1.26e-04  4.17e-01  
 13  +3.5874e-01  +3.9248e-01  3.37e-02  1.40e-05  2.45e-03  3.88e-06  5.26e-05  8.75e-01  
 14  +3.5059e-01  +3.5831e-01  7.72e-03  3.16e-06  5.55e-04  8.62e-07  1.26e-05  8.03e-01  
 15  +3.4824e-01  +3.4864e-01  3.93e-04  1.61e-07  2.82e-05  4.02e-08  6.52e-07  9.90e-01  
 16  +3.4810e-01  +3.4811e-01  3.94e-06  1.61e-09  2.82e-07  4.02e-10  6.53e-09  9.90e-01  
 17  +3.4810e-01  +3.4810e-01  3.94e-08  1.61e-11  2.82e-09  4.02e-12  6.53e-11  9.90e-01  
 18  +3.4810e-01  +3.4810e-01  3.94e-10  1.61e-13  2.82e-11  4.03e-14  6.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.0662ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:57 PM: Optimal value: 3.481e-01
(CVXPY) Oct 06 04:26:57 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:57 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 21, Objective: 0.3481
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:57 PM: Your problem has 2731 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:57 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2731
  constraints   = 5231
  nnz(P)        = 0
  nnz(A)        = 44205
  cones (total) = 1
    : Nonnegative = 1,  numel = 5231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.7420e-01  +5.5019e+02  5.50e+02  4.45e-01  5.64e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2627e-01  +5.8511e+01  5.80e+01  1.66e-01  2.67e+01  1.85e-02  2.77e-01  9.90e-01  
  3  +5.0787e-01  +1.4399e+01  1.39e+01  9.53e-02  1.59e+01  5.65e-05  2.18e-01  5.42e-01  
  4  +5.0078e-01  +1.9500e+00  1.45e+00  1.47e-02  2.51e+00  1.18e-05  1.22e-01  6.90e-01  
  5  +5.0014e-01  +1.4573e+00  9.57e-01  8.74e-03  1.53e+00  1.87e-05  4.17e-02  7.31e-01  
  6  +4.9413e-01  +1.4228e+00  9.29e-01  1.34e-03  2.45e-01  1.76e-04  3.38e-03  9.46e-01  
  7  +4.7898e-01  +1.1918e+00  7.13e-01  4.49e-04  8.18e-02  3.15e-04  1.12e-03  7.11e-01  
  8  +4.6393e-01  +1.0423e+00  5.78e-01  3.02e-04  5.47e-02  2.17e-04  7.82e-04  4.78e-01  
  9  +4.4784e-01  +9.0772e-01  4.60e-01  2.32e-04  4.16e-02  1.16e-04  6.27e-04  4.24e-01  
 10  +4.1106e-01  +6.5863e-01  2.48e-01  1.16e-04  2.05e-02  2.79e-05  3.49e-04  7.06e-01  
 11  +3.8644e-01  +5.2921e-01  1.43e-01  6.42e-05  1.13e-02  1.45e-05  2.12e-04  4.64e-01  
 12  +3.7282e-01  +4.6389e-01  9.11e-02  3.97e-05  6.97e-03  9.16e-06  1.39e-04  4.14e-01  
 13  +3.6722e-01  +4.3716e-01  6.99e-02  2.99e-05  5.24e-03  7.29e-06  1.07e-04  4.29e-01  
 14  +3.5246e-01  +3.7055e-01  1.81e-02  7.47e-06  1.31e-03  1.94e-06  2.91e-05  9.28e-01  
 15  +3.4707e-01  +3.4838e-01  1.31e-03  5.39e-07  9.45e-05  1.33e-07  2.19e-06  9.90e-01  
 16  +3.4660e-01  +3.4662e-01  1.34e-05  5.49e-09  9.64e-07  1.36e-09  2.25e-08  9.90e-01  
 17  +3.4660e-01  +3.4660e-01  1.34e-07  5.49e-11  9.64e-09  1.36e-11  2.25e-10  9.90e-01  
 18  +3.4660e-01  +3.4660e-01  1.34e-09  5.49e-13  9.64e-11  1.36e-13  2.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.6283ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:57 PM: Optimal value: 3.466e-01
(CVXPY) Oct 06 04:26:57 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:26:57 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 22, Objective: 0.3466
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:57 PM: Your problem has 2741 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:58 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:58 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2741
  constraints   = 5241
  nnz(P)        = 0
  nnz(A)        = 44485
  cones (total) = 1
    : Nonnegative = 1,  numel = 5241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.7412e-01  +5.5017e+02  5.50e+02  4.45e-01  5.63e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2620e-01  +5.8523e+01  5.80e+01  1.66e-01  2.66e+01  1.85e-02  2.77e-01  9.90e-01  
  3  +5.0788e-01  +1.4295e+01  1.38e+01  9.45e-02  1.58e+01  5.66e-05  2.16e-01  5.52e-01  
  4  +5.0075e-01  +1.9321e+00  1.43e+00  1.45e-02  2.48e+00  1.20e-05  1.21e-01  6.91e-01  
  5  +5.0008e-01  +1.4412e+00  9.41e-01  8.48e-03  1.48e+00  1.96e-05  3.90e-02  7.52e-01  
  6  +4.9335e-01  +1.3960e+00  9.03e-01  1.24e-03  2.26e-01  1.88e-04  3.12e-03  9.41e-01  
  7  +4.7800e-01  +1.1772e+00  6.99e-01  4.41e-04  8.02e-02  3.13e-04  1.11e-03  6.99e-01  
  8  +4.6408e-01  +1.0398e+00  5.76e-01  3.09e-04  5.59e-02  2.06e-04  8.02e-04  4.75e-01  
  9  +4.4730e-01  +9.0036e-01  4.53e-01  2.33e-04  4.18e-02  1.03e-04  6.35e-04  4.59e-01  
 10  +4.0855e-01  +6.4556e-01  2.37e-01  1.10e-04  1.95e-02  2.48e-05  3.36e-04  7.33e-01  
 11  +3.8515e-01  +5.2531e-01  1.40e-01  6.30e-05  1.11e-02  1.35e-05  2.09e-04  4.60e-01  
 12  +3.7016e-01  +4.5362e-01  8.35e-02  3.65e-05  6.38e-03  7.95e-06  1.29e-04  4.50e-01  
 13  +3.6520e-01  +4.3028e-01  6.51e-02  2.80e-05  4.89e-03  6.41e-06  1.02e-04  3.61e-01  
 14  +3.5163e-01  +3.6910e-01  1.75e-02  7.25e-06  1.27e-03  1.81e-06  2.86e-05  8.95e-01  
 15  +3.4777e-01  +3.5274e-01  4.97e-03  2.05e-06  3.58e-04  5.10e-07  8.33e-06  9.90e-01  
 16  +3.4603e-01  +3.4613e-01  9.66e-05  3.98e-08  6.95e-06  9.76e-09  1.64e-07  9.81e-01  
 17  +3.4600e-01  +3.4600e-01  9.66e-07  3.98e-10  6.95e-08  9.76e-11  1.64e-09  9.90e-01  
 18  +3.4600e-01  +3.4600e-01  9.67e-09  3.98e-12  6.95e-10  9.78e-13  1.64e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.4691ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:58 PM: Optimal value: 3.460e-01
(CVXPY) Oct 06 04:26:58 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:58 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 23, Objective: 0.3460
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:58 PM: Your problem has 2751 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:58 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2751
  constraints   = 5251
  nnz(P)        = 0
  nnz(A)        = 44649
  cones (total) = 1
    : Nonnegative = 1,  numel = 5251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.7394e-01  +5.5014e+02  5.50e+02  4.45e-01  5.62e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2610e-01  +5.8602e+01  5.81e+01  1.66e-01  2.65e+01  1.86e-02  2.77e-01  9.90e-01  
  3  +5.0792e-01  +1.4100e+01  1.36e+01  9.30e-02  1.55e+01  5.70e-05  2.11e-01  5.70e-01  
  4  +5.0069e-01  +1.9271e+00  1.43e+00  1.45e-02  2.47e+00  1.25e-05  1.22e-01  6.83e-01  
  5  +4.9999e-01  +1.4309e+00  9.31e-01  8.32e-03  1.46e+00  2.04e-05  3.75e-02  7.60e-01  
  6  +4.9196e-01  +1.3841e+00  8.92e-01  1.14e-03  2.08e-01  2.09e-04  2.86e-03  9.42e-01  
  7  +4.7625e-01  +1.1655e+00  6.89e-01  4.42e-04  8.03e-02  3.07e-04  1.12e-03  6.75e-01  
  8  +4.6059e-01  +1.0325e+00  5.72e-01  2.99e-04  5.39e-02  2.36e-04  7.78e-04  4.37e-01  
  9  +4.2938e-01  +7.7683e-01  3.47e-01  1.73e-04  3.08e-02  3.20e-05  4.94e-04  7.49e-01  
 10  +3.9153e-01  +5.5857e-01  1.67e-01  7.63e-05  1.34e-02  1.27e-05  2.45e-04  5.77e-01  
 11  +3.8174e-01  +5.1214e-01  1.30e-01  5.83e-05  1.02e-02  1.04e-05  1.95e-04  3.03e-01  
 12  +3.6600e-01  +4.3820e-01  7.22e-02  3.13e-05  5.47e-03  5.82e-06  1.12e-04  4.88e-01  
 13  +3.6068e-01  +4.1420e-01  5.35e-02  2.29e-05  4.00e-03  4.40e-06  8.44e-05  2.97e-01  
 14  +3.4995e-01  +3.6643e-01  1.65e-02  6.84e-06  1.20e-03  1.44e-06  2.70e-05  7.67e-01  
 15  +3.4563e-01  +3.4812e-01  2.49e-03  1.02e-06  1.79e-04  2.26e-07  4.19e-06  8.95e-01  
 16  +3.4482e-01  +3.4487e-01  4.90e-05  2.01e-08  3.51e-06  4.53e-09  8.29e-08  9.87e-01  
 17  +3.4480e-01  +3.4480e-01  4.91e-07  2.01e-10  3.51e-08  4.53e-11  8.30e-10  9.90e-01  
 18  +3.4480e-01  +3.4480e-01  4.91e-09  2.01e-12  3.52e-10  4.54e-13  8.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.2501ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:58 PM: Optimal value: 3.448e-01
(CVXPY) Oct 06 04:26:58 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:58 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 24, Objective: 0.3448
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:58 PM: Your problem has 2761 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:58 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2761
  constraints   = 5261
  nnz(P)        = 0
  nnz(A)        = 44952
  cones (total) = 1
    : Nonnegative = 1,  numel = 5261

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5019e+03  2.50e+03  9.81e-01  8.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.7376e-01  +5.5015e+02  5.50e+02  4.46e-01  5.61e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2601e-01  +5.8674e+01  5.81e+01  1.66e-01  2.65e+01  1.86e-02  2.77e-01  9.90e-01  
  3  +5.0794e-01  +1.3924e+01  1.34e+01  9.16e-02  1.53e+01  5.73e-05  2.07e-01  5.86e-01  
  4  +5.0064e-01  +1.9082e+00  1.41e+00  1.43e-02  2.44e+00  1.29e-05  1.22e-01  6.79e-01  
  5  +4.9991e-01  +1.4226e+00  9.23e-01  8.20e-03  1.43e+00  2.12e-05  3.64e-02  7.67e-01  
  6  +4.9077e-01  +1.3648e+00  8.74e-01  1.06e-03  1.94e-01  2.25e-04  2.67e-03  9.43e-01  
  7  +4.7607e-01  +1.1685e+00  6.92e-01  4.60e-04  8.36e-02  2.97e-04  1.16e-03  6.45e-01  
  8  +4.5911e-01  +1.0258e+00  5.67e-01  2.99e-04  5.40e-02  2.41e-04  7.80e-04  4.35e-01  
  9  +4.3007e-01  +7.9124e-01  3.61e-01  1.82e-04  3.24e-02  4.50e-05  5.17e-04  7.02e-01  
 10  +3.9166e-01  +5.6597e-01  1.74e-01  7.98e-05  1.40e-02  1.72e-05  2.54e-04  5.76e-01  
 11  +3.7309e-01  +4.7593e-01  1.03e-01  4.56e-05  7.99e-03  9.94e-06  1.57e-04  4.90e-01  
 12  +3.5912e-01  +4.1116e-01  5.20e-02  2.24e-05  3.91e-03  5.06e-06  8.23e-05  5.71e-01  
 13  +3.5208e-01  +3.7892e-01  2.68e-02  1.12e-05  1.96e-03  2.80e-06  4.32e-05  7.95e-01  
 14  +3.4458e-01  +3.4764e-01  3.06e-03  1.26e-06  2.21e-04  3.12e-07  5.15e-06  9.90e-01  
 15  +3.4352e-01  +3.4356e-01  4.24e-05  1.75e-08  3.05e-06  4.24e-09  7.22e-08  9.87e-01  
 16  +3.4350e-01  +3.4350e-01  4.24e-07  1.75e-10  3.05e-08  4.24e-11  7.22e-10  9.90e-01  
 17  +3.4350e-01  +3.4350e-01  4.24e-09  1.75e-12  3.05e-10  4.25e-13  7.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.1968ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:59 PM: Optimal value: 3.435e-01
(CVXPY) Oct 06 04:26:59 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:26:59 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 25, Objective: 0.3435
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:59 PM: Your problem has 2771 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:59 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2771
  constraints   = 5271
  nnz(P)        = 0
  nnz(A)        = 45183
  cones (total) = 1
    : Nonnegative = 1,  numel = 5271

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7350e-01  +5.5026e+02  5.50e+02  4.46e-01  5.60e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2587e-01  +5.8820e+01  5.83e+01  1.66e-01  2.64e+01  1.86e-02  2.77e-01  9.90e-01  
  3  +5.0799e-01  +1.3661e+01  1.32e+01  8.95e-02  1.50e+01  5.78e-05  2.01e-01  6.09e-01  
  4  +5.0056e-01  +1.8955e+00  1.39e+00  1.42e-02  2.42e+00  1.36e-05  1.23e-01  6.65e-01  
  5  +4.9977e-01  +1.4024e+00  9.03e-01  7.93e-03  1.39e+00  2.27e-05  3.45e-02  7.80e-01  
  6  +4.8832e-01  +1.3244e+00  8.36e-01  9.23e-04  1.68e-01  2.62e-04  2.32e-03  9.45e-01  
  7  +4.7360e-01  +1.1493e+00  6.76e-01  4.47e-04  8.11e-02  3.00e-04  1.13e-03  6.23e-01  
  8  +4.4912e-01  +9.5242e-01  5.03e-01  2.52e-04  4.54e-02  2.33e-04  6.69e-04  4.92e-01  
  9  +4.2918e-01  +8.0108e-01  3.72e-01  1.94e-04  3.45e-02  3.46e-05  5.56e-04  7.26e-01  
 10  +3.8893e-01  +5.6137e-01  1.72e-01  7.92e-05  1.39e-02  1.36e-05  2.54e-04  5.88e-01  
 11  +3.6725e-01  +4.5564e-01  8.84e-02  3.91e-05  6.83e-03  7.21e-06  1.37e-04  5.84e-01  
 12  +3.5907e-01  +4.1815e-01  5.91e-02  2.56e-05  4.47e-03  4.97e-06  9.40e-05  3.95e-01  
 13  +3.5024e-01  +3.7748e-01  2.72e-02  1.15e-05  2.01e-03  2.63e-06  4.48e-05  7.89e-01  
 14  +3.4303e-01  +3.4684e-01  3.81e-03  1.59e-06  2.78e-04  3.83e-07  6.54e-06  9.90e-01  
 15  +3.4172e-01  +3.4178e-01  5.98e-05  2.49e-08  4.35e-06  5.89e-09  1.04e-07  9.85e-01  
 16  +3.4170e-01  +3.4170e-01  5.98e-07  2.49e-10  4.35e-08  5.89e-11  1.04e-09  9.90e-01  
 17  +3.4170e-01  +3.4170e-01  5.98e-09  2.49e-12  4.35e-10  5.90e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.4322ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:59 PM: Optimal value: 3.417e-01
(CVXPY) Oct 06 04:26:59 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:59 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 26, Objective: 0.3417
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:59 PM: Your problem has 2772 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:59 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2772
  constraints   = 5272
  nnz(P)        = 0
  nnz(A)        = 45437
  cones (total) = 1
    : Nonnegative = 1,  numel = 5272

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.7349e-01  +5.5009e+02  5.50e+02  4.46e-01  5.60e+01  3.77e-03  5.86e-01  5.76e-01  
  2  +5.2588e-01  +5.8791e+01  5.83e+01  1.65e-01  2.64e+01  1.86e-02  2.76e-01  9.90e-01  
  3  +5.0799e-01  +1.3644e+01  1.31e+01  8.93e-02  1.50e+01  5.77e-05  2.01e-01  6.09e-01  
  4  +5.0056e-01  +1.8915e+00  1.39e+00  1.42e-02  2.42e+00  1.36e-05  1.23e-01  6.67e-01  
  5  +4.9976e-01  +1.3955e+00  8.96e-01  7.83e-03  1.37e+00  2.29e-05  3.39e-02  7.83e-01  
  6  +4.8806e-01  +1.3164e+00  8.28e-01  9.01e-04  1.64e-01  2.66e-04  2.26e-03  9.45e-01  
  7  +4.7276e-01  +1.1418e+00  6.69e-01  4.35e-04  7.89e-02  3.09e-04  1.10e-03  6.15e-01  
  8  +4.5012e-01  +9.6011e-01  5.10e-01  2.60e-04  4.69e-02  2.39e-04  6.89e-04  4.52e-01  
  9  +4.2645e-01  +7.7937e-01  3.53e-01  1.84e-04  3.27e-02  7.19e-06  5.32e-04  8.45e-01  
 10  +3.8811e-01  +5.5707e-01  1.69e-01  7.78e-05  1.37e-02  4.96e-06  2.51e-04  5.95e-01  
 11  +3.6361e-01  +4.3779e-01  7.42e-02  3.26e-05  5.70e-03  4.12e-06  1.16e-04  7.02e-01  
 12  +3.5938e-01  +4.1877e-01  5.94e-02  2.58e-05  4.51e-03  3.54e-06  9.42e-05  2.56e-01  
 13  +3.4994e-01  +3.7615e-01  2.62e-02  1.11e-05  1.94e-03  2.17e-06  4.31e-05  7.79e-01  
 14  +3.4304e-01  +3.4689e-01  3.84e-03  1.60e-06  2.81e-04  3.82e-07  6.59e-06  9.90e-01  
 15  +3.4172e-01  +3.4178e-01  6.01e-05  2.50e-08  4.37e-06  5.84e-09  1.04e-07  9.85e-01  
 16  +3.4170e-01  +3.4170e-01  6.00e-07  2.50e-10  4.37e-08  5.84e-11  1.04e-09  9.90e-01  
 17  +3.4170e-01  +3.4170e-01  6.01e-09  2.50e-12  4.37e-10  5.85e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.8755ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:59 PM: Optimal value: 3.417e-01
(CVXPY) Oct 06 04:26:59 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:59 PM: Solver (including time spent in interface) took 1.660e-01 seconds
Iteration: 27, Objective: 0.3417
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:00 PM: Your problem has 2782 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:00 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2782
  constraints   = 5282
  nnz(P)        = 0
  nnz(A)        = 45556
  cones (total) = 1
    : Nonnegative = 1,  numel = 5282

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7334e-01  +5.5015e+02  5.50e+02  4.46e-01  5.59e+01  3.77e-03  5.86e-01  5.76e-01  
  2  +5.2581e-01  +5.8843e+01  5.83e+01  1.65e-01  2.63e+01  1.86e-02  2.76e-01  9.90e-01  
  3  +5.0801e-01  +1.3525e+01  1.30e+01  8.84e-02  1.49e+01  5.80e-05  1.98e-01  6.19e-01  
  4  +5.0052e-01  +1.8714e+00  1.37e+00  1.40e-02  2.38e+00  1.39e-05  1.23e-01  6.64e-01  
  5  +4.9963e-01  +1.3650e+00  8.65e-01  7.40e-03  1.30e+00  2.46e-05  3.10e-02  8.04e-01  
  6  +4.8605e-01  +1.2692e+00  7.83e-01  7.85e-04  1.43e-01  2.99e-04  1.97e-03  9.45e-01  
  7  +4.7178e-01  +1.1217e+00  6.50e-01  4.14e-04  7.50e-02  2.87e-04  1.05e-03  6.58e-01  
  8  +4.5031e-01  +9.5359e-01  5.03e-01  2.62e-04  4.70e-02  2.22e-04  6.93e-04  4.06e-01  
  9  +4.2620e-01  +7.8090e-01  3.55e-01  1.85e-04  3.28e-02  1.10e-05  5.36e-04  8.41e-01  
 10  +3.8684e-01  +5.5438e-01  1.68e-01  7.70e-05  1.35e-02  5.78e-06  2.50e-04  5.86e-01  
 11  +3.6266e-01  +4.3862e-01  7.60e-02  3.33e-05  5.82e-03  4.75e-06  1.20e-04  7.16e-01  
 12  +3.5799e-01  +4.1776e-01  5.98e-02  2.59e-05  4.52e-03  3.95e-06  9.54e-05  2.67e-01  
 13  +3.4838e-01  +3.7443e-01  2.61e-02  1.10e-05  1.92e-03  2.26e-06  4.32e-05  7.90e-01  
 14  +3.4100e-01  +3.4342e-01  2.42e-03  1.01e-06  1.76e-04  2.12e-07  4.19e-06  9.35e-01  
 15  +3.4021e-01  +3.4024e-01  2.81e-05  1.17e-08  2.05e-06  2.45e-09  4.92e-08  9.88e-01  
 16  +3.4020e-01  +3.4020e-01  2.81e-07  1.17e-10  2.05e-08  2.45e-11  4.92e-10  9.90e-01  
 17  +3.4020e-01  +3.4020e-01  2.81e-09  1.17e-12  2.05e-10  2.45e-13  4.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.7978ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:00 PM: Optimal value: 3.402e-01
(CVXPY) Oct 06 04:27:00 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:00 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 28, Objective: 0.3402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:00 PM: Your problem has 2792 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:00 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2792
  constraints   = 5292
  nnz(P)        = 0
  nnz(A)        = 45985
  cones (total) = 1
    : Nonnegative = 1,  numel = 5292

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7323e-01  +5.5014e+02  5.50e+02  4.46e-01  5.59e+01  3.77e-03  5.86e-01  5.76e-01  
  2  +5.2575e-01  +5.8895e+01  5.84e+01  1.65e-01  2.63e+01  1.86e-02  2.76e-01  9.90e-01  
  3  +5.0803e-01  +1.3403e+01  1.29e+01  8.74e-02  1.47e+01  5.82e-05  1.95e-01  6.29e-01  
  4  +5.0048e-01  +1.8713e+00  1.37e+00  1.39e-02  2.38e+00  1.44e-05  1.24e-01  6.55e-01  
  5  +4.9957e-01  +1.3686e+00  8.69e-01  7.41e-03  1.30e+00  2.53e-05  3.10e-02  8.04e-01  
  6  +4.8584e-01  +1.2672e+00  7.81e-01  8.10e-04  1.48e-01  2.97e-04  2.04e-03  9.42e-01  
  7  +4.7186e-01  +1.1283e+00  6.56e-01  4.22e-04  7.65e-02  2.86e-04  1.07e-03  6.94e-01  
  8  +4.5752e-01  +1.0160e+00  5.58e-01  3.12e-04  5.64e-02  2.44e-04  8.15e-04  2.80e-01  
  9  +4.2503e-01  +7.7105e-01  3.46e-01  1.76e-04  3.14e-02  2.44e-06  5.05e-04  9.05e-01  
 10  +3.8710e-01  +5.5584e-01  1.69e-01  7.84e-05  1.38e-02  3.08e-06  2.52e-04  5.61e-01  
 11  +3.6385e-01  +4.4660e-01  8.27e-02  3.65e-05  6.39e-03  5.10e-06  1.30e-04  7.39e-01  
 12  +3.5757e-01  +4.1841e-01  6.08e-02  2.65e-05  4.62e-03  3.97e-06  9.72e-05  3.15e-01  
 13  +3.4763e-01  +3.7336e-01  2.57e-02  1.09e-05  1.91e-03  2.33e-06  4.27e-05  8.41e-01  
 14  +3.4036e-01  +3.4296e-01  2.60e-03  1.09e-06  1.90e-04  2.35e-07  4.51e-06  9.26e-01  
 15  +3.3951e-01  +3.3954e-01  3.09e-05  1.29e-08  2.25e-06  2.77e-09  5.41e-08  9.88e-01  
 16  +3.3950e-01  +3.3950e-01  3.09e-07  1.29e-10  2.25e-08  2.77e-11  5.41e-10  9.90e-01  
 17  +3.3950e-01  +3.3950e-01  3.09e-09  1.29e-12  2.25e-10  2.77e-13  5.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.4685ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:00 PM: Optimal value: 3.395e-01
(CVXPY) Oct 06 04:27:00 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:00 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 29, Objective: 0.3395
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:00 PM: Your problem has 2802 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:00 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2802
  constraints   = 5302
  nnz(P)        = 0
  nnz(A)        = 46204
  cones (total) = 1
    : Nonnegative = 1,  numel = 5302

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7311e-01  +5.5011e+02  5.50e+02  4.46e-01  5.58e+01  3.77e-03  5.85e-01  5.76e-01  
  2  +5.2570e-01  +5.8930e+01  5.84e+01  1.65e-01  2.62e+01  1.86e-02  2.76e-01  9.90e-01  
  3  +5.0804e-01  +1.3301e+01  1.28e+01  8.65e-02  1.46e+01  5.84e-05  1.93e-01  6.36e-01  
  4  +5.0044e-01  +1.8551e+00  1.35e+00  1.38e-02  2.34e+00  1.47e-05  1.24e-01  6.52e-01  
  5  +4.9939e-01  +1.3105e+00  8.11e-01  6.67e-03  1.17e+00  2.78e-05  2.66e-02  8.40e-01  
  6  +4.8619e-01  +1.2241e+00  7.38e-01  8.25e-04  1.50e-01  2.83e-04  2.08e-03  9.30e-01  
  7  +4.7202e-01  +1.1108e+00  6.39e-01  4.26e-04  7.73e-02  3.05e-04  1.08e-03  6.76e-01  
  8  +4.5646e-01  +9.9448e-01  5.38e-01  3.05e-04  5.49e-02  2.64e-04  7.98e-04  3.04e-01  
  9  +4.2547e-01  +7.7735e-01  3.52e-01  1.81e-04  3.22e-02  2.66e-06  5.18e-04  9.02e-01  
 10  +3.9128e-01  +5.8251e-01  1.91e-01  9.01e-05  1.58e-02  3.12e-06  2.86e-04  5.02e-01  
 11  +3.7104e-01  +4.8344e-01  1.12e-01  5.09e-05  8.90e-03  4.14e-06  1.74e-04  5.32e-01  
 12  +3.5520e-01  +4.0980e-01  5.46e-02  2.38e-05  4.15e-03  2.75e-06  8.80e-05  6.02e-01  
 13  +3.4593e-01  +3.6707e-01  2.11e-02  8.98e-06  1.57e-03  2.13e-06  3.53e-05  9.90e-01  
 14  +3.4102e-01  +3.4697e-01  5.95e-03  2.50e-06  4.37e-04  6.01e-07  1.02e-05  7.95e-01  
 15  +3.3909e-01  +3.3933e-01  2.48e-04  1.04e-07  1.82e-05  2.42e-08  4.34e-07  9.65e-01  
 16  +3.3900e-01  +3.3900e-01  2.57e-06  1.07e-09  1.88e-07  2.50e-10  4.50e-09  9.90e-01  
 17  +3.3900e-01  +3.3900e-01  2.59e-08  1.08e-11  1.90e-09  2.53e-12  4.54e-11  9.90e-01  
 18  +3.3900e-01  +3.3900e-01  2.63e-10  1.10e-13  1.92e-11  2.57e-14  4.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.0246ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:01 PM: Optimal value: 3.390e-01
(CVXPY) Oct 06 04:27:01 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:01 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 30, Objective: 0.3390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:01 PM: Your problem has 2812 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:01 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2812
  constraints   = 5312
  nnz(P)        = 0
  nnz(A)        = 46689
  cones (total) = 1
    : Nonnegative = 1,  numel = 5312

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.00e+00   ------   
  1  +5.7302e-01  +5.5004e+02  5.49e+02  4.46e-01  5.57e+01  3.77e-03  5.85e-01  5.77e-01  
  2  +5.2565e-01  +5.8961e+01  5.84e+01  1.65e-01  2.61e+01  1.86e-02  2.76e-01  9.90e-01  
  3  +5.0806e-01  +1.3197e+01  1.27e+01  8.56e-02  1.44e+01  5.85e-05  1.91e-01  6.44e-01  
  4  +5.0040e-01  +1.8287e+00  1.33e+00  1.35e-02  2.30e+00  1.49e-05  1.23e-01  6.52e-01  
  5  +4.9932e-01  +1.3137e+00  8.14e-01  6.66e-03  1.17e+00  2.89e-05  2.65e-02  8.35e-01  
  6  +4.8449e-01  +1.2120e+00  7.28e-01  7.63e-04  1.39e-01  3.11e-04  1.93e-03  9.36e-01  
  7  +4.6941e-01  +1.0981e+00  6.29e-01  4.03e-04  7.30e-02  3.14e-04  1.03e-03  6.79e-01  
  8  +4.5608e-01  +9.9817e-01  5.42e-01  3.08e-04  5.55e-02  2.66e-04  8.07e-04  2.60e-01  
  9  +4.2098e-01  +7.4947e-01  3.28e-01  1.65e-04  2.93e-02  2.73e-06  4.77e-04  9.08e-01  
 10  +3.9282e-01  +5.9268e-01  2.00e-01  9.47e-05  1.66e-02  3.19e-06  2.98e-04  4.27e-01  
 11  +3.7217e-01  +4.8990e-01  1.18e-01  5.35e-05  9.36e-03  4.33e-06  1.82e-04  5.33e-01  
 12  +3.5584e-01  +4.1316e-01  5.73e-02  2.50e-05  4.37e-03  2.82e-06  9.22e-05  5.94e-01  
 13  +3.4675e-01  +3.7134e-01  2.46e-02  1.05e-05  1.83e-03  2.09e-06  4.09e-05  8.56e-01  
 14  +3.4002e-01  +3.4310e-01  3.08e-03  1.30e-06  2.27e-04  2.66e-07  5.34e-06  8.99e-01  
 15  +3.3903e-01  +3.3913e-01  9.89e-05  4.16e-08  7.26e-06  8.59e-09  1.73e-07  9.76e-01  
 16  +3.3900e-01  +3.3900e-01  9.94e-07  4.18e-10  7.29e-08  8.63e-11  1.74e-09  9.90e-01  
 17  +3.3900e-01  +3.3900e-01  9.99e-09  4.20e-12  7.33e-10  8.67e-13  1.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.9799ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:01 PM: Optimal value: 3.390e-01
(CVXPY) Oct 06 04:27:01 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:01 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 31, Objective: 0.3390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:01 PM: Your problem has 2822 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:01 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2822
  constraints   = 5322
  nnz(P)        = 0
  nnz(A)        = 46946
  cones (total) = 1
    : Nonnegative = 1,  numel = 5322

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.00e+00   ------   
  1  +5.7301e-01  +5.4999e+02  5.49e+02  4.47e-01  5.56e+01  3.77e-03  5.85e-01  5.77e-01  
  2  +5.2560e-01  +5.8966e+01  5.84e+01  1.65e-01  2.61e+01  1.86e-02  2.75e-01  9.90e-01  
  3  +5.0807e-01  +1.3119e+01  1.26e+01  8.50e-02  1.43e+01  5.86e-05  1.89e-01  6.49e-01  
  4  +5.0041e-01  +1.8740e+00  1.37e+00  1.39e-02  2.37e+00  1.54e-05  1.26e-01  6.30e-01  
  5  +4.9939e-01  +1.3230e+00  8.24e-01  6.90e-03  1.21e+00  2.74e-05  2.85e-02  8.23e-01  
  6  +4.8168e-01  +1.2098e+00  7.28e-01  6.52e-04  1.19e-01  3.65e-04  1.64e-03  9.52e-01  
  7  +4.6569e-01  +1.0880e+00  6.22e-01  3.71e-04  6.72e-02  3.37e-04  9.47e-04  6.12e-01  
  8  +4.5189e-01  +9.8239e-01  5.31e-01  2.90e-04  5.21e-02  2.67e-04  7.63e-04  2.55e-01  
  9  +4.1547e-01  +7.2294e-01  3.07e-01  1.52e-04  2.69e-02  2.84e-05  4.44e-04  7.96e-01  
 10  +3.9254e-01  +5.9639e-01  2.04e-01  9.65e-05  1.70e-02  1.76e-05  3.04e-04  3.81e-01  
 11  +3.7133e-01  +4.8811e-01  1.17e-01  5.31e-05  9.28e-03  1.01e-05  1.81e-04  5.44e-01  
 12  +3.5533e-01  +4.1155e-01  5.62e-02  2.46e-05  4.29e-03  4.99e-06  9.05e-05  6.04e-01  
 13  +3.4660e-01  +3.7049e-01  2.39e-02  1.02e-05  1.78e-03  2.40e-06  3.98e-05  9.05e-01  
 14  +3.4067e-01  +3.4571e-01  5.04e-03  2.13e-06  3.71e-04  5.03e-07  8.70e-06  8.44e-01  
 15  +3.3906e-01  +3.3925e-01  1.83e-04  7.68e-08  1.34e-05  1.76e-08  3.20e-07  9.71e-01  
 16  +3.3900e-01  +3.3900e-01  1.86e-06  7.84e-10  1.37e-07  1.79e-10  3.27e-09  9.90e-01  
 17  +3.3900e-01  +3.3900e-01  1.88e-08  7.92e-12  1.38e-09  1.81e-12  3.31e-11  9.90e-01  
 18  +3.3900e-01  +3.3900e-01  1.91e-10  8.02e-14  1.40e-11  1.84e-14  3.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.429ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:01 PM: Optimal value: 3.390e-01
(CVXPY) Oct 06 04:27:01 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:27:01 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 32, Objective: 0.3390
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:02 PM: Your problem has 2832 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:02 PM: Finished problem compilation (took 4.689e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2832
  constraints   = 5332
  nnz(P)        = 0
  nnz(A)        = 47149
  cones (total) = 1
    : Nonnegative = 1,  numel = 5332

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.64e+01  1.00e+00  1.00e+00   ------   
  1  +5.7284e-01  +5.4993e+02  5.49e+02  4.47e-01  5.55e+01  3.77e-03  5.85e-01  5.77e-01  
  2  +5.2552e-01  +5.9042e+01  5.85e+01  1.65e-01  2.60e+01  1.86e-02  2.75e-01  9.90e-01  
  3  +5.0810e-01  +1.2947e+01  1.24e+01  8.35e-02  1.41e+01  5.90e-05  1.85e-01  6.61e-01  
  4  +5.0036e-01  +1.8684e+00  1.37e+00  1.38e-02  2.35e+00  1.61e-05  1.27e-01  6.15e-01  
  5  +4.9928e-01  +1.3338e+00  8.35e-01  6.91e-03  1.21e+00  2.95e-05  2.83e-02  8.23e-01  
  6  +4.8409e-01  +1.2306e+00  7.46e-01  8.16e-04  1.48e-01  3.15e-04  2.07e-03  9.37e-01  
  7  +4.7017e-01  +1.1275e+00  6.57e-01  4.47e-04  8.10e-02  3.42e-04  1.14e-03  6.18e-01  
  8  +4.5017e-01  +9.5952e-01  5.09e-01  2.86e-04  5.12e-02  9.39e-05  7.59e-04  7.95e-01  
  9  +4.0542e-01  +6.6169e-01  2.56e-01  1.22e-04  2.15e-02  3.63e-05  3.61e-04  6.00e-01  
 10  +3.8662e-01  +5.6789e-01  1.81e-01  8.38e-05  1.47e-02  2.38e-05  2.66e-04  3.62e-01  
 11  +3.6154e-01  +4.4516e-01  8.36e-02  3.72e-05  6.50e-03  9.80e-06  1.31e-04  6.39e-01  
 12  +3.5526e-01  +4.1645e-01  6.12e-02  2.68e-05  4.68e-03  7.11e-06  9.78e-05  3.32e-01  
 13  +3.4544e-01  +3.7105e-01  2.56e-02  1.10e-05  1.92e-03  2.81e-06  4.26e-05  8.76e-01  
 14  +3.3905e-01  +3.4413e-01  5.07e-03  2.16e-06  3.76e-04  5.35e-07  8.82e-06  8.41e-01  
 15  +3.3747e-01  +3.3766e-01  1.91e-04  8.09e-08  1.41e-05  1.90e-08  3.38e-07  9.73e-01  
 16  +3.3740e-01  +3.3740e-01  1.96e-06  8.27e-10  1.44e-07  1.94e-10  3.46e-09  9.90e-01  
 17  +3.3740e-01  +3.3740e-01  1.98e-08  8.35e-12  1.46e-09  1.96e-12  3.49e-11  9.90e-01  
 18  +3.3740e-01  +3.3740e-01  2.00e-10  8.45e-14  1.47e-11  1.99e-14  3.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.3278ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:02 PM: Optimal value: 3.374e-01
(CVXPY) Oct 06 04:27:02 PM: Compilation took 4.689e-02 seconds
(CVXPY) Oct 06 04:27:02 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 33, Objective: 0.3374
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:02 PM: Your problem has 2842 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:02 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2842
  constraints   = 5342
  nnz(P)        = 0
  nnz(A)        = 47394
  cones (total) = 1
    : Nonnegative = 1,  numel = 5342

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7275e-01  +5.4987e+02  5.49e+02  4.47e-01  5.54e+01  3.77e-03  5.85e-01  5.77e-01  
  2  +5.2548e-01  +5.9065e+01  5.85e+01  1.65e-01  2.59e+01  1.86e-02  2.75e-01  9.90e-01  
  3  +5.0810e-01  +1.2864e+01  1.24e+01  8.28e-02  1.39e+01  5.91e-05  1.83e-01  6.67e-01  
  4  +5.0033e-01  +1.8602e+00  1.36e+00  1.37e-02  2.33e+00  1.64e-05  1.27e-01  6.10e-01  
  5  +4.9921e-01  +1.3380e+00  8.39e-01  6.87e-03  1.20e+00  3.09e-05  2.79e-02  8.27e-01  
  6  +4.8397e-01  +1.2297e+00  7.46e-01  8.34e-04  1.52e-01  3.15e-04  2.12e-03  9.33e-01  
  7  +4.6879e-01  +1.1207e+00  6.52e-01  4.41e-04  7.97e-02  3.64e-04  1.12e-03  6.13e-01  
  8  +4.4735e-01  +9.4451e-01  4.97e-01  2.76e-04  4.94e-02  9.65e-05  7.37e-04  7.98e-01  
  9  +4.0258e-01  +6.5037e-01  2.48e-01  1.18e-04  2.07e-02  3.60e-05  3.52e-04  5.97e-01  
 10  +3.8537e-01  +5.6508e-01  1.80e-01  8.32e-05  1.46e-02  2.44e-05  2.65e-04  3.43e-01  
 11  +3.6156e-01  +4.4852e-01  8.70e-02  3.88e-05  6.78e-03  1.06e-05  1.36e-04  5.88e-01  
 12  +3.5534e-01  +4.1968e-01  6.43e-02  2.83e-05  4.94e-03  7.74e-06  1.03e-04  3.59e-01  
 13  +3.4515e-01  +3.7209e-01  2.69e-02  1.16e-05  2.02e-03  2.98e-06  4.47e-05  9.04e-01  
 14  +3.3834e-01  +3.4337e-01  5.03e-03  2.14e-06  3.74e-04  5.31e-07  8.77e-06  8.52e-01  
 15  +3.3677e-01  +3.3697e-01  2.00e-04  8.50e-08  1.48e-05  1.99e-08  3.55e-07  9.72e-01  
 16  +3.3670e-01  +3.3670e-01  2.06e-06  8.73e-10  1.52e-07  2.04e-10  3.65e-09  9.90e-01  
 17  +3.3670e-01  +3.3670e-01  2.08e-08  8.82e-12  1.54e-09  2.06e-12  3.69e-11  9.90e-01  
 18  +3.3670e-01  +3.3670e-01  2.10e-10  8.91e-14  1.55e-11  2.08e-14  3.73e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.0776ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:02 PM: Optimal value: 3.367e-01
(CVXPY) Oct 06 04:27:02 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:27:02 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 34, Objective: 0.3367
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:03 PM: Your problem has 2852 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:03 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2852
  constraints   = 5352
  nnz(P)        = 0
  nnz(A)        = 47691
  cones (total) = 1
    : Nonnegative = 1,  numel = 5352

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.62e+01  1.00e+00  1.00e+00   ------   
  1  +5.7259e-01  +5.4989e+02  5.49e+02  4.47e-01  5.53e+01  3.77e-03  5.85e-01  5.77e-01  
  2  +5.2538e-01  +5.9135e+01  5.86e+01  1.65e-01  2.58e+01  1.87e-02  2.75e-01  9.90e-01  
  3  +5.0814e-01  +1.2687e+01  1.22e+01  8.12e-02  1.37e+01  5.95e-05  1.79e-01  6.79e-01  
  4  +5.0027e-01  +1.8512e+00  1.35e+00  1.36e-02  2.30e+00  1.73e-05  1.28e-01  5.91e-01  
  5  +4.9912e-01  +1.3502e+00  8.51e-01  6.97e-03  1.22e+00  3.27e-05  2.88e-02  8.16e-01  
  6  +4.8169e-01  +1.2309e+00  7.49e-01  7.92e-04  1.44e-01  3.57e-04  2.02e-03  9.40e-01  
  7  +4.6322e-01  +1.0979e+00  6.35e-01  4.05e-04  7.32e-02  4.27e-04  1.04e-03  5.76e-01  
  8  +4.3573e-01  +8.7292e-01  4.37e-01  2.36e-04  4.21e-02  5.52e-05  6.51e-04  8.36e-01  
  9  +4.0217e-01  +6.6250e-01  2.60e-01  1.29e-04  2.26e-02  2.79e-05  3.89e-04  4.71e-01  
 10  +3.8347e-01  +5.6464e-01  1.81e-01  8.61e-05  1.51e-02  1.84e-05  2.78e-04  3.75e-01  
 11  +3.5879e-01  +4.3930e-01  8.05e-02  3.66e-05  6.37e-03  7.61e-06  1.31e-04  6.17e-01  
 12  +3.5351e-01  +4.1443e-01  6.09e-02  2.72e-05  4.74e-03  5.85e-06  1.00e-04  3.39e-01  
 13  +3.4320e-01  +3.6665e-01  2.35e-02  1.02e-05  1.78e-03  2.27e-06  4.01e-05  7.30e-01  
 14  +3.3767e-01  +3.4242e-01  4.76e-03  2.04e-06  3.56e-04  4.56e-07  8.45e-06  9.27e-01  
 15  +3.3617e-01  +3.3640e-01  2.21e-04  9.47e-08  1.65e-05  2.06e-08  3.99e-07  9.59e-01  
 16  +3.3610e-01  +3.3610e-01  2.27e-06  9.73e-10  1.69e-07  2.12e-10  4.11e-09  9.90e-01  
 17  +3.3610e-01  +3.3610e-01  2.29e-08  9.79e-12  1.71e-09  2.13e-12  4.14e-11  9.90e-01  
 18  +3.3610e-01  +3.3610e-01  2.32e-10  9.93e-14  1.73e-11  2.17e-14  4.20e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 170.7916ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:03 PM: Optimal value: 3.361e-01
(CVXPY) Oct 06 04:27:03 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:03 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 35, Objective: 0.3361
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:03 PM: Your problem has 2862 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:03 PM: Finished problem compilation (took 3.123e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2862
  constraints   = 5362
  nnz(P)        = 0
  nnz(A)        = 47882
  cones (total) = 1
    : Nonnegative = 1,  numel = 5362

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.62e+01  1.00e+00  1.00e+00   ------   
  1  +5.7243e-01  +5.4993e+02  5.49e+02  4.47e-01  5.53e+01  3.77e-03  5.85e-01  5.77e-01  
  2  +5.2526e-01  +5.9211e+01  5.87e+01  1.65e-01  2.58e+01  1.87e-02  2.75e-01  9.90e-01  
  3  +5.0818e-01  +1.2505e+01  1.20e+01  7.96e-02  1.34e+01  6.00e-05  1.75e-01  6.91e-01  
  4  +5.0021e-01  +1.8439e+00  1.34e+00  1.34e-02  2.27e+00  1.84e-05  1.30e-01  5.68e-01  
  5  +4.9899e-01  +1.3562e+00  8.57e-01  6.95e-03  1.21e+00  3.55e-05  2.89e-02  8.15e-01  
  6  +4.8185e-01  +1.2298e+00  7.48e-01  8.53e-04  1.54e-01  3.56e-04  2.19e-03  9.35e-01  
  7  +4.6403e-01  +1.1124e+00  6.48e-01  4.34e-04  7.83e-02  4.50e-04  1.12e-03  5.82e-01  
  8  +4.3579e-01  +8.7585e-01  4.40e-01  2.38e-04  4.24e-02  3.50e-05  6.52e-04  9.14e-01  
  9  +3.9960e-01  +6.4999e-01  2.50e-01  1.23e-04  2.16e-02  1.77e-05  3.74e-04  4.93e-01  
 10  +3.8139e-01  +5.5617e-01  1.75e-01  8.29e-05  1.45e-02  1.26e-05  2.69e-04  3.72e-01  
 11  +3.5752e-01  +4.3592e-01  7.84e-02  3.57e-05  6.21e-03  5.70e-06  1.28e-04  6.05e-01  
 12  +3.5266e-01  +4.1322e-01  6.06e-02  2.71e-05  4.72e-03  4.64e-06  9.95e-05  3.19e-01  
 13  +3.4228e-01  +3.6542e-01  2.31e-02  1.01e-05  1.75e-03  1.93e-06  3.94e-05  7.24e-01  
 14  +3.3737e-01  +3.4416e-01  6.79e-03  2.91e-06  5.07e-04  5.98e-07  1.19e-05  8.12e-01  
 15  +3.3533e-01  +3.3573e-01  3.96e-04  1.68e-07  2.93e-05  3.48e-08  7.03e-07  9.50e-01  
 16  +3.3520e-01  +3.3521e-01  4.27e-06  1.81e-09  3.16e-07  3.75e-10  7.59e-09  9.89e-01  
 17  +3.3520e-01  +3.3520e-01  4.28e-08  1.82e-11  3.17e-09  3.76e-12  7.62e-11  9.90e-01  
 18  +3.3520e-01  +3.3520e-01  4.34e-10  1.85e-13  3.22e-11  3.83e-14  7.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 165.5787ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:03 PM: Optimal value: 3.352e-01
(CVXPY) Oct 06 04:27:03 PM: Compilation took 3.123e-02 seconds
(CVXPY) Oct 06 04:27:03 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 36, Objective: 0.3352
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:03 PM: Your problem has 2864 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:04 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2864
  constraints   = 5364
  nnz(P)        = 0
  nnz(A)        = 48021
  cones (total) = 1
    : Nonnegative = 1,  numel = 5364

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.62e+01  1.00e+00  1.00e+00   ------   
  1  +5.7241e-01  +5.4986e+02  5.49e+02  4.47e-01  5.52e+01  3.77e-03  5.85e-01  5.77e-01  
  2  +5.2524e-01  +5.9216e+01  5.87e+01  1.65e-01  2.58e+01  1.87e-02  2.75e-01  9.90e-01  
  3  +5.0818e-01  +1.2465e+01  1.20e+01  7.92e-02  1.34e+01  6.01e-05  1.74e-01  6.93e-01  
  4  +5.0020e-01  +1.8390e+00  1.34e+00  1.34e-02  2.26e+00  1.87e-05  1.30e-01  5.65e-01  
  5  +4.9896e-01  +1.3632e+00  8.64e-01  6.98e-03  1.22e+00  3.63e-05  2.90e-02  8.15e-01  
  6  +4.8339e-01  +1.2376e+00  7.54e-01  9.50e-04  1.72e-01  3.28e-04  2.45e-03  9.22e-01  
  7  +4.6677e-01  +1.1267e+00  6.60e-01  4.80e-04  8.66e-02  4.38e-04  1.24e-03  5.73e-01  
  8  +4.3627e-01  +8.7909e-01  4.43e-01  2.33e-04  4.16e-02  5.47e-05  6.35e-04  9.71e-01  
  9  +4.0139e-01  +6.6280e-01  2.61e-01  1.28e-04  2.25e-02  2.68e-05  3.85e-04  4.64e-01  
 10  +3.8182e-01  +5.6049e-01  1.79e-01  8.48e-05  1.48e-02  1.74e-05  2.74e-04  3.66e-01  
 11  +3.5790e-01  +4.3994e-01  8.20e-02  3.74e-05  6.51e-03  7.69e-06  1.33e-04  6.35e-01  
 12  +3.5203e-01  +4.1233e-01  6.03e-02  2.70e-05  4.70e-03  5.75e-06  9.92e-05  3.59e-01  
 13  +3.4148e-01  +3.6362e-01  2.21e-02  9.65e-06  1.68e-03  2.14e-06  3.78e-05  7.46e-01  
 14  +3.3657e-01  +3.4241e-01  5.84e-03  2.50e-06  4.36e-04  5.62e-07  1.03e-05  8.38e-01  
 15  +3.3479e-01  +3.3508e-01  2.85e-04  1.21e-07  2.11e-05  2.70e-08  5.08e-07  9.57e-01  
 16  +3.3470e-01  +3.3470e-01  2.97e-06  1.27e-09  2.21e-07  2.81e-10  5.31e-09  9.90e-01  
 17  +3.3470e-01  +3.3470e-01  2.99e-08  1.27e-11  2.21e-09  2.82e-12  5.33e-11  9.90e-01  
 18  +3.3470e-01  +3.3470e-01  3.03e-10  1.29e-13  2.25e-11  2.88e-14  5.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.9443ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:04 PM: Optimal value: 3.347e-01
(CVXPY) Oct 06 04:27:04 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:04 PM: Solver (including time spent in interface) took 1.725e-01 seconds
Iteration: 37, Objective: 0.3347
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:04 PM: Your problem has 2873 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:04 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2873
  constraints   = 5373
  nnz(P)        = 0
  nnz(A)        = 48172
  cones (total) = 1
    : Nonnegative = 1,  numel = 5373

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.61e+01  1.00e+00  1.00e+00   ------   
  1  +5.7226e-01  +5.4993e+02  5.49e+02  4.47e-01  5.52e+01  3.77e-03  5.85e-01  5.77e-01  
  2  +5.2520e-01  +5.9271e+01  5.87e+01  1.65e-01  2.57e+01  1.87e-02  2.74e-01  9.90e-01  
  3  +5.0820e-01  +1.2385e+01  1.19e+01  7.85e-02  1.32e+01  6.03e-05  1.72e-01  6.99e-01  
  4  +5.0016e-01  +1.8225e+00  1.32e+00  1.31e-02  2.22e+00  1.93e-05  1.30e-01  5.57e-01  
  5  +4.9884e-01  +1.3669e+00  8.68e-01  6.92e-03  1.21e+00  3.89e-05  2.85e-02  8.18e-01  
  6  +4.8451e-01  +1.2457e+00  7.61e-01  1.06e-03  1.92e-01  3.09e-04  2.76e-03  9.09e-01  
  7  +4.6918e-01  +1.1459e+00  6.77e-01  5.40e-04  9.73e-02  4.34e-04  1.40e-03  5.62e-01  
  8  +4.2801e-01  +8.2368e-01  3.96e-01  1.90e-04  3.39e-02  1.54e-04  5.18e-04  9.63e-01  
  9  +3.9876e-01  +6.5455e-01  2.56e-01  1.22e-04  2.15e-02  7.92e-05  3.66e-04  3.70e-01  
 10  +3.8042e-01  +5.5911e-01  1.79e-01  8.37e-05  1.46e-02  4.90e-05  2.70e-04  3.43e-01  
 11  +3.5589e-01  +4.3490e-01  7.90e-02  3.59e-05  6.24e-03  1.78e-05  1.29e-04  6.14e-01  
 12  +3.5069e-01  +4.1071e-01  6.00e-02  2.68e-05  4.66e-03  1.25e-05  9.92e-05  3.51e-01  
 13  +3.4060e-01  +3.6480e-01  2.42e-02  1.05e-05  1.83e-03  4.40e-06  4.18e-05  6.80e-01  
 14  +3.3456e-01  +3.3851e-01  3.94e-03  1.69e-06  2.93e-04  5.72e-07  7.07e-06  9.00e-01  
 15  +3.3333e-01  +3.3343e-01  9.68e-05  4.13e-08  7.19e-06  1.37e-08  1.75e-07  9.76e-01  
 16  +3.3330e-01  +3.3330e-01  9.69e-07  4.13e-10  7.19e-08  1.37e-10  1.76e-09  9.90e-01  
 17  +3.3330e-01  +3.3330e-01  9.69e-09  4.13e-12  7.19e-10  1.37e-12  1.76e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.0145ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:04 PM: Optimal value: 3.333e-01
(CVXPY) Oct 06 04:27:04 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:27:04 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 38, Objective: 0.3333
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:04 PM: Your problem has 2883 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:04 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2883
  constraints   = 5383
  nnz(P)        = 0
  nnz(A)        = 48355
  cones (total) = 1
    : Nonnegative = 1,  numel = 5383

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.60e+01  1.00e+00  1.00e+00   ------   
  1  +5.7217e-01  +5.4990e+02  5.49e+02  4.47e-01  5.51e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2513e-01  +5.9291e+01  5.88e+01  1.65e-01  2.56e+01  1.87e-02  2.74e-01  9.90e-01  
  3  +5.0822e-01  +1.2286e+01  1.18e+01  7.76e-02  1.31e+01  6.05e-05  1.70e-01  7.05e-01  
  4  +5.0013e-01  +1.8172e+00  1.32e+00  1.30e-02  2.20e+00  2.00e-05  1.31e-01  5.42e-01  
  5  +4.9876e-01  +1.3577e+00  8.59e-01  6.79e-03  1.18e+00  4.09e-05  2.80e-02  8.21e-01  
  6  +4.8710e-01  +1.2589e+00  7.72e-01  1.31e-03  2.37e-01  2.63e-04  3.46e-03  8.83e-01  
  7  +4.7631e-01  +1.1901e+00  7.14e-01  7.31e-04  1.32e-01  3.76e-04  1.90e-03  4.99e-01  
  8  +4.6311e-01  +1.0916e+00  6.28e-01  4.79e-04  8.59e-02  3.94e-04  1.26e-03  3.92e-01  
  9  +4.2066e-01  +7.7852e-01  3.58e-01  1.74e-04  3.09e-02  8.22e-05  4.87e-04  9.90e-01  
 10  +3.9622e-01  +6.4185e-01  2.46e-01  1.17e-04  2.06e-02  4.85e-05  3.56e-04  3.33e-01  
 11  +3.7691e-01  +5.4352e-01  1.67e-01  7.80e-05  1.36e-02  2.81e-05  2.55e-04  4.48e-01  
 12  +3.5360e-01  +4.2588e-01  7.23e-02  3.27e-05  5.68e-03  1.09e-05  1.19e-04  5.92e-01  
 13  +3.4996e-01  +4.0875e-01  5.88e-02  2.62e-05  4.54e-03  8.31e-06  9.69e-05  3.78e-01  
 14  +3.3910e-01  +3.5965e-01  2.06e-02  8.92e-06  1.55e-03  2.69e-06  3.55e-05  7.13e-01  
 15  +3.3519e-01  +3.4261e-01  7.43e-03  3.18e-06  5.54e-04  8.80e-07  1.31e-05  7.66e-01  
 16  +3.3297e-01  +3.3347e-01  4.96e-04  2.11e-07  3.68e-05  5.05e-08  8.92e-07  9.74e-01  
 17  +3.3280e-01  +3.3281e-01  5.07e-06  2.16e-09  3.76e-07  5.15e-10  9.13e-09  9.90e-01  
 18  +3.3280e-01  +3.3280e-01  5.08e-08  2.16e-11  3.77e-09  5.17e-12  9.15e-11  9.90e-01  
 19  +3.3280e-01  +3.3280e-01  5.08e-10  2.16e-13  3.77e-11  5.18e-14  9.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 174.8012ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:05 PM: Optimal value: 3.328e-01
(CVXPY) Oct 06 04:27:05 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:27:05 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 39, Objective: 0.3328
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:05 PM: Your problem has 2893 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:05 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2893
  constraints   = 5393
  nnz(P)        = 0
  nnz(A)        = 48460
  cones (total) = 1
    : Nonnegative = 1,  numel = 5393

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.60e+01  1.00e+00  1.00e+00   ------   
  1  +5.7209e-01  +5.4990e+02  5.49e+02  4.48e-01  5.50e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2508e-01  +5.9320e+01  5.88e+01  1.65e-01  2.56e+01  1.87e-02  2.74e-01  9.90e-01  
  3  +5.0824e-01  +1.2214e+01  1.17e+01  7.69e-02  1.30e+01  6.08e-05  1.68e-01  7.09e-01  
  4  +5.0011e-01  +1.8128e+00  1.31e+00  1.30e-02  2.19e+00  2.07e-05  1.32e-01  5.31e-01  
  5  +4.9867e-01  +1.3590e+00  8.60e-01  6.73e-03  1.17e+00  4.33e-05  2.77e-02  8.25e-01  
  6  +4.8700e-01  +1.2582e+00  7.71e-01  1.34e-03  2.40e-01  2.68e-04  3.53e-03  8.80e-01  
  7  +4.7671e-01  +1.1948e+00  7.18e-01  7.60e-04  1.37e-01  3.81e-04  1.98e-03  4.87e-01  
  8  +4.6305e-01  +1.0940e+00  6.31e-01  4.84e-04  8.68e-02  4.06e-04  1.28e-03  4.15e-01  
  9  +4.1683e-01  +7.5435e-01  3.38e-01  1.63e-04  2.88e-02  1.61e-04  4.57e-04  8.84e-01  
 10  +3.9913e-01  +6.6087e-01  2.62e-01  1.25e-04  2.19e-02  1.07e-04  3.73e-04  2.80e-01  
 11  +3.8035e-01  +5.6494e-01  1.85e-01  8.66e-05  1.51e-02  5.93e-05  2.78e-04  4.26e-01  
 12  +3.5343e-01  +4.2695e-01  7.35e-02  3.33e-05  5.78e-03  1.90e-05  1.21e-04  6.34e-01  
 13  +3.4847e-01  +4.0373e-01  5.53e-02  2.46e-05  4.27e-03  1.24e-05  9.19e-05  4.24e-01  
 14  +3.3819e-01  +3.5719e-01  1.90e-02  8.28e-06  1.44e-03  3.78e-06  3.32e-05  7.06e-01  
 15  +3.3472e-01  +3.4201e-01  7.29e-03  3.14e-06  5.46e-04  1.22e-06  1.30e-05  7.27e-01  
 16  +3.3257e-01  +3.3305e-01  4.85e-04  2.07e-07  3.61e-05  6.15e-08  8.80e-07  9.68e-01  
 17  +3.3240e-01  +3.3241e-01  4.93e-06  2.11e-09  3.67e-07  6.24e-10  8.96e-09  9.90e-01  
 18  +3.3240e-01  +3.3240e-01  4.94e-08  2.11e-11  3.68e-09  6.26e-12  8.98e-11  9.90e-01  
 19  +3.3240e-01  +3.3240e-01  4.94e-10  2.11e-13  3.68e-11  6.27e-14  9.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 178.3627ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:05 PM: Optimal value: 3.324e-01
(CVXPY) Oct 06 04:27:05 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:05 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 40, Objective: 0.3324
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:05 PM: Your problem has 2898 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:05 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2898
  constraints   = 5398
  nnz(P)        = 0
  nnz(A)        = 48567
  cones (total) = 1
    : Nonnegative = 1,  numel = 5398

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.7195e-01  +5.4989e+02  5.49e+02  4.48e-01  5.50e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2503e-01  +5.9372e+01  5.88e+01  1.65e-01  2.55e+01  1.87e-02  2.74e-01  9.90e-01  
  3  +5.0826e-01  +1.2113e+01  1.16e+01  7.60e-02  1.28e+01  6.10e-05  1.66e-01  7.15e-01  
  4  +5.0008e-01  +1.8170e+00  1.32e+00  1.29e-02  2.18e+00  2.19e-05  1.33e-01  5.11e-01  
  5  +4.9862e-01  +1.3708e+00  8.72e-01  6.80e-03  1.18e+00  4.59e-05  2.83e-02  8.18e-01  
  6  +4.8612e-01  +1.2679e+00  7.82e-01  1.31e-03  2.36e-01  2.95e-04  3.47e-03  8.88e-01  
  7  +4.7558e-01  +1.2064e+00  7.31e-01  7.45e-04  1.34e-01  4.10e-04  1.94e-03  5.15e-01  
  8  +4.6103e-01  +1.0934e+00  6.32e-01  4.68e-04  8.38e-02  4.11e-04  1.24e-03  4.49e-01  
  9  +4.1048e-01  +7.1655e-01  3.06e-01  1.44e-04  2.54e-02  1.14e-04  4.09e-04  9.32e-01  
 10  +3.9497e-01  +6.3856e-01  2.44e-01  1.14e-04  2.00e-02  8.20e-05  3.42e-04  2.41e-01  
 11  +3.7481e-01  +5.3810e-01  1.63e-01  7.57e-05  1.32e-02  4.52e-05  2.47e-04  4.35e-01  
 12  +3.5722e-01  +4.4943e-01  9.22e-02  4.20e-05  7.29e-03  2.34e-05  1.49e-04  4.51e-01  
 13  +3.4547e-01  +3.9271e-01  4.72e-02  2.10e-05  3.64e-03  1.02e-05  7.97e-05  6.17e-01  
 14  +3.3849e-01  +3.6003e-01  2.15e-02  9.43e-06  1.63e-03  3.58e-06  3.77e-05  7.46e-01  
 15  +3.3347e-01  +3.3839e-01  4.92e-03  2.13e-06  3.70e-04  7.33e-07  8.91e-06  8.19e-01  
 16  +3.3205e-01  +3.3245e-01  4.09e-04  1.76e-07  3.06e-05  3.98e-08  7.49e-07  9.90e-01  
 17  +3.3190e-01  +3.3191e-01  4.18e-06  1.80e-09  3.13e-07  4.07e-10  7.67e-09  9.90e-01  
 18  +3.3190e-01  +3.3190e-01  4.19e-08  1.80e-11  3.13e-09  4.08e-12  7.69e-11  9.90e-01  
 19  +3.3190e-01  +3.3190e-01  4.19e-10  1.80e-13  3.13e-11  4.09e-14  7.70e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 175.2784ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:06 PM: Optimal value: 3.319e-01
(CVXPY) Oct 06 04:27:06 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:06 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 41, Objective: 0.3319
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:06 PM: Your problem has 2908 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:06 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2908
  constraints   = 5408
  nnz(P)        = 0
  nnz(A)        = 48692
  cones (total) = 1
    : Nonnegative = 1,  numel = 5408

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.58e+01  1.00e+00  1.00e+00   ------   
  1  +5.7170e-01  +5.4997e+02  5.49e+02  4.48e-01  5.49e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2496e-01  +5.9479e+01  5.90e+01  1.65e-01  2.55e+01  1.88e-02  2.74e-01  9.90e-01  
  3  +5.0830e-01  +1.1998e+01  1.15e+01  7.48e-02  1.26e+01  6.15e-05  1.63e-01  7.22e-01  
  4  +5.0004e-01  +1.8095e+00  1.31e+00  1.27e-02  2.15e+00  2.37e-05  1.34e-01  4.87e-01  
  5  +4.9851e-01  +1.3870e+00  8.88e-01  6.86e-03  1.19e+00  5.08e-05  2.88e-02  8.17e-01  
  6  +4.8348e-01  +1.2751e+00  7.92e-01  1.17e-03  2.10e-01  3.65e-04  3.09e-03  9.12e-01  
  7  +4.7495e-01  +1.2293e+00  7.54e-01  7.28e-04  1.31e-01  4.32e-04  1.88e-03  5.52e-01  
  8  +4.5827e-01  +1.0791e+00  6.21e-01  4.08e-04  7.31e-02  2.60e-04  1.07e-03  7.84e-01  
  9  +4.1615e-01  +7.7157e-01  3.55e-01  1.78e-04  3.14e-02  8.41e-05  5.07e-04  7.66e-01  
 10  +3.9668e-01  +6.6165e-01  2.65e-01  1.29e-04  2.27e-02  5.56e-05  3.93e-04  2.95e-01  
 11  +3.7681e-01  +5.5800e-01  1.81e-01  8.59e-05  1.50e-02  3.13e-05  2.82e-04  4.75e-01  
 12  +3.5552e-01  +4.4775e-01  9.22e-02  4.25e-05  7.36e-03  1.44e-05  1.53e-04  5.07e-01  
 13  +3.4543e-01  +3.9860e-01  5.32e-02  2.38e-05  4.12e-03  7.55e-06  9.06e-05  5.81e-01  
 14  +3.3600e-01  +3.5475e-01  1.88e-02  8.23e-06  1.42e-03  2.36e-06  3.35e-05  7.67e-01  
 15  +3.3244e-01  +3.3923e-01  6.79e-03  2.95e-06  5.10e-04  7.95e-07  1.24e-05  7.31e-01  
 16  +3.3046e-01  +3.3092e-01  4.63e-04  2.00e-07  3.46e-05  4.72e-08  8.58e-07  9.67e-01  
 17  +3.3030e-01  +3.3031e-01  4.74e-06  2.04e-09  3.54e-07  4.83e-10  8.80e-09  9.90e-01  
 18  +3.3030e-01  +3.3030e-01  4.75e-08  2.05e-11  3.55e-09  4.84e-12  8.82e-11  9.90e-01  
 19  +3.3030e-01  +3.3030e-01  4.75e-10  2.05e-13  3.55e-11  4.85e-14  8.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 179.105ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:06 PM: Optimal value: 3.303e-01
(CVXPY) Oct 06 04:27:06 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:06 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 42, Objective: 0.3303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:06 PM: Your problem has 2918 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:06 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2918
  constraints   = 5418
  nnz(P)        = 0
  nnz(A)        = 48842
  cones (total) = 1
    : Nonnegative = 1,  numel = 5418

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.58e+01  1.00e+00  1.00e+00   ------   
  1  +5.7161e-01  +5.5000e+02  5.49e+02  4.48e-01  5.48e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2493e-01  +5.9521e+01  5.90e+01  1.65e-01  2.54e+01  1.88e-02  2.74e-01  9.90e-01  
  3  +5.0831e-01  +1.1943e+01  1.14e+01  7.43e-02  1.25e+01  6.17e-05  1.62e-01  7.25e-01  
  4  +5.0001e-01  +1.8024e+00  1.30e+00  1.26e-02  2.13e+00  2.47e-05  1.34e-01  4.78e-01  
  5  +4.9841e-01  +1.3815e+00  8.83e-01  6.72e-03  1.17e+00  5.46e-05  2.79e-02  8.25e-01  
  6  +4.8653e-01  +1.3025e+00  8.16e-01  1.48e-03  2.65e-01  3.10e-04  3.95e-03  8.83e-01  
  7  +4.8104e-01  +1.2809e+00  8.00e-01  9.49e-04  1.70e-01  3.49e-04  2.46e-03  6.06e-01  
  8  +4.6944e-01  +1.1776e+00  7.08e-01  5.06e-04  9.09e-02  1.88e-04  1.29e-03  9.90e-01  
  9  +4.3106e-01  +8.7108e-01  4.40e-01  2.21e-04  3.92e-02  1.10e-04  6.01e-04  7.02e-01  
 10  +3.9284e-01  +6.3456e-01  2.42e-01  1.17e-04  2.05e-02  4.32e-05  3.60e-04  4.81e-01  
 11  +3.7660e-01  +5.5404e-01  1.77e-01  8.42e-05  1.46e-02  2.83e-05  2.76e-04  3.81e-01  
 12  +3.5465e-01  +4.4315e-01  8.85e-02  4.08e-05  7.06e-03  1.28e-05  1.47e-04  5.17e-01  
 13  +3.4603e-01  +4.0214e-01  5.61e-02  2.53e-05  4.37e-03  7.61e-06  9.56e-05  5.10e-01  
 14  +3.3536e-01  +3.5311e-01  1.78e-02  7.82e-06  1.35e-03  2.19e-06  3.19e-05  7.60e-01  
 15  +3.3150e-01  +3.3618e-01  4.68e-03  2.04e-06  3.52e-04  5.15e-07  8.64e-06  8.42e-01  
 16  +3.3015e-01  +3.3057e-01  4.18e-04  1.81e-07  3.13e-05  3.79e-08  7.81e-07  9.90e-01  
 17  +3.3000e-01  +3.3001e-01  4.49e-06  1.94e-09  3.37e-07  4.07e-10  8.41e-09  9.89e-01  
 18  +3.3000e-01  +3.3000e-01  4.52e-08  1.96e-11  3.39e-09  4.10e-12  8.46e-11  9.90e-01  
 19  +3.3000e-01  +3.3000e-01  4.52e-10  1.96e-13  3.39e-11  4.11e-14  8.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 183.9844ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:06 PM: Optimal value: 3.300e-01
(CVXPY) Oct 06 04:27:06 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:06 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 43, Objective: 0.3300
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:07 PM: Your problem has 2928 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:07 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2928
  constraints   = 5428
  nnz(P)        = 0
  nnz(A)        = 49259
  cones (total) = 1
    : Nonnegative = 1,  numel = 5428

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +5.7162e-01  +5.4994e+02  5.49e+02  4.48e-01  5.47e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2492e-01  +5.9507e+01  5.90e+01  1.65e-01  2.54e+01  1.88e-02  2.74e-01  9.90e-01  
  3  +5.0830e-01  +1.1923e+01  1.14e+01  7.41e-02  1.25e+01  6.17e-05  1.61e-01  7.26e-01  
  4  +5.0003e-01  +1.8250e+00  1.32e+00  1.28e-02  2.16e+00  2.50e-05  1.34e-01  4.69e-01  
  5  +4.9848e-01  +1.3876e+00  8.89e-01  6.81e-03  1.18e+00  5.35e-05  2.84e-02  8.22e-01  
  6  +4.8367e-01  +1.2864e+00  8.03e-01  1.20e-03  2.15e-01  3.75e-04  3.17e-03  9.11e-01  
  7  +4.7920e-01  +1.2640e+00  7.85e-01  8.44e-04  1.52e-01  3.78e-04  2.18e-03  5.50e-01  
  8  +4.7042e-01  +1.1802e+00  7.10e-01  5.19e-04  9.32e-02  1.34e-04  1.33e-03  9.90e-01  
  9  +4.5971e-01  +1.0793e+00  6.20e-01  4.15e-04  7.40e-02  7.56e-05  1.10e-03  5.62e-01  
 10  +4.2699e-01  +8.3962e-01  4.13e-01  2.20e-04  3.88e-02  5.05e-05  6.18e-04  5.21e-01  
 11  +3.9528e-01  +6.4895e-01  2.54e-01  1.26e-04  2.20e-02  2.66e-05  3.88e-04  4.33e-01  
 12  +3.7616e-01  +5.5158e-01  1.75e-01  8.42e-05  1.46e-02  1.75e-05  2.78e-04  4.34e-01  
 13  +3.5439e-01  +4.4147e-01  8.71e-02  4.04e-05  6.98e-03  8.13e-06  1.46e-04  5.23e-01  
 14  +3.4583e-01  +4.0095e-01  5.51e-02  2.49e-05  4.30e-03  5.27e-06  9.45e-05  5.13e-01  
 15  +3.3550e-01  +3.5362e-01  1.81e-02  7.99e-06  1.38e-03  1.71e-06  3.26e-05  7.53e-01  
 16  +3.3163e-01  +3.3670e-01  5.07e-03  2.21e-06  3.82e-04  4.72e-07  9.37e-06  8.37e-01  
 17  +3.3018e-01  +3.3069e-01  5.14e-04  2.23e-07  3.85e-05  4.59e-08  9.61e-07  9.73e-01  
 18  +3.3000e-01  +3.3001e-01  5.61e-06  2.43e-09  4.21e-07  5.01e-10  1.05e-08  9.89e-01  
 19  +3.3000e-01  +3.3000e-01  5.64e-08  2.44e-11  4.23e-09  5.04e-12  1.06e-10  9.90e-01  
 20  +3.3000e-01  +3.3000e-01  5.64e-10  2.44e-13  4.23e-11  5.06e-14  1.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 187.8576ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:07 PM: Optimal value: 3.300e-01
(CVXPY) Oct 06 04:27:07 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:27:07 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 44, Objective: 0.3300
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:07 PM: Your problem has 2936 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:07 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:07 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2936
  constraints   = 5436
  nnz(P)        = 0
  nnz(A)        = 49834
  cones (total) = 1
    : Nonnegative = 1,  numel = 5436

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +5.7161e-01  +5.4991e+02  5.49e+02  4.48e-01  5.47e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2491e-01  +5.9501e+01  5.90e+01  1.65e-01  2.53e+01  1.88e-02  2.74e-01  9.90e-01  
  3  +5.0830e-01  +1.1912e+01  1.14e+01  7.40e-02  1.25e+01  6.17e-05  1.61e-01  7.27e-01  
  4  +5.0006e-01  +1.8709e+00  1.37e+00  1.33e-02  2.24e+00  2.53e-05  1.35e-01  4.54e-01  
  5  +4.9858e-01  +1.3908e+00  8.92e-01  6.88e-03  1.19e+00  5.16e-05  2.88e-02  8.21e-01  
  6  +4.8403e-01  +1.2835e+00  7.99e-01  1.19e-03  2.13e-01  3.72e-04  3.12e-03  9.09e-01  
  7  +4.7835e-01  +1.2561e+00  7.78e-01  8.07e-04  1.45e-01  3.98e-04  2.08e-03  5.39e-01  
  8  +4.6581e-01  +1.1497e+00  6.84e-01  4.55e-04  8.17e-02  1.64e-04  1.17e-03  9.90e-01  
  9  +4.2548e-01  +8.3590e-01  4.10e-01  2.04e-04  3.61e-02  7.74e-05  5.64e-04  7.16e-01  
 10  +3.9182e-01  +6.3394e-01  2.42e-01  1.17e-04  2.05e-02  3.57e-05  3.61e-04  4.48e-01  
 11  +3.7510e-01  +5.4990e-01  1.75e-01  8.27e-05  1.44e-02  2.33e-05  2.72e-04  4.39e-01  
 12  +3.5402e-01  +4.4162e-01  8.76e-02  4.04e-05  6.99e-03  1.08e-05  1.46e-04  5.11e-01  
 13  +3.4454e-01  +3.9567e-01  5.11e-02  2.30e-05  3.98e-03  6.06e-06  8.76e-05  5.57e-01  
 14  +3.3539e-01  +3.5288e-01  1.75e-02  7.71e-06  1.33e-03  1.88e-06  3.14e-05  8.38e-01  
 15  +3.3195e-01  +3.3808e-01  6.13e-03  2.68e-06  4.63e-04  6.35e-07  1.13e-05  7.33e-01  
 16  +3.3033e-01  +3.3132e-01  9.91e-04  4.30e-07  7.45e-05  9.86e-08  1.85e-06  8.76e-01  
 17  +3.3000e-01  +3.3002e-01  1.43e-05  6.20e-09  1.07e-06  1.36e-09  2.68e-08  9.90e-01  
 18  +3.3000e-01  +3.3000e-01  1.43e-07  6.21e-11  1.08e-08  1.37e-11  2.69e-10  9.90e-01  
 19  +3.3000e-01  +3.3000e-01  1.43e-09  6.21e-13  1.08e-10  1.37e-13  2.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 184.7523ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:07 PM: Optimal value: 3.300e-01
(CVXPY) Oct 06 04:27:07 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:07 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 45, Objective: 0.3300
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:08 PM: Your problem has 2940 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:08 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2940
  constraints   = 5440
  nnz(P)        = 0
  nnz(A)        = 49911
  cones (total) = 1
    : Nonnegative = 1,  numel = 5440

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +5.7160e-01  +5.4990e+02  5.49e+02  4.48e-01  5.47e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2491e-01  +5.9500e+01  5.90e+01  1.65e-01  2.53e+01  1.88e-02  2.74e-01  9.90e-01  
  3  +5.0830e-01  +1.1906e+01  1.14e+01  7.40e-02  1.24e+01  6.17e-05  1.61e-01  7.27e-01  
  4  +5.0009e-01  +1.9037e+00  1.40e+00  1.36e-02  2.29e+00  2.55e-05  1.36e-01  4.44e-01  
  5  +4.9868e-01  +1.3918e+00  8.93e-01  6.97e-03  1.21e+00  4.97e-05  2.95e-02  8.15e-01  
  6  +4.8442e-01  +1.2870e+00  8.03e-01  1.19e-03  2.14e-01  3.66e-04  3.13e-03  9.10e-01  
  7  +4.7755e-01  +1.2551e+00  7.78e-01  7.75e-04  1.39e-01  4.18e-04  1.99e-03  5.47e-01  
  8  +4.6706e-01  +1.1559e+00  6.89e-01  4.91e-04  8.82e-02  2.14e-04  1.26e-03  8.23e-01  
  9  +4.3876e-01  +9.3678e-01  4.98e-01  2.73e-04  4.85e-02  1.37e-04  7.39e-04  5.80e-01  
 10  +3.9228e-01  +6.2584e-01  2.34e-01  1.14e-04  1.98e-02  4.41e-05  3.49e-04  5.83e-01  
 11  +3.7831e-01  +5.6029e-01  1.82e-01  8.67e-05  1.51e-02  3.08e-05  2.81e-04  3.42e-01  
 12  +3.5581e-01  +4.4867e-01  9.29e-02  4.29e-05  7.42e-03  1.40e-05  1.54e-04  5.32e-01  
 13  +3.4630e-01  +4.0353e-01  5.72e-02  2.58e-05  4.46e-03  7.84e-06  9.72e-05  5.76e-01  
 14  +3.3616e-01  +3.5703e-01  2.09e-02  9.22e-06  1.59e-03  2.55e-06  3.73e-05  7.58e-01  
 15  +3.3098e-01  +3.3461e-01  3.63e-03  1.58e-06  2.73e-04  3.85e-07  6.76e-06  9.10e-01  
 16  +3.2982e-01  +3.2990e-01  7.51e-05  3.26e-08  5.64e-06  7.54e-09  1.41e-07  9.84e-01  
 17  +3.2980e-01  +3.2980e-01  7.52e-07  3.26e-10  5.64e-08  7.55e-11  1.42e-09  9.90e-01  
 18  +3.2980e-01  +3.2980e-01  7.52e-09  3.26e-12  5.64e-10  7.57e-13  1.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 186.9378ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:08 PM: Optimal value: 3.298e-01
(CVXPY) Oct 06 04:27:08 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:27:08 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 46, Objective: 0.3298
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:08 PM: Your problem has 2950 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:08 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2950
  constraints   = 5450
  nnz(P)        = 0
  nnz(A)        = 50167
  cones (total) = 1
    : Nonnegative = 1,  numel = 5450

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +5.7131e-01  +5.4972e+02  5.49e+02  4.48e-01  5.46e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2478e-01  +5.9567e+01  5.90e+01  1.64e-01  2.52e+01  1.88e-02  2.73e-01  9.90e-01  
  3  +5.0833e-01  +1.1690e+01  1.12e+01  7.19e-02  1.21e+01  6.22e-05  1.56e-01  7.38e-01  
  4  +5.0038e-01  +2.3092e+00  1.81e+00  1.73e-02  2.89e+00  3.29e-05  1.41e-01  3.11e-01  
  5  +4.9932e-01  +1.3965e+00  8.97e-01  7.41e-03  1.28e+00  4.27e-05  3.38e-02  7.90e-01  
  6  +4.8572e-01  +1.3314e+00  8.46e-01  1.09e-03  1.97e-01  4.26e-04  2.77e-03  9.30e-01  
  7  +4.8246e-01  +1.3269e+00  8.44e-01  8.63e-04  1.56e-01  4.77e-04  2.17e-03  3.16e-01  
  8  +4.7759e-01  +1.2836e+00  8.06e-01  6.79e-04  1.23e-01  4.31e-04  1.71e-03  3.90e-01  
  9  +4.5686e-01  +1.0839e+00  6.27e-01  3.61e-04  6.47e-02  1.18e-04  9.31e-04  9.90e-01  
 10  +4.0073e-01  +6.6645e-01  2.66e-01  1.25e-04  2.20e-02  3.24e-05  3.67e-04  7.02e-01  
 11  +3.8352e-01  +5.8925e-01  2.06e-01  9.60e-05  1.67e-02  2.44e-05  3.00e-04  3.25e-01  
 12  +3.5705e-01  +4.5893e-01  1.02e-01  4.68e-05  8.09e-03  1.13e-05  1.64e-04  5.42e-01  
 13  +3.4618e-01  +4.0735e-01  6.12e-02  2.74e-05  4.74e-03  6.83e-06  1.02e-04  7.59e-01  
 14  +3.3770e-01  +3.6775e-01  3.01e-02  1.34e-05  2.31e-03  3.28e-06  5.26e-05  6.19e-01  
 15  +3.3406e-01  +3.5037e-01  1.63e-02  7.18e-06  1.24e-03  1.65e-06  2.92e-05  8.68e-01  
 16  +3.2996e-01  +3.3345e-01  3.48e-03  1.52e-06  2.62e-04  3.44e-07  6.45e-06  8.25e-01  
 17  +3.2884e-01  +3.2896e-01  1.23e-04  5.30e-08  9.16e-06  1.17e-08  2.29e-07  9.70e-01  
 18  +3.2880e-01  +3.2880e-01  1.23e-06  5.31e-10  9.18e-08  1.18e-10  2.30e-09  9.90e-01  
 19  +3.2880e-01  +3.2880e-01  1.23e-08  5.31e-12  9.19e-10  1.18e-12  2.30e-11  9.90e-01  
 20  +3.2880e-01  +3.2880e-01  1.23e-10  5.30e-14  9.19e-12  1.18e-14  2.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.5879ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:08 PM: Optimal value: 3.288e-01
(CVXPY) Oct 06 04:27:08 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:08 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 47, Objective: 0.3288
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:09 PM: Your problem has 2952 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:09 PM: Finished problem compilation (took 5.641e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2952
  constraints   = 5452
  nnz(P)        = 0
  nnz(A)        = 50368
  cones (total) = 1
    : Nonnegative = 1,  numel = 5452

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.57e+01  1.00e+00  1.00e+00   ------   
  1  +5.7129e-01  +5.4972e+02  5.49e+02  4.48e-01  5.46e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2478e-01  +5.9579e+01  5.91e+01  1.64e-01  2.52e+01  1.88e-02  2.73e-01  9.90e-01  
  3  +5.0834e-01  +1.1679e+01  1.12e+01  7.18e-02  1.21e+01  6.22e-05  1.56e-01  7.39e-01  
  4  +5.0039e-01  +2.3302e+00  1.83e+00  1.75e-02  2.92e+00  3.34e-05  1.41e-01  3.06e-01  
  5  +4.9934e-01  +1.3941e+00  8.95e-01  7.40e-03  1.28e+00  4.27e-05  3.37e-02  7.91e-01  
  6  +4.8526e-01  +1.3309e+00  8.46e-01  1.05e-03  1.89e-01  4.45e-04  2.65e-03  9.34e-01  
  7  +4.8194e-01  +1.3272e+00  8.45e-01  8.28e-04  1.50e-01  4.97e-04  2.07e-03  3.20e-01  
  8  +4.7694e-01  +1.2818e+00  8.05e-01  6.59e-04  1.19e-01  4.49e-04  1.65e-03  3.67e-01  
  9  +4.5449e-01  +1.0643e+00  6.10e-01  3.44e-04  6.16e-02  1.11e-04  8.90e-04  9.90e-01  
 10  +3.9880e-01  +6.5617e-01  2.57e-01  1.22e-04  2.14e-02  2.82e-05  3.62e-04  6.92e-01  
 11  +3.7993e-01  +5.7127e-01  1.91e-01  8.96e-05  1.56e-02  2.06e-05  2.84e-04  3.69e-01  
 12  +3.6050e-01  +4.7596e-01  1.15e-01  5.32e-05  9.22e-03  1.21e-05  1.84e-04  4.23e-01  
 13  +3.4663e-01  +4.0991e-01  6.33e-02  2.85e-05  4.92e-03  6.86e-06  1.06e-04  7.78e-01  
 14  +3.3721e-01  +3.6586e-01  2.86e-02  1.27e-05  2.20e-03  3.04e-06  5.03e-05  6.25e-01  
 15  +3.3423e-01  +3.5118e-01  1.69e-02  7.46e-06  1.29e-03  1.70e-06  3.03e-05  8.28e-01  
 16  +3.3019e-01  +3.3438e-01  4.19e-03  1.83e-06  3.15e-04  4.12e-07  7.73e-06  7.89e-01  
 17  +3.2890e-01  +3.2921e-01  3.04e-04  1.31e-07  2.27e-05  2.90e-08  5.68e-07  9.38e-01  
 18  +3.2880e-01  +3.2880e-01  3.09e-06  1.34e-09  2.31e-07  2.95e-10  5.78e-09  9.90e-01  
 19  +3.2880e-01  +3.2880e-01  3.09e-08  1.34e-11  2.31e-09  2.95e-12  5.78e-11  9.90e-01  
 20  +3.2880e-01  +3.2880e-01  3.09e-10  1.34e-13  2.31e-11  2.97e-14  5.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 197.4388ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:09 PM: Optimal value: 3.288e-01
(CVXPY) Oct 06 04:27:09 PM: Compilation took 5.641e-02 seconds
(CVXPY) Oct 06 04:27:09 PM: Solver (including time spent in interface) took 2.098e-01 seconds
Iteration: 48, Objective: 0.3288
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:09 PM: Your problem has 2962 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:09 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2962
  constraints   = 5462
  nnz(P)        = 0
  nnz(A)        = 50530
  cones (total) = 1
    : Nonnegative = 1,  numel = 5462

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.56e+01  1.00e+00  1.00e+00   ------   
  1  +5.7123e-01  +5.4975e+02  5.49e+02  4.48e-01  5.45e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2474e-01  +5.9600e+01  5.91e+01  1.64e-01  2.51e+01  1.88e-02  2.73e-01  9.90e-01  
  3  +5.0835e-01  +1.1625e+01  1.11e+01  7.13e-02  1.20e+01  6.24e-05  1.55e-01  7.42e-01  
  4  +5.0050e-01  +2.4725e+00  1.97e+00  1.88e-02  3.13e+00  3.66e-05  1.42e-01  2.74e-01  
  5  +4.9948e-01  +1.4213e+00  9.22e-01  7.71e-03  1.33e+00  4.25e-05  3.56e-02  7.82e-01  
  6  +4.8548e-01  +1.3775e+00  8.92e-01  1.04e-03  1.89e-01  4.81e-04  2.62e-03  9.41e-01  
  7  +4.8184e-01  +1.3683e+00  8.87e-01  8.20e-04  1.48e-01  5.41e-04  2.04e-03  3.07e-01  
  8  +4.7671e-01  +1.3145e+00  8.38e-01  6.49e-04  1.17e-01  4.74e-04  1.62e-03  3.83e-01  
  9  +4.5069e-01  +1.0355e+00  5.85e-01  3.17e-04  5.67e-02  9.63e-05  8.25e-04  9.90e-01  
 10  +3.9620e-01  +6.4713e-01  2.51e-01  1.21e-04  2.12e-02  2.28e-05  3.63e-04  6.70e-01  
 11  +3.7869e-01  +5.6690e-01  1.88e-01  8.91e-05  1.55e-02  1.74e-05  2.85e-04  3.64e-01  
 12  +3.5964e-01  +4.7300e-01  1.13e-01  5.26e-05  9.10e-03  1.03e-05  1.83e-04  4.25e-01  
 13  +3.4884e-01  +4.2156e-01  7.27e-02  3.30e-05  5.70e-03  7.08e-06  1.21e-04  5.98e-01  
 14  +3.3833e-01  +3.7246e-01  3.41e-02  1.52e-05  2.63e-03  3.33e-06  5.95e-05  6.12e-01  
 15  +3.3427e-01  +3.5374e-01  1.95e-02  8.62e-06  1.49e-03  1.89e-06  3.48e-05  5.42e-01  
 16  +3.3170e-01  +3.4185e-01  1.01e-02  4.46e-06  7.70e-04  9.71e-07  1.84e-05  7.32e-01  
 17  +3.2981e-01  +3.3399e-01  4.18e-03  1.83e-06  3.16e-04  3.96e-07  7.72e-06  6.44e-01  
 18  +3.2852e-01  +3.2873e-01  2.09e-04  9.12e-08  1.58e-05  1.93e-08  3.92e-07  9.57e-01  
 19  +3.2845e-01  +3.2845e-01  2.14e-06  9.31e-10  1.61e-07  1.97e-10  4.00e-09  9.90e-01  
 20  +3.2845e-01  +3.2845e-01  2.14e-08  9.31e-12  1.61e-09  1.97e-12  4.00e-11  9.90e-01  
 21  +3.2845e-01  +3.2845e-01  2.16e-10  9.40e-14  1.62e-11  2.00e-14  4.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 216.4807ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:09 PM: Optimal value: 3.285e-01
(CVXPY) Oct 06 04:27:09 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:09 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 49, Objective: 0.3285
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:10 PM: Your problem has 2972 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:10 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2972
  constraints   = 5472
  nnz(P)        = 0
  nnz(A)        = 50625
  cones (total) = 1
    : Nonnegative = 1,  numel = 5472

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.55e+01  1.00e+00  1.00e+00   ------   
  1  +5.7107e-01  +5.4979e+02  5.49e+02  4.49e-01  5.44e+01  3.77e-03  5.84e-01  5.77e-01  
  2  +5.2465e-01  +5.9667e+01  5.91e+01  1.64e-01  2.51e+01  1.88e-02  2.73e-01  9.90e-01  
  3  +5.0839e-01  +1.1522e+01  1.10e+01  7.02e-02  1.18e+01  6.29e-05  1.52e-01  7.47e-01  
  4  +5.0070e-01  +2.7301e+00  2.23e+00  2.11e-02  3.50e+00  4.58e-05  1.43e-01  2.26e-01  
  5  +4.9970e-01  +1.4689e+00  9.69e-01  8.27e-03  1.42e+00  4.54e-05  3.93e-02  7.56e-01  
  6  +4.8244e-01  +1.4662e+00  9.84e-01  8.54e-04  1.55e-01  7.27e-04  2.10e-03  9.62e-01  
  7  +4.7787e-01  +1.4502e+00  9.72e-01  6.60e-04  1.20e-01  7.93e-04  1.62e-03  3.39e-01  
  8  +4.7026e-01  +1.3460e+00  8.76e-01  5.38e-04  9.72e-02  6.45e-04  1.34e-03  2.88e-01  
  9  +4.3197e-01  +8.9532e-01  4.63e-01  2.36e-04  4.19e-02  7.15e-06  6.39e-04  9.17e-01  
 10  +3.9280e-01  +6.4760e-01  2.55e-01  1.25e-04  2.18e-02  6.50e-06  3.81e-04  4.82e-01  
 11  +3.7056e-01  +5.3609e-01  1.66e-01  7.88e-05  1.37e-02  8.32e-06  2.62e-04  5.31e-01  
 12  +3.6067e-01  +4.8585e-01  1.25e-01  5.87e-05  1.02e-02  6.56e-06  2.03e-04  2.63e-01  
 13  +3.4620e-01  +4.1321e-01  6.70e-02  3.04e-05  5.26e-03  5.15e-06  1.13e-04  7.15e-01  
 14  +3.3600e-01  +3.6344e-01  2.74e-02  1.22e-05  2.11e-03  2.63e-06  4.84e-05  9.11e-01  
 15  +3.3316e-01  +3.5072e-01  1.76e-02  7.79e-06  1.34e-03  1.69e-06  3.16e-05  4.90e-01  
 16  +3.3029e-01  +3.3811e-01  7.82e-03  3.45e-06  5.96e-04  7.40e-07  1.44e-05  7.40e-01  
 17  +3.2876e-01  +3.3185e-01  3.09e-03  1.36e-06  2.34e-04  2.90e-07  5.77e-06  6.40e-01  
 18  +3.2779e-01  +3.2789e-01  1.05e-04  4.61e-08  7.97e-06  9.68e-09  1.99e-07  9.70e-01  
 19  +3.2775e-01  +3.2775e-01  1.06e-06  4.64e-10  8.02e-08  9.73e-11  2.00e-09  9.90e-01  
 20  +3.2775e-01  +3.2775e-01  1.06e-08  4.64e-12  8.02e-10  9.73e-13  2.00e-11  9.90e-01  
 21  +3.2775e-01  +3.2775e-01  1.07e-10  4.68e-14  8.09e-12  9.86e-15  2.03e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.0596ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:10 PM: Optimal value: 3.278e-01
(CVXPY) Oct 06 04:27:10 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:10 PM: Solver (including time spent in interface) took 2.348e-01 seconds
Iteration: 50, Objective: 0.3278
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:10 PM: Your problem has 2982 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:10 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2982
  constraints   = 5482
  nnz(P)        = 0
  nnz(A)        = 50793
  cones (total) = 1
    : Nonnegative = 1,  numel = 5482

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.7098e-01  +5.4978e+02  5.49e+02  4.49e-01  5.43e+01  3.77e-03  5.83e-01  5.77e-01  
  2  +5.2462e-01  +5.9689e+01  5.92e+01  1.64e-01  2.50e+01  1.88e-02  2.73e-01  9.90e-01  
  3  +5.0839e-01  +1.1473e+01  1.10e+01  6.97e-02  1.17e+01  6.30e-05  1.51e-01  7.50e-01  
  4  +5.0078e-01  +2.8344e+00  2.33e+00  2.20e-02  3.64e+00  5.12e-05  1.43e-01  2.13e-01  
  5  +4.9976e-01  +1.4877e+00  9.88e-01  8.45e-03  1.45e+00  4.86e-05  4.02e-02  7.51e-01  
  6  +4.8248e-01  +1.5106e+00  1.03e+00  8.58e-04  1.56e-01  8.11e-04  2.11e-03  9.65e-01  
  7  +4.7760e-01  +1.4934e+00  1.02e+00  6.64e-04  1.20e-01  8.93e-04  1.62e-03  3.22e-01  
  8  +4.6915e-01  +1.3627e+00  8.94e-01  5.29e-04  9.55e-02  6.67e-04  1.31e-03  3.37e-01  
  9  +4.2879e-01  +8.7795e-01  4.49e-01  2.29e-04  4.05e-02  7.07e-06  6.23e-04  8.79e-01  
 10  +3.8986e-01  +6.3393e-01  2.44e-01  1.20e-04  2.09e-02  6.15e-06  3.68e-04  4.84e-01  
 11  +3.7031e-01  +5.3709e-01  1.67e-01  7.96e-05  1.38e-02  8.30e-06  2.64e-04  5.06e-01  
 12  +3.6013e-01  +4.8526e-01  1.25e-01  5.88e-05  1.02e-02  6.49e-06  2.04e-04  2.67e-01  
 13  +3.4821e-01  +4.2531e-01  7.71e-02  3.53e-05  6.10e-03  5.19e-06  1.30e-04  5.61e-01  
 14  +3.3555e-01  +3.6370e-01  2.81e-02  1.26e-05  2.18e-03  2.30e-06  5.00e-05  7.96e-01  
 15  +3.3132e-01  +3.4447e-01  1.31e-02  5.84e-06  1.01e-03  1.11e-06  2.40e-05  6.30e-01  
 16  +3.2827e-01  +3.3111e-01  2.85e-03  1.25e-06  2.16e-04  2.53e-07  5.34e-06  9.58e-01  
 17  +3.2732e-01  +3.2738e-01  5.58e-05  2.44e-08  4.23e-06  4.82e-09  1.06e-07  9.86e-01  
 18  +3.2730e-01  +3.2730e-01  5.59e-07  2.44e-10  4.23e-08  4.82e-11  1.06e-09  9.90e-01  
 19  +3.2730e-01  +3.2730e-01  5.59e-09  2.44e-12  4.23e-10  4.83e-13  1.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.3105ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:10 PM: Optimal value: 3.273e-01
(CVXPY) Oct 06 04:27:10 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:10 PM: Solver (including time spent in interface) took 2.191e-01 seconds
Iteration: 51, Objective: 0.3273
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:11 PM: Your problem has 2992 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:11 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2992
  constraints   = 5492
  nnz(P)        = 0
  nnz(A)        = 51077
  cones (total) = 1
    : Nonnegative = 1,  numel = 5492

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5017e+03  2.50e+03  9.81e-01  8.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.7095e-01  +5.4973e+02  5.49e+02  4.49e-01  5.43e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2462e-01  +5.9699e+01  5.92e+01  1.64e-01  2.49e+01  1.88e-02  2.73e-01  9.90e-01  
  3  +5.0839e-01  +1.1437e+01  1.09e+01  6.95e-02  1.17e+01  6.30e-05  1.50e-01  7.51e-01  
  4  +5.0083e-01  +2.8922e+00  2.39e+00  2.25e-02  3.72e+00  5.48e-05  1.42e-01  2.08e-01  
  5  +4.9979e-01  +1.5023e+00  1.00e+00  8.58e-03  1.47e+00  5.12e-05  4.07e-02  7.48e-01  
  6  +4.8522e-01  +1.5262e+00  1.04e+00  9.97e-04  1.81e-01  7.37e-04  2.46e-03  9.58e-01  
  7  +4.8038e-01  +1.5028e+00  1.02e+00  7.68e-04  1.39e-01  8.29e-04  1.88e-03  3.02e-01  
  8  +4.7506e-01  +1.4099e+00  9.35e-01  6.18e-04  1.12e-01  6.35e-04  1.53e-03  3.84e-01  
  9  +4.4839e-01  +1.0275e+00  5.79e-01  3.22e-04  5.74e-02  7.11e-06  8.45e-04  9.49e-01  
 10  +3.9496e-01  +6.5353e-01  2.59e-01  1.26e-04  2.20e-02  1.17e-05  3.80e-04  7.21e-01  
 11  +3.7490e-01  +5.5715e-01  1.82e-01  8.69e-05  1.51e-02  1.04e-05  2.82e-04  4.10e-01  
 12  +3.5822e-01  +4.7327e-01  1.15e-01  5.37e-05  9.29e-03  6.89e-06  1.87e-04  3.95e-01  
 13  +3.4873e-01  +4.2686e-01  7.81e-02  3.58e-05  6.18e-03  5.85e-06  1.31e-04  5.40e-01  
 14  +3.3536e-01  +3.6321e-01  2.78e-02  1.25e-05  2.15e-03  2.20e-06  4.96e-05  7.06e-01  
 15  +3.3185e-01  +3.4697e-01  1.51e-02  6.74e-06  1.16e-03  1.23e-06  2.76e-05  5.38e-01  
 16  +3.2917e-01  +3.3469e-01  5.51e-03  2.43e-06  4.20e-04  4.99e-07  1.03e-05  9.90e-01  
 17  +3.2740e-01  +3.2767e-01  2.76e-04  1.21e-07  2.09e-05  2.43e-08  5.24e-07  9.59e-01  
 18  +3.2730e-01  +3.2730e-01  2.84e-06  1.24e-09  2.15e-07  2.49e-10  5.40e-09  9.90e-01  
 19  +3.2730e-01  +3.2730e-01  2.85e-08  1.25e-11  2.16e-09  2.50e-12  5.41e-11  9.90e-01  
 20  +3.2730e-01  +3.2730e-01  2.88e-10  1.26e-13  2.18e-11  2.54e-14  5.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.3805ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:11 PM: Optimal value: 3.273e-01
(CVXPY) Oct 06 04:27:11 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:27:11 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 52, Objective: 0.3273
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:11 PM: Your problem has 3002 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:11 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3002
  constraints   = 5502
  nnz(P)        = 0
  nnz(A)        = 51320
  cones (total) = 1
    : Nonnegative = 1,  numel = 5502

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.7087e-01  +5.4976e+02  5.49e+02  4.49e-01  5.42e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2458e-01  +5.9738e+01  5.92e+01  1.64e-01  2.49e+01  1.88e-02  2.73e-01  9.90e-01  
  3  +5.0840e-01  +1.1374e+01  1.09e+01  6.88e-02  1.15e+01  6.33e-05  1.49e-01  7.54e-01  
  4  +5.0093e-01  +3.0295e+00  2.53e+00  2.37e-02  3.90e+00  6.67e-05  1.42e-01  1.98e-01  
  5  +4.9986e-01  +1.5432e+00  1.04e+00  8.96e-03  1.54e+00  5.94e-05  4.25e-02  7.33e-01  
  6  +4.8579e-01  +1.5725e+00  1.09e+00  1.03e-03  1.86e-01  8.63e-04  2.52e-03  9.60e-01  
  7  +4.8058e-01  +1.5449e+00  1.06e+00  7.77e-04  1.41e-01  9.74e-04  1.90e-03  3.18e-01  
  8  +4.7502e-01  +1.4354e+00  9.60e-01  6.16e-04  1.11e-01  7.13e-04  1.52e-03  4.08e-01  
  9  +4.4050e-01  +9.5773e-01  5.17e-01  2.70e-04  4.80e-02  3.41e-05  7.14e-04  9.20e-01  
 10  +3.9054e-01  +6.3505e-01  2.45e-01  1.21e-04  2.11e-02  1.51e-05  3.73e-04  6.89e-01  
 11  +3.7209e-01  +5.4771e-01  1.76e-01  8.45e-05  1.46e-02  1.34e-05  2.79e-04  5.31e-01  
 12  +3.6011e-01  +4.8634e-01  1.26e-01  5.95e-05  1.03e-02  9.81e-06  2.06e-04  3.24e-01  
 13  +3.4806e-01  +4.2537e-01  7.73e-02  3.55e-05  6.12e-03  6.67e-06  1.30e-04  5.81e-01  
 14  +3.3506e-01  +3.6233e-01  2.73e-02  1.23e-05  2.11e-03  2.36e-06  4.87e-05  6.96e-01  
 15  +3.3162e-01  +3.4614e-01  1.45e-02  6.48e-06  1.12e-03  1.27e-06  2.65e-05  5.49e-01  
 16  +3.2952e-01  +3.3606e-01  6.54e-03  2.89e-06  4.99e-04  5.94e-07  1.22e-05  9.90e-01  
 17  +3.2751e-01  +3.2812e-01  6.05e-04  2.66e-07  4.59e-05  5.38e-08  1.15e-06  9.20e-01  
 18  +3.2730e-01  +3.2731e-01  6.62e-06  2.90e-09  5.02e-07  5.84e-10  1.26e-08  9.90e-01  
 19  +3.2730e-01  +3.2730e-01  6.65e-08  2.92e-11  5.04e-09  5.87e-12  1.27e-10  9.90e-01  
 20  +3.2730e-01  +3.2730e-01  6.72e-10  2.95e-13  5.09e-11  5.95e-14  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 220.8637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:11 PM: Optimal value: 3.273e-01
(CVXPY) Oct 06 04:27:11 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:27:11 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 53, Objective: 0.3273
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:12 PM: Your problem has 3012 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:12 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3012
  constraints   = 5512
  nnz(P)        = 0
  nnz(A)        = 51506
  cones (total) = 1
    : Nonnegative = 1,  numel = 5512

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.7089e-01  +5.4969e+02  5.49e+02  4.49e-01  5.41e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2458e-01  +5.9719e+01  5.92e+01  1.64e-01  2.48e+01  1.88e-02  2.72e-01  9.90e-01  
  3  +5.0839e-01  +1.1360e+01  1.09e+01  6.88e-02  1.15e+01  6.32e-05  1.49e-01  7.55e-01  
  4  +5.0093e-01  +3.0320e+00  2.53e+00  2.37e-02  3.90e+00  6.67e-05  1.42e-01  1.99e-01  
  5  +4.9986e-01  +1.5488e+00  1.05e+00  9.00e-03  1.54e+00  5.96e-05  4.25e-02  7.33e-01  
  6  +4.8538e-01  +1.5678e+00  1.08e+00  9.97e-04  1.81e-01  8.83e-04  2.45e-03  9.61e-01  
  7  +4.8031e-01  +1.5458e+00  1.07e+00  7.65e-04  1.38e-01  9.97e-04  1.87e-03  3.05e-01  
  8  +4.7454e-01  +1.4410e+00  9.66e-01  6.12e-04  1.11e-01  7.77e-04  1.51e-03  3.64e-01  
  9  +4.4302e-01  +9.8325e-01  5.40e-01  2.91e-04  5.17e-02  8.53e-06  7.69e-04  9.15e-01  
 10  +3.9888e-01  +6.8912e-01  2.90e-01  1.45e-04  2.52e-02  1.04e-05  4.32e-04  5.78e-01  
 11  +3.8003e-01  +5.8971e-01  2.10e-01  1.02e-04  1.77e-02  9.54e-06  3.25e-04  3.63e-01  
 12  +3.5426e-01  +4.5462e-01  1.00e-01  4.70e-05  8.11e-03  5.11e-06  1.67e-04  5.61e-01  
 13  +3.4681e-01  +4.1744e-01  7.06e-02  3.24e-05  5.58e-03  5.39e-06  1.20e-04  6.49e-01  
 14  +3.3810e-01  +3.7637e-01  3.83e-02  1.73e-05  2.97e-03  3.16e-06  6.72e-05  5.78e-01  
 15  +3.3243e-01  +3.5010e-01  1.77e-02  7.89e-06  1.36e-03  1.51e-06  3.20e-05  6.27e-01  
 16  +3.3091e-01  +3.4322e-01  1.23e-02  5.47e-06  9.43e-04  1.06e-06  2.25e-05  3.64e-01  
 17  +3.2945e-01  +3.3667e-01  7.22e-03  3.19e-06  5.51e-04  6.26e-07  1.33e-05  5.28e-01  
 18  +3.2834e-01  +3.3159e-01  3.25e-03  1.43e-06  2.47e-04  2.89e-07  6.04e-06  9.90e-01  
 19  +3.2771e-01  +3.2913e-01  1.41e-03  6.20e-07  1.07e-04  1.26e-07  2.64e-06  6.91e-01  
 20  +3.2741e-01  +3.2800e-01  5.87e-04  2.54e-07  4.42e-05  5.12e-08  1.09e-06  8.80e-01  
 21  +3.2720e-01  +3.2722e-01  1.28e-05  5.53e-09  9.63e-07  1.12e-09  2.38e-08  9.79e-01  
 22  +3.2720e-01  +3.2720e-01  1.30e-07  5.61e-11  9.77e-09  1.13e-11  2.41e-10  9.90e-01  
 23  +3.2720e-01  +3.2720e-01  1.31e-09  5.67e-13  9.86e-11  1.15e-13  2.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 263.9635ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:12 PM: Optimal value: 3.272e-01
(CVXPY) Oct 06 04:27:12 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:27:12 PM: Solver (including time spent in interface) took 2.813e-01 seconds
Iteration: 54, Objective: 0.3272
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:12 PM: Your problem has 3022 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:12 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3022
  constraints   = 5522
  nnz(P)        = 0
  nnz(A)        = 51671
  cones (total) = 1
    : Nonnegative = 1,  numel = 5522

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.7074e-01  +5.4975e+02  5.49e+02  4.49e-01  5.40e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2451e-01  +5.9766e+01  5.92e+01  1.64e-01  2.48e+01  1.88e-02  2.72e-01  9.90e-01  
  3  +5.0841e-01  +1.1271e+01  1.08e+01  6.79e-02  1.14e+01  6.35e-05  1.47e-01  7.59e-01  
  4  +5.0107e-01  +3.2477e+00  2.75e+00  2.54e-02  4.18e+00  1.06e-04  1.40e-01  2.07e-01  
  5  +4.9991e-01  +1.5676e+00  1.07e+00  9.13e-03  1.56e+00  8.82e-05  4.24e-02  7.29e-01  
  6  +4.8662e-01  +1.5887e+00  1.10e+00  1.04e-03  1.89e-01  1.25e-03  2.56e-03  9.57e-01  
  7  +4.8181e-01  +1.5689e+00  1.09e+00  8.01e-04  1.45e-01  1.40e-03  1.95e-03  3.08e-01  
  8  +4.7771e-01  +1.4599e+00  9.82e-01  6.45e-04  1.16e-01  9.12e-04  1.58e-03  4.60e-01  
  9  +4.5212e-01  +1.0734e+00  6.21e-01  3.48e-04  6.19e-02  1.01e-05  9.01e-04  9.31e-01  
 10  +3.9903e-01  +6.8413e-01  2.85e-01  1.39e-04  2.43e-02  1.28e-05  4.14e-04  7.05e-01  
 11  +3.8445e-01  +6.1103e-01  2.27e-01  1.09e-04  1.90e-02  1.17e-05  3.41e-04  2.72e-01  
 12  +3.6056e-01  +4.8832e-01  1.28e-01  6.02e-05  1.04e-02  7.61e-06  2.07e-04  5.06e-01  
 13  +3.4689e-01  +4.2113e-01  7.42e-02  3.41e-05  5.87e-03  5.59e-06  1.26e-04  6.16e-01  
 14  +3.3544e-01  +3.6611e-01  3.07e-02  1.38e-05  2.38e-03  2.39e-06  5.48e-05  6.35e-01  
 15  +3.3073e-01  +3.4401e-01  1.33e-02  5.93e-06  1.02e-03  1.10e-06  2.45e-05  7.03e-01  
 16  +3.2805e-01  +3.3238e-01  4.33e-03  1.92e-06  3.30e-04  3.60e-07  8.17e-06  7.15e-01  
 17  +3.2682e-01  +3.2715e-01  3.37e-04  1.48e-07  2.56e-05  2.83e-08  6.46e-07  9.76e-01  
 18  +3.2670e-01  +3.2670e-01  3.52e-06  1.54e-09  2.66e-07  2.94e-10  6.75e-09  9.90e-01  
 19  +3.2670e-01  +3.2670e-01  3.53e-08  1.55e-11  2.67e-09  2.95e-12  6.78e-11  9.90e-01  
 20  +3.2670e-01  +3.2670e-01  3.56e-10  1.57e-13  2.70e-11  2.99e-14  6.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 255.1667ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:13 PM: Optimal value: 3.267e-01
(CVXPY) Oct 06 04:27:13 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:27:13 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 55, Objective: 0.3267
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:13 PM: Your problem has 3027 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:13 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3027
  constraints   = 5527
  nnz(P)        = 0
  nnz(A)        = 51763
  cones (total) = 1
    : Nonnegative = 1,  numel = 5527

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.51e+01  1.00e+00  1.00e+00   ------   
  1  +5.7058e-01  +5.4979e+02  5.49e+02  4.50e-01  5.40e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2445e-01  +5.9857e+01  5.93e+01  1.64e-01  2.48e+01  1.88e-02  2.72e-01  9.90e-01  
  3  +5.0844e-01  +1.1181e+01  1.07e+01  6.70e-02  1.12e+01  6.39e-05  1.44e-01  7.63e-01  
  4  +5.0108e-01  +3.7848e+00  3.28e+00  2.91e-02  4.78e+00  4.39e-04  1.33e-01  4.35e-01  
  5  +4.9974e-01  +1.5354e+00  1.04e+00  8.24e-03  1.42e+00  3.08e-04  3.35e-02  7.69e-01  
  6  +4.8440e-01  +1.4985e+00  1.01e+00  8.17e-04  1.48e-01  4.34e-03  1.99e-03  9.52e-01  
  7  +4.8012e-01  +1.5001e+00  1.02e+00  6.58e-04  1.19e-01  4.82e-03  1.60e-03  2.76e-01  
  8  +4.7445e-01  +1.4215e+00  9.47e-01  5.46e-04  9.86e-02  3.65e-03  1.34e-03  3.58e-01  
  9  +4.5138e-01  +1.0852e+00  6.34e-01  3.73e-04  6.64e-02  3.35e-05  9.77e-04  7.37e-01  
 10  +4.0256e-01  +7.1590e-01  3.13e-01  1.55e-04  2.70e-02  1.75e-05  4.53e-04  6.51e-01  
 11  +3.8695e-01  +6.3231e-01  2.45e-01  1.19e-04  2.07e-02  1.46e-05  3.69e-04  2.62e-01  
 12  +3.6367e-01  +5.0992e-01  1.46e-01  6.94e-05  1.20e-02  1.00e-05  2.35e-04  5.15e-01  
 13  +3.5658e-01  +4.7383e-01  1.17e-01  5.50e-05  9.48e-03  8.20e-06  1.93e-04  2.22e-01  
 14  +3.4452e-01  +4.1271e-01  6.82e-02  3.14e-05  5.39e-03  5.26e-06  1.17e-04  5.36e-01  
 15  +3.3367e-01  +3.5997e-01  2.63e-02  1.19e-05  2.04e-03  2.08e-06  4.76e-05  6.55e-01  
 16  +3.3008e-01  +3.4320e-01  1.31e-02  5.87e-06  1.01e-03  1.07e-06  2.43e-05  5.92e-01  
 17  +3.2767e-01  +3.3252e-01  4.85e-03  2.16e-06  3.71e-04  3.94e-07  9.19e-06  6.51e-01  
 18  +3.2634e-01  +3.2674e-01  4.07e-04  1.79e-07  3.09e-05  3.34e-08  7.82e-07  9.61e-01  
 19  +3.2620e-01  +3.2621e-01  4.32e-06  1.90e-09  3.28e-07  3.55e-10  8.33e-09  9.89e-01  
 20  +3.2620e-01  +3.2620e-01  4.35e-08  1.91e-11  3.30e-09  3.57e-12  8.38e-11  9.90e-01  
 21  +3.2620e-01  +3.2620e-01  4.39e-10  1.93e-13  3.33e-11  3.62e-14  8.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 269.8009ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:13 PM: Optimal value: 3.262e-01
(CVXPY) Oct 06 04:27:13 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:27:13 PM: Solver (including time spent in interface) took 2.813e-01 seconds
Iteration: 56, Objective: 0.3262
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:13 PM: Your problem has 3037 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:13 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3037
  constraints   = 5537
  nnz(P)        = 0
  nnz(A)        = 51898
  cones (total) = 1
    : Nonnegative = 1,  numel = 5537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7051e-01  +5.4972e+02  5.49e+02  4.50e-01  5.39e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2439e-01  +5.9867e+01  5.93e+01  1.64e-01  2.47e+01  1.88e-02  2.72e-01  9.90e-01  
  3  +5.0867e-01  +1.1773e+01  1.13e+01  6.92e-02  1.16e+01  3.23e-04  1.48e-01  7.36e-01  
  4  +4.9981e-01  +2.0937e+00  1.59e+00  1.55e-02  2.57e+00  1.15e-03  1.29e-01  6.62e-01  
  5  +4.9754e-01  +1.4380e+00  9.40e-01  6.32e-03  1.10e+00  2.50e-03  2.29e-02  8.39e-01  
  6  +4.6547e-01  +1.3592e+00  8.94e-01  7.05e-04  1.26e-01  2.65e-02  1.84e-03  9.22e-01  
  7  +4.6044e-01  +1.3644e+00  9.04e-01  5.97e-04  1.07e-01  2.84e-02  1.54e-03  2.49e-01  
  8  +4.5894e-01  +1.3192e+00  8.60e-01  5.15e-04  9.20e-02  2.17e-02  1.32e-03  3.68e-01  
  9  +4.4283e-01  +1.0332e+00  5.90e-01  3.40e-04  6.01e-02  3.83e-03  9.09e-04  6.89e-01  
 10  +3.9123e-01  +6.4672e-01  2.55e-01  1.24e-04  2.16e-02  8.94e-04  3.77e-04  6.79e-01  
 11  +3.7307e-01  +5.5866e-01  1.86e-01  8.88e-05  1.53e-02  4.85e-04  2.88e-04  4.18e-01  
 12  +3.5810e-01  +4.8144e-01  1.23e-01  5.79e-05  9.97e-03  2.91e-04  2.01e-04  3.62e-01  
 13  +3.4328e-01  +4.0602e-01  6.27e-02  2.86e-05  4.92e-03  3.62e-05  1.07e-04  9.33e-01  
 14  +3.3544e-01  +3.6806e-01  3.26e-02  1.47e-05  2.53e-03  1.46e-05  5.78e-05  6.19e-01  
 15  +3.3110e-01  +3.4759e-01  1.65e-02  7.39e-06  1.27e-03  5.61e-06  2.99e-05  6.51e-01  
 16  +3.2805e-01  +3.3405e-01  5.99e-03  2.66e-06  4.57e-04  1.28e-06  1.11e-05  8.24e-01  
 17  +3.2655e-01  +3.2791e-01  1.35e-03  5.95e-07  1.02e-04  2.54e-07  2.54e-06  8.15e-01  
 18  +3.2616e-01  +3.2632e-01  1.65e-04  7.22e-08  1.24e-05  1.55e-08  3.12e-07  9.90e-01  
 19  +3.2610e-01  +3.2610e-01  1.70e-06  7.44e-10  1.28e-07  1.60e-10  3.22e-09  9.90e-01  
 20  +3.2610e-01  +3.2610e-01  1.71e-08  7.48e-12  1.29e-09  1.61e-12  3.23e-11  9.90e-01  
 21  +3.2610e-01  +3.2610e-01  1.74e-10  7.60e-14  1.31e-11  1.65e-14  3.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 274.6133ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:14 PM: Optimal value: 3.261e-01
(CVXPY) Oct 06 04:27:14 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:27:14 PM: Solver (including time spent in interface) took 2.819e-01 seconds
Iteration: 57, Objective: 0.3261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:14 PM: Your problem has 3047 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:14 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3047
  constraints   = 5547
  nnz(P)        = 0
  nnz(A)        = 52101
  cones (total) = 1
    : Nonnegative = 1,  numel = 5547

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7049e-01  +5.4971e+02  5.49e+02  4.50e-01  5.38e+01  3.78e-03  5.83e-01  5.78e-01  
  2  +5.2438e-01  +5.9880e+01  5.94e+01  1.64e-01  2.46e+01  1.88e-02  2.72e-01  9.90e-01  
  3  +5.0873e-01  +1.1916e+01  1.14e+01  6.98e-02  1.16e+01  3.86e-04  1.49e-01  7.30e-01  
  4  +4.9993e-01  +2.1690e+00  1.67e+00  1.63e-02  2.70e+00  1.14e-03  1.32e-01  5.86e-01  
  5  +4.9798e-01  +1.4351e+00  9.37e-01  6.59e-03  1.14e+00  2.22e-03  2.43e-02  8.33e-01  
  6  +4.7093e-01  +1.3834e+00  9.12e-01  7.87e-04  1.41e-01  2.31e-02  2.04e-03  9.19e-01  
  7  +4.6658e-01  +1.3711e+00  9.05e-01  6.77e-04  1.21e-01  2.43e-02  1.75e-03  1.98e-01  
  8  +4.7091e-01  +1.3645e+00  8.94e-01  6.43e-04  1.15e-01  1.49e-02  1.63e-03  4.35e-01  
  9  +4.5984e-01  +1.2671e+00  8.07e-01  4.75e-04  8.48e-02  1.33e-02  1.22e-03  3.74e-01  
 10  +4.3433e-01  +9.6986e-01  5.36e-01  2.93e-04  5.17e-02  4.07e-03  7.99e-04  5.75e-01  
 11  +3.8927e-01  +6.4205e-01  2.53e-01  1.26e-04  2.18e-02  9.06e-04  3.88e-04  6.40e-01  
 12  +3.7164e-01  +5.5341e-01  1.82e-01  8.81e-05  1.52e-02  4.70e-04  2.90e-04  4.43e-01  
 13  +3.5653e-01  +4.7493e-01  1.18e-01  5.60e-05  9.63e-03  2.75e-04  1.97e-04  3.78e-01  
 14  +3.4260e-01  +4.0383e-01  6.12e-02  2.81e-05  4.82e-03  6.49e-05  1.05e-04  7.93e-01  
 15  +3.3521e-01  +3.6805e-01  3.28e-02  1.49e-05  2.55e-03  2.61e-05  5.84e-05  6.11e-01  
 16  +3.3015e-01  +3.4480e-01  1.46e-02  6.55e-06  1.12e-03  9.45e-06  2.68e-05  6.44e-01  
 17  +3.2752e-01  +3.3325e-01  5.73e-03  2.53e-06  4.35e-04  2.71e-06  1.07e-05  7.29e-01  
 18  +3.2590e-01  +3.2649e-01  5.86e-04  2.57e-07  4.41e-05  1.14e-07  1.11e-06  9.70e-01  
 19  +3.2570e-01  +3.2571e-01  8.89e-06  3.89e-09  6.68e-07  1.58e-09  1.69e-08  9.87e-01  
 20  +3.2570e-01  +3.2570e-01  9.09e-08  3.98e-11  6.83e-09  1.61e-11  1.72e-10  9.90e-01  
 21  +3.2570e-01  +3.2570e-01  9.24e-10  4.05e-13  6.95e-11  1.65e-13  1.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 276.1341ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:14 PM: Optimal value: 3.257e-01
(CVXPY) Oct 06 04:27:14 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:27:14 PM: Solver (including time spent in interface) took 2.969e-01 seconds
Iteration: 58, Objective: 0.3257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:15 PM: Your problem has 3048 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:15 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3048
  constraints   = 5548
  nnz(P)        = 0
  nnz(A)        = 52337
  cones (total) = 1
    : Nonnegative = 1,  numel = 5548

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7047e-01  +5.4976e+02  5.49e+02  4.50e-01  5.39e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2439e-01  +5.9893e+01  5.94e+01  1.64e-01  2.47e+01  1.88e-02  2.72e-01  9.90e-01  
  3  +5.0869e-01  +1.1822e+01  1.13e+01  6.94e-02  1.16e+01  3.44e-04  1.48e-01  7.35e-01  
  4  +4.9993e-01  +2.2161e+00  1.72e+00  1.67e-02  2.77e+00  1.14e-03  1.31e-01  6.00e-01  
  5  +4.9801e-01  +1.4415e+00  9.43e-01  6.61e-03  1.14e+00  2.16e-03  2.42e-02  8.30e-01  
  6  +4.7072e-01  +1.3847e+00  9.14e-01  7.70e-04  1.38e-01  2.28e-02  1.99e-03  9.22e-01  
  7  +4.6721e-01  +1.3787e+00  9.12e-01  6.77e-04  1.21e-01  2.37e-02  1.74e-03  1.89e-01  
  8  +4.7163e-01  +1.3721e+00  9.00e-01  6.40e-04  1.15e-01  1.38e-02  1.62e-03  4.65e-01  
  9  +4.6105e-01  +1.2710e+00  8.10e-01  4.79e-04  8.56e-02  1.17e-02  1.22e-03  3.82e-01  
 10  +4.3393e-01  +9.6591e-01  5.32e-01  2.89e-04  5.09e-02  3.61e-03  7.86e-04  5.83e-01  
 11  +3.8886e-01  +6.3999e-01  2.51e-01  1.25e-04  2.17e-02  7.89e-04  3.86e-04  6.37e-01  
 12  +3.7104e-01  +5.5016e-01  1.79e-01  8.68e-05  1.50e-02  4.09e-04  2.87e-04  4.43e-01  
 13  +3.5671e-01  +4.7588e-01  1.19e-01  5.64e-05  9.71e-03  2.47e-04  1.98e-04  3.64e-01  
 14  +3.4273e-01  +4.0461e-01  6.19e-02  2.84e-05  4.88e-03  6.20e-05  1.07e-04  7.76e-01  
 15  +3.3501e-01  +3.6718e-01  3.22e-02  1.46e-05  2.50e-03  2.42e-05  5.73e-05  6.22e-01  
 16  +3.3020e-01  +3.4504e-01  1.48e-02  6.64e-06  1.14e-03  9.22e-06  2.71e-05  6.26e-01  
 17  +3.2761e-01  +3.3365e-01  6.04e-03  2.67e-06  4.59e-04  2.84e-06  1.12e-05  7.06e-01  
 18  +3.2599e-01  +3.2684e-01  8.51e-04  3.73e-07  6.42e-05  2.48e-07  1.61e-06  9.23e-01  
 19  +3.2571e-01  +3.2572e-01  1.54e-05  6.76e-09  1.16e-06  3.95e-09  2.93e-08  9.85e-01  
 20  +3.2570e-01  +3.2570e-01  1.57e-07  6.86e-11  1.18e-08  4.00e-11  2.97e-10  9.90e-01  
 21  +3.2570e-01  +3.2570e-01  1.57e-09  6.86e-13  1.18e-10  4.01e-13  2.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 275.2557ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:15 PM: Optimal value: 3.257e-01
(CVXPY) Oct 06 04:27:15 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:27:15 PM: Solver (including time spent in interface) took 2.812e-01 seconds
Iteration: 59, Objective: 0.3257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:15 PM: Your problem has 3053 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:15 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3053
  constraints   = 5553
  nnz(P)        = 0
  nnz(A)        = 52382
  cones (total) = 1
    : Nonnegative = 1,  numel = 5553

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7044e-01  +5.4982e+02  5.49e+02  4.50e-01  5.38e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2436e-01  +5.9921e+01  5.94e+01  1.64e-01  2.47e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.0881e-01  +1.2114e+01  1.16e+01  7.05e-02  1.17e+01  4.63e-04  1.50e-01  7.22e-01  
  4  +4.9997e-01  +2.1729e+00  1.67e+00  1.64e-02  2.72e+00  1.13e-03  1.33e-01  5.49e-01  
  5  +4.9824e-01  +1.4725e+00  9.74e-01  7.17e-03  1.24e+00  2.08e-03  2.72e-02  8.14e-01  
  6  +4.7407e-01  +1.4339e+00  9.60e-01  9.03e-04  1.62e-01  2.12e-02  2.34e-03  9.18e-01  
  7  +4.6912e-01  +1.4077e+00  9.39e-01  7.58e-04  1.36e-01  2.28e-02  1.95e-03  2.00e-01  
  8  +4.7313e-01  +1.3992e+00  9.26e-01  7.39e-04  1.32e-01  1.52e-02  1.88e-03  3.44e-01  
  9  +4.6354e-01  +1.3375e+00  8.74e-01  5.43e-04  9.71e-02  1.53e-02  1.39e-03  3.73e-01  
 10  +4.5171e-01  +1.0803e+00  6.29e-01  4.06e-04  7.20e-02  1.35e-03  1.08e-03  6.81e-01  
 11  +4.0717e-01  +7.5527e-01  3.48e-01  1.75e-04  3.06e-02  5.63e-04  5.10e-04  6.42e-01  
 12  +3.8918e-01  +6.5189e-01  2.63e-01  1.30e-04  2.25e-02  3.72e-04  4.00e-04  2.79e-01  
 13  +3.6659e-01  +5.3042e-01  1.64e-01  7.88e-05  1.36e-02  1.55e-04  2.64e-04  5.47e-01  
 14  +3.5705e-01  +4.8025e-01  1.23e-01  5.84e-05  1.00e-02  1.10e-04  2.04e-04  2.68e-01  
 15  +3.4195e-01  +4.0147e-01  5.95e-02  2.74e-05  4.70e-03  3.05e-05  1.03e-04  7.54e-01  
 16  +3.3542e-01  +3.6933e-01  3.39e-02  1.54e-05  2.64e-03  1.37e-05  6.04e-05  5.80e-01  
 17  +3.2979e-01  +3.4320e-01  1.34e-02  6.00e-06  1.03e-03  4.37e-06  2.46e-05  7.02e-01  
 18  +3.2772e-01  +3.3409e-01  6.37e-03  2.82e-06  4.84e-04  1.60e-06  1.18e-05  6.73e-01  
 19  +3.2600e-01  +3.2688e-01  8.86e-04  3.89e-07  6.68e-05  1.70e-07  1.67e-06  9.09e-01  
 20  +3.2571e-01  +3.2572e-01  1.69e-05  7.41e-09  1.27e-06  2.80e-09  3.21e-08  9.85e-01  
 21  +3.2570e-01  +3.2570e-01  1.72e-07  7.51e-11  1.29e-08  2.84e-11  3.26e-10  9.90e-01  
 22  +3.2570e-01  +3.2570e-01  1.72e-09  7.51e-13  1.29e-10  2.84e-13  3.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 279.3351ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:16 PM: Optimal value: 3.257e-01
(CVXPY) Oct 06 04:27:16 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:27:16 PM: Solver (including time spent in interface) took 2.969e-01 seconds
Iteration: 60, Objective: 0.3257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:16 PM: Your problem has 3058 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:16 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3058
  constraints   = 5558
  nnz(P)        = 0
  nnz(A)        = 52424
  cones (total) = 1
    : Nonnegative = 1,  numel = 5558

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5017e+03  2.50e+03  9.81e-01  8.50e+01  1.00e+00  1.00e+00   ------   
  1  +5.7039e-01  +5.4987e+02  5.49e+02  4.50e-01  5.38e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2434e-01  +5.9931e+01  5.94e+01  1.64e-01  2.46e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.0888e-01  +1.2310e+01  1.18e+01  7.12e-02  1.18e+01  5.46e-04  1.51e-01  7.14e-01  
  4  +4.9999e-01  +2.1587e+00  1.66e+00  1.63e-02  2.71e+00  1.12e-03  1.34e-01  5.32e-01  
  5  +4.9833e-01  +1.4881e+00  9.90e-01  7.42e-03  1.28e+00  2.06e-03  2.85e-02  8.07e-01  
  6  +4.7569e-01  +1.4563e+00  9.81e-01  9.78e-04  1.75e-01  2.03e-02  2.53e-03  9.15e-01  
  7  +4.7039e-01  +1.4239e+00  9.54e-01  8.01e-04  1.43e-01  2.20e-02  2.07e-03  2.23e-01  
  8  +4.7467e-01  +1.4159e+00  9.41e-01  7.79e-04  1.40e-01  1.44e-02  1.98e-03  3.66e-01  
  9  +4.6434e-01  +1.3493e+00  8.85e-01  5.53e-04  9.89e-02  1.49e-02  1.41e-03  3.99e-01  
 10  +4.5276e-01  +1.0934e+00  6.41e-01  4.16e-04  7.37e-02  1.55e-03  1.10e-03  6.70e-01  
 11  +4.0657e-01  +7.5147e-01  3.45e-01  1.72e-04  3.01e-02  6.50e-04  5.00e-04  6.49e-01  
 12  +3.8874e-01  +6.5024e-01  2.61e-01  1.29e-04  2.23e-02  4.29e-04  3.96e-04  2.78e-01  
 13  +3.6674e-01  +5.3226e-01  1.66e-01  7.95e-05  1.37e-02  1.86e-04  2.67e-04  5.27e-01  
 14  +3.5693e-01  +4.8055e-01  1.24e-01  5.86e-05  1.01e-02  1.31e-04  2.05e-04  2.73e-01  
 15  +3.4206e-01  +4.0267e-01  6.06e-02  2.79e-05  4.80e-03  3.65e-05  1.05e-04  7.50e-01  
 16  +3.3515e-01  +3.6858e-01  3.34e-02  1.52e-05  2.61e-03  1.56e-05  5.97e-05  5.98e-01  
 17  +3.2955e-01  +3.4246e-01  1.29e-02  5.79e-06  9.93e-04  4.69e-06  2.38e-05  7.19e-01  
 18  +3.2776e-01  +3.3457e-01  6.81e-03  3.02e-06  5.19e-04  1.93e-06  1.27e-05  6.24e-01  
 19  +3.2600e-01  +3.2724e-01  1.24e-03  5.45e-07  9.36e-05  3.01e-07  2.35e-06  8.52e-01  
 20  +3.2561e-01  +3.2565e-01  3.41e-05  1.50e-08  2.57e-06  7.39e-09  6.50e-08  9.76e-01  
 21  +3.2560e-01  +3.2560e-01  3.42e-07  1.50e-10  2.58e-08  7.41e-11  6.51e-10  9.90e-01  
 22  +3.2560e-01  +3.2560e-01  3.43e-09  1.50e-12  2.58e-10  7.41e-13  6.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 277.9233ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:16 PM: Optimal value: 3.256e-01
(CVXPY) Oct 06 04:27:16 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:27:16 PM: Solver (including time spent in interface) took 2.813e-01 seconds
Iteration: 61, Objective: 0.3256
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:16 PM: Your problem has 3068 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:16 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3068
  constraints   = 5568
  nnz(P)        = 0
  nnz(A)        = 52529
  cones (total) = 1
    : Nonnegative = 1,  numel = 5568

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.49e+01  1.00e+00  1.00e+00   ------   
  1  +5.7025e-01  +5.4986e+02  5.49e+02  4.50e-01  5.37e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2425e-01  +5.9960e+01  5.94e+01  1.64e-01  2.46e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.0925e-01  +1.3306e+01  1.28e+01  7.48e-02  1.24e+01  9.67e-04  1.56e-01  6.75e-01  
  4  +5.0004e-01  +2.1354e+00  1.64e+00  1.62e-02  2.69e+00  1.11e-03  1.37e-01  5.25e-01  
  5  +4.9856e-01  +1.5284e+00  1.03e+00  8.10e-03  1.39e+00  1.97e-03  3.23e-02  7.87e-01  
  6  +4.7996e-01  +1.5098e+00  1.03e+00  1.22e-03  2.18e-01  1.77e-02  3.16e-03  9.06e-01  
  7  +4.7342e-01  +1.4676e+00  9.94e-01  9.18e-04  1.64e-01  2.06e-02  2.37e-03  2.94e-01  
  8  +4.7822e-01  +1.4549e+00  9.77e-01  8.77e-04  1.57e-01  1.24e-02  2.22e-03  4.36e-01  
  9  +4.6587e-01  +1.3763e+00  9.10e-01  5.67e-04  1.02e-01  1.41e-02  1.44e-03  4.47e-01  
 10  +4.5669e-01  +1.1438e+00  6.87e-01  4.57e-04  8.11e-02  3.11e-03  1.20e-03  5.44e-01  
 11  +4.2574e-01  +8.9944e-01  4.74e-01  2.60e-04  4.55e-02  1.49e-03  7.27e-04  5.65e-01  
 12  +3.9288e-01  +6.7705e-01  2.84e-01  1.45e-04  2.52e-02  7.22e-04  4.46e-04  4.24e-01  
 13  +3.6963e-01  +5.5028e-01  1.81e-01  8.86e-05  1.53e-02  2.78e-04  2.95e-04  5.70e-01  
 14  +3.5502e-01  +4.7228e-01  1.17e-01  5.61e-05  9.63e-03  1.62e-04  1.99e-04  3.84e-01  
 15  +3.4064e-01  +3.9646e-01  5.58e-02  2.58e-05  4.42e-03  2.32e-05  9.77e-05  9.12e-01  
 16  +3.3520e-01  +3.7016e-01  3.50e-02  1.60e-05  2.74e-03  1.18e-05  6.27e-05  5.32e-01  
 17  +3.2895e-01  +3.4152e-01  1.26e-02  5.66e-06  9.70e-04  3.59e-06  2.33e-05  7.11e-01  
 18  +3.2715e-01  +3.3364e-01  6.49e-03  2.89e-06  4.96e-04  1.50e-06  1.22e-05  6.27e-01  
 19  +3.2551e-01  +3.2678e-01  1.27e-03  5.61e-07  9.63e-05  2.57e-07  2.42e-06  8.39e-01  
 20  +3.2511e-01  +3.2515e-01  3.41e-05  1.50e-08  2.58e-06  6.26e-09  6.55e-08  9.77e-01  
 21  +3.2510e-01  +3.2510e-01  3.42e-07  1.51e-10  2.58e-08  6.27e-11  6.56e-10  9.90e-01  
 22  +3.2510e-01  +3.2510e-01  3.42e-09  1.51e-12  2.59e-10  6.28e-13  6.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 276.5943ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:17 PM: Optimal value: 3.251e-01
(CVXPY) Oct 06 04:27:17 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:27:17 PM: Solver (including time spent in interface) took 2.969e-01 seconds
Iteration: 62, Objective: 0.3251
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:17 PM: Your problem has 3078 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:17 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3078
  constraints   = 5578
  nnz(P)        = 0
  nnz(A)        = 52631
  cones (total) = 1
    : Nonnegative = 1,  numel = 5578

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.7006e-01  +5.4987e+02  5.49e+02  4.50e-01  5.37e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2417e-01  +6.0040e+01  5.95e+01  1.64e-01  2.45e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.0961e-01  +1.4259e+01  1.37e+01  7.80e-02  1.28e+01  1.37e-03  1.60e-01  6.40e-01  
  4  +5.0006e-01  +2.1382e+00  1.64e+00  1.63e-02  2.70e+00  1.10e-03  1.38e-01  5.65e-01  
  5  +4.9860e-01  +1.5345e+00  1.04e+00  8.19e-03  1.41e+00  1.96e-03  3.25e-02  7.89e-01  
  6  +4.8098e-01  +1.5215e+00  1.04e+00  1.28e-03  2.29e-01  1.70e-02  3.32e-03  9.02e-01  
  7  +4.7396e-01  +1.4800e+00  1.01e+00  9.37e-04  1.68e-01  2.04e-02  2.41e-03  3.17e-01  
  8  +4.7865e-01  +1.4671e+00  9.88e-01  8.92e-04  1.60e-01  1.21e-02  2.25e-03  4.50e-01  
  9  +4.6605e-01  +1.3862e+00  9.20e-01  5.72e-04  1.02e-01  1.40e-02  1.44e-03  4.47e-01  
 10  +4.5795e-01  +1.1821e+00  7.24e-01  4.80e-04  8.52e-02  4.62e-03  1.25e-03  4.51e-01  
 11  +4.2441e-01  +8.9978e-01  4.75e-01  2.55e-04  4.48e-02  2.09e-03  7.12e-04  5.96e-01  
 12  +3.8965e-01  +6.6211e-01  2.72e-01  1.38e-04  2.39e-02  9.20e-04  4.26e-04  4.46e-01  
 13  +3.6784e-01  +5.4418e-01  1.76e-01  8.63e-05  1.49e-02  4.00e-04  2.89e-04  5.20e-01  
 14  +3.5472e-01  +4.7442e-01  1.20e-01  5.73e-05  9.84e-03  2.46e-04  2.03e-04  3.53e-01  
 15  +3.3979e-01  +3.9574e-01  5.60e-02  2.59e-05  4.43e-03  3.25e-05  9.84e-05  9.14e-01  
 16  +3.3446e-01  +3.6984e-01  3.54e-02  1.62e-05  2.78e-03  1.67e-05  6.37e-05  5.12e-01  
 17  +3.2892e-01  +3.4417e-01  1.53e-02  6.91e-06  1.18e-03  6.19e-06  2.83e-05  6.37e-01  
 18  +3.2631e-01  +3.3220e-01  5.89e-03  2.64e-06  4.53e-04  1.17e-06  1.11e-05  8.72e-01  
 19  +3.2462e-01  +3.2530e-01  6.72e-04  3.00e-07  5.14e-05  1.13e-07  1.29e-06  9.13e-01  
 20  +3.2441e-01  +3.2442e-01  1.73e-05  7.69e-09  1.32e-06  2.00e-09  3.33e-08  9.90e-01  
 21  +3.2440e-01  +3.2440e-01  1.74e-07  7.74e-11  1.33e-08  2.01e-11  3.35e-10  9.90e-01  
 22  +3.2440e-01  +3.2440e-01  1.75e-09  7.81e-13  1.34e-10  2.03e-13  3.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 302.4008ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:17 PM: Optimal value: 3.244e-01
(CVXPY) Oct 06 04:27:17 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:27:17 PM: Solver (including time spent in interface) took 3.125e-01 seconds
Iteration: 63, Objective: 0.3244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:18 PM: Your problem has 3079 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:18 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3079
  constraints   = 5579
  nnz(P)        = 0
  nnz(A)        = 52751
  cones (total) = 1
    : Nonnegative = 1,  numel = 5579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.48e+01  1.00e+00  1.00e+00   ------   
  1  +5.7003e-01  +5.4986e+02  5.49e+02  4.50e-01  5.37e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2416e-01  +6.0057e+01  5.95e+01  1.64e-01  2.45e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.0965e-01  +1.4361e+01  1.39e+01  7.83e-02  1.29e+01  1.41e-03  1.61e-01  6.37e-01  
  4  +5.0008e-01  +2.1637e+00  1.66e+00  1.66e-02  2.74e+00  1.10e-03  1.39e-01  5.63e-01  
  5  +4.9866e-01  +1.5410e+00  1.04e+00  8.30e-03  1.42e+00  1.90e-03  3.31e-02  7.85e-01  
  6  +4.8170e-01  +1.5299e+00  1.05e+00  1.32e-03  2.36e-01  1.64e-02  3.41e-03  9.02e-01  
  7  +4.7455e-01  +1.4876e+00  1.01e+00  9.49e-04  1.70e-01  1.99e-02  2.44e-03  3.27e-01  
  8  +4.7905e-01  +1.4721e+00  9.93e-01  8.97e-04  1.61e-01  1.17e-02  2.25e-03  4.62e-01  
  9  +4.6642e-01  +1.3906e+00  9.24e-01  5.73e-04  1.03e-01  1.36e-02  1.44e-03  4.47e-01  
 10  +4.5679e-01  +1.1572e+00  7.00e-01  4.64e-04  8.24e-02  3.26e-03  1.21e-03  5.23e-01  
 11  +4.2270e-01  +8.8361e-01  4.61e-01  2.48e-04  4.34e-02  1.44e-03  6.95e-04  6.00e-01  
 12  +3.9209e-01  +6.7848e-01  2.86e-01  1.46e-04  2.53e-02  7.28e-04  4.48e-04  3.96e-01  
 13  +3.6688e-01  +5.3889e-01  1.72e-01  8.43e-05  1.45e-02  2.75e-04  2.83e-04  5.70e-01  
 14  +3.5464e-01  +4.7393e-01  1.19e-01  5.72e-05  9.82e-03  1.73e-04  2.02e-04  3.43e-01  
 15  +3.3991e-01  +3.9644e-01  5.65e-02  2.61e-05  4.48e-03  2.47e-05  9.92e-05  9.12e-01  
 16  +3.3435e-01  +3.6955e-01  3.52e-02  1.61e-05  2.76e-03  1.27e-05  6.32e-05  5.17e-01  
 17  +3.2932e-01  +3.4635e-01  1.70e-02  7.70e-06  1.32e-03  5.46e-06  3.14e-05  5.84e-01  
 18  +3.2579e-01  +3.3026e-01  4.47e-03  2.00e-06  3.43e-04  6.47e-07  8.41e-06  9.43e-01  
 19  +3.2456e-01  +3.2525e-01  6.85e-04  3.06e-07  5.24e-05  9.02e-08  1.30e-06  8.80e-01  
 20  +3.2434e-01  +3.2436e-01  1.92e-05  8.58e-09  1.47e-06  2.35e-09  3.66e-08  9.78e-01  
 21  +3.2433e-01  +3.2433e-01  1.92e-07  8.60e-11  1.47e-08  2.35e-11  3.67e-10  9.90e-01  
 22  +3.2433e-01  +3.2433e-01  1.94e-09  8.67e-13  1.49e-10  2.38e-13  3.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 303.2085ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:18 PM: Optimal value: 3.243e-01
(CVXPY) Oct 06 04:27:18 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:27:18 PM: Solver (including time spent in interface) took 3.125e-01 seconds
Iteration: 64, Objective: 0.3243
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:18 PM: Your problem has 3089 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:18 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3089
  constraints   = 5589
  nnz(P)        = 0
  nnz(A)        = 52940
  cones (total) = 1
    : Nonnegative = 1,  numel = 5589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.6997e-01  +5.4989e+02  5.49e+02  4.51e-01  5.36e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2412e-01  +6.0085e+01  5.96e+01  1.64e-01  2.45e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.0979e-01  +1.4721e+01  1.42e+01  7.94e-02  1.30e+01  1.57e-03  1.62e-01  6.24e-01  
  4  +5.0006e-01  +2.1259e+00  1.63e+00  1.62e-02  2.68e+00  1.09e-03  1.38e-01  5.98e-01  
  5  +4.9857e-01  +1.5426e+00  1.04e+00  8.21e-03  1.41e+00  1.98e-03  3.24e-02  7.91e-01  
  6  +4.8098e-01  +1.5272e+00  1.05e+00  1.29e-03  2.31e-01  1.70e-02  3.35e-03  9.01e-01  
  7  +4.7434e-01  +1.4857e+00  1.01e+00  9.58e-04  1.71e-01  2.01e-02  2.47e-03  3.06e-01  
  8  +4.7880e-01  +1.4734e+00  9.95e-01  9.17e-04  1.64e-01  1.22e-02  2.31e-03  4.31e-01  
  9  +4.6556e-01  +1.3902e+00  9.25e-01  5.76e-04  1.03e-01  1.44e-02  1.46e-03  4.56e-01  
 10  +4.5677e-01  +1.1485e+00  6.92e-01  4.68e-04  8.29e-02  3.24e-03  1.23e-03  5.19e-01  
 11  +4.4587e-01  +1.0434e+00  5.98e-01  3.86e-04  6.80e-02  2.05e-03  1.05e-03  3.18e-01  
 12  +3.9845e-01  +6.9894e-01  3.00e-01  1.52e-04  2.64e-02  8.10e-04  4.55e-04  6.41e-01  
 13  +3.8784e-01  +6.4866e-01  2.61e-01  1.30e-04  2.25e-02  5.49e-04  4.04e-04  3.00e-01  
 14  +3.6337e-01  +5.1781e-01  1.54e-01  7.49e-05  1.29e-02  2.22e-04  2.55e-04  5.40e-01  
 15  +3.5529e-01  +4.7609e-01  1.21e-01  5.78e-05  9.91e-03  1.65e-04  2.04e-04  2.40e-01  
 16  +3.3880e-01  +3.9152e-01  5.27e-02  2.44e-05  4.18e-03  3.69e-05  9.34e-05  7.96e-01  
 17  +3.3207e-01  +3.5837e-01  2.63e-02  1.20e-05  2.05e-03  1.05e-05  4.78e-05  7.69e-01  
 18  +3.2734e-01  +3.3687e-01  9.53e-03  4.30e-06  7.35e-04  2.09e-06  1.78e-05  8.57e-01  
 19  +3.2481e-01  +3.2630e-01  1.48e-03  6.63e-07  1.14e-04  2.77e-07  2.82e-06  8.81e-01  
 20  +3.2438e-01  +3.2451e-01  1.29e-04  5.77e-08  9.87e-06  1.58e-08  2.46e-07  9.68e-01  
 21  +3.2433e-01  +3.2434e-01  1.31e-06  5.85e-10  1.00e-07  1.60e-10  2.50e-09  9.90e-01  
 22  +3.2433e-01  +3.2433e-01  1.31e-08  5.88e-12  1.01e-09  1.61e-12  2.51e-11  9.90e-01  
 23  +3.2433e-01  +3.2433e-01  1.33e-10  5.95e-14  1.02e-11  1.63e-14  2.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 340.9977ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:19 PM: Optimal value: 3.243e-01
(CVXPY) Oct 06 04:27:19 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:27:19 PM: Solver (including time spent in interface) took 3.438e-01 seconds
Iteration: 65, Objective: 0.3243
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:19 PM: Your problem has 3099 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:19 PM: Finished problem compilation (took 6.247e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3099
  constraints   = 5599
  nnz(P)        = 0
  nnz(A)        = 53047
  cones (total) = 1
    : Nonnegative = 1,  numel = 5599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.6992e-01  +5.4989e+02  5.49e+02  4.51e-01  5.35e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2409e-01  +6.0085e+01  5.96e+01  1.64e-01  2.44e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.0987e-01  +1.4962e+01  1.45e+01  8.01e-02  1.31e+01  1.67e-03  1.63e-01  6.17e-01  
  4  +5.0002e-01  +2.0629e+00  1.56e+00  1.56e-02  2.58e+00  1.08e-03  1.37e-01  6.40e-01  
  5  +4.9829e-01  +1.5257e+00  1.03e+00  7.75e-03  1.33e+00  2.21e-03  2.94e-02  8.14e-01  
  6  +4.7900e-01  +1.5023e+00  1.02e+00  1.20e-03  2.13e-01  1.85e-02  3.11e-03  8.98e-01  
  7  +4.7294e-01  +1.4627e+00  9.90e-01  9.25e-04  1.65e-01  2.10e-02  2.39e-03  2.74e-01  
  8  +4.7632e-01  +1.4575e+00  9.81e-01  9.07e-04  1.62e-01  1.50e-02  2.31e-03  3.02e-01  
  9  +4.6304e-01  +1.3830e+00  9.20e-01  5.86e-04  1.04e-01  1.76e-02  1.50e-03  4.36e-01  
 10  +4.5809e-01  +1.1683e+00  7.10e-01  4.78e-04  8.47e-02  2.88e-03  1.25e-03  6.33e-01  
 11  +4.3042e-01  +9.5233e-01  5.22e-01  2.90e-04  5.09e-02  1.67e-03  8.01e-04  5.02e-01  
 12  +3.8944e-01  +6.5895e-01  2.70e-01  1.37e-04  2.36e-02  6.28e-04  4.22e-04  5.17e-01  
 13  +3.6816e-01  +5.4655e-01  1.78e-01  8.74e-05  1.50e-02  2.87e-04  2.92e-04  5.04e-01  
 14  +3.5458e-01  +4.7448e-01  1.20e-01  5.75e-05  9.85e-03  1.74e-04  2.03e-04  3.64e-01  
 15  +3.4016e-01  +3.9889e-01  5.87e-02  2.71e-05  4.63e-03  2.03e-05  1.03e-04  9.52e-01  
 16  +3.3060e-01  +3.5353e-01  2.29e-02  1.04e-05  1.78e-03  6.64e-06  4.21e-05  6.86e-01  
 17  +3.2651e-01  +3.3470e-01  8.19e-03  3.68e-06  6.29e-04  1.51e-06  1.55e-05  8.32e-01  
 18  +3.2452e-01  +3.2639e-01  1.87e-03  8.33e-07  1.42e-04  2.82e-07  3.61e-06  8.43e-01  
 19  +3.2394e-01  +3.2406e-01  1.17e-04  5.17e-08  8.84e-06  1.48e-08  2.27e-07  9.58e-01  
 20  +3.2390e-01  +3.2390e-01  1.19e-06  5.26e-10  8.99e-08  1.51e-10  2.31e-09  9.90e-01  
 21  +3.2390e-01  +3.2390e-01  1.19e-08  5.27e-12  9.02e-10  1.51e-12  2.32e-11  9.90e-01  
 22  +3.2390e-01  +3.2390e-01  1.20e-10  5.34e-14  9.12e-12  1.54e-14  2.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 353.4774ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:19 PM: Optimal value: 3.239e-01
(CVXPY) Oct 06 04:27:19 PM: Compilation took 6.247e-02 seconds
(CVXPY) Oct 06 04:27:19 PM: Solver (including time spent in interface) took 3.594e-01 seconds
Iteration: 66, Objective: 0.3239
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:19 PM: Your problem has 3109 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:20 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3109
  constraints   = 5609
  nnz(P)        = 0
  nnz(A)        = 53257
  cones (total) = 1
    : Nonnegative = 1,  numel = 5609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.6992e-01  +5.4984e+02  5.49e+02  4.51e-01  5.34e+01  3.78e-03  5.83e-01  5.78e-01  
  2  +5.2407e-01  +6.0093e+01  5.96e+01  1.64e-01  2.44e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.0994e-01  +1.5178e+01  1.47e+01  8.07e-02  1.32e+01  1.77e-03  1.64e-01  6.09e-01  
  4  +5.0001e-01  +2.0558e+00  1.56e+00  1.55e-02  2.57e+00  1.08e-03  1.36e-01  6.61e-01  
  5  +4.9815e-01  +1.5038e+00  1.01e+00  7.36e-03  1.27e+00  2.32e-03  2.72e-02  8.31e-01  
  6  +4.7836e-01  +1.4784e+00  1.00e+00  1.14e-03  2.03e-01  1.90e-02  2.96e-03  8.94e-01  
  7  +4.7320e-01  +1.4450e+00  9.72e-01  9.17e-04  1.63e-01  2.09e-02  2.37e-03  2.39e-01  
  8  +4.7581e-01  +1.4435e+00  9.68e-01  9.03e-04  1.61e-01  1.59e-02  2.31e-03  2.57e-01  
  9  +4.6165e-01  +1.3706e+00  9.09e-01  5.76e-04  1.03e-01  1.92e-02  1.48e-03  4.33e-01  
 10  +4.5832e-01  +1.1652e+00  7.07e-01  4.84e-04  8.56e-02  3.16e-03  1.27e-03  6.17e-01  
 11  +4.3453e-01  +9.8467e-01  5.50e-01  3.15e-04  5.53e-02  2.02e-03  8.65e-04  4.53e-01  
 12  +3.8869e-01  +6.5058e-01  2.62e-01  1.32e-04  2.28e-02  6.38e-04  4.07e-04  5.91e-01  
 13  +3.7037e-01  +5.5805e-01  1.88e-01  9.20e-05  1.58e-02  3.27e-04  3.04e-04  4.57e-01  
 14  +3.5395e-01  +4.7089e-01  1.17e-01  5.60e-05  9.58e-03  1.80e-04  1.99e-04  4.10e-01  
 15  +3.4054e-01  +4.0107e-01  6.05e-02  2.80e-05  4.78e-03  2.40e-05  1.06e-04  9.37e-01  
 16  +3.3099e-01  +3.5574e-01  2.47e-02  1.13e-05  1.93e-03  8.52e-06  4.56e-05  6.44e-01  
 17  +3.2703e-01  +3.3742e-01  1.04e-02  4.68e-06  7.99e-04  2.49e-06  1.96e-05  7.53e-01  
 18  +3.2599e-01  +3.3285e-01  6.86e-03  3.08e-06  5.26e-04  1.53e-06  1.31e-05  4.09e-01  
 19  +3.2474e-01  +3.2743e-01  2.68e-03  1.20e-06  2.05e-04  4.61e-07  5.17e-06  7.55e-01  
 20  +3.2408e-01  +3.2471e-01  6.28e-04  2.80e-07  4.78e-05  7.79e-08  1.22e-06  8.93e-01  
 21  +3.2387e-01  +3.2388e-01  1.33e-05  5.95e-09  1.02e-06  1.62e-09  2.59e-08  9.80e-01  
 22  +3.2387e-01  +3.2387e-01  1.35e-07  6.00e-11  1.03e-08  1.63e-11  2.61e-10  9.90e-01  
 23  +3.2387e-01  +3.2387e-01  1.37e-09  6.12e-13  1.05e-10  1.67e-13  2.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 379.2561ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:20 PM: Optimal value: 3.239e-01
(CVXPY) Oct 06 04:27:20 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:27:20 PM: Solver (including time spent in interface) took 3.912e-01 seconds
Iteration: 67, Objective: 0.3239
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:20 PM: Your problem has 3119 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:20 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:20 PM: Invoking solver CLARABEL  to obtain a solution.
   dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3119
  constraints   = 5619
  nnz(P)        = 0
  nnz(A)        = 53603
  cones (total) = 1
    : Nonnegative = 1,  numel = 5619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.6986e-01  +5.4985e+02  5.49e+02  4.51e-01  5.34e+01  3.78e-03  5.83e-01  5.78e-01  
  2  +5.2401e-01  +6.0127e+01  5.96e+01  1.64e-01  2.43e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.1012e-01  +1.5660e+01  1.52e+01  8.21e-02  1.34e+01  1.98e-03  1.66e-01  5.94e-01  
  4  +4.9999e-01  +2.0106e+00  1.51e+00  1.51e-02  2.49e+00  1.06e-03  1.34e-01  7.17e-01  
  5  +4.9786e-01  +1.4857e+00  9.88e-01  6.88e-03  1.19e+00  2.54e-03  2.44e-02  8.52e-01  
  6  +4.7656e-01  +1.4525e+00  9.76e-01  1.05e-03  1.87e-01  2.03e-02  2.73e-03  8.91e-01  
  7  +4.7190e-01  +1.4226e+00  9.51e-01  8.73e-04  1.56e-01  2.18e-02  2.26e-03  2.14e-01  
  8  +4.7423e-01  +1.4289e+00  9.55e-01  7.72e-04  1.38e-01  1.41e-02  1.95e-03  5.34e-01  
  9  +4.6388e-01  +1.3565e+00  8.93e-01  5.53e-04  9.86e-02  1.46e-02  1.40e-03  3.80e-01  
 10  +4.4880e-01  +1.1159e+00  6.67e-01  4.03e-04  7.12e-02  4.26e-03  1.07e-03  5.69e-01  
 11  +4.0276e-01  +7.4151e-01  3.39e-01  1.70e-04  2.96e-02  1.42e-03  4.99e-04  6.26e-01  
 12  +3.8471e-01  +6.4001e-01  2.55e-01  1.27e-04  2.18e-02  8.95e-04  3.94e-04  3.10e-01  
 13  +3.6559e-01  +5.3672e-01  1.71e-01  8.31e-05  1.43e-02  4.33e-04  2.79e-04  4.77e-01  
 14  +3.5503e-01  +4.8024e-01  1.25e-01  5.99e-05  1.02e-02  2.96e-04  2.11e-04  2.89e-01  
 15  +3.4026e-01  +4.0176e-01  6.15e-02  2.86e-05  4.87e-03  6.65e-05  1.08e-04  8.04e-01  
 16  +3.3097e-01  +3.5660e-01  2.56e-02  1.17e-05  2.00e-03  2.21e-05  4.70e-05  6.67e-01  
 17  +3.2705e-01  +3.3832e-01  1.13e-02  5.10e-06  8.70e-04  8.07e-06  2.11e-05  6.39e-01  
 18  +3.2547e-01  +3.3101e-01  5.54e-03  2.50e-06  4.26e-04  2.93e-06  1.05e-05  6.57e-01  
 19  +3.2434e-01  +3.2611e-01  1.76e-03  7.90e-07  1.35e-04  4.54e-07  3.35e-06  8.80e-01  
 20  +3.2387e-01  +3.2421e-01  3.40e-04  1.52e-07  2.61e-05  7.37e-08  6.48e-07  8.54e-01  
 21  +3.2375e-01  +3.2376e-01  5.36e-06  2.40e-09  4.10e-07  1.15e-09  1.02e-08  9.84e-01  
 22  +3.2375e-01  +3.2375e-01  5.40e-08  2.41e-11  4.13e-09  1.16e-11  1.03e-10  9.90e-01  
 23  +3.2375e-01  +3.2375e-01  5.42e-10  2.42e-13  4.14e-11  1.17e-13  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 378.4653ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:21 PM: Optimal value: 3.238e-01
(CVXPY) Oct 06 04:27:21 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:27:21 PM: Solver (including time spent in interface) took 3.906e-01 seconds
Iteration: 68, Objective: 0.3238
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:27:21 PM: Your problem has 3126 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:27:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:27:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:27:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:27:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:27:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:27:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:27:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:27:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:27:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:27:21 PM: Finished problem compilation (took 6.248e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 3126
  constraints   = 5626
  nnz(P)        = 0
  nnz(A)        = 53699
  cones (total) = 1
    : Nonnegative = 1,  numel = 5626

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5018e+03  2.50e+03  9.81e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.6969e-01  +5.4994e+02  5.49e+02  4.51e-01  5.33e+01  3.78e-03  5.83e-01  5.77e-01  
  2  +5.2397e-01  +6.0229e+01  5.97e+01  1.64e-01  2.43e+01  1.89e-02  2.72e-01  9.90e-01  
  3  +5.1031e-01  +1.6169e+01  1.57e+01  8.36e-02  1.35e+01  2.19e-03  1.68e-01  5.79e-01  
  4  +5.0001e-01  +2.0181e+00  1.52e+00  1.52e-02  2.51e+00  1.05e-03  1.34e-01  7.52e-01  
  5  +4.9798e-01  +1.4928e+00  9.95e-01  7.07e-03  1.22e+00  2.42e-03  2.54e-02  8.36e-01  
  6  +4.7711e-01  +1.4595e+00  9.82e-01  1.07e-03  1.91e-01  1.97e-02  2.78e-03  8.93e-01  
  7  +4.7177e-01  +1.4231e+00  9.51e-01  8.66e-04  1.54e-01  2.13e-02  2.24e-03  2.44e-01  
  8  +4.7293e-01  +1.4282e+00  9.55e-01  7.39e-04  1.32e-01  1.40e-02  1.87e-03  5.64e-01  
  9  +4.6277e-01  +1.3433e+00  8.81e-01  5.42e-04  9.65e-02  1.38e-02  1.38e-03  3.59e-01  
 10  +4.4519e-01  +1.0931e+00  6.48e-01  3.82e-04  6.73e-02  4.37e-03  1.02e-03  5.61e-01  
 11  +4.0013e-01  +7.2790e-01  3.28e-01  1.66e-04  2.87e-02  1.37e-03  4.91e-04  6.13e-01  
 12  +3.8149e-01  +6.2240e-01  2.41e-01  1.20e-04  2.06e-02  8.42e-04  3.78e-04  3.21e-01  
 13  +3.6085e-01  +5.0968e-01  1.49e-01  7.22e-05  1.24e-02  4.04e-04  2.48e-04  4.71e-01  
 14  +3.5374e-01  +4.7247e-01  1.19e-01  5.69e-05  9.72e-03  3.06e-04  2.01e-04  2.26e-01  
 15  +3.3990e-01  +4.0020e-01  6.03e-02  2.81e-05  4.79e-03  9.93e-05  1.07e-04  6.84e-01  
 16  +3.3082e-01  +3.5596e-01  2.51e-02  1.15e-05  1.96e-03  3.31e-05  4.62e-05  6.64e-01  
 17  +3.2683e-01  +3.3735e-01  1.05e-02  4.76e-06  8.12e-04  1.11e-05  1.98e-05  6.67e-01  
 18  +3.2531e-01  +3.3025e-01  4.94e-03  2.23e-06  3.80e-04  3.32e-06  9.38e-06  7.18e-01  
 19  +3.2421e-01  +3.2559e-01  1.37e-03  6.15e-07  1.05e-04  4.83e-07  2.61e-06  8.77e-01  
 20  +3.2382e-01  +3.2401e-01  1.97e-04  8.80e-08  1.51e-05  5.51e-08  3.75e-07  8.96e-01  
 21  +3.2375e-01  +3.2375e-01  2.22e-06  9.92e-10  1.70e-07  6.20e-10  4.23e-09  9.89e-01  
 22  +3.2375e-01  +3.2375e-01  2.23e-08  9.95e-12  1.70e-09  6.22e-12  4.25e-11  9.90e-01  
 23  +3.2375e-01  +3.2375e-01  2.24e-10  1.00e-13  1.71e-11  6.26e-14  4.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 399.7435ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:27:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:27:21 PM: Optimal value: 3.238e-01
(CVXPY) Oct 06 04:27:21 PM: Compilation took 6.248e-02 seconds
(CVXPY) Oct 06 04:27:21 PM: Solver (including time spent in interface) took 4.069e-01 seconds
FULL MODEL:
  Accruacy: 0.6258
  Our objective: 0.25160000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.152)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.0072)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0064)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.0032)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.0056)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.008)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 42.58473610877991
Best over terms:
  Our final objective: 0.15199999999999997
    Its accruacy: 0.576
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15199999999999997
  Highest accruacy: 0.576
0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 136 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 137 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 138 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 139 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 140 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 141 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 142 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 143 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 144 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 145 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 146 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 147 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 148 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 149 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 150 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 151 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 152 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 153 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 154 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 155 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 156 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 157 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 158 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 159 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 160 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 161 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 162 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 163 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 164 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 165 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 166 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 167 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 168 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 169 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 170 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 171 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 172 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 173 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 174 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 175 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 176 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 177 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 178 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 179 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 180 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 181 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 182 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 183 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 184 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 185 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 186 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 187 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 188 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 189 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 190 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 191 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 192 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 193 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 194 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 195 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 196 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 197 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 198 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 199 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 200 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 201 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 202 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 203 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 204 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 205 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 206 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 207 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

