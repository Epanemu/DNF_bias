Command:
python test_script.py -s constant_subclass -d 4 -n 50 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.48
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:56 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:56 PM: Finished problem compilation (took 4.175e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9059e-01  +2.6088e+01  2.56e+01  8.14e-01  5.43e+00  1.00e+00  1.08e+00   ------   
  1  +5.9140e-01  +5.2616e+00  4.67e+00  2.80e-01  2.76e+00  4.04e-03  5.08e-01  6.75e-01  
  2  +5.0370e-01  +1.0886e+00  5.85e-01  5.50e-02  6.29e-01  1.07e-02  1.50e-01  9.06e-01  
  3  +4.3643e-01  +8.6949e-01  4.33e-01  2.00e-02  2.37e-01  1.20e-02  6.37e-02  6.58e-01  
  4  +3.7596e-01  +5.0440e-01  1.28e-01  5.64e-03  6.52e-02  2.16e-03  2.32e-02  6.84e-01  
  5  +3.4400e-01  +3.5798e-01  1.40e-02  6.01e-04  6.88e-03  1.86e-04  3.06e-03  8.95e-01  
  6  +3.4014e-01  +3.4028e-01  1.40e-04  6.03e-06  6.89e-05  1.81e-06  3.15e-05  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  1.40e-06  6.03e-08  6.89e-07  1.81e-08  3.15e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.40e-08  6.03e-10  6.89e-09  1.81e-10  3.15e-09  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.40e-10  6.03e-12  6.89e-11  1.81e-12  3.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 407.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:56 PM: Optimal value: 3.401e-01
(CVXPY) Oct 06 03:48:56 PM: Compilation took 4.175e-02 seconds
(CVXPY) Oct 06 03:48:56 PM: Solver (including time spent in interface) took 5.255e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:56 PM: Your problem has 41 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:56 PM: Finished problem compilation (took 7.315e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 41
  constraints   = 66
  nnz(P)        = 0
  nnz(A)        = 237
  cones (total) = 1
    : Nonnegative = 1,  numel = 66

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7909e-01  +2.6580e+01  2.61e+01  8.28e-01  5.68e+00  1.00e+00  1.13e+00   ------   
  1  +5.4757e-01  +5.3703e+00  4.82e+00  3.00e-01  2.86e+00  3.98e-03  5.44e-01  6.65e-01  
  2  +4.5056e-01  +1.3182e+00  8.68e-01  6.63e-02  7.72e-01  1.24e-02  1.82e-01  8.36e-01  
  3  +3.4852e-01  +6.6680e-01  3.18e-01  1.66e-02  1.93e-01  4.49e-03  5.84e-02  8.23e-01  
  4  +3.0637e-01  +3.3958e-01  3.32e-02  1.88e-03  2.13e-02  3.37e-04  8.41e-03  8.88e-01  
  5  +3.0042e-01  +3.0155e-01  1.13e-03  6.49e-05  7.29e-04  1.05e-05  3.08e-04  9.65e-01  
  6  +3.0021e-01  +3.0027e-01  5.53e-05  3.23e-06  3.61e-05  2.98e-07  1.60e-05  9.48e-01  
  7  +3.0020e-01  +3.0020e-01  6.48e-07  3.81e-08  4.25e-07  3.40e-09  1.98e-07  9.89e-01  
  8  +3.0020e-01  +3.0020e-01  6.49e-09  3.82e-10  4.26e-09  3.40e-11  1.99e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 360.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:56 PM: Optimal value: 3.002e-01
(CVXPY) Oct 06 03:48:56 PM: Compilation took 7.315e-03 seconds
(CVXPY) Oct 06 03:48:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:56 PM: Your problem has 42 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:56 PM: Finished problem compilation (took 5.384e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 42
  constraints   = 67
  nnz(P)        = 0
  nnz(A)        = 248
  cones (total) = 1
    : Nonnegative = 1,  numel = 67

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7892e-01  +2.6577e+01  2.61e+01  8.29e-01  5.77e+00  1.00e+00  1.12e+00   ------   
  1  +5.4454e-01  +5.4251e+00  4.88e+00  3.08e-01  2.97e+00  3.94e-03  5.55e-01  6.57e-01  
  2  +4.4876e-01  +1.2988e+00  8.50e-01  6.56e-02  7.76e-01  1.33e-02  1.80e-01  8.59e-01  
  3  +3.6221e-01  +7.9855e-01  4.36e-01  2.35e-02  2.80e-01  6.80e-03  7.92e-02  6.81e-01  
  4  +3.0402e-01  +5.1085e-01  2.07e-01  9.89e-03  1.16e-01  2.51e-03  4.04e-02  6.89e-01  
  5  +2.6706e-01  +2.9345e-01  2.64e-02  1.26e-03  1.46e-02  2.10e-04  6.32e-03  8.58e-01  
  6  +2.6040e-01  +2.6078e-01  3.80e-04  1.82e-05  2.10e-04  2.63e-06  9.66e-05  9.85e-01  
  7  +2.6030e-01  +2.6031e-01  1.11e-05  5.37e-07  6.17e-06  2.69e-08  3.04e-06  9.69e-01  
  8  +2.6030e-01  +2.6030e-01  1.10e-07  5.36e-09  6.16e-08  2.73e-10  3.08e-08  9.90e-01  
  9  +2.6030e-01  +2.6030e-01  1.10e-09  5.36e-11  6.16e-10  2.73e-12  3.08e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 390.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:56 PM: Optimal value: 2.603e-01
(CVXPY) Oct 06 03:48:56 PM: Compilation took 5.384e-03 seconds
(CVXPY) Oct 06 03:48:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:56 PM: Your problem has 49 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:56 PM: Finished problem compilation (took 2.088e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 49
  constraints   = 74
  nnz(P)        = 0
  nnz(A)        = 276
  cones (total) = 1
    : Nonnegative = 1,  numel = 74

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7750e-01  +2.6615e+01  2.61e+01  8.36e-01  5.65e+00  1.00e+00  1.13e+00   ------   
  1  +5.3102e-01  +5.5127e+00  4.98e+00  3.24e-01  2.94e+00  3.90e-03  5.72e-01  6.45e-01  
  2  +4.3090e-01  +1.2776e+00  8.47e-01  6.47e-02  7.43e-01  1.49e-02  1.79e-01  8.85e-01  
  3  +3.3558e-01  +7.0160e-01  3.66e-01  1.96e-02  2.27e-01  5.71e-03  6.74e-02  7.48e-01  
  4  +2.8118e-01  +3.7625e-01  9.51e-02  5.02e-03  5.68e-02  1.18e-03  2.04e-02  7.58e-01  
  5  +2.6133e-01  +2.6534e-01  4.01e-03  2.16e-04  2.42e-03  3.40e-05  9.76e-04  9.64e-01  
  6  +2.6044e-01  +2.6093e-01  4.88e-04  2.66e-05  2.96e-04  3.40e-06  1.26e-04  8.76e-01  
  7  +2.6031e-01  +2.6035e-01  3.88e-05  2.14e-06  2.37e-05  2.16e-07  1.11e-05  9.39e-01  
  8  +2.6030e-01  +2.6030e-01  4.47e-07  2.47e-08  2.73e-07  2.35e-09  1.31e-07  9.89e-01  
  9  +2.6030e-01  +2.6030e-01  4.48e-09  2.47e-10  2.74e-09  2.36e-11  1.31e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 442.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:56 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:56 PM: Optimal value: 2.603e-01
(CVXPY) Oct 06 03:48:56 PM: Compilation took 2.088e-03 seconds
(CVXPY) Oct 06 03:48:56 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.74
  Our objective: 0.48

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x3 = 0)                       <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0)            <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.2849297523498535
Best over terms:
  Our final objective: 0.19999999999999998
    Its accruacy: 0.6
    Its hamming distance: 3
  Shortest hamming distance: 1
    Its our objective: 0.07999999999999996
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

