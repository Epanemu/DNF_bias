Command:
python test_script.py -s constant_subclass -d 7 -n 50000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.156
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 7.

Computed total variation: 0.15808
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:30 PM: Your problem has 25015 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:30 PM: Finished problem compilation (took 2.287e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25015
  constraints   = 50015
  nnz(P)        = 0
  nnz(A)        = 250015
  cones (total) = 1
    : Nonnegative = 1,  numel = 50015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.36e+02  1.00e+00  1.00e+00   ------   
  1  +5.8817e-01  +5.2537e+03  5.25e+03  4.08e-01  1.48e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3830e-01  +6.5384e+02  6.53e+02  1.62e-01  7.53e+01  1.31e-02  2.55e-01  8.63e-01  
  3  +5.1022e-01  +1.6868e+02  1.68e+02  1.43e-01  6.67e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0103e-01  +1.3430e+01  1.29e+01  3.68e-02  1.68e+01  4.21e-06  1.94e-01  4.55e-01  
  5  +5.0000e-01  +1.1192e+00  6.19e-01  1.86e-03  8.78e-01  2.90e-05  1.82e-01  4.15e-01  
  6  +4.9999e-01  +6.2990e-01  1.30e-01  3.88e-04  1.84e-01  1.08e-05  3.11e-02  8.44e-01  
  7  +4.9874e-01  +1.1289e+00  6.30e-01  5.96e-04  2.83e-01  7.10e-04  2.07e-03  9.74e-01  
  8  +4.8423e-01  +1.0084e+00  5.24e-01  4.60e-05  2.19e-02  7.98e-03  1.43e-04  9.31e-01  
  9  +4.7498e-01  +5.9701e-01  1.22e-01  6.69e-06  3.18e-03  2.55e-03  2.09e-05  9.62e-01  
 10  +4.5978e-01  +4.8196e-01  2.22e-02  1.15e-06  5.44e-04  2.53e-05  3.90e-06  8.92e-01  
 11  +4.5414e-01  +4.5734e-01  3.20e-03  1.47e-07  6.96e-05  2.61e-06  5.59e-07  8.92e-01  
 12  +4.5299e-01  +4.5308e-01  9.15e-05  3.82e-09  1.81e-06  5.13e-08  1.60e-08  9.80e-01  
 13  +4.5296e-01  +4.5296e-01  9.16e-07  3.81e-11  1.81e-08  5.13e-10  1.60e-10  9.90e-01  
 14  +4.5296e-01  +4.5296e-01  9.22e-09  3.84e-13  1.82e-10  6.91e-12  2.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 527.1537ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:31 PM: Optimal value: 4.530e-01
(CVXPY) Oct 06 04:05:31 PM: Compilation took 2.287e-01 seconds
(CVXPY) Oct 06 04:05:31 PM: Solver (including time spent in interface) took 5.772e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:31 PM: Your problem has 25025 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:31 PM: Finished problem compilation (took 2.126e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25025
  constraints   = 50025
  nnz(P)        = 0
  nnz(A)        = 294211
  cones (total) = 1
    : Nonnegative = 1,  numel = 50025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.47e+02  1.00e+00  1.00e+00   ------   
  1  +5.8816e-01  +5.2538e+03  5.25e+03  4.08e-01  1.55e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3826e-01  +6.5349e+02  6.53e+02  1.62e-01  7.86e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6848e+02  1.68e+02  1.43e-01  6.95e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0101e-01  +1.3253e+01  1.28e+01  3.63e-02  1.73e+01  4.24e-06  1.92e-01  4.63e-01  
  5  +5.0003e-01  +1.5707e+00  1.07e+00  3.22e-03  1.58e+00  3.18e-05  1.83e-01  3.18e-01  
  6  +5.0000e-01  +6.2868e-01  1.29e-01  3.84e-04  1.90e-01  4.37e-06  2.64e-02  9.71e-01  
  7  +5.0000e-01  +6.6884e-01  1.69e-01  5.02e-04  2.48e-01  7.69e-06  1.77e-02  5.32e-01  
  8  +4.9998e-01  +6.7593e-01  1.76e-01  5.09e-04  2.52e-01  2.08e-05  6.28e-03  6.66e-01  
  9  +4.9977e-01  +6.9009e-01  1.90e-01  2.83e-04  1.41e-01  1.32e-04  9.78e-04  9.02e-01  
 10  +4.9535e-01  +6.7922e-01  1.84e-01  1.84e-05  9.21e-03  2.44e-03  5.00e-05  9.49e-01  
 11  +4.9097e-01  +6.6718e-01  1.76e-01  1.02e-05  5.11e-03  3.79e-03  2.75e-05  4.92e-01  
 12  +4.8914e-01  +6.6205e-01  1.73e-01  8.76e-06  4.38e-03  3.75e-03  2.36e-05  2.37e-01  
 13  +4.8493e-01  +6.4379e-01  1.59e-01  7.06e-06  3.52e-03  2.58e-03  1.91e-05  4.46e-01  
 14  +4.7916e-01  +6.1718e-01  1.38e-01  6.12e-06  3.05e-03  2.50e-05  1.74e-05  7.84e-01  
 15  +4.5553e-01  +5.2618e-01  7.06e-02  2.60e-06  1.29e-03  6.07e-06  7.71e-06  7.54e-01  
 16  +4.4130e-01  +4.8462e-01  4.33e-02  1.45e-06  7.17e-04  3.31e-06  4.36e-06  5.08e-01  
 17  +4.2318e-01  +4.2535e-01  2.16e-03  6.86e-08  3.40e-05  3.32e-08  2.17e-07  9.61e-01  
 18  +4.2211e-01  +4.2213e-01  2.20e-05  6.95e-10  3.44e-07  3.33e-10  2.21e-09  9.90e-01  
 19  +4.2210e-01  +4.2210e-01  2.20e-07  6.96e-12  3.44e-09  3.47e-12  2.30e-11  9.90e-01  
 20  +4.2210e-01  +4.2210e-01  2.20e-09  6.98e-14  3.45e-11  3.61e-14  2.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 864.2353ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:32 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 04:05:32 PM: Compilation took 2.126e-01 seconds
(CVXPY) Oct 06 04:05:32 PM: Solver (including time spent in interface) took 9.272e-01 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:33 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:33 PM: Finished problem compilation (took 2.052e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 294835
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.93e-01  2.47e+02  1.00e+00  1.00e+00   ------   
  1  +5.8815e-01  +5.2539e+03  5.25e+03  4.08e-01  1.55e+02  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3825e-01  +6.5342e+02  6.53e+02  1.62e-01  7.86e+01  1.31e-02  2.55e-01  8.64e-01  
  3  +5.1020e-01  +1.6847e+02  1.68e+02  1.43e-01  6.95e+01  3.48e-05  2.47e-01  1.53e-01  
  4  +5.0101e-01  +1.3254e+01  1.28e+01  3.63e-02  1.73e+01  4.24e-06  1.92e-01  4.63e-01  
  5  +5.0003e-01  +1.5749e+00  1.07e+00  3.23e-03  1.59e+00  3.19e-05  1.83e-01  3.18e-01  
  6  +5.0001e-01  +7.4860e-01  2.49e-01  7.42e-04  3.67e-01  7.93e-06  4.96e-02  8.21e-01  
  7  +4.9999e-01  +7.5405e-01  2.54e-01  7.56e-04  3.74e-01  1.41e-05  2.19e-02  6.41e-01  
  8  +4.9972e-01  +7.3021e-01  2.30e-01  3.86e-04  1.92e-01  1.61e-04  1.41e-03  9.52e-01  
  9  +4.9604e-01  +7.2000e-01  2.24e-01  3.73e-05  1.86e-02  2.09e-03  1.03e-04  9.27e-01  
 10  +4.9467e-01  +7.1318e-01  2.19e-01  2.59e-05  1.29e-02  2.61e-03  7.07e-05  3.94e-01  
 11  +4.9212e-01  +6.8651e-01  1.94e-01  1.27e-05  6.33e-03  2.74e-03  3.42e-05  8.41e-01  
 12  +4.8764e-01  +6.6919e-01  1.82e-01  8.91e-06  4.45e-03  3.03e-03  2.41e-05  3.64e-01  
 13  +4.8431e-01  +6.5429e-01  1.70e-01  7.68e-06  3.83e-03  2.69e-03  2.09e-05  2.11e-01  
 14  +4.8390e-01  +6.5219e-01  1.68e-01  7.64e-06  3.81e-03  2.56e-03  2.09e-05  2.54e-02  
 15  +4.6357e-01  +5.6681e-01  1.03e-01  3.63e-06  1.80e-03  1.12e-03  1.03e-05  6.89e-01  
 16  +4.4544e-01  +5.0108e-01  5.56e-02  1.92e-06  9.52e-04  1.10e-05  5.76e-06  8.39e-01  
 17  +4.2822e-01  +4.4334e-01  1.51e-02  4.90e-07  2.43e-04  2.45e-06  1.54e-06  7.46e-01  
 18  +4.2169e-01  +4.2197e-01  2.82e-04  8.95e-09  4.43e-06  3.39e-08  2.86e-08  9.82e-01  
 19  +4.2156e-01  +4.2156e-01  2.82e-06  8.95e-11  4.43e-08  3.39e-10  2.86e-10  9.90e-01  
 20  +4.2156e-01  +4.2156e-01  2.82e-08  8.95e-13  4.43e-10  3.52e-12  2.96e-12  9.90e-01  
 21  +4.2156e-01  +4.2156e-01  2.82e-10  8.91e-15  4.44e-12  3.65e-14  3.07e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 858.8948ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:34 PM: Optimal value: 4.216e-01
(CVXPY) Oct 06 04:05:34 PM: Compilation took 2.052e-01 seconds
(CVXPY) Oct 06 04:05:34 PM: Solver (including time spent in interface) took 9.145e-01 seconds
FULL MODEL:
  Accruacy: 0.57864
  Our objective: 0.15727999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.156)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.00128)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 12.164701223373413
Best over terms:
  Our final objective: 0.15600000000000006
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15600000000000006
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

