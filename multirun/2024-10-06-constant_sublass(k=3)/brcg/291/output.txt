Command:
python test_script.py -s constant_subclass -d 8 -n 100 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.88
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:26 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:26 PM: Finished problem compilation (took 3.495e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9768e-01  +5.0961e+01  5.05e+01  8.71e-01  9.93e+00  1.00e+00  1.04e+00   ------   
  1  +5.7877e-01  +1.1089e+01  1.05e+01  3.69e-01  5.91e+00  3.80e-03  5.79e-01  6.00e-01  
  2  +5.1611e-01  +1.7039e+00  1.19e+00  8.96e-02  1.77e+00  1.70e-02  2.29e-01  9.90e-01  
  3  +4.9590e-01  +7.8212e-01  2.86e-01  1.88e-02  3.90e-01  6.82e-03  5.81e-02  7.87e-01  
  4  +4.7103e-01  +6.8553e-01  2.14e-01  7.15e-03  1.51e-01  8.41e-03  2.31e-02  6.49e-01  
  5  +4.5051e-01  +5.2562e-01  7.51e-02  2.49e-03  5.17e-02  8.28e-04  9.24e-03  7.66e-01  
  6  +4.3872e-01  +4.5467e-01  1.60e-02  4.97e-04  1.03e-02  1.40e-04  1.97e-03  8.12e-01  
  7  +4.3533e-01  +4.3629e-01  9.58e-04  2.95e-05  6.10e-04  6.50e-06  1.21e-04  9.49e-01  
  8  +4.3513e-01  +4.3514e-01  9.87e-06  3.05e-07  6.28e-06  6.67e-08  1.25e-06  9.90e-01  
  9  +4.3513e-01  +4.3513e-01  9.87e-08  3.05e-09  6.28e-08  6.67e-10  1.25e-08  9.90e-01  
 10  +4.3513e-01  +4.3513e-01  9.87e-10  3.05e-11  6.28e-10  6.67e-12  1.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 856.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:26 PM: Optimal value: 4.351e-01
(CVXPY) Oct 06 04:07:26 PM: Compilation took 3.495e-02 seconds
(CVXPY) Oct 06 04:07:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4351
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:26 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:26 PM: Finished problem compilation (took 1.097e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 690
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9476e-01  +5.1365e+01  5.09e+01  8.77e-01  1.02e+01  1.00e+00  1.05e+00   ------   
  1  +5.6201e-01  +1.1187e+01  1.06e+01  3.81e-01  5.95e+00  3.80e-03  5.91e-01  5.98e-01  
  2  +4.9925e-01  +1.8255e+00  1.33e+00  9.03e-02  1.83e+00  1.91e-02  2.29e-01  9.90e-01  
  3  +4.5282e-01  +1.0639e+00  6.11e-01  2.47e-02  5.27e-01  1.46e-02  7.26e-02  7.58e-01  
  4  +4.0804e-01  +6.2890e-01  2.21e-01  6.96e-03  1.47e-01  4.87e-03  2.34e-02  7.39e-01  
  5  +3.8877e-01  +5.1526e-01  1.26e-01  3.49e-03  7.34e-02  2.38e-03  1.28e-02  5.62e-01  
  6  +3.7353e-01  +4.3891e-01  6.54e-02  1.52e-03  3.26e-02  1.26e-03  5.82e-03  6.19e-01  
  7  +3.5847e-01  +3.8186e-01  2.34e-02  5.00e-04  1.10e-02  1.71e-04  2.01e-03  8.36e-01  
  8  +3.5076e-01  +3.5209e-01  1.33e-03  2.69e-05  5.95e-04  7.63e-06  1.11e-04  9.60e-01  
  9  +3.5031e-01  +3.5032e-01  1.63e-05  3.30e-07  7.27e-06  7.63e-08  1.37e-06  9.88e-01  
 10  +3.5030e-01  +3.5030e-01  1.65e-07  3.34e-09  7.36e-08  7.72e-10  1.39e-08  9.90e-01  
 11  +3.5030e-01  +3.5030e-01  1.65e-09  3.34e-11  7.36e-10  7.72e-12  1.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0927ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:26 PM: Optimal value: 3.503e-01
(CVXPY) Oct 06 04:07:26 PM: Compilation took 1.097e-02 seconds
(CVXPY) Oct 06 04:07:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3503
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:26 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:26 PM: Finished problem compilation (took 1.367e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 767
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9160e-01  +5.1698e+01  5.12e+01  8.82e-01  1.01e+01  1.00e+00  1.06e+00   ------   
  1  +5.3500e-01  +1.1310e+01  1.08e+01  3.86e-01  5.82e+00  3.83e-03  5.94e-01  5.95e-01  
  2  +4.6996e-01  +2.0793e+00  1.61e+00  9.21e-02  1.85e+00  2.18e-02  2.26e-01  9.69e-01  
  3  +3.6609e-01  +1.1763e+00  8.10e-01  2.42e-02  5.07e-01  1.77e-02  6.86e-02  8.11e-01  
  4  +3.0799e-01  +5.8543e-01  2.77e-01  7.75e-03  1.58e-01  4.33e-03  2.56e-02  6.74e-01  
  5  +2.7517e-01  +3.4983e-01  7.47e-02  2.12e-03  4.31e-02  9.27e-04  8.44e-03  7.52e-01  
  6  +2.6187e-01  +2.6807e-01  6.20e-03  1.77e-04  3.56e-03  5.73e-05  7.87e-04  9.18e-01  
  7  +2.6058e-01  +2.6088e-01  2.98e-04  8.55e-06  1.71e-04  1.93e-06  3.98e-05  9.50e-01  
  8  +2.6050e-01  +2.6051e-01  9.47e-06  2.74e-07  5.44e-06  3.65e-08  1.39e-06  9.76e-01  
  9  +2.6050e-01  +2.6050e-01  9.46e-08  2.73e-09  5.43e-08  3.65e-10  1.40e-08  9.90e-01  
 10  +2.6050e-01  +2.6050e-01  9.47e-10  2.74e-11  5.44e-10  3.65e-12  1.40e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2638ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:26 PM: Optimal value: 2.605e-01
(CVXPY) Oct 06 04:07:26 PM: Compilation took 1.367e-02 seconds
(CVXPY) Oct 06 04:07:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2605
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:26 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:26 PM: Finished problem compilation (took 1.009e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 818
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9057e-01  +5.1866e+01  5.14e+01  8.85e-01  9.83e+00  1.00e+00  1.06e+00   ------   
  1  +5.1755e-01  +1.1305e+01  1.08e+01  3.88e-01  5.58e+00  3.86e-03  5.88e-01  5.98e-01  
  2  +4.4030e-01  +2.2836e+00  1.84e+00  8.93e-02  1.77e+00  2.30e-02  2.19e-01  9.46e-01  
  3  +3.2598e-01  +1.0411e+00  7.15e-01  2.05e-02  4.19e-01  1.41e-02  5.77e-02  8.30e-01  
  4  +2.7335e-01  +5.2854e-01  2.55e-01  7.09e-03  1.42e-01  3.88e-03  2.22e-02  6.70e-01  
  5  +2.4981e-01  +4.1705e-01  1.67e-01  4.07e-03  8.56e-02  2.37e-03  1.33e-02  5.48e-01  
  6  +2.2295e-01  +2.8392e-01  6.10e-02  1.39e-03  3.02e-02  6.54e-04  4.83e-03  7.65e-01  
  7  +2.0732e-01  +2.2509e-01  1.78e-02  3.61e-04  8.20e-03  1.88e-04  1.34e-03  7.60e-01  
  8  +2.0130e-01  +2.0194e-01  6.41e-04  1.31e-05  2.95e-04  3.21e-06  5.03e-05  9.85e-01  
  9  +2.0101e-01  +2.0103e-01  1.68e-05  3.53e-07  7.83e-06  3.66e-08  1.44e-06  9.78e-01  
 10  +2.0100e-01  +2.0100e-01  1.68e-07  3.54e-09  7.84e-08  3.67e-10  1.45e-08  9.90e-01  
 11  +2.0100e-01  +2.0100e-01  1.68e-09  3.54e-11  7.84e-10  3.67e-12  1.45e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3001ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:26 PM: Optimal value: 2.010e-01
(CVXPY) Oct 06 04:07:26 PM: Compilation took 1.009e-02 seconds
(CVXPY) Oct 06 04:07:26 PM: Solver (including time spent in interface) took 3.107e-03 seconds
Iteration: 4, Objective: 0.2010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:27 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Finished problem compilation (took 2.251e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 871
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8991e-01  +5.1779e+01  5.13e+01  8.89e-01  9.62e+00  1.00e+00  1.06e+00   ------   
  1  +5.0341e-01  +1.1350e+01  1.08e+01  3.91e-01  5.38e+00  3.91e-03  5.84e-01  5.96e-01  
  2  +4.2298e-01  +2.2126e+00  1.79e+00  8.45e-02  1.65e+00  2.39e-02  2.06e-01  9.68e-01  
  3  +3.0219e-01  +1.2889e+00  9.87e-01  2.78e-02  5.56e-01  1.64e-02  7.52e-02  8.00e-01  
  4  +2.4004e-01  +5.0204e-01  2.62e-01  7.18e-03  1.42e-01  3.56e-03  2.15e-02  7.54e-01  
  5  +2.0687e-01  +3.5495e-01  1.48e-01  3.72e-03  7.56e-02  1.73e-03  1.20e-02  5.86e-01  
  6  +1.7568e-01  +1.9413e-01  1.84e-02  4.52e-04  9.10e-03  1.65e-04  1.58e-03  8.81e-01  
  7  +1.7130e-01  +1.7227e-01  9.71e-04  2.41e-05  4.80e-04  6.43e-06  8.70e-05  9.45e-01  
  8  +1.7104e-01  +1.7119e-01  1.48e-04  3.80e-06  7.23e-05  8.21e-07  1.52e-05  8.53e-01  
  9  +1.7100e-01  +1.7100e-01  2.51e-06  6.44e-08  1.22e-06  1.30e-08  2.63e-07  9.84e-01  
 10  +1.7100e-01  +1.7100e-01  2.51e-08  6.44e-10  1.22e-08  1.30e-10  2.63e-09  9.90e-01  
 11  +1.7100e-01  +1.7100e-01  2.51e-10  6.44e-12  1.22e-10  1.30e-12  2.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.586ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:27 PM: Optimal value: 1.710e-01
(CVXPY) Oct 06 04:07:27 PM: Compilation took 2.251e-03 seconds
(CVXPY) Oct 06 04:07:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:27 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Finished problem compilation (took 5.207e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 906
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8743e-01  +5.1830e+01  5.13e+01  8.92e-01  9.39e+00  1.00e+00  1.06e+00   ------   
  1  +4.7404e-01  +1.1598e+01  1.11e+01  3.97e-01  5.23e+00  3.99e-03  5.86e-01  5.86e-01  
  2  +3.7717e-01  +2.5432e+00  2.17e+00  9.30e-02  1.71e+00  2.56e-02  2.25e-01  9.18e-01  
  3  +2.7063e-01  +1.1967e+00  9.26e-01  2.79e-02  5.29e-01  1.30e-02  7.65e-02  8.42e-01  
  4  +2.1688e-01  +4.9661e-01  2.80e-01  8.24e-03  1.56e-01  3.53e-03  2.47e-02  7.15e-01  
  5  +1.8968e-01  +3.7105e-01  1.81e-01  4.78e-03  9.66e-02  2.12e-03  1.53e-02  5.09e-01  
  6  +1.5363e-01  +1.9585e-01  4.22e-02  9.86e-04  2.09e-02  4.39e-04  3.55e-03  8.07e-01  
  7  +1.4198e-01  +1.4417e-01  2.19e-03  5.13e-05  1.08e-03  1.55e-05  1.93e-04  9.54e-01  
  8  +1.4152e-01  +1.4233e-01  8.16e-04  1.94e-05  3.98e-04  4.54e-06  7.93e-05  7.81e-01  
  9  +1.4122e-01  +1.4125e-01  3.37e-05  8.12e-07  1.65e-05  1.11e-07  3.55e-06  9.58e-01  
 10  +1.4120e-01  +1.4120e-01  3.46e-07  8.36e-09  1.70e-07  1.14e-09  3.69e-08  9.90e-01  
 11  +1.4120e-01  +1.4120e-01  3.47e-09  8.38e-11  1.70e-09  1.14e-11  3.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7333ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:27 PM: Optimal value: 1.412e-01
(CVXPY) Oct 06 04:07:27 PM: Compilation took 5.207e-03 seconds
(CVXPY) Oct 06 04:07:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.1412
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:27 PM: Your problem has 127 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Finished problem compilation (took 1.257e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 177
  nnz(P)        = 0
  nnz(A)        = 934
  cones (total) = 1
    : Nonnegative = 1,  numel = 177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8663e-01  +5.1875e+01  5.14e+01  8.95e-01  9.17e+00  1.00e+00  1.06e+00   ------   
  1  +4.5655e-01  +1.1661e+01  1.12e+01  3.96e-01  5.04e+00  4.05e-03  5.82e-01  5.85e-01  
  2  +3.4883e-01  +2.7942e+00  2.45e+00  9.79e-02  1.73e+00  2.61e-02  2.30e-01  8.84e-01  
  3  +2.4950e-01  +1.1829e+00  9.33e-01  2.91e-02  5.34e-01  1.15e-02  7.82e-02  8.09e-01  
  4  +1.9803e-01  +4.7086e-01  2.73e-01  8.48e-03  1.55e-01  3.00e-03  2.51e-02  7.46e-01  
  5  +1.6952e-01  +3.4702e-01  1.77e-01  4.88e-03  9.52e-02  1.86e-03  1.55e-02  4.99e-01  
  6  +1.3314e-01  +1.7288e-01  3.97e-02  9.54e-04  1.96e-02  3.85e-04  3.44e-03  8.15e-01  
  7  +1.2241e-01  +1.2541e-01  3.00e-03  7.19e-05  1.47e-03  2.26e-05  2.72e-04  9.31e-01  
  8  +1.2158e-01  +1.2199e-01  4.07e-04  1.01e-05  2.00e-04  1.36e-06  4.19e-05  9.65e-01  
  9  +1.2141e-01  +1.2142e-01  1.31e-05  3.27e-07  6.43e-06  3.63e-08  1.46e-06  9.76e-01  
 10  +1.2140e-01  +1.2140e-01  1.31e-07  3.27e-09  6.44e-08  3.62e-10  1.47e-08  9.90e-01  
 11  +1.2140e-01  +1.2140e-01  1.31e-09  3.27e-11  6.44e-10  3.63e-12  1.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6199ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:27 PM: Optimal value: 1.214e-01
(CVXPY) Oct 06 04:07:27 PM: Compilation took 1.257e-02 seconds
(CVXPY) Oct 06 04:07:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.1214
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:27 PM: Your problem has 137 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Finished problem compilation (took 7.649e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 137
  constraints   = 187
  nnz(P)        = 0
  nnz(A)        = 960
  cones (total) = 1
    : Nonnegative = 1,  numel = 187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8651e-01  +5.1879e+01  5.14e+01  8.98e-01  8.95e+00  1.00e+00  1.06e+00   ------   
  1  +4.5140e-01  +1.1687e+01  1.12e+01  3.99e-01  4.89e+00  4.06e-03  5.82e-01  5.84e-01  
  2  +3.3945e-01  +2.8891e+00  2.55e+00  1.00e-01  1.72e+00  2.62e-02  2.37e-01  8.68e-01  
  3  +2.4600e-01  +1.2783e+00  1.03e+00  3.25e-02  5.82e-01  1.21e-02  8.71e-02  7.85e-01  
  4  +1.9690e-01  +5.0333e-01  3.06e-01  9.68e-03  1.72e-01  3.28e-03  2.85e-02  7.29e-01  
  5  +1.6356e-01  +3.3364e-01  1.70e-01  4.74e-03  8.95e-02  1.71e-03  1.51e-02  5.90e-01  
  6  +1.3240e-01  +1.7312e-01  4.07e-02  1.01e-03  2.00e-02  3.73e-04  3.62e-03  8.08e-01  
  7  +1.2212e-01  +1.2427e-01  2.14e-03  5.32e-05  1.05e-03  1.30e-05  1.99e-04  9.52e-01  
  8  +1.2177e-01  +1.2279e-01  1.03e-03  2.61e-05  5.00e-04  5.40e-06  1.08e-04  6.58e-01  
  9  +1.2142e-01  +1.2147e-01  4.60e-05  1.19e-06  2.25e-05  1.32e-07  5.34e-06  9.54e-01  
 10  +1.2140e-01  +1.2140e-01  4.81e-07  1.25e-08  2.36e-07  1.38e-09  5.70e-08  9.90e-01  
 11  +1.2140e-01  +1.2140e-01  4.82e-09  1.25e-10  2.36e-09  1.39e-11  5.71e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.616ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:27 PM: Optimal value: 1.214e-01
(CVXPY) Oct 06 04:07:27 PM: Compilation took 7.649e-03 seconds
(CVXPY) Oct 06 04:07:27 PM: Solver (including time spent in interface) took 2.087e-03 seconds
Iteration: 8, Objective: 0.1214
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:27 PM: Your problem has 147 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Finished problem compilation (took 9.918e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 147
  constraints   = 197
  nnz(P)        = 0
  nnz(A)        = 1002
  cones (total) = 1
    : Nonnegative = 1,  numel = 197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8462e-01  +5.2398e+01  5.19e+01  9.00e-01  8.79e+00  1.00e+00  1.07e+00   ------   
  1  +4.2472e-01  +1.1775e+01  1.14e+01  3.98e-01  4.73e+00  4.11e-03  5.79e-01  5.87e-01  
  2  +2.9117e-01  +3.0975e+00  2.81e+00  1.01e-01  1.70e+00  2.53e-02  2.37e-01  8.36e-01  
  3  +2.2648e-01  +1.1547e+00  9.28e-01  3.10e-02  5.49e-01  1.03e-02  8.29e-02  7.16e-01  
  4  +1.7222e-01  +4.9835e-01  3.26e-01  1.04e-02  1.85e-01  3.41e-03  3.02e-02  7.38e-01  
  5  +1.3687e-01  +3.1578e-01  1.79e-01  5.01e-03  9.58e-02  1.79e-03  1.59e-02  5.82e-01  
  6  +1.0534e-01  +1.5585e-01  5.05e-02  1.25e-03  2.52e-02  4.64e-04  4.46e-03  7.73e-01  
  7  +9.2614e-02  +9.5491e-02  2.88e-03  7.12e-05  1.41e-03  1.70e-05  2.66e-04  9.54e-01  
  8  +9.1782e-02  +9.2177e-02  3.95e-04  1.03e-05  1.96e-04  1.14e-06  4.35e-05  9.90e-01  
  9  +9.1607e-02  +9.1623e-02  1.54e-05  4.07e-07  7.65e-06  3.98e-08  1.82e-06  9.65e-01  
 10  +9.1600e-02  +9.1600e-02  1.54e-07  4.07e-09  7.66e-08  3.98e-10  1.83e-08  9.90e-01  
 11  +9.1600e-02  +9.1600e-02  1.54e-09  4.08e-11  7.67e-10  3.98e-12  1.83e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6883ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:27 PM: Optimal value: 9.160e-02
(CVXPY) Oct 06 04:07:27 PM: Compilation took 9.918e-03 seconds
(CVXPY) Oct 06 04:07:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:27 PM: Your problem has 157 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Finished problem compilation (took 9.614e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 157
  constraints   = 207
  nnz(P)        = 0
  nnz(A)        = 1032
  cones (total) = 1
    : Nonnegative = 1,  numel = 207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8421e-01  +5.2415e+01  5.19e+01  9.03e-01  8.62e+00  1.00e+00  1.07e+00   ------   
  1  +4.1540e-01  +1.1857e+01  1.14e+01  4.01e-01  4.62e+00  4.14e-03  5.81e-01  5.83e-01  
  2  +2.8178e-01  +3.1331e+00  2.85e+00  1.03e-01  1.69e+00  2.55e-02  2.42e-01  8.29e-01  
  3  +2.1881e-01  +1.2534e+00  1.03e+00  3.47e-02  5.97e-01  1.13e-02  9.25e-02  6.90e-01  
  4  +1.6592e-01  +4.3979e-01  2.74e-01  8.98e-03  1.55e-01  2.85e-03  2.64e-02  7.94e-01  
  5  +1.3605e-01  +3.1256e-01  1.77e-01  5.14e-03  9.44e-02  1.76e-03  1.62e-02  4.88e-01  
  6  +1.0073e-01  +1.3459e-01  3.39e-02  8.99e-04  1.67e-02  3.00e-04  3.14e-03  8.36e-01  
  7  +9.2351e-02  +9.4543e-02  2.19e-03  5.86e-05  1.08e-03  1.31e-05  2.14e-04  9.38e-01  
  8  +9.1929e-02  +9.2849e-02  9.20e-04  2.56e-05  4.52e-04  4.46e-06  1.05e-04  7.41e-01  
  9  +9.1621e-02  +9.1673e-02  5.15e-05  1.46e-06  2.55e-05  1.72e-07  6.48e-06  9.42e-01  
 10  +9.1600e-02  +9.1601e-02  5.37e-07  1.53e-08  2.66e-07  1.78e-09  6.86e-08  9.90e-01  
 11  +9.1600e-02  +9.1600e-02  5.38e-09  1.53e-10  2.66e-09  1.78e-11  6.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7463ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:27 PM: Optimal value: 9.160e-02
(CVXPY) Oct 06 04:07:27 PM: Compilation took 9.614e-03 seconds
(CVXPY) Oct 06 04:07:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.0916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:27 PM: Your problem has 167 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:28 PM: Finished problem compilation (took 1.354e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 167
  constraints   = 217
  nnz(P)        = 0
  nnz(A)        = 1071
  cones (total) = 1
    : Nonnegative = 1,  numel = 217

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8106e-01  +5.2422e+01  5.19e+01  9.05e-01  8.47e+00  1.00e+00  1.07e+00   ------   
  1  +3.7294e-01  +1.2084e+01  1.17e+01  4.01e-01  4.50e+00  4.26e-03  5.76e-01  5.76e-01  
  2  +2.3496e-01  +2.8656e+00  2.63e+00  9.56e-02  1.52e+00  2.59e-02  2.25e-01  8.62e-01  
  3  +1.8807e-01  +1.1131e+00  9.25e-01  3.34e-02  5.52e-01  1.00e-02  8.88e-02  6.76e-01  
  4  +1.4276e-01  +4.5695e-01  3.14e-01  1.12e-02  1.85e-01  3.10e-03  3.28e-02  7.36e-01  
  5  +1.0342e-01  +2.0514e-01  1.02e-01  3.21e-03  5.52e-02  9.90e-04  1.05e-02  7.34e-01  
  6  +8.6897e-02  +1.1084e-01  2.39e-02  7.17e-04  1.24e-02  2.24e-04  2.51e-03  7.73e-01  
  7  +8.2242e-02  +8.4384e-02  2.14e-03  6.51e-05  1.11e-03  1.31e-05  2.38e-04  9.26e-01  
  8  +8.1867e-02  +8.2714e-02  8.47e-04  2.65e-05  4.37e-04  3.81e-06  1.10e-04  7.92e-01  
  9  +8.1615e-02  +8.1657e-02  4.15e-05  1.32e-06  2.15e-05  1.28e-07  5.85e-06  9.50e-01  
 10  +8.1600e-02  +8.1601e-02  4.27e-07  1.37e-08  2.21e-07  1.32e-09  6.09e-08  9.90e-01  
 11  +8.1600e-02  +8.1600e-02  4.28e-09  1.37e-10  2.21e-09  1.32e-11  6.10e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9409ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:28 PM: Optimal value: 8.160e-02
(CVXPY) Oct 06 04:07:28 PM: Compilation took 1.354e-02 seconds
(CVXPY) Oct 06 04:07:28 PM: Solver (including time spent in interface) took 2.162e-03 seconds
Iteration: 11, Objective: 0.0816
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:28 PM: Your problem has 169 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:28 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 169
  constraints   = 219
  nnz(P)        = 0
  nnz(A)        = 1082
  cones (total) = 1
    : Nonnegative = 1,  numel = 219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8066e-01  +5.2478e+01  5.20e+01  9.05e-01  8.45e+00  1.00e+00  1.07e+00   ------   
  1  +3.6915e-01  +1.2135e+01  1.18e+01  4.02e-01  4.50e+00  4.27e-03  5.78e-01  5.74e-01  
  2  +2.2870e-01  +2.9418e+00  2.71e+00  9.81e-02  1.55e+00  2.61e-02  2.30e-01  8.53e-01  
  3  +1.8670e-01  +1.1436e+00  9.57e-01  3.51e-02  5.77e-01  1.03e-02  9.27e-02  6.67e-01  
  4  +1.4427e-01  +4.6938e-01  3.25e-01  1.19e-02  1.96e-01  3.24e-03  3.44e-02  7.29e-01  
  5  +1.0394e-01  +2.0884e-01  1.05e-01  3.38e-03  5.82e-02  1.02e-03  1.10e-02  7.41e-01  
  6  +8.7285e-02  +1.1319e-01  2.59e-02  7.89e-04  1.37e-02  2.35e-04  2.74e-03  7.77e-01  
  7  +8.2239e-02  +8.4473e-02  2.23e-03  6.90e-05  1.18e-03  1.43e-05  2.50e-04  9.19e-01  
  8  +8.1866e-02  +8.2757e-02  8.91e-04  2.86e-05  4.73e-04  4.16e-06  1.16e-04  7.78e-01  
  9  +8.1619e-02  +8.1678e-02  5.86e-05  1.92e-06  3.13e-05  2.12e-07  8.25e-06  9.35e-01  
 10  +8.1600e-02  +8.1601e-02  6.16e-07  2.02e-08  3.29e-07  2.19e-09  8.79e-08  9.90e-01  
 11  +8.1600e-02  +8.1600e-02  6.17e-09  2.03e-10  3.30e-09  2.19e-11  8.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9035ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:28 PM: Optimal value: 8.160e-02
(CVXPY) Oct 06 04:07:28 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:07:28 PM: Solver (including time spent in interface) took 9.898e-03 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.8

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x7 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 0)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x6 = 1)                       <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x6 = 0)                       <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0)                       <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0)            <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.06)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.06)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.08)
 OR (x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.776617527008057
Best over terms:
  Our final objective: 0.12
    Its accruacy: 0.56
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.12
  Highest accruacy: 0.56
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

