Command:
python test_script.py -s constant_subclass -d 4 -n 50000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14611999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.14612000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:07 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:07 PM: Finished problem compilation (took 2.201e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5399e+02  7.53e+02  1.44e-01  5.59e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1148e-01  +1.6834e+02  1.68e+02  1.31e-01  5.07e+01  1.84e-05  2.26e-01  5.78e-02  
  4  +5.0020e-01  +2.9712e+00  2.47e+00  7.39e-03  2.82e+00  1.59e-06  1.64e-01  8.63e-01  
  5  +5.0002e-01  +9.2921e-01  4.29e-01  1.30e-03  5.01e-01  9.01e-06  8.42e-02  9.90e-01  
  6  +5.0000e-01  +6.0217e-01  1.02e-01  3.07e-04  1.19e-01  7.67e-06  1.17e-02  8.78e-01  
  7  +4.9965e-01  +6.3720e-01  1.38e-01  1.25e-04  4.86e-02  2.85e-04  4.11e-04  9.73e-01  
  8  +4.9579e-01  +6.5572e-01  1.60e-01  1.68e-05  6.55e-03  2.46e-03  5.01e-05  9.73e-01  
  9  +4.8996e-01  +6.3180e-01  1.42e-01  7.78e-06  3.03e-03  3.73e-03  2.32e-05  6.25e-01  
 10  +4.8248e-01  +5.8037e-01  9.79e-02  5.90e-06  2.29e-03  1.34e-03  1.84e-05  3.72e-01  
 11  +4.6718e-01  +4.9809e-01  3.09e-02  1.65e-06  6.38e-04  7.11e-05  5.45e-06  8.44e-01  
 12  +4.5985e-01  +4.6358e-01  3.72e-03  1.87e-07  7.26e-05  6.73e-06  6.47e-07  8.88e-01  
 13  +4.5874e-01  +4.5930e-01  5.60e-04  2.47e-08  9.56e-06  6.14e-07  9.75e-08  9.08e-01  
 14  +4.5854e-01  +4.5855e-01  7.37e-06  3.06e-10  1.19e-07  7.07e-09  1.28e-09  9.88e-01  
 15  +4.5854e-01  +4.5854e-01  7.37e-08  3.06e-12  1.19e-09  7.08e-11  1.28e-11  9.90e-01  
 16  +4.5854e-01  +4.5854e-01  7.37e-10  3.06e-14  1.19e-11  7.08e-13  1.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 539.0232ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:07 PM: Optimal value: 4.585e-01
(CVXPY) Oct 06 03:52:07 PM: Compilation took 2.201e-01 seconds
(CVXPY) Oct 06 03:52:07 PM: Solver (including time spent in interface) took 5.803e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:08 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:08 PM: Finished problem compilation (took 1.690e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 223703
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  2.07e+02  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +4.8437e+03  4.84e+03  3.42e-01  1.15e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5111e-01  +7.5333e+02  7.53e+02  1.44e-01  5.98e+01  8.22e-03  2.28e-01  7.24e-01  
  3  +5.1145e-01  +1.6803e+02  1.68e+02  1.31e-01  5.42e+01  1.85e-05  2.26e-01  5.83e-02  
  4  +5.0016e-01  +2.5706e+00  2.07e+00  6.20e-03  2.54e+00  1.62e-06  1.55e-01  9.89e-01  
  5  +5.0010e-01  +1.8606e+00  1.36e+00  4.09e-03  1.68e+00  4.05e-06  1.33e-01  2.70e-01  
  6  +5.0003e-01  +9.0193e-01  4.02e-01  1.21e-03  4.99e-01  5.70e-06  6.29e-02  6.78e-01  
  7  +5.0001e-01  +7.7180e-01  2.72e-01  8.14e-04  3.37e-01  6.57e-06  2.42e-02  6.83e-01  
  8  +4.9994e-01  +7.1012e-01  2.10e-01  3.86e-04  1.61e-01  6.15e-05  1.44e-03  9.90e-01  
  9  +4.9930e-01  +7.0919e-01  2.10e-01  5.69e-05  2.38e-02  5.56e-04  1.57e-04  8.92e-01  
 10  +4.9732e-01  +6.8771e-01  1.90e-01  1.52e-05  6.34e-03  1.55e-03  4.08e-05  9.00e-01  
 11  +4.9560e-01  +6.8067e-01  1.85e-01  1.05e-05  4.37e-03  1.99e-03  2.80e-05  3.66e-01  
 12  +4.9435e-01  +6.6391e-01  1.70e-01  8.30e-06  3.47e-03  6.57e-04  2.23e-05  7.92e-01  
 13  +4.9071e-01  +6.4904e-01  1.58e-01  7.00e-06  2.92e-03  5.40e-04  1.89e-05  3.03e-01  
 14  +4.7489e-01  +5.8871e-01  1.14e-01  3.99e-06  1.66e-03  3.61e-04  1.12e-05  5.26e-01  
 15  +4.7469e-01  +5.8800e-01  1.13e-01  3.99e-06  1.66e-03  3.54e-04  1.11e-05  1.07e-02  
 16  +4.6308e-01  +5.4867e-01  8.56e-02  3.19e-06  1.33e-03  3.20e-06  9.33e-06  7.42e-01  
 17  +4.4127e-01  +4.7227e-01  3.10e-02  1.02e-06  4.25e-04  3.59e-07  3.13e-06  9.20e-01  
 18  +4.2851e-01  +4.3155e-01  3.04e-03  9.62e-08  3.99e-05  3.50e-08  3.04e-07  9.56e-01  
 19  +4.2706e-01  +4.2709e-01  3.28e-05  1.03e-09  4.29e-07  3.71e-10  3.27e-09  9.89e-01  
 20  +4.2704e-01  +4.2704e-01  3.28e-07  1.03e-11  4.29e-09  3.71e-12  3.27e-11  9.90e-01  
 21  +4.2704e-01  +4.2704e-01  3.28e-09  1.03e-13  4.29e-11  3.83e-14  3.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 835.7198ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:09 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:09 PM: Optimal value: 4.270e-01
(CVXPY) Oct 06 03:52:09 PM: Compilation took 1.690e-01 seconds
(CVXPY) Oct 06 03:52:09 PM: Solver (including time spent in interface) took 8.896e-01 seconds
FULL MODEL:
  Accruacy: 0.57306
  Our objective: 0.14612000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.14612)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.884996652603149
Best over terms:
  Our final objective: 0.14612000000000003
    Its accruacy: 0.57306
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14612000000000003
  Highest accruacy: 0.57306
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

