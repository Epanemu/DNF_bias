Command:
python test_script.py -s constant_subclass -d 5 -n 5000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15599999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.16920000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:32 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:32 PM: Finished problem compilation (took 4.823e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5008e+03  2.50e+03  9.78e-01  6.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.9955e-01  +5.0122e+02  5.01e+02  3.62e-01  3.81e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4610e-01  +7.1606e+01  7.11e+01  1.41e-01  1.85e+01  9.86e-03  2.35e-01  7.80e-01  
  3  +5.1025e-01  +1.6621e+01  1.61e+01  1.01e-01  1.28e+01  2.27e-05  2.31e-01  9.88e-02  
  4  +5.0008e-01  +9.7086e-01  4.71e-01  4.50e-03  5.87e-01  6.82e-06  1.26e-01  9.67e-01  
  5  +4.9996e-01  +6.2731e-01  1.27e-01  1.21e-03  1.59e-01  3.39e-06  2.70e-02  8.30e-01  
  6  +4.9622e-01  +9.3940e-01  4.43e-01  9.28e-04  1.23e-01  9.45e-05  3.04e-03  9.63e-01  
  7  +4.8492e-01  +7.6226e-01  2.77e-01  1.85e-04  2.45e-02  2.37e-04  5.86e-04  8.11e-01  
  8  +4.7192e-01  +5.4274e-01  7.08e-02  3.75e-05  4.96e-03  2.08e-05  1.27e-04  8.86e-01  
  9  +4.5877e-01  +4.8027e-01  2.15e-02  9.42e-06  1.24e-03  3.79e-06  3.69e-05  8.27e-01  
 10  +4.5488e-01  +4.6274e-01  7.86e-03  3.29e-06  4.35e-04  7.73e-07  1.36e-05  9.90e-01  
 11  +4.5236e-01  +4.5253e-01  1.72e-04  7.13e-08  9.42e-06  1.59e-08  3.04e-07  9.79e-01  
 12  +4.5230e-01  +4.5230e-01  1.72e-06  7.14e-10  9.42e-08  1.59e-10  3.04e-09  9.90e-01  
 13  +4.5230e-01  +4.5230e-01  1.72e-08  7.14e-12  9.42e-10  1.60e-12  3.05e-11  9.90e-01  
 14  +4.5230e-01  +4.5230e-01  1.72e-10  7.14e-14  9.42e-12  1.60e-14  3.05e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.0032ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:33 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:33 PM: Optimal value: 4.523e-01
(CVXPY) Oct 06 03:54:33 PM: Compilation took 4.823e-02 seconds
(CVXPY) Oct 06 03:54:33 PM: Solver (including time spent in interface) took 4.337e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:33 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:33 PM: Finished problem compilation (took 1.986e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24730
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.78e-01  6.91e+01  1.00e+00  1.00e+00   ------   
  1  +5.9932e-01  +5.0155e+02  5.01e+02  3.62e-01  4.03e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4568e-01  +7.1169e+01  7.06e+01  1.41e-01  1.95e+01  9.93e-03  2.35e-01  7.83e-01  
  3  +5.0998e-01  +1.6339e+01  1.58e+01  9.97e-02  1.34e+01  2.27e-05  2.30e-01  1.06e-01  
  4  +5.0066e-01  +1.9315e+00  1.43e+00  1.37e-02  1.86e+00  8.42e-06  1.77e-01  4.71e-01  
  5  +5.0011e-01  +8.4881e-01  3.49e-01  3.32e-03  4.59e-01  2.95e-06  6.78e-02  6.64e-01  
  6  +4.9985e-01  +8.9649e-01  3.97e-01  3.30e-03  4.58e-01  8.33e-06  1.89e-02  8.68e-01  
  7  +4.9430e-01  +7.8826e-01  2.94e-01  3.35e-04  4.73e-02  9.92e-05  9.74e-04  9.50e-01  
  8  +4.9397e-01  +7.7708e-01  2.83e-01  3.02e-04  4.25e-02  8.97e-05  8.69e-04  2.15e-01  
  9  +4.9554e-01  +7.3000e-01  2.34e-01  2.37e-04  3.34e-02  2.76e-06  6.70e-04  9.90e-01  
 10  +4.9208e-01  +7.0561e-01  2.14e-01  1.64e-04  2.31e-02  4.09e-06  4.62e-04  3.74e-01  
 11  +4.8634e-01  +6.6871e-01  1.82e-01  1.07e-04  1.51e-02  7.61e-06  3.04e-04  5.72e-01  
 12  +4.8461e-01  +6.6085e-01  1.76e-01  1.02e-04  1.44e-02  9.76e-06  2.90e-04  3.34e-01  
 13  +4.8426e-01  +6.6015e-01  1.76e-01  9.76e-05  1.37e-02  1.08e-05  2.75e-04  1.84e-01  
 14  +4.8101e-01  +6.4596e-01  1.65e-01  7.82e-05  1.10e-02  1.30e-05  2.20e-04  5.00e-01  
 15  +4.7445e-01  +6.1665e-01  1.42e-01  5.71e-05  8.02e-03  1.33e-05  1.61e-04  4.51e-01  
 16  +4.7028e-01  +6.0207e-01  1.32e-01  5.56e-05  7.80e-03  1.17e-05  1.60e-04  9.13e-02  
 17  +4.5134e-01  +5.2608e-01  7.47e-02  2.54e-05  3.55e-03  7.82e-06  7.53e-05  6.45e-01  
 18  +4.2631e-01  +4.3527e-01  8.95e-03  2.85e-06  3.98e-04  8.02e-07  9.04e-06  9.90e-01  
 19  +4.2215e-01  +4.2226e-01  1.07e-04  3.37e-08  4.71e-06  8.53e-09  1.08e-07  9.89e-01  
 20  +4.2210e-01  +4.2210e-01  1.07e-06  3.37e-10  4.71e-08  8.53e-11  1.08e-09  9.90e-01  
 21  +4.2210e-01  +4.2210e-01  1.07e-08  3.37e-12  4.71e-10  8.57e-13  1.09e-11  9.90e-01  
 22  +4.2210e-01  +4.2210e-01  1.07e-10  3.37e-14  4.71e-12  8.60e-15  1.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.3311ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:33 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:33 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 03:54:33 PM: Compilation took 1.986e-02 seconds
(CVXPY) Oct 06 03:54:33 PM: Solver (including time spent in interface) took 8.541e-02 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:33 PM: Your problem has 2526 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:33 PM: Finished problem compilation (took 2.004e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2526
  constraints   = 5026
  nnz(P)        = 0
  nnz(A)        = 25547
  cones (total) = 1
    : Nonnegative = 1,  numel = 5026

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5011e+03  2.50e+03  9.79e-01  6.93e+01  1.00e+00  1.00e+00   ------   
  1  +5.9898e-01  +5.0221e+02  5.02e+02  3.64e-01  4.05e+01  3.99e-03  5.05e-01  6.44e-01  
  2  +5.4547e-01  +7.1019e+01  7.05e+01  1.41e-01  1.95e+01  1.00e-02  2.35e-01  7.86e-01  
  3  +5.0995e-01  +1.6326e+01  1.58e+01  9.97e-02  1.34e+01  2.29e-05  2.30e-01  1.08e-01  
  4  +5.0056e-01  +1.7743e+00  1.27e+00  1.22e-02  1.67e+00  8.34e-06  1.70e-01  5.25e-01  
  5  +5.0014e-01  +9.1469e-01  4.15e-01  3.95e-03  5.47e-01  3.56e-06  7.53e-02  5.87e-01  
  6  +5.0007e-01  +9.1519e-01  4.15e-01  3.91e-03  5.42e-01  4.77e-06  4.64e-02  4.66e-01  
  7  +4.9873e-01  +7.9568e-01  2.97e-01  1.24e-03  1.75e-01  2.71e-05  4.15e-03  9.37e-01  
  8  +4.9330e-01  +7.4458e-01  2.51e-01  2.94e-04  4.15e-02  9.93e-05  8.68e-04  7.95e-01  
  9  +4.9407e-01  +7.5219e-01  2.58e-01  2.68e-04  3.79e-02  8.73e-05  7.72e-04  3.43e-01  
 10  +4.8800e-01  +7.0251e-01  2.15e-01  1.41e-04  2.00e-02  8.88e-05  4.02e-04  6.62e-01  
 11  +4.8812e-01  +7.0846e-01  2.20e-01  1.29e-04  1.82e-02  7.98e-05  3.61e-04  3.28e-01  
 12  +4.8532e-01  +6.9513e-01  2.10e-01  1.09e-04  1.54e-02  7.42e-05  3.05e-04  2.62e-01  
 13  +4.8134e-01  +6.7202e-01  1.91e-01  9.37e-05  1.32e-02  4.60e-05  2.65e-04  4.47e-01  
 14  +4.6996e-01  +6.2109e-01  1.51e-01  6.79e-05  9.56e-03  1.21e-05  2.03e-04  8.75e-01  
 15  +4.6709e-01  +6.0649e-01  1.39e-01  6.26e-05  8.80e-03  1.14e-05  1.87e-04  2.19e-01  
 16  +4.4938e-01  +5.3441e-01  8.50e-02  3.30e-05  4.62e-03  7.41e-06  1.02e-04  5.52e-01  
 17  +4.3562e-01  +4.8588e-01  5.03e-02  1.81e-05  2.53e-03  4.45e-06  5.77e-05  4.91e-01  
 18  +4.1778e-01  +4.2264e-01  4.86e-03  1.64e-06  2.29e-04  3.45e-07  5.57e-06  9.29e-01  
 19  +4.1574e-01  +4.1583e-01  8.70e-05  2.92e-08  4.08e-06  7.16e-09  1.00e-07  9.86e-01  
 20  +4.1570e-01  +4.1570e-01  8.70e-07  2.92e-10  4.08e-08  7.16e-11  1.00e-09  9.90e-01  
 21  +4.1570e-01  +4.1570e-01  8.70e-09  2.92e-12  4.08e-10  7.17e-13  1.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.8553ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:33 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:33 PM: Optimal value: 4.157e-01
(CVXPY) Oct 06 03:54:33 PM: Compilation took 2.004e-02 seconds
(CVXPY) Oct 06 03:54:33 PM: Solver (including time spent in interface) took 7.004e-02 seconds
FULL MODEL:
  Accruacy: 0.5846
  Our objective: 0.16919999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.156)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1)            <-- (term's our objective: 0.0088)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.0044)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.5947675704956055
Best over terms:
  Our final objective: 0.15599999999999997
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15599999999999997
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

