Command:
python test_script.py -s constant_subclass -d 4 -n 500 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.164
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.22000000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:53 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:53 PM: Finished problem compilation (took 5.974e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +2.5076e+02  2.50e+02  9.32e-01  1.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0725e-01  +4.8857e+01  4.82e+01  3.19e-01  1.01e+01  4.10e-03  4.76e-01  6.68e-01  
  2  +5.4768e-01  +7.6617e+00  7.11e+00  1.13e-01  4.28e+00  8.47e-03  2.17e-01  7.56e-01  
  3  +5.0106e-01  +1.2934e+00  7.92e-01  2.36e-02  8.64e-01  1.31e-03  1.94e-01  4.53e-01  
  4  +4.9990e-01  +6.6872e-01  1.69e-01  5.03e-03  1.90e-01  3.57e-04  4.31e-02  8.15e-01  
  5  +4.8510e-01  +7.7453e-01  2.89e-01  1.64e-03  6.34e-02  3.92e-03  5.18e-03  9.55e-01  
  6  +4.6916e-01  +5.4299e-01  7.38e-02  3.77e-04  1.45e-02  4.05e-05  1.30e-03  8.55e-01  
  7  +4.5251e-01  +4.6589e-01  1.34e-02  5.62e-05  2.16e-03  6.78e-06  2.29e-04  8.64e-01  
  8  +4.4827e-01  +4.4876e-01  4.90e-04  1.96e-06  7.53e-05  3.86e-07  8.53e-06  9.90e-01  
  9  +4.4810e-01  +4.4811e-01  4.91e-06  1.97e-08  7.54e-07  3.87e-09  8.56e-08  9.90e-01  
 10  +4.4810e-01  +4.4810e-01  4.91e-08  1.97e-10  7.54e-09  3.87e-11  8.56e-10  9.90e-01  
 11  +4.4810e-01  +4.4810e-01  4.91e-10  1.97e-12  7.54e-11  3.87e-13  8.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.7633ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:53 PM: Optimal value: 4.481e-01
(CVXPY) Oct 06 03:49:53 PM: Compilation took 5.974e-02 seconds
(CVXPY) Oct 06 03:49:53 PM: Solver (including time spent in interface) took 1.054e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4481
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:53 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:53 PM: Finished problem compilation (took 9.648e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 2256
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +2.5118e+02  2.51e+02  9.33e-01  1.97e+01  1.00e+00  1.02e+00   ------   
  1  +6.0322e-01  +4.9307e+01  4.87e+01  3.27e-01  1.07e+01  4.07e-03  4.90e-01  6.62e-01  
  2  +5.4355e-01  +7.2354e+00  6.69e+00  1.07e-01  4.26e+00  9.15e-03  2.11e-01  7.97e-01  
  3  +5.0092e-01  +1.4060e+00  9.05e-01  2.74e-02  1.05e+00  1.89e-03  1.78e-01  5.47e-01  
  4  +4.9818e-01  +8.9591e-01  3.98e-01  1.05e-02  4.18e-01  1.42e-03  4.57e-02  9.54e-01  
  5  +4.7567e-01  +7.8922e-01  3.14e-01  2.07e-03  8.45e-02  6.12e-03  6.35e-03  8.84e-01  
  6  +4.6113e-01  +6.8797e-01  2.27e-01  1.16e-03  4.73e-02  4.66e-03  3.75e-03  4.65e-01  
  7  +4.6068e-01  +6.8696e-01  2.26e-01  1.02e-03  4.15e-02  3.66e-03  3.24e-03  3.82e-01  
  8  +4.5262e-01  +6.2205e-01  1.69e-01  8.41e-04  3.40e-02  1.39e-03  2.75e-03  3.94e-01  
  9  +4.3118e-01  +4.9779e-01  6.66e-02  2.87e-04  1.16e-02  2.37e-04  1.01e-03  8.33e-01  
 10  +4.1964e-01  +4.3717e-01  1.75e-02  7.03e-05  2.83e-03  6.56e-05  2.44e-04  7.99e-01  
 11  +4.1914e-01  +4.3724e-01  1.81e-02  6.12e-05  2.47e-03  7.44e-05  2.03e-04  2.45e-01  
 12  +4.1728e-01  +4.2887e-01  1.16e-02  4.76e-05  1.91e-03  7.43e-06  1.73e-04  7.48e-01  
 13  +4.1374e-01  +4.1741e-01  3.68e-03  1.23e-05  4.94e-04  3.92e-06  4.19e-05  8.16e-01  
 14  +4.1223e-01  +4.1229e-01  5.94e-05  1.98e-07  7.96e-06  6.29e-08  6.82e-07  9.86e-01  
 15  +4.1220e-01  +4.1220e-01  5.94e-07  1.98e-09  7.96e-08  6.29e-10  6.82e-09  9.90e-01  
 16  +4.1220e-01  +4.1220e-01  5.94e-09  1.98e-11  7.96e-10  6.30e-12  6.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1215ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:53 PM: Optimal value: 4.122e-01
(CVXPY) Oct 06 03:49:53 PM: Compilation took 9.648e-03 seconds
(CVXPY) Oct 06 03:49:53 PM: Solver (including time spent in interface) took 5.084e-03 seconds
Iteration: 2, Objective: 0.4122
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:53 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:53 PM: Finished problem compilation (took 5.026e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 2576
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9881e-01  +2.5118e+02  2.51e+02  9.35e-01  2.00e+01  1.00e+00  1.04e+00   ------   
  1  +5.9749e-01  +5.0114e+01  4.95e+01  3.46e-01  1.11e+01  3.97e-03  5.19e-01  6.49e-01  
  2  +5.4103e-01  +7.0532e+00  6.51e+00  1.08e-01  4.28e+00  1.02e-02  2.17e-01  8.30e-01  
  3  +5.0056e-01  +1.3815e+00  8.81e-01  2.74e-02  1.05e+00  1.77e-03  1.75e-01  6.43e-01  
  4  +4.9702e-01  +9.2158e-01  4.25e-01  1.13e-02  4.48e-01  1.64e-03  4.89e-02  8.03e-01  
  5  +4.8457e-01  +8.8514e-01  4.01e-01  4.62e-03  1.87e-01  3.90e-03  1.52e-02  7.47e-01  
  6  +4.7335e-01  +7.9463e-01  3.21e-01  2.49e-03  1.01e-01  3.88e-03  8.03e-03  5.65e-01  
  7  +4.6945e-01  +7.9290e-01  3.23e-01  1.94e-03  7.91e-02  4.18e-03  6.17e-03  3.40e-01  
  8  +4.5843e-01  +6.9537e-01  2.37e-01  1.35e-03  5.50e-02  4.31e-05  4.45e-03  8.48e-01  
  9  +4.2686e-01  +5.5133e-01  1.24e-01  5.31e-04  2.14e-02  3.92e-05  1.87e-03  6.43e-01  
 10  +3.9594e-01  +4.1131e-01  1.54e-02  6.40e-05  2.57e-03  5.48e-06  2.65e-04  9.04e-01  
 11  +3.9070e-01  +3.9151e-01  8.13e-04  3.37e-06  1.35e-04  5.18e-07  1.48e-05  9.71e-01  
 12  +3.9040e-01  +3.9041e-01  8.78e-06  3.63e-08  1.46e-06  5.60e-09  1.61e-07  9.89e-01  
 13  +3.9040e-01  +3.9040e-01  8.78e-08  3.64e-10  1.46e-08  5.60e-11  1.61e-09  9.90e-01  
 14  +3.9040e-01  +3.9040e-01  8.78e-10  3.64e-12  1.46e-10  5.60e-13  1.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.3703ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:53 PM: Optimal value: 3.904e-01
(CVXPY) Oct 06 03:49:53 PM: Compilation took 5.026e-03 seconds
(CVXPY) Oct 06 03:49:53 PM: Solver (including time spent in interface) took 5.007e-03 seconds
FULL MODEL:
  Accruacy: 0.6
  Our objective: 0.2

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.064)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0)            <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.112)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.8797945976257324
Best over terms:
  Our final objective: 0.11199999999999995
    Its accruacy: 0.556
    Its hamming distance: 2
  Shortest hamming distance: 1
    Its our objective: 0.06399999999999996
  Highest accruacy: 0.556
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

