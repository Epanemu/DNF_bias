Command:
python test_script.py -s constant_subclass -d 8 -n 10000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1514
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 8.

Computed total variation: 0.21080000000000004
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:54 PM: Your problem has 5017 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:54 PM: Finished problem compilation (took 7.804e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5017
  constraints   = 10017
  nnz(P)        = 0
  nnz(A)        = 55017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.11e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +1.0695e+03  1.07e+03  4.19e-01  7.08e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3484e-01  +1.2653e+02  1.26e+02  1.63e-01  3.54e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0932e-01  +3.2753e+01  3.22e+01  1.22e-01  2.62e+01  3.96e-05  2.53e-01  2.14e-01  
  4  +5.0084e-01  +2.6150e+00  2.11e+00  1.44e-02  3.13e+00  5.47e-06  1.60e-01  6.64e-01  
  5  +5.0011e-01  +8.9643e-01  3.96e-01  2.66e-03  5.89e-01  2.84e-05  7.88e-02  9.90e-01  
  6  +5.0000e-01  +6.1216e-01  1.12e-01  7.44e-04  1.66e-01  2.45e-05  1.37e-02  8.45e-01  
  7  +4.9818e-01  +7.1511e-01  2.17e-01  1.83e-04  4.10e-02  1.07e-03  5.68e-04  9.81e-01  
  8  +4.9363e-01  +6.8871e-01  1.95e-01  5.93e-05  1.33e-02  2.73e-03  1.81e-04  7.00e-01  
  9  +4.8506e-01  +5.8943e-01  1.04e-01  3.33e-05  7.44e-03  1.70e-04  1.07e-04  6.85e-01  
 10  +4.7956e-01  +5.5361e-01  7.41e-02  2.19e-05  4.89e-03  1.78e-06  7.24e-05  8.50e-01  
 11  +4.6501e-01  +4.8222e-01  1.72e-02  4.24e-06  9.46e-04  4.27e-07  1.51e-05  8.80e-01  
 12  +4.6058e-01  +4.6262e-01  2.04e-03  4.77e-07  1.06e-04  4.88e-08  1.81e-06  8.86e-01  
 13  +4.5982e-01  +4.5990e-01  7.79e-05  1.63e-08  3.64e-06  2.78e-09  6.94e-08  9.83e-01  
 14  +4.5980e-01  +4.5980e-01  7.80e-07  1.63e-10  3.64e-08  2.78e-11  6.95e-10  9.90e-01  
 15  +4.5980e-01  +4.5980e-01  7.82e-09  1.63e-12  3.65e-10  3.05e-13  7.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 99.4956ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:55 PM: Optimal value: 4.598e-01
(CVXPY) Oct 06 04:10:55 PM: Compilation took 7.804e-02 seconds
(CVXPY) Oct 06 04:10:55 PM: Solver (including time spent in interface) took 1.101e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:55 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:55 PM: Finished problem compilation (took 4.695e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 63873
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8409e-01  +1.0697e+03  1.07e+03  4.19e-01  7.36e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3467e-01  +1.2620e+02  1.26e+02  1.63e-01  3.66e+01  1.48e-02  2.66e-01  9.01e-01  
  3  +5.0922e-01  +3.2551e+01  3.20e+01  1.22e-01  2.71e+01  3.96e-05  2.52e-01  2.20e-01  
  4  +5.0078e-01  +2.4614e+00  1.96e+00  1.33e-02  3.02e+00  5.62e-06  1.52e-01  7.12e-01  
  5  +5.0012e-01  +9.0011e-01  4.00e-01  2.68e-03  6.17e-01  2.34e-05  6.09e-02  9.90e-01  
  6  +5.0003e-01  +7.5884e-01  2.59e-01  1.65e-03  3.81e-01  4.38e-05  1.39e-02  8.23e-01  
  7  +4.9821e-01  +7.7659e-01  2.78e-01  1.93e-04  4.52e-02  1.07e-03  5.46e-04  9.64e-01  
  8  +4.9435e-01  +7.4554e-01  2.51e-01  7.68e-05  1.80e-02  2.17e-03  2.14e-04  6.53e-01  
  9  +4.9221e-01  +7.2464e-01  2.32e-01  6.74e-05  1.58e-02  1.88e-03  1.88e-04  1.89e-01  
 10  +4.9010e-01  +7.0236e-01  2.12e-01  5.75e-05  1.34e-02  1.41e-03  1.60e-04  3.07e-01  
 11  +4.8721e-01  +6.7495e-01  1.88e-01  4.85e-05  1.13e-02  7.90e-04  1.35e-04  4.29e-01  
 12  +4.8658e-01  +6.6895e-01  1.82e-01  4.65e-05  1.09e-02  6.71e-04  1.29e-04  1.44e-01  
 13  +4.8042e-01  +6.3313e-01  1.53e-01  3.23e-05  7.52e-03  3.45e-04  9.00e-05  6.02e-01  
 14  +4.7630e-01  +6.1846e-01  1.42e-01  3.16e-05  7.35e-03  2.88e-04  9.00e-05  2.69e-02  
 15  +4.5651e-01  +5.3874e-01  8.22e-02  1.39e-05  3.23e-03  1.75e-04  4.08e-05  5.97e-01  
 16  +4.3158e-01  +4.4780e-01  1.62e-02  2.61e-06  6.05e-04  1.73e-06  8.18e-06  9.07e-01  
 17  +4.2452e-01  +4.2477e-01  2.51e-04  3.96e-08  9.18e-06  1.73e-08  1.27e-07  9.87e-01  
 18  +4.2440e-01  +4.2440e-01  2.52e-06  3.96e-10  9.18e-08  1.73e-10  1.27e-09  9.90e-01  
 19  +4.2440e-01  +4.2440e-01  2.52e-08  3.96e-12  9.18e-10  1.74e-12  1.28e-11  9.90e-01  
 20  +4.2440e-01  +4.2440e-01  2.52e-10  3.96e-14  9.18e-12  1.75e-14  1.29e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 167.1199ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:55 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 04:10:55 PM: Compilation took 4.695e-02 seconds
(CVXPY) Oct 06 04:10:55 PM: Solver (including time spent in interface) took 1.726e-01 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:55 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:55 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 65711
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8408e-01  +1.0697e+03  1.07e+03  4.19e-01  7.36e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3464e-01  +1.2615e+02  1.26e+02  1.63e-01  3.66e+01  1.48e-02  2.66e-01  9.02e-01  
  3  +5.0921e-01  +3.2528e+01  3.20e+01  1.22e-01  2.71e+01  3.96e-05  2.52e-01  2.20e-01  
  4  +5.0077e-01  +2.4565e+00  1.96e+00  1.33e-02  3.02e+00  5.63e-06  1.51e-01  7.14e-01  
  5  +5.0012e-01  +9.0293e-01  4.03e-01  2.70e-03  6.23e-01  2.34e-05  6.00e-02  9.90e-01  
  6  +5.0002e-01  +7.5626e-01  2.56e-01  1.63e-03  3.76e-01  4.51e-05  1.32e-02  8.16e-01  
  7  +4.9812e-01  +7.7142e-01  2.73e-01  1.83e-04  4.29e-02  1.12e-03  5.11e-04  9.64e-01  
  8  +4.9325e-01  +7.4328e-01  2.50e-01  6.27e-05  1.47e-02  2.74e-03  1.72e-04  6.98e-01  
  9  +4.8974e-01  +7.1117e-01  2.21e-01  5.25e-05  1.23e-02  1.94e-03  1.45e-04  3.27e-01  
 10  +4.8623e-01  +6.8161e-01  1.95e-01  4.50e-05  1.05e-02  1.03e-03  1.25e-04  4.23e-01  
 11  +4.8456e-01  +6.7399e-01  1.89e-01  4.46e-05  1.04e-02  9.19e-04  1.24e-04  4.66e-02  
 12  +4.6965e-01  +6.0899e-01  1.39e-01  2.63e-05  6.12e-03  6.78e-04  7.54e-05  4.56e-01  
 13  +4.4389e-01  +5.0336e-01  5.95e-02  1.07e-05  2.49e-03  1.22e-05  3.32e-05  8.05e-01  
 14  +4.2402e-01  +4.3353e-01  9.51e-03  1.60e-06  3.70e-04  1.19e-06  5.25e-06  8.68e-01  
 15  +4.2015e-01  +4.2070e-01  5.48e-04  9.12e-08  2.11e-05  6.02e-08  3.07e-07  9.46e-01  
 16  +4.1990e-01  +4.1991e-01  5.83e-06  9.70e-10  2.25e-07  6.16e-10  3.28e-09  9.90e-01  
 17  +4.1990e-01  +4.1990e-01  5.83e-08  9.70e-12  2.25e-09  6.15e-12  3.28e-11  9.90e-01  
 18  +4.1990e-01  +4.1990e-01  5.83e-10  9.70e-14  2.25e-11  6.19e-14  3.30e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.2142ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:55 PM: Optimal value: 4.199e-01
(CVXPY) Oct 06 04:10:55 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:10:55 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 3, Objective: 0.4199
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:56 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:56 PM: Finished problem compilation (took 5.257e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 66365
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8404e-01  +1.0697e+03  1.07e+03  4.19e-01  7.35e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3460e-01  +1.2607e+02  1.26e+02  1.63e-01  3.65e+01  1.48e-02  2.65e-01  9.02e-01  
  3  +5.0920e-01  +3.2504e+01  3.20e+01  1.22e-01  2.70e+01  3.96e-05  2.52e-01  2.21e-01  
  4  +5.0077e-01  +2.4564e+00  1.96e+00  1.33e-02  3.02e+00  5.64e-06  1.51e-01  7.15e-01  
  5  +5.0012e-01  +9.0693e-01  4.07e-01  2.73e-03  6.29e-01  2.35e-05  5.94e-02  9.90e-01  
  6  +5.0003e-01  +7.9119e-01  2.91e-01  1.79e-03  4.13e-01  5.21e-05  1.20e-02  9.00e-01  
  7  +4.9813e-01  +7.8941e-01  2.91e-01  1.82e-04  4.26e-02  1.11e-03  5.04e-04  9.60e-01  
  8  +4.9381e-01  +7.5646e-01  2.63e-01  6.92e-05  1.62e-02  2.35e-03  1.89e-04  6.71e-01  
  9  +4.9085e-01  +7.2642e-01  2.36e-01  5.72e-05  1.34e-02  1.72e-03  1.56e-04  3.48e-01  
 10  +4.8830e-01  +7.0492e-01  2.17e-01  5.04e-05  1.18e-02  1.26e-03  1.38e-04  2.85e-01  
 11  +4.8662e-01  +6.9496e-01  2.08e-01  4.64e-05  1.09e-02  1.08e-03  1.28e-04  1.80e-01  
 12  +4.8216e-01  +6.6451e-01  1.82e-01  4.18e-05  9.76e-03  4.41e-04  1.17e-04  4.39e-01  
 13  +4.5469e-01  +5.4935e-01  9.47e-02  1.62e-05  3.77e-03  1.42e-04  4.78e-05  7.73e-01  
 14  +4.4714e-01  +5.2190e-01  7.48e-02  1.27e-05  2.95e-03  9.08e-05  3.84e-05  3.29e-01  
 15  +4.3111e-01  +4.6359e-01  3.25e-02  5.41e-06  1.26e-03  8.13e-06  1.72e-05  8.88e-01  
 16  +4.1886e-01  +4.2111e-01  2.25e-03  3.70e-07  8.57e-05  3.82e-07  1.23e-06  9.43e-01  
 17  +4.1791e-01  +4.1794e-01  2.50e-05  4.10e-09  9.51e-07  4.19e-09  1.37e-08  9.89e-01  
 18  +4.1790e-01  +4.1790e-01  2.51e-07  4.11e-11  9.52e-09  4.20e-11  1.37e-10  9.90e-01  
 19  +4.1790e-01  +4.1790e-01  2.51e-09  4.11e-13  9.53e-11  4.21e-13  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 162.5703ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:56 PM: Optimal value: 4.179e-01
(CVXPY) Oct 06 04:10:56 PM: Compilation took 5.257e-02 seconds
(CVXPY) Oct 06 04:10:56 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 4, Objective: 0.4179
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:56 PM: Your problem has 5057 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:56 PM: Finished problem compilation (took 4.730e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5057
  constraints   = 10057
  nnz(P)        = 0
  nnz(A)        = 67426
  cones (total) = 1
    : Nonnegative = 1,  numel = 10057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8399e-01  +1.0696e+03  1.07e+03  4.19e-01  7.35e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3452e-01  +1.2586e+02  1.25e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0917e-01  +3.2429e+01  3.19e+01  1.21e-01  2.70e+01  3.96e-05  2.51e-01  2.23e-01  
  4  +5.0077e-01  +2.4372e+00  1.94e+00  1.32e-02  2.99e+00  5.67e-06  1.49e-01  7.23e-01  
  5  +5.0017e-01  +1.0299e+00  5.30e-01  3.56e-03  8.19e-01  2.23e-05  6.73e-02  8.71e-01  
  6  +5.0004e-01  +7.9081e-01  2.91e-01  1.80e-03  4.16e-01  4.17e-05  1.23e-02  9.13e-01  
  7  +4.9852e-01  +7.9957e-01  3.01e-01  1.97e-04  4.63e-02  8.96e-04  5.38e-04  9.59e-01  
  8  +4.9393e-01  +7.7673e-01  2.83e-01  6.23e-05  1.46e-02  2.49e-03  1.67e-04  7.27e-01  
  9  +4.8881e-01  +7.4411e-01  2.55e-01  5.22e-05  1.22e-02  2.06e-03  1.42e-04  2.50e-01  
 10  +4.7687e-01  +6.7297e-01  1.96e-01  4.27e-05  9.97e-03  6.86e-04  1.21e-04  4.35e-01  
 11  +4.5316e-01  +5.6974e-01  1.17e-01  2.24e-05  5.21e-03  2.27e-04  6.73e-05  6.07e-01  
 12  +4.4420e-01  +5.3496e-01  9.08e-02  1.70e-05  3.94e-03  1.52e-04  5.25e-05  2.97e-01  
 13  +4.3510e-01  +4.9899e-01  6.39e-02  1.15e-05  2.67e-03  2.67e-05  3.66e-05  8.08e-01  
 14  +4.1684e-01  +4.3224e-01  1.54e-02  2.68e-06  6.21e-04  4.62e-06  9.10e-06  7.92e-01  
 15  +4.1130e-01  +4.1268e-01  1.39e-03  2.39e-07  5.53e-05  1.31e-07  8.33e-07  9.87e-01  
 16  +4.1071e-01  +4.1072e-01  1.49e-05  2.57e-09  5.96e-07  1.39e-09  9.01e-09  9.89e-01  
 17  +4.1070e-01  +4.1070e-01  1.49e-07  2.57e-11  5.96e-09  1.39e-11  9.01e-11  9.90e-01  
 18  +4.1070e-01  +4.1070e-01  1.49e-09  2.58e-13  5.96e-11  1.39e-13  9.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.3256ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:56 PM: Optimal value: 4.107e-01
(CVXPY) Oct 06 04:10:56 PM: Compilation took 4.730e-02 seconds
(CVXPY) Oct 06 04:10:56 PM: Solver (including time spent in interface) took 1.566e-01 seconds
Iteration: 5, Objective: 0.4107
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:56 PM: Your problem has 5067 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:56 PM: Finished problem compilation (took 4.806e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5067
  constraints   = 10067
  nnz(P)        = 0
  nnz(A)        = 68106
  cones (total) = 1
    : Nonnegative = 1,  numel = 10067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8385e-01  +1.0698e+03  1.07e+03  4.20e-01  7.34e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3442e-01  +1.2570e+02  1.25e+02  1.63e-01  3.63e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0915e-01  +3.2389e+01  3.19e+01  1.21e-01  2.69e+01  3.98e-05  2.51e-01  2.25e-01  
  4  +5.0077e-01  +2.4420e+00  1.94e+00  1.32e-02  3.00e+00  5.69e-06  1.48e-01  7.24e-01  
  5  +5.0016e-01  +1.0127e+00  5.12e-01  3.45e-03  7.92e-01  2.32e-05  6.30e-02  9.05e-01  
  6  +5.0003e-01  +8.3361e-01  3.34e-01  1.86e-03  4.31e-01  6.20e-05  9.31e-03  9.71e-01  
  7  +4.9831e-01  +8.3180e-01  3.33e-01  1.96e-04  4.61e-02  1.00e-03  5.33e-04  9.44e-01  
  8  +4.9370e-01  +8.0030e-01  3.07e-01  6.94e-05  1.63e-02  2.36e-03  1.86e-04  7.02e-01  
  9  +4.8937e-01  +7.6872e-01  2.79e-01  5.93e-05  1.39e-02  1.89e-03  1.60e-04  2.58e-01  
 10  +4.8402e-01  +7.3317e-01  2.49e-01  5.42e-05  1.27e-02  1.29e-03  1.49e-04  2.08e-01  
 11  +4.6797e-01  +6.5247e-01  1.84e-01  3.71e-05  8.66e-03  7.02e-04  1.06e-04  4.11e-01  
 12  +4.4060e-01  +5.3091e-01  9.03e-02  1.72e-05  4.00e-03  1.12e-04  5.39e-05  6.73e-01  
 13  +4.3743e-01  +5.1821e-01  8.08e-02  1.52e-05  3.52e-03  7.14e-05  4.78e-05  3.68e-01  
 14  +4.2093e-01  +4.5588e-01  3.49e-02  6.28e-06  1.45e-03  1.81e-05  2.10e-05  7.16e-01  
 15  +4.0874e-01  +4.1129e-01  2.56e-03  4.50e-07  1.04e-04  7.63e-07  1.58e-06  9.45e-01  
 16  +4.0771e-01  +4.0775e-01  3.27e-05  5.75e-09  1.33e-06  8.55e-09  2.04e-08  9.89e-01  
 17  +4.0770e-01  +4.0770e-01  3.28e-07  5.76e-11  1.33e-08  8.57e-11  2.04e-10  9.90e-01  
 18  +4.0770e-01  +4.0770e-01  3.28e-09  5.76e-13  1.33e-10  8.57e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.3533ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:57 PM: Optimal value: 4.077e-01
(CVXPY) Oct 06 04:10:57 PM: Compilation took 4.806e-02 seconds
(CVXPY) Oct 06 04:10:57 PM: Solver (including time spent in interface) took 1.570e-01 seconds
Iteration: 6, Objective: 0.4077
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:57 PM: Your problem has 5077 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:57 PM: Finished problem compilation (took 4.698e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5077
  constraints   = 10077
  nnz(P)        = 0
  nnz(A)        = 68907
  cones (total) = 1
    : Nonnegative = 1,  numel = 10077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8377e-01  +1.0699e+03  1.07e+03  4.20e-01  7.34e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3435e-01  +1.2555e+02  1.25e+02  1.63e-01  3.62e+01  1.48e-02  2.64e-01  9.05e-01  
  3  +5.0913e-01  +3.2340e+01  3.18e+01  1.21e-01  2.68e+01  3.98e-05  2.51e-01  2.27e-01  
  4  +5.0076e-01  +2.4343e+00  1.93e+00  1.32e-02  2.99e+00  5.72e-06  1.47e-01  7.28e-01  
  5  +5.0017e-01  +1.0166e+00  5.16e-01  3.47e-03  7.98e-01  2.38e-05  5.95e-02  9.21e-01  
  6  +5.0004e-01  +9.2723e-01  4.27e-01  2.25e-03  5.23e-01  7.71e-05  1.01e-02  9.16e-01  
  7  +4.9832e-01  +9.1884e-01  4.21e-01  2.57e-04  6.03e-02  1.01e-03  6.99e-04  9.32e-01  
  8  +4.9407e-01  +8.6241e-01  3.68e-01  9.61e-05  2.26e-02  2.03e-03  2.59e-04  6.95e-01  
  9  +4.9169e-01  +8.2810e-01  3.36e-01  8.67e-05  2.04e-02  1.48e-03  2.34e-04  2.49e-01  
 10  +4.8719e-01  +7.9570e-01  3.09e-01  7.00e-05  1.64e-02  1.32e-03  1.90e-04  2.74e-01  
 11  +4.8156e-01  +7.5033e-01  2.69e-01  6.31e-05  1.48e-02  7.51e-04  1.75e-04  2.83e-01  
 12  +4.6747e-01  +6.7216e-01  2.05e-01  4.41e-05  1.03e-02  4.00e-04  1.27e-04  4.36e-01  
 13  +4.4331e-01  +5.5908e-01  1.16e-01  2.29e-05  5.31e-03  1.34e-04  7.10e-05  5.65e-01  
 14  +4.3559e-01  +5.2725e-01  9.17e-02  1.77e-05  4.11e-03  9.50e-05  5.65e-05  2.67e-01  
 15  +4.1918e-01  +4.5941e-01  4.02e-02  7.40e-06  1.71e-03  8.61e-06  2.51e-05  8.91e-01  
 16  +4.0600e-01  +4.0984e-01  3.84e-03  6.96e-07  1.61e-04  4.78e-07  2.50e-06  9.38e-01  
 17  +4.0453e-01  +4.0460e-01  7.44e-05  1.35e-08  3.11e-06  8.61e-09  4.89e-08  9.82e-01  
 18  +4.0450e-01  +4.0450e-01  7.45e-07  1.35e-10  3.12e-08  8.62e-11  4.90e-10  9.90e-01  
 19  +4.0450e-01  +4.0450e-01  7.45e-09  1.35e-12  3.12e-10  8.62e-13  4.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 167.8453ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:57 PM: Optimal value: 4.045e-01
(CVXPY) Oct 06 04:10:57 PM: Compilation took 4.698e-02 seconds
(CVXPY) Oct 06 04:10:57 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 7, Objective: 0.4045
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:57 PM: Your problem has 5080 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:57 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5080
  constraints   = 10080
  nnz(P)        = 0
  nnz(A)        = 69088
  cones (total) = 1
    : Nonnegative = 1,  numel = 10080

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8371e-01  +1.0700e+03  1.07e+03  4.20e-01  7.34e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3432e-01  +1.2551e+02  1.25e+02  1.63e-01  3.62e+01  1.48e-02  2.64e-01  9.06e-01  
  3  +5.0912e-01  +3.2333e+01  3.18e+01  1.21e-01  2.68e+01  3.99e-05  2.51e-01  2.28e-01  
  4  +5.0077e-01  +2.4376e+00  1.94e+00  1.32e-02  2.99e+00  5.72e-06  1.47e-01  7.28e-01  
  5  +5.0019e-01  +1.0746e+00  5.74e-01  3.87e-03  8.88e-01  2.35e-05  6.38e-02  8.72e-01  
  6  +5.0006e-01  +9.4877e-01  4.49e-01  2.43e-03  5.63e-01  6.73e-05  1.13e-02  9.32e-01  
  7  +4.9854e-01  +9.4149e-01  4.43e-01  2.81e-04  6.61e-02  8.90e-04  7.66e-04  9.33e-01  
  8  +4.9475e-01  +8.8439e-01  3.90e-01  1.04e-04  2.45e-02  1.84e-03  2.80e-04  7.00e-01  
  9  +4.9044e-01  +8.2773e-01  3.37e-01  8.91e-05  2.09e-02  1.21e-03  2.42e-04  2.93e-01  
 10  +4.8663e-01  +7.9402e-01  3.07e-01  7.45e-05  1.75e-02  9.27e-04  2.04e-04  3.12e-01  
 11  +4.8625e-01  +7.9020e-01  3.04e-01  7.41e-05  1.74e-02  8.80e-04  2.03e-04  3.19e-02  
 12  +4.7963e-01  +7.3674e-01  2.57e-01  6.33e-05  1.48e-02  3.75e-04  1.78e-04  4.38e-01  
 13  +4.5858e-01  +6.3078e-01  1.72e-01  3.55e-05  8.27e-03  1.71e-04  1.06e-04  5.73e-01  
 14  +4.3621e-01  +5.3179e-01  9.56e-02  1.90e-05  4.40e-03  3.18e-05  6.11e-05  6.78e-01  
 15  +4.1266e-01  +4.3769e-01  2.50e-02  4.69e-06  1.09e-03  5.11e-06  1.65e-05  7.76e-01  
 16  +4.0908e-01  +4.2416e-01  1.51e-02  2.78e-06  6.44e-04  2.70e-06  1.00e-05  5.11e-01  
 17  +4.0855e-01  +4.2155e-01  1.30e-02  2.39e-06  5.54e-04  1.29e-06  8.66e-06  7.35e-01  
 18  +4.0840e-01  +4.2100e-01  1.26e-02  2.32e-06  5.36e-04  1.19e-06  8.37e-06  1.73e-01  
 19  +4.0631e-01  +4.1359e-01  7.28e-03  1.34e-06  3.09e-04  6.52e-07  4.88e-06  5.24e-01  
 20  +4.0375e-01  +4.0463e-01  8.76e-04  1.60e-07  3.71e-05  5.62e-08  5.96e-07  9.76e-01  
 21  +4.0340e-01  +4.0341e-01  1.04e-05  1.90e-09  4.40e-07  6.66e-10  7.09e-09  9.88e-01  
 22  +4.0340e-01  +4.0340e-01  1.04e-07  1.90e-11  4.40e-09  6.66e-12  7.09e-11  9.90e-01  
 23  +4.0340e-01  +4.0340e-01  1.04e-09  1.90e-13  4.40e-11  6.67e-14  7.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 190.6268ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:58 PM: Optimal value: 4.034e-01
(CVXPY) Oct 06 04:10:58 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:10:58 PM: Solver (including time spent in interface) took 2.040e-01 seconds
Iteration: 8, Objective: 0.4034
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:58 PM: Your problem has 5090 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:58 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5090
  constraints   = 10090
  nnz(P)        = 0
  nnz(A)        = 69751
  cones (total) = 1
    : Nonnegative = 1,  numel = 10090

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8358e-01  +1.0703e+03  1.07e+03  4.21e-01  7.33e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3426e-01  +1.2543e+02  1.25e+02  1.62e-01  3.61e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0911e-01  +3.2317e+01  3.18e+01  1.21e-01  2.68e+01  4.00e-05  2.50e-01  2.30e-01  
  4  +5.0077e-01  +2.4457e+00  1.94e+00  1.33e-02  3.01e+00  5.74e-06  1.47e-01  7.28e-01  
  5  +5.0021e-01  +1.1338e+00  6.34e-01  4.27e-03  9.79e-01  2.32e-05  6.75e-02  8.30e-01  
  6  +5.0008e-01  +9.5445e-01  4.54e-01  2.62e-03  6.06e-01  5.53e-05  1.36e-02  8.95e-01  
  7  +4.9874e-01  +9.4816e-01  4.49e-01  3.09e-04  7.27e-02  7.88e-04  8.44e-04  9.41e-01  
  8  +4.9541e-01  +8.9450e-01  3.99e-01  1.16e-04  2.72e-02  1.64e-03  3.11e-04  6.98e-01  
  9  +4.9115e-01  +8.3748e-01  3.46e-01  9.64e-05  2.26e-02  1.15e-03  2.61e-04  3.04e-01  
 10  +4.8605e-01  +7.9473e-01  3.09e-01  7.54e-05  1.77e-02  9.00e-04  2.07e-04  3.57e-01  
 11  +4.8262e-01  +7.6337e-01  2.81e-01  7.07e-05  1.66e-02  5.49e-04  1.97e-04  2.65e-01  
 12  +4.7322e-01  +7.0697e-01  2.34e-01  5.35e-05  1.25e-02  2.45e-04  1.52e-04  5.34e-01  
 13  +4.5670e-01  +6.2294e-01  1.66e-01  3.61e-05  8.41e-03  7.64e-05  1.09e-04  5.64e-01  
 14  +4.3198e-01  +5.1532e-01  8.33e-02  1.65e-05  3.83e-03  1.96e-05  5.39e-05  6.63e-01  
 15  +4.2240e-01  +4.7736e-01  5.50e-02  1.06e-05  2.45e-03  1.18e-05  3.60e-05  3.81e-01  
 16  +4.0848e-01  +4.2273e-01  1.42e-02  2.64e-06  6.11e-04  1.55e-06  9.54e-06  8.96e-01  
 17  +4.0839e-01  +4.2242e-01  1.40e-02  2.59e-06  5.99e-04  1.51e-06  9.35e-06  4.94e-02  
 18  +4.0690e-01  +4.1636e-01  9.46e-03  1.74e-06  4.02e-04  6.11e-07  6.32e-06  9.90e-01  
 19  +4.0398e-01  +4.0618e-01  2.20e-03  4.05e-07  9.36e-05  1.40e-07  1.50e-06  8.14e-01  
 20  +4.0311e-01  +4.0314e-01  2.86e-05  5.25e-09  1.21e-06  1.79e-09  1.97e-08  9.87e-01  
 21  +4.0310e-01  +4.0310e-01  2.86e-07  5.25e-11  1.21e-08  1.79e-11  1.97e-10  9.90e-01  
 22  +4.0310e-01  +4.0310e-01  2.86e-09  5.26e-13  1.22e-10  1.79e-13  1.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 176.1908ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:58 PM: Optimal value: 4.031e-01
(CVXPY) Oct 06 04:10:58 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:10:58 PM: Solver (including time spent in interface) took 1.952e-01 seconds
Iteration: 9, Objective: 0.4031
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:58 PM: Your problem has 5094 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:58 PM: Finished problem compilation (took 4.714e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5094
  constraints   = 10094
  nnz(P)        = 0
  nnz(A)        = 69953
  cones (total) = 1
    : Nonnegative = 1,  numel = 10094

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8359e-01  +1.0701e+03  1.07e+03  4.20e-01  7.33e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3425e-01  +1.2539e+02  1.25e+02  1.62e-01  3.61e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0911e-01  +3.2304e+01  3.18e+01  1.21e-01  2.67e+01  3.99e-05  2.50e-01  2.30e-01  
  4  +5.0077e-01  +2.4435e+00  1.94e+00  1.33e-02  3.00e+00  5.74e-06  1.47e-01  7.28e-01  
  5  +5.0019e-01  +1.0784e+00  5.78e-01  3.89e-03  8.94e-01  2.40e-05  6.24e-02  8.81e-01  
  6  +5.0007e-01  +9.8433e-01  4.84e-01  2.55e-03  5.91e-01  7.29e-05  1.13e-02  9.24e-01  
  7  +4.9855e-01  +9.7412e-01  4.76e-01  3.03e-04  7.12e-02  8.90e-04  8.25e-04  9.28e-01  
  8  +4.9485e-01  +9.0642e-01  4.12e-01  1.14e-04  2.69e-02  1.74e-03  3.08e-04  6.98e-01  
  9  +4.9036e-01  +8.4371e-01  3.53e-01  9.57e-05  2.25e-02  1.16e-03  2.60e-04  3.08e-01  
 10  +4.8554e-01  +8.0093e-01  3.15e-01  7.73e-05  1.81e-02  8.84e-04  2.12e-04  3.25e-01  
 11  +4.8300e-01  +7.6836e-01  2.85e-01  7.27e-05  1.70e-02  4.61e-04  2.02e-04  3.35e-01  
 12  +4.7092e-01  +6.9664e-01  2.26e-01  5.06e-05  1.18e-02  2.03e-04  1.45e-04  5.66e-01  
 13  +4.5498e-01  +6.1906e-01  1.64e-01  3.48e-05  8.10e-03  1.03e-04  1.05e-04  4.13e-01  
 14  +4.3184e-01  +5.1692e-01  8.51e-02  1.68e-05  3.90e-03  3.24e-05  5.50e-05  5.97e-01  
 15  +4.2060e-01  +4.7082e-01  5.02e-02  9.58e-06  2.22e-03  1.20e-05  3.27e-05  6.44e-01  
 16  +4.0798e-01  +4.2158e-01  1.36e-02  2.54e-06  5.87e-04  2.64e-06  9.20e-06  7.66e-01  
 17  +4.0787e-01  +4.2118e-01  1.33e-02  2.47e-06  5.71e-04  2.49e-06  8.96e-06  7.91e-02  
 18  +4.0515e-01  +4.1052e-01  5.37e-03  9.89e-07  2.29e-04  3.69e-07  3.65e-06  9.90e-01  
 19  +4.0307e-01  +4.0324e-01  1.70e-04  3.13e-08  7.24e-06  1.04e-08  1.18e-07  9.90e-01  
 20  +4.0300e-01  +4.0300e-01  1.71e-06  3.15e-10  7.29e-08  1.04e-10  1.19e-09  9.90e-01  
 21  +4.0300e-01  +4.0300e-01  1.71e-08  3.15e-12  7.29e-10  1.04e-12  1.19e-11  9.90e-01  
 22  +4.0300e-01  +4.0300e-01  1.71e-10  3.15e-14  7.29e-12  1.04e-14  1.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.6949ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:58 PM: Optimal value: 4.030e-01
(CVXPY) Oct 06 04:10:58 PM: Compilation took 4.714e-02 seconds
(CVXPY) Oct 06 04:10:58 PM: Solver (including time spent in interface) took 2.193e-01 seconds
Iteration: 10, Objective: 0.4030
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:59 PM: Your problem has 5095 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:59 PM: Finished problem compilation (took 4.643e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5095
  constraints   = 10095
  nnz(P)        = 0
  nnz(A)        = 70038
  cones (total) = 1
    : Nonnegative = 1,  numel = 10095

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8358e-01  +1.0701e+03  1.07e+03  4.20e-01  7.33e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3424e-01  +1.2536e+02  1.25e+02  1.62e-01  3.61e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0911e-01  +3.2297e+01  3.18e+01  1.21e-01  2.67e+01  3.99e-05  2.50e-01  2.30e-01  
  4  +5.0077e-01  +2.4428e+00  1.94e+00  1.33e-02  3.00e+00  5.74e-06  1.47e-01  7.29e-01  
  5  +5.0020e-01  +1.0924e+00  5.92e-01  3.99e-03  9.15e-01  2.40e-05  6.31e-02  8.72e-01  
  6  +5.0006e-01  +9.9787e-01  4.98e-01  2.52e-03  5.85e-01  7.74e-05  1.07e-02  9.47e-01  
  7  +4.9856e-01  +9.8729e-01  4.89e-01  3.07e-04  7.23e-02  8.79e-04  8.38e-04  9.22e-01  
  8  +4.9497e-01  +9.1461e-01  4.20e-01  1.19e-04  2.79e-02  1.65e-03  3.19e-04  6.95e-01  
  9  +4.9086e-01  +8.5627e-01  3.65e-01  1.01e-04  2.37e-02  1.16e-03  2.74e-04  2.74e-01  
 10  +4.8493e-01  +7.9764e-01  3.13e-01  7.71e-05  1.81e-02  7.70e-04  2.13e-04  4.13e-01  
 11  +4.8221e-01  +7.6572e-01  2.84e-01  7.36e-05  1.72e-02  4.17e-04  2.05e-04  3.00e-01  
 12  +4.7356e-01  +7.1548e-01  2.42e-01  5.53e-05  1.29e-02  2.41e-04  1.57e-04  4.74e-01  
 13  +4.5855e-01  +6.3058e-01  1.72e-01  3.96e-05  9.20e-03  1.58e-05  1.19e-04  7.21e-01  
 14  +4.3285e-01  +5.1928e-01  8.64e-02  1.72e-05  4.00e-03  5.37e-06  5.61e-05  7.16e-01  
 15  +4.2900e-01  +5.0386e-01  7.49e-02  1.47e-05  3.40e-03  4.61e-06  4.85e-05  2.80e-01  
 16  +4.1466e-01  +4.4734e-01  3.27e-02  6.21e-06  1.44e-03  1.87e-06  2.18e-05  6.09e-01  
 17  +4.0824e-01  +4.2224e-01  1.40e-02  2.60e-06  6.00e-04  8.39e-07  9.39e-06  7.84e-01  
 18  +4.0795e-01  +4.2069e-01  1.27e-02  2.37e-06  5.48e-04  7.69e-07  8.61e-06  5.24e-01  
 19  +4.0683e-01  +4.1638e-01  9.55e-03  1.76e-06  4.07e-04  5.98e-07  6.40e-06  9.74e-01  
 20  +4.0394e-01  +4.0627e-01  2.33e-03  4.30e-07  9.94e-05  1.41e-07  1.60e-06  9.90e-01  
 21  +4.0306e-01  +4.0321e-01  1.48e-04  2.74e-08  6.33e-06  8.92e-09  1.03e-07  9.49e-01  
 22  +4.0300e-01  +4.0300e-01  1.49e-06  2.75e-10  6.36e-08  8.97e-11  1.03e-09  9.90e-01  
 23  +4.0300e-01  +4.0300e-01  1.49e-08  2.75e-12  6.36e-10  8.97e-13  1.03e-11  9.90e-01  
 24  +4.0300e-01  +4.0300e-01  1.49e-10  2.76e-14  6.36e-12  8.98e-15  1.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 200.5214ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:59 PM: Optimal value: 4.030e-01
(CVXPY) Oct 06 04:10:59 PM: Compilation took 4.643e-02 seconds
(CVXPY) Oct 06 04:10:59 PM: Solver (including time spent in interface) took 2.199e-01 seconds
Iteration: 11, Objective: 0.4030
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:10:59 PM: Your problem has 5098 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:10:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:10:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:10:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:10:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:10:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:10:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:10:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:10:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:10:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:10:59 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5098
  constraints   = 10098
  nnz(P)        = 0
  nnz(A)        = 70151
  cones (total) = 1
    : Nonnegative = 1,  numel = 10098

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8355e-01  +1.0703e+03  1.07e+03  4.21e-01  7.33e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3421e-01  +1.2533e+02  1.25e+02  1.62e-01  3.61e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0910e-01  +3.2294e+01  3.18e+01  1.21e-01  2.67e+01  4.00e-05  2.50e-01  2.30e-01  
  4  +5.0077e-01  +2.4470e+00  1.95e+00  1.33e-02  3.01e+00  5.74e-06  1.47e-01  7.28e-01  
  5  +5.0020e-01  +1.1072e+00  6.07e-01  4.09e-03  9.38e-01  2.39e-05  6.41e-02  8.62e-01  
  6  +5.0006e-01  +9.7590e-01  4.76e-01  2.48e-03  5.75e-01  7.30e-05  1.09e-02  9.32e-01  
  7  +4.9858e-01  +9.6842e-01  4.70e-01  3.03e-04  7.12e-02  8.65e-04  8.27e-04  9.25e-01  
  8  +4.9494e-01  +9.0334e-01  4.08e-01  1.16e-04  2.72e-02  1.68e-03  3.11e-04  6.98e-01  
  9  +4.9095e-01  +8.4649e-01  3.56e-01  9.98e-05  2.34e-02  1.12e-03  2.71e-04  2.83e-01  
 10  +4.8675e-01  +7.9571e-01  3.09e-01  8.14e-05  1.91e-02  6.05e-04  2.24e-04  4.57e-01  
 11  +4.8415e-01  +7.6795e-01  2.84e-01  7.70e-05  1.80e-02  3.25e-04  2.14e-04  3.39e-01  
 12  +4.7529e-01  +7.1881e-01  2.44e-01  5.69e-05  1.33e-02  2.05e-04  1.61e-04  4.66e-01  
 13  +4.6086e-01  +6.4039e-01  1.80e-01  4.19e-05  9.74e-03  2.23e-05  1.25e-04  6.95e-01  
 14  +4.3443e-01  +5.2572e-01  9.13e-02  1.83e-05  4.24e-03  6.15e-06  5.93e-05  7.57e-01  
 15  +4.2460e-01  +4.8664e-01  6.20e-02  1.21e-05  2.79e-03  3.92e-06  4.07e-05  5.18e-01  
 16  +4.1174e-01  +4.3636e-01  2.46e-02  4.65e-06  1.08e-03  1.46e-06  1.66e-05  6.65e-01  
 17  +4.0936e-01  +4.2715e-01  1.78e-02  3.33e-06  7.71e-04  1.06e-06  1.21e-05  3.45e-01  
 18  +4.0866e-01  +4.2341e-01  1.48e-02  2.75e-06  6.35e-04  9.00e-07  9.99e-06  9.02e-01  
 19  +4.0830e-01  +4.2209e-01  1.38e-02  2.57e-06  5.93e-04  8.48e-07  9.34e-06  2.84e-01  
 20  +4.0561e-01  +4.1246e-01  6.85e-03  1.27e-06  2.94e-04  4.24e-07  4.71e-06  5.76e-01  
 21  +4.0326e-01  +4.0417e-01  9.06e-04  1.68e-07  3.89e-05  5.20e-08  6.34e-07  9.90e-01  
 22  +4.0291e-01  +4.0292e-01  1.38e-05  2.56e-09  5.92e-07  7.94e-10  9.69e-09  9.85e-01  
 23  +4.0290e-01  +4.0290e-01  1.38e-07  2.56e-11  5.92e-09  7.94e-12  9.69e-11  9.90e-01  
 24  +4.0290e-01  +4.0290e-01  1.38e-09  2.56e-13  5.92e-11  7.96e-14  9.70e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.9083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:10:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:10:59 PM: Optimal value: 4.029e-01
(CVXPY) Oct 06 04:10:59 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:10:59 PM: Solver (including time spent in interface) took 2.193e-01 seconds
Iteration: 12, Objective: 0.4029
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:00 PM: Your problem has 5100 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:00 PM: Finished problem compilation (took 5.233e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5100
  constraints   = 10100
  nnz(P)        = 0
  nnz(A)        = 70231
  cones (total) = 1
    : Nonnegative = 1,  numel = 10100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8353e-01  +1.0703e+03  1.07e+03  4.21e-01  7.33e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3420e-01  +1.2530e+02  1.25e+02  1.62e-01  3.60e+01  1.49e-02  2.64e-01  9.07e-01  
  3  +5.0910e-01  +3.2288e+01  3.18e+01  1.21e-01  2.67e+01  4.00e-05  2.50e-01  2.30e-01  
  4  +5.0077e-01  +2.4483e+00  1.95e+00  1.33e-02  3.01e+00  5.75e-06  1.47e-01  7.28e-01  
  5  +5.0020e-01  +1.1055e+00  6.05e-01  4.08e-03  9.35e-01  2.41e-05  6.37e-02  8.65e-01  
  6  +5.0006e-01  +9.8264e-01  4.83e-01  2.47e-03  5.72e-01  7.58e-05  1.06e-02  9.41e-01  
  7  +4.9857e-01  +9.7426e-01  4.76e-01  3.04e-04  7.16e-02  8.69e-04  8.30e-04  9.22e-01  
  8  +4.9492e-01  +9.0537e-01  4.10e-01  1.17e-04  2.74e-02  1.65e-03  3.14e-04  6.99e-01  
  9  +4.9066e-01  +8.4042e-01  3.50e-01  9.97e-05  2.34e-02  9.91e-04  2.71e-04  3.24e-01  
 10  +4.8825e-01  +8.1211e-01  3.24e-01  8.90e-05  2.09e-02  7.32e-04  2.44e-04  2.67e-01  
 11  +4.8478e-01  +7.8935e-01  3.05e-01  7.60e-05  1.78e-02  6.47e-04  2.10e-04  2.32e-01  
 12  +4.8423e-01  +7.8464e-01  3.00e-01  7.53e-05  1.76e-02  6.09e-04  2.08e-04  3.78e-02  
 13  +4.7926e-01  +7.3341e-01  2.54e-01  6.99e-05  1.64e-02  8.24e-05  1.99e-04  5.99e-01  
 14  +4.6755e-01  +6.7865e-01  2.11e-01  4.70e-05  1.10e-02  6.47e-05  1.36e-04  4.39e-01  
 15  +4.5218e-01  +6.0120e-01  1.49e-01  3.48e-05  8.07e-03  5.72e-07  1.09e-04  8.02e-01  
 16  +4.3431e-01  +5.2851e-01  9.42e-02  1.95e-05  4.51e-03  8.69e-07  6.40e-05  4.75e-01  
 17  +4.2116e-01  +4.7530e-01  5.41e-02  1.06e-05  2.45e-03  1.09e-06  3.64e-05  5.61e-01  
 18  +4.0762e-01  +4.2125e-01  1.36e-02  2.54e-06  5.88e-04  7.81e-07  9.26e-06  9.90e-01  
 19  +4.0292e-01  +4.0400e-01  1.08e-03  2.02e-07  4.67e-05  5.97e-08  7.64e-07  9.28e-01  
 20  +4.0250e-01  +4.0252e-01  1.18e-05  2.19e-09  5.07e-07  6.40e-10  8.33e-09  9.89e-01  
 21  +4.0250e-01  +4.0250e-01  1.18e-07  2.19e-11  5.07e-09  6.40e-12  8.33e-11  9.90e-01  
 22  +4.0250e-01  +4.0250e-01  1.18e-09  2.19e-13  5.07e-11  6.41e-14  8.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 186.1479ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:00 PM: Optimal value: 4.025e-01
(CVXPY) Oct 06 04:11:00 PM: Compilation took 5.233e-02 seconds
(CVXPY) Oct 06 04:11:00 PM: Solver (including time spent in interface) took 1.879e-01 seconds
FULL MODEL:
  Accruacy: 0.5884
  Our objective: 0.1768

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.1514)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.0054)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0022)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.0026)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0042)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1)                       <-- (term's our objective: 0.0046)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 13.210949420928955
Best over terms:
  Our final objective: 0.1514
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1514
  Highest accruacy: 0.5757
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

