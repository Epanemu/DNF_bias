Command:
python test_script.py -s constant_subclass -d 5 -n 50 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.6799999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:42 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:42 PM: Finished problem compilation (took 4.022e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9247e-01  +2.6010e+01  2.55e+01  8.20e-01  5.80e+00  1.00e+00  1.08e+00   ------   
  1  +5.8780e-01  +5.4355e+00  4.85e+00  3.05e-01  3.10e+00  3.94e-03  5.39e-01  6.49e-01  
  2  +5.1013e-01  +1.0382e+00  5.28e-01  5.73e-02  6.87e-01  1.25e-02  1.61e-01  9.65e-01  
  3  +4.7513e-01  +8.5607e-01  3.81e-01  2.31e-02  2.88e-01  1.27e-02  7.37e-02  6.41e-01  
  4  +4.3289e-01  +5.4130e-01  1.08e-01  5.51e-03  6.85e-02  2.97e-03  2.10e-02  7.41e-01  
  5  +4.0776e-01  +4.3431e-01  2.65e-02  1.12e-03  1.39e-02  5.42e-04  5.45e-03  8.41e-01  
  6  +4.0026e-01  +4.0075e-01  4.88e-04  2.05e-05  2.55e-04  5.84e-06  1.06e-04  9.90e-01  
  7  +4.0010e-01  +4.0011e-01  4.88e-06  2.05e-07  2.55e-06  5.85e-08  1.06e-06  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  4.88e-08  2.05e-09  2.55e-08  5.85e-10  1.06e-08  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  4.88e-10  2.05e-11  2.55e-10  5.85e-12  1.06e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 418.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:42 PM: Optimal value: 4.001e-01
(CVXPY) Oct 06 03:52:42 PM: Compilation took 4.022e-02 seconds
(CVXPY) Oct 06 03:52:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:42 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:42 PM: Finished problem compilation (took 4.282e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 284
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7854e-01  +2.6523e+01  2.60e+01  8.35e-01  6.04e+00  1.00e+00  1.11e+00   ------   
  1  +5.2666e-01  +5.4829e+00  4.96e+00  3.18e-01  3.12e+00  3.96e-03  5.55e-01  6.49e-01  
  2  +4.3744e-01  +1.4055e+00  9.68e-01  7.38e-02  9.15e-01  1.45e-02  1.92e-01  8.38e-01  
  3  +3.0310e-01  +7.8458e-01  4.81e-01  2.18e-02  2.79e-01  1.04e-02  6.55e-02  7.22e-01  
  4  +2.2922e-01  +3.7375e-01  1.45e-01  6.33e-03  8.13e-02  2.60e-03  2.14e-02  7.36e-01  
  5  +1.9691e-01  +2.5328e-01  5.64e-02  2.26e-03  3.07e-02  8.46e-04  7.99e-03  7.96e-01  
  6  +1.8129e-01  +1.8405e-01  2.76e-03  1.11e-04  1.50e-03  3.49e-05  4.12e-04  9.55e-01  
  7  +1.8048e-01  +1.8068e-01  2.03e-04  8.56e-06  1.12e-04  1.37e-06  3.32e-05  9.20e-01  
  8  +1.8040e-01  +1.8041e-01  7.75e-06  3.43e-07  4.32e-06  6.17e-08  1.46e-06  9.64e-01  
  9  +1.8040e-01  +1.8040e-01  7.73e-08  3.43e-09  4.31e-08  6.15e-10  1.47e-08  9.90e-01  
 10  +1.8040e-01  +1.8040e-01  7.74e-10  3.43e-11  4.32e-10  6.16e-12  1.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 474.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:42 PM: Optimal value: 1.804e-01
(CVXPY) Oct 06 03:52:42 PM: Compilation took 4.282e-03 seconds
(CVXPY) Oct 06 03:52:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:42 PM: Your problem has 49 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:42 PM: Finished problem compilation (took 5.022e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 49
  constraints   = 74
  nnz(P)        = 0
  nnz(A)        = 294
  cones (total) = 1
    : Nonnegative = 1,  numel = 74

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7641e-01  +2.6561e+01  2.61e+01  8.38e-01  5.98e+00  1.00e+00  1.11e+00   ------   
  1  +5.0705e-01  +5.4789e+00  4.97e+00  3.17e-01  3.04e+00  4.00e-03  5.52e-01  6.49e-01  
  2  +4.0306e-01  +1.4292e+00  1.03e+00  7.13e-02  8.66e-01  1.46e-02  1.85e-01  8.31e-01  
  3  +2.6708e-01  +6.4231e-01  3.75e-01  1.80e-02  2.23e-01  6.91e-03  5.35e-02  7.66e-01  
  4  +2.0404e-01  +3.3713e-01  1.33e-01  5.94e-03  7.60e-02  2.46e-03  1.95e-02  7.22e-01  
  5  +1.7230e-01  +2.0868e-01  3.64e-02  1.57e-03  2.04e-02  4.67e-04  5.47e-03  8.25e-01  
  6  +1.6102e-01  +1.6256e-01  1.54e-03  6.60e-05  8.59e-04  1.58e-05  2.39e-04  9.58e-01  
  7  +1.6056e-01  +1.6071e-01  1.50e-04  6.73e-06  8.46e-05  9.13e-07  2.63e-05  8.96e-01  
  8  +1.6050e-01  +1.6051e-01  7.91e-06  3.64e-07  4.47e-06  5.65e-08  1.52e-06  9.56e-01  
  9  +1.6050e-01  +1.6050e-01  7.89e-08  3.64e-09  4.47e-08  5.64e-10  1.53e-08  9.90e-01  
 10  +1.6050e-01  +1.6050e-01  7.90e-10  3.64e-11  4.47e-10  5.64e-12  1.53e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 547.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:42 PM: Optimal value: 1.605e-01
(CVXPY) Oct 06 03:52:42 PM: Compilation took 5.022e-03 seconds
(CVXPY) Oct 06 03:52:42 PM: Solver (including time spent in interface) took 5.015e-03 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.68

IF 
    (x0 = 0 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x3 = 0)                       <-- (term's our objective: 0.36)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0)            <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.155091285705566
Best over terms:
  Our final objective: 0.35999999999999993
    Its accruacy: 0.68
    Its hamming distance: 3
  Shortest hamming distance: 2
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

