Command:
python test_script.py -s constant_subclass -d 4 -n 5000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15599999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.1592
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:47 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:47 PM: Finished problem compilation (took 5.991e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5007e+03  2.50e+03  9.78e-01  6.04e+01  1.00e+00  1.00e+00   ------   
  1  +6.0814e-01  +4.8463e+02  4.84e+02  3.36e-01  3.36e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5086e-01  +7.5511e+01  7.50e+01  1.37e-01  1.67e+01  8.23e-03  2.27e-01  7.26e-01  
  3  +5.1003e-01  +1.5711e+01  1.52e+01  9.61e-02  1.14e+01  1.69e-05  2.24e-01  7.50e-02  
  4  +5.0004e-01  +1.0272e+00  5.27e-01  5.01e-03  6.05e-01  6.26e-06  1.48e-01  7.95e-01  
  5  +4.9996e-01  +6.2171e-01  1.22e-01  1.15e-03  1.40e-01  2.33e-06  2.99e-02  8.25e-01  
  6  +4.9554e-01  +1.0769e+00  5.81e-01  1.14e-03  1.40e-01  8.04e-05  3.79e-03  9.61e-01  
  7  +4.8294e-01  +8.1929e-01  3.36e-01  2.14e-04  2.62e-02  1.89e-04  6.89e-04  8.21e-01  
  8  +4.7019e-01  +5.2958e-01  5.94e-02  3.01e-05  3.69e-03  3.97e-06  1.03e-04  9.45e-01  
  9  +4.5953e-01  +4.8305e-01  2.35e-02  1.04e-05  1.28e-03  1.58e-06  4.05e-05  6.90e-01  
 10  +4.5328e-01  +4.5628e-01  3.00e-03  1.25e-06  1.52e-04  2.66e-07  5.24e-06  9.90e-01  
 11  +4.5231e-01  +4.5235e-01  3.93e-05  1.63e-08  1.99e-06  3.43e-09  6.93e-08  9.87e-01  
 12  +4.5230e-01  +4.5230e-01  3.93e-07  1.63e-10  1.99e-08  3.43e-11  6.93e-10  9.90e-01  
 13  +4.5230e-01  +4.5230e-01  3.93e-09  1.63e-12  1.99e-10  3.44e-13  6.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.271ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:47 PM: Optimal value: 4.523e-01
(CVXPY) Oct 06 03:50:47 PM: Compilation took 5.991e-02 seconds
(CVXPY) Oct 06 03:50:47 PM: Solver (including time spent in interface) took 3.000e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:47 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:47 PM: Finished problem compilation (took 1.467e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22499
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5014e+03  2.50e+03  9.78e-01  6.48e+01  1.00e+00  1.00e+00   ------   
  1  +6.0782e-01  +4.8549e+02  4.85e+02  3.37e-01  3.60e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5036e-01  +7.5020e+01  7.45e+01  1.37e-01  1.78e+01  8.34e-03  2.27e-01  7.31e-01  
  3  +5.0972e-01  +1.5396e+01  1.49e+01  9.52e-02  1.20e+01  1.69e-05  2.24e-01  8.15e-02  
  4  +5.0085e-01  +2.2834e+00  1.78e+00  1.69e-02  2.15e+00  7.76e-06  1.92e-01  3.19e-01  
  5  +5.0007e-01  +7.6469e-01  2.65e-01  2.51e-03  3.26e-01  2.02e-06  5.73e-02  8.01e-01  
  6  +4.9981e-01  +1.0380e+00  5.38e-01  4.09e-03  5.34e-01  9.00e-06  1.97e-02  8.79e-01  
  7  +4.9228e-01  +6.9481e-01  2.03e-01  1.68e-04  2.22e-02  1.05e-04  4.85e-04  9.76e-01  
  8  +4.8741e-01  +6.6616e-01  1.79e-01  1.14e-04  1.51e-02  1.03e-04  3.24e-04  4.28e-01  
  9  +4.8215e-01  +6.4131e-01  1.59e-01  7.81e-05  1.03e-02  1.06e-04  2.18e-04  3.79e-01  
 10  +4.8064e-01  +6.4021e-01  1.60e-01  6.66e-05  8.78e-03  8.70e-05  1.85e-04  4.19e-01  
 11  +4.7848e-01  +6.3204e-01  1.54e-01  6.61e-05  8.72e-03  7.90e-05  1.85e-04  1.87e-02  
 12  +4.6375e-01  +5.7547e-01  1.12e-01  3.90e-05  5.13e-03  4.84e-05  1.12e-04  5.57e-01  
 13  +4.3419e-01  +4.6194e-01  2.77e-02  9.08e-06  1.19e-03  7.28e-07  2.82e-05  9.01e-01  
 14  +4.2242e-01  +4.2306e-01  6.41e-04  2.02e-07  2.64e-05  3.24e-08  6.50e-07  9.84e-01  
 15  +4.2210e-01  +4.2211e-01  6.41e-06  2.02e-09  2.64e-07  3.24e-10  6.50e-09  9.90e-01  
 16  +4.2210e-01  +4.2210e-01  6.41e-08  2.02e-11  2.64e-09  3.25e-12  6.53e-11  9.90e-01  
 17  +4.2210e-01  +4.2210e-01  6.41e-10  2.02e-13  2.64e-11  3.26e-14  6.55e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.6388ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:47 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 03:50:47 PM: Compilation took 1.467e-02 seconds
(CVXPY) Oct 06 03:50:47 PM: Solver (including time spent in interface) took 5.372e-02 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:47 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:47 PM: Finished problem compilation (took 1.271e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 22812
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0001e-01  +2.5011e+03  2.50e+03  9.78e-01  6.49e+01  1.00e+00  1.01e+00   ------   
  1  +6.0701e-01  +4.8733e+02  4.87e+02  3.40e-01  3.62e+01  4.08e-03  4.80e-01  6.64e-01  
  2  +5.5016e-01  +7.5003e+01  7.45e+01  1.37e-01  1.78e+01  8.52e-03  2.28e-01  7.36e-01  
  3  +5.0973e-01  +1.5456e+01  1.49e+01  9.56e-02  1.21e+01  1.73e-05  2.25e-01  8.45e-02  
  4  +5.0055e-01  +1.8417e+00  1.34e+00  1.28e-02  1.63e+00  7.59e-06  1.81e-01  4.27e-01  
  5  +5.0012e-01  +8.8964e-01  3.90e-01  3.71e-03  4.81e-01  2.74e-06  7.43e-02  6.19e-01  
  6  +5.0008e-01  +9.2911e-01  4.29e-01  4.04e-03  5.23e-01  3.92e-06  4.88e-02  4.59e-01  
  7  +4.9982e-01  +9.9763e-01  4.98e-01  3.63e-03  4.74e-01  8.75e-06  1.69e-02  8.59e-01  
  8  +4.9473e-01  +8.8484e-01  3.90e-01  4.21e-04  5.56e-02  7.55e-05  1.28e-03  9.26e-01  
  9  +4.9536e-01  +8.5641e-01  3.61e-01  3.76e-04  4.96e-02  5.71e-05  1.11e-03  3.37e-01  
 10  +4.9205e-01  +7.6123e-01  2.69e-01  2.22e-04  2.93e-02  3.54e-05  6.48e-04  7.04e-01  
 11  +4.9227e-01  +7.5545e-01  2.63e-01  1.97e-04  2.60e-02  2.95e-05  5.67e-04  4.33e-01  
 12  +4.8887e-01  +7.0528e-01  2.16e-01  1.45e-04  1.92e-02  1.61e-05  4.14e-04  8.36e-01  
 13  +4.8381e-01  +6.7635e-01  1.93e-01  1.04e-04  1.37e-02  1.70e-05  2.95e-04  3.08e-01  
 14  +4.8293e-01  +6.7453e-01  1.92e-01  8.97e-05  1.18e-02  1.85e-05  2.55e-04  6.75e-01  
 15  +4.7814e-01  +6.5631e-01  1.78e-01  7.76e-05  1.02e-02  1.80e-05  2.21e-04  3.69e-01  
 16  +4.4852e-01  +5.2750e-01  7.90e-02  2.72e-05  3.57e-03  8.15e-06  8.28e-05  7.62e-01  
 17  +4.2888e-01  +4.4955e-01  2.07e-02  7.13e-06  9.32e-04  2.80e-06  2.35e-05  9.90e-01  
 18  +4.2139e-01  +4.2300e-01  1.61e-03  5.51e-07  7.20e-05  1.79e-07  1.90e-06  9.23e-01  
 19  +4.2071e-01  +4.2073e-01  2.25e-05  7.73e-09  1.01e-06  2.29e-09  2.72e-08  9.88e-01  
 20  +4.2070e-01  +4.2070e-01  2.25e-07  7.72e-11  1.01e-08  2.29e-11  2.72e-10  9.90e-01  
 21  +4.2070e-01  +4.2070e-01  2.25e-09  7.72e-13  1.01e-10  2.29e-13  2.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.9189ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:47 PM: Optimal value: 4.207e-01
(CVXPY) Oct 06 03:50:47 PM: Compilation took 1.271e-02 seconds
(CVXPY) Oct 06 03:50:47 PM: Solver (including time spent in interface) took 6.692e-02 seconds
FULL MODEL:
  Accruacy: 0.5796
  Our objective: 0.15920000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.156)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.0012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.065946817398071
Best over terms:
  Our final objective: 0.15599999999999997
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15599999999999997
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

