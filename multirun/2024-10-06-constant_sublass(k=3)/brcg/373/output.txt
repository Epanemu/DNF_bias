Command:
python test_script.py -s constant_subclass -d 10 -n 100 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 10.

Computed total variation: 0.9800000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:08 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:08 PM: Finished problem compilation (took 4.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 671
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9767e-01  +5.1315e+01  5.08e+01  8.75e-01  1.08e+01  1.00e+00  1.04e+00   ------   
  1  +5.7079e-01  +1.1392e+01  1.08e+01  3.92e-01  6.60e+00  3.73e-03  6.07e-01  5.81e-01  
  2  +5.0471e-01  +1.8756e+00  1.37e+00  1.05e-01  2.20e+00  2.11e-02  2.67e-01  9.90e-01  
  3  +4.7187e-01  +8.9456e-01  4.23e-01  2.18e-02  4.89e-01  1.21e-02  6.66e-02  8.22e-01  
  4  +4.4018e-01  +6.0886e-01  1.69e-01  6.62e-03  1.46e-01  3.72e-03  2.41e-02  7.00e-01  
  5  +4.2508e-01  +4.7959e-01  5.45e-02  2.09e-03  4.54e-02  8.76e-04  8.38e-03  7.16e-01  
  6  +4.1991e-01  +4.3684e-01  1.69e-02  6.41e-04  1.39e-02  2.44e-04  2.68e-03  7.23e-01  
  7  +4.1731e-01  +4.2028e-01  2.97e-03  1.08e-04  2.33e-03  2.10e-05  4.79e-04  9.33e-01  
  8  +4.1681e-01  +4.1685e-01  3.94e-05  1.42e-06  3.08e-05  2.70e-07  6.39e-06  9.87e-01  
  9  +4.1680e-01  +4.1680e-01  3.94e-07  1.42e-08  3.08e-07  2.70e-09  6.39e-08  9.90e-01  
 10  +4.1680e-01  +4.1680e-01  3.94e-09  1.42e-10  3.08e-09  2.70e-11  6.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0255ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:08 PM: Optimal value: 4.168e-01
(CVXPY) Oct 06 04:23:08 PM: Compilation took 4.125e-02 seconds
(CVXPY) Oct 06 04:23:08 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4168
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:09 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Finished problem compilation (took 1.109e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 780
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9432e-01  +5.1620e+01  5.11e+01  8.81e-01  1.08e+01  1.00e+00  1.05e+00   ------   
  1  +5.5109e-01  +1.1381e+01  1.08e+01  3.97e-01  6.43e+00  3.75e-03  6.06e-01  5.85e-01  
  2  +4.7924e-01  +2.0181e+00  1.54e+00  1.02e-01  2.16e+00  2.31e-02  2.52e-01  9.90e-01  
  3  +4.2470e-01  +9.1474e-01  4.90e-01  2.15e-02  4.82e-01  1.20e-02  6.13e-02  8.15e-01  
  4  +3.8721e-01  +6.2078e-01  2.34e-01  7.70e-03  1.69e-01  4.85e-03  2.79e-02  6.76e-01  
  5  +3.6563e-01  +4.7634e-01  1.11e-01  3.10e-03  6.91e-02  1.86e-03  1.25e-02  6.98e-01  
  6  +3.5278e-01  +4.0751e-01  5.47e-02  1.45e-03  3.29e-02  7.19e-04  6.20e-03  6.05e-01  
  7  +3.4134e-01  +3.4548e-01  4.14e-03  1.07e-04  2.43e-03  3.32e-05  4.98e-04  9.31e-01  
  8  +3.4032e-01  +3.4039e-01  7.09e-05  1.84e-06  4.15e-05  5.21e-07  8.64e-06  9.83e-01  
  9  +3.4030e-01  +3.4030e-01  7.34e-07  1.91e-08  4.30e-07  5.32e-09  8.98e-08  9.90e-01  
 10  +3.4030e-01  +3.4030e-01  7.34e-09  1.91e-10  4.30e-09  5.32e-11  8.99e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1053ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:09 PM: Optimal value: 3.403e-01
(CVXPY) Oct 06 04:23:09 PM: Compilation took 1.109e-02 seconds
(CVXPY) Oct 06 04:23:09 PM: Solver (including time spent in interface) took 1.259e-03 seconds
Iteration: 2, Objective: 0.3403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:09 PM: Your problem has 91 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 91
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 886
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9162e-01  +5.1849e+01  5.14e+01  8.85e-01  1.08e+01  1.00e+00  1.06e+00   ------   
  1  +5.2921e-01  +1.1386e+01  1.09e+01  4.01e-01  6.29e+00  3.78e-03  6.04e-01  5.89e-01  
  2  +4.4608e-01  +2.3706e+00  1.92e+00  1.07e-01  2.26e+00  2.47e-02  2.57e-01  9.32e-01  
  3  +3.8304e-01  +9.4857e-01  5.66e-01  2.33e-02  5.19e-01  1.12e-02  6.49e-02  7.73e-01  
  4  +3.3394e-01  +6.4245e-01  3.09e-01  8.96e-03  2.04e-01  6.53e-03  2.72e-02  6.86e-01  
  5  +2.9673e-01  +4.6807e-01  1.71e-01  3.88e-03  9.10e-02  3.55e-03  1.28e-02  6.25e-01  
  6  +2.6660e-01  +3.4541e-01  7.88e-02  1.66e-03  3.98e-02  1.31e-03  5.74e-03  6.36e-01  
  7  +2.4908e-01  +2.7413e-01  2.51e-02  5.10e-04  1.23e-02  3.76e-04  1.84e-03  7.17e-01  
  8  +2.4093e-01  +2.4187e-01  9.48e-04  1.94e-05  4.67e-04  5.29e-06  7.18e-05  9.90e-01  
  9  +2.4053e-01  +2.4060e-01  6.50e-05  1.36e-06  3.19e-05  2.38e-07  5.32e-06  9.29e-01  
 10  +2.4050e-01  +2.4050e-01  7.74e-07  1.64e-08  3.79e-07  2.82e-09  6.55e-08  9.88e-01  
 11  +2.4050e-01  +2.4050e-01  7.74e-09  1.64e-10  3.79e-09  2.82e-11  6.56e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6882ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:09 PM: Optimal value: 2.405e-01
(CVXPY) Oct 06 04:23:09 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:09 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:09 PM: Your problem has 101 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 101
  constraints   = 151
  nnz(P)        = 0
  nnz(A)        = 956
  cones (total) = 1
    : Nonnegative = 1,  numel = 151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8774e-01  +5.2023e+01  5.15e+01  8.89e-01  1.06e+01  1.00e+00  1.06e+00   ------   
  1  +4.9911e-01  +1.1397e+01  1.09e+01  4.01e-01  6.06e+00  3.83e-03  5.99e-01  5.92e-01  
  2  +3.9470e-01  +2.9113e+00  2.52e+00  1.16e-01  2.38e+00  2.60e-02  2.67e-01  8.58e-01  
  3  +3.1957e-01  +1.0141e+00  6.95e-01  2.56e-02  5.52e-01  1.12e-02  6.99e-02  7.97e-01  
  4  +2.6796e-01  +6.9589e-01  4.28e-01  1.21e-02  2.66e-01  7.11e-03  3.57e-02  5.70e-01  
  5  +2.1510e-01  +3.6466e-01  1.50e-01  3.81e-03  8.55e-02  2.13e-03  1.23e-02  7.18e-01  
  6  +1.9543e-01  +2.8996e-01  9.45e-02  2.16e-03  5.21e-02  1.34e-03  7.00e-03  5.13e-01  
  7  +1.7006e-01  +1.9263e-01  2.26e-02  4.81e-04  1.19e-02  1.71e-04  1.66e-03  9.24e-01  
  8  +1.6134e-01  +1.6246e-01  1.13e-03  2.37e-05  5.87e-04  5.22e-06  8.36e-05  9.90e-01  
  9  +1.6084e-01  +1.6093e-01  8.43e-05  1.85e-06  4.42e-05  2.30e-07  6.98e-06  9.22e-01  
 10  +1.6080e-01  +1.6080e-01  1.02e-06  2.27e-08  5.32e-07  2.99e-09  8.83e-08  9.88e-01  
 11  +1.6080e-01  +1.6080e-01  1.02e-08  2.27e-10  5.31e-09  2.99e-11  8.83e-10  9.90e-01  
 12  +1.6080e-01  +1.6080e-01  1.02e-10  2.27e-12  5.31e-11  2.99e-13  8.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5701ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:09 PM: Optimal value: 1.608e-01
(CVXPY) Oct 06 04:23:09 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:09 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:09 PM: Your problem has 111 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 111
  constraints   = 161
  nnz(P)        = 0
  nnz(A)        = 1005
  cones (total) = 1
    : Nonnegative = 1,  numel = 161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8183e-01  +5.2613e+01  5.21e+01  8.93e-01  1.04e+01  1.00e+00  1.08e+00   ------   
  1  +4.3492e-01  +1.1645e+01  1.12e+01  3.91e-01  5.77e+00  4.00e-03  5.91e-01  5.91e-01  
  2  +2.8803e-01  +2.6553e+00  2.37e+00  9.19e-02  1.82e+00  2.82e-02  2.12e-01  9.29e-01  
  3  +2.0977e-01  +9.7152e-01  7.62e-01  2.63e-02  5.35e-01  1.05e-02  6.83e-02  7.44e-01  
  4  +1.5174e-01  +3.7195e-01  2.20e-01  7.30e-03  1.48e-01  2.49e-03  2.16e-02  7.61e-01  
  5  +1.3343e-01  +3.0659e-01  1.73e-01  4.79e-03  1.07e-01  1.96e-03  1.44e-02  4.83e-01  
  6  +1.0622e-01  +1.8879e-01  8.26e-02  2.05e-03  4.68e-02  8.75e-04  6.64e-03  5.96e-01  
  7  +8.3853e-02  +9.1788e-02  7.94e-03  1.90e-04  4.30e-03  5.29e-05  6.58e-04  9.34e-01  
  8  +8.1317e-02  +8.1612e-02  2.95e-04  7.21e-06  1.61e-04  9.63e-07  2.58e-05  9.62e-01  
  9  +8.1203e-02  +8.1211e-02  7.83e-06  2.02e-07  4.35e-06  2.54e-08  7.80e-07  9.76e-01  
 10  +8.1200e-02  +8.1200e-02  7.82e-08  2.02e-09  4.35e-08  2.54e-10  7.82e-09  9.90e-01  
 11  +8.1200e-02  +8.1200e-02  7.82e-10  2.02e-11  4.35e-10  2.54e-12  7.83e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:09 PM: Optimal value: 8.120e-02
(CVXPY) Oct 06 04:23:09 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:09 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 5, Objective: 0.0812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:09 PM: Your problem has 121 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Finished problem compilation (took 6.067e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 121
  constraints   = 171
  nnz(P)        = 0
  nnz(A)        = 1047
  cones (total) = 1
    : Nonnegative = 1,  numel = 171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7884e-01  +5.3262e+01  5.28e+01  8.95e-01  1.02e+01  1.00e+00  1.09e+00   ------   
  1  +3.9833e-01  +1.1869e+01  1.15e+01  3.92e-01  5.59e+00  4.07e-03  5.92e-01  5.88e-01  
  2  +2.3301e-01  +2.8192e+00  2.59e+00  9.38e-02  1.80e+00  2.81e-02  2.14e-01  9.04e-01  
  3  +1.8105e-01  +7.3490e-01  5.54e-01  2.03e-02  4.00e-01  7.70e-03  5.32e-02  7.71e-01  
  4  +1.3189e-01  +4.1048e-01  2.79e-01  8.93e-03  1.82e-01  3.28e-03  2.57e-02  7.54e-01  
  5  +9.9107e-02  +2.4891e-01  1.50e-01  3.81e-03  8.61e-02  1.88e-03  1.16e-02  6.53e-01  
  6  +6.5556e-02  +1.0174e-01  3.62e-02  8.36e-04  1.92e-02  1.30e-04  2.77e-03  9.90e-01  
  7  +5.2473e-02  +5.5115e-02  2.64e-03  5.91e-05  1.35e-03  8.16e-06  2.04e-04  9.31e-01  
  8  +5.1559e-02  +5.1909e-02  3.51e-04  8.26e-06  1.83e-04  8.74e-07  3.00e-05  8.64e-01  
  9  +5.1406e-02  +5.1417e-02  1.13e-05  2.76e-07  5.96e-06  3.79e-08  1.06e-06  9.84e-01  
 10  +5.1400e-02  +5.1400e-02  1.13e-07  2.77e-09  5.96e-08  3.78e-10  1.06e-08  9.90e-01  
 11  +5.1400e-02  +5.1400e-02  1.13e-09  2.77e-11  5.96e-10  3.79e-12  1.06e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7651ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:09 PM: Optimal value: 5.140e-02
(CVXPY) Oct 06 04:23:09 PM: Compilation took 6.067e-03 seconds
(CVXPY) Oct 06 04:23:09 PM: Solver (including time spent in interface) took 2.227e-03 seconds
Iteration: 6, Objective: 0.0514
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:09 PM: Your problem has 131 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 131
  constraints   = 181
  nnz(P)        = 0
  nnz(A)        = 1090
  cones (total) = 1
    : Nonnegative = 1,  numel = 181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7824e-01  +5.3290e+01  5.28e+01  8.98e-01  9.95e+00  1.00e+00  1.09e+00   ------   
  1  +3.8536e-01  +1.2014e+01  1.16e+01  3.96e-01  5.43e+00  4.13e-03  5.91e-01  5.83e-01  
  2  +2.2749e-01  +3.0571e+00  2.83e+00  1.05e-01  1.94e+00  2.80e-02  2.34e-01  8.64e-01  
  3  +1.7148e-01  +8.9935e-01  7.28e-01  2.68e-02  5.18e-01  9.19e-03  6.90e-02  7.40e-01  
  4  +1.2315e-01  +3.6619e-01  2.43e-01  8.61e-03  1.69e-01  2.87e-03  2.43e-02  7.75e-01  
  5  +9.6174e-02  +2.7026e-01  1.74e-01  4.72e-03  1.06e-01  2.13e-03  1.39e-02  5.85e-01  
  6  +6.1607e-02  +1.2068e-01  5.91e-02  1.41e-03  3.24e-02  4.35e-04  4.53e-03  8.66e-01  
  7  +4.4003e-02  +5.1210e-02  7.21e-03  1.64e-04  3.76e-03  4.73e-05  5.53e-04  8.81e-01  
  8  +4.1764e-02  +4.2441e-02  6.77e-04  1.60e-05  3.57e-04  3.25e-06  5.55e-05  9.01e-01  
  9  +4.1522e-02  +4.1570e-02  4.75e-05  1.19e-06  2.55e-05  1.98e-07  4.40e-06  9.73e-01  
 10  +4.1500e-02  +4.1501e-02  4.92e-07  1.23e-08  2.64e-07  1.99e-09  4.61e-08  9.90e-01  
 11  +4.1500e-02  +4.1500e-02  4.92e-09  1.23e-10  2.64e-09  1.99e-11  4.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8374ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:09 PM: Optimal value: 4.150e-02
(CVXPY) Oct 06 04:23:09 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:09 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0415
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:09 PM: Your problem has 141 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:09 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 141
  constraints   = 191
  nnz(P)        = 0
  nnz(A)        = 1110
  cones (total) = 1
    : Nonnegative = 1,  numel = 191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7614e-01  +5.3346e+01  5.29e+01  9.00e-01  9.72e+00  1.00e+00  1.08e+00   ------   
  1  +3.4790e-01  +1.2211e+01  1.19e+01  3.94e-01  5.26e+00  4.24e-03  5.84e-01  5.77e-01  
  2  +1.7688e-01  +2.4143e+00  2.24e+00  8.30e-02  1.52e+00  2.95e-02  1.88e-01  9.62e-01  
  3  +1.4940e-01  +7.8929e-01  6.40e-01  2.58e-02  4.81e-01  8.74e-03  6.48e-02  6.75e-01  
  4  +1.1699e-01  +4.7597e-01  3.59e-01  1.35e-02  2.58e-01  4.12e-03  3.61e-02  6.58e-01  
  5  +8.2097e-02  +2.3130e-01  1.49e-01  4.57e-03  9.60e-02  1.92e-03  1.33e-02  6.96e-01  
  6  +5.4307e-02  +1.2156e-01  6.73e-02  1.75e-03  3.85e-02  5.21e-04  5.51e-03  8.01e-01  
  7  +3.4615e-02  +4.3200e-02  8.58e-03  2.05e-04  4.57e-03  6.06e-05  6.84e-04  8.88e-01  
  8  +3.1919e-02  +3.2776e-02  8.57e-04  2.11e-05  4.61e-04  4.41e-06  7.32e-05  8.95e-01  
  9  +3.1634e-02  +3.1712e-02  7.80e-05  2.02e-06  4.25e-05  3.35e-07  7.48e-06  9.43e-01  
 10  +3.1600e-02  +3.1601e-02  8.65e-07  2.26e-08  4.74e-07  3.51e-09  8.48e-08  9.89e-01  
 11  +3.1600e-02  +3.1600e-02  8.65e-09  2.26e-10  4.74e-09  3.51e-11  8.48e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0146ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:09 PM: Optimal value: 3.160e-02
(CVXPY) Oct 06 04:23:09 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:09 PM: Solver (including time spent in interface) took 1.558e-02 seconds
Iteration: 8, Objective: 0.0316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:10 PM: Your problem has 142 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 142
  constraints   = 192
  nnz(P)        = 0
  nnz(A)        = 1113
  cones (total) = 1
    : Nonnegative = 1,  numel = 192

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7531e-01  +5.2878e+01  5.24e+01  9.00e-01  9.69e+00  1.00e+00  1.07e+00   ------   
  1  +3.3749e-01  +1.2181e+01  1.18e+01  3.92e-01  5.21e+00  4.29e-03  5.76e-01  5.76e-01  
  2  +1.6956e-01  +2.2071e+00  2.04e+00  7.66e-02  1.40e+00  2.96e-02  1.72e-01  9.90e-01  
  3  +1.4526e-01  +7.6888e-01  6.24e-01  2.57e-02  4.73e-01  8.98e-03  6.34e-02  6.62e-01  
  4  +1.1427e-01  +4.6242e-01  3.48e-01  1.33e-02  2.53e-01  4.36e-03  3.48e-02  6.25e-01  
  5  +7.7267e-02  +2.1192e-01  1.35e-01  4.12e-03  8.66e-02  1.90e-03  1.18e-02  7.29e-01  
  6  +4.9805e-02  +1.0462e-01  5.48e-02  1.42e-03  3.15e-02  5.54e-04  4.38e-03  7.75e-01  
  7  +3.3110e-02  +3.7497e-02  4.39e-03  1.08e-04  2.39e-03  3.32e-05  3.48e-04  9.32e-01  
  8  +3.1796e-02  +3.2321e-02  5.25e-04  1.35e-05  2.92e-04  2.85e-06  4.59e-05  8.73e-01  
  9  +3.1610e-02  +3.1633e-02  2.24e-05  6.04e-07  1.27e-05  8.95e-08  2.16e-06  9.82e-01  
 10  +3.1600e-02  +3.1600e-02  2.26e-07  6.11e-09  1.28e-07  8.98e-10  2.19e-08  9.90e-01  
 11  +3.1600e-02  +3.1600e-02  2.27e-09  6.12e-11  1.28e-09  8.99e-12  2.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8788ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:10 PM: Optimal value: 3.160e-02
(CVXPY) Oct 06 04:23:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0316
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:10 PM: Your problem has 152 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 152
  constraints   = 202
  nnz(P)        = 0
  nnz(A)        = 1135
  cones (total) = 1
    : Nonnegative = 1,  numel = 202

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7498e-01  +5.2769e+01  5.23e+01  9.03e-01  9.47e+00  1.00e+00  1.07e+00   ------   
  1  +3.2467e-01  +1.2204e+01  1.19e+01  3.94e-01  5.05e+00  4.33e-03  5.73e-01  5.74e-01  
  2  +1.5938e-01  +2.2542e+00  2.09e+00  7.87e-02  1.40e+00  2.95e-02  1.78e-01  9.77e-01  
  3  +1.4045e-01  +8.1840e-01  6.78e-01  2.81e-02  5.04e-01  9.58e-03  6.98e-02  6.35e-01  
  4  +1.1540e-01  +5.4688e-01  4.31e-01  1.68e-02  3.09e-01  5.36e-03  4.39e-02  5.51e-01  
  5  +7.7940e-02  +2.4341e-01  1.65e-01  5.43e-03  1.07e-01  2.33e-03  1.55e-02  6.84e-01  
  6  +6.0737e-02  +1.8183e-01  1.21e-01  3.45e-03  7.19e-02  1.61e-03  1.02e-02  4.31e-01  
  7  +3.1049e-02  +6.0378e-02  2.93e-02  7.23e-04  1.56e-02  3.30e-04  2.32e-03  8.22e-01  
  8  +2.2217e-02  +2.3679e-02  1.46e-03  3.61e-05  7.68e-04  9.86e-06  1.20e-04  9.51e-01  
  9  +2.1785e-02  +2.2015e-02  2.30e-04  6.09e-06  1.24e-04  1.28e-06  2.21e-05  8.58e-01  
 10  +2.1701e-02  +2.1705e-02  3.31e-06  8.94e-08  1.80e-06  1.36e-08  3.32e-07  9.86e-01  
 11  +2.1700e-02  +2.1700e-02  3.31e-08  8.94e-10  1.80e-08  1.36e-10  3.32e-09  9.90e-01  
 12  +2.1700e-02  +2.1700e-02  3.32e-10  8.97e-12  1.80e-10  1.36e-12  3.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9899ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:10 PM: Optimal value: 2.170e-02
(CVXPY) Oct 06 04:23:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:10 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.0217
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:10 PM: Your problem has 162 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 162
  constraints   = 212
  nnz(P)        = 0
  nnz(A)        = 1172
  cones (total) = 1
    : Nonnegative = 1,  numel = 212

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7448e-01  +5.2828e+01  5.24e+01  9.05e-01  9.29e+00  1.00e+00  1.07e+00   ------   
  1  +3.2580e-01  +1.2295e+01  1.20e+01  4.01e-01  4.92e+00  4.35e-03  5.74e-01  5.71e-01  
  2  +1.6272e-01  +2.7330e+00  2.57e+00  9.50e-02  1.65e+00  2.84e-02  2.13e-01  8.96e-01  
  3  +1.4048e-01  +6.7874e-01  5.38e-01  2.22e-02  4.00e-01  7.03e-03  5.67e-02  7.59e-01  
  4  +1.0571e-01  +4.5586e-01  3.50e-01  1.29e-02  2.42e-01  3.76e-03  3.46e-02  6.77e-01  
  5  +6.8057e-02  +2.0908e-01  1.41e-01  4.15e-03  8.62e-02  1.77e-03  1.21e-02  7.00e-01  
  6  +3.9461e-02  +9.0022e-02  5.06e-02  1.32e-03  2.82e-02  2.10e-04  4.16e-03  9.25e-01  
  7  +2.3925e-02  +2.9708e-02  5.78e-03  1.42e-04  3.06e-03  2.37e-05  4.67e-04  9.04e-01  
  8  +2.1870e-02  +2.2278e-02  4.08e-04  1.06e-05  2.20e-04  7.82e-07  3.76e-05  9.49e-01  
  9  +2.1711e-02  +2.1732e-02  2.13e-05  5.89e-07  1.16e-05  7.74e-08  2.23e-06  9.79e-01  
 10  +2.1700e-02  +2.1700e-02  2.14e-07  5.92e-09  1.17e-07  7.73e-10  2.25e-08  9.90e-01  
 11  +2.1700e-02  +2.1700e-02  2.14e-09  5.93e-11  1.17e-09  7.73e-12  2.25e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9544ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:10 PM: Optimal value: 2.170e-02
(CVXPY) Oct 06 04:23:10 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.0217
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:10 PM: Your problem has 163 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 163
  constraints   = 213
  nnz(P)        = 0
  nnz(A)        = 1178
  cones (total) = 1
    : Nonnegative = 1,  numel = 213

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7403e-01  +5.2869e+01  5.24e+01  9.05e-01  9.28e+00  1.00e+00  1.07e+00   ------   
  1  +3.2136e-01  +1.2366e+01  1.20e+01  4.02e-01  4.93e+00  4.36e-03  5.75e-01  5.69e-01  
  2  +1.4956e-01  +2.7485e+00  2.60e+00  9.47e-02  1.65e+00  2.89e-02  2.12e-01  8.98e-01  
  3  +1.3350e-01  +7.3916e-01  6.06e-01  2.51e-02  4.53e-01  7.81e-03  6.38e-02  7.25e-01  
  4  +9.3859e-02  +4.1822e-01  3.24e-01  1.23e-02  2.28e-01  3.37e-03  3.34e-02  7.36e-01  
  5  +5.9814e-02  +1.9461e-01  1.35e-01  4.08e-03  8.33e-02  1.57e-03  1.21e-02  7.14e-01  
  6  +3.8740e-02  +9.2752e-02  5.40e-02  1.51e-03  3.14e-02  2.64e-04  4.72e-03  8.93e-01  
  7  +2.4085e-02  +3.2053e-02  7.97e-03  2.08e-04  4.39e-03  3.63e-05  6.81e-04  8.80e-01  
  8  +2.1928e-02  +2.2850e-02  9.23e-04  2.53e-05  5.15e-04  2.68e-06  8.81e-05  8.74e-01  
  9  +2.1658e-02  +2.1802e-02  1.44e-04  4.14e-06  8.03e-05  4.57e-07  1.61e-05  8.77e-01  
 10  +2.1601e-02  +2.1605e-02  3.43e-06  9.94e-08  1.91e-06  1.18e-08  3.98e-07  9.90e-01  
 11  +2.1600e-02  +2.1600e-02  3.43e-08  9.95e-10  1.91e-08  1.18e-10  3.98e-09  9.90e-01  
 12  +2.1600e-02  +2.1600e-02  3.43e-10  9.95e-12  1.91e-10  1.18e-12  3.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0652ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:10 PM: Optimal value: 2.160e-02
(CVXPY) Oct 06 04:23:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 12, Objective: 0.0216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:10 PM: Your problem has 173 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 173
  constraints   = 223
  nnz(P)        = 0
  nnz(A)        = 1220
  cones (total) = 1
    : Nonnegative = 1,  numel = 223

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7381e-01  +5.2844e+01  5.24e+01  9.07e-01  9.13e+00  1.00e+00  1.07e+00   ------   
  1  +3.0168e-01  +1.2375e+01  1.21e+01  4.00e-01  4.76e+00  4.43e-03  5.68e-01  5.70e-01  
  2  +1.3777e-01  +2.5541e+00  2.42e+00  9.01e-02  1.53e+00  2.83e-02  2.03e-01  9.13e-01  
  3  +1.2260e-01  +8.7100e-01  7.48e-01  3.12e-02  5.46e-01  9.22e-03  7.83e-02  6.37e-01  
  4  +9.6888e-02  +5.5831e-01  4.61e-01  1.84e-02  3.27e-01  5.17e-03  4.87e-02  5.33e-01  
  5  +5.9446e-02  +2.2078e-01  1.61e-01  5.51e-03  1.03e-01  1.83e-03  1.62e-02  7.58e-01  
  6  +3.2792e-02  +1.1297e-01  8.02e-02  2.26e-03  4.55e-02  6.77e-04  7.13e-03  7.52e-01  
  7  +1.4411e-02  +2.3729e-02  9.32e-03  2.48e-04  5.00e-03  5.86e-05  8.30e-04  9.23e-01  
  8  +1.2142e-02  +1.3498e-02  1.36e-03  3.79e-05  7.37e-04  6.08e-06  1.34e-04  8.45e-01  
  9  +1.1836e-02  +1.2239e-02  4.03e-04  1.19e-05  2.22e-04  1.69e-06  4.65e-05  8.10e-01  
 10  +1.1705e-02  +1.1720e-02  1.52e-05  4.59e-07  8.41e-06  5.53e-08  1.85e-06  9.61e-01  
 11  +1.1700e-02  +1.1700e-02  1.54e-07  4.65e-09  8.51e-08  5.59e-10  1.88e-08  9.90e-01  
 12  +1.1700e-02  +1.1700e-02  1.54e-09  4.66e-11  8.53e-10  5.60e-12  1.88e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1609ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:10 PM: Optimal value: 1.170e-02
(CVXPY) Oct 06 04:23:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:10 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 13, Objective: 0.0117
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:10 PM: Your problem has 183 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Finished problem compilation (took 5.419e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 183
  constraints   = 233
  nnz(P)        = 0
  nnz(A)        = 1272
  cones (total) = 1
    : Nonnegative = 1,  numel = 233

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7193e-01  +5.3046e+01  5.26e+01  9.09e-01  9.01e+00  1.00e+00  1.07e+00   ------   
  1  +2.5939e-01  +1.2704e+01  1.24e+01  4.02e-01  4.68e+00  4.56e-03  5.68e-01  5.61e-01  
  2  +1.0258e-01  +2.4441e+00  2.34e+00  9.00e-02  1.48e+00  2.89e-02  2.04e-01  9.23e-01  
  3  +1.0510e-01  +7.4530e-01  6.40e-01  2.83e-02  4.78e-01  9.06e-03  7.19e-02  7.37e-01  
  4  +6.9159e-02  +3.3176e-01  2.63e-01  1.09e-02  1.89e-01  3.50e-03  3.04e-02  6.77e-01  
  5  +3.9576e-02  +1.6799e-01  1.28e-01  4.22e-03  7.96e-02  1.58e-03  1.31e-02  7.21e-01  
  6  +1.7914e-02  +4.4279e-02  2.64e-02  8.01e-04  1.53e-02  2.17e-04  2.69e-03  8.69e-01  
  7  +1.2319e-02  +1.4804e-02  2.49e-03  7.59e-05  1.43e-03  1.50e-05  2.66e-04  9.08e-01  
  8  +1.1810e-02  +1.2384e-02  5.74e-04  1.88e-05  3.35e-04  2.37e-06  7.30e-05  8.55e-01  
  9  +1.1665e-02  +1.1710e-02  4.49e-05  1.50e-06  2.65e-05  1.69e-07  6.08e-06  9.24e-01  
 10  +1.1650e-02  +1.1651e-02  8.21e-07  2.76e-08  4.84e-07  2.98e-09  1.12e-07  9.85e-01  
 11  +1.1650e-02  +1.1650e-02  8.22e-09  2.76e-10  4.84e-09  2.98e-11  1.12e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1453ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:10 PM: Optimal value: 1.165e-02
(CVXPY) Oct 06 04:23:10 PM: Compilation took 5.419e-03 seconds
(CVXPY) Oct 06 04:23:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 14, Objective: 0.0117
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:10 PM: Your problem has 185 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 185
  constraints   = 235
  nnz(P)        = 0
  nnz(A)        = 1281
  cones (total) = 1
    : Nonnegative = 1,  numel = 235

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7189e-01  +5.3054e+01  5.26e+01  9.10e-01  8.98e+00  1.00e+00  1.07e+00   ------   
  1  +2.5535e-01  +1.2652e+01  1.24e+01  4.00e-01  4.64e+00  4.56e-03  5.66e-01  5.63e-01  
  2  +9.0884e-02  +2.4507e+00  2.36e+00  8.88e-02  1.45e+00  2.86e-02  2.02e-01  9.18e-01  
  3  +1.0420e-01  +5.7822e-01  4.74e-01  2.15e-02  3.59e-01  7.30e-03  5.59e-02  7.97e-01  
  4  +6.2984e-02  +3.0865e-01  2.46e-01  9.76e-03  1.70e-01  3.15e-03  2.80e-02  6.91e-01  
  5  +3.7333e-02  +1.6194e-01  1.25e-01  4.14e-03  7.70e-02  1.46e-03  1.29e-02  6.72e-01  
  6  +2.1700e-02  +6.9645e-02  4.79e-02  1.49e-03  2.82e-02  5.18e-04  4.91e-03  6.65e-01  
  7  +1.2331e-02  +1.4985e-02  2.65e-03  8.19e-05  1.53e-03  1.80e-05  2.82e-04  9.52e-01  
  8  +1.1811e-02  +1.2402e-02  5.91e-04  1.96e-05  3.47e-04  2.52e-06  7.54e-05  8.59e-01  
  9  +1.1665e-02  +1.1709e-02  4.35e-05  1.48e-06  2.58e-05  1.68e-07  5.93e-06  9.37e-01  
 10  +1.1650e-02  +1.1651e-02  7.80e-07  2.66e-08  4.62e-07  2.85e-09  1.07e-07  9.86e-01  
 11  +1.1650e-02  +1.1650e-02  7.80e-09  2.66e-10  4.62e-09  2.85e-11  1.07e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1387ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:10 PM: Optimal value: 1.165e-02
(CVXPY) Oct 06 04:23:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:10 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 15, Objective: 0.0117
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:11 PM: Your problem has 186 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:11 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 186
  constraints   = 236
  nnz(P)        = 0
  nnz(A)        = 1288
  cones (total) = 1
    : Nonnegative = 1,  numel = 236

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7184e-01  +5.3050e+01  5.26e+01  9.10e-01  8.97e+00  1.00e+00  1.07e+00   ------   
  1  +2.5535e-01  +1.2690e+01  1.24e+01  4.01e-01  4.64e+00  4.56e-03  5.67e-01  5.62e-01  
  2  +8.8533e-02  +2.4996e+00  2.41e+00  9.07e-02  1.48e+00  2.88e-02  2.06e-01  9.13e-01  
  3  +1.0390e-01  +5.8164e-01  4.78e-01  2.17e-02  3.63e-01  7.41e-03  5.66e-02  8.02e-01  
  4  +6.2691e-02  +3.1049e-01  2.48e-01  9.87e-03  1.72e-01  3.19e-03  2.84e-02  6.91e-01  
  5  +3.6655e-02  +1.5941e-01  1.23e-01  4.08e-03  7.60e-02  1.45e-03  1.28e-02  6.81e-01  
  6  +2.1469e-02  +6.8789e-02  4.73e-02  1.48e-03  2.79e-02  5.09e-04  4.88e-03  6.66e-01  
  7  +1.2293e-02  +1.4819e-02  2.53e-03  7.83e-05  1.46e-03  1.68e-05  2.70e-04  9.54e-01  
  8  +1.1817e-02  +1.2472e-02  6.55e-04  2.19e-05  3.88e-04  2.70e-06  8.48e-05  8.65e-01  
  9  +1.1678e-02  +1.1894e-02  2.16e-04  7.25e-06  1.27e-04  7.88e-07  2.99e-05  8.22e-01  
 10  +1.1607e-02  +1.1625e-02  1.86e-05  6.13e-07  1.07e-05  6.25e-08  2.68e-06  9.31e-01  
 11  +1.1600e-02  +1.1600e-02  2.05e-07  6.72e-09  1.17e-07  6.82e-10  2.96e-08  9.89e-01  
 12  +1.1600e-02  +1.1600e-02  2.05e-09  6.74e-11  1.17e-09  6.84e-12  2.97e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.3338ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:11 PM: Optimal value: 1.160e-02
(CVXPY) Oct 06 04:23:11 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.99
  Our objective: 0.98

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 1 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x3 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x9 = 1)            <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 0 AND x5 = 1 AND x7 = 1)                       <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 0)            <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1)                       <-- (term's our objective: 0.14)
 OR (x1 = 1 AND x3 = 0 AND x5 = 0 AND x9 = 0)                       <-- (term's our objective: 0.1)
 OR (x2 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.14)
 OR (x2 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x9 = 1)            <-- (term's our objective: 0.08)
 OR (x3 = 1 AND x4 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.12)
 OR (x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.1)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.662721633911133
Best over terms:
  Our final objective: 0.14
    Its accruacy: 0.57
    Its hamming distance: 7
  Shortest hamming distance: 4
    Its our objective: 0.040000000000000036
  Highest accruacy: 0.57
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

