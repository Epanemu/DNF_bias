Command:
python test_script.py -s constant_subclass -d 5 -n 50000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14611999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.14611999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:55 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:55 PM: Finished problem compilation (took 1.969e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.08e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.22e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4641e-01  +7.1487e+02  7.14e+02  1.49e-01  6.21e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7330e+02  1.73e+02  1.36e-01  5.62e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0052e-01  +6.9996e+00  6.50e+00  1.92e-02  7.82e+00  2.56e-06  1.86e-01  5.40e-01  
  5  +5.0000e-01  +9.8899e-01  4.89e-01  1.49e-03  6.20e-01  2.62e-05  1.42e-01  9.90e-01  
  6  +4.9999e-01  +6.0389e-01  1.04e-01  3.13e-04  1.31e-01  1.26e-05  2.15e-02  8.59e-01  
  7  +4.9925e-01  +7.3907e-01  2.40e-01  3.10e-04  1.30e-01  5.16e-04  1.15e-03  9.71e-01  
  8  +4.8742e-01  +6.9170e-01  2.04e-01  2.03e-05  8.50e-03  7.26e-03  6.42e-05  9.60e-01  
  9  +4.7611e-01  +5.9764e-01  1.22e-01  6.42e-06  2.69e-03  7.07e-03  2.03e-05  7.97e-01  
 10  +4.6710e-01  +5.0313e-01  3.60e-02  1.93e-06  8.10e-04  3.54e-04  6.42e-06  8.19e-01  
 11  +4.5979e-01  +4.6365e-01  3.86e-03  1.94e-07  8.13e-05  2.93e-05  6.67e-07  9.03e-01  
 12  +4.5876e-01  +4.5939e-01  6.31e-04  2.81e-08  1.18e-05  3.09e-06  1.09e-07  8.94e-01  
 13  +4.5854e-01  +4.5855e-01  1.05e-05  4.34e-10  1.82e-07  4.06e-08  1.82e-09  9.87e-01  
 14  +4.5854e-01  +4.5854e-01  1.05e-07  4.34e-12  1.82e-09  4.07e-10  1.82e-11  9.90e-01  
 15  +4.5854e-01  +4.5854e-01  1.10e-09  4.51e-14  1.89e-11  1.30e-11  5.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 522.966ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:56 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:56 PM: Optimal value: 4.585e-01
(CVXPY) Oct 06 03:55:56 PM: Compilation took 1.969e-01 seconds
(CVXPY) Oct 06 03:55:56 PM: Solver (including time spent in interface) took 5.623e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:56 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:56 PM: Finished problem compilation (took 1.985e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 245903
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.20e+02  1.00e+00  1.00e+00   ------   
  1  +5.9960e-01  +5.0090e+03  5.01e+03  3.68e-01  1.29e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4637e-01  +7.1443e+02  7.14e+02  1.49e-01  6.56e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1135e-01  +1.7304e+02  1.73e+02  1.36e-01  5.94e+01  2.41e-05  2.33e-01  8.09e-02  
  4  +5.0049e-01  +6.6991e+00  6.20e+00  1.84e-02  7.90e+00  2.59e-06  1.83e-01  5.67e-01  
  5  +5.0001e-01  +1.1309e+00  6.31e-01  1.92e-03  8.47e-01  2.79e-05  1.34e-01  9.90e-01  
  6  +5.0001e-01  +9.4133e-01  4.41e-01  1.33e-03  5.88e-01  1.88e-05  7.37e-02  6.72e-01  
  7  +4.9999e-01  +7.2260e-01  2.23e-01  6.71e-04  2.96e-01  1.97e-05  2.06e-02  7.28e-01  
  8  +4.9944e-01  +7.0740e-01  2.08e-01  2.46e-04  1.09e-01  3.88e-04  8.02e-04  9.80e-01  
  9  +4.9274e-01  +6.9100e-01  1.98e-01  2.32e-05  1.03e-02  4.31e-03  6.56e-05  9.28e-01  
 10  +4.8983e-01  +6.8227e-01  1.92e-01  1.64e-05  7.29e-03  5.44e-03  4.62e-05  3.26e-01  
 11  +4.9193e-01  +6.7361e-01  1.82e-01  1.42e-05  6.30e-03  3.23e-03  3.91e-05  5.32e-01  
 12  +4.8119e-01  +6.2913e-01  1.48e-01  5.61e-06  2.49e-03  4.09e-03  1.55e-05  7.97e-01  
 13  +4.7698e-01  +6.1060e-01  1.34e-01  5.03e-06  2.24e-03  3.32e-03  1.41e-05  1.50e-01  
 14  +4.5956e-01  +5.4133e-01  8.18e-02  2.85e-06  1.26e-03  1.38e-03  8.29e-06  5.19e-01  
 15  +4.3347e-01  +4.4734e-01  1.39e-02  4.45e-07  1.97e-04  1.43e-05  1.38e-06  9.04e-01  
 16  +4.2714e-01  +4.2736e-01  2.13e-04  6.69e-09  2.96e-06  1.45e-07  2.12e-08  9.86e-01  
 17  +4.2704e-01  +4.2704e-01  2.13e-06  6.68e-11  2.96e-08  1.45e-09  2.12e-10  9.90e-01  
 18  +4.2704e-01  +4.2704e-01  2.13e-08  6.69e-13  2.96e-10  1.51e-11  2.20e-12  9.90e-01  
 19  +4.2704e-01  +4.2704e-01  2.13e-10  6.72e-15  2.96e-12  1.58e-13  2.29e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 741.9184ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:57 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:57 PM: Optimal value: 4.270e-01
(CVXPY) Oct 06 03:55:57 PM: Compilation took 1.985e-01 seconds
(CVXPY) Oct 06 03:55:57 PM: Solver (including time spent in interface) took 7.950e-01 seconds
FULL MODEL:
  Accruacy: 0.57306
  Our objective: 0.14612000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.14612)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.2036049365997314
Best over terms:
  Our final objective: 0.14612000000000003
    Its accruacy: 0.57306
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14612000000000003
  Highest accruacy: 0.57306
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

