Command:
python test_script.py -s constant_subclass -d 9 -n 50 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:49 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:49 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 319
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9435e-01  +2.6271e+01  2.58e+01  8.36e-01  6.92e+00  1.00e+00  1.08e+00   ------   
  1  +5.6177e-01  +5.7849e+00  5.22e+00  3.65e-01  4.02e+00  3.73e-03  6.08e-01  6.00e-01  
  2  +4.7443e-01  +1.2228e+00  7.48e-01  8.20e-02  1.12e+00  2.12e-02  2.23e-01  9.90e-01  
  3  +4.1203e-01  +7.0913e-01  2.97e-01  2.10e-02  2.97e-01  1.09e-02  6.81e-02  7.56e-01  
  4  +3.8989e-01  +4.9456e-01  1.05e-01  7.05e-03  9.88e-02  3.47e-03  2.62e-02  6.70e-01  
  5  +3.7874e-01  +4.0343e-01  2.47e-02  1.68e-03  2.35e-02  7.26e-04  6.73e-03  7.65e-01  
  6  +3.7528e-01  +3.7605e-01  7.67e-04  5.38e-05  7.50e-04  1.68e-05  2.22e-04  9.70e-01  
  7  +3.7515e-01  +3.7516e-01  7.85e-06  5.51e-07  7.69e-06  1.72e-07  2.28e-06  9.90e-01  
  8  +3.7515e-01  +3.7515e-01  7.85e-08  5.51e-09  7.69e-08  1.72e-09  2.28e-08  9.90e-01  
  9  +3.7515e-01  +3.7515e-01  7.85e-10  5.51e-11  7.69e-10  1.72e-11  2.28e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 551.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:49 PM: Optimal value: 3.752e-01
(CVXPY) Oct 06 04:13:49 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:13:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:49 PM: Your problem has 54 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 54
  constraints   = 79
  nnz(P)        = 0
  nnz(A)        = 393
  cones (total) = 1
    : Nonnegative = 1,  numel = 79

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8483e-01  +2.6948e+01  2.65e+01  8.48e-01  7.01e+00  1.00e+00  1.11e+00   ------   
  1  +5.2668e-01  +5.8611e+00  5.33e+00  3.78e-01  3.97e+00  3.73e-03  6.21e-01  6.03e-01  
  2  +4.2512e-01  +1.3606e+00  9.36e-01  8.73e-02  1.21e+00  2.29e-02  2.31e-01  9.47e-01  
  3  +3.5729e-01  +6.2886e-01  2.72e-01  2.02e-02  2.91e-01  7.67e-03  6.30e-02  7.74e-01  
  4  +3.2612e-01  +4.5520e-01  1.29e-01  8.04e-03  1.21e-01  3.50e-03  2.75e-02  6.41e-01  
  5  +3.0468e-01  +3.8100e-01  7.63e-02  3.73e-03  5.86e-02  2.00e-03  1.42e-02  5.72e-01  
  6  +2.8358e-01  +2.9316e-01  9.58e-03  4.25e-04  6.72e-03  1.78e-04  1.80e-03  9.16e-01  
  7  +2.8031e-01  +2.8060e-01  2.86e-04  1.28e-05  2.00e-04  3.91e-06  5.57e-05  9.70e-01  
  8  +2.8020e-01  +2.8022e-01  1.09e-05  5.06e-07  7.61e-06  8.11e-08  2.36e-06  9.67e-01  
  9  +2.8020e-01  +2.8020e-01  1.11e-07  5.13e-09  7.69e-08  8.23e-10  2.41e-08  9.90e-01  
 10  +2.8020e-01  +2.8020e-01  1.11e-09  5.13e-11  7.69e-10  8.23e-12  2.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 641.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:49 PM: Optimal value: 2.802e-01
(CVXPY) Oct 06 04:13:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 64 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 64
  constraints   = 89
  nnz(P)        = 0
  nnz(A)        = 445
  cones (total) = 1
    : Nonnegative = 1,  numel = 89

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7547e-01  +2.7026e+01  2.66e+01  8.57e-01  6.85e+00  1.00e+00  1.11e+00   ------   
  1  +4.7749e-01  +5.8405e+00  5.36e+00  3.82e-01  3.74e+00  3.83e-03  6.09e-01  6.08e-01  
  2  +3.3533e-01  +1.2598e+00  9.24e-01  6.93e-02  9.46e-01  2.50e-02  1.77e-01  9.90e-01  
  3  +2.3525e-01  +5.5621e-01  3.21e-01  2.01e-02  2.92e-01  7.47e-03  5.79e-02  8.11e-01  
  4  +1.8222e-01  +2.6988e-01  8.77e-02  5.01e-03  7.61e-02  1.71e-03  1.71e-02  7.57e-01  
  5  +1.6598e-01  +1.8480e-01  1.88e-02  1.07e-03  1.64e-02  1.95e-04  3.95e-03  9.37e-01  
  6  +1.6055e-01  +1.6101e-01  4.60e-04  2.64e-05  3.98e-04  3.06e-06  1.01e-04  9.75e-01  
  7  +1.6041e-01  +1.6044e-01  2.82e-05  1.73e-06  2.43e-05  1.07e-07  7.41e-06  9.39e-01  
  8  +1.6040e-01  +1.6040e-01  3.16e-07  1.96e-08  2.71e-07  1.28e-09  8.50e-08  9.89e-01  
  9  +1.6040e-01  +1.6040e-01  3.16e-09  1.96e-10  2.72e-09  1.28e-11  8.51e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 710.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 1.604e-01
(CVXPY) Oct 06 04:13:50 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1604
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 74 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 1.566e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 74
  constraints   = 99
  nnz(P)        = 0
  nnz(A)        = 482
  cones (total) = 1
    : Nonnegative = 1,  numel = 99

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7337e-01  +2.7138e+01  2.67e+01  8.63e-01  6.63e+00  1.00e+00  1.11e+00   ------   
  1  +4.5382e-01  +5.8740e+00  5.42e+00  3.87e-01  3.56e+00  3.87e-03  6.06e-01  6.06e-01  
  2  +2.8316e-01  +1.2400e+00  9.57e-01  6.44e-02  8.41e-01  2.58e-02  1.66e-01  9.90e-01  
  3  +1.9376e-01  +5.1002e-01  3.16e-01  1.85e-02  2.51e-01  8.64e-03  5.35e-02  7.42e-01  
  4  +1.5467e-01  +3.0326e-01  1.49e-01  7.92e-03  1.11e-01  3.92e-03  2.48e-02  5.92e-01  
  5  +1.3604e-01  +2.4390e-01  1.08e-01  4.84e-03  7.57e-02  2.35e-03  1.58e-02  6.22e-01  
  6  +1.0462e-01  +1.1547e-01  1.08e-02  4.58e-04  7.11e-03  1.79e-04  1.62e-03  9.19e-01  
  7  +1.0084e-01  +1.0116e-01  3.23e-04  1.40e-05  2.14e-04  2.54e-06  5.09e-05  9.70e-01  
  8  +1.0071e-01  +1.0074e-01  2.64e-05  1.23e-06  1.78e-05  2.35e-07  4.96e-06  9.26e-01  
  9  +1.0070e-01  +1.0070e-01  2.80e-07  1.31e-08  1.90e-07  2.47e-09  5.33e-08  9.89e-01  
 10  +1.0070e-01  +1.0070e-01  2.80e-09  1.31e-10  1.90e-09  2.47e-11  5.33e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 762.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 1.007e-01
(CVXPY) Oct 06 04:13:50 PM: Compilation took 1.566e-02 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 84 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 514
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7111e-01  +2.7226e+01  2.68e+01  8.70e-01  6.41e+00  1.00e+00  1.11e+00   ------   
  1  +4.1207e-01  +5.8108e+00  5.40e+00  3.81e-01  3.31e+00  3.97e-03  5.87e-01  6.16e-01  
  2  +2.0667e-01  +1.4436e+00  1.24e+00  7.56e-02  9.30e-01  2.23e-02  1.88e-01  8.82e-01  
  3  +1.5663e-01  +4.2148e-01  2.65e-01  1.71e-02  2.16e-01  6.34e-03  4.83e-02  7.81e-01  
  4  +1.1663e-01  +2.6239e-01  1.46e-01  8.11e-03  1.11e-01  3.51e-03  2.42e-02  5.88e-01  
  5  +9.4517e-02  +1.9166e-01  9.71e-02  4.51e-03  7.11e-02  2.33e-03  1.41e-02  5.51e-01  
  6  +6.5086e-02  +7.7150e-02  1.21e-02  5.24e-04  8.39e-03  2.50e-04  1.76e-03  8.96e-01  
  7  +6.1112e-02  +6.1827e-02  7.15e-04  3.20e-05  5.02e-04  9.70e-06  1.10e-04  9.38e-01  
  8  +6.0844e-02  +6.0936e-02  9.18e-05  4.51e-06  6.55e-05  8.74e-07  1.81e-05  9.11e-01  
  9  +6.0801e-02  +6.0802e-02  1.64e-06  8.18e-08  1.17e-06  1.43e-08  3.38e-07  9.82e-01  
 10  +6.0800e-02  +6.0800e-02  1.64e-08  8.17e-10  1.17e-08  1.42e-10  3.39e-09  9.90e-01  
 11  +6.0800e-02  +6.0800e-02  1.64e-10  8.17e-12  1.17e-10  1.43e-12  3.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 936.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 6.080e-02
(CVXPY) Oct 06 04:13:50 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 94 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 560
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6772e-01  +2.7228e+01  2.68e+01  8.75e-01  6.30e+00  1.00e+00  1.11e+00   ------   
  1  +3.8590e-01  +5.8892e+00  5.50e+00  3.93e-01  3.24e+00  4.03e-03  5.89e-01  6.08e-01  
  2  +1.6482e-01  +1.7455e+00  1.58e+00  9.63e-02  1.12e+00  2.20e-02  2.28e-01  7.97e-01  
  3  +1.3614e-01  +4.0859e-01  2.72e-01  1.85e-02  2.30e-01  6.73e-03  5.19e-02  8.03e-01  
  4  +9.3171e-02  +2.3444e-01  1.41e-01  8.43e-03  1.17e-01  3.54e-03  2.51e-02  6.06e-01  
  5  +7.5277e-02  +1.8797e-01  1.13e-01  5.47e-03  8.91e-02  2.47e-03  1.71e-02  5.83e-01  
  6  +4.5008e-02  +5.7333e-02  1.23e-02  5.57e-04  9.16e-03  2.36e-04  1.87e-03  9.13e-01  
  7  +4.1177e-02  +4.1884e-02  7.07e-04  3.30e-05  5.31e-04  8.78e-06  1.14e-04  9.40e-01  
  8  +4.0940e-02  +4.1029e-02  8.95e-05  4.58e-06  6.80e-05  8.77e-07  1.76e-05  9.12e-01  
  9  +4.0901e-02  +4.0904e-02  2.54e-06  1.31e-07  1.91e-06  2.24e-08  5.19e-07  9.73e-01  
 10  +4.0900e-02  +4.0900e-02  2.54e-08  1.31e-09  1.91e-08  2.24e-10  5.19e-09  9.90e-01  
 11  +4.0900e-02  +4.0900e-02  2.54e-10  1.31e-11  1.91e-10  2.24e-12  5.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 888.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 4.090e-02
(CVXPY) Oct 06 04:13:50 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0409
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 104 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 104
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 594
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6357e-01  +2.7458e+01  2.70e+01  8.80e-01  6.14e+00  1.00e+00  1.12e+00   ------   
  1  +3.1493e-01  +5.9765e+00  5.66e+00  3.86e-01  3.07e+00  4.21e-03  5.79e-01  6.04e-01  
  2  +1.0412e-01  +1.5436e+00  1.44e+00  9.64e-02  1.05e+00  1.95e-02  2.24e-01  7.91e-01  
  3  +8.8550e-02  +3.7348e-01  2.85e-01  2.09e-02  2.46e-01  6.88e-03  5.68e-02  7.88e-01  
  4  +5.4009e-02  +2.0433e-01  1.50e-01  9.91e-03  1.25e-01  3.66e-03  2.89e-02  5.48e-01  
  5  +2.8333e-02  +5.6761e-02  2.84e-02  1.76e-03  2.23e-02  6.63e-04  5.64e-03  8.16e-01  
  6  +2.1309e-02  +2.2431e-02  1.12e-03  6.94e-05  8.74e-04  1.50e-05  2.29e-04  9.74e-01  
  7  +2.1017e-02  +2.1074e-02  5.73e-05  3.85e-06  4.59e-05  3.34e-07  1.34e-05  9.43e-01  
  8  +2.1000e-02  +2.1001e-02  8.47e-07  5.80e-08  6.81e-07  5.29e-09  2.04e-07  9.86e-01  
  9  +2.1000e-02  +2.1000e-02  8.47e-09  5.80e-10  6.81e-09  5.28e-11  2.04e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 812.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 2.100e-02
(CVXPY) Oct 06 04:13:50 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 114 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 1.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 114
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 637
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5945e-01  +2.7431e+01  2.70e+01  8.84e-01  6.04e+00  1.00e+00  1.12e+00   ------   
  1  +2.7465e-01  +6.1613e+00  5.89e+00  3.98e-01  3.04e+00  4.34e-03  5.85e-01  5.87e-01  
  2  +5.8517e-02  +2.0673e+00  2.01e+00  1.31e-01  1.33e+00  1.92e-02  2.88e-01  6.61e-01  
  3  +7.7918e-02  +4.3518e-01  3.57e-01  2.81e-02  3.15e-01  8.37e-03  7.67e-02  7.85e-01  
  4  +3.9896e-02  +1.5219e-01  1.12e-01  8.14e-03  9.65e-02  2.61e-03  2.46e-02  7.45e-01  
  5  +2.4141e-02  +4.4373e-02  2.02e-02  1.39e-03  1.68e-02  4.01e-04  4.45e-03  8.76e-01  
  6  +2.1133e-02  +2.2175e-02  1.04e-03  7.30e-05  8.68e-04  1.56e-05  2.39e-04  9.47e-01  
  7  +2.0966e-02  +2.1263e-02  2.97e-04  2.16e-05  2.44e-04  3.24e-06  7.94e-05  7.94e-01  
  8  +2.0906e-02  +2.0925e-02  1.90e-05  1.40e-06  1.55e-05  1.66e-07  5.38e-06  9.47e-01  
  9  +2.0900e-02  +2.0900e-02  2.28e-07  1.68e-08  1.86e-07  1.94e-09  6.48e-08  9.89e-01  
 10  +2.0900e-02  +2.0900e-02  2.28e-09  1.68e-10  1.86e-09  1.94e-11  6.48e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 983.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 2.090e-02
(CVXPY) Oct 06 04:13:50 PM: Compilation took 1.570e-02 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 115 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 1.654e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 140
  nnz(P)        = 0
  nnz(A)        = 640
  cones (total) = 1
    : Nonnegative = 1,  numel = 140

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5843e-01  +2.7474e+01  2.70e+01  8.84e-01  6.03e+00  1.00e+00  1.12e+00   ------   
  1  +2.5284e-01  +6.1846e+00  5.93e+00  3.93e-01  3.00e+00  4.41e-03  5.80e-01  5.87e-01  
  2  +4.8679e-02  +1.7233e+00  1.67e+00  1.14e-01  1.18e+00  1.97e-02  2.53e-01  7.32e-01  
  3  +6.5165e-02  +3.2102e-01  2.56e-01  2.07e-02  2.32e-01  6.83e-03  5.60e-02  8.20e-01  
  4  +1.8850e-02  +1.1793e-01  9.91e-02  6.79e-03  8.12e-02  2.21e-03  2.11e-02  7.65e-01  
  5  +3.0163e-03  +1.3492e-02  1.05e-02  6.90e-04  8.31e-03  2.08e-04  2.27e-03  9.14e-01  
  6  +1.1425e-03  +1.7055e-03  5.63e-04  3.84e-05  4.53e-04  6.58e-06  1.30e-04  9.43e-01  
  7  +1.0202e-03  +1.0912e-03  7.11e-05  5.24e-06  5.81e-05  6.58e-07  1.94e-05  9.27e-01  
  8  +1.0003e-03  +1.0015e-03  1.19e-06  8.82e-08  9.70e-07  1.03e-08  3.32e-07  9.84e-01  
  9  +1.0000e-03  +1.0000e-03  1.19e-08  8.82e-10  9.70e-09  1.03e-10  3.32e-09  9.90e-01  
 10  +1.0000e-03  +1.0000e-03  1.19e-10  8.82e-12  9.70e-11  1.03e-12  3.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 917.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 1.000e-03
(CVXPY) Oct 06 04:13:50 PM: Compilation took 1.654e-02 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 116 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 1.049e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 116
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 643
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5701e-01  +2.7484e+01  2.70e+01  8.85e-01  6.02e+00  1.00e+00  1.12e+00   ------   
  1  +2.3664e-01  +6.2390e+00  6.00e+00  3.94e-01  3.00e+00  4.45e-03  5.81e-01  5.82e-01  
  2  +3.1582e-02  +1.6413e+00  1.61e+00  1.11e-01  1.13e+00  2.02e-02  2.46e-01  7.50e-01  
  3  +5.7319e-02  +3.1753e-01  2.60e-01  2.15e-02  2.35e-01  7.17e-03  5.81e-02  8.07e-01  
  4  +1.5649e-02  +1.1497e-01  9.93e-02  7.09e-03  8.16e-02  2.14e-03  2.22e-02  7.85e-01  
  5  +2.8685e-03  +1.4933e-02  1.21e-02  8.39e-04  9.66e-03  2.37e-04  2.79e-03  8.89e-01  
  6  +1.0994e-03  +1.8900e-03  7.91e-04  5.68e-05  6.38e-04  9.82e-06  1.95e-04  9.30e-01  
  7  +9.3980e-04  +1.0829e-03  1.43e-04  1.08e-05  1.13e-04  1.25e-06  4.55e-05  8.55e-01  
  8  +9.0121e-04  +9.0525e-04  4.04e-06  3.03e-07  3.16e-06  2.16e-08  1.38e-06  9.90e-01  
  9  +9.0001e-04  +9.0005e-04  4.05e-08  3.03e-09  3.16e-08  2.16e-10  1.38e-08  9.90e-01  
 10  +9.0000e-04  +9.0000e-04  4.05e-10  3.03e-11  3.16e-10  2.16e-12  1.38e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 927µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 9.000e-04
(CVXPY) Oct 06 04:13:50 PM: Compilation took 1.049e-02 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 5.507e-03 seconds
Iteration: 10, Objective: 0.0009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 118 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 118
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 650
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5464e-01  +2.7522e+01  2.71e+01  8.85e-01  5.99e+00  1.00e+00  1.12e+00   ------   
  1  +2.2324e-01  +6.3848e+00  6.16e+00  4.00e-01  3.02e+00  4.53e-03  5.83e-01  5.71e-01  
  2  +3.3651e-02  +1.4780e+00  1.44e+00  1.01e-01  1.07e+00  2.25e-02  2.28e-01  8.08e-01  
  3  +5.3055e-02  +3.0310e-01  2.50e-01  2.06e-02  2.28e-01  7.28e-03  5.57e-02  7.90e-01  
  4  +1.4963e-02  +1.1193e-01  9.70e-02  6.97e-03  8.06e-02  2.23e-03  2.15e-02  7.74e-01  
  5  +2.2372e-03  +1.0087e-02  7.85e-03  5.55e-04  6.40e-03  1.65e-04  1.80e-03  9.20e-01  
  6  +1.0892e-03  +1.8112e-03  7.22e-04  5.35e-05  5.95e-04  9.50e-06  1.81e-04  9.00e-01  
  7  +9.3793e-04  +1.0733e-03  1.35e-04  1.04e-05  1.08e-04  1.25e-06  4.35e-05  8.61e-01  
  8  +9.0164e-04  +9.0675e-04  5.11e-06  3.84e-07  4.00e-06  2.81e-08  1.75e-06  9.88e-01  
  9  +9.0002e-04  +9.0007e-04  5.14e-08  3.86e-09  4.02e-08  2.83e-10  1.77e-08  9.90e-01  
 10  +9.0000e-04  +9.0000e-04  5.15e-10  3.86e-11  4.02e-10  2.83e-12  1.77e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1769ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 9.000e-04
(CVXPY) Oct 06 04:13:50 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 1.560e-02 seconds
Iteration: 11, Objective: 0.0009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:50 PM: Your problem has 119 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:50 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 119
  constraints   = 144
  nnz(P)        = 0
  nnz(A)        = 653
  cones (total) = 1
    : Nonnegative = 1,  numel = 144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5329e-01  +2.7512e+01  2.71e+01  8.85e-01  5.98e+00  1.00e+00  1.12e+00   ------   
  1  +2.0356e-01  +6.3944e+00  6.19e+00  3.97e-01  2.99e+00  4.58e-03  5.80e-01  5.70e-01  
  2  +2.2998e-02  +1.5622e+00  1.54e+00  1.09e-01  1.12e+00  2.15e-02  2.42e-01  7.71e-01  
  3  +5.1941e-02  +3.0813e-01  2.56e-01  2.21e-02  2.38e-01  7.36e-03  5.89e-02  7.98e-01  
  4  +1.2551e-02  +9.7612e-02  8.51e-02  6.40e-03  7.21e-02  1.94e-03  1.95e-02  8.11e-01  
  5  +1.8007e-03  +6.9903e-03  5.19e-03  3.86e-04  4.34e-03  1.04e-04  1.23e-03  9.41e-01  
  6  +1.1199e-03  +2.0358e-03  9.16e-04  7.18e-05  7.74e-04  1.39e-05  2.40e-04  8.14e-01  
  7  +9.4975e-04  +1.1442e-03  1.94e-04  1.54e-05  1.58e-04  1.60e-06  6.26e-05  8.89e-01  
  8  +9.0616e-04  +9.2414e-04  1.80e-05  1.38e-06  1.42e-05  1.30e-07  6.15e-06  9.14e-01  
  9  +9.0007e-04  +9.0028e-04  2.07e-07  1.56e-08  1.62e-07  1.43e-09  7.18e-08  9.90e-01  
 10  +9.0000e-04  +9.0000e-04  2.08e-09  1.57e-10  1.62e-09  1.43e-11  7.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0244ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:50 PM: Optimal value: 9.000e-04
(CVXPY) Oct 06 04:13:50 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 0)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 1)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1)            <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x5 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0)            <-- (term's our objective: 0.12)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x2 = 1 AND x5 = 1 AND x8 = 1)            <-- (term's our objective: 0.12)
 OR (x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.12)
 OR (x5 = 1 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.24)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.3410933017730713
Best over terms:
  Our final objective: 0.24
    Its accruacy: 0.62
    Its hamming distance: 6
  Shortest hamming distance: 1
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

