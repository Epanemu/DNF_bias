Command:
python test_script.py -s constant_subclass -d 8 -n 10000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1488
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 8.

Computed total variation: 0.2022
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:23 PM: Your problem has 5017 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:23 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5017
  constraints   = 10017
  nnz(P)        = 0
  nnz(A)        = 55017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.11e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +1.0695e+03  1.07e+03  4.19e-01  7.09e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3484e-01  +1.2651e+02  1.26e+02  1.63e-01  3.54e+01  1.47e-02  2.65e-01  9.00e-01  
  3  +5.0930e-01  +3.2722e+01  3.22e+01  1.22e-01  2.62e+01  3.95e-05  2.53e-01  2.15e-01  
  4  +5.0082e-01  +2.5646e+00  2.06e+00  1.40e-02  3.06e+00  5.51e-06  1.58e-01  6.78e-01  
  5  +5.0012e-01  +9.2240e-01  4.22e-01  2.83e-03  6.28e-01  2.85e-05  7.32e-02  9.90e-01  
  6  +5.0000e-01  +6.4649e-01  1.46e-01  9.58e-04  2.13e-01  3.61e-05  1.17e-02  8.58e-01  
  7  +4.9794e-01  +6.8351e-01  1.86e-01  1.39e-04  3.13e-02  1.20e-03  4.20e-04  9.70e-01  
  8  +4.9315e-01  +6.6600e-01  1.73e-01  5.11e-05  1.15e-02  2.80e-03  1.51e-04  6.67e-01  
  9  +4.8501e-01  +6.1368e-01  1.29e-01  3.85e-05  8.63e-03  1.29e-03  1.20e-04  3.75e-01  
 10  +4.7232e-01  +5.4539e-01  7.31e-02  2.05e-05  4.59e-03  1.37e-04  6.82e-05  7.27e-01  
 11  +4.5582e-01  +4.6621e-01  1.04e-02  2.53e-06  5.65e-04  4.92e-06  9.17e-06  9.04e-01  
 12  +4.5306e-01  +4.5450e-01  1.45e-03  3.33e-07  7.43e-05  5.08e-07  1.29e-06  8.97e-01  
 13  +4.5251e-01  +4.5255e-01  3.42e-05  7.15e-09  1.60e-06  7.47e-09  3.05e-08  9.87e-01  
 14  +4.5250e-01  +4.5250e-01  3.42e-07  7.15e-11  1.60e-08  7.48e-11  3.05e-10  9.90e-01  
 15  +4.5250e-01  +4.5250e-01  3.43e-09  7.17e-13  1.60e-10  8.73e-13  3.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.3519ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:23 PM: Optimal value: 4.525e-01
(CVXPY) Oct 06 04:11:23 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:11:23 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4525
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:23 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:23 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 63893
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8411e-01  +1.0698e+03  1.07e+03  4.19e-01  7.36e+01  3.82e-03  5.61e-01  5.98e-01  
  2  +5.3469e-01  +1.2625e+02  1.26e+02  1.63e-01  3.67e+01  1.48e-02  2.66e-01  9.01e-01  
  3  +5.0923e-01  +3.2573e+01  3.21e+01  1.22e-01  2.72e+01  3.96e-05  2.53e-01  2.19e-01  
  4  +5.0078e-01  +2.4714e+00  1.97e+00  1.34e-02  3.04e+00  5.61e-06  1.53e-01  7.09e-01  
  5  +5.0014e-01  +9.6037e-01  4.60e-01  3.09e-03  7.11e-01  2.26e-05  6.97e-02  9.09e-01  
  6  +5.0006e-01  +7.6986e-01  2.70e-01  1.75e-03  4.03e-01  2.71e-05  1.74e-02  9.90e-01  
  7  +4.9918e-01  +7.3906e-01  2.40e-01  2.40e-04  5.61e-02  5.19e-04  6.74e-04  9.65e-01  
  8  +4.9556e-01  +7.2322e-01  2.28e-01  5.67e-05  1.33e-02  2.05e-03  1.54e-04  7.85e-01  
  9  +4.9274e-01  +7.0152e-01  2.09e-01  4.87e-05  1.14e-02  1.75e-03  1.33e-04  2.27e-01  
 10  +4.8978e-01  +6.8118e-01  1.91e-01  4.20e-05  9.82e-03  1.34e-03  1.15e-04  2.86e-01  
 11  +4.8705e-01  +6.6484e-01  1.78e-01  4.08e-05  9.52e-03  1.01e-03  1.15e-04  9.99e-02  
 12  +4.7473e-01  +5.9416e-01  1.19e-01  2.61e-05  6.08e-03  2.06e-04  7.50e-05  6.69e-01  
 13  +4.5076e-01  +5.0535e-01  5.46e-02  9.49e-06  2.20e-03  6.20e-05  2.84e-05  7.44e-01  
 14  +4.4820e-01  +4.9615e-01  4.79e-02  8.64e-06  2.00e-03  4.21e-05  2.82e-05  9.50e-02  
 15  +4.4549e-01  +4.8692e-01  4.14e-02  7.32e-06  1.70e-03  2.82e-05  2.35e-05  3.92e-01  
 16  +4.4011e-01  +4.6949e-01  2.94e-02  5.04e-06  1.17e-03  1.87e-05  1.59e-05  4.06e-01  
 17  +4.3390e-01  +4.5264e-01  1.87e-02  2.99e-06  6.93e-04  1.11e-05  9.31e-06  5.02e-01  
 18  +4.2587e-01  +4.2624e-01  3.72e-04  5.85e-08  1.36e-05  1.10e-07  1.87e-07  9.85e-01  
 19  +4.2570e-01  +4.2571e-01  3.72e-06  5.85e-10  1.36e-07  1.10e-09  1.87e-09  9.90e-01  
 20  +4.2570e-01  +4.2570e-01  3.72e-08  5.85e-12  1.36e-09  1.10e-11  1.88e-11  9.90e-01  
 21  +4.2570e-01  +4.2570e-01  3.72e-10  5.85e-14  1.36e-11  1.11e-13  1.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 163.0068ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:23 PM: Optimal value: 4.257e-01
(CVXPY) Oct 06 04:11:23 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:11:23 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 2, Objective: 0.4257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:24 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:24 PM: Finished problem compilation (took 4.711e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 65660
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8402e-01  +1.0699e+03  1.07e+03  4.19e-01  7.36e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3461e-01  +1.2609e+02  1.26e+02  1.63e-01  3.66e+01  1.48e-02  2.66e-01  9.02e-01  
  3  +5.0921e-01  +3.2526e+01  3.20e+01  1.22e-01  2.71e+01  3.97e-05  2.52e-01  2.21e-01  
  4  +5.0078e-01  +2.4668e+00  1.97e+00  1.34e-02  3.04e+00  5.63e-06  1.52e-01  7.12e-01  
  5  +5.0016e-01  +9.8946e-01  4.89e-01  3.29e-03  7.57e-01  2.27e-05  6.95e-02  8.92e-01  
  6  +5.0004e-01  +7.3713e-01  2.37e-01  1.53e-03  3.54e-01  3.24e-05  1.41e-02  8.94e-01  
  7  +4.9858e-01  +7.8289e-01  2.84e-01  2.02e-04  4.73e-02  8.65e-04  5.62e-04  9.77e-01  
  8  +4.9508e-01  +7.5704e-01  2.62e-01  7.40e-05  1.74e-02  2.00e-03  2.02e-04  6.78e-01  
  9  +4.9211e-01  +7.3128e-01  2.39e-01  5.84e-05  1.37e-02  1.79e-03  1.60e-04  3.18e-01  
 10  +4.9003e-01  +7.0183e-01  2.12e-01  5.31e-05  1.24e-02  8.61e-04  1.46e-04  4.06e-01  
 11  +4.8680e-01  +6.8502e-01  1.98e-01  4.52e-05  1.06e-02  7.13e-04  1.25e-04  2.77e-01  
 12  +4.8126e-01  +6.5184e-01  1.71e-01  3.91e-05  9.13e-03  2.94e-04  1.10e-04  4.58e-01  
 13  +4.5907e-01  +5.5939e-01  1.00e-01  1.86e-05  4.33e-03  1.19e-04  5.50e-05  6.49e-01  
 14  +4.2922e-01  +4.4808e-01  1.89e-02  3.25e-06  7.53e-04  1.17e-06  1.05e-05  8.76e-01  
 15  +4.2152e-01  +4.2264e-01  1.11e-03  1.87e-07  4.35e-05  5.91e-08  6.35e-07  9.54e-01  
 16  +4.2101e-01  +4.2102e-01  1.16e-05  1.95e-09  4.53e-07  6.18e-10  6.67e-09  9.90e-01  
 17  +4.2100e-01  +4.2100e-01  1.16e-07  1.95e-11  4.53e-09  6.18e-12  6.67e-11  9.90e-01  
 18  +4.2100e-01  +4.2100e-01  1.16e-09  1.95e-13  4.53e-11  6.25e-14  6.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 147.7412ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:24 PM: Optimal value: 4.210e-01
(CVXPY) Oct 06 04:11:24 PM: Compilation took 4.711e-02 seconds
(CVXPY) Oct 06 04:11:24 PM: Solver (including time spent in interface) took 1.567e-01 seconds
Iteration: 3, Objective: 0.4210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:24 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:24 PM: Finished problem compilation (took 4.680e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 66832
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8396e-01  +1.0701e+03  1.07e+03  4.20e-01  7.36e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3454e-01  +1.2596e+02  1.25e+02  1.63e-01  3.66e+01  1.48e-02  2.65e-01  9.03e-01  
  3  +5.0919e-01  +3.2491e+01  3.20e+01  1.22e-01  2.71e+01  3.97e-05  2.52e-01  2.22e-01  
  4  +5.0078e-01  +2.4671e+00  1.97e+00  1.34e-02  3.04e+00  5.64e-06  1.51e-01  7.14e-01  
  5  +5.0014e-01  +9.4117e-01  4.41e-01  2.96e-03  6.82e-01  2.36e-05  6.25e-02  9.58e-01  
  6  +5.0003e-01  +7.8987e-01  2.90e-01  1.77e-03  4.09e-01  4.98e-05  1.17e-02  9.33e-01  
  7  +4.9827e-01  +7.9224e-01  2.94e-01  1.87e-04  4.38e-02  1.03e-03  5.19e-04  9.60e-01  
  8  +4.9443e-01  +7.6121e-01  2.67e-01  7.45e-05  1.75e-02  2.08e-03  2.04e-04  6.57e-01  
  9  +4.9171e-01  +7.3370e-01  2.42e-01  6.35e-05  1.49e-02  1.59e-03  1.74e-04  2.94e-01  
 10  +4.8490e-01  +6.8559e-01  2.01e-01  4.38e-05  1.02e-02  9.78e-04  1.21e-04  5.49e-01  
 11  +4.7848e-01  +6.5232e-01  1.74e-01  4.03e-05  9.42e-03  4.67e-04  1.17e-04  2.92e-01  
 12  +4.6931e-01  +6.1209e-01  1.43e-01  3.01e-05  7.02e-03  3.56e-04  8.76e-05  3.21e-01  
 13  +4.5217e-01  +5.4525e-01  9.31e-02  1.67e-05  3.89e-03  7.47e-05  5.01e-05  7.83e-01  
 14  +4.3318e-01  +4.6997e-01  3.68e-02  6.40e-06  1.49e-03  2.05e-05  2.05e-05  6.62e-01  
 15  +4.3091e-01  +4.5848e-01  2.76e-02  4.67e-06  1.08e-03  2.73e-06  1.50e-05  9.90e-01  
 16  +4.2108e-01  +4.2481e-01  3.73e-03  6.33e-07  1.47e-04  3.47e-07  2.13e-06  8.74e-01  
 17  +4.1959e-01  +4.1978e-01  1.97e-04  3.34e-08  7.74e-06  1.71e-08  1.14e-07  9.51e-01  
 18  +4.1950e-01  +4.1950e-01  2.00e-06  3.38e-10  7.84e-08  1.72e-10  1.16e-09  9.90e-01  
 19  +4.1950e-01  +4.1950e-01  2.00e-08  3.38e-12  7.83e-10  1.72e-12  1.16e-11  9.90e-01  
 20  +4.1950e-01  +4.1950e-01  2.00e-10  3.37e-14  7.84e-12  1.77e-14  1.20e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 164.0836ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:24 PM: Optimal value: 4.195e-01
(CVXPY) Oct 06 04:11:24 PM: Compilation took 4.680e-02 seconds
(CVXPY) Oct 06 04:11:24 PM: Solver (including time spent in interface) took 1.877e-01 seconds
Iteration: 4, Objective: 0.4195
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:24 PM: Your problem has 5057 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:24 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5057
  constraints   = 10057
  nnz(P)        = 0
  nnz(A)        = 67574
  cones (total) = 1
    : Nonnegative = 1,  numel = 10057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8386e-01  +1.0702e+03  1.07e+03  4.20e-01  7.36e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3448e-01  +1.2587e+02  1.25e+02  1.63e-01  3.65e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0918e-01  +3.2468e+01  3.20e+01  1.22e-01  2.70e+01  3.98e-05  2.52e-01  2.24e-01  
  4  +5.0078e-01  +2.4685e+00  1.97e+00  1.34e-02  3.04e+00  5.66e-06  1.50e-01  7.15e-01  
  5  +5.0013e-01  +9.3682e-01  4.37e-01  2.93e-03  6.76e-01  2.40e-05  6.04e-02  9.71e-01  
  6  +5.0000e-01  +7.7455e-01  2.75e-01  1.58e-03  3.65e-01  6.48e-05  8.54e-03  9.61e-01  
  7  +4.9797e-01  +7.7465e-01  2.77e-01  1.60e-04  3.75e-02  1.18e-03  4.40e-04  9.51e-01  
  8  +4.9376e-01  +7.5127e-01  2.58e-01  6.64e-05  1.56e-02  2.40e-03  1.81e-04  6.34e-01  
  9  +4.9070e-01  +7.2721e-01  2.37e-01  5.78e-05  1.35e-02  1.81e-03  1.58e-04  2.89e-01  
 10  +4.8793e-01  +7.1297e-01  2.25e-01  5.06e-05  1.19e-02  1.61e-03  1.39e-04  2.17e-01  
 11  +4.8734e-01  +7.0927e-01  2.22e-01  5.03e-05  1.18e-02  1.50e-03  1.38e-04  3.93e-02  
 12  +4.7787e-01  +6.5320e-01  1.75e-01  4.19e-05  9.79e-03  8.73e-05  1.20e-04  6.99e-01  
 13  +4.6202e-01  +5.8905e-01  1.27e-01  2.56e-05  5.96e-03  5.95e-05  7.54e-05  4.36e-01  
 14  +4.3964e-01  +5.0070e-01  6.11e-02  1.13e-05  2.62e-03  6.06e-07  3.56e-05  9.09e-01  
 15  +4.3342e-01  +4.7784e-01  4.44e-02  8.04e-06  1.87e-03  5.53e-07  2.59e-05  3.07e-01  
 16  +4.2788e-01  +4.5628e-01  2.84e-02  4.92e-06  1.14e-03  1.94e-06  1.60e-05  9.90e-01  
 17  +4.2533e-01  +4.4740e-01  2.21e-02  3.81e-06  8.84e-04  1.51e-06  1.26e-05  2.41e-01  
 18  +4.2096e-01  +4.3184e-01  1.09e-02  1.87e-06  4.33e-04  7.98e-07  6.27e-06  9.90e-01  
 19  +4.1679e-01  +4.1767e-01  8.83e-04  1.52e-07  3.53e-05  6.07e-08  5.25e-07  9.90e-01  
 20  +4.1641e-01  +4.1642e-01  1.28e-05  2.20e-09  5.10e-07  8.48e-10  7.68e-09  9.87e-01  
 21  +4.1640e-01  +4.1640e-01  1.28e-07  2.20e-11  5.10e-09  8.48e-12  7.68e-11  9.90e-01  
 22  +4.1640e-01  +4.1640e-01  1.28e-09  2.20e-13  5.11e-11  8.75e-14  7.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 173.0402ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:25 PM: Optimal value: 4.164e-01
(CVXPY) Oct 06 04:11:25 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:11:25 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 5, Objective: 0.4164
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:25 PM: Your problem has 5067 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:25 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5067
  constraints   = 10067
  nnz(P)        = 0
  nnz(A)        = 68398
  cones (total) = 1
    : Nonnegative = 1,  numel = 10067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8380e-01  +1.0704e+03  1.07e+03  4.20e-01  7.35e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3442e-01  +1.2574e+02  1.25e+02  1.63e-01  3.64e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0916e-01  +3.2431e+01  3.19e+01  1.22e-01  2.70e+01  3.98e-05  2.52e-01  2.25e-01  
  4  +5.0078e-01  +2.4718e+00  1.97e+00  1.34e-02  3.05e+00  5.67e-06  1.50e-01  7.16e-01  
  5  +5.0019e-01  +1.0765e+00  5.76e-01  3.88e-03  8.92e-01  2.26e-05  7.29e-02  8.31e-01  
  6  +5.0006e-01  +7.8819e-01  2.88e-01  1.86e-03  4.30e-01  3.32e-05  1.64e-02  8.26e-01  
  7  +4.9870e-01  +8.2590e-01  3.27e-01  2.45e-04  5.75e-02  7.98e-04  6.78e-04  9.74e-01  
  8  +4.9529e-01  +7.9911e-01  3.04e-01  8.71e-05  2.04e-02  1.94e-03  2.36e-04  6.90e-01  
  9  +4.9064e-01  +7.4654e-01  2.56e-01  6.39e-05  1.50e-02  1.34e-03  1.74e-04  4.64e-01  
 10  +4.9003e-01  +7.4221e-01  2.52e-01  6.21e-05  1.45e-02  1.27e-03  1.70e-04  6.86e-02  
 11  +4.8680e-01  +7.2058e-01  2.34e-01  5.47e-05  1.28e-02  9.37e-04  1.51e-04  2.85e-01  
 12  +4.8292e-01  +6.9237e-01  2.09e-01  5.06e-05  1.18e-02  3.95e-04  1.41e-04  4.24e-01  
 13  +4.5954e-01  +5.8753e-01  1.28e-01  2.41e-05  5.61e-03  2.24e-04  7.10e-05  5.74e-01  
 14  +4.5255e-01  +5.5976e-01  1.07e-01  2.00e-05  4.66e-03  1.50e-04  6.05e-05  2.78e-01  
 15  +4.4367e-01  +5.2520e-01  8.15e-02  1.50e-05  3.48e-03  9.74e-05  4.65e-05  3.12e-01  
 16  +4.2339e-01  +4.4742e-01  2.40e-02  4.23e-06  9.80e-04  3.49e-06  1.40e-05  9.22e-01  
 17  +4.2079e-01  +4.3819e-01  1.74e-02  3.02e-06  7.01e-04  2.43e-06  1.01e-05  3.41e-01  
 18  +4.1897e-01  +4.3110e-01  1.21e-02  2.09e-06  4.84e-04  8.88e-07  7.05e-06  9.90e-01  
 19  +4.1610e-01  +4.2148e-01  5.38e-03  9.23e-07  2.14e-04  3.94e-07  3.16e-06  5.99e-01  
 20  +4.1431e-01  +4.1548e-01  1.17e-03  2.01e-07  4.65e-05  8.30e-08  6.95e-07  9.09e-01  
 21  +4.1381e-01  +4.1382e-01  1.70e-05  2.91e-09  6.74e-07  1.20e-09  1.01e-08  9.86e-01  
 22  +4.1380e-01  +4.1380e-01  1.70e-07  2.91e-11  6.74e-09  1.20e-11  1.01e-10  9.90e-01  
 23  +4.1380e-01  +4.1380e-01  1.70e-09  2.91e-13  6.74e-11  1.21e-13  1.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 182.4908ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:25 PM: Optimal value: 4.138e-01
(CVXPY) Oct 06 04:11:25 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:11:25 PM: Solver (including time spent in interface) took 1.878e-01 seconds
Iteration: 6, Objective: 0.4138
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:25 PM: Your problem has 5077 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:25 PM: Finished problem compilation (took 4.701e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5077
  constraints   = 10077
  nnz(P)        = 0
  nnz(A)        = 69233
  cones (total) = 1
    : Nonnegative = 1,  numel = 10077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8365e-01  +1.0707e+03  1.07e+03  4.21e-01  7.35e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3432e-01  +1.2558e+02  1.25e+02  1.63e-01  3.63e+01  1.49e-02  2.65e-01  9.06e-01  
  3  +5.0914e-01  +3.2393e+01  3.19e+01  1.21e-01  2.69e+01  4.00e-05  2.51e-01  2.27e-01  
  4  +5.0078e-01  +2.4774e+00  1.98e+00  1.35e-02  3.06e+00  5.69e-06  1.49e-01  7.17e-01  
  5  +5.0019e-01  +1.0787e+00  5.78e-01  3.90e-03  8.95e-01  2.34e-05  6.99e-02  8.51e-01  
  6  +5.0006e-01  +8.5582e-01  3.56e-01  2.21e-03  5.11e-01  4.42e-05  1.50e-02  8.72e-01  
  7  +4.9869e-01  +8.5830e-01  3.60e-01  2.65e-04  6.21e-02  8.02e-04  7.35e-04  9.61e-01  
  8  +4.9576e-01  +8.2186e-01  3.26e-01  1.11e-04  2.62e-02  1.52e-03  3.05e-04  6.48e-01  
  9  +4.9254e-01  +7.8427e-01  2.92e-01  8.91e-05  2.09e-02  1.25e-03  2.45e-04  3.13e-01  
 10  +4.9186e-01  +7.7531e-01  2.83e-01  8.88e-05  2.08e-02  1.14e-03  2.45e-04  3.60e-02  
 11  +4.8758e-01  +7.4643e-01  2.59e-01  6.69e-05  1.57e-02  1.05e-03  1.85e-04  3.48e-01  
 12  +4.8440e-01  +7.2697e-01  2.43e-01  5.73e-05  1.34e-02  8.34e-04  1.59e-04  2.91e-01  
 13  +4.8011e-01  +6.9956e-01  2.19e-01  5.06e-05  1.18e-02  5.28e-04  1.42e-04  3.17e-01  
 14  +4.7545e-01  +6.6802e-01  1.93e-01  4.65e-05  1.08e-02  1.81e-04  1.34e-04  4.61e-01  
 15  +4.5182e-01  +5.6419e-01  1.12e-01  2.19e-05  5.09e-03  8.95e-05  6.66e-05  5.83e-01  
 16  +4.3622e-01  +5.0198e-01  6.58e-02  1.23e-05  2.86e-03  3.27e-05  3.94e-05  5.78e-01  
 17  +4.2100e-01  +4.4307e-01  2.21e-02  3.93e-06  9.11e-04  3.31e-06  1.32e-05  9.11e-01  
 18  +4.2058e-01  +4.4143e-01  2.09e-02  3.71e-06  8.60e-04  2.81e-06  1.26e-05  2.18e-01  
 19  +4.1638e-01  +4.2623e-01  9.85e-03  1.72e-06  3.99e-04  7.20e-07  5.92e-06  9.90e-01  
 20  +4.1328e-01  +4.1557e-01  2.30e-03  4.00e-07  9.26e-05  1.64e-07  1.40e-06  8.55e-01  
 21  +4.1232e-01  +4.1237e-01  5.14e-05  8.92e-09  2.07e-06  3.54e-09  3.15e-08  9.82e-01  
 22  +4.1230e-01  +4.1230e-01  5.14e-07  8.92e-11  2.07e-08  3.54e-11  3.15e-10  9.90e-01  
 23  +4.1230e-01  +4.1230e-01  5.14e-09  8.92e-13  2.07e-10  3.54e-13  3.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 191.2118ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:26 PM: Optimal value: 4.123e-01
(CVXPY) Oct 06 04:11:26 PM: Compilation took 4.701e-02 seconds
(CVXPY) Oct 06 04:11:26 PM: Solver (including time spent in interface) took 2.038e-01 seconds
Iteration: 7, Objective: 0.4123
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:26 PM: Your problem has 5082 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:26 PM: Finished problem compilation (took 4.689e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5082
  constraints   = 10082
  nnz(P)        = 0
  nnz(A)        = 69526
  cones (total) = 1
    : Nonnegative = 1,  numel = 10082

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8360e-01  +1.0707e+03  1.07e+03  4.21e-01  7.35e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3427e-01  +1.2549e+02  1.25e+02  1.63e-01  3.63e+01  1.49e-02  2.65e-01  9.06e-01  
  3  +5.0913e-01  +3.2369e+01  3.19e+01  1.21e-01  2.69e+01  4.00e-05  2.51e-01  2.28e-01  
  4  +5.0078e-01  +2.4774e+00  1.98e+00  1.35e-02  3.06e+00  5.70e-06  1.49e-01  7.18e-01  
  5  +5.0022e-01  +1.1523e+00  6.52e-01  4.40e-03  1.01e+00  2.28e-05  7.50e-02  7.91e-01  
  6  +5.0011e-01  +9.3069e-01  4.31e-01  2.76e-03  6.37e-01  3.64e-05  2.20e-02  7.99e-01  
  7  +4.9904e-01  +9.0766e-01  4.09e-01  3.45e-04  8.11e-02  6.23e-04  9.68e-04  9.90e-01  
  8  +4.9681e-01  +8.6432e-01  3.68e-01  1.45e-04  3.41e-02  1.18e-03  3.99e-04  6.51e-01  
  9  +4.9345e-01  +8.0513e-01  3.12e-01  1.08e-04  2.54e-02  8.89e-04  2.97e-04  4.04e-01  
 10  +4.9265e-01  +7.8423e-01  2.92e-01  8.76e-05  2.06e-02  6.10e-04  2.39e-04  4.81e-01  
 11  +4.9102e-01  +7.6538e-01  2.74e-01  8.53e-05  2.00e-02  4.34e-04  2.35e-04  1.89e-01  
 12  +4.8605e-01  +7.3496e-01  2.49e-01  6.35e-05  1.49e-02  3.36e-04  1.76e-04  4.58e-01  
 13  +4.8035e-01  +7.0590e-01  2.26e-01  5.22e-05  1.22e-02  2.76e-04  1.47e-04  2.65e-01  
 14  +4.7676e-01  +6.8464e-01  2.08e-01  5.02e-05  1.17e-02  2.14e-04  1.47e-04  6.37e-02  
 15  +4.6474e-01  +6.2189e-01  1.57e-01  3.62e-05  8.43e-03  1.03e-04  1.09e-04  4.46e-01  
 16  +4.5492e-01  +5.8236e-01  1.27e-01  2.71e-05  6.30e-03  6.41e-05  8.26e-05  4.09e-01  
 17  +4.3619e-01  +5.0748e-01  7.13e-02  1.37e-05  3.18e-03  2.93e-05  4.42e-05  5.27e-01  
 18  +4.2352e-01  +4.5764e-01  3.41e-02  6.29e-06  1.46e-03  1.10e-05  2.12e-05  6.13e-01  
 19  +4.2178e-01  +4.5061e-01  2.88e-02  5.24e-06  1.21e-03  8.16e-06  1.77e-05  3.07e-01  
 20  +4.2076e-01  +4.4598e-01  2.52e-02  4.51e-06  1.04e-03  4.87e-06  1.52e-05  5.18e-01  
 21  +4.1722e-01  +4.3275e-01  1.55e-02  2.73e-06  6.33e-04  1.82e-06  9.36e-06  7.83e-01  
 22  +4.1245e-01  +4.1597e-01  3.52e-03  6.16e-07  1.43e-04  3.31e-07  2.16e-06  8.81e-01  
 23  +4.1146e-01  +4.1252e-01  1.06e-03  1.85e-07  4.29e-05  7.10e-08  6.56e-07  9.90e-01  
 24  +4.1100e-01  +4.1102e-01  1.14e-05  1.98e-09  4.59e-07  7.56e-10  7.04e-09  9.90e-01  
 25  +4.1100e-01  +4.1100e-01  1.14e-07  1.98e-11  4.59e-09  7.56e-12  7.04e-11  9.90e-01  
 26  +4.1100e-01  +4.1100e-01  1.14e-09  1.98e-13  4.59e-11  7.59e-14  7.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 214.4804ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:26 PM: Optimal value: 4.110e-01
(CVXPY) Oct 06 04:11:26 PM: Compilation took 4.689e-02 seconds
(CVXPY) Oct 06 04:11:26 PM: Solver (including time spent in interface) took 2.197e-01 seconds
Iteration: 8, Objective: 0.4110
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:26 PM: Your problem has 5092 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:26 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5092
  constraints   = 10092
  nnz(P)        = 0
  nnz(A)        = 70037
  cones (total) = 1
    : Nonnegative = 1,  numel = 10092

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8358e-01  +1.0706e+03  1.07e+03  4.21e-01  7.34e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3424e-01  +1.2540e+02  1.25e+02  1.63e-01  3.62e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0912e-01  +3.2346e+01  3.18e+01  1.21e-01  2.68e+01  4.00e-05  2.51e-01  2.29e-01  
  4  +5.0078e-01  +2.4758e+00  1.98e+00  1.35e-02  3.05e+00  5.70e-06  1.49e-01  7.19e-01  
  5  +5.0027e-01  +1.2782e+00  7.78e-01  5.25e-03  1.20e+00  2.14e-05  8.39e-02  6.89e-01  
  6  +5.0010e-01  +8.8732e-01  3.87e-01  2.51e-03  5.78e-01  3.19e-05  2.14e-02  8.42e-01  
  7  +4.9905e-01  +9.4609e-01  4.47e-01  3.74e-04  8.79e-02  6.27e-04  1.05e-03  9.79e-01  
  8  +4.9682e-01  +8.9228e-01  3.95e-01  1.56e-04  3.66e-02  1.16e-03  4.29e-04  6.57e-01  
  9  +4.9376e-01  +8.3411e-01  3.40e-01  1.20e-04  2.81e-02  9.15e-04  3.29e-04  3.56e-01  
 10  +4.9109e-01  +8.1313e-01  3.22e-01  9.26e-05  2.17e-02  9.61e-04  2.55e-04  2.82e-01  
 11  +4.8996e-01  +7.9681e-01  3.07e-01  9.16e-05  2.15e-02  7.99e-04  2.53e-04  7.64e-02  
 12  +4.8658e-01  +7.7419e-01  2.88e-01  7.51e-05  1.76e-02  7.44e-04  2.08e-04  2.55e-01  
 13  +4.8585e-01  +7.6418e-01  2.78e-01  7.28e-05  1.70e-02  6.14e-04  2.02e-04  1.41e-01  
 14  +4.7985e-01  +7.2695e-01  2.47e-01  5.84e-05  1.37e-02  4.74e-04  1.65e-04  3.07e-01  
 15  +4.7486e-01  +6.9912e-01  2.24e-01  5.05e-05  1.18e-02  3.65e-04  1.44e-04  2.35e-01  
 16  +4.6192e-01  +6.2155e-01  1.60e-01  3.53e-05  8.21e-03  3.57e-06  1.06e-04  7.93e-01  
 17  +4.4133e-01  +5.3287e-01  9.15e-02  1.82e-05  4.23e-03  2.82e-06  5.80e-05  6.22e-01  
 18  +4.2071e-01  +4.5158e-01  3.09e-02  5.69e-06  1.32e-03  1.30e-06  1.95e-05  8.37e-01  
 19  +4.1563e-01  +4.3204e-01  1.64e-02  2.96e-06  6.86e-04  9.66e-07  1.04e-05  8.62e-01  
 20  +4.1492e-01  +4.2940e-01  1.45e-02  2.61e-06  6.04e-04  8.68e-07  9.20e-06  2.53e-01  
 21  +4.1357e-01  +4.2436e-01  1.08e-02  1.94e-06  4.48e-04  6.94e-07  6.87e-06  7.90e-01  
 22  +4.0941e-01  +4.0993e-01  5.18e-04  9.33e-08  2.16e-05  3.23e-08  3.41e-07  9.58e-01  
 23  +4.0920e-01  +4.0921e-01  5.64e-06  1.02e-09  2.35e-07  3.49e-10  3.72e-09  9.89e-01  
 24  +4.0920e-01  +4.0920e-01  5.64e-08  1.02e-11  2.35e-09  3.49e-12  3.72e-11  9.90e-01  
 25  +4.0920e-01  +4.0920e-01  5.64e-10  1.02e-13  2.35e-11  3.49e-14  3.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 212.476ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:26 PM: Optimal value: 4.092e-01
(CVXPY) Oct 06 04:11:26 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:11:26 PM: Solver (including time spent in interface) took 2.348e-01 seconds
Iteration: 9, Objective: 0.4092
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:27 PM: Your problem has 5098 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:27 PM: Finished problem compilation (took 4.689e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5098
  constraints   = 10098
  nnz(P)        = 0
  nnz(A)        = 70579
  cones (total) = 1
    : Nonnegative = 1,  numel = 10098

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8359e-01  +1.0705e+03  1.07e+03  4.21e-01  7.34e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3424e-01  +1.2539e+02  1.25e+02  1.63e-01  3.61e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0912e-01  +3.2336e+01  3.18e+01  1.21e-01  2.68e+01  4.00e-05  2.51e-01  2.29e-01  
  4  +5.0078e-01  +2.4726e+00  1.97e+00  1.35e-02  3.05e+00  5.70e-06  1.49e-01  7.19e-01  
  5  +5.0028e-01  +1.2845e+00  7.84e-01  5.30e-03  1.21e+00  2.12e-05  8.43e-02  6.84e-01  
  6  +5.0009e-01  +8.8084e-01  3.81e-01  2.43e-03  5.61e-01  3.40e-05  1.90e-02  9.38e-01  
  7  +4.9899e-01  +9.2584e-01  4.27e-01  3.38e-04  7.93e-02  6.50e-04  9.46e-04  9.79e-01  
  8  +4.9674e-01  +8.7771e-01  3.81e-01  1.46e-04  3.44e-02  1.16e-03  4.03e-04  6.43e-01  
  9  +4.9330e-01  +8.1882e-01  3.26e-01  1.10e-04  2.59e-02  9.05e-04  3.03e-04  3.81e-01  
 10  +4.9151e-01  +8.0576e-01  3.14e-01  9.14e-05  2.14e-02  9.20e-04  2.51e-04  2.37e-01  
 11  +4.9026e-01  +7.8492e-01  2.95e-01  8.95e-05  2.10e-02  6.66e-04  2.47e-04  1.64e-01  
 12  +4.8680e-01  +7.6390e-01  2.77e-01  7.31e-05  1.71e-02  6.28e-04  2.03e-04  2.57e-01  
 13  +4.8406e-01  +7.3996e-01  2.56e-01  6.54e-05  1.53e-02  3.86e-04  1.83e-04  3.54e-01  
 14  +4.7748e-01  +7.0570e-01  2.28e-01  5.26e-05  1.23e-02  3.21e-04  1.49e-04  2.61e-01  
 15  +4.7006e-01  +6.5297e-01  1.83e-01  4.55e-05  1.06e-02  2.79e-06  1.38e-04  6.95e-01  
 16  +4.4992e-01  +5.5619e-01  1.06e-01  2.33e-05  5.40e-03  3.28e-06  7.34e-05  7.21e-01  
 17  +4.3139e-01  +4.9355e-01  6.22e-02  1.18e-05  2.73e-03  2.35e-06  3.87e-05  6.28e-01  
 18  +4.2303e-01  +4.6128e-01  3.83e-02  7.10e-06  1.64e-03  1.51e-06  2.41e-05  4.37e-01  
 19  +4.1623e-01  +4.3447e-01  1.82e-02  3.29e-06  7.62e-04  1.07e-06  1.15e-05  8.78e-01  
 20  +4.0975e-01  +4.1110e-01  1.34e-03  2.42e-07  5.60e-05  7.93e-08  8.78e-07  9.69e-01  
 21  +4.0923e-01  +4.0931e-01  7.70e-05  1.39e-08  3.21e-06  4.52e-09  5.07e-08  9.46e-01  
 22  +4.0920e-01  +4.0920e-01  7.76e-07  1.40e-10  3.23e-08  4.55e-11  5.11e-10  9.90e-01  
 23  +4.0920e-01  +4.0920e-01  7.76e-09  1.40e-12  3.23e-10  4.55e-13  5.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 202.7533ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:27 PM: Optimal value: 4.092e-01
(CVXPY) Oct 06 04:11:27 PM: Compilation took 4.689e-02 seconds
(CVXPY) Oct 06 04:11:27 PM: Solver (including time spent in interface) took 2.193e-01 seconds
Iteration: 10, Objective: 0.4092
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:27 PM: Your problem has 5104 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:27 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5104
  constraints   = 10104
  nnz(P)        = 0
  nnz(A)        = 70928
  cones (total) = 1
    : Nonnegative = 1,  numel = 10104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8355e-01  +1.0706e+03  1.07e+03  4.21e-01  7.34e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3424e-01  +1.2539e+02  1.25e+02  1.63e-01  3.61e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0912e-01  +3.2333e+01  3.18e+01  1.21e-01  2.68e+01  4.00e-05  2.51e-01  2.29e-01  
  4  +5.0078e-01  +2.4728e+00  1.97e+00  1.35e-02  3.05e+00  5.70e-06  1.49e-01  7.19e-01  
  5  +5.0031e-01  +1.3558e+00  8.55e-01  5.79e-03  1.32e+00  2.04e-05  8.93e-02  6.29e-01  
  6  +5.0008e-01  +8.5806e-01  3.58e-01  2.30e-03  5.30e-01  3.35e-05  1.88e-02  9.85e-01  
  7  +4.9895e-01  +9.4781e-01  4.49e-01  3.60e-04  8.44e-02  6.76e-04  1.02e-03  9.73e-01  
  8  +4.9674e-01  +8.9473e-01  3.98e-01  1.61e-04  3.78e-02  1.15e-03  4.48e-04  6.28e-01  
  9  +4.9116e-01  +7.8362e-01  2.92e-01  1.00e-04  2.35e-02  6.43e-04  2.78e-04  5.96e-01  
 10  +4.9047e-01  +7.8024e-01  2.90e-01  8.75e-05  2.05e-02  6.10e-04  2.42e-04  2.56e-01  
 11  +4.8906e-01  +7.5671e-01  2.68e-01  8.27e-05  1.94e-02  3.10e-04  2.30e-04  3.86e-01  
 12  +4.8833e-01  +7.5238e-01  2.64e-01  7.98e-05  1.87e-02  2.76e-04  2.22e-04  1.30e-01  
 13  +4.8229e-01  +7.2244e-01  2.40e-01  6.05e-05  1.41e-02  2.58e-04  1.70e-04  3.10e-01  
 14  +4.7611e-01  +6.9282e-01  2.17e-01  4.99e-05  1.16e-02  2.16e-04  1.42e-04  2.41e-01  
 15  +4.6553e-01  +6.3455e-01  1.69e-01  3.92e-05  9.13e-03  2.06e-06  1.17e-04  7.85e-01  
 16  +4.4748e-01  +5.5927e-01  1.12e-01  2.27e-05  5.27e-03  1.97e-06  7.09e-05  4.71e-01  
 17  +4.3044e-01  +4.9029e-01  5.99e-02  1.14e-05  2.65e-03  1.53e-06  3.78e-05  5.82e-01  
 18  +4.2293e-01  +4.6104e-01  3.81e-02  7.10e-06  1.64e-03  1.12e-06  2.42e-05  4.31e-01  
 19  +4.1650e-01  +4.3569e-01  1.92e-02  3.48e-06  8.05e-04  9.59e-07  1.21e-05  7.94e-01  
 20  +4.1290e-01  +4.2236e-01  9.46e-03  1.71e-06  3.95e-04  5.37e-07  6.04e-06  7.25e-01  
 21  +4.0955e-01  +4.1043e-01  8.83e-04  1.59e-07  3.68e-05  4.98e-08  5.75e-07  9.09e-01  
 22  +4.0920e-01  +4.0921e-01  9.84e-06  1.77e-09  4.10e-07  5.60e-10  6.42e-09  9.90e-01  
 23  +4.0920e-01  +4.0920e-01  9.85e-08  1.77e-11  4.10e-09  5.60e-12  6.42e-11  9.90e-01  
 24  +4.0920e-01  +4.0920e-01  9.85e-10  1.77e-13  4.11e-11  5.60e-14  6.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.1562ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:27 PM: Optimal value: 4.092e-01
(CVXPY) Oct 06 04:11:27 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:11:27 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 11, Objective: 0.4092
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:28 PM: Your problem has 5105 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:28 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5105
  constraints   = 10105
  nnz(P)        = 0
  nnz(A)        = 70967
  cones (total) = 1
    : Nonnegative = 1,  numel = 10105

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8354e-01  +1.0706e+03  1.07e+03  4.21e-01  7.34e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3423e-01  +1.2538e+02  1.25e+02  1.63e-01  3.61e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0912e-01  +3.2332e+01  3.18e+01  1.21e-01  2.68e+01  4.00e-05  2.51e-01  2.29e-01  
  4  +5.0078e-01  +2.4738e+00  1.97e+00  1.35e-02  3.05e+00  5.71e-06  1.49e-01  7.19e-01  
  5  +5.0031e-01  +1.3574e+00  8.57e-01  5.80e-03  1.33e+00  2.05e-05  8.93e-02  6.30e-01  
  6  +5.0011e-01  +9.2563e-01  4.26e-01  2.76e-03  6.36e-01  3.16e-05  2.40e-02  9.02e-01  
  7  +4.9931e-01  +9.8970e-01  4.90e-01  5.00e-04  1.17e-01  4.88e-04  1.42e-03  9.90e-01  
  8  +4.9733e-01  +9.3623e-01  4.39e-01  1.87e-04  4.40e-02  1.06e-03  5.20e-04  6.79e-01  
  9  +4.9286e-01  +8.1993e-01  3.27e-01  1.20e-04  2.81e-02  6.40e-04  3.33e-04  5.52e-01  
 10  +4.9061e-01  +8.0243e-01  3.12e-01  9.14e-05  2.14e-02  6.41e-04  2.52e-04  3.56e-01  
 11  +4.8949e-01  +7.8924e-01  3.00e-01  9.05e-05  2.12e-02  5.56e-04  2.51e-04  5.68e-02  
 12  +4.8616e-01  +7.6768e-01  2.82e-01  7.45e-05  1.74e-02  5.08e-04  2.07e-04  2.68e-01  
 13  +4.8428e-01  +7.5094e-01  2.67e-01  6.86e-05  1.60e-02  3.85e-04  1.92e-04  2.36e-01  
 14  +4.8026e-01  +7.2048e-01  2.40e-01  5.97e-05  1.39e-02  2.16e-04  1.69e-04  3.92e-01  
 15  +4.7026e-01  +6.6899e-01  1.99e-01  4.40e-05  1.03e-02  1.21e-04  1.28e-04  4.71e-01  
 16  +4.4855e-01  +5.6764e-01  1.19e-01  2.37e-05  5.51e-03  3.86e-05  7.35e-05  6.16e-01  
 17  +4.4045e-01  +5.3308e-01  9.26e-02  1.80e-05  4.17e-03  2.42e-05  5.73e-05  3.66e-01  
 18  +4.2200e-01  +4.5758e-01  3.56e-02  6.59e-06  1.53e-03  5.30e-06  2.24e-05  7.63e-01  
 19  +4.1750e-01  +4.4012e-01  2.26e-02  4.13e-06  9.56e-04  2.97e-06  1.43e-05  4.96e-01  
 20  +4.1233e-01  +4.2040e-01  8.07e-03  1.46e-06  3.37e-04  7.47e-07  5.18e-06  8.57e-01  
 21  +4.0937e-01  +4.0979e-01  4.17e-04  7.52e-08  1.74e-05  3.05e-08  2.72e-07  9.81e-01  
 22  +4.0920e-01  +4.0921e-01  4.28e-06  7.73e-10  1.79e-07  3.13e-10  2.80e-09  9.90e-01  
 23  +4.0920e-01  +4.0920e-01  4.34e-08  7.83e-12  1.81e-09  3.18e-12  2.84e-11  9.90e-01  
 24  +4.0920e-01  +4.0920e-01  4.37e-10  7.88e-14  1.82e-11  3.19e-14  2.86e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.4773ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:28 PM: Optimal value: 4.092e-01
(CVXPY) Oct 06 04:11:28 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:11:28 PM: Solver (including time spent in interface) took 2.346e-01 seconds
FULL MODEL:
  Accruacy: 0.5854
  Our objective: 0.17079999999999995

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.1488)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0026)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1)                                  <-- (term's our objective: 0.0062)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0026)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.001)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 12.809917688369751
Best over terms:
  Our final objective: 0.14880000000000004
    Its accruacy: 0.5744
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14880000000000004
  Highest accruacy: 0.5744
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

