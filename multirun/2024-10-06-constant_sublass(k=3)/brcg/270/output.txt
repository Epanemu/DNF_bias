Command:
python test_script.py -s constant_subclass -d 7 -n 10000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1378
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 7.

Computed total variation: 0.16199999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:21 PM: Your problem has 5015 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:21 PM: Finished problem compilation (took 6.143e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5015
  constraints   = 10015
  nnz(P)        = 0
  nnz(A)        = 50015
  cones (total) = 1
    : Nonnegative = 1,  numel = 10015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.05e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +1.0510e+03  1.05e+03  4.04e-01  6.56e+01  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3816e-01  +1.3089e+02  1.30e+02  1.56e-01  3.24e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0988e-01  +3.3472e+01  3.30e+01  1.21e-01  2.47e+01  3.43e-05  2.46e-01  1.63e-01  
  4  +5.0055e-01  +1.8971e+00  1.40e+00  9.48e-03  1.97e+00  5.01e-06  1.44e-01  8.09e-01  
  5  +5.0008e-01  +7.4813e-01  2.48e-01  1.66e-03  3.50e-01  1.49e-05  4.87e-02  9.90e-01  
  6  +5.0000e-01  +6.5824e-01  1.58e-01  9.91e-04  2.09e-01  3.89e-05  8.04e-03  8.57e-01  
  7  +4.9867e-01  +6.6555e-01  1.67e-01  1.16e-04  2.47e-02  8.88e-04  3.47e-04  9.59e-01  
  8  +4.9597e-01  +6.5582e-01  1.60e-01  4.90e-05  1.04e-02  1.83e-03  1.45e-04  6.40e-01  
  9  +4.8877e-01  +6.1029e-01  1.22e-01  3.56e-05  7.57e-03  9.02e-04  1.09e-04  4.48e-01  
 10  +4.7952e-01  +5.5978e-01  8.03e-02  2.40e-05  5.09e-03  2.93e-05  7.76e-05  7.22e-01  
 11  +4.6313e-01  +4.8130e-01  1.82e-02  4.39e-06  9.31e-04  2.13e-06  1.54e-05  8.95e-01  
 12  +4.5816e-01  +4.6059e-01  2.44e-03  5.40e-07  1.14e-04  2.51e-07  2.09e-06  8.79e-01  
 13  +4.5722e-01  +4.5726e-01  4.42e-05  9.08e-09  1.92e-06  3.82e-09  3.80e-08  9.87e-01  
 14  +4.5720e-01  +4.5720e-01  4.42e-07  9.07e-11  1.92e-08  3.82e-11  3.80e-10  9.90e-01  
 15  +4.5720e-01  +4.5720e-01  4.43e-09  9.08e-13  1.92e-10  4.21e-13  4.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.1101ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:21 PM: Optimal value: 4.572e-01
(CVXPY) Oct 06 04:04:21 PM: Compilation took 6.143e-02 seconds
(CVXPY) Oct 06 04:04:21 PM: Solver (including time spent in interface) took 1.180e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4572
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:21 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:21 PM: Finished problem compilation (took 3.991e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 58355
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8808e-01  +1.0512e+03  1.05e+03  4.04e-01  6.82e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3801e-01  +1.3058e+02  1.30e+02  1.56e-01  3.36e+01  1.31e-02  2.55e-01  8.66e-01  
  3  +5.0980e-01  +3.3302e+01  3.28e+01  1.20e-01  2.55e+01  3.43e-05  2.46e-01  1.67e-01  
  4  +5.0050e-01  +1.7788e+00  1.28e+00  8.69e-03  1.88e+00  5.13e-06  1.36e-01  8.64e-01  
  5  +5.0011e-01  +8.2449e-01  3.24e-01  2.18e-03  4.76e-01  1.05e-05  5.36e-02  8.14e-01  
  6  +5.0008e-01  +7.6859e-01  2.69e-01  1.72e-03  3.78e-01  2.00e-05  1.52e-02  8.32e-01  
  7  +4.9943e-01  +7.3559e-01  2.36e-01  1.83e-04  4.06e-02  4.34e-04  5.18e-04  9.70e-01  
  8  +4.9831e-01  +7.1834e-01  2.20e-01  8.75e-05  1.94e-02  7.38e-04  2.44e-04  6.22e-01  
  9  +4.9681e-01  +7.0160e-01  2.05e-01  7.10e-05  1.57e-02  7.02e-04  1.98e-04  2.78e-01  
 10  +4.9322e-01  +6.6568e-01  1.72e-01  5.59e-05  1.24e-02  4.24e-04  1.57e-04  4.25e-01  
 11  +4.9347e-01  +6.6729e-01  1.74e-01  5.51e-05  1.22e-02  4.05e-04  1.53e-04  8.50e-02  
 12  +4.9278e-01  +6.6503e-01  1.72e-01  4.66e-05  1.03e-02  3.89e-04  1.28e-04  2.96e-01  
 13  +4.9247e-01  +6.6272e-01  1.70e-01  4.63e-05  1.03e-02  3.58e-04  1.28e-04  5.97e-02  
 14  +4.9128e-01  +6.5429e-01  1.63e-01  4.11e-05  9.10e-03  2.26e-04  1.13e-04  4.24e-01  
 15  +4.8990e-01  +6.4605e-01  1.56e-01  3.83e-05  8.48e-03  1.57e-04  1.06e-04  2.95e-01  
 16  +4.8092e-01  +6.1222e-01  1.31e-01  2.45e-05  5.43e-03  5.34e-05  6.87e-05  8.22e-01  
 17  +4.6384e-01  +5.4650e-01  8.27e-02  1.44e-05  3.17e-03  2.39e-05  4.20e-05  4.99e-01  
 18  +4.3701e-01  +4.4965e-01  1.26e-02  2.01e-06  4.43e-04  2.44e-07  6.29e-06  9.12e-01  
 19  +4.3142e-01  +4.3188e-01  4.62e-04  7.21e-08  1.59e-05  8.80e-09  2.29e-07  9.65e-01  
 20  +4.3120e-01  +4.3121e-01  4.64e-06  7.25e-10  1.59e-07  8.86e-11  2.30e-09  9.90e-01  
 21  +4.3120e-01  +4.3120e-01  4.64e-08  7.25e-12  1.59e-09  8.86e-13  2.30e-11  9.90e-01  
 22  +4.3120e-01  +4.3120e-01  4.64e-10  7.25e-14  1.59e-11  8.93e-15  2.32e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.7785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:21 PM: Optimal value: 4.312e-01
(CVXPY) Oct 06 04:04:21 PM: Compilation took 3.991e-02 seconds
(CVXPY) Oct 06 04:04:21 PM: Solver (including time spent in interface) took 1.627e-01 seconds
Iteration: 2, Objective: 0.4312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:21 PM: Your problem has 5028 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:21 PM: Finished problem compilation (took 3.602e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5028
  constraints   = 10028
  nnz(P)        = 0
  nnz(A)        = 59045
  cones (total) = 1
    : Nonnegative = 1,  numel = 10028

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8808e-01  +1.0511e+03  1.05e+03  4.04e-01  6.82e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3798e-01  +1.3054e+02  1.30e+02  1.56e-01  3.36e+01  1.31e-02  2.55e-01  8.66e-01  
  3  +5.0979e-01  +3.3274e+01  3.28e+01  1.20e-01  2.55e+01  3.43e-05  2.46e-01  1.67e-01  
  4  +5.0050e-01  +1.7684e+00  1.27e+00  8.63e-03  1.87e+00  5.14e-06  1.35e-01  8.69e-01  
  5  +5.0010e-01  +7.9364e-01  2.94e-01  1.97e-03  4.31e-01  1.06e-05  4.77e-02  8.59e-01  
  6  +5.0006e-01  +8.0392e-01  3.04e-01  1.72e-03  3.78e-01  3.76e-05  9.11e-03  9.35e-01  
  7  +4.9924e-01  +7.9124e-01  2.92e-01  1.87e-04  4.16e-02  5.64e-04  5.24e-04  9.44e-01  
  8  +4.9769e-01  +7.5293e-01  2.55e-01  7.99e-05  1.77e-02  9.56e-04  2.20e-04  6.86e-01  
  9  +4.9563e-01  +7.2993e-01  2.34e-01  6.49e-05  1.44e-02  8.89e-04  1.79e-04  2.67e-01  
 10  +4.9224e-01  +6.8761e-01  1.95e-01  5.45e-05  1.21e-02  4.20e-04  1.51e-04  4.41e-01  
 11  +4.9058e-01  +6.7236e-01  1.82e-01  4.69e-05  1.04e-02  2.76e-04  1.30e-04  4.01e-01  
 12  +4.8934e-01  +6.6320e-01  1.74e-01  4.29e-05  9.49e-03  1.80e-04  1.19e-04  3.57e-01  
 13  +4.8387e-01  +6.3528e-01  1.51e-01  3.41e-05  7.55e-03  7.84e-05  9.59e-05  5.71e-01  
 14  +4.6062e-01  +5.4141e-01  8.08e-02  1.43e-05  3.15e-03  1.98e-05  4.23e-05  7.98e-01  
 15  +4.4402e-01  +4.8179e-01  3.78e-02  6.43e-06  1.41e-03  7.45e-06  1.99e-05  5.81e-01  
 16  +4.3581e-01  +4.5251e-01  1.67e-02  2.71e-06  5.95e-04  2.01e-06  8.51e-06  8.54e-01  
 17  +4.3566e-01  +4.5186e-01  1.62e-02  2.67e-06  5.87e-04  1.85e-06  8.46e-06  8.45e-02  
 18  +4.3514e-01  +4.4994e-01  1.48e-02  2.38e-06  5.23e-04  1.46e-06  7.48e-06  5.97e-01  
 19  +4.2974e-01  +4.3223e-01  2.49e-03  3.99e-07  8.78e-05  2.08e-07  1.28e-06  9.74e-01  
 20  +4.2864e-01  +4.2873e-01  8.69e-05  1.39e-08  3.05e-06  7.15e-09  4.50e-08  9.76e-01  
 21  +4.2860e-01  +4.2860e-01  8.73e-07  1.39e-10  3.06e-08  7.18e-11  4.52e-10  9.90e-01  
 22  +4.2860e-01  +4.2860e-01  8.73e-09  1.39e-12  3.06e-10  7.18e-13  4.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 163.6097ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:22 PM: Optimal value: 4.286e-01
(CVXPY) Oct 06 04:04:22 PM: Compilation took 3.602e-02 seconds
(CVXPY) Oct 06 04:04:22 PM: Solver (including time spent in interface) took 1.796e-01 seconds
Iteration: 3, Objective: 0.4286
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:22 PM: Your problem has 5032 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:22 PM: Finished problem compilation (took 3.996e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5032
  constraints   = 10032
  nnz(P)        = 0
  nnz(A)        = 59516
  cones (total) = 1
    : Nonnegative = 1,  numel = 10032

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8805e-01  +1.0512e+03  1.05e+03  4.04e-01  6.82e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3797e-01  +1.3052e+02  1.30e+02  1.56e-01  3.36e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0979e-01  +3.3272e+01  3.28e+01  1.20e-01  2.55e+01  3.43e-05  2.46e-01  1.67e-01  
  4  +5.0050e-01  +1.7709e+00  1.27e+00  8.64e-03  1.87e+00  5.14e-06  1.35e-01  8.69e-01  
  5  +5.0012e-01  +8.4543e-01  3.45e-01  2.32e-03  5.07e-01  1.04e-05  5.43e-02  7.94e-01  
  6  +5.0006e-01  +7.4757e-01  2.48e-01  1.54e-03  3.37e-01  2.45e-05  1.09e-02  8.76e-01  
  7  +4.9936e-01  +7.5221e-01  2.53e-01  1.83e-04  4.06e-02  4.79e-04  5.14e-04  9.55e-01  
  8  +4.9790e-01  +7.3309e-01  2.35e-01  7.68e-05  1.71e-02  9.31e-04  2.12e-04  6.80e-01  
  9  +4.9546e-01  +7.1269e-01  2.17e-01  5.80e-05  1.29e-02  9.51e-04  1.60e-04  3.22e-01  
 10  +4.9101e-01  +6.7978e-01  1.89e-01  4.72e-05  1.05e-02  7.11e-04  1.31e-04  3.06e-01  
 11  +4.9039e-01  +6.7575e-01  1.85e-01  4.55e-05  1.01e-02  6.35e-04  1.26e-04  1.16e-01  
 12  +4.9029e-01  +6.7321e-01  1.83e-01  4.47e-05  9.90e-03  4.93e-04  1.24e-04  2.01e-01  
 13  +4.8556e-01  +6.5267e-01  1.67e-01  3.50e-05  7.76e-03  4.07e-04  9.77e-05  3.51e-01  
 14  +4.7731e-01  +6.0877e-01  1.31e-01  2.98e-05  6.58e-03  3.64e-06  8.61e-05  7.14e-01  
 15  +4.5834e-01  +5.3666e-01  7.83e-02  1.44e-05  3.17e-03  2.99e-06  4.32e-05  6.60e-01  
 16  +4.4882e-01  +5.0258e-01  5.38e-02  9.49e-06  2.09e-03  2.07e-06  2.93e-05  3.61e-01  
 17  +4.3848e-01  +4.6510e-01  2.66e-02  4.41e-06  9.71e-04  1.89e-06  1.40e-05  9.90e-01  
 18  +4.3045e-01  +4.3802e-01  7.57e-03  1.24e-06  2.73e-04  5.27e-07  4.05e-06  7.41e-01  
 19  +4.2732e-01  +4.2758e-01  2.64e-04  4.31e-08  9.48e-06  1.75e-08  1.43e-07  9.67e-01  
 20  +4.2720e-01  +4.2720e-01  2.65e-06  4.32e-10  9.51e-08  1.76e-10  1.44e-09  9.90e-01  
 21  +4.2720e-01  +4.2720e-01  2.65e-08  4.32e-12  9.51e-10  1.76e-12  1.44e-11  9.90e-01  
 22  +4.2720e-01  +4.2720e-01  2.65e-10  4.32e-14  9.51e-12  1.76e-14  1.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.2477ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:22 PM: Optimal value: 4.272e-01
(CVXPY) Oct 06 04:04:22 PM: Compilation took 3.996e-02 seconds
(CVXPY) Oct 06 04:04:22 PM: Solver (including time spent in interface) took 1.600e-01 seconds
Iteration: 4, Objective: 0.4272
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:22 PM: Your problem has 5033 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:22 PM: Finished problem compilation (took 3.986e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5033
  constraints   = 10033
  nnz(P)        = 0
  nnz(A)        = 59609
  cones (total) = 1
    : Nonnegative = 1,  numel = 10033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8805e-01  +1.0512e+03  1.05e+03  4.04e-01  6.82e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3797e-01  +1.3051e+02  1.30e+02  1.56e-01  3.36e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0979e-01  +3.3270e+01  3.28e+01  1.20e-01  2.55e+01  3.43e-05  2.46e-01  1.67e-01  
  4  +5.0050e-01  +1.7712e+00  1.27e+00  8.65e-03  1.87e+00  5.15e-06  1.35e-01  8.69e-01  
  5  +5.0013e-01  +8.7348e-01  3.73e-01  2.51e-03  5.48e-01  1.03e-05  5.79e-02  7.59e-01  
  6  +5.0007e-01  +7.4920e-01  2.49e-01  1.57e-03  3.45e-01  2.09e-05  1.21e-02  8.86e-01  
  7  +4.9943e-01  +7.5685e-01  2.57e-01  1.90e-04  4.23e-02  4.35e-04  5.35e-04  9.61e-01  
  8  +4.9811e-01  +7.3697e-01  2.39e-01  8.01e-05  1.78e-02  8.41e-04  2.21e-04  6.80e-01  
  9  +4.9561e-01  +7.1516e-01  2.20e-01  5.78e-05  1.28e-02  8.85e-04  1.60e-04  3.64e-01  
 10  +4.9112e-01  +6.8144e-01  1.90e-01  4.75e-05  1.05e-02  6.40e-04  1.32e-04  3.07e-01  
 11  +4.9062e-01  +6.7798e-01  1.87e-01  4.63e-05  1.03e-02  5.81e-04  1.29e-04  9.02e-02  
 12  +4.8849e-01  +6.6777e-01  1.79e-01  4.08e-05  9.04e-03  5.10e-04  1.14e-04  2.25e-01  
 13  +4.8724e-01  +6.6105e-01  1.74e-01  3.92e-05  8.68e-03  4.32e-04  1.09e-04  1.37e-01  
 14  +4.8417e-01  +6.4753e-01  1.63e-01  3.54e-05  7.83e-03  3.61e-04  9.94e-05  1.83e-01  
 15  +4.7260e-01  +5.9541e-01  1.23e-01  2.50e-05  5.52e-03  7.62e-05  7.26e-05  6.71e-01  
 16  +4.5619e-01  +5.3272e-01  7.65e-02  1.40e-05  3.08e-03  4.11e-05  4.23e-05  4.64e-01  
 17  +4.3855e-01  +4.6623e-01  2.77e-02  4.67e-06  1.03e-03  4.22e-07  1.49e-05  9.63e-01  
 18  +4.2819e-01  +4.3070e-01  2.50e-03  4.14e-07  9.10e-05  5.85e-08  1.37e-06  9.24e-01  
 19  +4.2713e-01  +4.2718e-01  5.38e-05  8.88e-09  1.95e-06  2.50e-09  2.98e-08  9.89e-01  
 20  +4.2710e-01  +4.2710e-01  5.38e-07  8.88e-11  1.95e-08  2.50e-11  2.98e-10  9.90e-01  
 21  +4.2710e-01  +4.2710e-01  5.38e-09  8.88e-13  1.95e-10  2.50e-13  2.98e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.9659ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:22 PM: Optimal value: 4.271e-01
(CVXPY) Oct 06 04:04:22 PM: Compilation took 3.986e-02 seconds
(CVXPY) Oct 06 04:04:22 PM: Solver (including time spent in interface) took 1.604e-01 seconds
Iteration: 5, Objective: 0.4271
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:23 PM: Your problem has 5036 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:23 PM: Finished problem compilation (took 4.016e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5036
  constraints   = 10036
  nnz(P)        = 0
  nnz(A)        = 59807
  cones (total) = 1
    : Nonnegative = 1,  numel = 10036

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  1.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.8806e-01  +1.0512e+03  1.05e+03  4.04e-01  6.82e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3798e-01  +1.3052e+02  1.30e+02  1.56e-01  3.35e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0979e-01  +3.3271e+01  3.28e+01  1.20e-01  2.55e+01  3.43e-05  2.46e-01  1.67e-01  
  4  +5.0050e-01  +1.7698e+00  1.27e+00  8.64e-03  1.87e+00  5.15e-06  1.35e-01  8.69e-01  
  5  +5.0012e-01  +8.4746e-01  3.47e-01  2.33e-03  5.10e-01  1.04e-05  5.45e-02  7.91e-01  
  6  +5.0007e-01  +7.5695e-01  2.57e-01  1.60e-03  3.51e-01  2.41e-05  1.14e-02  8.72e-01  
  7  +4.9938e-01  +7.5980e-01  2.60e-01  1.89e-04  4.20e-02  4.71e-04  5.31e-04  9.57e-01  
  8  +4.9793e-01  +7.3818e-01  2.40e-01  7.84e-05  1.74e-02  9.14e-04  2.17e-04  6.86e-01  
  9  +4.9511e-01  +7.1266e-01  2.18e-01  5.68e-05  1.26e-02  9.08e-04  1.57e-04  3.75e-01  
 10  +4.9138e-01  +6.8463e-01  1.93e-01  4.83e-05  1.07e-02  6.79e-04  1.34e-04  2.72e-01  
 11  +4.9031e-01  +6.7735e-01  1.87e-01  4.58e-05  1.01e-02  5.60e-04  1.27e-04  1.79e-01  
 12  +4.8983e-01  +6.7404e-01  1.84e-01  4.48e-05  9.92e-03  4.91e-04  1.24e-04  1.14e-01  
 13  +4.8575e-01  +6.5541e-01  1.70e-01  3.72e-05  8.24e-03  4.19e-04  1.04e-04  2.61e-01  
 14  +4.7931e-01  +6.2475e-01  1.45e-01  3.11e-05  6.88e-03  1.78e-04  8.88e-05  4.77e-01  
 15  +4.5768e-01  +5.3736e-01  7.97e-02  1.43e-05  3.15e-03  6.29e-05  4.30e-05  6.51e-01  
 16  +4.4260e-01  +4.8146e-01  3.89e-02  6.67e-06  1.47e-03  1.64e-05  2.10e-05  6.95e-01  
 17  +4.2890e-01  +4.3303e-01  4.13e-03  6.83e-07  1.50e-04  5.70e-07  2.25e-06  9.53e-01  
 18  +4.2747e-01  +4.2830e-01  8.24e-04  1.36e-07  2.98e-05  6.42e-08  4.51e-07  9.90e-01  
 19  +4.2710e-01  +4.2712e-01  1.04e-05  1.72e-09  3.77e-07  8.09e-10  5.72e-09  9.87e-01  
 20  +4.2710e-01  +4.2710e-01  1.06e-07  1.75e-11  3.84e-09  8.24e-12  5.82e-11  9.90e-01  
 21  +4.2710e-01  +4.2710e-01  1.07e-09  1.76e-13  3.86e-11  8.26e-14  5.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.9813ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:23 PM: Optimal value: 4.271e-01
(CVXPY) Oct 06 04:04:23 PM: Compilation took 4.016e-02 seconds
(CVXPY) Oct 06 04:04:23 PM: Solver (including time spent in interface) took 1.700e-01 seconds
FULL MODEL:
  Accruacy: 0.5731
  Our objective: 0.14620000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.1378)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0)                       <-- (term's our objective: 0.0052)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.203329086303711
Best over terms:
  Our final objective: 0.1378
    Its accruacy: 0.5689
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1378
  Highest accruacy: 0.5689
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

