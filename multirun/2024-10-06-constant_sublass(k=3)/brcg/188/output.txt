Command:
python test_script.py -s constant_subclass -d 5 -n 5000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16519999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.172
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:43 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:43 PM: Finished problem compilation (took 5.863e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5008e+03  2.50e+03  9.78e-01  6.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.9954e-01  +5.0122e+02  5.01e+02  3.62e-01  3.81e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4608e-01  +7.1581e+01  7.10e+01  1.41e-01  1.86e+01  9.86e-03  2.35e-01  7.80e-01  
  3  +5.1017e-01  +1.6532e+01  1.60e+01  1.00e-01  1.28e+01  2.26e-05  2.31e-01  1.00e-01  
  4  +5.0009e-01  +1.0086e+00  5.08e-01  4.86e-03  6.35e-01  7.15e-06  1.27e-01  9.41e-01  
  5  +4.9990e-01  +6.6107e-01  1.61e-01  1.52e-03  2.00e-01  5.11e-06  2.59e-02  8.51e-01  
  6  +4.9107e-01  +8.2180e-01  3.31e-01  4.01e-04  5.33e-02  2.00e-04  1.23e-03  9.72e-01  
  7  +4.7431e-01  +6.2760e-01  1.53e-01  8.74e-05  1.16e-02  2.34e-04  2.72e-04  8.03e-01  
  8  +4.6015e-01  +5.2153e-01  6.14e-02  3.19e-05  4.22e-03  7.21e-05  1.07e-04  6.54e-01  
  9  +4.5079e-01  +4.6204e-01  1.12e-02  5.53e-06  7.30e-04  4.25e-06  2.02e-05  9.32e-01  
 10  +4.4804e-01  +4.4957e-01  1.53e-03  6.90e-07  9.11e-05  5.18e-07  2.78e-06  8.79e-01  
 11  +4.4751e-01  +4.4753e-01  2.48e-05  1.04e-08  1.38e-06  7.11e-09  4.52e-08  9.87e-01  
 12  +4.4750e-01  +4.4750e-01  2.48e-07  1.04e-10  1.38e-08  7.11e-11  4.52e-10  9.90e-01  
 13  +4.4750e-01  +4.4750e-01  2.48e-09  1.04e-12  1.38e-10  7.68e-13  4.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.9164ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:43 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:43 PM: Optimal value: 4.475e-01
(CVXPY) Oct 06 03:54:43 PM: Compilation took 5.863e-02 seconds
(CVXPY) Oct 06 03:54:43 PM: Solver (including time spent in interface) took 4.522e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:44 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:44 PM: Finished problem compilation (took 1.967e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24854
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5010e+03  2.50e+03  9.78e-01  6.94e+01  1.00e+00  1.00e+00   ------   
  1  +5.9935e-01  +5.0156e+02  5.01e+02  3.62e-01  4.05e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4569e-01  +7.1190e+01  7.06e+01  1.41e-01  1.96e+01  9.93e-03  2.35e-01  7.83e-01  
  3  +5.0996e-01  +1.6313e+01  1.58e+01  9.97e-02  1.35e+01  2.26e-05  2.30e-01  1.06e-01  
  4  +5.0036e-01  +1.4687e+00  9.68e-01  9.27e-03  1.27e+00  8.05e-06  1.57e-01  6.45e-01  
  5  +5.0007e-01  +8.0500e-01  3.05e-01  2.90e-03  4.04e-01  3.36e-06  5.73e-02  6.46e-01  
  6  +4.9995e-01  +8.1228e-01  3.12e-01  2.89e-03  4.02e-01  5.81e-06  2.70e-02  5.98e-01  
  7  +4.9804e-01  +7.7823e-01  2.80e-01  9.04e-04  1.28e-01  4.09e-05  2.80e-03  9.02e-01  
  8  +4.9302e-01  +7.4192e-01  2.49e-01  2.87e-04  4.07e-02  1.12e-04  8.21e-04  7.24e-01  
  9  +4.9364e-01  +7.3922e-01  2.46e-01  2.74e-04  3.88e-02  9.47e-05  7.74e-04  2.22e-01  
 10  +4.8703e-01  +6.9653e-01  2.10e-01  1.37e-04  1.94e-02  1.25e-04  3.83e-04  5.89e-01  
 11  +4.8261e-01  +6.7620e-01  1.94e-01  1.05e-04  1.48e-02  1.25e-04  2.91e-04  3.04e-01  
 12  +4.7839e-01  +6.5767e-01  1.79e-01  8.50e-05  1.20e-02  1.06e-04  2.38e-04  3.15e-01  
 13  +4.6376e-01  +5.8944e-01  1.26e-01  4.97e-05  7.00e-03  3.96e-05  1.43e-04  7.08e-01  
 14  +4.2951e-01  +4.5762e-01  2.81e-02  9.36e-06  1.31e-03  4.33e-07  2.93e-05  9.56e-01  
 15  +4.1802e-01  +4.2017e-01  2.15e-03  7.08e-07  9.92e-05  5.16e-08  2.34e-06  9.27e-01  
 16  +4.1702e-01  +4.1706e-01  4.10e-05  1.35e-08  1.89e-06  2.67e-09  4.54e-08  9.88e-01  
 17  +4.1700e-01  +4.1700e-01  4.10e-07  1.35e-10  1.89e-08  2.67e-11  4.54e-10  9.90e-01  
 18  +4.1700e-01  +4.1700e-01  4.10e-09  1.35e-12  1.89e-10  2.67e-13  4.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.8939ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:44 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:44 PM: Optimal value: 4.170e-01
(CVXPY) Oct 06 03:54:44 PM: Compilation took 1.967e-02 seconds
(CVXPY) Oct 06 03:54:44 PM: Solver (including time spent in interface) took 6.609e-02 seconds
Iteration: 2, Objective: 0.4170
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:44 PM: Your problem has 2524 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:44 PM: Finished problem compilation (took 1.977e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2524
  constraints   = 5024
  nnz(P)        = 0
  nnz(A)        = 25307
  cones (total) = 1
    : Nonnegative = 1,  numel = 5024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5010e+03  2.50e+03  9.79e-01  6.95e+01  1.00e+00  1.00e+00   ------   
  1  +5.9930e-01  +5.0172e+02  5.01e+02  3.63e-01  4.05e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4560e-01  +7.1098e+01  7.06e+01  1.41e-01  1.96e+01  9.96e-03  2.35e-01  7.84e-01  
  3  +5.0993e-01  +1.6287e+01  1.58e+01  9.97e-02  1.34e+01  2.27e-05  2.30e-01  1.07e-01  
  4  +5.0030e-01  +1.3808e+00  8.81e-01  8.44e-03  1.16e+00  7.98e-06  1.51e-01  6.93e-01  
  5  +5.0007e-01  +8.3725e-01  3.37e-01  3.22e-03  4.47e-01  3.96e-06  6.16e-02  6.02e-01  
  6  +4.9996e-01  +8.3509e-01  3.35e-01  3.12e-03  4.35e-01  6.03e-06  3.16e-02  5.65e-01  
  7  +4.9575e-01  +7.1051e-01  2.15e-01  3.78e-04  5.36e-02  8.46e-05  1.10e-03  9.82e-01  
  8  +4.9164e-01  +6.9583e-01  2.04e-01  1.99e-04  2.82e-02  1.34e-04  5.64e-04  5.64e-01  
  9  +4.8444e-01  +6.6535e-01  1.81e-01  1.11e-04  1.57e-02  1.51e-04  3.11e-04  6.00e-01  
 10  +4.8028e-01  +6.5186e-01  1.72e-01  9.11e-05  1.29e-02  1.39e-04  2.56e-04  2.88e-01  
 11  +4.6962e-01  +6.1289e-01  1.43e-01  6.25e-05  8.82e-03  9.69e-05  1.79e-04  4.89e-01  
 12  +4.3427e-01  +4.8051e-01  4.62e-02  1.56e-05  2.19e-03  1.03e-05  4.81e-05  8.95e-01  
 13  +4.2632e-01  +4.5427e-01  2.79e-02  9.32e-06  1.31e-03  5.84e-06  2.98e-05  4.74e-01  
 14  +4.2554e-01  +4.5169e-01  2.62e-02  8.73e-06  1.23e-03  5.36e-06  2.80e-05  1.22e-01  
 15  +4.2544e-01  +4.5140e-01  2.60e-02  8.60e-06  1.21e-03  5.17e-06  2.75e-05  1.69e-01  
 16  +4.1555e-01  +4.1860e-01  3.04e-03  1.00e-06  1.41e-04  4.55e-07  3.37e-06  9.90e-01  
 17  +4.1422e-01  +4.1426e-01  4.05e-05  1.34e-08  1.88e-06  5.84e-09  4.53e-08  9.87e-01  
 18  +4.1420e-01  +4.1420e-01  4.05e-07  1.34e-10  1.88e-08  5.84e-11  4.53e-10  9.90e-01  
 19  +4.1420e-01  +4.1420e-01  4.05e-09  1.34e-12  1.88e-10  5.84e-13  4.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.9745ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:44 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:44 PM: Optimal value: 4.142e-01
(CVXPY) Oct 06 03:54:44 PM: Compilation took 1.977e-02 seconds
(CVXPY) Oct 06 03:54:44 PM: Solver (including time spent in interface) took 7.508e-02 seconds
FULL MODEL:
  Accruacy: 0.586
  Our objective: 0.17200000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.1652)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.0068)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.064840316772461
Best over terms:
  Our final objective: 0.16519999999999996
    Its accruacy: 0.5826
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16519999999999996
  Highest accruacy: 0.5826
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

