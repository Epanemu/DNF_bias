Command:
python test_script.py -s constant_subclass -d 5 -n 100 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.38
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:25 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Finished problem compilation (took 3.978e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9674e-01  +5.0940e+01  5.04e+01  8.62e-01  8.47e+00  1.00e+00  1.04e+00   ------   
  1  +5.9428e-01  +1.0448e+01  9.85e+00  3.19e-01  4.66e+00  3.97e-03  5.21e-01  6.47e-01  
  2  +5.2692e-01  +1.5071e+00  9.80e-01  6.56e-02  1.15e+00  1.15e-02  1.67e-01  9.65e-01  
  3  +5.0006e-01  +7.9506e-01  2.95e-01  1.52e-02  2.73e-01  8.61e-03  4.67e-02  7.95e-01  
  4  +4.8375e-01  +7.8208e-01  2.98e-01  8.53e-03  1.56e-01  9.90e-03  2.69e-02  6.42e-01  
  5  +4.5427e-01  +5.5465e-01  1.00e-01  2.72e-03  4.92e-02  9.22e-05  1.00e-02  7.98e-01  
  6  +4.3079e-01  +4.6296e-01  3.22e-02  6.92e-04  1.25e-02  4.74e-05  3.01e-03  7.56e-01  
  7  +4.2146e-01  +4.2533e-01  3.87e-03  7.89e-05  1.42e-03  1.68e-05  3.72e-04  9.90e-01  
  8  +4.2011e-01  +4.2015e-01  4.01e-05  8.11e-07  1.46e-05  1.70e-07  3.87e-06  9.90e-01  
  9  +4.2010e-01  +4.2010e-01  4.01e-07  8.11e-09  1.46e-07  1.70e-09  3.87e-08  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  4.01e-09  8.11e-11  1.46e-09  1.70e-11  3.87e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 745.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:25 PM: Optimal value: 4.201e-01
(CVXPY) Oct 06 03:53:25 PM: Compilation took 3.978e-02 seconds
(CVXPY) Oct 06 03:53:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:25 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Finished problem compilation (took 8.505e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 518
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9249e-01  +5.1433e+01  5.09e+01  8.70e-01  8.72e+00  1.00e+00  1.07e+00   ------   
  1  +5.7253e-01  +1.0747e+01  1.02e+01  3.41e-01  4.81e+00  3.92e-03  5.57e-01  6.31e-01  
  2  +5.1147e-01  +2.0019e+00  1.49e+00  9.13e-02  1.59e+00  1.34e-02  2.28e-01  8.55e-01  
  3  +4.7124e-01  +1.5239e+00  1.05e+00  4.40e-02  7.82e-01  1.14e-02  1.31e-01  5.99e-01  
  4  +4.3795e-01  +7.9763e-01  3.60e-01  1.40e-02  2.50e-01  3.82e-03  5.05e-02  6.29e-01  
  5  +4.1732e-01  +5.2028e-01  1.03e-01  3.32e-03  5.95e-02  1.75e-03  1.23e-02  8.11e-01  
  6  +4.0484e-01  +4.8177e-01  7.69e-02  1.62e-03  2.96e-02  1.81e-03  5.81e-03  5.67e-01  
  7  +3.9803e-01  +4.5398e-01  5.59e-02  1.14e-03  2.09e-02  1.12e-03  4.15e-03  4.01e-01  
  8  +3.8483e-01  +3.9700e-01  1.22e-02  2.51e-04  4.58e-03  2.19e-05  9.59e-04  9.64e-01  
  9  +3.8127e-01  +3.8387e-01  2.60e-03  5.22e-05  9.52e-04  5.02e-06  2.02e-04  7.99e-01  
 10  +3.8055e-01  +3.8131e-01  7.60e-04  1.51e-05  2.72e-04  3.66e-06  5.98e-05  9.25e-01  
 11  +3.8023e-01  +3.8029e-01  6.28e-05  1.17e-06  2.11e-05  3.20e-07  5.00e-06  9.60e-01  
 12  +3.8020e-01  +3.8020e-01  7.02e-07  1.29e-08  2.33e-07  3.57e-09  5.61e-08  9.89e-01  
 13  +3.8020e-01  +3.8020e-01  7.02e-09  1.29e-10  2.33e-09  3.57e-11  5.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 912.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:25 PM: Optimal value: 3.802e-01
(CVXPY) Oct 06 03:53:25 PM: Compilation took 8.505e-03 seconds
(CVXPY) Oct 06 03:53:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:25 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 607
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9045e-01  +5.1638e+01  5.11e+01  8.76e-01  8.77e+00  1.00e+00  1.08e+00   ------   
  1  +5.5882e-01  +1.0949e+01  1.04e+01  3.59e-01  4.84e+00  3.89e-03  5.77e-01  6.19e-01  
  2  +4.9811e-01  +1.9118e+00  1.41e+00  8.55e-02  1.49e+00  1.49e-02  2.23e-01  9.05e-01  
  3  +4.5033e-01  +1.2413e+00  7.91e-01  3.25e-02  5.79e-01  1.04e-02  9.90e-02  7.02e-01  
  4  +4.1165e-01  +7.1335e-01  3.02e-01  9.37e-03  1.67e-01  5.02e-03  3.27e-02  7.18e-01  
  5  +3.9521e-01  +6.4016e-01  2.45e-01  6.44e-03  1.15e-01  3.78e-03  2.35e-02  3.93e-01  
  6  +3.6060e-01  +4.3116e-01  7.06e-02  1.78e-03  3.15e-02  3.22e-04  7.57e-03  8.09e-01  
  7  +3.4258e-01  +3.4933e-01  6.75e-03  1.66e-04  2.93e-03  1.95e-05  7.85e-04  9.90e-01  
  8  +3.4056e-01  +3.4102e-01  4.58e-04  1.12e-05  1.98e-04  1.25e-06  5.45e-05  9.32e-01  
  9  +3.4040e-01  +3.4042e-01  1.33e-05  3.23e-07  5.68e-06  4.15e-08  1.62e-06  9.89e-01  
 10  +3.4040e-01  +3.4040e-01  1.33e-07  3.23e-09  5.68e-08  4.15e-10  1.62e-08  9.90e-01  
 11  +3.4040e-01  +3.4040e-01  1.33e-09  3.24e-11  5.69e-10  4.16e-12  1.63e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 948.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:25 PM: Optimal value: 3.404e-01
(CVXPY) Oct 06 03:53:25 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:53:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:25 PM: Your problem has 84 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Finished problem compilation (took 8.817e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 84
  constraints   = 134
  nnz(P)        = 0
  nnz(A)        = 629
  cones (total) = 1
    : Nonnegative = 1,  numel = 134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9009e-01  +5.1701e+01  5.12e+01  8.78e-01  8.74e+00  1.00e+00  1.09e+00   ------   
  1  +5.5491e-01  +1.1033e+01  1.05e+01  3.64e-01  4.84e+00  3.89e-03  5.83e-01  6.15e-01  
  2  +4.9175e-01  +1.9587e+00  1.47e+00  8.80e-02  1.51e+00  1.53e-02  2.34e-01  8.93e-01  
  3  +4.4316e-01  +1.0827e+00  6.40e-01  2.71e-02  4.80e-01  8.62e-03  8.56e-02  7.59e-01  
  4  +4.0853e-01  +7.2340e-01  3.15e-01  9.75e-03  1.73e-01  5.25e-03  3.43e-02  6.55e-01  
  5  +3.8741e-01  +6.2382e-01  2.36e-01  6.02e-03  1.07e-01  3.84e-03  2.25e-02  4.20e-01  
  6  +3.5626e-01  +4.4353e-01  8.73e-02  2.13e-03  3.75e-02  8.14e-04  9.18e-03  7.11e-01  
  7  +3.3637e-01  +3.5478e-01  1.84e-02  4.24e-04  7.45e-03  1.30e-04  2.12e-03  8.05e-01  
  8  +3.3072e-01  +3.3107e-01  3.53e-04  7.99e-06  1.40e-04  1.85e-06  4.24e-05  9.82e-01  
  9  +3.3060e-01  +3.3060e-01  3.53e-06  7.98e-08  1.40e-06  1.85e-08  4.24e-07  9.90e-01  
 10  +3.3060e-01  +3.3060e-01  3.53e-08  7.98e-10  1.40e-08  1.85e-10  4.24e-09  9.90e-01  
 11  +3.3060e-01  +3.3060e-01  3.53e-10  7.98e-12  1.40e-10  1.85e-12  4.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0351ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:25 PM: Optimal value: 3.306e-01
(CVXPY) Oct 06 03:53:25 PM: Compilation took 8.817e-03 seconds
(CVXPY) Oct 06 03:53:25 PM: Solver (including time spent in interface) took 1.087e-03 seconds
Iteration: 4, Objective: 0.3306
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:25 PM: Your problem has 88 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Finished problem compilation (took 1.154e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 88
  constraints   = 138
  nnz(P)        = 0
  nnz(A)        = 650
  cones (total) = 1
    : Nonnegative = 1,  numel = 138

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8981e-01  +5.1696e+01  5.12e+01  8.79e-01  8.67e+00  1.00e+00  1.08e+00   ------   
  1  +5.5133e-01  +1.1147e+01  1.06e+01  3.72e-01  4.88e+00  3.86e-03  5.93e-01  6.06e-01  
  2  +4.9136e-01  +1.8848e+00  1.39e+00  8.69e-02  1.49e+00  1.61e-02  2.31e-01  9.28e-01  
  3  +4.4190e-01  +1.0900e+00  6.48e-01  2.77e-02  4.88e-01  9.69e-03  8.65e-02  7.40e-01  
  4  +4.0788e-01  +8.4469e-01  4.37e-01  1.29e-02  2.30e-01  7.71e-03  4.38e-02  5.70e-01  
  5  +3.6789e-01  +5.6625e-01  1.98e-01  5.09e-03  8.95e-02  2.59e-03  1.97e-02  6.31e-01  
  6  +3.4676e-01  +4.5182e-01  1.05e-01  2.58e-03  4.51e-02  1.09e-03  1.12e-02  5.90e-01  
  7  +3.2643e-01  +3.4653e-01  2.01e-02  4.78e-04  8.30e-03  1.66e-04  2.42e-03  8.08e-01  
  8  +3.2097e-01  +3.2188e-01  9.09e-04  2.12e-05  3.68e-04  6.52e-06  1.15e-04  9.56e-01  
  9  +3.2070e-01  +3.2071e-01  9.12e-06  2.13e-07  3.69e-06  6.53e-08  1.16e-06  9.90e-01  
 10  +3.2070e-01  +3.2070e-01  9.12e-08  2.13e-09  3.69e-08  6.53e-10  1.16e-08  9.90e-01  
 11  +3.2070e-01  +3.2070e-01  9.12e-10  2.13e-11  3.69e-10  6.53e-12  1.16e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 980.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:25 PM: Optimal value: 3.207e-01
(CVXPY) Oct 06 03:53:25 PM: Compilation took 1.154e-02 seconds
(CVXPY) Oct 06 03:53:25 PM: Solver (including time spent in interface) took 5.913e-04 seconds
Iteration: 5, Objective: 0.3207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:25 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Finished problem compilation (took 5.597e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 658
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8983e-01  +5.1690e+01  5.12e+01  8.80e-01  8.66e+00  1.00e+00  1.08e+00   ------   
  1  +5.5118e-01  +1.1143e+01  1.06e+01  3.73e-01  4.87e+00  3.86e-03  5.92e-01  6.07e-01  
  2  +4.9122e-01  +1.8990e+00  1.41e+00  8.74e-02  1.49e+00  1.61e-02  2.31e-01  9.24e-01  
  3  +4.4127e-01  +1.0784e+00  6.37e-01  2.69e-02  4.75e-01  9.67e-03  8.42e-02  7.47e-01  
  4  +4.0472e-01  +8.3626e-01  4.32e-01  1.21e-02  2.14e-01  8.02e-03  4.09e-02  5.93e-01  
  5  +3.6322e-01  +5.1596e-01  1.53e-01  4.14e-03  7.24e-02  1.15e-03  1.64e-02  7.15e-01  
  6  +3.4414e-01  +4.2887e-01  8.47e-02  2.16e-03  3.75e-02  5.40e-04  9.60e-03  5.54e-01  
  7  +3.2416e-01  +3.3525e-01  1.11e-02  2.64e-04  4.58e-03  5.10e-05  1.38e-03  8.78e-01  
  8  +3.2077e-01  +3.2101e-01  2.34e-04  5.50e-06  9.52e-05  9.85e-07  3.01e-05  9.79e-01  
  9  +3.2070e-01  +3.2070e-01  2.34e-06  5.49e-08  9.52e-07  9.84e-09  3.01e-07  9.90e-01  
 10  +3.2070e-01  +3.2070e-01  2.34e-08  5.49e-10  9.52e-09  9.84e-11  3.01e-09  9.90e-01  
 11  +3.2070e-01  +3.2070e-01  2.34e-10  5.49e-12  9.52e-11  9.84e-13  3.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0218ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:25 PM: Optimal value: 3.207e-01
(CVXPY) Oct 06 03:53:25 PM: Compilation took 5.597e-03 seconds
(CVXPY) Oct 06 03:53:25 PM: Solver (including time spent in interface) took 2.624e-03 seconds
Iteration: 6, Objective: 0.3207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:25 PM: Your problem has 92 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:25 PM: Finished problem compilation (took 5.129e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 92
  constraints   = 142
  nnz(P)        = 0
  nnz(A)        = 676
  cones (total) = 1
    : Nonnegative = 1,  numel = 142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8980e-01  +5.1691e+01  5.12e+01  8.81e-01  8.62e+00  1.00e+00  1.08e+00   ------   
  1  +5.5023e-01  +1.1176e+01  1.06e+01  3.76e-01  4.85e+00  3.85e-03  5.95e-01  6.04e-01  
  2  +4.8849e-01  +1.8567e+00  1.37e+00  8.56e-02  1.45e+00  1.62e-02  2.32e-01  9.36e-01  
  3  +4.4008e-01  +1.0493e+00  6.09e-01  2.61e-02  4.57e-01  9.68e-03  8.28e-02  7.43e-01  
  4  +4.0618e-01  +8.4150e-01  4.35e-01  1.26e-02  2.22e-01  8.04e-03  4.28e-02  5.78e-01  
  5  +3.6104e-01  +5.0492e-01  1.44e-01  3.88e-03  6.74e-02  9.14e-04  1.56e-02  7.57e-01  
  6  +3.4015e-01  +4.0955e-01  6.94e-02  1.77e-03  3.05e-02  3.78e-04  8.04e-03  6.17e-01  
  7  +3.2309e-01  +3.3055e-01  7.46e-03  1.80e-04  3.10e-03  3.04e-05  9.46e-04  9.00e-01  
  8  +3.2088e-01  +3.2141e-01  5.32e-04  1.27e-05  2.18e-04  2.06e-06  6.94e-05  9.33e-01  
  9  +3.2070e-01  +3.2071e-01  7.36e-06  1.75e-07  3.01e-06  2.68e-08  9.69e-07  9.90e-01  
 10  +3.2070e-01  +3.2070e-01  7.36e-08  1.75e-09  3.01e-08  2.68e-10  9.69e-09  9.90e-01  
 11  +3.2070e-01  +3.2070e-01  7.36e-10  1.75e-11  3.01e-10  2.68e-12  9.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0216ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:25 PM: Optimal value: 3.207e-01
(CVXPY) Oct 06 03:53:25 PM: Compilation took 5.129e-03 seconds
(CVXPY) Oct 06 03:53:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.66
  Our objective: 0.32000000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0)                       <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 1 AND x4 = 1)                       <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.379915475845337
Best over terms:
  Our final objective: 0.09999999999999999
    Its accruacy: 0.55
    Its hamming distance: 2
  Shortest hamming distance: 1
    Its our objective: 0.059999999999999956
  Highest accruacy: 0.55
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

