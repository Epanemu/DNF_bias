Command:
python test_script.py -s constant_subclass -d 6 -n 100 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.19999999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 6.

Computed total variation: 0.5599999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:04 PM: Your problem has 63 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:04 PM: Finished problem compilation (took 4.961e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 63
  constraints   = 113
  nnz(P)        = 0
  nnz(A)        = 463
  cones (total) = 1
    : Nonnegative = 1,  numel = 113

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9689e-01  +5.1063e+01  5.06e+01  8.65e-01  9.02e+00  1.00e+00  1.04e+00   ------   
  1  +5.8700e-01  +1.0708e+01  1.01e+01  3.37e-01  5.13e+00  3.89e-03  5.45e-01  6.29e-01  
  2  +5.2057e-01  +1.5479e+00  1.03e+00  7.07e-02  1.31e+00  1.35e-02  1.81e-01  9.90e-01  
  3  +4.9980e-01  +1.1326e+00  6.33e-01  3.03e-02  5.77e-01  1.27e-02  8.54e-02  5.90e-01  
  4  +4.6427e-01  +8.7488e-01  4.11e-01  1.06e-02  2.07e-01  1.27e-02  3.32e-02  6.43e-01  
  5  +4.3573e-01  +6.5197e-01  2.16e-01  5.21e-03  9.97e-02  5.46e-03  1.85e-02  5.14e-01  
  6  +4.0305e-01  +4.4704e-01  4.40e-02  1.01e-03  1.91e-02  5.06e-05  4.60e-03  9.37e-01  
  7  +3.9069e-01  +3.9254e-01  1.85e-03  4.02e-05  7.58e-04  5.98e-06  2.03e-04  9.90e-01  
  8  +3.9011e-01  +3.9012e-01  1.86e-05  4.03e-07  7.59e-06  5.99e-08  2.04e-06  9.90e-01  
  9  +3.9010e-01  +3.9010e-01  1.86e-07  4.03e-09  7.59e-08  5.99e-10  2.04e-08  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  1.86e-09  4.03e-11  7.59e-10  5.99e-12  2.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 929.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:04 PM: Optimal value: 3.901e-01
(CVXPY) Oct 06 03:57:04 PM: Compilation took 4.961e-02 seconds
(CVXPY) Oct 06 03:57:04 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:04 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:04 PM: Finished problem compilation (took 5.124e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 584
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9456e-01  +5.1073e+01  5.06e+01  8.72e-01  9.29e+00  1.00e+00  1.05e+00   ------   
  1  +5.7500e-01  +1.0809e+01  1.02e+01  3.53e-01  5.21e+00  3.88e-03  5.56e-01  6.22e-01  
  2  +5.1203e-01  +1.6200e+00  1.11e+00  7.39e-02  1.41e+00  1.49e-02  1.87e-01  9.90e-01  
  3  +4.7966e-01  +9.9283e-01  5.13e-01  2.09e-02  4.21e-01  1.24e-02  5.95e-02  7.42e-01  
  4  +4.3619e-01  +7.2490e-01  2.89e-01  7.65e-03  1.56e-01  8.51e-03  2.33e-02  6.70e-01  
  5  +4.1086e-01  +6.1123e-01  2.00e-01  3.99e-03  8.23e-02  6.45e-03  1.22e-02  5.75e-01  
  6  +3.7180e-01  +4.4560e-01  7.38e-02  1.38e-03  2.94e-02  3.58e-04  4.47e-03  8.84e-01  
  7  +3.4703e-01  +3.6173e-01  1.47e-02  2.55e-04  5.48e-03  7.03e-05  8.70e-04  8.61e-01  
  8  +3.4047e-01  +3.4083e-01  3.61e-04  6.23e-06  1.33e-04  1.38e-06  2.17e-05  9.76e-01  
  9  +3.4030e-01  +3.4031e-01  8.40e-06  1.47e-07  3.09e-06  2.75e-08  5.18e-07  9.77e-01  
 10  +3.4030e-01  +3.4030e-01  8.43e-08  1.48e-09  3.10e-08  2.76e-10  5.21e-09  9.90e-01  
 11  +3.4030e-01  +3.4030e-01  8.44e-10  1.48e-11  3.10e-10  2.76e-12  5.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1089ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:04 PM: Optimal value: 3.403e-01
(CVXPY) Oct 06 03:57:04 PM: Compilation took 5.124e-03 seconds
(CVXPY) Oct 06 03:57:04 PM: Solver (including time spent in interface) took 4.868e-03 seconds
Iteration: 2, Objective: 0.3403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:04 PM: Your problem has 83 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:04 PM: Finished problem compilation (took 1.510e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 83
  constraints   = 133
  nnz(P)        = 0
  nnz(A)        = 653
  cones (total) = 1
    : Nonnegative = 1,  numel = 133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9302e-01  +5.1334e+01  5.08e+01  8.77e-01  9.16e+00  1.00e+00  1.05e+00   ------   
  1  +5.5755e-01  +1.0917e+01  1.04e+01  3.61e-01  5.06e+00  3.90e-03  5.62e-01  6.19e-01  
  2  +4.9677e-01  +1.6965e+00  1.20e+00  7.23e-02  1.37e+00  1.62e-02  1.83e-01  9.90e-01  
  3  +4.3542e-01  +1.2488e+00  8.13e-01  2.55e-02  5.04e-01  1.75e-02  6.99e-02  7.19e-01  
  4  +3.7365e-01  +8.3749e-01  4.64e-01  1.03e-02  2.04e-01  1.13e-02  3.07e-02  6.27e-01  
  5  +3.1642e-01  +4.5069e-01  1.34e-01  2.92e-03  5.80e-02  1.81e-03  9.76e-03  7.63e-01  
  6  +2.9329e-01  +3.7419e-01  8.09e-02  1.53e-03  3.33e-02  9.67e-04  5.19e-03  6.84e-01  
  7  +2.6868e-01  +2.8523e-01  1.65e-02  3.06e-04  6.70e-03  4.58e-05  1.12e-03  9.90e-01  
  8  +2.6110e-01  +2.6170e-01  6.01e-04  1.09e-05  2.41e-04  1.87e-06  4.07e-05  9.67e-01  
  9  +2.6080e-01  +2.6081e-01  8.06e-06  1.48e-07  3.25e-06  2.05e-08  5.53e-07  9.86e-01  
 10  +2.6080e-01  +2.6080e-01  8.07e-08  1.48e-09  3.26e-08  2.06e-10  5.54e-09  9.90e-01  
 11  +2.6080e-01  +2.6080e-01  8.08e-10  1.48e-11  3.26e-10  2.06e-12  5.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2321ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:04 PM: Optimal value: 2.608e-01
(CVXPY) Oct 06 03:57:04 PM: Compilation took 1.510e-02 seconds
(CVXPY) Oct 06 03:57:04 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:04 PM: Your problem has 93 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:04 PM: Finished problem compilation (took 5.204e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 93
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 691
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9236e-01  +5.1404e+01  5.09e+01  8.81e-01  8.92e+00  1.00e+00  1.06e+00   ------   
  1  +5.4370e-01  +1.1000e+01  1.05e+01  3.65e-01  4.87e+00  3.94e-03  5.62e-01  6.16e-01  
  2  +4.8388e-01  +1.9004e+00  1.42e+00  7.86e-02  1.43e+00  1.69e-02  1.95e-01  9.47e-01  
  3  +4.0836e-01  +1.1323e+00  7.24e-01  2.19e-02  4.20e-01  1.45e-02  6.07e-02  7.67e-01  
  4  +3.5600e-01  +8.3274e-01  4.77e-01  1.12e-02  2.14e-01  9.84e-03  3.31e-02  5.41e-01  
  5  +2.9151e-01  +4.1084e-01  1.19e-01  2.67e-03  5.12e-02  1.50e-03  8.88e-03  7.98e-01  
  6  +2.7813e-01  +3.6661e-01  8.85e-02  1.80e-03  3.71e-02  1.09e-03  5.97e-03  4.71e-01  
  7  +2.5821e-01  +2.9920e-01  4.10e-02  7.80e-04  1.66e-02  4.13e-04  2.71e-03  6.95e-01  
  8  +2.4236e-01  +2.4539e-01  3.03e-03  5.64e-05  1.21e-03  2.31e-05  2.05e-04  9.36e-01  
  9  +2.4116e-01  +2.4145e-01  2.90e-04  5.45e-06  1.16e-04  1.72e-06  2.04e-05  9.70e-01  
 10  +2.4100e-01  +2.4101e-01  6.05e-06  1.13e-07  2.40e-06  3.19e-08  4.35e-07  9.87e-01  
 11  +2.4100e-01  +2.4100e-01  6.05e-08  1.13e-09  2.40e-08  3.19e-10  4.35e-09  9.90e-01  
 12  +2.4100e-01  +2.4100e-01  6.05e-10  1.13e-11  2.40e-10  3.19e-12  4.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:04 PM: Optimal value: 2.410e-01
(CVXPY) Oct 06 03:57:04 PM: Compilation took 5.204e-03 seconds
(CVXPY) Oct 06 03:57:04 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2410
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:05 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:05 PM: Finished problem compilation (took 5.215e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 709
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9190e-01  +5.1472e+01  5.10e+01  8.83e-01  8.78e+00  1.00e+00  1.06e+00   ------   
  1  +5.3335e-01  +1.1079e+01  1.05e+01  3.67e-01  4.76e+00  3.97e-03  5.62e-01  6.13e-01  
  2  +4.7069e-01  +1.9587e+00  1.49e+00  7.78e-02  1.38e+00  1.75e-02  1.95e-01  9.41e-01  
  3  +3.9223e-01  +1.1005e+00  7.08e-01  2.21e-02  4.08e-01  1.30e-02  6.18e-02  7.41e-01  
  4  +3.4422e-01  +8.6490e-01  5.21e-01  1.27e-02  2.36e-01  9.33e-03  3.77e-02  5.22e-01  
  5  +2.7702e-01  +4.0256e-01  1.26e-01  2.91e-03  5.37e-02  1.12e-03  9.79e-03  8.43e-01  
  6  +2.5544e-01  +3.2099e-01  6.56e-02  1.42e-03  2.76e-02  6.01e-04  4.91e-03  5.79e-01  
  7  +2.3959e-01  +2.5989e-01  2.03e-02  4.42e-04  8.54e-03  9.15e-05  1.62e-03  9.90e-01  
  8  +2.3143e-01  +2.3248e-01  1.05e-03  2.24e-05  4.39e-04  4.00e-06  8.43e-05  9.53e-01  
  9  +2.3103e-01  +2.3111e-01  7.13e-05  1.55e-06  2.99e-05  2.42e-07  6.16e-06  9.54e-01  
 10  +2.3100e-01  +2.3100e-01  1.32e-06  2.86e-08  5.47e-07  5.30e-09  1.17e-07  9.90e-01  
 11  +2.3100e-01  +2.3100e-01  1.32e-08  2.86e-10  5.47e-09  5.30e-11  1.17e-09  9.90e-01  
 12  +2.3100e-01  +2.3100e-01  1.32e-10  2.86e-12  5.47e-11  5.33e-13  1.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1507ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:05 PM: Optimal value: 2.310e-01
(CVXPY) Oct 06 03:57:05 PM: Compilation took 5.215e-03 seconds
(CVXPY) Oct 06 03:57:05 PM: Solver (including time spent in interface) took 4.616e-03 seconds
Iteration: 5, Objective: 0.2310
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:05 PM: Your problem has 108 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:05 PM: Finished problem compilation (took 4.626e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 108
  constraints   = 158
  nnz(P)        = 0
  nnz(A)        = 756
  cones (total) = 1
    : Nonnegative = 1,  numel = 158

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9153e-01  +5.1507e+01  5.10e+01  8.87e-01  8.64e+00  1.00e+00  1.06e+00   ------   
  1  +5.2910e-01  +1.1181e+01  1.07e+01  3.75e-01  4.67e+00  3.98e-03  5.66e-01  6.08e-01  
  2  +4.6533e-01  +1.9583e+00  1.49e+00  7.90e-02  1.36e+00  1.78e-02  2.00e-01  9.43e-01  
  3  +3.9215e-01  +1.1607e+00  7.69e-01  2.60e-02  4.68e-01  1.28e-02  7.34e-02  6.97e-01  
  4  +3.3273e-01  +7.9691e-01  4.64e-01  1.16e-02  2.13e-01  7.98e-03  3.54e-02  6.27e-01  
  5  +2.6372e-01  +3.6596e-01  1.02e-01  2.45e-03  4.46e-02  7.33e-05  8.63e-03  9.85e-01  
  6  +2.5500e-01  +3.3926e-01  8.43e-02  1.87e-03  3.61e-02  1.18e-04  6.50e-03  3.49e-01  
  7  +2.3396e-01  +2.6612e-01  3.22e-02  6.98e-04  1.33e-02  1.76e-04  2.58e-03  9.90e-01  
  8  +2.2188e-01  +2.2383e-01  1.95e-03  4.14e-05  7.98e-04  8.52e-06  1.60e-04  9.44e-01  
  9  +2.2117e-01  +2.2133e-01  1.59e-04  3.46e-06  6.58e-05  5.43e-07  1.39e-05  9.14e-01  
 10  +2.2110e-01  +2.2110e-01  2.72e-06  5.94e-08  1.12e-06  9.42e-09  2.46e-07  9.88e-01  
 11  +2.2110e-01  +2.2110e-01  2.71e-08  5.94e-10  1.12e-08  9.42e-11  2.46e-09  9.90e-01  
 12  +2.2110e-01  +2.2110e-01  2.73e-10  5.97e-12  1.12e-10  9.47e-13  2.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5082ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:05 PM: Optimal value: 2.211e-01
(CVXPY) Oct 06 03:57:05 PM: Compilation took 4.626e-03 seconds
(CVXPY) Oct 06 03:57:05 PM: Solver (including time spent in interface) took 5.363e-03 seconds
Iteration: 6, Objective: 0.2211
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:05 PM: Your problem has 112 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:05 PM: Finished problem compilation (took 5.120e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 112
  constraints   = 162
  nnz(P)        = 0
  nnz(A)        = 773
  cones (total) = 1
    : Nonnegative = 1,  numel = 162

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9118e-01  +5.1509e+01  5.10e+01  8.88e-01  8.56e+00  1.00e+00  1.06e+00   ------   
  1  +5.2389e-01  +1.1146e+01  1.06e+01  3.75e-01  4.59e+00  3.99e-03  5.63e-01  6.10e-01  
  2  +4.5885e-01  +1.9889e+00  1.53e+00  7.71e-02  1.30e+00  1.79e-02  1.94e-01  9.41e-01  
  3  +3.6575e-01  +1.0859e+00  7.20e-01  2.12e-02  3.78e-01  1.33e-02  6.03e-02  7.49e-01  
  4  +3.1477e-01  +7.4277e-01  4.28e-01  1.09e-02  1.94e-01  7.29e-03  3.34e-02  5.19e-01  
  5  +2.6196e-01  +3.9259e-01  1.31e-01  3.26e-03  5.70e-02  1.76e-03  1.12e-02  7.18e-01  
  6  +2.4415e-01  +3.1710e-01  7.29e-02  1.69e-03  3.07e-02  9.91e-04  5.87e-03  5.64e-01  
  7  +2.2932e-01  +2.4986e-01  2.05e-02  4.82e-04  8.67e-03  7.49e-05  1.77e-03  9.90e-01  
  8  +2.2226e-01  +2.2505e-01  2.79e-03  6.43e-05  1.16e-03  9.49e-06  2.44e-04  8.65e-01  
  9  +2.2146e-01  +2.2228e-01  8.21e-04  1.88e-05  3.37e-04  3.35e-06  7.52e-05  8.45e-01  
 10  +2.2112e-01  +2.2117e-01  4.66e-05  1.08e-06  1.91e-05  1.55e-07  4.47e-06  9.43e-01  
 11  +2.2110e-01  +2.2110e-01  4.91e-07  1.14e-08  2.01e-07  1.60e-09  4.77e-08  9.90e-01  
 12  +2.2110e-01  +2.2110e-01  4.93e-09  1.14e-10  2.02e-09  1.61e-11  4.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4154ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:05 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:05 PM: Optimal value: 2.211e-01
(CVXPY) Oct 06 03:57:05 PM: Compilation took 5.120e-03 seconds
(CVXPY) Oct 06 03:57:05 PM: Solver (including time spent in interface) took 4.713e-03 seconds
FULL MODEL:
  Accruacy: 0.75
  Our objective: 0.5

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 1)                       <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0)                       <-- (term's our objective: 0.04)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.717520713806152
Best over terms:
  Our final objective: 0.16000000000000003
    Its accruacy: 0.58
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

