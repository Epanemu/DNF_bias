Command:
python test_script.py -s constant_subclass -d 7 -n 100 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.13999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.76
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:24 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Finished problem compilation (took 4.018e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9737e-01  +5.0947e+01  5.04e+01  8.68e-01  9.49e+00  1.00e+00  1.04e+00   ------   
  1  +5.8373e-01  +1.0927e+01  1.03e+01  3.55e-01  5.55e+00  3.84e-03  5.64e-01  6.12e-01  
  2  +5.2133e-01  +1.6139e+00  1.09e+00  8.12e-02  1.55e+00  1.50e-02  2.09e-01  9.90e-01  
  3  +5.0034e-01  +7.4328e-01  2.43e-01  1.75e-02  3.44e-01  5.24e-03  5.70e-02  7.83e-01  
  4  +4.8242e-01  +6.9205e-01  2.10e-01  6.71e-03  1.36e-01  8.15e-03  2.23e-02  6.66e-01  
  5  +4.6550e-01  +5.5586e-01  9.04e-02  2.78e-03  5.58e-02  1.21e-03  1.05e-02  7.16e-01  
  6  +4.4870e-01  +4.7764e-01  2.89e-02  7.08e-04  1.42e-02  3.23e-04  3.12e-03  7.42e-01  
  7  +4.4049e-01  +4.4160e-01  1.11e-03  2.46e-05  4.93e-04  3.11e-06  1.25e-04  9.81e-01  
  8  +4.4010e-01  +4.4012e-01  1.12e-05  2.45e-07  4.93e-06  3.12e-08  1.27e-06  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  1.12e-07  2.45e-09  4.93e-08  3.12e-10  1.27e-08  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  1.12e-09  2.45e-11  4.93e-10  3.12e-12  1.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 781.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:24 PM: Optimal value: 4.401e-01
(CVXPY) Oct 06 04:01:24 PM: Compilation took 4.018e-02 seconds
(CVXPY) Oct 06 04:01:24 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:24 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Finished problem compilation (took 4.555e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 639
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9153e-01  +5.1938e+01  5.14e+01  8.74e-01  9.75e+00  1.00e+00  1.06e+00   ------   
  1  +5.5947e-01  +1.1123e+01  1.06e+01  3.68e-01  5.62e+00  3.82e-03  5.82e-01  6.10e-01  
  2  +4.9811e-01  +2.1098e+00  1.61e+00  1.03e-01  2.01e+00  1.67e-02  2.50e-01  8.81e-01  
  3  +4.5490e-01  +8.6882e-01  4.14e-01  1.95e-02  4.11e-01  7.53e-03  5.67e-02  8.30e-01  
  4  +4.3375e-01  +7.5257e-01  3.19e-01  1.13e-02  2.38e-01  5.93e-03  3.55e-02  4.71e-01  
  5  +4.0635e-01  +6.2123e-01  2.15e-01  5.40e-03  1.15e-01  4.39e-03  1.79e-02  5.94e-01  
  6  +3.8067e-01  +5.1828e-01  1.38e-01  2.74e-03  5.96e-02  2.98e-03  9.56e-03  5.15e-01  
  7  +3.6248e-01  +4.5142e-01  8.89e-02  1.64e-03  3.66e-02  1.80e-03  5.93e-03  4.31e-01  
  8  +3.3372e-01  +3.4156e-01  7.84e-03  1.38e-04  3.10e-03  2.62e-05  5.41e-04  9.57e-01  
  9  +3.3036e-01  +3.3049e-01  1.27e-04  2.24e-06  5.00e-05  2.89e-07  8.91e-06  9.84e-01  
 10  +3.3030e-01  +3.3030e-01  1.55e-06  2.82e-08  6.16e-07  2.80e-09  1.15e-07  9.87e-01  
 11  +3.3030e-01  +3.3030e-01  1.55e-08  2.82e-10  6.16e-09  2.80e-11  1.15e-09  9.90e-01  
 12  +3.3030e-01  +3.3030e-01  1.55e-10  2.82e-12  6.17e-11  2.80e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 973.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:24 PM: Optimal value: 3.303e-01
(CVXPY) Oct 06 04:01:24 PM: Compilation took 4.555e-03 seconds
(CVXPY) Oct 06 04:01:24 PM: Solver (including time spent in interface) took 5.240e-03 seconds
Iteration: 2, Objective: 0.3303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:24 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Finished problem compilation (took 4.116e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 713
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8888e-01  +5.2121e+01  5.16e+01  8.79e-01  9.62e+00  1.00e+00  1.07e+00   ------   
  1  +5.3744e-01  +1.1081e+01  1.05e+01  3.70e-01  5.37e+00  3.86e-03  5.75e-01  6.15e-01  
  2  +4.6865e-01  +2.1490e+00  1.68e+00  8.84e-02  1.72e+00  1.83e-02  2.12e-01  9.17e-01  
  3  +3.7963e-01  +9.9991e-01  6.20e-01  1.98e-02  4.09e-01  1.07e-02  5.54e-02  8.09e-01  
  4  +3.3777e-01  +7.2059e-01  3.83e-01  9.53e-03  2.00e-01  7.03e-03  2.89e-02  6.03e-01  
  5  +2.9072e-01  +4.0557e-01  1.15e-01  2.85e-03  6.00e-02  6.88e-04  9.88e-03  8.86e-01  
  6  +2.8104e-01  +3.7319e-01  9.21e-02  2.09e-03  4.62e-02  5.68e-04  7.42e-03  3.94e-01  
  7  +2.5439e-01  +2.6497e-01  1.06e-02  2.24e-04  5.03e-03  4.88e-05  8.87e-04  9.01e-01  
  8  +2.5059e-01  +2.5082e-01  2.25e-04  4.78e-06  1.07e-04  6.43e-07  1.95e-05  9.79e-01  
  9  +2.5050e-01  +2.5051e-01  3.61e-06  7.90e-08  1.73e-06  6.76e-09  3.42e-07  9.83e-01  
 10  +2.5050e-01  +2.5050e-01  3.60e-08  7.89e-10  1.73e-08  6.74e-11  3.42e-09  9.90e-01  
 11  +2.5050e-01  +2.5050e-01  3.61e-10  7.91e-12  1.73e-10  6.74e-13  3.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5273ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:24 PM: Optimal value: 2.505e-01
(CVXPY) Oct 06 04:01:24 PM: Compilation took 4.116e-03 seconds
(CVXPY) Oct 06 04:01:24 PM: Solver (including time spent in interface) took 6.083e-03 seconds
Iteration: 3, Objective: 0.2505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:24 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Finished problem compilation (took 3.510e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 764
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8563e-01  +5.2269e+01  5.18e+01  8.84e-01  9.40e+00  1.00e+00  1.07e+00   ------   
  1  +5.0538e-01  +1.1220e+01  1.07e+01  3.72e-01  5.18e+00  3.93e-03  5.75e-01  6.11e-01  
  2  +4.2177e-01  +1.9435e+00  1.52e+00  7.04e-02  1.35e+00  2.03e-02  1.76e-01  9.84e-01  
  3  +3.2284e-01  +1.0121e+00  6.89e-01  2.06e-02  4.02e-01  1.05e-02  5.89e-02  8.00e-01  
  4  +2.6107e-01  +5.4394e-01  2.83e-01  7.13e-03  1.39e-01  3.78e-03  2.28e-02  6.95e-01  
  5  +2.3641e-01  +4.1471e-01  1.78e-01  4.28e-03  8.38e-02  2.19e-03  1.46e-02  4.56e-01  
  6  +2.1076e-01  +2.8707e-01  7.63e-02  1.76e-03  3.50e-02  8.68e-04  6.49e-03  5.93e-01  
  7  +1.9377e-01  +2.0408e-01  1.03e-02  2.37e-04  4.69e-03  8.60e-05  9.34e-04  8.96e-01  
  8  +1.9086e-01  +1.9131e-01  4.49e-04  1.05e-05  2.05e-04  2.42e-06  4.29e-05  9.54e-01  
  9  +1.9071e-01  +1.9072e-01  1.65e-05  3.98e-07  7.61e-06  5.53e-08  1.79e-06  9.65e-01  
 10  +1.9070e-01  +1.9070e-01  1.65e-07  3.98e-09  7.62e-08  5.54e-10  1.81e-08  9.90e-01  
 11  +1.9070e-01  +1.9070e-01  1.65e-09  3.99e-11  7.62e-10  5.54e-12  1.81e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2822ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:24 PM: Optimal value: 1.907e-01
(CVXPY) Oct 06 04:01:24 PM: Compilation took 3.510e-03 seconds
(CVXPY) Oct 06 04:01:24 PM: Solver (including time spent in interface) took 6.217e-03 seconds
Iteration: 4, Objective: 0.1907
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:24 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:24 PM: Finished problem compilation (took 6.698e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 824
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8445e-01  +5.2197e+01  5.17e+01  8.88e-01  9.24e+00  1.00e+00  1.07e+00   ------   
  1  +4.9321e-01  +1.1262e+01  1.08e+01  3.79e-01  5.03e+00  3.95e-03  5.77e-01  6.08e-01  
  2  +3.9623e-01  +2.4312e+00  2.03e+00  8.56e-02  1.58e+00  2.05e-02  2.11e-01  8.92e-01  
  3  +3.1003e-01  +1.2859e+00  9.76e-01  3.12e-02  5.95e-01  1.15e-02  8.60e-02  6.90e-01  
  4  +2.4714e-01  +5.4799e-01  3.01e-01  8.85e-03  1.68e-01  2.96e-03  2.77e-02  7.60e-01  
  5  +2.2431e-01  +4.1140e-01  1.87e-01  5.45e-03  1.04e-01  1.38e-03  1.81e-02  5.64e-01  
  6  +1.9515e-01  +2.8128e-01  8.61e-02  2.13e-03  4.33e-02  6.35e-04  7.55e-03  7.51e-01  
  7  +1.7908e-01  +2.0249e-01  2.34e-02  5.71e-04  1.16e-02  1.02e-04  2.13e-03  9.50e-01  
  8  +1.7141e-01  +1.7299e-01  1.58e-03  3.76e-05  7.70e-04  5.66e-06  1.46e-04  9.34e-01  
  9  +1.7097e-01  +1.7140e-01  4.30e-04  1.03e-05  2.01e-04  1.61e-06  4.45e-05  8.37e-01  
 10  +1.7081e-01  +1.7083e-01  2.26e-05  5.44e-07  1.05e-05  6.81e-08  2.50e-06  9.46e-01  
 11  +1.7080e-01  +1.7080e-01  2.30e-07  5.54e-09  1.07e-07  6.87e-10  2.56e-08  9.90e-01  
 12  +1.7080e-01  +1.7080e-01  2.30e-09  5.54e-11  1.07e-09  6.87e-12  2.56e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4777ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:24 PM: Optimal value: 1.708e-01
(CVXPY) Oct 06 04:01:24 PM: Compilation took 6.698e-03 seconds
(CVXPY) Oct 06 04:01:24 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1708
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:25 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:25 PM: Finished problem compilation (took 4.289e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 878
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8297e-01  +5.2058e+01  5.16e+01  8.91e-01  9.08e+00  1.00e+00  1.07e+00   ------   
  1  +4.7416e-01  +1.1367e+01  1.09e+01  3.85e-01  4.91e+00  4.00e-03  5.77e-01  6.02e-01  
  2  +3.6257e-01  +2.6366e+00  2.27e+00  8.98e-02  1.60e+00  2.12e-02  2.23e-01  8.62e-01  
  3  +2.8979e-01  +1.0880e+00  7.98e-01  2.68e-02  4.97e-01  9.16e-03  7.50e-02  7.05e-01  
  4  +2.3845e-01  +5.6347e-01  3.25e-01  1.02e-02  1.89e-01  3.04e-03  3.16e-02  7.46e-01  
  5  +2.1188e-01  +3.8545e-01  1.74e-01  5.09e-03  9.63e-02  1.59e-03  1.69e-02  5.12e-01  
  6  +1.9464e-01  +2.8405e-01  8.94e-02  2.39e-03  4.77e-02  7.55e-04  8.23e-03  6.92e-01  
  7  +1.8020e-01  +2.1462e-01  3.44e-02  8.75e-04  1.78e-02  2.45e-04  3.14e-03  6.97e-01  
  8  +1.7169e-01  +1.7444e-01  2.75e-03  6.81e-05  1.39e-03  1.63e-05  2.54e-04  9.25e-01  
  9  +1.7102e-01  +1.7156e-01  5.42e-04  1.36e-05  2.64e-04  2.18e-06  5.71e-05  8.97e-01  
 10  +1.7082e-01  +1.7087e-01  4.95e-05  1.23e-06  2.32e-05  1.70e-07  5.77e-06  9.28e-01  
 11  +1.7080e-01  +1.7080e-01  5.42e-07  1.35e-08  2.54e-07  1.81e-09  6.44e-08  9.89e-01  
 12  +1.7080e-01  +1.7080e-01  5.42e-09  1.35e-10  2.54e-09  1.81e-11  6.44e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:25 PM: Optimal value: 1.708e-01
(CVXPY) Oct 06 04:01:25 PM: Compilation took 4.289e-03 seconds
(CVXPY) Oct 06 04:01:25 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.1708
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:25 PM: Your problem has 116 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:25 PM: Finished problem compilation (took 5.955e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 116
  constraints   = 166
  nnz(P)        = 0
  nnz(A)        = 886
  cones (total) = 1
    : Nonnegative = 1,  numel = 166

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8147e-01  +5.2256e+01  5.18e+01  8.91e-01  9.08e+00  1.00e+00  1.08e+00   ------   
  1  +4.6354e-01  +1.1491e+01  1.10e+01  3.87e-01  4.94e+00  4.01e-03  5.82e-01  5.97e-01  
  2  +3.5651e-01  +2.4159e+00  2.06e+00  8.43e-02  1.50e+00  2.18e-02  2.11e-01  9.03e-01  
  3  +2.8582e-01  +1.1582e+00  8.72e-01  3.00e-02  5.53e-01  1.07e-02  8.34e-02  6.47e-01  
  4  +2.3214e-01  +4.9348e-01  2.61e-01  8.55e-03  1.57e-01  2.45e-03  2.69e-02  8.15e-01  
  5  +2.1062e-01  +3.7158e-01  1.61e-01  4.88e-03  9.23e-02  1.48e-03  1.61e-02  4.69e-01  
  6  +1.9891e-01  +3.1101e-01  1.12e-01  3.10e-03  6.18e-02  9.89e-04  1.05e-02  5.10e-01  
  7  +1.8083e-01  +2.2204e-01  4.12e-02  1.05e-03  2.16e-02  3.42e-04  3.76e-03  6.72e-01  
  8  +1.7168e-01  +1.7444e-01  2.75e-03  6.96e-05  1.42e-03  1.72e-05  2.59e-04  9.46e-01  
  9  +1.7103e-01  +1.7160e-01  5.77e-04  1.49e-05  2.89e-04  2.40e-06  6.21e-05  8.80e-01  
 10  +1.7082e-01  +1.7087e-01  5.27e-05  1.35e-06  2.54e-05  1.83e-07  6.29e-06  9.27e-01  
 11  +1.7080e-01  +1.7080e-01  5.87e-07  1.50e-08  2.83e-07  1.97e-09  7.12e-08  9.89e-01  
 12  +1.7080e-01  +1.7080e-01  5.87e-09  1.50e-10  2.83e-09  1.97e-11  7.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5576ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:25 PM: Optimal value: 1.708e-01
(CVXPY) Oct 06 04:01:25 PM: Compilation took 5.955e-03 seconds
(CVXPY) Oct 06 04:01:25 PM: Solver (including time spent in interface) took 3.613e-03 seconds
FULL MODEL:
  Accruacy: 0.79
  Our objective: 0.58

IF 
    (x0 = 0 AND x1 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 0 AND x6 = 0)                       <-- (term's our objective: 0.22)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1) <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.1)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.06)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1) <-- (term's our objective: 0.08)
 OR (x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.782654285430908
Best over terms:
  Our final objective: 0.22
    Its accruacy: 0.61
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.22
  Highest accruacy: 0.61
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

