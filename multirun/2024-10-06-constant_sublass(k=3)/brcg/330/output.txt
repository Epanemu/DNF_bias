Command:
python test_script.py -s constant_subclass -d 9 -n 100 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.13999999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 9.

Computed total variation: 0.92
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:04 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:04 PM: Finished problem compilation (took 4.427e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9776e-01  +5.0970e+01  5.05e+01  8.73e-01  1.04e+01  1.00e+00  1.04e+00   ------   
  1  +5.7667e-01  +1.1258e+01  1.07e+01  3.82e-01  6.28e+00  3.76e-03  5.94e-01  5.87e-01  
  2  +5.1583e-01  +1.7479e+00  1.23e+00  9.85e-02  2.00e+00  1.85e-02  2.55e-01  9.90e-01  
  3  +4.9940e-01  +7.5478e-01  2.55e-01  1.99e-02  4.24e-01  5.52e-03  6.50e-02  7.87e-01  
  4  +4.8083e-01  +7.0269e-01  2.22e-01  8.19e-03  1.80e-01  7.78e-03  2.77e-02  6.53e-01  
  5  +4.6839e-01  +5.8585e-01  1.17e-01  4.17e-03  9.07e-02  2.77e-03  1.52e-02  5.58e-01  
  6  +4.5526e-01  +5.1482e-01  5.96e-02  1.60e-03  3.49e-02  1.00e-03  6.67e-03  7.43e-01  
  7  +4.4390e-01  +4.5704e-01  1.31e-02  3.09e-04  6.73e-03  1.00e-04  1.49e-03  8.92e-01  
  8  +4.4020e-01  +4.4051e-01  3.11e-04  6.94e-06  1.51e-04  1.17e-06  3.62e-05  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  3.11e-06  6.92e-08  1.51e-06  1.17e-08  3.62e-07  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  3.11e-08  6.92e-10  1.51e-08  1.17e-10  3.62e-09  9.90e-01  
 11  +4.4010e-01  +4.4010e-01  3.11e-10  6.92e-12  1.51e-10  1.17e-12  3.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 965.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:04 PM: Optimal value: 4.401e-01
(CVXPY) Oct 06 04:14:04 PM: Compilation took 4.427e-02 seconds
(CVXPY) Oct 06 04:14:04 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:04 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Finished problem compilation (took 1.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 733
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9309e-01  +5.1723e+01  5.12e+01  8.79e-01  1.05e+01  1.00e+00  1.05e+00   ------   
  1  +5.5239e-01  +1.1401e+01  1.08e+01  3.91e-01  6.23e+00  3.77e-03  6.04e-01  5.87e-01  
  2  +4.9095e-01  +2.1809e+00  1.69e+00  1.15e-01  2.36e+00  2.06e-02  2.79e-01  9.05e-01  
  3  +4.4893e-01  +8.9206e-01  4.43e-01  2.25e-02  5.00e-01  9.38e-03  6.55e-02  7.99e-01  
  4  +4.1568e-01  +7.1782e-01  3.02e-01  9.99e-03  2.23e-01  6.43e-03  3.24e-02  6.57e-01  
  5  +3.9068e-01  +5.6912e-01  1.78e-01  4.50e-03  1.02e-01  3.84e-03  1.50e-02  6.55e-01  
  6  +3.6154e-01  +4.5253e-01  9.10e-02  1.80e-03  4.14e-02  1.55e-03  6.42e-03  7.17e-01  
  7  +3.4113e-01  +3.6657e-01  2.54e-02  4.97e-04  1.14e-02  4.56e-05  1.87e-03  9.90e-01  
  8  +3.3082e-01  +3.3193e-01  1.11e-03  2.08e-05  4.78e-04  2.03e-06  8.17e-05  9.60e-01  
  9  +3.3031e-01  +3.3033e-01  2.13e-05  4.02e-07  9.16e-06  2.05e-08  1.61e-06  9.80e-01  
 10  +3.3030e-01  +3.3030e-01  2.35e-07  4.46e-09  1.01e-07  2.29e-10  1.80e-08  9.89e-01  
 11  +3.3030e-01  +3.3030e-01  2.35e-09  4.47e-11  1.01e-09  2.29e-12  1.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1297ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:05 PM: Optimal value: 3.303e-01
(CVXPY) Oct 06 04:14:05 PM: Compilation took 1.570e-02 seconds
(CVXPY) Oct 06 04:14:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3303
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:05 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 819
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9062e-01  +5.1859e+01  5.14e+01  8.83e-01  1.03e+01  1.00e+00  1.06e+00   ------   
  1  +5.2929e-01  +1.1370e+01  1.08e+01  3.93e-01  6.00e+00  3.81e-03  5.97e-01  5.92e-01  
  2  +4.5962e-01  +2.1721e+00  1.71e+00  9.78e-02  2.02e+00  2.31e-02  2.38e-01  9.60e-01  
  3  +3.9348e-01  +1.0920e+00  6.98e-01  2.69e-02  5.83e-01  1.40e-02  7.39e-02  7.28e-01  
  4  +3.3757e-01  +8.4264e-01  5.05e-01  1.27e-02  2.81e-01  1.16e-02  3.75e-02  5.92e-01  
  5  +2.7253e-01  +4.5508e-01  1.83e-01  3.94e-03  8.73e-02  3.42e-03  1.27e-02  7.08e-01  
  6  +2.4834e-01  +3.4698e-01  9.86e-02  2.06e-03  4.66e-02  1.71e-03  6.96e-03  5.10e-01  
  7  +2.2389e-01  +2.3409e-01  1.02e-02  2.13e-04  4.82e-03  7.98e-05  7.62e-04  9.54e-01  
  8  +2.2071e-01  +2.2129e-01  5.79e-04  1.22e-05  2.74e-04  3.58e-06  4.48e-05  9.41e-01  
  9  +2.2052e-01  +2.2056e-01  4.18e-05  9.10e-07  1.99e-05  1.72e-07  3.67e-06  9.47e-01  
 10  +2.2050e-01  +2.2050e-01  4.85e-07  1.06e-08  2.31e-07  1.98e-09  4.33e-08  9.88e-01  
 11  +2.2050e-01  +2.2050e-01  4.85e-09  1.06e-10  2.31e-09  1.98e-11  4.33e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2511ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:05 PM: Optimal value: 2.205e-01
(CVXPY) Oct 06 04:14:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:05 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 884
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8880e-01  +5.2142e+01  5.17e+01  8.87e-01  1.02e+01  1.00e+00  1.06e+00   ------   
  1  +5.0907e-01  +1.1352e+01  1.08e+01  3.94e-01  5.73e+00  3.85e-03  5.90e-01  5.98e-01  
  2  +4.1531e-01  +2.3671e+00  1.95e+00  8.87e-02  1.80e+00  2.53e-02  2.13e-01  9.58e-01  
  3  +2.9498e-01  +9.8388e-01  6.89e-01  1.96e-02  4.19e-01  1.40e-02  5.46e-02  7.84e-01  
  4  +2.3128e-01  +5.1005e-01  2.79e-01  7.31e-03  1.57e-01  4.40e-03  2.24e-02  6.75e-01  
  5  +1.9854e-01  +3.4384e-01  1.45e-01  3.55e-03  7.78e-02  2.12e-03  1.17e-02  5.45e-01  
  6  +1.7752e-01  +2.4165e-01  6.41e-02  1.52e-03  3.39e-02  8.53e-04  5.32e-03  5.99e-01  
  7  +1.6171e-01  +1.6476e-01  3.06e-03  7.30e-05  1.62e-03  1.04e-05  2.71e-04  9.90e-01  
  8  +1.6075e-01  +1.6101e-01  2.62e-04  6.41e-06  1.39e-04  6.20e-07  2.50e-05  9.10e-01  
  9  +1.6066e-01  +1.6067e-01  1.52e-05  3.80e-07  8.08e-06  3.63e-08  1.58e-06  9.44e-01  
 10  +1.6065e-01  +1.6065e-01  1.53e-07  3.82e-09  8.13e-08  3.65e-10  1.60e-08  9.90e-01  
 11  +1.6065e-01  +1.6065e-01  1.53e-09  3.83e-11  8.13e-10  3.65e-12  1.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3249ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:05 PM: Optimal value: 1.607e-01
(CVXPY) Oct 06 04:14:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1607
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:05 PM: Your problem has 109 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 109
  constraints   = 159
  nnz(P)        = 0
  nnz(A)        = 937
  cones (total) = 1
    : Nonnegative = 1,  numel = 159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8363e-01  +5.2818e+01  5.23e+01  8.91e-01  9.95e+00  1.00e+00  1.08e+00   ------   
  1  +4.5306e-01  +1.1635e+01  1.12e+01  3.89e-01  5.52e+00  3.98e-03  5.93e-01  5.94e-01  
  2  +3.0262e-01  +2.4338e+00  2.13e+00  7.90e-02  1.53e+00  2.81e-02  1.93e-01  9.67e-01  
  3  +2.1463e-01  +1.0835e+00  8.69e-01  2.76e-02  5.48e-01  1.30e-02  7.43e-02  6.51e-01  
  4  +1.5831e-01  +3.4977e-01  1.91e-01  6.17e-03  1.21e-01  1.61e-03  1.91e-02  8.94e-01  
  5  +1.3963e-01  +2.7391e-01  1.34e-01  3.92e-03  8.31e-02  1.13e-03  1.25e-02  4.47e-01  
  6  +1.2475e-01  +2.0852e-01  8.38e-02  2.25e-03  5.01e-02  6.86e-04  7.54e-03  4.77e-01  
  7  +1.0513e-01  +1.1813e-01  1.30e-02  3.41e-04  7.60e-03  5.09e-05  1.23e-03  9.90e-01  
  8  +1.0113e-01  +1.0164e-01  5.13e-04  1.35e-05  2.99e-04  1.47e-06  5.02e-05  9.60e-01  
  9  +1.0096e-01  +1.0099e-01  3.17e-05  8.62e-07  1.86e-05  7.83e-08  3.46e-06  9.46e-01  
 10  +1.0095e-01  +1.0095e-01  3.30e-07  9.01e-09  1.94e-07  8.12e-10  3.65e-08  9.89e-01  
 11  +1.0095e-01  +1.0095e-01  3.30e-09  9.02e-11  1.94e-09  8.12e-12  3.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.522ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:05 PM: Optimal value: 1.010e-01
(CVXPY) Oct 06 04:14:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:05 PM: Your problem has 119 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 119
  constraints   = 169
  nnz(P)        = 0
  nnz(A)        = 968
  cones (total) = 1
    : Nonnegative = 1,  numel = 169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8002e-01  +5.2701e+01  5.22e+01  8.93e-01  9.71e+00  1.00e+00  1.07e+00   ------   
  1  +4.0285e-01  +1.1747e+01  1.13e+01  3.82e-01  5.29e+00  4.13e-03  5.75e-01  5.91e-01  
  2  +2.4638e-01  +2.1835e+00  1.94e+00  7.16e-02  1.37e+00  2.74e-02  1.65e-01  9.90e-01  
  3  +1.7530e-01  +8.3991e-01  6.65e-01  2.32e-02  4.47e-01  9.46e-03  5.87e-02  6.78e-01  
  4  +1.3336e-01  +4.3035e-01  2.97e-01  9.97e-03  1.94e-01  3.51e-03  2.83e-02  6.84e-01  
  5  +1.0081e-01  +2.1131e-01  1.11e-01  3.37e-03  6.81e-02  1.27e-03  1.06e-02  6.79e-01  
  6  +9.4458e-02  +1.8197e-01  8.75e-02  2.49e-03  5.25e-02  9.06e-04  7.93e-03  4.13e-01  
  7  +7.8827e-02  +1.0241e-01  2.36e-02  6.34e-04  1.34e-02  1.93e-04  2.16e-03  8.26e-01  
  8  +7.2356e-02  +7.5635e-02  3.28e-03  8.51e-05  1.81e-03  1.41e-05  2.98e-04  9.70e-01  
  9  +7.1297e-02  +7.1540e-02  2.43e-04  6.46e-06  1.35e-04  6.89e-07  2.36e-05  9.22e-01  
 10  +7.1202e-02  +7.1208e-02  5.58e-06  1.52e-07  3.10e-06  1.43e-08  5.91e-07  9.82e-01  
 11  +7.1200e-02  +7.1200e-02  5.57e-08  1.52e-09  3.09e-08  1.43e-10  5.92e-09  9.90e-01  
 12  +7.1200e-02  +7.1200e-02  5.58e-10  1.52e-11  3.10e-10  1.43e-12  5.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8806ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:05 PM: Optimal value: 7.120e-02
(CVXPY) Oct 06 04:14:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:05 PM: Solver (including time spent in interface) took 1.555e-02 seconds
Iteration: 6, Objective: 0.0712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:05 PM: Your problem has 129 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 129
  constraints   = 179
  nnz(P)        = 0
  nnz(A)        = 1010
  cones (total) = 1
    : Nonnegative = 1,  numel = 179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7797e-01  +5.2781e+01  5.23e+01  8.96e-01  9.51e+00  1.00e+00  1.07e+00   ------   
  1  +3.7160e-01  +1.1944e+01  1.16e+01  3.85e-01  5.13e+00  4.22e-03  5.74e-01  5.85e-01  
  2  +2.2151e-01  +2.1150e+00  1.89e+00  7.27e-02  1.33e+00  2.71e-02  1.69e-01  9.90e-01  
  3  +1.5626e-01  +9.4573e-01  7.89e-01  2.78e-02  5.17e-01  1.12e-02  7.06e-02  6.34e-01  
  4  +1.1435e-01  +3.0349e-01  1.89e-01  6.65e-03  1.25e-01  2.58e-03  1.92e-02  7.69e-01  
  5  +8.7118e-02  +1.8230e-01  9.52e-02  2.90e-03  5.90e-02  1.15e-03  8.89e-03  6.81e-01  
  6  +7.6619e-02  +1.3582e-01  5.92e-02  1.68e-03  3.56e-02  6.56e-04  5.30e-03  4.99e-01  
  7  +6.2569e-02  +6.7062e-02  4.49e-03  1.25e-04  2.65e-03  2.47e-05  4.15e-04  9.66e-01  
  8  +6.1412e-02  +6.1940e-02  5.28e-04  1.52e-05  3.16e-04  2.13e-06  5.29e-05  8.78e-01  
  9  +6.1298e-02  +6.1463e-02  1.65e-04  4.85e-06  9.94e-05  6.60e-07  1.77e-05  6.91e-01  
 10  +6.1252e-02  +6.1257e-02  5.37e-06  1.59e-07  3.24e-06  2.06e-08  5.94e-07  9.76e-01  
 11  +6.1250e-02  +6.1250e-02  5.38e-08  1.60e-09  3.25e-08  2.06e-10  5.96e-09  9.90e-01  
 12  +6.1250e-02  +6.1250e-02  5.38e-10  1.60e-11  3.25e-10  2.07e-12  5.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:05 PM: Optimal value: 6.125e-02
(CVXPY) Oct 06 04:14:05 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0613
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:05 PM: Your problem has 139 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 139
  constraints   = 189
  nnz(P)        = 0
  nnz(A)        = 1061
  cones (total) = 1
    : Nonnegative = 1,  numel = 189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7633e-01  +5.2925e+01  5.24e+01  8.99e-01  9.34e+00  1.00e+00  1.08e+00   ------   
  1  +3.4654e-01  +1.2088e+01  1.17e+01  3.87e-01  4.97e+00  4.29e-03  5.72e-01  5.81e-01  
  2  +1.6029e-01  +2.4476e+00  2.29e+00  8.07e-02  1.41e+00  2.70e-02  1.86e-01  9.31e-01  
  3  +1.3834e-01  +1.3758e+00  1.24e+00  4.70e-02  8.36e-01  1.43e-02  1.15e-01  4.09e-01  
  4  +1.2166e-01  +6.2822e-01  5.07e-01  1.95e-02  3.52e-01  4.60e-03  5.27e-02  8.09e-01  
  5  +7.8985e-02  +2.0931e-01  1.30e-01  4.68e-03  8.64e-02  1.10e-03  1.45e-02  7.59e-01  
  6  +6.0802e-02  +1.0868e-01  4.79e-02  1.63e-03  3.09e-02  3.78e-04  5.33e-03  6.75e-01  
  7  +5.1717e-02  +5.3766e-02  2.05e-03  6.99e-05  1.32e-03  8.85e-06  2.39e-04  9.72e-01  
  8  +5.1319e-02  +5.1639e-02  3.20e-04  1.14e-05  2.09e-04  1.09e-06  4.18e-05  8.39e-01  
  9  +5.1258e-02  +5.1292e-02  3.40e-05  1.23e-06  2.23e-05  1.14e-07  4.65e-06  9.35e-01  
 10  +5.1250e-02  +5.1250e-02  3.63e-07  1.31e-08  2.38e-07  1.20e-09  4.99e-08  9.89e-01  
 11  +5.1250e-02  +5.1250e-02  3.63e-09  1.31e-10  2.38e-09  1.21e-11  4.99e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.762ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:05 PM: Optimal value: 5.125e-02
(CVXPY) Oct 06 04:14:05 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:14:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0513
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:05 PM: Your problem has 149 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:05 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 149
  constraints   = 199
  nnz(P)        = 0
  nnz(A)        = 1094
  cones (total) = 1
    : Nonnegative = 1,  numel = 199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7328e-01  +5.2956e+01  5.25e+01  9.01e-01  9.15e+00  1.00e+00  1.08e+00   ------   
  1  +3.0004e-01  +1.2261e+01  1.20e+01  3.86e-01  4.80e+00  4.41e-03  5.67e-01  5.76e-01  
  2  +1.1726e-01  +2.4013e+00  2.28e+00  8.08e-02  1.38e+00  2.59e-02  1.87e-01  9.18e-01  
  3  +1.1294e-01  +1.3825e+00  1.27e+00  5.02e-02  8.61e-01  1.47e-02  1.22e-01  3.80e-01  
  4  +1.0431e-01  +5.4518e-01  4.41e-01  1.82e-02  3.16e-01  4.23e-03  4.91e-02  8.46e-01  
  5  +6.7822e-02  +1.8356e-01  1.16e-01  4.42e-03  7.93e-02  1.12e-03  1.33e-02  7.62e-01  
  6  +5.6101e-02  +1.2841e-01  7.23e-02  2.56e-03  4.77e-02  6.10e-04  7.91e-03  5.50e-01  
  7  +4.2972e-02  +5.0873e-02  7.90e-03  2.72e-04  5.11e-03  4.93e-05  8.80e-04  9.17e-01  
  8  +4.1518e-02  +4.2276e-02  7.58e-04  2.70e-05  4.97e-04  3.25e-06  9.10e-05  8.99e-01  
  9  +4.1397e-02  +4.1631e-02  2.34e-04  8.59e-06  1.54e-04  9.51e-07  3.09e-05  7.50e-01  
 10  +4.1352e-02  +4.1361e-02  8.82e-06  3.28e-07  5.85e-06  3.16e-08  1.20e-06  9.83e-01  
 11  +4.1350e-02  +4.1350e-02  8.86e-08  3.29e-09  5.87e-08  3.17e-10  1.20e-08  9.90e-01  
 12  +4.1350e-02  +4.1350e-02  8.87e-10  3.29e-11  5.88e-10  3.17e-12  1.20e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8804ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:05 PM: Optimal value: 4.135e-02
(CVXPY) Oct 06 04:14:05 PM: Compilation took 1.501e-02 seconds
(CVXPY) Oct 06 04:14:05 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0414
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:06 PM: Your problem has 154 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:06 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 154
  constraints   = 204
  nnz(P)        = 0
  nnz(A)        = 1115
  cones (total) = 1
    : Nonnegative = 1,  numel = 204

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7306e-01  +5.3046e+01  5.26e+01  9.03e-01  9.07e+00  1.00e+00  1.08e+00   ------   
  1  +2.9323e-01  +1.2323e+01  1.20e+01  3.88e-01  4.74e+00  4.43e-03  5.67e-01  5.75e-01  
  2  +1.1601e-01  +2.3392e+00  2.22e+00  7.97e-02  1.35e+00  2.63e-02  1.85e-01  9.28e-01  
  3  +1.1245e-01  +1.4051e+00  1.29e+00  5.15e-02  8.79e-01  1.53e-02  1.25e-01  3.65e-01  
  4  +1.0284e-01  +5.1221e-01  4.09e-01  1.71e-02  2.96e-01  3.97e-03  4.62e-02  8.65e-01  
  5  +6.6631e-02  +1.8138e-01  1.15e-01  4.37e-03  7.89e-02  1.10e-03  1.32e-02  7.63e-01  
  6  +5.4733e-02  +1.2199e-01  6.73e-02  2.37e-03  4.44e-02  5.66e-04  7.36e-03  5.73e-01  
  7  +4.2406e-02  +4.7354e-02  4.95e-03  1.71e-04  3.21e-03  2.49e-05  5.53e-04  9.55e-01  
  8  +4.1508e-02  +4.2181e-02  6.73e-04  2.44e-05  4.44e-04  2.43e-06  8.34e-05  8.54e-01  
  9  +4.1404e-02  +4.1664e-02  2.61e-04  9.57e-06  1.72e-04  9.36e-07  3.48e-05  6.77e-01  
 10  +4.1357e-02  +4.1382e-02  2.58e-05  9.56e-07  1.70e-05  8.81e-08  3.55e-06  9.90e-01  
 11  +4.1350e-02  +4.1350e-02  2.78e-07  1.03e-08  1.84e-07  9.48e-10  3.83e-08  9.89e-01  
 12  +4.1350e-02  +4.1350e-02  2.78e-09  1.03e-10  1.84e-09  9.49e-12  3.84e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.1939ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:06 PM: Optimal value: 4.135e-02
(CVXPY) Oct 06 04:14:06 PM: Compilation took 1.555e-02 seconds
(CVXPY) Oct 06 04:14:06 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.0414
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:06 PM: Your problem has 155 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:06 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 155
  constraints   = 205
  nnz(P)        = 0
  nnz(A)        = 1121
  cones (total) = 1
    : Nonnegative = 1,  numel = 205

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7306e-01  +5.3059e+01  5.26e+01  9.03e-01  9.06e+00  1.00e+00  1.08e+00   ------   
  1  +2.9268e-01  +1.2335e+01  1.20e+01  3.89e-01  4.73e+00  4.44e-03  5.67e-01  5.75e-01  
  2  +1.1393e-01  +2.3479e+00  2.23e+00  8.00e-02  1.35e+00  2.63e-02  1.85e-01  9.27e-01  
  3  +1.1134e-01  +1.4141e+00  1.30e+00  5.19e-02  8.85e-01  1.54e-02  1.26e-01  3.65e-01  
  4  +1.0174e-01  +4.9079e-01  3.89e-01  1.63e-02  2.82e-01  3.77e-03  4.43e-02  8.75e-01  
  5  +6.5865e-02  +1.7657e-01  1.11e-01  4.22e-03  7.63e-02  1.06e-03  1.27e-02  7.62e-01  
  6  +5.4633e-02  +1.2097e-01  6.63e-02  2.34e-03  4.39e-02  5.65e-04  7.26e-03  5.56e-01  
  7  +4.2448e-02  +4.7604e-02  5.16e-03  1.78e-04  3.35e-03  2.72e-05  5.76e-04  9.49e-01  
  8  +4.1535e-02  +4.2348e-02  8.13e-04  2.95e-05  5.36e-04  3.24e-06  1.01e-04  8.30e-01  
  9  +4.1418e-02  +4.1771e-02  3.53e-04  1.30e-05  2.32e-04  1.34e-06  4.78e-05  6.94e-01  
 10  +4.1345e-02  +4.1418e-02  7.29e-05  2.69e-06  4.72e-05  2.41e-07  1.04e-05  9.38e-01  
 11  +4.1327e-02  +4.1335e-02  7.61e-06  2.82e-07  4.91e-06  2.46e-08  1.10e-06  9.30e-01  
 12  +4.1325e-02  +4.1325e-02  8.12e-08  3.01e-09  5.25e-08  2.62e-10  1.18e-08  9.90e-01  
 13  +4.1325e-02  +4.1325e-02  8.13e-10  3.01e-11  5.25e-10  2.62e-12  1.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0344ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:06 PM: Optimal value: 4.133e-02
(CVXPY) Oct 06 04:14:06 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:06 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.95
  Our objective: 0.8999999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x6 = 0)                                             <-- (term's our objective: 0.22)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x8 = 1)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 1 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x2 = 0 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1)                       <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0)                       <-- (term's our objective: 0.1)
 OR (x1 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.12)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x8 = 1)                       <-- (term's our objective: 0.06)
 OR (x4 = 1 AND x5 = 0 AND x7 = 1)                                             <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.912244558334351
Best over terms:
  Our final objective: 0.22
    Its accruacy: 0.61
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.22
  Highest accruacy: 0.61
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

