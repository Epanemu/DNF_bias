Command:
python test_script.py -s constant_subclass -d 7 -n 10000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 7.

Computed total variation: 0.1708
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:42 PM: Your problem has 5015 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:42 PM: Finished problem compilation (took 7.536e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5015
  constraints   = 10015
  nnz(P)        = 0
  nnz(A)        = 50015
  cones (total) = 1
    : Nonnegative = 1,  numel = 10015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.05e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +1.0510e+03  1.05e+03  4.04e-01  6.56e+01  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3816e-01  +1.3089e+02  1.30e+02  1.56e-01  3.24e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0988e-01  +3.3475e+01  3.30e+01  1.21e-01  2.47e+01  3.43e-05  2.46e-01  1.63e-01  
  4  +5.0055e-01  +1.9031e+00  1.40e+00  9.52e-03  1.98e+00  5.01e-06  1.44e-01  8.07e-01  
  5  +5.0008e-01  +7.4843e-01  2.48e-01  1.66e-03  3.51e-01  1.50e-05  4.93e-02  9.90e-01  
  6  +5.0001e-01  +6.6693e-01  1.67e-01  1.06e-03  2.23e-01  3.68e-05  9.23e-03  8.37e-01  
  7  +4.9870e-01  +6.7820e-01  1.80e-01  1.28e-04  2.72e-02  8.76e-04  3.84e-04  9.61e-01  
  8  +4.9602e-01  +6.6629e-01  1.70e-01  5.27e-05  1.12e-02  1.83e-03  1.56e-04  6.47e-01  
  9  +4.8723e-01  +6.0478e-01  1.18e-01  3.36e-05  7.13e-03  7.20e-04  1.04e-04  5.70e-01  
 10  +4.7782e-01  +5.5428e-01  7.65e-02  2.14e-05  4.54e-03  1.29e-04  7.10e-05  6.29e-01  
 11  +4.6787e-01  +5.0675e-01  3.89e-02  9.57e-06  2.03e-03  1.36e-06  3.43e-05  9.08e-01  
 12  +4.5741e-01  +4.6053e-01  3.13e-03  6.73e-07  1.43e-04  8.47e-08  2.74e-06  9.70e-01  
 13  +4.5622e-01  +4.5626e-01  4.10e-05  8.53e-09  1.81e-06  1.11e-09  3.62e-08  9.87e-01  
 14  +4.5620e-01  +4.5620e-01  4.10e-07  8.52e-11  1.81e-08  1.11e-11  3.62e-10  9.90e-01  
 15  +4.5620e-01  +4.5620e-01  4.10e-09  8.53e-13  1.81e-10  1.17e-13  3.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.3506ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:42 PM: Optimal value: 4.562e-01
(CVXPY) Oct 06 04:04:42 PM: Compilation took 7.536e-02 seconds
(CVXPY) Oct 06 04:04:42 PM: Solver (including time spent in interface) took 1.097e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:42 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:43 PM: Finished problem compilation (took 3.947e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 58872
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8807e-01  +1.0513e+03  1.05e+03  4.04e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3799e-01  +1.3056e+02  1.30e+02  1.56e-01  3.37e+01  1.32e-02  2.55e-01  8.66e-01  
  3  +5.0979e-01  +3.3285e+01  3.28e+01  1.20e-01  2.56e+01  3.43e-05  2.46e-01  1.67e-01  
  4  +5.0050e-01  +1.7652e+00  1.26e+00  8.60e-03  1.87e+00  5.14e-06  1.35e-01  8.71e-01  
  5  +5.0015e-01  +9.2565e-01  4.25e-01  2.86e-03  6.26e-01  1.14e-05  6.24e-02  7.97e-01  
  6  +5.0009e-01  +7.8690e-01  2.87e-01  1.83e-03  4.02e-01  1.64e-05  1.56e-02  9.90e-01  
  7  +4.9953e-01  +7.3303e-01  2.33e-01  1.68e-04  3.74e-02  3.68e-04  4.67e-04  9.81e-01  
  8  +4.9863e-01  +7.1890e-01  2.20e-01  8.67e-05  1.93e-02  5.88e-04  2.37e-04  5.89e-01  
  9  +4.9746e-01  +7.0725e-01  2.10e-01  7.16e-05  1.60e-02  6.02e-04  1.96e-04  2.31e-01  
 10  +4.9455e-01  +6.8024e-01  1.86e-01  5.48e-05  1.22e-02  4.80e-04  1.50e-04  3.96e-01  
 11  +4.9368e-01  +6.7208e-01  1.78e-01  4.92e-05  1.09e-02  3.29e-04  1.34e-04  3.76e-01  
 12  +4.9212e-01  +6.6379e-01  1.72e-01  4.42e-05  9.82e-03  2.72e-04  1.20e-04  2.55e-01  
 13  +4.8899e-01  +6.5085e-01  1.62e-01  3.56e-05  7.92e-03  2.66e-04  9.78e-05  2.52e-01  
 14  +4.8460e-01  +6.3140e-01  1.47e-01  3.41e-05  7.56e-03  1.73e-04  9.68e-05  1.67e-01  
 15  +4.8097e-01  +6.1368e-01  1.33e-01  3.08e-05  6.82e-03  6.75e-05  8.73e-05  5.09e-01  
 16  +4.6474e-01  +5.5387e-01  8.91e-02  1.59e-05  3.52e-03  4.44e-05  4.63e-05  5.61e-01  
 17  +4.3952e-01  +4.6376e-01  2.42e-02  3.93e-06  8.69e-04  2.44e-06  1.22e-05  8.70e-01  
 18  +4.3209e-01  +4.3902e-01  6.93e-03  1.09e-06  2.40e-04  5.57e-07  3.42e-06  9.90e-01  
 19  +4.2896e-01  +4.2909e-01  1.29e-04  2.03e-08  4.47e-06  1.02e-08  6.46e-08  9.82e-01  
 20  +4.2890e-01  +4.2890e-01  1.29e-06  2.03e-10  4.47e-08  1.02e-10  6.46e-10  9.90e-01  
 21  +4.2890e-01  +4.2890e-01  1.29e-08  2.03e-12  4.47e-10  1.02e-12  6.46e-12  9.90e-01  
 22  +4.2890e-01  +4.2890e-01  1.29e-10  2.03e-14  4.48e-12  1.02e-14  6.46e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 162.2843ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:43 PM: Optimal value: 4.289e-01
(CVXPY) Oct 06 04:04:43 PM: Compilation took 3.947e-02 seconds
(CVXPY) Oct 06 04:04:43 PM: Solver (including time spent in interface) took 1.756e-01 seconds
Iteration: 2, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:43 PM: Your problem has 5035 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:43 PM: Finished problem compilation (took 3.851e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5035
  constraints   = 10035
  nnz(P)        = 0
  nnz(A)        = 61109
  cones (total) = 1
    : Nonnegative = 1,  numel = 10035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8800e-01  +1.0516e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3790e-01  +1.3041e+02  1.30e+02  1.57e-01  3.37e+01  1.32e-02  2.55e-01  8.67e-01  
  3  +5.0977e-01  +3.3241e+01  3.27e+01  1.20e-01  2.56e+01  3.44e-05  2.46e-01  1.68e-01  
  4  +5.0050e-01  +1.7654e+00  1.26e+00  8.61e-03  1.87e+00  5.16e-06  1.34e-01  8.74e-01  
  5  +5.0014e-01  +8.9036e-01  3.90e-01  2.62e-03  5.75e-01  1.23e-05  5.49e-02  8.78e-01  
  6  +5.0006e-01  +7.5134e-01  2.51e-01  1.49e-03  3.27e-01  2.93e-05  8.71e-03  9.70e-01  
  7  +4.9987e-01  +7.5073e-01  2.51e-01  5.02e-04  1.12e-01  1.50e-04  1.50e-03  8.73e-01  
  8  +4.9870e-01  +7.4476e-01  2.46e-01  1.02e-04  2.29e-02  7.67e-04  2.79e-04  8.21e-01  
  9  +4.9667e-01  +7.2249e-01  2.26e-01  6.56e-05  1.46e-02  8.70e-04  1.78e-04  4.93e-01  
 10  +4.9416e-01  +6.9764e-01  2.03e-01  5.59e-05  1.25e-02  5.18e-04  1.53e-04  4.30e-01  
 11  +4.9341e-01  +6.9067e-01  1.97e-01  5.25e-05  1.17e-02  3.60e-04  1.44e-04  3.17e-01  
 12  +4.8812e-01  +6.6500e-01  1.77e-01  3.88e-05  8.65e-03  2.41e-04  1.07e-04  5.40e-01  
 13  +4.8598e-01  +6.5566e-01  1.70e-01  3.70e-05  8.24e-03  2.06e-04  1.03e-04  1.22e-01  
 14  +4.7504e-01  +6.0722e-01  1.32e-01  2.94e-05  6.53e-03  1.94e-06  8.48e-05  7.75e-01  
 15  +4.6178e-01  +5.5717e-01  9.54e-02  1.87e-05  4.14e-03  1.72e-06  5.58e-05  3.90e-01  
 16  +4.4480e-01  +4.9468e-01  4.99e-02  8.87e-06  1.96e-03  1.92e-06  2.77e-05  7.29e-01  
 17  +4.3140e-01  +4.4739e-01  1.60e-02  2.71e-06  5.99e-04  6.63e-07  8.85e-06  7.42e-01  
 18  +4.2689e-01  +4.3159e-01  4.71e-03  7.82e-07  1.73e-04  3.39e-07  2.61e-06  9.90e-01  
 19  +4.2497e-01  +4.2534e-01  3.75e-04  6.24e-08  1.38e-05  2.67e-08  2.11e-07  9.20e-01  
 20  +4.2480e-01  +4.2481e-01  3.91e-06  6.51e-10  1.44e-07  2.78e-10  2.20e-09  9.90e-01  
 21  +4.2480e-01  +4.2480e-01  3.91e-08  6.51e-12  1.44e-09  2.78e-12  2.20e-11  9.90e-01  
 22  +4.2480e-01  +4.2480e-01  3.92e-10  6.52e-14  1.44e-11  2.78e-14  2.20e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 158.0114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:43 PM: Optimal value: 4.248e-01
(CVXPY) Oct 06 04:04:43 PM: Compilation took 3.851e-02 seconds
(CVXPY) Oct 06 04:04:43 PM: Solver (including time spent in interface) took 1.726e-01 seconds
Iteration: 3, Objective: 0.4248
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:43 PM: Your problem has 5045 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:43 PM: Finished problem compilation (took 5.504e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5045
  constraints   = 10045
  nnz(P)        = 0
  nnz(A)        = 62191
  cones (total) = 1
    : Nonnegative = 1,  numel = 10045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8794e-01  +1.0516e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3783e-01  +1.3026e+02  1.30e+02  1.56e-01  3.36e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0975e-01  +3.3195e+01  3.27e+01  1.20e-01  2.56e+01  3.44e-05  2.46e-01  1.69e-01  
  4  +5.0055e-01  +1.9385e+00  1.44e+00  9.79e-03  2.12e+00  5.35e-06  1.41e-01  8.12e-01  
  5  +5.0014e-01  +1.0186e+00  5.18e-01  3.47e-03  7.60e-01  1.28e-05  7.20e-02  8.65e-01  
  6  +5.0004e-01  +8.2007e-01  3.20e-01  2.06e-03  4.52e-01  1.75e-05  1.93e-02  8.64e-01  
  7  +4.9729e-01  +7.9759e-01  3.00e-01  1.79e-04  4.00e-02  5.19e-04  5.06e-04  9.89e-01  
  8  +4.9509e-01  +7.7381e-01  2.79e-01  1.23e-04  2.75e-02  6.23e-04  3.45e-04  3.44e-01  
  9  +4.9415e-01  +7.4006e-01  2.46e-01  9.92e-05  2.21e-02  3.74e-04  2.76e-04  4.82e-01  
 10  +4.9258e-01  +7.2650e-01  2.34e-01  7.87e-05  1.76e-02  3.63e-04  2.18e-04  3.16e-01  
 11  +4.9345e-01  +7.2204e-01  2.29e-01  6.81e-05  1.52e-02  2.30e-04  1.87e-04  5.00e-01  
 12  +4.9009e-01  +6.9034e-01  2.00e-01  5.18e-05  1.16e-02  5.18e-05  1.43e-04  8.41e-01  
 13  +4.7758e-01  +6.3261e-01  1.55e-01  3.26e-05  7.25e-03  2.36e-05  9.27e-05  7.05e-01  
 14  +4.7284e-01  +6.1286e-01  1.40e-01  2.97e-05  6.59e-03  1.48e-05  8.58e-05  3.77e-01  
 15  +4.5747e-01  +5.5221e-01  9.47e-02  1.84e-05  4.07e-03  7.28e-06  5.55e-05  5.84e-01  
 16  +4.4543e-01  +5.0748e-01  6.21e-02  1.13e-05  2.51e-03  4.45e-06  3.55e-05  4.20e-01  
 17  +4.4496e-01  +5.0540e-01  6.04e-02  1.09e-05  2.42e-03  4.31e-06  3.43e-05  1.69e-01  
 18  +4.3608e-01  +4.7269e-01  3.66e-02  6.28e-06  1.39e-03  2.51e-06  2.02e-05  8.19e-01  
 19  +4.2835e-01  +4.4497e-01  1.66e-02  2.78e-06  6.15e-04  1.23e-06  9.18e-06  9.90e-01  
 20  +4.2290e-01  +4.2661e-01  3.71e-03  6.21e-07  1.37e-04  2.75e-07  2.10e-06  8.82e-01  
 21  +4.2132e-01  +4.2137e-01  4.87e-05  8.16e-09  1.80e-06  3.55e-09  2.78e-08  9.88e-01  
 22  +4.2130e-01  +4.2130e-01  4.87e-07  8.16e-11  1.80e-08  3.55e-11  2.78e-10  9.90e-01  
 23  +4.2130e-01  +4.2130e-01  4.88e-09  8.17e-13  1.81e-10  3.55e-13  2.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 175.7459ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:44 PM: Optimal value: 4.213e-01
(CVXPY) Oct 06 04:04:44 PM: Compilation took 5.504e-02 seconds
(CVXPY) Oct 06 04:04:44 PM: Solver (including time spent in interface) took 1.890e-01 seconds
Iteration: 4, Objective: 0.4213
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:44 PM: Your problem has 5046 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:44 PM: Finished problem compilation (took 4.493e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5046
  constraints   = 10046
  nnz(P)        = 0
  nnz(A)        = 62287
  cones (total) = 1
    : Nonnegative = 1,  numel = 10046

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8791e-01  +1.0516e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3782e-01  +1.3022e+02  1.30e+02  1.56e-01  3.36e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0974e-01  +3.3186e+01  3.27e+01  1.20e-01  2.56e+01  3.45e-05  2.45e-01  1.70e-01  
  4  +5.0053e-01  +1.8742e+00  1.37e+00  9.35e-03  2.03e+00  5.30e-06  1.38e-01  8.35e-01  
  5  +5.0015e-01  +1.0080e+00  5.08e-01  3.40e-03  7.45e-01  1.40e-05  6.62e-02  9.14e-01  
  6  +5.0007e-01  +8.6979e-01  3.70e-01  2.39e-03  5.25e-01  2.02e-05  2.24e-02  7.39e-01  
  7  +4.9843e-01  +7.8946e-01  2.91e-01  2.42e-04  5.40e-02  4.10e-04  6.89e-04  9.90e-01  
  8  +4.9527e-01  +7.6224e-01  2.67e-01  1.06e-04  2.36e-02  7.99e-04  2.96e-04  5.85e-01  
  9  +4.9153e-01  +7.2090e-01  2.29e-01  7.22e-05  1.61e-02  6.08e-04  2.01e-04  5.27e-01  
 10  +4.9161e-01  +7.1776e-01  2.26e-01  7.05e-05  1.57e-02  4.93e-04  1.96e-04  1.84e-01  
 11  +4.8955e-01  +7.0826e-01  2.19e-01  5.78e-05  1.29e-02  4.99e-04  1.61e-04  2.52e-01  
 12  +4.8861e-01  +7.0160e-01  2.13e-01  5.63e-05  1.26e-02  4.16e-04  1.57e-04  1.38e-01  
 13  +4.8339e-01  +6.6780e-01  1.84e-01  4.67e-05  1.04e-02  3.39e-05  1.33e-04  7.98e-01  
 14  +4.6929e-01  +6.0311e-01  1.34e-01  2.86e-05  6.36e-03  1.77e-05  8.41e-05  5.92e-01  
 15  +4.6508e-01  +5.8701e-01  1.22e-01  2.52e-05  5.60e-03  1.49e-05  7.49e-05  1.97e-01  
 16  +4.5784e-01  +5.5912e-01  1.01e-01  2.00e-05  4.43e-03  8.89e-06  6.06e-05  5.20e-01  
 17  +4.4656e-01  +5.1642e-01  6.99e-02  1.30e-05  2.88e-03  5.70e-06  4.09e-05  3.80e-01  
 18  +4.4620e-01  +5.1470e-01  6.85e-02  1.27e-05  2.81e-03  5.43e-06  3.98e-05  1.66e-01  
 19  +4.3553e-01  +4.7510e-01  3.96e-02  6.98e-06  1.54e-03  2.85e-06  2.27e-05  6.23e-01  
 20  +4.2770e-01  +4.4596e-01  1.83e-02  3.11e-06  6.87e-04  1.30e-06  1.03e-05  9.90e-01  
 21  +4.2174e-01  +4.2557e-01  3.83e-03  6.50e-07  1.44e-04  2.75e-07  2.23e-06  9.14e-01  
 22  +4.2013e-01  +4.2020e-01  6.72e-05  1.14e-08  2.52e-06  4.75e-09  3.94e-08  9.84e-01  
 23  +4.2010e-01  +4.2010e-01  6.72e-07  1.14e-10  2.52e-08  4.75e-11  3.94e-10  9.90e-01  
 24  +4.2010e-01  +4.2010e-01  6.72e-09  1.14e-12  2.52e-10  4.75e-13  3.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 174.0084ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:44 PM: Optimal value: 4.201e-01
(CVXPY) Oct 06 04:04:44 PM: Compilation took 4.493e-02 seconds
(CVXPY) Oct 06 04:04:44 PM: Solver (including time spent in interface) took 1.847e-01 seconds
Iteration: 5, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:44 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:44 PM: Finished problem compilation (took 4.842e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 62339
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8792e-01  +1.0516e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3782e-01  +1.3022e+02  1.30e+02  1.56e-01  3.36e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0974e-01  +3.3185e+01  3.27e+01  1.20e-01  2.56e+01  3.45e-05  2.45e-01  1.70e-01  
  4  +5.0053e-01  +1.8728e+00  1.37e+00  9.34e-03  2.03e+00  5.29e-06  1.38e-01  8.36e-01  
  5  +5.0015e-01  +1.0081e+00  5.08e-01  3.40e-03  7.45e-01  1.40e-05  6.61e-02  9.15e-01  
  6  +5.0007e-01  +8.6939e-01  3.69e-01  2.38e-03  5.24e-01  2.04e-05  2.23e-02  7.39e-01  
  7  +4.9845e-01  +7.9343e-01  2.95e-01  2.46e-04  5.49e-02  4.10e-04  7.00e-04  9.90e-01  
  8  +4.9523e-01  +7.6518e-01  2.70e-01  1.06e-04  2.37e-02  8.07e-04  2.97e-04  5.91e-01  
  9  +4.9139e-01  +7.2087e-01  2.29e-01  7.20e-05  1.61e-02  5.89e-04  2.01e-04  5.40e-01  
 10  +4.9148e-01  +7.1804e-01  2.27e-01  7.06e-05  1.57e-02  4.89e-04  1.96e-04  1.64e-01  
 11  +4.8940e-01  +7.0850e-01  2.19e-01  5.78e-05  1.29e-02  4.97e-04  1.60e-04  2.52e-01  
 12  +4.8846e-01  +7.0165e-01  2.13e-01  5.62e-05  1.25e-02  4.11e-04  1.56e-04  1.45e-01  
 13  +4.8306e-01  +6.6630e-01  1.83e-01  4.61e-05  1.03e-02  1.71e-05  1.31e-04  8.32e-01  
 14  +4.6921e-01  +6.0310e-01  1.34e-01  2.86e-05  6.36e-03  1.03e-05  8.42e-05  5.85e-01  
 15  +4.6495e-01  +5.8688e-01  1.22e-01  2.52e-05  5.60e-03  8.94e-06  7.50e-05  2.03e-01  
 16  +4.4970e-01  +5.2781e-01  7.81e-02  1.47e-05  3.26e-03  3.76e-06  4.58e-05  9.90e-01  
 17  +4.4584e-01  +5.1327e-01  6.74e-02  1.24e-05  2.74e-03  3.47e-06  3.89e-05  3.25e-01  
 18  +4.3358e-01  +4.6778e-01  3.42e-02  5.98e-06  1.32e-03  1.93e-06  1.95e-05  7.23e-01  
 19  +4.3058e-01  +4.5592e-01  2.53e-02  4.32e-06  9.56e-04  1.75e-06  1.42e-05  8.49e-01  
 20  +4.2832e-01  +4.4801e-01  1.97e-02  3.34e-06  7.39e-04  1.40e-06  1.11e-05  5.04e-01  
 21  +4.2245e-01  +4.2793e-01  5.48e-03  9.29e-07  2.05e-04  4.01e-07  3.17e-06  9.90e-01  
 22  +4.2017e-01  +4.2032e-01  1.54e-04  2.61e-08  5.76e-06  1.10e-08  9.00e-08  9.76e-01  
 23  +4.2010e-01  +4.2010e-01  1.54e-06  2.61e-10  5.76e-08  1.10e-10  9.01e-10  9.90e-01  
 24  +4.2010e-01  +4.2010e-01  1.54e-08  2.61e-12  5.76e-10  1.10e-12  9.01e-12  9.90e-01  
 25  +4.2010e-01  +4.2010e-01  1.54e-10  2.61e-14  5.77e-12  1.10e-14  9.01e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 183.5822ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:44 PM: Optimal value: 4.201e-01
(CVXPY) Oct 06 04:04:44 PM: Compilation took 4.842e-02 seconds
(CVXPY) Oct 06 04:04:44 PM: Solver (including time spent in interface) took 1.950e-01 seconds
Iteration: 6, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:45 PM: Your problem has 5050 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:45 PM: Finished problem compilation (took 3.948e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5050
  constraints   = 10050
  nnz(P)        = 0
  nnz(A)        = 62766
  cones (total) = 1
    : Nonnegative = 1,  numel = 10050

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8788e-01  +1.0518e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3778e-01  +1.3017e+02  1.30e+02  1.56e-01  3.36e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0973e-01  +3.3169e+01  3.27e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.70e-01  
  4  +5.0051e-01  +1.7998e+00  1.30e+00  8.85e-03  1.92e+00  5.24e-06  1.34e-01  8.64e-01  
  5  +5.0025e-01  +1.1912e+00  6.91e-01  4.65e-03  1.02e+00  1.27e-05  7.96e-02  6.89e-01  
  6  +5.0009e-01  +8.1004e-01  3.10e-01  2.03e-03  4.45e-01  1.61e-05  2.05e-02  8.15e-01  
  7  +4.9938e-01  +8.7534e-01  3.76e-01  3.76e-04  8.40e-02  3.08e-04  1.06e-03  9.90e-01  
  8  +4.9730e-01  +8.3668e-01  3.39e-01  1.32e-04  2.96e-02  7.33e-04  3.64e-04  6.92e-01  
  9  +4.9552e-01  +8.0823e-01  3.13e-01  1.02e-04  2.28e-02  7.11e-04  2.81e-04  3.13e-01  
 10  +4.9516e-01  +7.9308e-01  2.98e-01  1.01e-04  2.25e-02  5.78e-04  2.77e-04  1.09e-01  
 11  +4.9227e-01  +7.6511e-01  2.73e-01  7.23e-05  1.61e-02  5.65e-04  1.99e-04  3.97e-01  
 12  +4.9070e-01  +7.4499e-01  2.54e-01  6.97e-05  1.56e-02  4.07e-04  1.94e-04  1.78e-01  
 13  +4.9016e-01  +7.2979e-01  2.40e-01  6.69e-05  1.49e-02  2.41e-04  1.86e-04  3.24e-01  
 14  +4.8126e-01  +6.7455e-01  1.93e-01  4.49e-05  1.00e-02  1.32e-04  1.27e-04  5.77e-01  
 15  +4.7396e-01  +6.3200e-01  1.58e-01  3.90e-05  8.66e-03  1.19e-06  1.16e-04  7.48e-01  
 16  +4.6412e-01  +5.8878e-01  1.25e-01  2.80e-05  6.20e-03  1.57e-06  8.50e-05  3.49e-01  
 17  +4.5748e-01  +5.6413e-01  1.07e-01  2.19e-05  4.86e-03  4.07e-06  6.72e-05  6.62e-01  
 18  +4.4308e-01  +5.0793e-01  6.49e-02  1.24e-05  2.73e-03  2.42e-06  3.96e-05  4.46e-01  
 19  +4.4220e-01  +5.0393e-01  6.17e-02  1.16e-05  2.56e-03  2.72e-06  3.71e-05  2.89e-01  
 20  +4.3324e-01  +4.7019e-01  3.69e-02  6.66e-06  1.47e-03  1.80e-06  2.20e-05  5.57e-01  
 21  +4.3273e-01  +4.6812e-01  3.54e-02  6.32e-06  1.40e-03  1.81e-06  2.09e-05  1.57e-01  
 22  +4.3117e-01  +4.6211e-01  3.09e-02  5.49e-06  1.21e-03  1.71e-06  1.82e-05  3.23e-01  
 23  +4.2857e-01  +4.5183e-01  2.33e-02  4.04e-06  8.93e-04  1.57e-06  1.35e-05  8.47e-01  
 24  +4.2310e-01  +4.3277e-01  9.67e-03  1.67e-06  3.68e-04  6.67e-07  5.71e-06  6.70e-01  
 25  +4.2251e-01  +4.3068e-01  8.17e-03  1.42e-06  3.14e-04  5.46e-07  4.93e-06  4.67e-01  
 26  +4.2203e-01  +4.2899e-01  6.96e-03  1.21e-06  2.67e-04  4.66e-07  4.21e-06  2.18e-01  
 27  +4.2081e-01  +4.2469e-01  3.88e-03  6.75e-07  1.49e-04  2.63e-07  2.35e-06  7.10e-01  
 28  +4.2063e-01  +4.2422e-01  3.59e-03  6.16e-07  1.36e-04  2.46e-07  2.14e-06  2.33e-01  
 29  +4.1913e-01  +4.1918e-01  5.91e-05  1.02e-08  2.25e-06  3.99e-09  3.56e-08  9.85e-01  
 30  +4.1910e-01  +4.1910e-01  5.91e-07  1.02e-10  2.25e-08  3.99e-11  3.56e-10  9.90e-01  
 31  +4.1910e-01  +4.1910e-01  5.92e-09  1.02e-12  2.25e-10  3.99e-13  3.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 233.7391ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:45 PM: Optimal value: 4.191e-01
(CVXPY) Oct 06 04:04:45 PM: Compilation took 3.948e-02 seconds
(CVXPY) Oct 06 04:04:45 PM: Solver (including time spent in interface) took 2.454e-01 seconds
Iteration: 7, Objective: 0.4191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:45 PM: Your problem has 5051 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:45 PM: Finished problem compilation (took 4.467e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5051
  constraints   = 10051
  nnz(P)        = 0
  nnz(A)        = 62859
  cones (total) = 1
    : Nonnegative = 1,  numel = 10051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8788e-01  +1.0518e+03  1.05e+03  4.05e-01  6.85e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3778e-01  +1.3017e+02  1.30e+02  1.56e-01  3.36e+01  1.32e-02  2.54e-01  8.69e-01  
  3  +5.0973e-01  +3.3169e+01  3.27e+01  1.20e-01  2.55e+01  3.45e-05  2.45e-01  1.70e-01  
  4  +5.0051e-01  +1.7991e+00  1.30e+00  8.85e-03  1.92e+00  5.24e-06  1.34e-01  8.64e-01  
  5  +5.0025e-01  +1.1906e+00  6.90e-01  4.65e-03  1.02e+00  1.26e-05  7.96e-02  6.89e-01  
  6  +5.0009e-01  +8.1028e-01  3.10e-01  2.03e-03  4.46e-01  1.61e-05  2.05e-02  8.15e-01  
  7  +4.9936e-01  +8.7578e-01  3.76e-01  3.65e-04  8.17e-02  3.18e-04  1.03e-03  9.90e-01  
  8  +4.9727e-01  +8.3610e-01  3.39e-01  1.32e-04  2.95e-02  7.29e-04  3.63e-04  6.85e-01  
  9  +4.9551e-01  +8.0839e-01  3.13e-01  1.02e-04  2.28e-02  7.12e-04  2.80e-04  3.10e-01  
 10  +4.9514e-01  +7.9338e-01  2.98e-01  1.01e-04  2.25e-02  5.81e-04  2.77e-04  1.06e-01  
 11  +4.9227e-01  +7.6529e-01  2.73e-01  7.23e-05  1.61e-02  5.66e-04  1.99e-04  3.97e-01  
 12  +4.9078e-01  +7.4624e-01  2.55e-01  6.99e-05  1.56e-02  4.16e-04  1.94e-04  1.67e-01  
 13  +4.8969e-01  +7.1382e-01  2.24e-01  6.41e-05  1.43e-02  5.98e-05  1.79e-04  6.89e-01  
 14  +4.8196e-01  +6.7609e-01  1.94e-01  4.56e-05  1.02e-02  5.53e-05  1.29e-04  3.33e-01  
 15  +4.7271e-01  +6.2561e-01  1.53e-01  3.70e-05  8.22e-03  5.15e-07  1.09e-04  8.52e-01  
 16  +4.6591e-01  +5.9772e-01  1.32e-01  2.96e-05  6.56e-03  1.04e-06  8.87e-05  2.58e-01  
 17  +4.5247e-01  +5.4426e-01  9.18e-02  1.82e-05  4.03e-03  3.67e-06  5.65e-05  7.70e-01  
 18  +4.4366e-01  +5.1021e-01  6.65e-02  1.27e-05  2.80e-03  2.69e-06  4.05e-05  3.39e-01  
 19  +4.4186e-01  +5.0234e-01  6.05e-02  1.12e-05  2.48e-03  3.03e-06  3.59e-05  4.49e-01  
 20  +4.3387e-01  +4.7253e-01  3.87e-02  6.96e-06  1.54e-03  1.99e-06  2.29e-05  4.55e-01  
 21  +4.3306e-01  +4.6930e-01  3.62e-02  6.47e-06  1.43e-03  1.96e-06  2.14e-05  1.91e-01  
 22  +4.2907e-01  +4.5426e-01  2.52e-02  4.43e-06  9.78e-04  1.54e-06  1.48e-05  6.21e-01  
 23  +4.2631e-01  +4.4434e-01  1.80e-02  3.15e-06  6.96e-04  1.12e-06  1.06e-05  3.80e-01  
 24  +4.2558e-01  +4.4124e-01  1.57e-02  2.70e-06  5.95e-04  1.06e-06  9.10e-06  6.61e-01  
 25  +4.2320e-01  +4.3298e-01  9.77e-03  1.69e-06  3.74e-04  6.73e-07  5.83e-06  9.90e-01  
 26  +4.2051e-01  +4.2372e-01  3.21e-03  5.57e-07  1.23e-04  2.22e-07  1.94e-06  7.65e-01  
 27  +4.2006e-01  +4.2230e-01  2.24e-03  3.86e-07  8.52e-05  1.56e-07  1.34e-06  4.69e-01  
 28  +4.1912e-01  +4.1916e-01  3.90e-05  6.72e-09  1.48e-06  2.70e-09  2.35e-08  9.83e-01  
 29  +4.1910e-01  +4.1910e-01  3.90e-07  6.72e-11  1.48e-08  2.70e-11  2.35e-10  9.90e-01  
 30  +4.1910e-01  +4.1910e-01  3.91e-09  6.73e-13  1.49e-10  2.70e-13  2.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 216.5412ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:45 PM: Optimal value: 4.191e-01
(CVXPY) Oct 06 04:04:45 PM: Compilation took 4.467e-02 seconds
(CVXPY) Oct 06 04:04:45 PM: Solver (including time spent in interface) took 2.269e-01 seconds
FULL MODEL:
  Accruacy: 0.5787
  Our objective: 0.15740000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0)                                  <-- (term's our objective: 0.0736)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1)                                  <-- (term's our objective: 0.0688)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0022)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.0026)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0)            <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.0026)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.759803056716919
Best over terms:
  Our final objective: 0.07359999999999996
    Its accruacy: 0.5368
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.07359999999999996
  Highest accruacy: 0.5368
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

