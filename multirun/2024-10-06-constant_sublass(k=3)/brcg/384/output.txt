Command:
python test_script.py -s constant_subclass -d 10 -n 1000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.122
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 10.

Computed total variation: 0.724
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:31 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:31 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 6521
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9999e-01  +5.0081e+02  5.00e+02  9.56e-01  3.74e+01  1.00e+00  1.00e+00   ------   
  1  +5.7796e-01  +1.1023e+02  1.10e+02  4.26e-01  2.44e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2795e-01  +1.2222e+01  1.17e+01  1.49e-01  1.09e+01  1.80e-02  2.84e-01  9.74e-01  
  3  +5.0601e-01  +3.1196e+00  2.61e+00  5.55e-02  3.97e+00  4.83e-05  2.37e-01  5.35e-01  
  4  +5.0067e-01  +7.6453e-01  2.64e-01  5.97e-03  4.49e-01  1.10e-05  7.04e-02  8.35e-01  
  5  +5.0020e-01  +6.7155e-01  1.71e-01  3.69e-03  2.79e-01  1.36e-05  2.44e-02  7.28e-01  
  6  +4.9656e-01  +6.2675e-01  1.30e-01  6.41e-04  4.94e-02  9.54e-05  2.03e-03  9.28e-01  
  7  +4.9132e-01  +5.9017e-01  9.88e-02  3.57e-04  2.74e-02  8.84e-05  1.14e-03  4.90e-01  
  8  +4.8647e-01  +5.6508e-01  7.86e-02  2.40e-04  1.84e-02  6.44e-05  8.01e-04  4.21e-01  
  9  +4.7612e-01  +5.1541e-01  3.93e-02  9.16e-05  7.02e-03  1.98e-05  3.42e-04  8.24e-01  
 10  +4.6660e-01  +4.7401e-01  7.41e-03  1.52e-05  1.17e-03  2.25e-06  6.24e-05  9.90e-01  
 11  +4.6417e-01  +4.6438e-01  2.12e-04  4.22e-07  3.23e-05  5.92e-08  1.78e-06  9.74e-01  
 12  +4.6410e-01  +4.6410e-01  2.12e-06  4.22e-09  3.23e-07  5.93e-10  1.78e-08  9.90e-01  
 13  +4.6410e-01  +4.6410e-01  2.12e-08  4.22e-11  3.23e-09  5.94e-12  1.79e-10  9.90e-01  
 14  +4.6410e-01  +4.6410e-01  2.12e-10  4.22e-13  3.23e-11  5.95e-14  1.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.508ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:31 PM: Optimal value: 4.641e-01
(CVXPY) Oct 06 04:25:31 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:25:31 PM: Solver (including time spent in interface) took 1.555e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:31 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 7412
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9982e-01  +5.0144e+02  5.01e+02  9.56e-01  3.84e+01  1.00e+00  1.01e+00   ------   
  1  +5.7684e-01  +1.1039e+02  1.10e+02  4.28e-01  2.49e+01  3.75e-03  5.88e-01  5.76e-01  
  2  +5.2654e-01  +1.2002e+01  1.15e+01  1.47e-01  1.09e+01  1.83e-02  2.79e-01  9.90e-01  
  3  +5.0567e-01  +3.0088e+00  2.50e+00  5.40e-02  3.98e+00  5.16e-05  2.17e-01  6.30e-01  
  4  +5.0137e-01  +1.1725e+00  6.71e-01  1.53e-02  1.17e+00  2.07e-05  1.08e-01  5.67e-01  
  5  +4.9950e-01  +8.2698e-01  3.27e-01  6.18e-03  4.81e-01  2.86e-05  2.56e-02  8.37e-01  
  6  +4.8881e-01  +7.5799e-01  2.69e-01  1.16e-03  9.20e-02  1.46e-04  3.43e-03  8.82e-01  
  7  +4.8237e-01  +7.1854e-01  2.36e-01  8.43e-04  6.68e-02  1.32e-04  2.61e-03  3.10e-01  
  8  +4.7839e-01  +6.9669e-01  2.18e-01  6.84e-04  5.40e-02  9.29e-05  2.20e-03  5.83e-01  
  9  +4.6801e-01  +6.2789e-01  1.60e-01  4.47e-04  3.52e-02  6.08e-05  1.51e-03  5.31e-01  
 10  +4.5539e-01  +5.4383e-01  8.84e-02  2.34e-04  1.84e-02  2.92e-05  8.38e-04  9.90e-01  
 11  +4.4242e-01  +4.7042e-01  2.80e-02  6.88e-05  5.37e-03  8.35e-06  2.62e-04  7.33e-01  
 12  +4.3868e-01  +4.4956e-01  1.09e-02  2.63e-05  2.05e-03  3.33e-06  1.04e-04  6.59e-01  
 13  +4.3707e-01  +4.4056e-01  3.49e-03  8.33e-06  6.50e-04  1.47e-06  3.43e-05  9.90e-01  
 14  +4.3628e-01  +4.3661e-01  3.34e-04  7.87e-07  6.14e-05  1.66e-07  3.25e-06  9.38e-01  
 15  +4.3628e-01  +4.3670e-01  4.11e-04  6.96e-07  5.45e-05  2.82e-07  2.46e-06  3.32e-01  
 16  +4.3620e-01  +4.3642e-01  2.25e-04  5.45e-07  4.25e-05  2.38e-08  2.43e-06  1.44e-01  
 17  +4.3615e-01  +4.3624e-01  9.14e-05  1.78e-07  1.39e-05  2.76e-08  6.42e-07  8.41e-01  
 18  +4.3610e-01  +4.3611e-01  5.16e-06  8.69e-09  6.80e-07  2.39e-09  3.08e-08  9.56e-01  
 19  +4.3610e-01  +4.3610e-01  5.18e-08  8.70e-11  6.81e-09  2.39e-11  3.09e-10  9.90e-01  
 20  +4.3610e-01  +4.3610e-01  5.19e-10  8.73e-13  6.83e-11  2.82e-13  3.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.3019ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:32 PM: Optimal value: 4.361e-01
(CVXPY) Oct 06 04:25:32 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:32 PM: Solver (including time spent in interface) took 3.122e-02 seconds
Iteration: 2, Objective: 0.4361
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:32 PM: Your problem has 541 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 1041
  nnz(P)        = 0
  nnz(A)        = 8301
  cones (total) = 1
    : Nonnegative = 1,  numel = 1041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0144e+02  5.01e+02  9.57e-01  3.93e+01  1.00e+00  1.01e+00   ------   
  1  +5.7543e-01  +1.1058e+02  1.10e+02  4.31e-01  2.54e+01  3.75e-03  5.90e-01  5.75e-01  
  2  +5.2539e-01  +1.2123e+01  1.16e+01  1.48e-01  1.11e+01  1.86e-02  2.82e-01  9.90e-01  
  3  +5.0611e-01  +2.6866e+00  2.18e+00  5.02e-02  3.86e+00  5.75e-05  1.72e-01  7.82e-01  
  4  +5.0126e-01  +1.2304e+00  7.29e-01  1.73e-02  1.35e+00  3.74e-05  8.75e-02  5.70e-01  
  5  +4.9608e-01  +1.0542e+00  5.58e-01  5.13e-03  4.18e-01  1.17e-04  1.52e-02  8.94e-01  
  6  +4.8297e-01  +8.4171e-01  3.59e-01  1.65e-03  1.35e-01  1.54e-04  4.94e-03  6.99e-01  
  7  +4.7552e-01  +7.7744e-01  3.02e-01  1.10e-03  8.97e-02  1.34e-04  3.28e-03  5.15e-01  
  8  +4.6857e-01  +7.1655e-01  2.48e-01  6.85e-04  5.55e-02  9.73e-05  2.04e-03  9.27e-01  
  9  +4.6205e-01  +6.7596e-01  2.14e-01  5.11e-04  4.14e-02  9.10e-05  1.55e-03  3.43e-01  
 10  +4.5004e-01  +5.8528e-01  1.35e-01  3.35e-04  2.70e-02  5.45e-05  1.06e-03  9.90e-01  
 11  +4.2881e-01  +4.8619e-01  5.74e-02  1.20e-04  9.70e-03  2.34e-05  4.01e-04  7.70e-01  
 12  +4.1733e-01  +4.3547e-01  1.81e-02  3.58e-05  2.89e-03  7.61e-06  1.24e-04  7.28e-01  
 13  +4.1302e-01  +4.1803e-01  5.00e-03  9.65e-06  7.79e-04  2.22e-06  3.41e-05  7.74e-01  
 14  +4.1159e-01  +4.1215e-01  5.61e-04  1.08e-06  8.70e-05  3.26e-07  3.85e-06  9.90e-01  
 15  +4.1138e-01  +4.1139e-01  1.00e-05  1.93e-08  1.56e-06  5.75e-09  6.90e-08  9.82e-01  
 16  +4.1138e-01  +4.1138e-01  1.01e-07  1.94e-10  1.57e-08  5.78e-11  6.93e-10  9.90e-01  
 17  +4.1138e-01  +4.1138e-01  1.01e-09  1.95e-12  1.57e-10  5.78e-13  6.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.2027ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:32 PM: Optimal value: 4.114e-01
(CVXPY) Oct 06 04:25:32 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:32 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 3, Objective: 0.4114
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:32 PM: Your problem has 551 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 1051
  nnz(P)        = 0
  nnz(A)        = 8555
  cones (total) = 1
    : Nonnegative = 1,  numel = 1051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9964e-01  +5.0141e+02  5.01e+02  9.57e-01  3.92e+01  1.00e+00  1.01e+00   ------   
  1  +5.7466e-01  +1.1059e+02  1.10e+02  4.32e-01  2.53e+01  3.75e-03  5.90e-01  5.75e-01  
  2  +5.2477e-01  +1.2199e+01  1.17e+01  1.48e-01  1.10e+01  1.88e-02  2.81e-01  9.90e-01  
  3  +5.0635e-01  +2.4718e+00  1.97e+00  4.58e-02  3.56e+00  6.09e-05  1.46e-01  8.43e-01  
  4  +5.0038e-01  +1.0574e+00  5.57e-01  1.26e-02  9.96e-01  5.89e-05  5.40e-02  7.49e-01  
  5  +4.9196e-01  +1.0297e+00  5.38e-01  3.50e-03  2.87e-01  2.44e-04  9.96e-03  8.53e-01  
  6  +4.7880e-01  +8.3614e-01  3.57e-01  1.57e-03  1.28e-01  2.06e-04  4.58e-03  6.04e-01  
  7  +4.7239e-01  +8.0660e-01  3.34e-01  1.05e-03  8.50e-02  1.97e-04  3.01e-03  6.23e-01  
  8  +4.6404e-01  +7.5335e-01  2.89e-01  7.39e-04  6.01e-02  1.77e-04  2.16e-03  4.36e-01  
  9  +4.4067e-01  +5.9125e-01  1.51e-01  3.67e-04  2.96e-02  3.87e-05  1.16e-03  9.90e-01  
 10  +4.2200e-01  +5.0865e-01  8.66e-02  1.86e-04  1.49e-02  2.84e-05  6.20e-04  6.39e-01  
 11  +4.0645e-01  +4.4114e-01  3.47e-02  6.93e-05  5.55e-03  1.84e-05  2.46e-04  9.90e-01  
 12  +3.9697e-01  +4.0386e-01  6.89e-03  1.34e-05  1.07e-03  3.60e-06  5.03e-05  8.69e-01  
 13  +3.9457e-01  +3.9489e-01  3.20e-04  6.15e-07  4.93e-05  1.62e-07  2.37e-06  9.61e-01  
 14  +3.9445e-01  +3.9446e-01  6.93e-06  1.33e-08  1.07e-06  3.52e-09  5.17e-08  9.79e-01  
 15  +3.9445e-01  +3.9445e-01  6.93e-08  1.33e-10  1.07e-08  3.52e-11  5.17e-10  9.90e-01  
 16  +3.9445e-01  +3.9445e-01  6.94e-10  1.33e-12  1.07e-10  3.52e-13  5.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.6485ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:32 PM: Optimal value: 3.945e-01
(CVXPY) Oct 06 04:25:32 PM: Compilation took 1.555e-02 seconds
(CVXPY) Oct 06 04:25:32 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 4, Objective: 0.3945
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:32 PM: Your problem has 561 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 1061
  nnz(P)        = 0
  nnz(A)        = 8847
  cones (total) = 1
    : Nonnegative = 1,  numel = 1061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0168e+02  5.01e+02  9.57e-01  3.91e+01  1.00e+00  1.01e+00   ------   
  1  +5.7315e-01  +1.1058e+02  1.10e+02  4.33e-01  2.51e+01  3.76e-03  5.90e-01  5.75e-01  
  2  +5.2374e-01  +1.2382e+01  1.19e+01  1.48e-01  1.09e+01  1.90e-02  2.79e-01  9.90e-01  
  3  +5.0720e-01  +2.5014e+00  1.99e+00  4.39e-02  3.48e+00  7.64e-04  1.23e-01  8.19e-01  
  4  +5.0453e-01  +2.1429e+00  1.64e+00  2.43e-02  1.97e+00  1.82e-03  6.30e-02  6.44e-01  
  5  +5.0043e-01  +1.8026e+00  1.30e+00  1.24e-02  1.02e+00  9.11e-04  3.25e-02  9.11e-01  
  6  +4.8830e-01  +1.4600e+00  9.72e-01  3.47e-03  2.90e-01  1.86e-03  8.72e-03  7.34e-01  
  7  +4.7351e-01  +1.1699e+00  6.96e-01  2.20e-03  1.82e-01  1.01e-03  5.79e-03  5.16e-01  
  8  +4.6121e-01  +9.9279e-01  5.32e-01  1.49e-03  1.22e-01  5.54e-04  4.06e-03  5.28e-01  
  9  +4.3973e-01  +7.2838e-01  2.89e-01  8.52e-04  6.87e-02  4.77e-06  2.56e-03  9.66e-01  
 10  +4.0646e-01  +5.3063e-01  1.24e-01  2.98e-04  2.38e-02  9.35e-06  9.95e-04  6.64e-01  
 11  +3.9194e-01  +4.6272e-01  7.08e-02  1.58e-04  1.26e-02  1.46e-05  5.64e-04  6.08e-01  
 12  +3.7921e-01  +4.0414e-01  2.49e-02  5.34e-05  4.25e-03  5.82e-06  2.06e-04  6.80e-01  
 13  +3.7367e-01  +3.7931e-01  5.64e-03  1.18e-05  9.39e-04  2.42e-06  4.78e-05  9.38e-01  
 14  +3.7199e-01  +3.7280e-01  8.12e-04  1.67e-06  1.33e-04  3.54e-07  6.99e-06  8.99e-01  
 15  +3.7171e-01  +3.7172e-01  1.68e-05  3.44e-08  2.74e-06  7.08e-09  1.45e-07  9.81e-01  
 16  +3.7170e-01  +3.7170e-01  1.68e-07  3.44e-10  2.74e-08  7.08e-11  1.45e-09  9.90e-01  
 17  +3.7170e-01  +3.7170e-01  1.68e-09  3.44e-12  2.74e-10  7.08e-13  1.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.9147ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:32 PM: Optimal value: 3.717e-01
(CVXPY) Oct 06 04:25:32 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:32 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 5, Objective: 0.3717
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:32 PM: Your problem has 571 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Finished problem compilation (took 1.556e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 571
  constraints   = 1071
  nnz(P)        = 0
  nnz(A)        = 9207
  cones (total) = 1
    : Nonnegative = 1,  numel = 1071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0173e+02  5.01e+02  9.57e-01  3.91e+01  1.00e+00  1.01e+00   ------   
  1  +5.7256e-01  +1.1058e+02  1.10e+02  4.34e-01  2.50e+01  3.76e-03  5.90e-01  5.75e-01  
  2  +5.2332e-01  +1.2456e+01  1.19e+01  1.48e-01  1.08e+01  1.91e-02  2.79e-01  9.90e-01  
  3  +5.0856e-01  +3.2211e+00  2.71e+00  5.55e-02  4.36e+00  2.26e-03  1.43e-01  6.78e-01  
  4  +4.9984e-01  +1.4687e+00  9.69e-01  1.75e-02  1.41e+00  3.61e-03  5.23e-02  9.90e-01  
  5  +4.9576e-01  +1.4316e+00  9.36e-01  9.00e-03  7.42e-01  6.26e-03  2.40e-02  5.70e-01  
  6  +4.8238e-01  +1.3191e+00  8.37e-01  3.31e-03  2.77e-01  1.06e-02  8.49e-03  7.95e-01  
  7  +4.7217e-01  +1.1410e+00  6.69e-01  2.30e-03  1.90e-01  6.89e-03  6.05e-03  4.28e-01  
  8  +4.5938e-01  +1.0068e+00  5.47e-01  1.58e-03  1.30e-01  5.21e-03  4.28e-03  3.90e-01  
  9  +4.4411e-01  +8.6076e-01  4.17e-01  1.11e-03  9.03e-02  2.82e-03  3.12e-03  4.33e-01  
 10  +4.0827e-01  +5.7808e-01  1.70e-01  4.13e-04  3.33e-02  3.67e-04  1.30e-03  7.54e-01  
 11  +3.9582e-01  +5.1374e-01  1.18e-01  2.67e-04  2.15e-02  2.07e-04  8.69e-04  5.13e-01  
 12  +3.7719e-01  +4.1845e-01  4.13e-02  9.05e-05  7.28e-03  2.42e-05  3.16e-04  9.56e-01  
 13  +3.7128e-01  +3.9268e-01  2.14e-02  4.61e-05  3.72e-03  1.25e-05  1.65e-04  5.32e-01  
 14  +3.6615e-01  +3.6999e-01  3.84e-03  8.17e-06  6.59e-04  2.04e-06  3.02e-05  9.90e-01  
 15  +3.6494e-01  +3.6518e-01  2.47e-04  5.26e-07  4.24e-05  1.28e-07  1.96e-06  9.39e-01  
 16  +3.6485e-01  +3.6486e-01  5.16e-06  1.10e-08  8.84e-07  2.66e-09  4.11e-08  9.80e-01  
 17  +3.6485e-01  +3.6485e-01  5.17e-08  1.10e-10  8.84e-09  2.66e-11  4.11e-10  9.90e-01  
 18  +3.6485e-01  +3.6485e-01  5.19e-10  1.10e-12  8.88e-11  2.68e-13  4.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.9386ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:32 PM: Optimal value: 3.649e-01
(CVXPY) Oct 06 04:25:32 PM: Compilation took 1.556e-02 seconds
(CVXPY) Oct 06 04:25:32 PM: Solver (including time spent in interface) took 3.131e-02 seconds
Iteration: 6, Objective: 0.3649
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:32 PM: Your problem has 581 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:32 PM: Finished problem compilation (took 1.557e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 581
  constraints   = 1081
  nnz(P)        = 0
  nnz(A)        = 9389
  cones (total) = 1
    : Nonnegative = 1,  numel = 1081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0171e+02  5.01e+02  9.58e-01  3.90e+01  1.00e+00  1.01e+00   ------   
  1  +5.7188e-01  +1.1055e+02  1.10e+02  4.35e-01  2.48e+01  3.76e-03  5.90e-01  5.76e-01  
  2  +5.2288e-01  +1.2504e+01  1.20e+01  1.48e-01  1.07e+01  1.92e-02  2.78e-01  9.90e-01  
  3  +5.0930e-01  +3.6295e+00  3.12e+00  6.06e-02  4.73e+00  3.15e-03  1.49e-01  6.15e-01  
  4  +4.9978e-01  +1.5257e+00  1.03e+00  1.95e-02  1.56e+00  3.80e-03  6.02e-02  9.90e-01  
  5  +4.9478e-01  +1.4667e+00  9.72e-01  9.29e-03  7.64e-01  7.16e-03  2.49e-02  6.00e-01  
  6  +4.7946e-01  +1.3540e+00  8.75e-01  3.40e-03  2.83e-01  1.26e-02  8.72e-03  7.81e-01  
  7  +4.6687e-01  +1.1629e+00  6.96e-01  2.23e-03  1.84e-01  8.93e-03  5.89e-03  4.48e-01  
  8  +4.5713e-01  +1.0396e+00  5.83e-01  1.65e-03  1.36e-01  5.25e-03  4.46e-03  4.61e-01  
  9  +4.3374e-01  +7.8153e-01  3.48e-01  9.61e-04  7.80e-02  5.06e-05  2.79e-03  7.94e-01  
 10  +3.9084e-01  +5.1330e-01  1.22e-01  2.91e-04  2.33e-02  2.61e-05  9.42e-04  7.59e-01  
 11  +3.8560e-01  +4.9115e-01  1.06e-01  2.43e-04  1.95e-02  3.01e-05  7.99e-04  3.40e-01  
 12  +3.6680e-01  +4.0297e-01  3.62e-02  8.00e-05  6.42e-03  1.45e-05  2.84e-04  8.20e-01  
 13  +3.6132e-01  +3.7902e-01  1.77e-02  3.85e-05  3.10e-03  7.31e-06  1.42e-04  5.50e-01  
 14  +3.5720e-01  +3.6094e-01  3.73e-03  8.04e-06  6.46e-04  1.72e-06  3.04e-05  8.91e-01  
 15  +3.5623e-01  +3.5698e-01  7.51e-04  1.59e-06  1.28e-04  3.50e-07  6.16e-06  8.25e-01  
 16  +3.5596e-01  +3.5601e-01  4.18e-05  8.65e-08  6.97e-06  2.02e-08  3.43e-07  9.77e-01  
 17  +3.5595e-01  +3.5595e-01  4.19e-07  8.67e-10  6.98e-08  2.03e-10  3.44e-09  9.90e-01  
 18  +3.5595e-01  +3.5595e-01  4.19e-09  8.67e-12  6.99e-10  2.04e-12  3.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.2033ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:32 PM: Optimal value: 3.560e-01
(CVXPY) Oct 06 04:25:32 PM: Compilation took 1.557e-02 seconds
(CVXPY) Oct 06 04:25:32 PM: Solver (including time spent in interface) took 1.570e-02 seconds
Iteration: 7, Objective: 0.3560
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:33 PM: Your problem has 591 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:33 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 591
  constraints   = 1091
  nnz(P)        = 0
  nnz(A)        = 9538
  cones (total) = 1
    : Nonnegative = 1,  numel = 1091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0171e+02  5.01e+02  9.58e-01  3.88e+01  1.00e+00  1.01e+00   ------   
  1  +5.7060e-01  +1.1049e+02  1.10e+02  4.35e-01  2.46e+01  3.76e-03  5.89e-01  5.76e-01  
  2  +5.2203e-01  +1.2617e+01  1.21e+01  1.47e-01  1.06e+01  1.93e-02  2.76e-01  9.90e-01  
  3  +5.0986e-01  +3.9996e+00  3.49e+00  6.32e-02  4.92e+00  4.05e-03  1.49e-01  5.67e-01  
  4  +4.9990e-01  +1.7030e+00  1.20e+00  2.15e-02  1.72e+00  4.14e-03  6.24e-02  9.84e-01  
  5  +4.9393e-01  +1.6105e+00  1.12e+00  9.71e-03  8.00e-01  7.67e-03  2.52e-02  6.12e-01  
  6  +4.7566e-01  +1.4400e+00  9.64e-01  3.49e-03  2.91e-01  1.35e-02  8.78e-03  7.42e-01  
  7  +4.6008e-01  +1.2493e+00  7.89e-01  2.25e-03  1.86e-01  1.03e-02  5.84e-03  4.62e-01  
  8  +4.4272e-01  +1.0140e+00  5.71e-01  1.53e-03  1.25e-01  4.23e-03  4.15e-03  5.05e-01  
  9  +3.9842e-01  +6.2465e-01  2.26e-01  5.55e-04  4.45e-02  3.59e-04  1.69e-03  7.69e-01  
 10  +3.7100e-01  +4.7891e-01  1.08e-01  2.53e-04  2.02e-02  1.09e-04  8.49e-04  7.02e-01  
 11  +3.6109e-01  +4.2848e-01  6.74e-02  1.55e-04  1.24e-02  6.34e-05  5.44e-04  4.41e-01  
 12  +3.5265e-01  +3.8624e-01  3.36e-02  7.43e-05  5.92e-03  2.30e-05  2.72e-04  8.52e-01  
 13  +3.4624e-01  +3.5795e-01  1.17e-02  2.54e-05  2.03e-03  7.53e-06  9.68e-05  7.43e-01  
 14  +3.4341e-01  +3.4641e-01  3.00e-03  6.19e-06  5.02e-04  1.69e-06  2.47e-05  9.33e-01  
 15  +3.4236e-01  +3.4252e-01  1.61e-04  3.28e-07  2.67e-05  8.88e-08  1.33e-06  9.49e-01  
 16  +3.4230e-01  +3.4230e-01  1.62e-06  3.29e-09  2.68e-07  8.90e-10  1.34e-08  9.90e-01  
 17  +3.4230e-01  +3.4230e-01  1.62e-08  3.30e-11  2.68e-09  8.90e-12  1.34e-10  9.90e-01  
 18  +3.4230e-01  +3.4230e-01  1.62e-10  3.30e-13  2.69e-11  8.93e-14  1.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.1271ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:33 PM: Optimal value: 3.423e-01
(CVXPY) Oct 06 04:25:33 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:33 PM: Solver (including time spent in interface) took 3.118e-02 seconds
Iteration: 8, Objective: 0.3423
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:33 PM: Your problem has 601 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:33 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 601
  constraints   = 1101
  nnz(P)        = 0
  nnz(A)        = 9744
  cones (total) = 1
    : Nonnegative = 1,  numel = 1101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +5.0172e+02  5.01e+02  9.58e-01  3.87e+01  1.00e+00  1.01e+00   ------   
  1  +5.6856e-01  +1.1048e+02  1.10e+02  4.35e-01  2.44e+01  3.77e-03  5.88e-01  5.77e-01  
  2  +5.2079e-01  +1.2758e+01  1.22e+01  1.46e-01  1.05e+01  1.95e-02  2.74e-01  9.90e-01  
  3  +5.0953e-01  +4.0137e+00  3.50e+00  5.93e-02  4.63e+00  4.43e-03  1.38e-01  5.71e-01  
  4  +4.9916e-01  +1.7994e+00  1.30e+00  1.66e-02  1.36e+00  5.00e-03  4.30e-02  9.80e-01  
  5  +4.8825e-01  +1.9566e+00  1.47e+00  7.23e-03  6.04e-01  8.49e-03  1.75e-02  8.49e-01  
  6  +4.6587e-01  +1.3607e+00  8.95e-01  2.96e-03  2.46e-01  5.63e-03  7.41e-03  6.88e-01  
  7  +4.5212e-01  +1.2067e+00  7.55e-01  2.18e-03  1.80e-01  3.92e-03  5.61e-03  3.94e-01  
  8  +4.3552e-01  +1.0614e+00  6.26e-01  1.63e-03  1.33e-01  2.94e-03  4.33e-03  3.08e-01  
  9  +4.0812e-01  +7.9380e-01  3.86e-01  1.04e-03  8.40e-02  2.58e-05  3.05e-03  8.05e-01  
 10  +3.6001e-01  +4.8519e-01  1.25e-01  2.97e-04  2.36e-02  1.34e-05  9.89e-04  7.17e-01  
 11  +3.4787e-01  +4.2862e-01  8.08e-02  1.88e-04  1.50e-02  1.39e-05  6.60e-04  4.42e-01  
 12  +3.4563e-01  +4.1819e-01  7.26e-02  1.66e-04  1.33e-02  1.85e-05  5.87e-04  3.24e-01  
 13  +3.3191e-01  +3.5563e-01  2.37e-02  5.27e-05  4.25e-03  7.95e-06  2.02e-04  7.70e-01  
 14  +3.2563e-01  +3.2894e-01  3.31e-03  7.15e-06  5.80e-04  1.22e-06  2.95e-05  9.02e-01  
 15  +3.2454e-01  +3.2465e-01  1.09e-04  2.34e-07  1.90e-05  3.96e-08  9.88e-07  9.70e-01  
 16  +3.2450e-01  +3.2450e-01  1.10e-06  2.34e-09  1.90e-07  3.97e-10  9.91e-09  9.90e-01  
 17  +3.2450e-01  +3.2450e-01  1.10e-08  2.34e-11  1.90e-09  3.97e-12  9.91e-11  9.90e-01  
 18  +3.2450e-01  +3.2450e-01  1.10e-10  2.35e-13  1.90e-11  3.98e-14  9.95e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.3552ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:33 PM: Optimal value: 3.245e-01
(CVXPY) Oct 06 04:25:33 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:33 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 9, Objective: 0.3245
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:33 PM: Your problem has 611 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:33 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 611
  constraints   = 1111
  nnz(P)        = 0
  nnz(A)        = 9879
  cones (total) = 1
    : Nonnegative = 1,  numel = 1111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0178e+02  5.01e+02  9.58e-01  3.86e+01  1.00e+00  1.01e+00   ------   
  1  +5.6679e-01  +1.1048e+02  1.10e+02  4.36e-01  2.43e+01  3.78e-03  5.87e-01  5.77e-01  
  2  +5.1994e-01  +1.2924e+01  1.24e+01  1.46e-01  1.04e+01  1.97e-02  2.72e-01  9.90e-01  
  3  +5.0901e-01  +3.8895e+00  3.38e+00  5.46e-02  4.29e+00  4.45e-03  1.26e-01  5.92e-01  
  4  +5.0536e-01  +3.1300e+00  2.62e+00  3.50e-02  2.82e+00  4.81e-03  8.25e-02  4.03e-01  
  5  +4.9910e-01  +2.8289e+00  2.33e+00  2.03e-02  1.66e+00  3.14e-03  4.89e-02  8.05e-01  
  6  +4.7558e-01  +2.0353e+00  1.56e+00  4.58e-03  3.85e-01  6.60e-03  1.08e-02  7.83e-01  
  7  +4.4799e-01  +1.4768e+00  1.03e+00  2.72e-03  2.26e-01  3.20e-03  6.75e-03  4.97e-01  
  8  +4.1818e-01  +9.7554e-01  5.57e-01  1.64e-03  1.33e-01  3.37e-05  4.51e-03  7.15e-01  
  9  +3.8066e-01  +6.9468e-01  3.14e-01  8.31e-04  6.65e-02  6.08e-05  2.51e-03  6.21e-01  
 10  +3.4997e-01  +5.0672e-01  1.57e-01  3.90e-04  3.11e-02  3.53e-05  1.30e-03  5.59e-01  
 11  +3.3605e-01  +4.3010e-01  9.41e-02  2.28e-04  1.82e-02  3.17e-05  8.02e-04  6.38e-01  
 12  +3.2627e-01  +3.8023e-01  5.40e-02  1.27e-04  1.02e-02  2.06e-05  4.68e-04  5.75e-01  
 13  +3.1766e-01  +3.3791e-01  2.02e-02  4.68e-05  3.76e-03  8.42e-06  1.82e-04  7.56e-01  
 14  +3.1312e-01  +3.1724e-01  4.12e-03  9.42e-06  7.54e-04  1.69e-06  3.83e-05  8.08e-01  
 15  +3.1197e-01  +3.1216e-01  1.94e-04  4.43e-07  3.54e-05  8.21e-08  1.83e-06  9.90e-01  
 16  +3.1190e-01  +3.1190e-01  2.01e-06  4.59e-09  3.66e-07  8.49e-10  1.90e-08  9.90e-01  
 17  +3.1190e-01  +3.1190e-01  2.02e-08  4.59e-11  3.67e-09  8.50e-12  1.90e-10  9.90e-01  
 18  +3.1190e-01  +3.1190e-01  2.03e-10  4.61e-13  3.69e-11  8.54e-14  1.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.0251ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:33 PM: Optimal value: 3.119e-01
(CVXPY) Oct 06 04:25:33 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:33 PM: Solver (including time spent in interface) took 3.127e-02 seconds
Iteration: 10, Objective: 0.3119
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:33 PM: Your problem has 621 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:33 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 621
  constraints   = 1121
  nnz(P)        = 0
  nnz(A)        = 10043
  cones (total) = 1
    : Nonnegative = 1,  numel = 1121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0183e+02  5.01e+02  9.58e-01  3.84e+01  1.00e+00  1.01e+00   ------   
  1  +5.6563e-01  +1.1045e+02  1.10e+02  4.36e-01  2.41e+01  3.78e-03  5.86e-01  5.78e-01  
  2  +5.1937e-01  +1.3011e+01  1.25e+01  1.45e-01  1.03e+01  1.98e-02  2.70e-01  9.90e-01  
  3  +5.0852e-01  +3.7484e+00  3.24e+00  5.10e-02  4.00e+00  4.36e-03  1.17e-01  6.11e-01  
  4  +5.0622e-01  +3.2832e+00  2.78e+00  3.68e-02  2.95e+00  4.70e-03  8.54e-02  2.83e-01  
  5  +5.0145e-01  +2.9632e+00  2.46e+00  2.81e-02  2.25e+00  2.61e-03  6.98e-02  5.30e-01  
  6  +4.7819e-01  +1.7740e+00  1.30e+00  4.09e-03  3.45e-01  6.54e-03  9.55e-03  8.70e-01  
  7  +4.5915e-01  +1.5613e+00  1.10e+00  2.95e-03  2.47e-01  5.29e-03  7.09e-03  3.47e-01  
  8  +4.1651e-01  +9.9310e-01  5.77e-01  1.53e-03  1.24e-01  4.60e-04  4.03e-03  6.99e-01  
  9  +3.7239e-01  +6.7114e-01  2.99e-01  7.49e-04  5.99e-02  1.92e-04  2.21e-03  5.05e-01  
 10  +3.4874e-01  +5.3886e-01  1.90e-01  4.61e-04  3.67e-02  1.16e-04  1.47e-03  4.21e-01  
 11  +3.2482e-01  +4.1074e-01  8.59e-02  2.02e-04  1.61e-02  4.97e-05  7.01e-04  5.75e-01  
 12  +3.1588e-01  +3.6721e-01  5.13e-02  1.17e-04  9.36e-03  3.00e-05  4.21e-04  4.58e-01  
 13  +3.0921e-01  +3.3370e-01  2.45e-02  5.54e-05  4.44e-03  1.34e-05  2.08e-04  7.20e-01  
 14  +3.0514e-01  +3.1445e-01  9.31e-03  2.10e-05  1.68e-03  4.71e-06  8.12e-05  8.85e-01  
 15  +3.0270e-01  +3.0443e-01  1.73e-03  3.88e-06  3.09e-04  8.13e-07  1.57e-05  8.52e-01  
 16  +3.0213e-01  +3.0222e-01  8.91e-05  1.97e-07  1.57e-05  3.73e-08  8.32e-07  9.90e-01  
 17  +3.0210e-01  +3.0210e-01  9.01e-07  1.99e-09  1.58e-07  3.76e-10  8.43e-09  9.90e-01  
 18  +3.0210e-01  +3.0210e-01  9.02e-09  2.00e-11  1.58e-09  3.76e-12  8.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.1226ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:33 PM: Optimal value: 3.021e-01
(CVXPY) Oct 06 04:25:33 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:33 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 11, Objective: 0.3021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:34 PM: Your problem has 631 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 631
  constraints   = 1131
  nnz(P)        = 0
  nnz(A)        = 10223
  cones (total) = 1
    : Nonnegative = 1,  numel = 1131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0201e+02  5.02e+02  9.58e-01  3.83e+01  1.00e+00  1.01e+00   ------   
  1  +5.6324e-01  +1.1053e+02  1.10e+02  4.36e-01  2.39e+01  3.79e-03  5.86e-01  5.78e-01  
  2  +5.1799e-01  +1.3179e+01  1.27e+01  1.44e-01  1.01e+01  2.00e-02  2.68e-01  9.90e-01  
  3  +5.0702e-01  +3.2763e+00  2.77e+00  4.13e-02  3.27e+00  3.97e-03  9.54e-02  6.78e-01  
  4  +5.0633e-01  +3.2498e+00  2.74e+00  3.53e-02  2.83e+00  4.39e-03  8.07e-02  1.73e-01  
  5  +5.0186e-01  +3.2850e+00  2.78e+00  2.88e-02  2.31e+00  3.25e-03  6.79e-02  4.96e-01  
  6  +4.8245e-01  +2.2900e+00  1.81e+00  6.66e-03  5.62e-01  6.34e-03  1.53e-02  7.81e-01  
  7  +4.6232e-01  +1.8578e+00  1.40e+00  4.42e-03  3.69e-01  4.46e-03  1.05e-02  4.01e-01  
  8  +4.3636e-01  +1.4596e+00  1.02e+00  2.78e-03  2.29e-01  2.77e-03  6.91e-03  4.62e-01  
  9  +4.0321e-01  +9.6046e-01  5.57e-01  1.65e-03  1.33e-01  2.31e-05  4.54e-03  7.45e-01  
 10  +3.8167e-01  +8.0109e-01  4.19e-01  1.17e-03  9.32e-02  2.98e-05  3.37e-03  3.06e-01  
 11  +3.5751e-01  +6.4066e-01  2.83e-01  7.42e-04  5.89e-02  6.24e-05  2.28e-03  5.60e-01  
 12  +3.2853e-01  +4.6179e-01  1.33e-01  3.28e-04  2.60e-02  3.04e-05  1.10e-03  5.50e-01  
 13  +3.1379e-01  +3.8147e-01  6.77e-02  1.59e-04  1.28e-02  2.75e-05  5.52e-04  8.09e-01  
 14  +3.0761e-01  +3.5291e-01  4.53e-02  1.04e-04  8.39e-03  1.86e-05  3.70e-04  3.67e-01  
 15  +3.0000e-01  +3.1686e-01  1.69e-02  3.83e-05  3.10e-03  7.21e-06  1.41e-04  7.01e-01  
 16  +2.9667e-01  +3.0203e-01  5.36e-03  1.21e-05  9.82e-04  2.33e-06  4.54e-05  7.23e-01  
 17  +2.9519e-01  +2.9565e-01  4.54e-04  1.02e-06  8.30e-05  1.95e-07  3.90e-06  9.27e-01  
 18  +2.9505e-01  +2.9506e-01  8.76e-06  1.98e-08  1.60e-06  3.76e-09  7.55e-08  9.81e-01  
 19  +2.9505e-01  +2.9505e-01  8.78e-08  1.98e-10  1.60e-08  3.77e-11  7.57e-10  9.90e-01  
 20  +2.9505e-01  +2.9505e-01  8.78e-10  1.98e-12  1.61e-10  3.77e-13  7.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.6389ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:34 PM: Optimal value: 2.951e-01
(CVXPY) Oct 06 04:25:34 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:34 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 12, Objective: 0.2951
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:34 PM: Your problem has 641 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 641
  constraints   = 1141
  nnz(P)        = 0
  nnz(A)        = 10457
  cones (total) = 1
    : Nonnegative = 1,  numel = 1141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0205e+02  5.02e+02  9.59e-01  3.82e+01  1.00e+00  1.01e+00   ------   
  1  +5.6233e-01  +1.1060e+02  1.10e+02  4.37e-01  2.38e+01  3.79e-03  5.86e-01  5.78e-01  
  2  +5.1766e-01  +1.3247e+01  1.27e+01  1.45e-01  1.00e+01  2.01e-02  2.68e-01  9.90e-01  
  3  +5.0644e-01  +3.0863e+00  2.58e+00  3.78e-02  2.98e+00  3.79e-03  8.77e-02  7.06e-01  
  4  +5.0601e-01  +3.1612e+00  2.66e+00  3.34e-02  2.66e+00  4.22e-03  7.64e-02  1.76e-01  
  5  +5.0090e-01  +3.4558e+00  2.95e+00  2.54e-02  2.05e+00  3.82e-03  5.83e-02  5.98e-01  
  6  +4.8125e-01  +2.5120e+00  2.03e+00  7.29e-03  6.12e-01  6.27e-03  1.67e-02  7.18e-01  
  7  +4.5706e-01  +1.8242e+00  1.37e+00  4.38e-03  3.64e-01  3.27e-03  1.05e-02  4.94e-01  
  8  +4.3128e-01  +1.4756e+00  1.04e+00  2.75e-03  2.26e-01  2.34e-03  6.86e-03  4.58e-01  
  9  +4.1121e-01  +1.1014e+00  6.90e-01  2.09e-03  1.69e-01  5.46e-04  5.61e-03  4.87e-01  
 10  +3.9172e-01  +9.3953e-01  5.48e-01  1.55e-03  1.24e-01  4.24e-04  4.31e-03  2.63e-01  
 11  +3.8910e-01  +9.1961e-01  5.31e-01  1.50e-03  1.20e-01  3.82e-04  4.21e-03  1.63e-01  
 12  +3.3386e-01  +5.0253e-01  1.69e-01  4.17e-04  3.30e-02  9.61e-05  1.33e-03  7.33e-01  
 13  +3.1623e-01  +4.2287e-01  1.07e-01  2.53e-04  2.03e-02  6.06e-05  8.50e-04  4.86e-01  
 14  +2.9831e-01  +3.3751e-01  3.92e-02  8.93e-05  7.21e-03  2.17e-05  3.26e-04  7.78e-01  
 15  +2.9467e-01  +3.1970e-01  2.50e-02  5.69e-05  4.61e-03  1.35e-05  2.13e-04  5.77e-01  
 16  +2.8957e-01  +2.9656e-01  6.99e-03  1.59e-05  1.28e-03  3.42e-06  6.14e-05  9.90e-01  
 17  +2.8777e-01  +2.8953e-01  1.76e-03  3.99e-06  3.21e-04  8.40e-07  1.58e-05  7.53e-01  
 18  +2.8733e-01  +2.8784e-01  5.10e-04  1.16e-06  9.28e-05  2.32e-07  4.65e-06  9.90e-01  
 19  +2.8715e-01  +2.8716e-01  1.08e-05  2.44e-08  1.96e-06  4.80e-09  9.85e-08  9.79e-01  
 20  +2.8715e-01  +2.8715e-01  1.08e-07  2.44e-10  1.96e-08  4.80e-11  9.87e-10  9.90e-01  
 21  +2.8715e-01  +2.8715e-01  1.08e-09  2.45e-12  1.96e-10  4.82e-13  9.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.6845ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:34 PM: Optimal value: 2.872e-01
(CVXPY) Oct 06 04:25:34 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:34 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 13, Objective: 0.2872
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:34 PM: Your problem has 651 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 651
  constraints   = 1151
  nnz(P)        = 0
  nnz(A)        = 10572
  cones (total) = 1
    : Nonnegative = 1,  numel = 1151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0198e+02  5.01e+02  9.59e-01  3.81e+01  1.00e+00  1.01e+00   ------   
  1  +5.6139e-01  +1.1056e+02  1.10e+02  4.37e-01  2.36e+01  3.79e-03  5.85e-01  5.78e-01  
  2  +5.1684e-01  +1.3284e+01  1.28e+01  1.44e-01  9.94e+00  2.02e-02  2.67e-01  9.90e-01  
  3  +5.0553e-01  +2.7883e+00  2.28e+00  3.25e-02  2.57e+00  3.50e-03  7.59e-02  7.47e-01  
  4  +5.0512e-01  +2.9428e+00  2.44e+00  2.91e-02  2.33e+00  3.92e-03  6.65e-02  2.14e-01  
  5  +4.9762e-01  +3.4586e+00  2.96e+00  1.86e-02  1.53e+00  4.72e-03  4.19e-02  7.14e-01  
  6  +4.7649e-01  +2.5179e+00  2.04e+00  7.05e-03  5.90e-01  5.60e-03  1.62e-02  6.19e-01  
  7  +4.5569e-01  +2.0641e+00  1.61e+00  4.77e-03  3.96e-01  4.16e-03  1.13e-02  3.98e-01  
  8  +4.3235e-01  +1.6488e+00  1.22e+00  3.17e-03  2.61e-01  2.70e-03  7.78e-03  4.38e-01  
  9  +4.0593e-01  +1.0943e+00  6.88e-01  2.09e-03  1.68e-01  2.13e-05  5.60e-03  7.80e-01  
 10  +3.4715e-01  +5.9932e-01  2.52e-01  6.43e-04  5.09e-02  3.01e-05  1.93e-03  7.23e-01  
 11  +3.1573e-01  +4.4469e-01  1.29e-01  3.10e-04  2.47e-02  3.06e-05  1.02e-03  6.20e-01  
 12  +2.9744e-01  +3.5613e-01  5.87e-02  1.37e-04  1.10e-02  1.67e-05  4.84e-04  6.10e-01  
 13  +2.9176e-01  +3.3006e-01  3.83e-02  8.74e-05  7.06e-03  1.16e-05  3.17e-04  3.97e-01  
 14  +2.8552e-01  +3.0184e-01  1.63e-02  3.64e-05  2.98e-03  5.39e-06  1.36e-04  6.20e-01  
 15  +2.8157e-01  +2.8477e-01  3.20e-03  7.08e-06  5.81e-04  1.12e-06  2.73e-05  8.38e-01  
 16  +2.8063e-01  +2.8083e-01  2.03e-04  4.49e-07  3.68e-05  9.15e-08  1.76e-06  9.90e-01  
 17  +2.8055e-01  +2.8055e-01  2.10e-06  4.64e-09  3.80e-07  9.41e-10  1.82e-08  9.90e-01  
 18  +2.8055e-01  +2.8055e-01  2.10e-08  4.64e-11  3.80e-09  9.43e-12  1.82e-10  9.90e-01  
 19  +2.8055e-01  +2.8055e-01  2.10e-10  4.65e-13  3.80e-11  9.43e-14  1.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.514ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:34 PM: Optimal value: 2.806e-01
(CVXPY) Oct 06 04:25:34 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:25:34 PM: Solver (including time spent in interface) took 3.126e-02 seconds
Iteration: 14, Objective: 0.2806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:34 PM: Your problem has 661 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 661
  constraints   = 1161
  nnz(P)        = 0
  nnz(A)        = 10704
  cones (total) = 1
    : Nonnegative = 1,  numel = 1161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0213e+02  5.02e+02  9.59e-01  3.79e+01  1.00e+00  1.01e+00   ------   
  1  +5.6058e-01  +1.1058e+02  1.10e+02  4.38e-01  2.35e+01  3.80e-03  5.84e-01  5.78e-01  
  2  +5.1634e-01  +1.3348e+01  1.28e+01  1.44e-01  9.83e+00  2.02e-02  2.66e-01  9.90e-01  
  3  +5.0476e-01  +2.5353e+00  2.03e+00  2.83e-02  2.24e+00  3.25e-03  6.62e-02  7.81e-01  
  4  +5.0392e-01  +2.7937e+00  2.29e+00  2.45e-02  1.97e+00  3.78e-03  5.58e-02  3.21e-01  
  5  +4.9136e-01  +3.0550e+00  2.56e+00  1.19e-02  9.86e-01  5.77e-03  2.67e-02  7.55e-01  
  6  +4.6539e-01  +2.0706e+00  1.61e+00  5.41e-03  4.50e-01  3.79e-03  1.27e-02  6.05e-01  
  7  +4.3851e-01  +1.6413e+00  1.20e+00  3.29e-03  2.71e-01  2.47e-03  7.96e-03  5.23e-01  
  8  +3.9872e-01  +1.0182e+00  6.19e-01  1.75e-03  1.41e-01  2.64e-05  4.65e-03  8.02e-01  
  9  +3.5867e-01  +7.2032e-01  3.62e-01  9.42e-04  7.50e-02  4.12e-05  2.72e-03  5.02e-01  
 10  +3.2081e-01  +4.9572e-01  1.75e-01  4.29e-04  3.40e-02  3.39e-05  1.36e-03  5.99e-01  
 11  +3.0212e-01  +4.0352e-01  1.01e-01  2.39e-04  1.93e-02  3.02e-05  8.03e-04  5.92e-01  
 12  +2.9209e-01  +3.5536e-01  6.33e-02  1.46e-04  1.19e-02  2.12e-05  5.06e-04  4.69e-01  
 13  +2.9040e-01  +3.4726e-01  5.69e-02  1.29e-04  1.07e-02  2.05e-05  4.48e-04  2.14e-01  
 14  +2.8409e-01  +3.1448e-01  3.04e-02  6.79e-05  5.63e-03  1.61e-05  2.42e-04  9.90e-01  
 15  +2.7743e-01  +2.8895e-01  1.15e-02  2.52e-05  2.11e-03  6.00e-06  9.29e-05  6.58e-01  
 16  +2.7365e-01  +2.7442e-01  7.67e-04  1.67e-06  1.40e-04  3.62e-07  6.33e-06  9.90e-01  
 17  +2.7335e-01  +2.7336e-01  1.02e-05  2.23e-08  1.86e-06  4.53e-09  8.48e-08  9.87e-01  
 18  +2.7335e-01  +2.7335e-01  1.02e-07  2.23e-10  1.86e-08  4.53e-11  8.49e-10  9.90e-01  
 19  +2.7335e-01  +2.7335e-01  1.02e-09  2.23e-12  1.86e-10  4.53e-13  8.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.112ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:34 PM: Optimal value: 2.734e-01
(CVXPY) Oct 06 04:25:34 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:34 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 15, Objective: 0.2734
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:34 PM: Your problem has 671 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:34 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 671
  constraints   = 1171
  nnz(P)        = 0
  nnz(A)        = 10826
  cones (total) = 1
    : Nonnegative = 1,  numel = 1171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0218e+02  5.02e+02  9.59e-01  3.78e+01  1.00e+00  1.01e+00   ------   
  1  +5.5821e-01  +1.1062e+02  1.10e+02  4.38e-01  2.33e+01  3.80e-03  5.83e-01  5.79e-01  
  2  +5.1501e-01  +1.3514e+01  1.30e+01  1.43e-01  9.72e+00  2.05e-02  2.64e-01  9.90e-01  
  3  +5.0360e-01  +2.6424e+00  2.14e+00  2.78e-02  2.20e+00  3.79e-03  6.43e-02  7.81e-01  
  4  +4.9194e-01  +2.8498e+00  2.36e+00  1.27e-02  1.05e+00  6.82e-03  2.85e-02  7.13e-01  
  5  +4.6499e-01  +2.0664e+00  1.60e+00  5.46e-03  4.55e-01  6.10e-03  1.26e-02  6.18e-01  
  6  +4.3911e-01  +1.7821e+00  1.34e+00  3.59e-03  2.97e-01  4.96e-03  8.52e-03  4.49e-01  
  7  +4.1248e-01  +1.3795e+00  9.67e-01  2.56e-03  2.09e-01  2.30e-03  6.41e-03  4.21e-01  
  8  +3.4699e-01  +6.3537e-01  2.88e-01  7.55e-04  5.94e-02  3.17e-05  2.21e-03  8.43e-01  
  9  +3.2243e-01  +5.2690e-01  2.04e-01  5.15e-04  4.05e-02  4.02e-05  1.60e-03  4.24e-01  
 10  +2.9230e-01  +3.7965e-01  8.73e-02  2.11e-04  1.67e-02  1.99e-05  7.25e-04  6.01e-01  
 11  +2.8108e-01  +3.2803e-01  4.69e-02  1.11e-04  8.91e-03  1.34e-05  3.93e-04  5.63e-01  
 12  +2.7982e-01  +3.2191e-01  4.21e-02  9.95e-05  7.98e-03  1.29e-05  3.59e-04  2.12e-01  
 13  +2.7985e-01  +3.2203e-01  4.22e-02  9.96e-05  7.99e-03  1.32e-05  3.58e-04  3.45e-02  
 14  +2.7287e-01  +2.9203e-01  1.92e-02  4.36e-05  3.58e-03  7.45e-06  1.61e-04  7.16e-01  
 15  +2.6783e-01  +2.7154e-01  3.71e-03  8.36e-06  6.89e-04  1.53e-06  3.20e-05  8.72e-01  
 16  +2.6667e-01  +2.6698e-01  3.13e-04  7.05e-07  5.79e-05  1.42e-07  2.74e-06  9.90e-01  
 17  +2.6655e-01  +2.6655e-01  3.20e-06  7.22e-09  5.93e-07  1.43e-09  2.82e-08  9.90e-01  
 18  +2.6655e-01  +2.6655e-01  3.21e-08  7.23e-11  5.94e-09  1.43e-11  2.82e-10  9.90e-01  
 19  +2.6655e-01  +2.6655e-01  3.21e-10  7.23e-13  5.94e-11  1.43e-13  2.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.3404ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:34 PM: Optimal value: 2.666e-01
(CVXPY) Oct 06 04:25:34 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:34 PM: Solver (including time spent in interface) took 5.408e-02 seconds
Iteration: 16, Objective: 0.2666
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:35 PM: Your problem has 681 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 681
  constraints   = 1181
  nnz(P)        = 0
  nnz(A)        = 10921
  cones (total) = 1
    : Nonnegative = 1,  numel = 1181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0250e+02  5.02e+02  9.59e-01  3.77e+01  1.00e+00  1.01e+00   ------   
  1  +5.5669e-01  +1.1072e+02  1.10e+02  4.38e-01  2.32e+01  3.81e-03  5.84e-01  5.79e-01  
  2  +5.1390e-01  +1.3656e+01  1.31e+01  1.42e-01  9.63e+00  2.07e-02  2.63e-01  9.90e-01  
  3  +5.0232e-01  +2.5945e+00  2.09e+00  2.57e-02  2.04e+00  4.03e-03  5.94e-02  7.96e-01  
  4  +4.8782e-01  +2.6577e+00  2.17e+00  1.08e-02  9.00e-01  7.68e-03  2.44e-02  6.94e-01  
  5  +4.5171e-01  +1.7534e+00  1.30e+00  4.23e-03  3.50e-01  5.15e-03  9.97e-03  7.00e-01  
  6  +4.3070e-01  +1.5267e+00  1.10e+00  3.10e-03  2.54e-01  3.48e-03  7.54e-03  4.16e-01  
  7  +3.8997e-01  +1.0545e+00  6.65e-01  2.01e-03  1.60e-01  2.95e-05  5.41e-03  7.61e-01  
  8  +3.2528e-01  +5.4943e-01  2.24e-01  5.80e-04  4.53e-02  2.57e-05  1.77e-03  7.30e-01  
  9  +2.9959e-01  +4.4132e-01  1.42e-01  3.47e-04  2.74e-02  3.59e-05  1.13e-03  5.74e-01  
 10  +2.8213e-01  +3.5628e-01  7.42e-02  1.78e-04  1.42e-02  2.00e-05  6.15e-04  4.95e-01  
 11  +2.7702e-01  +3.3185e-01  5.48e-02  1.29e-04  1.04e-02  1.74e-05  4.50e-04  3.98e-01  
 12  +2.7223e-01  +3.0581e-01  3.36e-02  7.81e-05  6.36e-03  1.69e-05  2.79e-04  9.90e-01  
 13  +2.6556e-01  +2.7960e-01  1.40e-02  3.18e-05  2.63e-03  7.08e-06  1.18e-04  6.65e-01  
 14  +2.6119e-01  +2.6238e-01  1.19e-03  2.69e-06  2.22e-04  5.48e-07  1.03e-05  9.65e-01  
 15  +2.6076e-01  +2.6078e-01  1.88e-05  4.25e-08  3.49e-06  7.88e-09  1.64e-07  9.87e-01  
 16  +2.6075e-01  +2.6075e-01  1.88e-07  4.25e-10  3.50e-08  7.89e-11  1.65e-09  9.90e-01  
 17  +2.6075e-01  +2.6075e-01  1.88e-09  4.25e-12  3.50e-10  7.89e-13  1.65e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.1036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:35 PM: Optimal value: 2.608e-01
(CVXPY) Oct 06 04:25:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:35 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 17, Objective: 0.2608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:35 PM: Your problem has 691 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 691
  constraints   = 1191
  nnz(P)        = 0
  nnz(A)        = 10997
  cones (total) = 1
    : Nonnegative = 1,  numel = 1191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0243e+02  5.02e+02  9.60e-01  3.75e+01  1.00e+00  1.01e+00   ------   
  1  +5.5489e-01  +1.1074e+02  1.10e+02  4.38e-01  2.30e+01  3.82e-03  5.82e-01  5.79e-01  
  2  +5.1309e-01  +1.3779e+01  1.33e+01  1.41e-01  9.51e+00  2.08e-02  2.61e-01  9.90e-01  
  3  +5.0153e-01  +2.6630e+00  2.16e+00  2.55e-02  2.01e+00  4.33e-03  5.84e-02  7.95e-01  
  4  +4.8364e-01  +2.5841e+00  2.10e+00  9.60e-03  7.98e-01  8.60e-03  2.16e-02  7.05e-01  
  5  +4.5115e-01  +1.9197e+00  1.47e+00  4.79e-03  3.95e-01  6.21e-03  1.12e-02  5.86e-01  
  6  +4.2912e-01  +1.6515e+00  1.22e+00  3.48e-03  2.85e-01  4.33e-03  8.37e-03  3.96e-01  
  7  +3.8245e-01  +1.0397e+00  6.57e-01  1.91e-03  1.52e-01  3.83e-05  5.10e-03  7.83e-01  
  8  +3.1942e-01  +5.4902e-01  2.30e-01  6.01e-04  4.68e-02  2.63e-05  1.82e-03  6.97e-01  
  9  +2.9103e-01  +4.2858e-01  1.38e-01  3.36e-04  2.65e-02  3.31e-05  1.09e-03  5.84e-01  
 10  +2.7369e-01  +3.4896e-01  7.53e-02  1.77e-04  1.42e-02  2.24e-05  6.10e-04  5.59e-01  
 11  +2.6858e-01  +3.2477e-01  5.62e-02  1.30e-04  1.05e-02  1.93e-05  4.55e-04  3.97e-01  
 12  +2.6339e-01  +2.9710e-01  3.37e-02  7.80e-05  6.26e-03  1.72e-05  2.82e-04  9.90e-01  
 13  +2.5684e-01  +2.7118e-01  1.43e-02  3.27e-05  2.64e-03  7.21e-06  1.22e-04  6.56e-01  
 14  +2.5275e-01  +2.5501e-01  2.26e-03  5.14e-06  4.14e-04  1.08e-06  2.00e-05  8.53e-01  
 15  +2.5203e-01  +2.5226e-01  2.28e-04  5.17e-07  4.14e-05  1.04e-07  2.05e-06  9.44e-01  
 16  +2.5195e-01  +2.5195e-01  2.42e-06  5.48e-09  4.39e-07  1.09e-09  2.18e-08  9.89e-01  
 17  +2.5195e-01  +2.5195e-01  2.42e-08  5.49e-11  4.39e-09  1.09e-11  2.19e-10  9.90e-01  
 18  +2.5195e-01  +2.5195e-01  2.42e-10  5.49e-13  4.40e-11  1.09e-13  2.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.9388ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:35 PM: Optimal value: 2.520e-01
(CVXPY) Oct 06 04:25:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:35 PM: Solver (including time spent in interface) took 4.689e-02 seconds
Iteration: 18, Objective: 0.2520
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:35 PM: Your problem has 701 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:35 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 701
  constraints   = 1201
  nnz(P)        = 0
  nnz(A)        = 11079
  cones (total) = 1
    : Nonnegative = 1,  numel = 1201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0243e+02  5.02e+02  9.60e-01  3.74e+01  1.00e+00  1.01e+00   ------   
  1  +5.5364e-01  +1.1075e+02  1.10e+02  4.38e-01  2.28e+01  3.82e-03  5.82e-01  5.79e-01  
  2  +5.1216e-01  +1.3866e+01  1.34e+01  1.41e-01  9.42e+00  2.09e-02  2.59e-01  9.90e-01  
  3  +5.0041e-01  +2.6553e+00  2.15e+00  2.44e-02  1.93e+00  4.54e-03  5.58e-02  8.06e-01  
  4  +4.8012e-01  +2.4769e+00  2.00e+00  8.82e-03  7.31e-01  8.95e-03  1.99e-02  7.00e-01  
  5  +4.4803e-01  +1.9421e+00  1.49e+00  4.83e-03  3.96e-01  6.79e-03  1.13e-02  5.39e-01  
  6  +4.2468e-01  +1.6632e+00  1.24e+00  3.50e-03  2.85e-01  4.71e-03  8.42e-03  3.96e-01  
  7  +3.6966e-01  +9.4534e-01  5.76e-01  1.62e-03  1.28e-01  4.26e-05  4.35e-03  7.97e-01  
  8  +3.0464e-01  +4.9004e-01  1.85e-01  4.81e-04  3.74e-02  2.89e-05  1.48e-03  7.32e-01  
  9  +2.9219e-01  +4.4195e-01  1.50e-01  3.74e-04  2.94e-02  3.23e-05  1.19e-03  3.27e-01  
 10  +2.7028e-01  +3.4722e-01  7.69e-02  1.82e-04  1.45e-02  1.94e-05  6.23e-04  5.42e-01  
 11  +2.6311e-01  +3.1542e-01  5.23e-02  1.21e-04  9.77e-03  1.63e-05  4.26e-04  4.64e-01  
 12  +2.5750e-01  +2.8853e-01  3.10e-02  7.16e-05  5.74e-03  1.57e-05  2.60e-04  9.90e-01  
 13  +2.5059e-01  +2.6167e-01  1.11e-02  2.50e-05  2.03e-03  5.58e-06  9.36e-05  7.15e-01  
 14  +2.4725e-01  +2.4873e-01  1.47e-03  3.32e-06  2.68e-04  6.80e-07  1.28e-05  9.57e-01  
 15  +2.4671e-01  +2.4674e-01  3.04e-05  6.86e-08  5.53e-06  1.28e-08  2.69e-07  9.79e-01  
 16  +2.4670e-01  +2.4670e-01  3.04e-07  6.87e-10  5.53e-08  1.28e-10  2.69e-09  9.90e-01  
 17  +2.4670e-01  +2.4670e-01  3.04e-09  6.87e-12  5.53e-10  1.28e-12  2.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.1962ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:35 PM: Optimal value: 2.467e-01
(CVXPY) Oct 06 04:25:35 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:35 PM: Solver (including time spent in interface) took 3.122e-02 seconds
Iteration: 19, Objective: 0.2467
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:35 PM: Your problem has 711 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:35 PM: Finished problem compilation (took 1.568e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 711
  constraints   = 1211
  nnz(P)        = 0
  nnz(A)        = 11142
  cones (total) = 1
    : Nonnegative = 1,  numel = 1211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0239e+02  5.02e+02  9.60e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.5119e-01  +1.1086e+02  1.10e+02  4.39e-01  2.27e+01  3.83e-03  5.81e-01  5.79e-01  
  2  +5.1077e-01  +1.4087e+01  1.36e+01  1.40e-01  9.35e+00  2.12e-02  2.58e-01  9.90e-01  
  3  +4.9873e-01  +2.7437e+00  2.24e+00  2.39e-02  1.89e+00  5.03e-03  5.42e-02  8.11e-01  
  4  +4.7401e-01  +2.4424e+00  1.97e+00  8.18e-03  6.78e-01  9.85e-03  1.84e-02  6.99e-01  
  5  +4.4375e-01  +2.0519e+00  1.61e+00  5.00e-03  4.11e-01  8.66e-03  1.16e-02  4.46e-01  
  6  +4.1507e-01  +1.6467e+00  1.23e+00  3.42e-03  2.78e-01  5.36e-03  8.23e-03  4.10e-01  
  7  +3.5261e-01  +8.3743e-01  4.85e-01  1.35e-03  1.06e-01  4.72e-05  3.69e-03  8.05e-01  
  8  +3.0980e-01  +5.7065e-01  2.61e-01  6.95e-04  5.41e-02  4.19e-05  2.08e-03  5.26e-01  
  9  +2.7674e-01  +3.9579e-01  1.19e-01  3.00e-04  2.36e-02  2.76e-05  9.83e-04  6.24e-01  
 10  +2.6264e-01  +3.3275e-01  7.01e-02  1.68e-04  1.35e-02  2.04e-05  5.78e-04  5.45e-01  
 11  +2.5892e-01  +3.1548e-01  5.66e-02  1.33e-04  1.08e-02  1.84e-05  4.62e-04  3.16e-01  
 12  +2.5146e-01  +2.7906e-01  2.76e-02  6.39e-05  5.18e-03  1.38e-05  2.31e-04  9.90e-01  
 13  +2.4302e-01  +2.4565e-01  2.63e-03  5.99e-06  4.87e-04  1.12e-06  2.29e-05  9.45e-01  
 14  +2.4236e-01  +2.4308e-01  7.24e-04  1.66e-06  1.34e-04  3.10e-07  6.44e-06  7.44e-01  
 15  +2.4210e-01  +2.4212e-01  1.15e-05  2.64e-08  2.13e-06  4.86e-09  1.03e-07  9.88e-01  
 16  +2.4210e-01  +2.4210e-01  1.15e-07  2.64e-10  2.14e-08  4.87e-11  1.03e-09  9.90e-01  
 17  +2.4210e-01  +2.4210e-01  1.15e-09  2.64e-12  2.14e-10  4.87e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.222ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:35 PM: Optimal value: 2.421e-01
(CVXPY) Oct 06 04:25:35 PM: Compilation took 1.568e-02 seconds
(CVXPY) Oct 06 04:25:35 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 20, Objective: 0.2421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:36 PM: Your problem has 721 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:36 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 721
  constraints   = 1221
  nnz(P)        = 0
  nnz(A)        = 11228
  cones (total) = 1
    : Nonnegative = 1,  numel = 1221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0227e+02  5.02e+02  9.60e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.4913e-01  +1.1085e+02  1.10e+02  4.38e-01  2.25e+01  3.84e-03  5.79e-01  5.80e-01  
  2  +5.0960e-01  +1.4237e+01  1.37e+01  1.38e-01  9.19e+00  2.14e-02  2.54e-01  9.90e-01  
  3  +4.9687e-01  +2.9077e+00  2.41e+00  2.41e-02  1.89e+00  5.67e-03  5.42e-02  8.10e-01  
  4  +4.6522e-01  +2.4987e+00  2.03e+00  7.55e-03  6.25e-01  1.15e-02  1.69e-02  7.18e-01  
  5  +4.3194e-01  +2.0427e+00  1.61e+00  4.64e-03  3.81e-01  9.27e-03  1.07e-02  4.51e-01  
  6  +3.8081e-01  +1.1974e+00  8.17e-01  2.33e-03  1.86e-01  8.76e-04  5.92e-03  7.08e-01  
  7  +3.1873e-01  +6.3534e-01  3.17e-01  8.67e-04  6.74e-02  2.41e-04  2.49e-03  6.45e-01  
  8  +2.8269e-01  +4.5678e-01  1.74e-01  4.53e-04  3.54e-02  1.19e-04  1.43e-03  6.06e-01  
  9  +2.6885e-01  +3.8899e-01  1.20e-01  3.00e-04  2.39e-02  8.20e-05  9.84e-04  3.86e-01  
 10  +2.5386e-01  +3.1600e-01  6.21e-02  1.50e-04  1.21e-02  4.09e-05  5.20e-04  5.41e-01  
 11  +2.5175e-01  +3.0572e-01  5.40e-02  1.28e-04  1.05e-02  3.50e-05  4.49e-04  2.20e-01  
 12  +2.4394e-01  +2.6669e-01  2.28e-02  5.35e-05  4.36e-03  1.20e-05  1.95e-04  9.32e-01  
 13  +2.3734e-01  +2.4010e-01  2.75e-03  6.41e-06  5.23e-04  1.29e-06  2.45e-05  9.13e-01  
 14  +2.3687e-01  +2.3829e-01  1.42e-03  3.30e-06  2.70e-04  6.71e-07  1.27e-05  5.96e-01  
 15  +2.3643e-01  +2.3662e-01  1.96e-04  4.54e-07  3.72e-05  8.88e-08  1.76e-06  9.90e-01  
 16  +2.3635e-01  +2.3635e-01  2.27e-06  5.26e-09  4.30e-07  1.02e-09  2.04e-08  9.88e-01  
 17  +2.3635e-01  +2.3635e-01  2.27e-08  5.27e-11  4.31e-09  1.03e-11  2.05e-10  9.90e-01  
 18  +2.3635e-01  +2.3635e-01  2.27e-10  5.27e-13  4.31e-11  1.03e-13  2.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.2032ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:36 PM: Optimal value: 2.364e-01
(CVXPY) Oct 06 04:25:36 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:36 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 21, Objective: 0.2364
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:36 PM: Your problem has 731 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:36 PM: Finished problem compilation (took 1.566e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 731
  constraints   = 1231
  nnz(P)        = 0
  nnz(A)        = 11308
  cones (total) = 1
    : Nonnegative = 1,  numel = 1231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0234e+02  5.02e+02  9.60e-01  3.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.4640e-01  +1.1094e+02  1.10e+02  4.38e-01  2.24e+01  3.85e-03  5.79e-01  5.80e-01  
  2  +5.0765e-01  +1.4448e+01  1.39e+01  1.37e-01  9.10e+00  2.17e-02  2.53e-01  9.90e-01  
  3  +4.9433e-01  +3.1158e+00  2.62e+00  2.44e-02  1.92e+00  6.41e-03  5.46e-02  8.08e-01  
  4  +4.5697e-01  +2.5226e+00  2.07e+00  7.39e-03  6.11e-01  1.20e-02  1.66e-02  7.23e-01  
  5  +4.2095e-01  +2.0347e+00  1.61e+00  4.55e-03  3.73e-01  8.99e-03  1.05e-02  4.72e-01  
  6  +3.7001e-01  +1.1627e+00  7.93e-01  2.38e-03  1.89e-01  7.63e-05  6.13e-03  7.51e-01  
  7  +3.0732e-01  +6.1254e-01  3.05e-01  8.51e-04  6.59e-02  4.21e-05  2.47e-03  6.53e-01  
  8  +2.7833e-01  +4.7336e-01  1.95e-01  5.18e-04  4.03e-02  4.29e-05  1.62e-03  4.90e-01  
  9  +2.6077e-01  +3.8658e-01  1.26e-01  3.20e-04  2.53e-02  3.22e-05  1.06e-03  4.25e-01  
 10  +2.4540e-01  +3.1222e-01  6.68e-02  1.64e-04  1.31e-02  2.02e-05  5.76e-04  5.63e-01  
 11  +2.4287e-01  +2.9992e-01  5.71e-02  1.38e-04  1.12e-02  1.85e-05  4.90e-04  2.43e-01  
 12  +2.3464e-01  +2.5869e-01  2.41e-02  5.78e-05  4.64e-03  1.15e-05  2.15e-04  9.90e-01  
 13  +2.2751e-01  +2.2999e-01  2.48e-03  5.91e-06  4.74e-04  1.02e-06  2.33e-05  9.39e-01  
 14  +2.2668e-01  +2.2677e-01  9.18e-05  2.20e-07  1.76e-05  3.37e-08  8.86e-07  9.63e-01  
 15  +2.2665e-01  +2.2665e-01  9.47e-07  2.27e-09  1.81e-07  3.47e-10  9.16e-09  9.90e-01  
 16  +2.2665e-01  +2.2665e-01  9.47e-09  2.27e-11  1.81e-09  3.47e-12  9.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.4627ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:36 PM: Optimal value: 2.267e-01
(CVXPY) Oct 06 04:25:36 PM: Compilation took 1.566e-02 seconds
(CVXPY) Oct 06 04:25:36 PM: Solver (including time spent in interface) took 4.684e-02 seconds
Iteration: 22, Objective: 0.2267
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:36 PM: Your problem has 741 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:36 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 741
  constraints   = 1241
  nnz(P)        = 0
  nnz(A)        = 11377
  cones (total) = 1
    : Nonnegative = 1,  numel = 1241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +5.0248e+02  5.02e+02  9.60e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.4359e-01  +1.1105e+02  1.11e+02  4.38e-01  2.22e+01  3.85e-03  5.78e-01  5.80e-01  
  2  +5.0530e-01  +1.4644e+01  1.41e+01  1.36e-01  8.99e+00  2.20e-02  2.51e-01  9.90e-01  
  3  +4.9066e-01  +3.2729e+00  2.78e+00  2.40e-02  1.88e+00  7.20e-03  5.34e-02  8.12e-01  
  4  +4.4784e-01  +2.4719e+00  2.02e+00  7.16e-03  5.89e-01  1.21e-02  1.61e-02  7.19e-01  
  5  +4.1549e-01  +2.0255e+00  1.61e+00  4.73e-03  3.86e-01  8.95e-03  1.10e-02  4.15e-01  
  6  +3.5755e-01  +1.0885e+00  7.31e-01  2.16e-03  1.70e-01  8.06e-05  5.57e-03  7.91e-01  
  7  +2.9381e-01  +5.6615e-01  2.72e-01  7.66e-04  5.90e-02  4.76e-05  2.27e-03  6.75e-01  
  8  +2.6607e-01  +4.3358e-01  1.68e-01  4.47e-04  3.48e-02  4.27e-05  1.43e-03  5.22e-01  
  9  +2.5377e-01  +3.7386e-01  1.20e-01  3.10e-04  2.45e-02  3.36e-05  1.04e-03  3.50e-01  
 10  +2.3957e-01  +3.0448e-01  6.49e-02  1.63e-04  1.30e-02  1.94e-05  5.77e-04  5.01e-01  
 11  +2.3743e-01  +2.9381e-01  5.64e-02  1.40e-04  1.12e-02  1.80e-05  4.99e-04  2.27e-01  
 12  +2.2951e-01  +2.5333e-01  2.38e-02  5.86e-05  4.68e-03  1.11e-05  2.20e-04  9.90e-01  
 13  +2.2261e-01  +2.2513e-01  2.51e-03  6.14e-06  4.90e-04  9.95e-07  2.45e-05  9.39e-01  
 14  +2.2178e-01  +2.2187e-01  9.08e-05  2.23e-07  1.77e-05  3.14e-08  9.12e-07  9.64e-01  
 15  +2.2175e-01  +2.2175e-01  9.31e-07  2.29e-09  1.81e-07  3.22e-10  9.37e-09  9.90e-01  
 16  +2.2175e-01  +2.2175e-01  9.32e-09  2.29e-11  1.82e-09  3.22e-12  9.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.6434ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:36 PM: Optimal value: 2.218e-01
(CVXPY) Oct 06 04:25:36 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:36 PM: Solver (including time spent in interface) took 4.724e-02 seconds
Iteration: 23, Objective: 0.2218
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:36 PM: Your problem has 751 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:36 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 751
  constraints   = 1251
  nnz(P)        = 0
  nnz(A)        = 11442
  cones (total) = 1
    : Nonnegative = 1,  numel = 1251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +5.0246e+02  5.02e+02  9.60e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.4213e-01  +1.1109e+02  1.11e+02  4.38e-01  2.21e+01  3.86e-03  5.78e-01  5.80e-01  
  2  +5.0411e-01  +1.4751e+01  1.42e+01  1.35e-01  8.92e+00  2.21e-02  2.50e-01  9.90e-01  
  3  +4.8816e-01  +3.0237e+00  2.54e+00  2.09e-02  1.65e+00  7.19e-03  4.68e-02  8.37e-01  
  4  +4.4072e-01  +2.2918e+00  1.85e+00  6.30e-03  5.16e-01  1.20e-02  1.43e-02  7.22e-01  
  5  +4.0977e-01  +1.9197e+00  1.51e+00  4.41e-03  3.58e-01  8.89e-03  1.03e-02  3.80e-01  
  6  +3.4700e-01  +9.6677e-01  6.20e-01  1.85e-03  1.44e-01  7.78e-05  4.84e-03  7.71e-01  
  7  +2.8438e-01  +5.4439e-01  2.60e-01  7.27e-04  5.59e-02  5.54e-05  2.18e-03  6.67e-01  
  8  +2.5562e-01  +4.0044e-01  1.45e-01  3.83e-04  2.99e-02  4.19e-05  1.25e-03  5.75e-01  
  9  +2.4261e-01  +3.3962e-01  9.70e-02  2.44e-04  1.95e-02  3.29e-05  8.34e-04  4.93e-01  
 10  +2.3233e-01  +2.9034e-01  5.80e-02  1.42e-04  1.15e-02  2.00e-05  5.12e-04  4.24e-01  
 11  +2.2188e-01  +2.3847e-01  1.66e-02  4.00e-05  3.22e-03  7.60e-06  1.55e-04  9.90e-01  
 12  +2.1707e-01  +2.1901e-01  1.94e-03  4.66e-06  3.73e-04  7.82e-07  1.90e-05  8.84e-01  
 13  +2.1645e-01  +2.1661e-01  1.57e-04  3.77e-07  3.00e-05  5.96e-08  1.59e-06  9.25e-01  
 14  +2.1640e-01  +2.1640e-01  1.65e-06  3.98e-09  3.17e-07  6.23e-10  1.69e-08  9.90e-01  
 15  +2.1640e-01  +2.1640e-01  1.65e-08  3.99e-11  3.17e-09  6.23e-12  1.69e-10  9.90e-01  
 16  +2.1640e-01  +2.1640e-01  1.66e-10  3.99e-13  3.17e-11  6.25e-14  1.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.4405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:36 PM: Optimal value: 2.164e-01
(CVXPY) Oct 06 04:25:36 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:36 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 24, Objective: 0.2164
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:37 PM: Your problem has 761 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:37 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 761
  constraints   = 1261
  nnz(P)        = 0
  nnz(A)        = 11546
  cones (total) = 1
    : Nonnegative = 1,  numel = 1261

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0245e+02  5.02e+02  9.61e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.4114e-01  +1.1105e+02  1.11e+02  4.38e-01  2.20e+01  3.86e-03  5.77e-01  5.80e-01  
  2  +5.0305e-01  +1.4807e+01  1.43e+01  1.34e-01  8.81e+00  2.22e-02  2.49e-01  9.90e-01  
  3  +4.8609e-01  +3.1347e+00  2.65e+00  2.10e-02  1.65e+00  7.60e-03  4.70e-02  8.39e-01  
  4  +4.3490e-01  +2.2804e+00  1.85e+00  6.14e-03  5.02e-01  1.20e-02  1.39e-02  7.31e-01  
  5  +4.0116e-01  +1.8358e+00  1.43e+00  4.15e-03  3.35e-01  7.94e-03  9.74e-03  4.19e-01  
  6  +3.3975e-01  +9.4778e-01  6.08e-01  1.84e-03  1.43e-01  6.75e-05  4.88e-03  7.82e-01  
  7  +2.8335e-01  +5.5504e-01  2.72e-01  7.72e-04  5.92e-02  5.55e-05  2.31e-03  6.52e-01  
  8  +2.5292e-01  +3.9357e-01  1.41e-01  3.78e-04  2.94e-02  3.88e-05  1.23e-03  5.98e-01  
  9  +2.4321e-01  +3.4851e-01  1.05e-01  2.70e-04  2.15e-02  3.41e-05  9.09e-04  4.21e-01  
 10  +2.3042e-01  +2.8549e-01  5.51e-02  1.37e-04  1.10e-02  1.88e-05  4.89e-04  5.38e-01  
 11  +2.1931e-01  +2.3085e-01  1.15e-02  2.80e-05  2.25e-03  5.15e-06  1.08e-04  9.90e-01  
 12  +2.1618e-01  +2.1817e-01  1.99e-03  4.84e-06  3.86e-04  8.21e-07  1.95e-05  8.32e-01  
 13  +2.1556e-01  +2.1571e-01  1.55e-04  3.76e-07  2.99e-05  6.18e-08  1.57e-06  9.88e-01  
 14  +2.1550e-01  +2.1550e-01  1.94e-06  4.70e-09  3.74e-07  7.70e-10  1.96e-08  9.88e-01  
 15  +2.1550e-01  +2.1550e-01  1.94e-08  4.71e-11  3.74e-09  7.71e-12  1.97e-10  9.90e-01  
 16  +2.1550e-01  +2.1550e-01  1.94e-10  4.72e-13  3.75e-11  7.73e-14  1.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.7483ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:37 PM: Optimal value: 2.155e-01
(CVXPY) Oct 06 04:25:37 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:37 PM: Solver (including time spent in interface) took 6.251e-02 seconds
Iteration: 25, Objective: 0.2155
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:37 PM: Your problem has 771 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:37 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 771
  constraints   = 1271
  nnz(P)        = 0
  nnz(A)        = 11637
  cones (total) = 1
    : Nonnegative = 1,  numel = 1271

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +5.0242e+02  5.02e+02  9.61e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.3976e-01  +1.1105e+02  1.11e+02  4.38e-01  2.18e+01  3.87e-03  5.76e-01  5.81e-01  
  2  +5.0197e-01  +1.4905e+01  1.44e+01  1.34e-01  8.72e+00  2.23e-02  2.47e-01  9.90e-01  
  3  +4.8374e-01  +3.2600e+00  2.78e+00  2.11e-02  1.65e+00  8.10e-03  4.72e-02  8.38e-01  
  4  +4.2724e-01  +2.2792e+00  1.85e+00  5.93e-03  4.83e-01  1.23e-02  1.35e-02  7.44e-01  
  5  +3.9428e-01  +1.7635e+00  1.37e+00  4.00e-03  3.22e-01  7.12e-03  9.48e-03  4.17e-01  
  6  +3.2704e-01  +8.3945e-01  5.12e-01  1.53e-03  1.18e-01  6.17e-05  4.12e-03  8.16e-01  
  7  +2.9416e-01  +6.4687e-01  3.53e-01  1.02e-03  7.81e-02  6.49e-05  2.93e-03  4.10e-01  
  8  +2.5376e-01  +4.0459e-01  1.51e-01  4.12e-04  3.19e-02  3.42e-05  1.33e-03  6.20e-01  
  9  +2.4413e-01  +3.6318e-01  1.19e-01  3.06e-04  2.44e-02  3.55e-05  1.01e-03  4.39e-01  
 10  +2.2940e-01  +2.9211e-01  6.27e-02  1.55e-04  1.25e-02  1.97e-05  5.47e-04  5.18e-01  
 11  +2.1943e-01  +2.4454e-01  2.51e-02  6.04e-05  4.88e-03  9.20e-06  2.25e-04  7.31e-01  
 12  +2.1441e-01  +2.2271e-01  8.29e-03  1.97e-05  1.59e-03  3.05e-06  7.65e-05  6.95e-01  
 13  +2.1257e-01  +2.1496e-01  2.39e-03  5.65e-06  4.54e-04  9.18e-07  2.26e-05  7.88e-01  
 14  +2.1230e-01  +2.1388e-01  1.58e-03  3.67e-06  2.97e-04  6.48e-07  1.48e-05  6.38e-01  
 15  +2.1177e-01  +2.1197e-01  1.92e-04  4.40e-07  3.55e-05  7.88e-08  1.82e-06  9.12e-01  
 16  +2.1170e-01  +2.1170e-01  2.29e-06  5.26e-09  4.24e-07  9.38e-10  2.18e-08  9.88e-01  
 17  +2.1170e-01  +2.1170e-01  2.29e-08  5.26e-11  4.24e-09  9.38e-12  2.18e-10  9.90e-01  
 18  +2.1170e-01  +2.1170e-01  2.29e-10  5.26e-13  4.24e-11  9.41e-14  2.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.7421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:37 PM: Optimal value: 2.117e-01
(CVXPY) Oct 06 04:25:37 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:37 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 26, Objective: 0.2117
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:37 PM: Your problem has 781 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:37 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 781
  constraints   = 1281
  nnz(P)        = 0
  nnz(A)        = 11714
  cones (total) = 1
    : Nonnegative = 1,  numel = 1281

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0254e+02  5.02e+02  9.61e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.3722e-01  +1.1120e+02  1.11e+02  4.37e-01  2.17e+01  3.88e-03  5.75e-01  5.80e-01  
  2  +5.0011e-01  +1.5077e+01  1.46e+01  1.33e-01  8.59e+00  2.26e-02  2.45e-01  9.90e-01  
  3  +4.7987e-01  +3.3207e+00  2.84e+00  2.04e-02  1.59e+00  8.65e-03  4.56e-02  8.42e-01  
  4  +4.2568e-01  +2.3897e+00  1.96e+00  6.61e-03  5.32e-01  1.18e-02  1.51e-02  7.05e-01  
  5  +3.8935e-01  +1.8148e+00  1.43e+00  4.22e-03  3.36e-01  6.73e-03  1.00e-02  4.64e-01  
  6  +3.1974e-01  +8.0770e-01  4.88e-01  1.43e-03  1.10e-01  4.68e-04  3.88e-03  7.81e-01  
  7  +2.8442e-01  +6.1562e-01  3.31e-01  9.50e-04  7.24e-02  2.81e-04  2.77e-03  4.47e-01  
  8  +2.4807e-01  +3.9867e-01  1.51e-01  4.13e-04  3.15e-02  1.17e-04  1.34e-03  5.87e-01  
  9  +2.3682e-01  +3.4500e-01  1.08e-01  2.79e-04  2.19e-02  7.76e-05  9.38e-04  5.14e-01  
 10  +2.2292e-01  +2.7677e-01  5.38e-02  1.33e-04  1.06e-02  3.59e-05  4.77e-04  5.80e-01  
 11  +2.1368e-01  +2.3299e-01  1.93e-02  4.67e-05  3.71e-03  1.19e-05  1.76e-04  7.01e-01  
 12  +2.0973e-01  +2.1557e-01  5.84e-03  1.40e-05  1.11e-03  3.36e-06  5.50e-05  7.33e-01  
 13  +2.0859e-01  +2.1066e-01  2.07e-03  4.91e-06  3.89e-04  1.04e-06  1.99e-05  8.37e-01  
 14  +2.0822e-01  +2.0933e-01  1.11e-03  2.57e-06  2.04e-04  5.38e-07  1.06e-05  5.94e-01  
 15  +2.0786e-01  +2.0801e-01  1.53e-04  3.52e-07  2.80e-05  7.21e-08  1.47e-06  8.85e-01  
 16  +2.0780e-01  +2.0780e-01  1.77e-06  4.07e-09  3.23e-07  8.18e-10  1.70e-08  9.90e-01  
 17  +2.0780e-01  +2.0780e-01  1.77e-08  4.07e-11  3.23e-09  8.18e-12  1.70e-10  9.90e-01  
 18  +2.0780e-01  +2.0780e-01  1.77e-10  4.07e-13  3.23e-11  8.21e-14  1.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 52.4639ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:37 PM: Optimal value: 2.078e-01
(CVXPY) Oct 06 04:25:37 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:25:37 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 27, Objective: 0.2078
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:37 PM: Your problem has 791 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:37 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 791
  constraints   = 1291
  nnz(P)        = 0
  nnz(A)        = 11792
  cones (total) = 1
    : Nonnegative = 1,  numel = 1291

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9910e-01  +5.0258e+02  5.02e+02  9.61e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.3494e-01  +1.1134e+02  1.11e+02  4.39e-01  2.16e+01  3.88e-03  5.76e-01  5.80e-01  
  2  +4.9755e-01  +1.5281e+01  1.48e+01  1.32e-01  8.56e+00  2.29e-02  2.45e-01  9.90e-01  
  3  +4.7574e-01  +3.2000e+00  2.72e+00  1.87e-02  1.46e+00  8.83e-03  4.20e-02  8.52e-01  
  4  +4.2298e-01  +2.3920e+00  1.97e+00  6.93e-03  5.55e-01  1.07e-02  1.59e-02  6.82e-01  
  5  +3.8805e-01  +1.8740e+00  1.49e+00  4.50e-03  3.58e-01  7.00e-03  1.07e-02  4.34e-01  
  6  +3.2066e-01  +8.2973e-01  5.09e-01  1.53e-03  1.17e-01  3.68e-04  4.09e-03  7.94e-01  
  7  +2.8169e-01  +6.1541e-01  3.34e-01  9.72e-04  7.40e-02  2.19e-04  2.82e-03  4.82e-01  
  8  +2.4761e-01  +4.1045e-01  1.63e-01  4.53e-04  3.46e-02  1.01e-04  1.46e-03  5.50e-01  
  9  +2.3328e-01  +3.3792e-01  1.05e-01  2.75e-04  2.15e-02  6.44e-05  9.24e-04  4.86e-01  
 10  +2.2185e-01  +2.8267e-01  6.08e-02  1.53e-04  1.21e-02  3.62e-05  5.38e-04  5.08e-01  
 11  +2.1220e-01  +2.3739e-01  2.52e-02  6.09e-05  4.87e-03  1.44e-05  2.25e-04  6.68e-01  
 12  +2.0865e-01  +2.2257e-01  1.39e-02  3.27e-05  2.64e-03  7.75e-06  1.24e-04  5.38e-01  
 13  +2.0512e-01  +2.0801e-01  2.89e-03  6.68e-06  5.39e-04  1.33e-06  2.65e-05  9.29e-01  
 14  +2.0418e-01  +2.0463e-01  4.53e-04  1.04e-06  8.36e-05  2.00e-07  4.25e-06  8.53e-01  
 15  +2.0400e-01  +2.0401e-01  9.20e-06  2.11e-08  1.70e-06  3.95e-09  8.70e-08  9.90e-01  
 16  +2.0400e-01  +2.0400e-01  9.21e-08  2.11e-10  1.70e-08  3.95e-11  8.70e-10  9.90e-01  
 17  +2.0400e-01  +2.0400e-01  9.21e-10  2.11e-12  1.70e-10  3.95e-13  8.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.5808ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:37 PM: Optimal value: 2.040e-01
(CVXPY) Oct 06 04:25:37 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:25:37 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 28, Objective: 0.2040
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:38 PM: Your problem has 801 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:38 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 801
  constraints   = 1301
  nnz(P)        = 0
  nnz(A)        = 11845
  cones (total) = 1
    : Nonnegative = 1,  numel = 1301

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +5.0257e+02  5.02e+02  9.61e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.3309e-01  +1.1137e+02  1.11e+02  4.39e-01  2.15e+01  3.89e-03  5.75e-01  5.80e-01  
  2  +4.9633e-01  +1.5345e+01  1.48e+01  1.31e-01  8.46e+00  2.30e-02  2.44e-01  9.90e-01  
  3  +4.7328e-01  +3.3311e+00  2.86e+00  1.92e-02  1.49e+00  9.13e-03  4.30e-02  8.49e-01  
  4  +4.2066e-01  +2.4254e+00  2.00e+00  7.21e-03  5.74e-01  1.02e-02  1.66e-02  6.76e-01  
  5  +3.8289e-01  +1.8905e+00  1.51e+00  4.53e-03  3.58e-01  6.51e-03  1.08e-02  4.78e-01  
  6  +3.1846e-01  +8.3667e-01  5.18e-01  1.56e-03  1.19e-01  5.93e-04  4.20e-03  7.65e-01  
  7  +2.7306e-01  +5.8312e-01  3.10e-01  9.01e-04  6.82e-02  2.76e-04  2.67e-03  5.95e-01  
  8  +2.3927e-01  +3.7482e-01  1.36e-01  3.74e-04  2.85e-02  1.11e-04  1.23e-03  6.09e-01  
  9  +2.2786e-01  +3.2113e-01  9.33e-02  2.40e-04  1.89e-02  7.31e-05  8.18e-04  4.77e-01  
 10  +2.1452e-01  +2.5592e-01  4.14e-02  1.02e-04  8.11e-03  2.68e-05  3.70e-04  7.29e-01  
 11  +2.0660e-01  +2.2095e-01  1.43e-02  3.44e-05  2.74e-03  8.33e-06  1.32e-04  7.33e-01  
 12  +2.0294e-01  +2.0550e-01  2.56e-03  6.12e-06  4.85e-04  1.35e-06  2.47e-05  8.28e-01  
 13  +2.0216e-01  +2.0235e-01  1.84e-04  4.40e-07  3.47e-05  8.57e-08  1.83e-06  9.46e-01  
 14  +2.0210e-01  +2.0210e-01  1.91e-06  4.56e-09  3.59e-07  8.80e-10  1.90e-08  9.90e-01  
 15  +2.0210e-01  +2.0210e-01  1.91e-08  4.57e-11  3.60e-09  8.81e-12  1.91e-10  9.90e-01  
 16  +2.0210e-01  +2.0210e-01  1.91e-10  4.58e-13  3.61e-11  8.83e-14  1.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 50.8128ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:38 PM: Optimal value: 2.021e-01
(CVXPY) Oct 06 04:25:38 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:38 PM: Solver (including time spent in interface) took 4.689e-02 seconds
Iteration: 29, Objective: 0.2021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:38 PM: Your problem has 811 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:38 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 811
  constraints   = 1311
  nnz(P)        = 0
  nnz(A)        = 11923
  cones (total) = 1
    : Nonnegative = 1,  numel = 1311

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9903e-01  +5.0255e+02  5.02e+02  9.61e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.3056e-01  +1.1150e+02  1.11e+02  4.39e-01  2.13e+01  3.89e-03  5.75e-01  5.79e-01  
  2  +4.9401e-01  +1.5573e+01  1.51e+01  1.31e-01  8.38e+00  2.33e-02  2.43e-01  9.90e-01  
  3  +4.6825e-01  +3.3435e+00  2.88e+00  1.83e-02  1.42e+00  9.60e-03  4.10e-02  8.56e-01  
  4  +4.0820e-01  +2.4056e+00  2.00e+00  6.73e-03  5.34e-01  1.04e-02  1.56e-02  6.96e-01  
  5  +3.6727e-01  +1.6113e+00  1.24e+00  3.94e-03  3.07e-01  3.19e-03  9.64e-03  5.98e-01  
  6  +3.0263e-01  +7.3906e-01  4.36e-01  1.33e-03  1.00e-01  7.00e-04  3.65e-03  6.76e-01  
  7  +2.6804e-01  +5.5937e-01  2.91e-01  8.53e-04  6.48e-02  3.99e-04  2.52e-03  4.75e-01  
  8  +2.3479e-01  +3.6666e-01  1.32e-01  3.63e-04  2.79e-02  1.66e-04  1.19e-03  5.95e-01  
  9  +2.2444e-01  +3.2050e-01  9.61e-02  2.47e-04  1.96e-02  1.11e-04  8.38e-04  4.26e-01  
 10  +2.0966e-01  +2.4980e-01  4.01e-02  9.82e-05  7.89e-03  3.48e-05  3.57e-04  7.44e-01  
 11  +2.0202e-01  +2.1652e-01  1.45e-02  3.47e-05  2.79e-03  1.06e-05  1.33e-04  7.29e-01  
 12  +1.9833e-01  +2.0113e-01  2.80e-03  6.70e-06  5.35e-04  1.85e-06  2.69e-05  8.12e-01  
 13  +1.9748e-01  +1.9769e-01  2.17e-04  5.21e-07  4.14e-05  1.22e-07  2.15e-06  9.41e-01  
 14  +1.9740e-01  +1.9740e-01  2.26e-06  5.43e-09  4.31e-07  1.25e-09  2.24e-08  9.90e-01  
 15  +1.9740e-01  +1.9740e-01  2.26e-08  5.43e-11  4.31e-09  1.25e-11  2.25e-10  9.90e-01  
 16  +1.9740e-01  +1.9740e-01  2.26e-10  5.44e-13  4.32e-11  1.25e-13  2.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.1997ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:38 PM: Optimal value: 1.974e-01
(CVXPY) Oct 06 04:25:38 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:38 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 30, Objective: 0.1974
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:38 PM: Your problem has 821 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:38 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 821
  constraints   = 1321
  nnz(P)        = 0
  nnz(A)        = 11984
  cones (total) = 1
    : Nonnegative = 1,  numel = 1321

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +5.0256e+02  5.02e+02  9.62e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.2909e-01  +1.1157e+02  1.11e+02  4.40e-01  2.12e+01  3.90e-03  5.75e-01  5.79e-01  
  2  +4.9267e-01  +1.5669e+01  1.52e+01  1.30e-01  8.31e+00  2.35e-02  2.42e-01  9.90e-01  
  3  +4.6536e-01  +3.3248e+00  2.86e+00  1.77e-02  1.37e+00  9.76e-03  3.98e-02  8.61e-01  
  4  +4.0440e-01  +2.4498e+00  2.05e+00  6.85e-03  5.40e-01  1.03e-02  1.58e-02  6.90e-01  
  5  +3.6987e-01  +1.7154e+00  1.35e+00  4.37e-03  3.39e-01  3.70e-03  1.07e-02  5.31e-01  
  6  +3.0429e-01  +7.6698e-01  4.63e-01  1.42e-03  1.07e-01  7.19e-04  3.85e-03  7.13e-01  
  7  +2.6578e-01  +5.6763e-01  3.02e-01  8.85e-04  6.71e-02  3.89e-04  2.60e-03  5.14e-01  
  8  +2.3110e-01  +3.6409e-01  1.33e-01  3.66e-04  2.83e-02  1.59e-04  1.18e-03  6.03e-01  
  9  +2.2064e-01  +3.1763e-01  9.70e-02  2.51e-04  1.99e-02  1.06e-04  8.40e-04  4.25e-01  
 10  +2.0727e-01  +2.5370e-01  4.64e-02  1.15e-04  9.26e-03  4.06e-05  4.12e-04  6.63e-01  
 11  +1.9766e-01  +2.1038e-01  1.27e-02  3.09e-05  2.48e-03  9.33e-06  1.17e-04  7.85e-01  
 12  +1.9433e-01  +1.9629e-01  1.97e-03  4.79e-06  3.83e-04  1.21e-06  1.92e-05  8.66e-01  
 13  +1.9392e-01  +1.9467e-01  7.51e-04  1.83e-06  1.46e-04  4.41e-07  7.46e-06  6.62e-01  
 14  +1.9370e-01  +1.9384e-01  1.42e-04  3.45e-07  2.75e-05  7.61e-08  1.42e-06  8.65e-01  
 15  +1.9365e-01  +1.9365e-01  1.59e-06  3.87e-09  3.08e-07  8.44e-10  1.60e-08  9.89e-01  
 16  +1.9365e-01  +1.9365e-01  1.60e-08  3.87e-11  3.09e-09  8.45e-12  1.60e-10  9.90e-01  
 17  +1.9365e-01  +1.9365e-01  1.60e-10  3.89e-13  3.10e-11  8.49e-14  1.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.3311ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:38 PM: Optimal value: 1.937e-01
(CVXPY) Oct 06 04:25:38 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:38 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 31, Objective: 0.1937
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:38 PM: Your problem has 831 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:38 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 831
  constraints   = 1331
  nnz(P)        = 0
  nnz(A)        = 12033
  cones (total) = 1
    : Nonnegative = 1,  numel = 1331

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +5.0255e+02  5.02e+02  9.62e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.2834e-01  +1.1153e+02  1.11e+02  4.40e-01  2.11e+01  3.90e-03  5.75e-01  5.80e-01  
  2  +4.9182e-01  +1.5721e+01  1.52e+01  1.29e-01  8.23e+00  2.35e-02  2.41e-01  9.90e-01  
  3  +4.6312e-01  +3.3242e+00  2.86e+00  1.73e-02  1.33e+00  9.94e-03  3.90e-02  8.64e-01  
  4  +4.0486e-01  +2.5114e+00  2.11e+00  7.18e-03  5.64e-01  1.03e-02  1.66e-02  6.61e-01  
  5  +3.7049e-01  +1.7756e+00  1.41e+00  4.54e-03  3.52e-01  4.42e-03  1.11e-02  4.96e-01  
  6  +3.0476e-01  +7.8546e-01  4.81e-01  1.48e-03  1.11e-01  7.29e-04  4.02e-03  7.35e-01  
  7  +2.6506e-01  +5.7475e-01  3.10e-01  9.12e-04  6.88e-02  3.87e-04  2.69e-03  5.23e-01  
  8  +2.2971e-01  +3.6403e-01  1.34e-01  3.71e-04  2.85e-02  1.53e-04  1.21e-03  6.20e-01  
  9  +2.1999e-01  +3.1997e-01  1.00e-01  2.62e-04  2.06e-02  1.04e-04  8.81e-04  4.03e-01  
 10  +2.0649e-01  +2.5545e-01  4.90e-02  1.23e-04  9.75e-03  4.57e-05  4.40e-04  5.79e-01  
 11  +1.9676e-01  +2.1014e-01  1.34e-02  3.28e-05  2.61e-03  1.02e-05  1.25e-04  7.91e-01  
 12  +1.9335e-01  +1.9544e-01  2.08e-03  5.12e-06  4.04e-04  1.29e-06  2.06e-05  8.72e-01  
 13  +1.9292e-01  +1.9370e-01  7.81e-04  1.92e-06  1.51e-04  4.60e-07  7.89e-06  6.71e-01  
 14  +1.9270e-01  +1.9286e-01  1.52e-04  3.72e-07  2.93e-05  8.12e-08  1.55e-06  8.61e-01  
 15  +1.9265e-01  +1.9265e-01  1.73e-06  4.23e-09  3.34e-07  9.11e-10  1.77e-08  9.89e-01  
 16  +1.9265e-01  +1.9265e-01  1.73e-08  4.24e-11  3.34e-09  9.12e-12  1.77e-10  9.90e-01  
 17  +1.9265e-01  +1.9265e-01  1.74e-10  4.25e-13  3.35e-11  9.17e-14  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.7208ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:39 PM: Optimal value: 1.927e-01
(CVXPY) Oct 06 04:25:39 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:25:39 PM: Solver (including time spent in interface) took 6.251e-02 seconds
Iteration: 32, Objective: 0.1927
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:39 PM: Your problem has 841 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:39 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 841
  constraints   = 1341
  nnz(P)        = 0
  nnz(A)        = 12097
  cones (total) = 1
    : Nonnegative = 1,  numel = 1341

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +5.0279e+02  5.02e+02  9.62e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.2447e-01  +1.1178e+02  1.11e+02  4.39e-01  2.10e+01  3.91e-03  5.74e-01  5.79e-01  
  2  +4.8788e-01  +1.5987e+01  1.55e+01  1.28e-01  8.12e+00  2.39e-02  2.39e-01  9.90e-01  
  3  +4.5557e-01  +3.4118e+00  2.96e+00  1.70e-02  1.30e+00  1.03e-02  3.84e-02  8.64e-01  
  4  +3.9987e-01  +2.6267e+00  2.23e+00  7.81e-03  6.08e-01  9.83e-03  1.82e-02  6.24e-01  
  5  +3.5729e-01  +1.6758e+00  1.32e+00  4.27e-03  3.28e-01  2.90e-03  1.05e-02  6.32e-01  
  6  +2.9378e-01  +7.3225e-01  4.38e-01  1.37e-03  1.02e-01  6.22e-04  3.79e-03  6.90e-01  
  7  +2.5784e-01  +5.4292e-01  2.85e-01  8.52e-04  6.39e-02  3.47e-04  2.54e-03  5.04e-01  
  8  +2.2904e-01  +3.7517e-01  1.46e-01  4.11e-04  3.14e-02  1.68e-04  1.32e-03  5.47e-01  
  9  +2.1857e-01  +3.2416e-01  1.06e-01  2.83e-04  2.21e-02  1.13e-04  9.46e-04  3.84e-01  
 10  +2.0502e-01  +2.5708e-01  5.21e-02  1.33e-04  1.05e-02  5.01e-05  4.74e-04  5.79e-01  
 11  +2.0294e-01  +2.4589e-01  4.29e-02  1.09e-04  8.65e-03  3.75e-05  3.91e-04  3.34e-01  
 12  +1.9350e-01  +2.0220e-01  8.69e-03  2.16e-05  1.72e-03  5.59e-06  8.34e-05  8.69e-01  
 13  +1.9141e-01  +1.9344e-01  2.03e-03  5.07e-06  3.99e-04  1.16e-06  2.06e-05  7.96e-01  
 14  +1.9089e-01  +1.9140e-01  5.15e-04  1.27e-06  9.99e-05  2.54e-07  5.34e-06  8.56e-01  
 15  +1.9070e-01  +1.9071e-01  8.21e-06  2.02e-08  1.59e-06  3.80e-09  8.60e-08  9.86e-01  
 16  +1.9070e-01  +1.9070e-01  8.23e-08  2.03e-10  1.59e-08  3.81e-11  8.61e-10  9.90e-01  
 17  +1.9070e-01  +1.9070e-01  8.27e-10  2.04e-12  1.60e-10  3.84e-13  8.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:39 PM: Optimal value: 1.907e-01
(CVXPY) Oct 06 04:25:39 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:39 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 33, Objective: 0.1907
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:39 PM: Your problem has 843 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 843
  constraints   = 1343
  nnz(P)        = 0
  nnz(A)        = 12119
  cones (total) = 1
    : Nonnegative = 1,  numel = 1343

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9897e-01  +5.0281e+02  5.02e+02  9.62e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.2365e-01  +1.1177e+02  1.11e+02  4.39e-01  2.09e+01  3.91e-03  5.74e-01  5.79e-01  
  2  +4.8690e-01  +1.6028e+01  1.55e+01  1.27e-01  8.07e+00  2.40e-02  2.38e-01  9.90e-01  
  3  +4.5343e-01  +3.3922e+00  2.94e+00  1.66e-02  1.28e+00  1.03e-02  3.77e-02  8.67e-01  
  4  +3.9816e-01  +2.6909e+00  2.29e+00  8.03e-03  6.24e-01  9.92e-03  1.87e-02  6.11e-01  
  5  +3.5880e-01  +1.8110e+00  1.45e+00  4.68e-03  3.60e-01  3.89e-03  1.15e-02  5.63e-01  
  6  +2.9603e-01  +7.8798e-01  4.92e-01  1.54e-03  1.15e-01  7.32e-04  4.22e-03  7.13e-01  
  7  +2.5006e-01  +5.2907e-01  2.79e-01  8.37e-04  6.23e-02  3.18e-04  2.53e-03  6.22e-01  
  8  +2.1999e-01  +3.4579e-01  1.26e-01  3.54e-04  2.69e-02  1.33e-04  1.17e-03  6.19e-01  
  9  +2.0805e-01  +2.8601e-01  7.80e-02  2.08e-04  1.61e-02  6.96e-05  7.17e-04  5.59e-01  
 10  +2.0170e-01  +2.5345e-01  5.17e-02  1.36e-04  1.06e-02  4.36e-05  4.84e-04  3.98e-01  
 11  +1.9938e-01  +2.4055e-01  4.12e-02  1.06e-04  8.39e-03  3.02e-05  3.83e-04  4.33e-01  
 12  +1.9013e-01  +1.9766e-01  7.53e-03  1.92e-05  1.51e-03  4.51e-06  7.35e-05  8.58e-01  
 13  +1.8841e-01  +1.9026e-01  1.85e-03  4.74e-06  3.70e-04  1.03e-06  1.88e-05  7.75e-01  
 14  +1.8801e-01  +1.8862e-01  6.12e-04  1.55e-06  1.21e-04  3.06e-07  6.34e-06  7.79e-01  
 15  +1.8781e-01  +1.8784e-01  2.64e-05  6.66e-08  5.19e-06  1.12e-08  2.76e-07  9.84e-01  
 16  +1.8780e-01  +1.8780e-01  2.65e-07  6.70e-10  5.21e-08  1.13e-10  2.77e-09  9.90e-01  
 17  +1.8780e-01  +1.8780e-01  2.66e-09  6.71e-12  5.22e-10  1.13e-12  2.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.8677ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:39 PM: Optimal value: 1.878e-01
(CVXPY) Oct 06 04:25:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:39 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 34, Objective: 0.1878
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:39 PM: Your problem has 853 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:39 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 853
  constraints   = 1353
  nnz(P)        = 0
  nnz(A)        = 12162
  cones (total) = 1
    : Nonnegative = 1,  numel = 1353

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +5.0281e+02  5.02e+02  9.62e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.2241e-01  +1.1180e+02  1.11e+02  4.39e-01  2.08e+01  3.92e-03  5.73e-01  5.80e-01  
  2  +4.8562e-01  +1.6097e+01  1.56e+01  1.26e-01  7.99e+00  2.41e-02  2.37e-01  9.90e-01  
  3  +4.5067e-01  +3.4115e+00  2.96e+00  1.64e-02  1.25e+00  1.05e-02  3.72e-02  8.70e-01  
  4  +3.9445e-01  +2.7560e+00  2.36e+00  8.13e-03  6.30e-01  1.02e-02  1.89e-02  6.00e-01  
  5  +3.4377e-01  +1.5332e+00  1.19e+00  3.76e-03  2.87e-01  2.35e-03  9.37e-03  6.96e-01  
  6  +2.7970e-01  +6.7781e-01  3.98e-01  1.25e-03  9.20e-02  5.05e-04  3.52e-03  6.98e-01  
  7  +2.4499e-01  +5.0149e-01  2.56e-01  7.62e-04  5.69e-02  2.83e-04  2.31e-03  5.29e-01  
  8  +2.1743e-01  +3.4314e-01  1.26e-01  3.50e-04  2.67e-02  1.27e-04  1.15e-03  6.03e-01  
  9  +2.0284e-01  +2.7155e-01  6.87e-02  1.80e-04  1.41e-02  6.16e-05  6.20e-04  5.87e-01  
 10  +1.9598e-01  +2.3635e-01  4.04e-02  1.03e-04  8.16e-03  3.05e-05  3.69e-04  6.00e-01  
 11  +1.8960e-01  +2.0485e-01  1.52e-02  3.92e-05  3.05e-03  6.04e-06  1.47e-04  9.90e-01  
 12  +1.8750e-01  +1.9681e-01  9.30e-03  2.35e-05  1.86e-03  3.92e-06  8.95e-05  7.42e-01  
 13  +1.8608e-01  +1.9125e-01  5.17e-03  1.31e-05  1.03e-03  2.18e-06  5.08e-05  5.84e-01  
 14  +1.8457e-01  +1.8555e-01  9.77e-04  2.47e-06  1.94e-04  4.01e-07  9.85e-06  8.20e-01  
 15  +1.8424e-01  +1.8435e-01  1.05e-04  2.63e-07  2.06e-05  4.21e-08  1.07e-06  9.42e-01  
 16  +1.8420e-01  +1.8420e-01  1.09e-06  2.72e-09  2.14e-07  4.35e-10  1.11e-08  9.90e-01  
 17  +1.8420e-01  +1.8420e-01  1.09e-08  2.73e-11  2.14e-09  4.36e-12  1.11e-10  9.90e-01  
 18  +1.8420e-01  +1.8420e-01  1.11e-10  2.77e-13  2.17e-11  4.44e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.0707ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:39 PM: Optimal value: 1.842e-01
(CVXPY) Oct 06 04:25:39 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:39 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 35, Objective: 0.1842
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:39 PM: Your problem has 863 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:39 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 863
  constraints   = 1363
  nnz(P)        = 0
  nnz(A)        = 12261
  cones (total) = 1
    : Nonnegative = 1,  numel = 1363

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9895e-01  +5.0280e+02  5.02e+02  9.62e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.2081e-01  +1.1177e+02  1.11e+02  4.38e-01  2.07e+01  3.92e-03  5.72e-01  5.80e-01  
  2  +4.8400e-01  +1.6204e+01  1.57e+01  1.26e-01  7.88e+00  2.42e-02  2.36e-01  9.90e-01  
  3  +4.4662e-01  +3.4661e+00  3.02e+00  1.62e-02  1.23e+00  1.08e-02  3.68e-02  8.70e-01  
  4  +3.8857e-01  +2.8177e+00  2.43e+00  8.17e-03  6.29e-01  1.05e-02  1.90e-02  5.91e-01  
  5  +3.3528e-01  +1.3659e+00  1.03e+00  3.38e-03  2.54e-01  9.93e-05  8.61e-03  8.49e-01  
  6  +2.7140e-01  +6.5199e-01  3.81e-01  1.20e-03  8.79e-02  7.28e-05  3.46e-03  7.13e-01  
  7  +2.3602e-01  +4.6141e-01  2.25e-01  6.71e-04  4.97e-02  6.19e-05  2.08e-03  5.70e-01  
  8  +2.1627e-01  +3.5093e-01  1.35e-01  3.80e-04  2.87e-02  4.28e-05  1.24e-03  5.22e-01  
  9  +1.9929e-01  +2.6538e-01  6.61e-02  1.74e-04  1.34e-02  2.29e-05  6.06e-04  5.99e-01  
 10  +1.9457e-01  +2.4059e-01  4.60e-02  1.18e-04  9.25e-03  1.75e-05  4.23e-04  5.06e-01  
 11  +1.8741e-01  +2.0517e-01  1.78e-02  4.52e-05  3.51e-03  7.71e-06  1.70e-04  9.90e-01  
 12  +1.8191e-01  +1.8357e-01  1.66e-03  4.19e-06  3.25e-04  5.66e-07  1.68e-05  9.24e-01  
 13  +1.8136e-01  +1.8152e-01  1.60e-04  4.05e-07  3.12e-05  5.53e-08  1.68e-06  9.29e-01  
 14  +1.8130e-01  +1.8130e-01  1.75e-06  4.43e-09  3.41e-07  6.00e-10  1.84e-08  9.89e-01  
 15  +1.8130e-01  +1.8130e-01  1.78e-08  4.51e-11  3.47e-09  6.10e-12  1.88e-10  9.90e-01  
 16  +1.8130e-01  +1.8130e-01  1.78e-10  4.52e-13  3.48e-11  6.12e-14  1.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 58.992ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:40 PM: Optimal value: 1.813e-01
(CVXPY) Oct 06 04:25:40 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:40 PM: Solver (including time spent in interface) took 6.251e-02 seconds
Iteration: 36, Objective: 0.1813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:40 PM: Your problem has 873 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:40 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 873
  constraints   = 1373
  nnz(P)        = 0
  nnz(A)        = 12325
  cones (total) = 1
    : Nonnegative = 1,  numel = 1373

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +5.0281e+02  5.02e+02  9.62e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.1965e-01  +1.1183e+02  1.11e+02  4.38e-01  2.06e+01  3.93e-03  5.71e-01  5.80e-01  
  2  +4.8295e-01  +1.6247e+01  1.58e+01  1.25e-01  7.79e+00  2.43e-02  2.35e-01  9.90e-01  
  3  +4.4430e-01  +3.5113e+00  3.07e+00  1.62e-02  1.23e+00  1.08e-02  3.70e-02  8.69e-01  
  4  +3.8825e-01  +2.9308e+00  2.54e+00  8.64e-03  6.62e-01  1.06e-02  2.02e-02  5.72e-01  
  5  +3.3334e-01  +1.3551e+00  1.02e+00  3.31e-03  2.49e-01  1.02e-04  8.44e-03  8.60e-01  
  6  +2.7244e-01  +6.8751e-01  4.15e-01  1.31e-03  9.59e-02  7.41e-05  3.75e-03  6.60e-01  
  7  +2.3406e-01  +4.5824e-01  2.24e-01  6.76e-04  4.96e-02  5.48e-05  2.11e-03  5.64e-01  
  8  +2.0966e-01  +3.2307e-01  1.13e-01  3.17e-04  2.39e-02  3.53e-05  1.06e-03  6.34e-01  
  9  +1.9684e-01  +2.6056e-01  6.37e-02  1.69e-04  1.29e-02  2.21e-05  5.98e-04  6.14e-01  
 10  +1.8828e-01  +2.1971e-01  3.14e-02  8.08e-05  6.23e-03  1.13e-05  3.02e-04  6.06e-01  
 11  +1.8071e-01  +1.8544e-01  4.73e-03  1.20e-05  9.20e-04  1.53e-06  4.84e-05  8.75e-01  
 12  +1.7936e-01  +1.7984e-01  4.77e-04  1.22e-06  9.25e-05  1.40e-07  5.21e-06  9.06e-01  
 13  +1.7920e-01  +1.7921e-01  8.69e-06  2.22e-08  1.68e-06  2.51e-09  9.64e-08  9.83e-01  
 14  +1.7920e-01  +1.7920e-01  8.74e-08  2.23e-10  1.69e-08  2.52e-11  9.69e-10  9.90e-01  
 15  +1.7920e-01  +1.7920e-01  8.74e-10  2.23e-12  1.69e-10  2.52e-13  9.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 56.3767ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:40 PM: Optimal value: 1.792e-01
(CVXPY) Oct 06 04:25:40 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:40 PM: Solver (including time spent in interface) took 6.248e-02 seconds
Iteration: 37, Objective: 0.1792
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:40 PM: Your problem has 883 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:40 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 883
  constraints   = 1383
  nnz(P)        = 0
  nnz(A)        = 12371
  cones (total) = 1
    : Nonnegative = 1,  numel = 1383

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9896e-01  +5.0279e+02  5.02e+02  9.62e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.1799e-01  +1.1187e+02  1.11e+02  4.37e-01  2.04e+01  3.94e-03  5.70e-01  5.81e-01  
  2  +4.8133e-01  +1.6348e+01  1.59e+01  1.24e-01  7.69e+00  2.44e-02  2.33e-01  9.90e-01  
  3  +4.4113e-01  +3.6252e+00  3.18e+00  1.65e-02  1.24e+00  1.11e-02  3.75e-02  8.64e-01  
  4  +3.8442e-01  +2.9380e+00  2.55e+00  8.58e-03  6.56e-01  1.06e-02  2.00e-02  5.68e-01  
  5  +3.3196e-01  +1.3826e+00  1.05e+00  3.45e-03  2.58e-01  9.97e-05  8.78e-03  8.54e-01  
  6  +2.6877e-01  +6.5320e-01  3.84e-01  1.22e-03  8.89e-02  6.63e-05  3.49e-03  6.96e-01  
  7  +2.3356e-01  +4.6811e-01  2.35e-01  7.02e-04  5.17e-02  5.75e-05  2.16e-03  5.27e-01  
  8  +2.0699e-01  +3.2384e-01  1.17e-01  3.22e-04  2.43e-02  3.61e-05  1.07e-03  6.29e-01  
  9  +1.9322e-01  +2.5670e-01  6.35e-02  1.66e-04  1.28e-02  2.23e-05  5.85e-04  6.26e-01  
 10  +1.8178e-01  +2.0210e-01  2.03e-02  5.17e-05  3.98e-03  7.54e-06  1.95e-04  8.08e-01  
 11  +1.7621e-01  +1.7794e-01  1.73e-03  4.41e-06  3.37e-04  4.99e-07  1.79e-05  9.22e-01  
 12  +1.7566e-01  +1.7582e-01  1.58e-04  4.02e-07  3.04e-05  5.51e-08  1.72e-06  9.73e-01  
 13  +1.7560e-01  +1.7560e-01  1.70e-06  4.34e-09  3.29e-07  5.89e-10  1.87e-08  9.89e-01  
 14  +1.7560e-01  +1.7560e-01  1.74e-08  4.44e-11  3.36e-09  6.03e-12  1.91e-10  9.90e-01  
 15  +1.7560e-01  +1.7560e-01  1.74e-10  4.45e-13  3.37e-11  6.04e-14  1.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.0213ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:40 PM: Optimal value: 1.756e-01
(CVXPY) Oct 06 04:25:40 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:40 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 38, Objective: 0.1756
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:40 PM: Your problem has 893 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:40 PM: Finished problem compilation (took 2.090e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 893
  constraints   = 1393
  nnz(P)        = 0
  nnz(A)        = 12408
  cones (total) = 1
    : Nonnegative = 1,  numel = 1393

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9897e-01  +5.0283e+02  5.02e+02  9.63e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.1678e-01  +1.1187e+02  1.11e+02  4.37e-01  2.03e+01  3.95e-03  5.69e-01  5.81e-01  
  2  +4.7980e-01  +1.6443e+01  1.60e+01  1.23e-01  7.60e+00  2.45e-02  2.31e-01  9.90e-01  
  3  +4.3752e-01  +3.6813e+00  3.24e+00  1.63e-02  1.22e+00  1.14e-02  3.71e-02  8.65e-01  
  4  +3.8360e-01  +2.9787e+00  2.60e+00  8.78e-03  6.69e-01  1.06e-02  2.05e-02  5.43e-01  
  5  +3.2701e-01  +1.2906e+00  9.64e-01  3.13e-03  2.33e-01  1.01e-04  8.01e-03  8.62e-01  
  6  +2.6822e-01  +6.9987e-01  4.32e-01  1.37e-03  9.95e-02  8.27e-05  3.90e-03  6.36e-01  
  7  +2.2866e-01  +4.4954e-01  2.21e-01  6.65e-04  4.85e-02  5.47e-05  2.08e-03  5.74e-01  
  8  +2.0589e-01  +3.2842e-01  1.23e-01  3.40e-04  2.55e-02  3.93e-05  1.13e-03  6.20e-01  
  9  +1.9089e-01  +2.5308e-01  6.22e-02  1.63e-04  1.25e-02  2.28e-05  5.73e-04  6.81e-01  
 10  +1.8356e-01  +2.1791e-01  3.44e-02  8.84e-05  6.80e-03  1.29e-05  3.24e-04  5.43e-01  
 11  +1.7525e-01  +1.7977e-01  4.52e-03  1.15e-05  8.83e-04  1.54e-06  4.54e-05  9.21e-01  
 12  +1.7425e-01  +1.7577e-01  1.53e-03  3.90e-06  2.97e-04  5.29e-07  1.61e-05  7.19e-01  
 13  +1.7379e-01  +1.7403e-01  2.43e-04  6.15e-07  4.66e-05  8.77e-08  2.64e-06  9.16e-01  
 14  +1.7370e-01  +1.7370e-01  2.85e-06  7.23e-09  5.47e-07  1.02e-09  3.12e-08  9.90e-01  
 15  +1.7370e-01  +1.7370e-01  2.87e-08  7.27e-11  5.50e-09  1.03e-11  3.13e-10  9.90e-01  
 16  +1.7370e-01  +1.7370e-01  2.88e-10  7.29e-13  5.51e-11  1.03e-13  3.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.7125ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:40 PM: Optimal value: 1.737e-01
(CVXPY) Oct 06 04:25:40 PM: Compilation took 2.090e-02 seconds
(CVXPY) Oct 06 04:25:40 PM: Solver (including time spent in interface) took 5.763e-02 seconds
Iteration: 39, Objective: 0.1737
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:40 PM: Your problem has 903 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:40 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 903
  constraints   = 1403
  nnz(P)        = 0
  nnz(A)        = 12456
  cones (total) = 1
    : Nonnegative = 1,  numel = 1403

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +5.0283e+02  5.02e+02  9.63e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.1352e-01  +1.1220e+02  1.12e+02  4.36e-01  2.02e+01  3.97e-03  5.68e-01  5.80e-01  
  2  +4.7734e-01  +1.6581e+01  1.61e+01  1.22e-01  7.53e+00  2.48e-02  2.30e-01  9.90e-01  
  3  +4.3406e-01  +3.7680e+00  3.33e+00  1.67e-02  1.25e+00  1.13e-02  3.81e-02  8.59e-01  
  4  +3.7744e-01  +3.0465e+00  2.67e+00  8.94e-03  6.78e-01  1.06e-02  2.09e-02  5.42e-01  
  5  +3.2851e-01  +1.4976e+00  1.17e+00  3.90e-03  2.89e-01  9.87e-05  9.93e-03  8.65e-01  
  6  +2.6439e-01  +6.2750e-01  3.63e-01  1.17e-03  8.44e-02  5.36e-05  3.36e-03  7.30e-01  
  7  +2.3446e-01  +4.9196e-01  2.58e-01  7.84e-04  5.73e-02  6.01e-05  2.38e-03  4.81e-01  
  8  +2.0409e-01  +3.2533e-01  1.21e-01  3.39e-04  2.54e-02  3.65e-05  1.13e-03  6.54e-01  
  9  +1.9110e-01  +2.6143e-01  7.03e-02  1.88e-04  1.43e-02  2.38e-05  6.57e-04  5.95e-01  
 10  +1.8270e-01  +2.2190e-01  3.92e-02  1.02e-04  7.83e-03  1.33e-05  3.73e-04  4.69e-01  
 11  +1.7363e-01  +1.7877e-01  5.14e-03  1.33e-05  1.01e-03  1.87e-06  5.21e-05  9.76e-01  
 12  +1.7246e-01  +1.7427e-01  1.81e-03  4.68e-06  3.54e-04  6.63e-07  1.93e-05  7.23e-01  
 13  +1.7189e-01  +1.7215e-01  2.55e-04  6.56e-07  4.95e-05  9.23e-08  2.80e-06  8.85e-01  
 14  +1.7180e-01  +1.7180e-01  2.87e-06  7.37e-09  5.56e-07  1.03e-09  3.17e-08  9.90e-01  
 15  +1.7180e-01  +1.7180e-01  2.89e-08  7.41e-11  5.59e-09  1.03e-11  3.18e-10  9.90e-01  
 16  +1.7180e-01  +1.7180e-01  2.90e-10  7.43e-13  5.60e-11  1.04e-13  3.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.0666ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:41 PM: Optimal value: 1.718e-01
(CVXPY) Oct 06 04:25:41 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:25:41 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 40, Objective: 0.1718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:41 PM: Your problem has 913 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:41 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 913
  constraints   = 1413
  nnz(P)        = 0
  nnz(A)        = 12512
  cones (total) = 1
    : Nonnegative = 1,  numel = 1413

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9892e-01  +5.0283e+02  5.02e+02  9.63e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.1255e-01  +1.1228e+02  1.12e+02  4.37e-01  2.01e+01  3.97e-03  5.69e-01  5.80e-01  
  2  +4.7641e-01  +1.6650e+01  1.62e+01  1.22e-01  7.50e+00  2.49e-02  2.31e-01  9.90e-01  
  3  +4.3261e-01  +3.8524e+00  3.42e+00  1.71e-02  1.27e+00  1.13e-02  3.90e-02  8.58e-01  
  4  +3.7626e-01  +3.1076e+00  2.73e+00  9.16e-03  6.92e-01  1.07e-02  2.15e-02  5.37e-01  
  5  +3.3178e-01  +1.5705e+00  1.24e+00  4.21e-03  3.12e-01  9.79e-05  1.07e-02  8.53e-01  
  6  +2.6818e-01  +6.5460e-01  3.86e-01  1.26e-03  9.03e-02  5.14e-05  3.56e-03  7.26e-01  
  7  +2.3697e-01  +5.1953e-01  2.83e-01  8.64e-04  6.30e-02  6.83e-05  2.60e-03  5.11e-01  
  8  +2.0660e-01  +3.4208e-01  1.35e-01  3.86e-04  2.86e-02  3.92e-05  1.27e-03  6.12e-01  
  9  +1.9448e-01  +2.8151e-01  8.70e-02  2.37e-04  1.79e-02  2.76e-05  8.13e-04  4.78e-01  
 10  +1.8223e-01  +2.2087e-01  3.86e-02  1.01e-04  7.71e-03  1.25e-05  3.69e-04  5.90e-01  
 11  +1.7460e-01  +1.8253e-01  7.93e-03  2.07e-05  1.56e-03  3.15e-06  8.10e-05  9.90e-01  
 12  +1.7273e-01  +1.7531e-01  2.58e-03  6.75e-06  5.07e-04  9.89e-07  2.77e-05  6.96e-01  
 13  +1.7203e-01  +1.7266e-01  6.33e-04  1.64e-06  1.23e-04  2.39e-07  7.02e-06  8.50e-01  
 14  +1.7180e-01  +1.7181e-01  1.02e-05  2.63e-08  1.97e-06  3.65e-09  1.14e-07  9.87e-01  
 15  +1.7180e-01  +1.7180e-01  1.02e-07  2.63e-10  1.97e-08  3.65e-11  1.14e-09  9.90e-01  
 16  +1.7180e-01  +1.7180e-01  1.02e-09  2.64e-12  1.97e-10  3.66e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.6865ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:41 PM: Optimal value: 1.718e-01
(CVXPY) Oct 06 04:25:41 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:41 PM: Solver (including time spent in interface) took 6.251e-02 seconds
Iteration: 41, Objective: 0.1718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:41 PM: Your problem has 923 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:41 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 923
  constraints   = 1423
  nnz(P)        = 0
  nnz(A)        = 12544
  cones (total) = 1
    : Nonnegative = 1,  numel = 1423

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9892e-01  +5.0284e+02  5.02e+02  9.63e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.1051e-01  +1.1234e+02  1.12e+02  4.36e-01  2.00e+01  3.97e-03  5.68e-01  5.80e-01  
  2  +4.7456e-01  +1.6691e+01  1.62e+01  1.21e-01  7.42e+00  2.50e-02  2.30e-01  9.90e-01  
  3  +4.3026e-01  +3.8697e+00  3.44e+00  1.72e-02  1.27e+00  1.11e-02  3.93e-02  8.57e-01  
  4  +3.7340e-01  +3.1655e+00  2.79e+00  9.36e-03  7.04e-01  1.07e-02  2.19e-02  5.28e-01  
  5  +3.3151e-01  +1.6124e+00  1.28e+00  4.40e-03  3.25e-01  9.69e-05  1.12e-02  8.46e-01  
  6  +2.6984e-01  +6.8932e-01  4.19e-01  1.38e-03  9.88e-02  4.55e-05  3.87e-03  6.94e-01  
  7  +2.3749e-01  +5.2947e-01  2.92e-01  9.12e-04  6.59e-02  5.80e-05  2.73e-03  4.77e-01  
  8  +2.0934e-01  +3.6553e-01  1.56e-01  4.57e-04  3.35e-02  3.78e-05  1.48e-03  5.46e-01  
  9  +1.9728e-01  +3.0449e-01  1.07e-01  2.97e-04  2.23e-02  2.96e-05  1.00e-03  4.29e-01  
 10  +1.8154e-01  +2.2385e-01  4.23e-02  1.12e-04  8.49e-03  1.31e-05  4.05e-04  6.90e-01  
 11  +1.7236e-01  +1.7900e-01  6.64e-03  1.75e-05  1.31e-03  2.40e-06  6.85e-05  9.90e-01  
 12  +1.7079e-01  +1.7297e-01  2.18e-03  5.72e-06  4.28e-04  7.78e-07  2.37e-05  7.23e-01  
 13  +1.7013e-01  +1.7049e-01  3.59e-04  9.35e-07  6.98e-05  1.28e-07  4.03e-06  8.95e-01  
 14  +1.7000e-01  +1.7001e-01  5.01e-06  1.31e-08  9.74e-07  1.77e-09  5.68e-08  9.90e-01  
 15  +1.7000e-01  +1.7000e-01  5.03e-08  1.31e-10  9.78e-09  1.77e-11  5.70e-10  9.90e-01  
 16  +1.7000e-01  +1.7000e-01  5.04e-10  1.31e-12  9.79e-11  1.78e-13  5.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.2757ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:41 PM: Optimal value: 1.700e-01
(CVXPY) Oct 06 04:25:41 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:41 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Iteration: 42, Objective: 0.1700
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:41 PM: Your problem has 933 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:41 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 933
  constraints   = 1433
  nnz(P)        = 0
  nnz(A)        = 12596
  cones (total) = 1
    : Nonnegative = 1,  numel = 1433

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9892e-01  +5.0285e+02  5.02e+02  9.63e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.0996e-01  +1.1233e+02  1.12e+02  4.37e-01  1.99e+01  3.98e-03  5.68e-01  5.80e-01  
  2  +4.7351e-01  +1.6713e+01  1.62e+01  1.21e-01  7.37e+00  2.50e-02  2.29e-01  9.90e-01  
  3  +4.2821e-01  +3.8670e+00  3.44e+00  1.70e-02  1.26e+00  1.10e-02  3.92e-02  8.58e-01  
  4  +3.7196e-01  +3.2241e+00  2.85e+00  9.55e-03  7.16e-01  1.06e-02  2.24e-02  5.28e-01  
  5  +3.2717e-01  +1.5136e+00  1.19e+00  4.01e-03  2.95e-01  9.70e-05  1.02e-02  8.57e-01  
  6  +2.6465e-01  +6.5268e-01  3.88e-01  1.27e-03  9.09e-02  5.01e-05  3.61e-03  7.03e-01  
  7  +2.3092e-01  +4.9726e-01  2.66e-01  8.16e-04  5.92e-02  6.28e-05  2.47e-03  5.34e-01  
  8  +2.1105e-01  +3.8600e-01  1.75e-01  5.09e-04  3.75e-02  4.68e-05  1.63e-03  4.28e-01  
  9  +1.9576e-01  +3.0414e-01  1.08e-01  3.01e-04  2.25e-02  3.16e-05  1.02e-03  4.58e-01  
 10  +1.8000e-01  +2.2261e-01  4.26e-02  1.13e-04  8.50e-03  1.40e-05  4.10e-04  7.07e-01  
 11  +1.7161e-01  +1.8241e-01  1.08e-02  2.83e-05  2.12e-03  3.70e-06  1.10e-04  8.59e-01  
 12  +1.6872e-01  +1.7026e-01  1.54e-03  4.04e-06  3.00e-04  4.74e-07  1.68e-05  8.64e-01  
 13  +1.6823e-01  +1.6833e-01  9.31e-05  2.44e-07  1.81e-05  3.25e-08  1.05e-06  9.86e-01  
 14  +1.6820e-01  +1.6820e-01  9.43e-07  2.48e-09  1.83e-07  3.28e-10  1.06e-08  9.90e-01  
 15  +1.6820e-01  +1.6820e-01  9.44e-09  2.48e-11  1.83e-09  3.29e-12  1.06e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.8399ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:41 PM: Optimal value: 1.682e-01
(CVXPY) Oct 06 04:25:41 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:41 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 43, Objective: 0.1682
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:42 PM: Your problem has 943 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:42 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 943
  constraints   = 1443
  nnz(P)        = 0
  nnz(A)        = 12636
  cones (total) = 1
    : Nonnegative = 1,  numel = 1443

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9891e-01  +5.0284e+02  5.02e+02  9.63e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.0904e-01  +1.1243e+02  1.12e+02  4.38e-01  1.98e+01  3.98e-03  5.68e-01  5.79e-01  
  2  +4.7232e-01  +1.6759e+01  1.63e+01  1.20e-01  7.33e+00  2.51e-02  2.29e-01  9.90e-01  
  3  +4.2674e-01  +3.8605e+00  3.43e+00  1.70e-02  1.26e+00  1.08e-02  3.93e-02  8.60e-01  
  4  +3.6816e-01  +3.2847e+00  2.92e+00  9.64e-03  7.19e-01  1.06e-02  2.27e-02  5.37e-01  
  5  +3.3113e-01  +1.6836e+00  1.35e+00  4.72e-03  3.46e-01  9.28e-05  1.20e-02  8.47e-01  
  6  +2.6997e-01  +7.0241e-01  4.32e-01  1.43e-03  1.02e-01  4.38e-05  4.03e-03  7.04e-01  
  7  +2.3650e-01  +5.3724e-01  3.01e-01  9.45e-04  6.79e-02  6.01e-05  2.84e-03  4.95e-01  
  8  +2.0869e-01  +3.7637e-01  1.68e-01  4.91e-04  3.59e-02  4.21e-05  1.59e-03  5.48e-01  
  9  +1.9524e-01  +3.0546e-01  1.10e-01  3.08e-04  2.29e-02  3.18e-05  1.05e-03  4.66e-01  
 10  +1.7950e-01  +2.2419e-01  4.47e-02  1.19e-04  8.95e-03  1.45e-05  4.35e-04  7.03e-01  
 11  +1.6966e-01  +1.7679e-01  7.13e-03  1.88e-05  1.40e-03  2.46e-06  7.46e-05  9.72e-01  
 12  +1.6806e-01  +1.7051e-01  2.45e-03  6.45e-06  4.76e-04  8.53e-07  2.71e-05  7.47e-01  
 13  +1.6724e-01  +1.6735e-01  1.09e-04  2.87e-07  2.11e-05  3.48e-08  1.25e-06  9.65e-01  
 14  +1.6720e-01  +1.6720e-01  1.10e-06  2.91e-09  2.14e-07  3.52e-10  1.27e-08  9.90e-01  
 15  +1.6720e-01  +1.6720e-01  1.11e-08  2.92e-11  2.14e-09  3.53e-12  1.27e-10  9.90e-01  
 16  +1.6720e-01  +1.6720e-01  1.11e-10  2.93e-13  2.15e-11  3.54e-14  1.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.1941ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:42 PM: Optimal value: 1.672e-01
(CVXPY) Oct 06 04:25:42 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:42 PM: Solver (including time spent in interface) took 6.273e-02 seconds
Iteration: 44, Objective: 0.1672
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:42 PM: Your problem has 953 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:42 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 953
  constraints   = 1453
  nnz(P)        = 0
  nnz(A)        = 12698
  cones (total) = 1
    : Nonnegative = 1,  numel = 1453

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9891e-01  +5.0284e+02  5.02e+02  9.63e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.0813e-01  +1.1246e+02  1.12e+02  4.38e-01  1.97e+01  3.98e-03  5.67e-01  5.80e-01  
  2  +4.7167e-01  +1.6770e+01  1.63e+01  1.20e-01  7.27e+00  2.51e-02  2.29e-01  9.90e-01  
  3  +4.2541e-01  +3.9211e+00  3.50e+00  1.73e-02  1.27e+00  1.07e-02  4.00e-02  8.58e-01  
  4  +3.6713e-01  +3.3801e+00  3.01e+00  9.97e-03  7.41e-01  1.05e-02  2.35e-02  5.34e-01  
  5  +3.2911e-01  +1.6226e+00  1.29e+00  4.48e-03  3.27e-01  9.33e-05  1.14e-02  8.51e-01  
  6  +2.6809e-01  +6.9455e-01  4.26e-01  1.41e-03  1.01e-01  4.74e-05  3.99e-03  6.98e-01  
  7  +2.3480e-01  +5.2714e-01  2.92e-01  9.21e-04  6.61e-02  5.99e-05  2.77e-03  4.97e-01  
  8  +2.0943e-01  +3.8166e-01  1.72e-01  5.08e-04  3.71e-02  4.34e-05  1.64e-03  5.16e-01  
  9  +1.9354e-01  +2.9678e-01  1.03e-01  2.89e-04  2.14e-02  3.04e-05  9.83e-04  5.32e-01  
 10  +1.7897e-01  +2.2262e-01  4.36e-02  1.17e-04  8.76e-03  1.35e-05  4.26e-04  6.24e-01  
 11  +1.7029e-01  +1.7913e-01  8.84e-03  2.35e-05  1.74e-03  3.31e-06  9.27e-05  9.90e-01  
 12  +1.6802e-01  +1.7032e-01  2.30e-03  6.09e-06  4.48e-04  8.27e-07  2.57e-05  7.96e-01  
 13  +1.6724e-01  +1.6735e-01  1.10e-04  2.92e-07  2.13e-05  3.65e-08  1.27e-06  9.67e-01  
 14  +1.6720e-01  +1.6720e-01  1.11e-06  2.95e-09  2.16e-07  3.69e-10  1.29e-08  9.90e-01  
 15  +1.6720e-01  +1.6720e-01  1.12e-08  2.97e-11  2.17e-09  3.70e-12  1.30e-10  9.90e-01  
 16  +1.6720e-01  +1.6720e-01  1.12e-10  2.97e-13  2.17e-11  3.71e-14  1.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.72ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:42 PM: Optimal value: 1.672e-01
(CVXPY) Oct 06 04:25:42 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:42 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 45, Objective: 0.1672
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:42 PM: Your problem has 963 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:42 PM: Finished problem compilation (took 1.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 963
  constraints   = 1463
  nnz(P)        = 0
  nnz(A)        = 12733
  cones (total) = 1
    : Nonnegative = 1,  numel = 1463

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9890e-01  +5.0287e+02  5.02e+02  9.63e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.0692e-01  +1.1251e+02  1.12e+02  4.37e-01  1.96e+01  3.99e-03  5.67e-01  5.80e-01  
  2  +4.7067e-01  +1.6823e+01  1.64e+01  1.20e-01  7.20e+00  2.52e-02  2.28e-01  9.90e-01  
  3  +4.2379e-01  +4.0156e+00  3.59e+00  1.76e-02  1.29e+00  1.09e-02  4.08e-02  8.54e-01  
  4  +3.6814e-01  +3.4596e+00  3.09e+00  1.04e-02  7.67e-01  1.07e-02  2.44e-02  5.12e-01  
  5  +3.2723e-01  +1.5722e+00  1.24e+00  4.28e-03  3.12e-01  9.63e-05  1.09e-02  8.55e-01  
  6  +2.6685e-01  +6.9991e-01  4.33e-01  1.44e-03  1.02e-01  5.41e-05  4.07e-03  6.86e-01  
  7  +2.2910e-01  +4.9397e-01  2.65e-01  8.33e-04  5.95e-02  5.70e-05  2.54e-03  5.48e-01  
  8  +2.0980e-01  +3.8689e-01  1.77e-01  5.26e-04  3.83e-02  4.55e-05  1.69e-03  4.47e-01  
  9  +1.9100e-01  +2.8478e-01  9.38e-02  2.62e-04  1.94e-02  2.85e-05  8.95e-04  6.00e-01  
 10  +1.8105e-01  +2.3357e-01  5.25e-02  1.41e-04  1.06e-02  1.80e-05  5.01e-04  6.02e-01  
 11  +1.7071e-01  +1.8299e-01  1.23e-02  3.25e-05  2.42e-03  4.76e-06  1.24e-04  9.90e-01  
 12  +1.6714e-01  +1.6889e-01  1.75e-03  4.60e-06  3.39e-04  6.01e-07  1.89e-05  8.96e-01  
 13  +1.6656e-01  +1.6673e-01  1.67e-04  4.39e-07  3.22e-05  5.94e-08  1.86e-06  9.61e-01  
 14  +1.6650e-01  +1.6650e-01  1.74e-06  4.59e-09  3.37e-07  6.19e-10  1.96e-08  9.90e-01  
 15  +1.6650e-01  +1.6650e-01  1.75e-08  4.60e-11  3.37e-09  6.20e-12  1.96e-10  9.90e-01  
 16  +1.6650e-01  +1.6650e-01  1.75e-10  4.61e-13  3.38e-11  6.21e-14  1.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.3866ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:42 PM: Optimal value: 1.665e-01
(CVXPY) Oct 06 04:25:42 PM: Compilation took 1.565e-02 seconds
(CVXPY) Oct 06 04:25:42 PM: Solver (including time spent in interface) took 6.306e-02 seconds
Iteration: 46, Objective: 0.1665
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:42 PM: Your problem has 973 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:42 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 973
  constraints   = 1473
  nnz(P)        = 0
  nnz(A)        = 12793
  cones (total) = 1
    : Nonnegative = 1,  numel = 1473

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9890e-01  +5.0287e+02  5.02e+02  9.64e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.0578e-01  +1.1249e+02  1.12e+02  4.37e-01  1.95e+01  3.99e-03  5.66e-01  5.80e-01  
  2  +4.6897e-01  +1.6857e+01  1.64e+01  1.19e-01  7.13e+00  2.52e-02  2.27e-01  9.90e-01  
  3  +4.2063e-01  +3.9949e+00  3.57e+00  1.73e-02  1.26e+00  1.09e-02  4.02e-02  8.54e-01  
  4  +3.6254e-01  +3.4142e+00  3.05e+00  1.01e-02  7.44e-01  1.05e-02  2.39e-02  5.19e-01  
  5  +3.2656e-01  +1.6672e+00  1.34e+00  4.72e-03  3.41e-01  9.18e-05  1.21e-02  8.60e-01  
  6  +2.6686e-01  +6.9824e-01  4.31e-01  1.45e-03  1.02e-01  4.26e-05  4.10e-03  6.99e-01  
  7  +2.3189e-01  +5.2026e-01  2.88e-01  9.19e-04  6.54e-02  5.86e-05  2.77e-03  5.29e-01  
  8  +2.0764e-01  +3.7889e-01  1.71e-01  5.12e-04  3.71e-02  4.28e-05  1.64e-03  5.13e-01  
  9  +1.9303e-01  +3.0042e-01  1.07e-01  3.05e-04  2.25e-02  3.10e-05  1.03e-03  5.00e-01  
 10  +1.7720e-01  +2.1930e-01  4.21e-02  1.13e-04  8.49e-03  1.30e-05  4.07e-04  6.62e-01  
 11  +1.6879e-01  +1.7775e-01  8.96e-03  2.40e-05  1.78e-03  3.33e-06  9.27e-05  9.90e-01  
 12  +1.6647e-01  +1.6888e-01  2.41e-03  6.39e-06  4.70e-04  8.67e-07  2.63e-05  7.89e-01  
 13  +1.6564e-01  +1.6576e-01  1.13e-04  3.00e-07  2.20e-05  3.79e-08  1.28e-06  9.70e-01  
 14  +1.6560e-01  +1.6560e-01  1.15e-06  3.04e-09  2.22e-07  3.84e-10  1.30e-08  9.90e-01  
 15  +1.6560e-01  +1.6560e-01  1.15e-08  3.05e-11  2.23e-09  3.85e-12  1.30e-10  9.90e-01  
 16  +1.6560e-01  +1.6560e-01  1.15e-10  3.06e-13  2.24e-11  3.86e-14  1.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 66.8835ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:43 PM: Optimal value: 1.656e-01
(CVXPY) Oct 06 04:25:43 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:43 PM: Solver (including time spent in interface) took 7.814e-02 seconds
Iteration: 47, Objective: 0.1656
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:43 PM: Your problem has 983 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:43 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 983
  constraints   = 1483
  nnz(P)        = 0
  nnz(A)        = 12829
  cones (total) = 1
    : Nonnegative = 1,  numel = 1483

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9888e-01  +5.0295e+02  5.02e+02  9.64e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.0259e-01  +1.1262e+02  1.12e+02  4.36e-01  1.94e+01  4.00e-03  5.65e-01  5.80e-01  
  2  +4.6429e-01  +1.7000e+01  1.65e+01  1.17e-01  7.05e+00  2.55e-02  2.26e-01  9.90e-01  
  3  +4.1637e-01  +4.1453e+00  3.73e+00  1.82e-02  1.32e+00  1.07e-02  4.23e-02  8.40e-01  
  4  +3.5541e-01  +3.5055e+00  3.15e+00  1.04e-02  7.62e-01  1.00e-02  2.47e-02  5.46e-01  
  5  +3.2776e-01  +1.7929e+00  1.47e+00  5.34e-03  3.84e-01  8.45e-05  1.37e-02  8.42e-01  
  6  +2.6618e-01  +7.1962e-01  4.53e-01  1.54e-03  1.08e-01  3.88e-05  4.33e-03  7.14e-01  
  7  +2.2695e-01  +5.1607e-01  2.89e-01  9.28e-04  6.56e-02  6.24e-05  2.82e-03  5.90e-01  
  8  +1.9965e-01  +3.4580e-01  1.46e-01  4.40e-04  3.16e-02  3.66e-05  1.44e-03  5.61e-01  
  9  +1.8655e-01  +2.7793e-01  9.14e-02  2.60e-04  1.91e-02  2.58e-05  8.81e-04  4.84e-01  
 10  +1.7418e-01  +2.1553e-01  4.14e-02  1.12e-04  8.35e-03  1.27e-05  3.99e-04  6.21e-01  
 11  +1.6550e-01  +1.7269e-01  7.19e-03  1.93e-05  1.43e-03  2.69e-06  7.44e-05  9.90e-01  
 12  +1.6373e-01  +1.6599e-01  2.26e-03  6.04e-06  4.43e-04  8.31e-07  2.47e-05  7.60e-01  
 13  +1.6294e-01  +1.6305e-01  1.07e-04  2.85e-07  2.08e-05  3.65e-08  1.20e-06  9.66e-01  
 14  +1.6290e-01  +1.6290e-01  1.08e-06  2.90e-09  2.12e-07  3.70e-10  1.23e-08  9.90e-01  
 15  +1.6290e-01  +1.6290e-01  1.09e-08  2.91e-11  2.13e-09  3.71e-12  1.23e-10  9.90e-01  
 16  +1.6290e-01  +1.6290e-01  1.09e-10  2.91e-13  2.13e-11  3.72e-14  1.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 64.2327ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:43 PM: Optimal value: 1.629e-01
(CVXPY) Oct 06 04:25:43 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:43 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 48, Objective: 0.1629
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:43 PM: Your problem has 993 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:43 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 993
  constraints   = 1493
  nnz(P)        = 0
  nnz(A)        = 12875
  cones (total) = 1
    : Nonnegative = 1,  numel = 1493

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9886e-01  +5.0295e+02  5.02e+02  9.64e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.0011e-01  +1.1277e+02  1.12e+02  4.35e-01  1.93e+01  4.01e-03  5.65e-01  5.80e-01  
  2  +4.6238e-01  +1.7074e+01  1.66e+01  1.17e-01  7.03e+00  2.56e-02  2.25e-01  9.90e-01  
  3  +4.1488e-01  +4.1150e+00  3.70e+00  1.83e-02  1.32e+00  1.02e-02  4.24e-02  8.41e-01  
  4  +3.5308e-01  +3.5581e+00  3.21e+00  1.07e-02  7.77e-01  9.76e-03  2.53e-02  5.45e-01  
  5  +3.2946e-01  +1.8172e+00  1.49e+00  5.54e-03  3.97e-01  8.15e-05  1.41e-02  8.14e-01  
  6  +2.6685e-01  +7.4662e-01  4.80e-01  1.65e-03  1.15e-01  3.95e-05  4.60e-03  7.05e-01  
  7  +2.2476e-01  +5.1746e-01  2.93e-01  9.50e-04  6.68e-02  6.64e-05  2.89e-03  6.29e-01  
  8  +1.9451e-01  +3.2398e-01  1.29e-01  3.90e-04  2.79e-02  3.49e-05  1.29e-03  6.34e-01  
  9  +1.8530e-01  +2.7621e-01  9.09e-02  2.63e-04  1.92e-02  2.70e-05  8.95e-04  4.25e-01  
 10  +1.7318e-01  +2.1511e-01  4.19e-02  1.15e-04  8.55e-03  1.30e-05  4.13e-04  5.85e-01  
 11  +1.6642e-01  +1.7997e-01  1.35e-02  3.73e-05  2.73e-03  4.92e-06  1.42e-04  9.17e-01  
 12  +1.6333e-01  +1.6738e-01  4.06e-03  1.10e-05  8.04e-04  1.47e-06  4.47e-05  8.42e-01  
 13  +1.6236e-01  +1.6365e-01  1.29e-03  3.49e-06  2.53e-04  4.65e-07  1.46e-05  7.50e-01  
 14  +1.6196e-01  +1.6211e-01  1.51e-04  4.08e-07  2.95e-05  5.41e-08  1.74e-06  9.43e-01  
 15  +1.6190e-01  +1.6190e-01  1.64e-06  4.43e-09  3.20e-07  5.85e-10  1.89e-08  9.89e-01  
 16  +1.6190e-01  +1.6190e-01  1.64e-08  4.43e-11  3.21e-09  5.86e-12  1.90e-10  9.90e-01  
 17  +1.6190e-01  +1.6190e-01  1.65e-10  4.45e-13  3.22e-11  5.89e-14  1.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.8505ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:43 PM: Optimal value: 1.619e-01
(CVXPY) Oct 06 04:25:43 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:43 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Iteration: 49, Objective: 0.1619
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:43 PM: Your problem has 1003 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:43 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 1003
  constraints   = 1503
  nnz(P)        = 0
  nnz(A)        = 12915
  cones (total) = 1
    : Nonnegative = 1,  numel = 1503

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9886e-01  +5.0295e+02  5.02e+02  9.64e-01  3.37e+01  1.00e+00  1.01e+00   ------   
  1  +4.9921e-01  +1.1277e+02  1.12e+02  4.35e-01  1.92e+01  4.02e-03  5.64e-01  5.80e-01  
  2  +4.6107e-01  +1.7097e+01  1.66e+01  1.16e-01  6.96e+00  2.56e-02  2.24e-01  9.90e-01  
  3  +4.1398e-01  +4.2012e+00  3.79e+00  1.88e-02  1.35e+00  1.01e-02  4.37e-02  8.34e-01  
  4  +3.5140e-01  +3.6712e+00  3.32e+00  1.11e-02  8.02e-01  9.79e-03  2.62e-02  5.43e-01  
  5  +3.2656e-01  +1.8140e+00  1.49e+00  5.48e-03  3.92e-01  8.27e-05  1.40e-02  8.30e-01  
  6  +2.6483e-01  +7.3353e-01  4.69e-01  1.61e-03  1.12e-01  3.89e-05  4.50e-03  7.08e-01  
  7  +2.2392e-01  +5.1673e-01  2.93e-01  9.51e-04  6.67e-02  6.46e-05  2.89e-03  6.10e-01  
  8  +1.9274e-01  +3.1795e-01  1.25e-01  3.77e-04  2.69e-02  3.31e-05  1.26e-03  6.47e-01  
  9  +1.8396e-01  +2.7282e-01  8.89e-02  2.58e-04  1.87e-02  2.59e-05  8.80e-04  4.17e-01  
 10  +1.7209e-01  +2.1329e-01  4.12e-02  1.14e-04  8.38e-03  1.26e-05  4.09e-04  5.89e-01  
 11  +1.6494e-01  +1.7636e-01  1.14e-02  3.15e-05  2.29e-03  4.32e-06  1.22e-04  9.90e-01  
 12  +1.6194e-01  +1.6462e-01  2.68e-03  7.34e-06  5.32e-04  9.68e-07  3.02e-05  8.80e-01  
 13  +1.6111e-01  +1.6141e-01  3.04e-04  8.34e-07  6.01e-05  1.07e-07  3.53e-06  9.03e-01  
 14  +1.6100e-01  +1.6101e-01  4.10e-06  1.12e-08  8.10e-07  1.43e-09  4.78e-08  9.87e-01  
 15  +1.6100e-01  +1.6100e-01  4.10e-08  1.12e-10  8.10e-09  1.43e-11  4.78e-10  9.90e-01  
 16  +1.6100e-01  +1.6100e-01  4.10e-10  1.13e-12  8.11e-11  1.43e-13  4.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.4039ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:43 PM: Optimal value: 1.610e-01
(CVXPY) Oct 06 04:25:43 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:43 PM: Solver (including time spent in interface) took 6.317e-02 seconds
Iteration: 50, Objective: 0.1610
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:44 PM: Your problem has 1004 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:44 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 1004
  constraints   = 1504
  nnz(P)        = 0
  nnz(A)        = 12932
  cones (total) = 1
    : Nonnegative = 1,  numel = 1504

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9887e-01  +5.0294e+02  5.02e+02  9.64e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +4.9890e-01  +1.1279e+02  1.12e+02  4.35e-01  1.92e+01  4.02e-03  5.63e-01  5.80e-01  
  2  +4.6104e-01  +1.7082e+01  1.66e+01  1.16e-01  6.95e+00  2.56e-02  2.24e-01  9.90e-01  
  3  +4.1372e-01  +4.2064e+00  3.79e+00  1.88e-02  1.35e+00  1.01e-02  4.37e-02  8.34e-01  
  4  +3.5096e-01  +3.6872e+00  3.34e+00  1.11e-02  8.04e-01  9.80e-03  2.63e-02  5.43e-01  
  5  +3.2732e-01  +1.8314e+00  1.50e+00  5.57e-03  3.98e-01  8.23e-05  1.42e-02  8.24e-01  
  6  +2.6515e-01  +7.3890e-01  4.74e-01  1.63e-03  1.14e-01  3.84e-05  4.55e-03  7.08e-01  
  7  +2.2460e-01  +5.2327e-01  2.99e-01  9.75e-04  6.83e-02  6.45e-05  2.96e-03  6.00e-01  
  8  +1.9311e-01  +3.2061e-01  1.27e-01  3.86e-04  2.75e-02  3.31e-05  1.28e-03  6.45e-01  
  9  +1.8396e-01  +2.7393e-01  9.00e-02  2.62e-04  1.90e-02  2.56e-05  8.92e-04  4.13e-01  
 10  +1.7187e-01  +2.1281e-01  4.09e-02  1.14e-04  8.36e-03  1.21e-05  4.10e-04  5.92e-01  
 11  +1.6416e-01  +1.7429e-01  1.01e-02  2.80e-05  2.04e-03  3.33e-06  1.08e-04  8.74e-01  
 12  +1.6182e-01  +1.6432e-01  2.50e-03  6.91e-06  4.99e-04  8.14e-07  2.83e-05  8.06e-01  
 13  +1.6111e-01  +1.6146e-01  3.44e-04  9.48e-07  6.83e-05  1.13e-07  4.01e-06  8.93e-01  
 14  +1.6100e-01  +1.6101e-01  4.64e-06  1.28e-08  9.22e-07  1.53e-09  5.44e-08  9.89e-01  
 15  +1.6100e-01  +1.6100e-01  4.65e-08  1.28e-10  9.23e-09  1.53e-11  5.45e-10  9.90e-01  
 16  +1.6100e-01  +1.6100e-01  4.65e-10  1.28e-12  9.24e-11  1.54e-13  5.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.1019ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:44 PM: Optimal value: 1.610e-01
(CVXPY) Oct 06 04:25:44 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:44 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 51, Objective: 0.1610
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:44 PM: Your problem has 1006 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:44 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 1006
  constraints   = 1506
  nnz(P)        = 0
  nnz(A)        = 12951
  cones (total) = 1
    : Nonnegative = 1,  numel = 1506

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9886e-01  +5.0292e+02  5.02e+02  9.64e-01  3.36e+01  1.00e+00  1.01e+00   ------   
  1  +4.9856e-01  +1.1275e+02  1.12e+02  4.35e-01  1.92e+01  4.02e-03  5.63e-01  5.80e-01  
  2  +4.6051e-01  +1.7091e+01  1.66e+01  1.16e-01  6.93e+00  2.56e-02  2.23e-01  9.90e-01  
  3  +4.1305e-01  +4.2285e+00  3.82e+00  1.89e-02  1.35e+00  1.01e-02  4.39e-02  8.33e-01  
  4  +3.5016e-01  +3.6754e+00  3.33e+00  1.11e-02  8.02e-01  9.76e-03  2.63e-02  5.41e-01  
  5  +3.2740e-01  +1.8386e+00  1.51e+00  5.62e-03  4.01e-01  8.16e-05  1.43e-02  8.18e-01  
  6  +2.6458e-01  +7.3628e-01  4.72e-01  1.63e-03  1.13e-01  3.81e-05  4.55e-03  7.12e-01  
  7  +2.1931e-01  +4.9496e-01  2.76e-01  8.92e-04  6.25e-02  6.63e-05  2.74e-03  6.71e-01  
  8  +1.9295e-01  +3.2527e-01  1.32e-01  4.02e-04  2.86e-02  3.69e-05  1.33e-03  6.02e-01  
  9  +1.8284e-01  +2.7095e-01  8.81e-02  2.57e-04  1.86e-02  2.64e-05  8.79e-04  4.30e-01  
 10  +1.7187e-01  +2.1408e-01  4.22e-02  1.18e-04  8.64e-03  1.31e-05  4.24e-04  5.64e-01  
 11  +1.6408e-01  +1.7429e-01  1.02e-02  2.84e-05  2.06e-03  3.29e-06  1.09e-04  8.53e-01  
 12  +1.6188e-01  +1.6461e-01  2.73e-03  7.58e-06  5.47e-04  8.79e-07  3.09e-05  7.86e-01  
 13  +1.6117e-01  +1.6169e-01  5.21e-04  1.44e-06  1.04e-04  1.73e-07  6.08e-06  8.74e-01  
 14  +1.6100e-01  +1.6102e-01  1.47e-05  4.05e-08  2.91e-06  4.86e-09  1.72e-07  9.74e-01  
 15  +1.6100e-01  +1.6100e-01  1.47e-07  4.05e-10  2.92e-08  4.86e-11  1.72e-09  9.90e-01  
 16  +1.6100e-01  +1.6100e-01  1.47e-09  4.06e-12  2.92e-10  4.87e-13  1.72e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.5155ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:44 PM: Optimal value: 1.610e-01
(CVXPY) Oct 06 04:25:44 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:25:44 PM: Solver (including time spent in interface) took 6.250e-02 seconds
FULL MODEL:
  Accruacy: 0.81
  Our objective: 0.6199999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x8 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.036)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0)                                                                   <-- (term's our objective: 0.09)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1)                                             <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x1 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x8 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.026)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1)                                             <-- (term's our objective: 0.022)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.01)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x8 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.022)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 18.597476959228516
Best over terms:
  Our final objective: 0.09
    Its accruacy: 0.545
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.09
  Highest accruacy: 0.545
   dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 136 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 137 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 138 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 139 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 140 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 141 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 142 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 143 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 144 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 145 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 146 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 147 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 148 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 149 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 150 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 151 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 152 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 153 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 154 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 155 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 156 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

