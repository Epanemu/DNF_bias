Command:
python test_script.py -s constant_subclass -d 4 -n 10000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1488
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.14880000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:26 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:26 PM: Finished problem compilation (took 7.208e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.84e-01  8.59e+01  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +9.6885e+02  9.68e+02  3.38e-01  4.78e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5103e-01  +1.5088e+02  1.50e+02  1.40e-01  2.43e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1081e-01  +3.2622e+01  3.21e+01  1.11e-01  1.89e+01  1.77e-05  2.25e-01  6.52e-02  
  4  +5.0004e-01  +1.0588e+00  5.59e-01  3.75e-03  6.43e-01  3.91e-06  1.43e-01  9.90e-01  
  5  +4.9998e-01  +6.4049e-01  1.41e-01  9.39e-04  1.62e-01  1.72e-06  3.04e-02  8.25e-01  
  6  +4.9561e-01  +1.1189e+00  6.23e-01  6.59e-04  1.15e-01  9.96e-05  2.07e-03  9.72e-01  
  7  +4.8276e-01  +8.3558e-01  3.53e-01  1.15e-04  2.00e-02  2.47e-04  3.55e-04  8.33e-01  
  8  +4.6957e-01  +5.4202e-01  7.25e-02  1.95e-05  3.38e-03  2.82e-06  6.37e-05  9.28e-01  
  9  +4.5629e-01  +4.6910e-01  1.28e-02  3.12e-06  5.40e-04  4.47e-07  1.12e-05  9.90e-01  
 10  +4.5313e-01  +4.5479e-01  1.66e-03  3.90e-07  6.75e-05  5.74e-08  1.47e-06  8.74e-01  
 11  +4.5252e-01  +4.5259e-01  6.90e-05  1.45e-08  2.50e-06  2.80e-09  6.16e-08  9.82e-01  
 12  +4.5250e-01  +4.5250e-01  6.91e-07  1.45e-10  2.50e-08  2.81e-11  6.17e-10  9.90e-01  
 13  +4.5250e-01  +4.5250e-01  6.93e-09  1.45e-12  2.51e-10  3.12e-13  6.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 64.4737ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:26 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:26 PM: Optimal value: 4.525e-01
(CVXPY) Oct 06 03:51:26 PM: Compilation took 7.208e-02 seconds
(CVXPY) Oct 06 03:51:26 PM: Solver (including time spent in interface) took 7.649e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4525
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:26 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:26 PM: Finished problem compilation (took 4.034e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 45029
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0013e+03  5.00e+03  9.84e-01  9.23e+01  1.00e+00  1.00e+00   ------   
  1  +6.0805e-01  +9.6977e+02  9.69e+02  3.39e-01  5.14e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5079e-01  +1.5042e+02  1.50e+02  1.40e-01  2.60e+01  8.27e-03  2.28e-01  7.27e-01  
  3  +5.1069e-01  +3.2378e+01  3.19e+01  1.11e-01  2.02e+01  1.78e-05  2.25e-01  6.74e-02  
  4  +5.0051e-01  +2.4900e+00  1.99e+00  1.33e-02  2.42e+00  4.81e-06  1.93e-01  3.79e-01  
  5  +5.0009e-01  +9.6705e-01  4.67e-01  3.12e-03  5.76e-01  1.70e-06  9.29e-02  6.06e-01  
  6  +5.0002e-01  +7.7487e-01  2.75e-01  1.83e-03  3.38e-01  1.50e-06  3.53e-02  7.61e-01  
  7  +4.9969e-01  +7.6195e-01  2.62e-01  1.22e-03  2.27e-01  7.22e-06  5.19e-03  9.02e-01  
  8  +4.9511e-01  +7.2781e-01  2.33e-01  1.35e-04  2.53e-02  8.09e-05  3.85e-04  9.26e-01  
  9  +4.9446e-01  +7.2142e-01  2.27e-01  1.20e-04  2.25e-02  8.21e-05  3.40e-04  1.54e-01  
 10  +4.9218e-01  +6.9558e-01  2.03e-01  8.02e-05  1.50e-02  7.63e-05  2.24e-04  5.24e-01  
 11  +4.8941e-01  +6.7968e-01  1.90e-01  6.02e-05  1.13e-02  7.86e-05  1.68e-04  3.29e-01  
 12  +4.8861e-01  +6.7125e-01  1.83e-01  5.88e-05  1.10e-02  6.43e-05  1.67e-04  1.07e-01  
 13  +4.8707e-01  +6.6327e-01  1.76e-01  5.18e-05  9.68e-03  6.16e-05  1.47e-04  1.88e-01  
 14  +4.8661e-01  +6.5679e-01  1.70e-01  5.05e-05  9.45e-03  4.33e-05  1.43e-04  2.56e-01  
 15  +4.7301e-01  +5.9552e-01  1.23e-01  2.53e-05  4.73e-03  3.51e-05  7.26e-05  6.05e-01  
 16  +4.6753e-01  +5.7430e-01  1.07e-01  2.10e-05  3.92e-03  2.71e-05  6.09e-05  2.58e-01  
 17  +4.6527e-01  +5.6593e-01  1.01e-01  1.94e-05  3.61e-03  2.38e-05  5.63e-05  1.45e-01  
 18  +4.5461e-01  +5.2396e-01  6.94e-02  1.23e-05  2.28e-03  1.89e-06  3.65e-05  9.90e-01  
 19  +4.4999e-01  +5.0806e-01  5.81e-02  1.00e-05  1.86e-03  1.65e-06  3.00e-05  2.01e-01  
 20  +4.4062e-01  +4.7535e-01  3.47e-02  5.62e-06  1.04e-03  2.59e-06  1.72e-05  9.90e-01  
 21  +4.2980e-01  +4.3936e-01  9.56e-03  1.51e-06  2.81e-04  6.80e-07  4.78e-06  7.32e-01  
 22  +4.2576e-01  +4.2590e-01  1.39e-04  2.18e-08  4.06e-06  8.96e-09  6.98e-08  9.86e-01  
 23  +4.2570e-01  +4.2570e-01  1.39e-06  2.18e-10  4.06e-08  8.96e-11  6.98e-10  9.90e-01  
 24  +4.2570e-01  +4.2570e-01  1.39e-08  2.18e-12  4.06e-10  9.00e-13  7.01e-12  9.90e-01  
 25  +4.2570e-01  +4.2570e-01  1.39e-10  2.18e-14  4.06e-12  9.04e-15  7.04e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 149.3712ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:26 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:26 PM: Optimal value: 4.257e-01
(CVXPY) Oct 06 03:51:26 PM: Compilation took 4.034e-02 seconds
(CVXPY) Oct 06 03:51:26 PM: Solver (including time spent in interface) took 1.598e-01 seconds
FULL MODEL:
  Accruacy: 0.5744
  Our objective: 0.14880000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1488)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.319922924041748
Best over terms:
  Our final objective: 0.14880000000000004
    Its accruacy: 0.5744
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14880000000000004
  Highest accruacy: 0.5744
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

