Command:
python test_script.py -s constant_subclass -d 10 -n 500 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14400000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 10.

Computed total variation: 0.784
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:12 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Finished problem compilation (took 4.689e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 3271
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9979e-01  +2.5101e+02  2.51e+02  9.39e-01  2.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.7736e-01  +5.5327e+01  5.47e+01  4.18e-01  1.68e+01  3.75e-03  5.89e-01  5.77e-01  
  2  +5.2576e-01  +6.3128e+00  5.79e+00  1.34e-01  6.83e+00  1.84e-02  2.78e-01  9.90e-01  
  3  +5.0377e-01  +1.4004e+00  8.97e-01  3.16e-02  1.63e+00  5.53e-05  1.44e-01  9.49e-01  
  4  +4.9957e-01  +7.7545e-01  2.76e-01  8.60e-03  4.55e-01  4.41e-05  3.58e-02  8.05e-01  
  5  +4.8643e-01  +7.3931e-01  2.53e-01  2.06e-03  1.12e-01  1.99e-04  6.18e-03  8.46e-01  
  6  +4.7207e-01  +6.3101e-01  1.59e-01  1.10e-03  5.91e-02  1.14e-04  3.54e-03  5.24e-01  
  7  +4.5481e-01  +5.5107e-01  9.63e-02  4.75e-04  2.54e-02  7.89e-05  1.69e-03  6.70e-01  
  8  +4.3369e-01  +4.5729e-01  2.36e-02  9.88e-05  5.27e-03  1.56e-05  4.04e-04  8.94e-01  
  9  +4.2661e-01  +4.2810e-01  1.49e-03  5.97e-06  3.18e-04  1.25e-06  2.59e-05  9.90e-01  
 10  +4.2611e-01  +4.2612e-01  1.51e-05  6.04e-08  3.22e-06  1.27e-08  2.63e-07  9.90e-01  
 11  +4.2610e-01  +4.2610e-01  1.51e-07  6.04e-10  3.22e-08  1.27e-10  2.63e-09  9.90e-01  
 12  +4.2610e-01  +4.2610e-01  1.51e-09  6.04e-12  3.22e-10  1.27e-12  2.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:13 PM: Optimal value: 4.261e-01
(CVXPY) Oct 06 04:24:13 PM: Compilation took 4.689e-02 seconds
(CVXPY) Oct 06 04:24:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:13 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 3718
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +2.5122e+02  2.51e+02  9.39e-01  2.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7452e-01  +5.5449e+01  5.49e+01  4.21e-01  1.70e+01  3.75e-03  5.92e-01  5.75e-01  
  2  +5.2326e-01  +6.4453e+00  5.92e+00  1.35e-01  6.98e+00  1.89e-02  2.79e-01  9.90e-01  
  3  +5.0570e-01  +1.3660e+00  8.60e-01  3.05e-02  1.65e+00  1.17e-03  9.70e-02  8.79e-01  
  4  +5.0518e-01  +1.3555e+00  8.50e-01  2.31e-02  1.28e+00  1.56e-03  6.52e-02  3.56e-01  
  5  +5.0258e-01  +1.2995e+00  7.97e-01  1.95e-02  1.07e+00  1.07e-03  6.30e-02  2.30e-01  
  6  +4.9180e-01  +1.0826e+00  5.91e-01  4.85e-03  2.75e-01  2.77e-03  1.29e-02  8.09e-01  
  7  +4.7623e-01  +8.4760e-01  3.71e-01  2.93e-03  1.64e-01  1.02e-03  8.37e-03  4.98e-01  
  8  +4.6760e-01  +7.9140e-01  3.24e-01  2.05e-03  1.14e-01  9.45e-04  6.00e-03  3.44e-01  
  9  +4.5252e-01  +6.7154e-01  2.19e-01  1.14e-03  6.33e-02  2.22e-04  3.45e-03  8.88e-01  
 10  +4.4534e-01  +6.3390e-01  1.89e-01  8.93e-04  4.94e-02  1.95e-04  2.74e-03  2.84e-01  
 11  +4.2984e-01  +5.4563e-01  1.16e-01  4.96e-04  2.75e-02  1.06e-04  1.57e-03  9.90e-01  
 12  +4.1660e-01  +4.9125e-01  7.46e-02  2.88e-04  1.59e-02  7.17e-05  9.42e-04  5.40e-01  
 13  +3.9988e-01  +4.1980e-01  1.99e-02  7.32e-05  4.03e-03  2.33e-05  2.53e-04  9.90e-01  
 14  +3.9259e-01  +3.9351e-01  9.18e-04  3.32e-06  1.83e-04  9.73e-07  1.18e-05  9.68e-01  
 15  +3.9222e-01  +3.9225e-01  3.77e-05  1.34e-07  7.38e-06  4.07e-08  4.96e-07  9.88e-01  
 16  +3.9220e-01  +3.9220e-01  3.79e-07  1.34e-09  7.39e-08  4.07e-10  4.98e-09  9.90e-01  
 17  +3.9220e-01  +3.9220e-01  3.79e-09  1.34e-11  7.39e-10  4.07e-12  4.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7534ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:13 PM: Optimal value: 3.922e-01
(CVXPY) Oct 06 04:24:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:13 PM: Solver (including time spent in interface) took 1.572e-02 seconds
Iteration: 2, Objective: 0.3922
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:13 PM: Your problem has 291 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 291
  constraints   = 541
  nnz(P)        = 0
  nnz(A)        = 4130
  cones (total) = 1
    : Nonnegative = 1,  numel = 541

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +2.5148e+02  2.51e+02  9.40e-01  2.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.7255e-01  +5.5583e+01  5.50e+01  4.25e-01  1.72e+01  3.75e-03  5.94e-01  5.74e-01  
  2  +5.2168e-01  +6.5336e+00  6.01e+00  1.37e-01  7.07e+00  1.93e-02  2.82e-01  9.90e-01  
  3  +5.0786e-01  +1.9487e+00  1.44e+00  4.59e-02  2.52e+00  3.63e-03  1.26e-01  6.61e-01  
  4  +5.0561e-01  +1.7366e+00  1.23e+00  3.19e-02  1.78e+00  4.11e-03  8.60e-02  3.47e-01  
  5  +5.0266e-01  +1.6498e+00  1.15e+00  2.69e-02  1.49e+00  2.66e-03  7.96e-02  3.29e-01  
  6  +4.8934e-01  +1.1743e+00  6.85e-01  6.22e-03  3.59e-01  5.01e-03  1.65e-02  8.05e-01  
  7  +4.7401e-01  +9.8391e-01  5.10e-01  3.51e-03  2.01e-01  3.82e-03  9.60e-03  5.03e-01  
  8  +4.5493e-01  +8.3596e-01  3.81e-01  1.87e-03  1.06e-01  2.87e-03  5.31e-03  5.76e-01  
  9  +4.4218e-01  +7.3129e-01  2.89e-01  1.50e-03  8.51e-02  1.28e-03  4.41e-03  3.67e-01  
 10  +4.0428e-01  +5.1742e-01  1.13e-01  4.75e-04  2.68e-02  4.33e-04  1.51e-03  7.05e-01  
 11  +3.8641e-01  +4.2727e-01  4.09e-02  1.66e-04  9.37e-03  1.41e-04  5.51e-04  6.96e-01  
 12  +3.8058e-01  +4.0169e-01  2.11e-02  8.27e-05  4.69e-03  6.47e-05  2.77e-04  6.03e-01  
 13  +3.7809e-01  +3.9172e-01  1.36e-02  5.22e-05  2.97e-03  3.92e-05  1.76e-04  4.32e-01  
 14  +3.7449e-01  +3.7697e-01  2.48e-03  9.44e-06  5.41e-04  3.40e-06  3.23e-05  9.90e-01  
 15  +3.7353e-01  +3.7359e-01  6.44e-05  2.45e-07  1.41e-05  8.73e-08  8.42e-07  9.76e-01  
 16  +3.7350e-01  +3.7350e-01  6.45e-07  2.45e-09  1.41e-07  8.74e-10  8.43e-09  9.90e-01  
 17  +3.7350e-01  +3.7350e-01  6.45e-09  2.45e-11  1.41e-09  8.74e-12  8.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.8459ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:13 PM: Optimal value: 3.735e-01
(CVXPY) Oct 06 04:24:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:13 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 3, Objective: 0.3735
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:13 PM: Your problem has 301 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 301
  constraints   = 551
  nnz(P)        = 0
  nnz(A)        = 4264
  cones (total) = 1
    : Nonnegative = 1,  numel = 551

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +2.5162e+02  2.51e+02  9.41e-01  2.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.7076e-01  +5.5572e+01  5.50e+01  4.27e-01  1.70e+01  3.76e-03  5.94e-01  5.75e-01  
  2  +5.2049e-01  +6.6301e+00  6.11e+00  1.36e-01  6.95e+00  1.95e-02  2.79e-01  9.90e-01  
  3  +5.0748e-01  +1.9547e+00  1.45e+00  4.30e-02  2.37e+00  4.03e-03  1.15e-01  6.58e-01  
  4  +5.0641e-01  +1.8973e+00  1.39e+00  3.49e-02  1.94e+00  4.56e-03  9.08e-02  2.22e-01  
  5  +5.0273e-01  +1.8299e+00  1.33e+00  2.96e-02  1.63e+00  3.11e-03  8.46e-02  3.21e-01  
  6  +4.8551e-01  +1.3088e+00  8.23e-01  6.55e-03  3.79e-01  6.41e-03  1.69e-02  8.16e-01  
  7  +4.6658e-01  +1.0646e+00  5.98e-01  3.83e-03  2.19e-01  4.29e-03  1.03e-02  4.86e-01  
  8  +4.5384e-01  +9.5026e-01  4.96e-01  2.75e-03  1.56e-01  2.69e-03  7.60e-03  4.70e-01  
  9  +4.2923e-01  +7.4777e-01  3.19e-01  1.62e-03  9.15e-02  8.90e-04  4.76e-03  6.12e-01  
 10  +4.0503e-01  +5.9719e-01  1.92e-01  9.17e-04  5.12e-02  2.84e-04  2.85e-03  7.17e-01  
 11  +3.7631e-01  +4.4399e-01  6.77e-02  3.00e-04  1.66e-02  8.46e-05  1.01e-03  6.85e-01  
 12  +3.6561e-01  +3.9280e-01  2.72e-02  1.14e-04  6.29e-03  3.39e-05  3.96e-04  7.53e-01  
 13  +3.5993e-01  +3.6878e-01  8.85e-03  3.53e-05  1.94e-03  1.08e-05  1.29e-04  7.92e-01  
 14  +3.5703e-01  +3.5829e-01  1.26e-03  4.78e-06  2.64e-04  1.47e-06  1.84e-05  9.11e-01  
 15  +3.5656e-01  +3.5658e-01  1.80e-05  6.82e-08  3.76e-06  2.05e-08  2.65e-07  9.90e-01  
 16  +3.5655e-01  +3.5655e-01  1.80e-07  6.82e-10  3.76e-08  2.05e-10  2.65e-09  9.90e-01  
 17  +3.5655e-01  +3.5655e-01  1.80e-09  6.82e-12  3.76e-10  2.06e-12  2.65e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.1502ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:13 PM: Optimal value: 3.566e-01
(CVXPY) Oct 06 04:24:13 PM: Compilation took 1.555e-02 seconds
(CVXPY) Oct 06 04:24:13 PM: Solver (including time spent in interface) took 1.569e-02 seconds
Iteration: 4, Objective: 0.3566
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:13 PM: Your problem has 311 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 311
  constraints   = 561
  nnz(P)        = 0
  nnz(A)        = 4365
  cones (total) = 1
    : Nonnegative = 1,  numel = 561

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9910e-01  +2.5143e+02  2.51e+02  9.41e-01  2.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.6883e-01  +5.5588e+01  5.50e+01  4.29e-01  1.68e+01  3.76e-03  5.94e-01  5.75e-01  
  2  +5.1903e-01  +6.7166e+00  6.20e+00  1.37e-01  6.89e+00  1.99e-02  2.79e-01  9.90e-01  
  3  +5.0677e-01  +1.8688e+00  1.36e+00  3.86e-02  2.13e+00  4.05e-03  1.01e-01  6.78e-01  
  4  +5.0619e-01  +1.8795e+00  1.37e+00  3.34e-02  1.86e+00  4.54e-03  8.58e-02  1.84e-01  
  5  +5.0200e-01  +1.9653e+00  1.46e+00  2.79e-02  1.54e+00  3.56e-03  7.44e-02  4.78e-01  
  6  +4.8278e-01  +1.4342e+00  9.51e-01  6.94e-03  4.00e-01  6.60e-03  1.75e-02  7.74e-01  
  7  +4.6397e-01  +1.2155e+00  7.52e-01  4.34e-03  2.48e-01  5.18e-03  1.13e-02  4.42e-01  
  8  +4.4465e-01  +1.0268e+00  5.82e-01  2.85e-03  1.62e-01  3.52e-03  7.70e-03  4.39e-01  
  9  +4.0861e-01  +6.7995e-01  2.71e-01  1.37e-03  7.61e-02  3.11e-05  4.08e-03  7.85e-01  
 10  +3.8436e-01  +5.4992e-01  1.66e-01  7.64e-04  4.25e-02  3.59e-05  2.40e-03  4.76e-01  
 11  +3.6348e-01  +4.4545e-01  8.20e-02  3.58e-04  2.00e-02  3.07e-05  1.19e-03  5.95e-01  
 12  +3.4813e-01  +3.7502e-01  2.69e-02  1.12e-04  6.27e-03  1.75e-05  3.93e-04  7.91e-01  
 13  +3.4118e-01  +3.4731e-01  6.13e-03  2.44e-05  1.37e-03  4.97e-06  9.18e-05  8.53e-01  
 14  +3.3897e-01  +3.3928e-01  3.06e-04  1.19e-06  6.70e-05  2.96e-07  4.67e-06  9.83e-01  
 15  +3.3885e-01  +3.3885e-01  3.28e-06  1.28e-08  7.18e-07  3.15e-09  5.01e-08  9.89e-01  
 16  +3.3885e-01  +3.3885e-01  3.28e-08  1.28e-10  7.18e-09  3.15e-11  5.02e-10  9.90e-01  
 17  +3.3885e-01  +3.3885e-01  3.28e-10  1.28e-12  7.18e-11  3.16e-13  5.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.1343ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:13 PM: Optimal value: 3.389e-01
(CVXPY) Oct 06 04:24:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:13 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 5, Objective: 0.3389
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:13 PM: Your problem has 321 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 321
  constraints   = 571
  nnz(P)        = 0
  nnz(A)        = 4535
  cones (total) = 1
    : Nonnegative = 1,  numel = 571

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9895e-01  +2.5178e+02  2.51e+02  9.42e-01  2.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.6412e-01  +5.5702e+01  5.51e+01  4.30e-01  1.66e+01  3.77e-03  5.93e-01  5.75e-01  
  2  +5.1601e-01  +6.8999e+00  6.38e+00  1.36e-01  6.84e+00  2.04e-02  2.76e-01  9.90e-01  
  3  +5.0392e-01  +1.6615e+00  1.16e+00  2.90e-02  1.62e+00  4.18e-03  7.46e-02  7.56e-01  
  4  +4.9224e-01  +1.8150e+00  1.32e+00  1.43e-02  8.22e-01  7.65e-03  3.46e-02  6.92e-01  
  5  +4.6874e-01  +1.5059e+00  1.04e+00  6.97e-03  4.02e-01  8.31e-03  1.73e-02  5.43e-01  
  6  +4.4381e-01  +1.2336e+00  7.90e-01  4.40e-03  2.51e-01  5.85e-03  1.15e-02  4.24e-01  
  7  +4.1591e-01  +9.8652e-01  5.71e-01  2.87e-03  1.61e-01  3.45e-03  7.92e-03  4.11e-01  
  8  +3.8128e-01  +6.8531e-01  3.04e-01  1.61e-03  8.89e-02  2.93e-05  5.01e-03  8.48e-01  
  9  +3.4267e-01  +4.5364e-01  1.11e-01  5.40e-04  2.95e-02  1.47e-05  1.86e-03  6.49e-01  
 10  +3.3706e-01  +4.2623e-01  8.92e-02  4.18e-04  2.32e-02  4.12e-05  1.46e-03  5.18e-01  
 11  +3.2451e-01  +3.6381e-01  3.93e-02  1.80e-04  1.00e-02  1.92e-05  6.65e-04  5.72e-01  
 12  +3.1773e-01  +3.3226e-01  1.45e-02  6.43e-05  3.60e-03  9.92e-06  2.43e-04  7.62e-01  
 13  +3.1368e-01  +3.1519e-01  1.51e-03  6.58e-06  3.70e-04  1.42e-06  2.57e-05  9.90e-01  
 14  +3.1316e-01  +3.1318e-01  2.50e-05  1.09e-07  6.14e-06  2.27e-08  4.29e-07  9.83e-01  
 15  +3.1315e-01  +3.1315e-01  2.51e-07  1.09e-09  6.14e-08  2.27e-10  4.29e-09  9.90e-01  
 16  +3.1315e-01  +3.1315e-01  2.51e-09  1.09e-11  6.14e-10  2.27e-12  4.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.1367ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:13 PM: Optimal value: 3.132e-01
(CVXPY) Oct 06 04:24:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:13 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 6, Objective: 0.3132
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:14 PM: Your problem has 331 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 331
  constraints   = 581
  nnz(P)        = 0
  nnz(A)        = 4666
  cones (total) = 1
    : Nonnegative = 1,  numel = 581

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9881e-01  +2.5209e+02  2.52e+02  9.42e-01  2.64e+01  1.00e+00  1.02e+00   ------   
  1  +5.6015e-01  +5.5715e+01  5.52e+01  4.31e-01  1.64e+01  3.78e-03  5.92e-01  5.76e-01  
  2  +5.1331e-01  +7.0780e+00  6.56e+00  1.34e-01  6.71e+00  2.08e-02  2.71e-01  9.90e-01  
  3  +5.0115e-01  +2.0332e+00  1.53e+00  3.31e-02  1.86e+00  6.26e-03  8.17e-02  7.15e-01  
  4  +4.7258e-01  +1.8625e+00  1.39e+00  1.09e-02  6.32e-01  1.33e-02  2.61e-02  7.21e-01  
  5  +4.3347e-01  +1.4561e+00  1.02e+00  5.57e-03  3.21e-01  1.15e-02  1.39e-02  5.23e-01  
  6  +4.0294e-01  +1.1299e+00  7.27e-01  3.78e-03  2.15e-01  6.51e-03  9.97e-03  3.66e-01  
  7  +3.4914e-01  +6.3226e-01  2.83e-01  1.50e-03  8.30e-02  3.65e-04  4.62e-03  7.75e-01  
  8  +3.1881e-01  +4.5016e-01  1.31e-01  6.74e-04  3.71e-02  1.54e-04  2.28e-03  5.61e-01  
  9  +3.1334e-01  +4.2205e-01  1.09e-01  5.46e-04  3.04e-02  1.26e-04  1.88e-03  3.02e-01  
 10  +2.9358e-01  +3.1773e-01  2.42e-02  1.17e-04  6.58e-03  2.51e-05  4.46e-04  8.65e-01  
 11  +2.8783e-01  +2.9238e-01  4.55e-03  2.15e-05  1.20e-03  4.35e-06  8.65e-05  8.87e-01  
 12  +2.8650e-01  +2.8667e-01  1.71e-04  8.07e-07  4.49e-05  1.51e-07  3.30e-06  9.64e-01  
 13  +2.8645e-01  +2.8645e-01  1.79e-06  8.46e-09  4.71e-07  1.58e-09  3.47e-08  9.90e-01  
 14  +2.8645e-01  +2.8645e-01  1.79e-08  8.46e-11  4.71e-09  1.58e-11  3.47e-10  9.90e-01  
 15  +2.8645e-01  +2.8645e-01  1.79e-10  8.46e-13  4.71e-11  1.58e-13  3.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.6409ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:14 PM: Optimal value: 2.865e-01
(CVXPY) Oct 06 04:24:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:14 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 7, Objective: 0.2865
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:14 PM: Your problem has 341 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Finished problem compilation (took 1.672e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 341
  constraints   = 591
  nnz(P)        = 0
  nnz(A)        = 4817
  cones (total) = 1
    : Nonnegative = 1,  numel = 591

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9878e-01  +2.5223e+02  2.52e+02  9.43e-01  2.63e+01  1.00e+00  1.02e+00   ------   
  1  +5.5780e-01  +5.5781e+01  5.52e+01  4.31e-01  1.62e+01  3.79e-03  5.91e-01  5.76e-01  
  2  +5.1166e-01  +7.1520e+00  6.64e+00  1.34e-01  6.60e+00  2.10e-02  2.69e-01  9.90e-01  
  3  +4.9868e-01  +2.0286e+00  1.53e+00  3.09e-02  1.73e+00  6.75e-03  7.57e-02  7.34e-01  
  4  +4.6584e-01  +1.8001e+00  1.33e+00  1.02e-02  5.92e-01  1.35e-02  2.47e-02  7.08e-01  
  5  +4.3249e-01  +1.5347e+00  1.10e+00  6.19e-03  3.56e-01  1.22e-02  1.54e-02  4.58e-01  
  6  +3.9961e-01  +1.1678e+00  7.68e-01  4.07e-03  2.30e-01  6.54e-03  1.07e-02  3.97e-01  
  7  +3.4235e-01  +6.3579e-01  2.93e-01  1.56e-03  8.54e-02  5.22e-04  4.72e-03  7.52e-01  
  8  +3.1033e-01  +4.4493e-01  1.35e-01  6.96e-04  3.81e-02  2.11e-04  2.33e-03  5.68e-01  
  9  +3.0379e-01  +4.1353e-01  1.10e-01  5.54e-04  3.07e-02  1.64e-04  1.89e-03  3.29e-01  
 10  +2.8571e-01  +3.2136e-01  3.57e-02  1.75e-04  9.73e-03  4.65e-05  6.43e-04  7.77e-01  
 11  +2.7915e-01  +2.9084e-01  1.17e-02  5.58e-05  3.13e-03  1.46e-05  2.13e-04  7.44e-01  
 12  +2.7620e-01  +2.7783e-01  1.64e-03  7.76e-06  4.34e-04  1.79e-06  3.03e-05  9.04e-01  
 13  +2.7579e-01  +2.7617e-01  3.71e-04  1.72e-06  9.69e-05  3.85e-07  6.84e-06  8.66e-01  
 14  +2.7566e-01  +2.7570e-01  3.63e-05  1.62e-07  9.21e-06  3.47e-08  6.65e-07  9.53e-01  
 15  +2.7565e-01  +2.7565e-01  3.78e-07  1.68e-09  9.58e-08  3.62e-10  6.93e-09  9.90e-01  
 16  +2.7565e-01  +2.7565e-01  3.78e-09  1.68e-11  9.58e-10  3.62e-12  6.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.1359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:14 PM: Optimal value: 2.757e-01
(CVXPY) Oct 06 04:24:14 PM: Compilation took 1.672e-02 seconds
(CVXPY) Oct 06 04:24:14 PM: Solver (including time spent in interface) took 1.501e-02 seconds
Iteration: 8, Objective: 0.2757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:14 PM: Your problem has 351 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 351
  constraints   = 601
  nnz(P)        = 0
  nnz(A)        = 4904
  cones (total) = 1
    : Nonnegative = 1,  numel = 601

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9872e-01  +2.5225e+02  2.52e+02  9.43e-01  2.61e+01  1.00e+00  1.02e+00   ------   
  1  +5.5463e-01  +5.5821e+01  5.53e+01  4.32e-01  1.60e+01  3.80e-03  5.90e-01  5.76e-01  
  2  +5.0983e-01  +7.2582e+00  6.75e+00  1.33e-01  6.50e+00  2.13e-02  2.67e-01  9.90e-01  
  3  +4.9581e-01  +2.0302e+00  1.53e+00  2.88e-02  1.61e+00  7.27e-03  7.00e-02  7.54e-01  
  4  +4.5516e-01  +1.7558e+00  1.30e+00  9.25e-03  5.32e-01  1.43e-02  2.22e-02  7.19e-01  
  5  +4.1395e-01  +1.4698e+00  1.06e+00  5.40e-03  3.08e-01  1.25e-02  1.34e-02  4.95e-01  
  6  +3.5731e-01  +8.0451e-01  4.47e-01  2.48e-03  1.36e-01  1.02e-04  7.03e-03  7.11e-01  
  7  +2.9996e-01  +4.4172e-01  1.42e-01  7.40e-04  4.04e-02  4.02e-05  2.41e-03  7.05e-01  
  8  +2.9215e-01  +4.1404e-01  1.22e-01  6.11e-04  3.42e-02  5.24e-05  2.01e-03  3.35e-01  
  9  +2.7320e-01  +3.2924e-01  5.60e-02  2.71e-04  1.53e-02  3.25e-05  9.64e-04  6.54e-01  
 10  +2.6042e-01  +2.7368e-01  1.33e-02  6.14e-05  3.49e-03  1.12e-05  2.38e-04  9.29e-01  
 11  +2.5626e-01  +2.5686e-01  6.00e-04  2.76e-06  1.56e-04  4.52e-07  1.12e-05  9.72e-01  
 12  +2.5605e-01  +2.5606e-01  7.48e-06  3.46e-08  1.95e-06  5.32e-09  1.41e-07  9.88e-01  
 13  +2.5605e-01  +2.5605e-01  7.48e-08  3.46e-10  1.95e-08  5.32e-11  1.41e-09  9.90e-01  
 14  +2.5605e-01  +2.5605e-01  7.48e-10  3.46e-12  1.95e-10  5.32e-13  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.4885ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:14 PM: Optimal value: 2.561e-01
(CVXPY) Oct 06 04:24:14 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:14 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 9, Objective: 0.2561
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:14 PM: Your problem has 361 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 361
  constraints   = 611
  nnz(P)        = 0
  nnz(A)        = 5007
  cones (total) = 1
    : Nonnegative = 1,  numel = 611

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9870e-01  +2.5234e+02  2.52e+02  9.44e-01  2.59e+01  1.00e+00  1.02e+00   ------   
  1  +5.5330e-01  +5.5811e+01  5.53e+01  4.32e-01  1.58e+01  3.80e-03  5.89e-01  5.77e-01  
  2  +5.0905e-01  +7.2975e+00  6.79e+00  1.32e-01  6.37e+00  2.14e-02  2.65e-01  9.90e-01  
  3  +4.9438e-01  +2.0949e+00  1.60e+00  2.89e-02  1.60e+00  7.72e-03  6.99e-02  7.52e-01  
  4  +4.5208e-01  +1.7864e+00  1.33e+00  9.55e-03  5.45e-01  1.44e-02  2.30e-02  7.01e-01  
  5  +4.1093e-01  +1.5342e+00  1.12e+00  5.82e-03  3.31e-01  1.29e-02  1.44e-02  4.79e-01  
  6  +3.5437e-01  +8.2228e-01  4.68e-01  2.60e-03  1.42e-01  1.07e-04  7.31e-03  7.25e-01  
  7  +3.0961e-01  +5.3681e-01  2.27e-01  1.20e-03  6.54e-02  6.70e-05  3.73e-03  5.46e-01  
  8  +2.7994e-01  +3.8557e-01  1.06e-01  5.23e-04  2.90e-02  4.40e-05  1.75e-03  6.08e-01  
  9  +2.6498e-01  +3.1931e-01  5.43e-02  2.58e-04  1.45e-02  3.22e-05  9.18e-04  6.48e-01  
 10  +2.5322e-01  +2.6761e-01  1.44e-02  6.49e-05  3.70e-03  1.20e-05  2.48e-04  8.97e-01  
 11  +2.4901e-01  +2.5091e-01  1.90e-03  8.49e-06  4.82e-04  1.61e-06  3.40e-05  9.49e-01  
 12  +2.4834e-01  +2.4844e-01  1.02e-04  4.56e-07  2.58e-05  8.29e-08  1.88e-06  9.78e-01  
 13  +2.4830e-01  +2.4830e-01  1.11e-06  4.94e-09  2.79e-07  8.94e-10  2.05e-08  9.89e-01  
 14  +2.4830e-01  +2.4830e-01  1.11e-08  4.94e-11  2.79e-09  8.94e-12  2.05e-10  9.90e-01  
 15  +2.4830e-01  +2.4830e-01  1.11e-10  4.95e-13  2.80e-11  8.99e-14  2.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.9432ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:14 PM: Optimal value: 2.483e-01
(CVXPY) Oct 06 04:24:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:14 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.2483
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:14 PM: Your problem has 371 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 371
  constraints   = 621
  nnz(P)        = 0
  nnz(A)        = 5092
  cones (total) = 1
    : Nonnegative = 1,  numel = 621

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9847e-01  +2.5242e+02  2.52e+02  9.44e-01  2.58e+01  1.00e+00  1.02e+00   ------   
  1  +5.4841e-01  +5.6039e+01  5.55e+01  4.35e-01  1.57e+01  3.81e-03  5.91e-01  5.75e-01  
  2  +5.0533e-01  +7.4609e+00  6.96e+00  1.32e-01  6.38e+00  2.20e-02  2.66e-01  9.90e-01  
  3  +4.8888e-01  +2.0903e+00  1.60e+00  2.66e-02  1.47e+00  8.42e-03  6.39e-02  7.75e-01  
  4  +4.4622e-01  +1.7121e+00  1.27e+00  1.00e-02  5.66e-01  1.24e-02  2.42e-02  6.57e-01  
  5  +4.0255e-01  +1.4749e+00  1.07e+00  5.90e-03  3.31e-01  1.15e-02  1.47e-02  5.02e-01  
  6  +3.4798e-01  +8.1718e-01  4.69e-01  2.72e-03  1.48e-01  9.76e-05  7.69e-03  7.34e-01  
  7  +3.0697e-01  +5.5768e-01  2.51e-01  1.37e-03  7.42e-02  7.31e-05  4.21e-03  5.20e-01  
  8  +2.7387e-01  +3.8031e-01  1.06e-01  5.38e-04  2.98e-02  4.26e-05  1.79e-03  6.39e-01  
  9  +2.5987e-01  +3.1990e-01  6.00e-02  2.91e-04  1.63e-02  3.70e-05  1.02e-03  6.61e-01  
 10  +2.4589e-01  +2.5723e-01  1.13e-02  5.36e-05  3.03e-03  7.23e-06  2.00e-04  8.42e-01  
 11  +2.4306e-01  +2.4486e-01  1.80e-03  8.55e-06  4.80e-04  1.10e-06  3.29e-05  8.43e-01  
 12  +2.4256e-01  +2.4275e-01  1.88e-04  8.98e-07  5.02e-05  1.33e-07  3.53e-06  9.35e-01  
 13  +2.4250e-01  +2.4250e-01  2.38e-06  1.13e-08  6.33e-07  1.68e-09  4.47e-08  9.88e-01  
 14  +2.4250e-01  +2.4250e-01  2.38e-08  1.14e-10  6.34e-09  1.68e-11  4.48e-10  9.90e-01  
 15  +2.4250e-01  +2.4250e-01  2.38e-10  1.14e-12  6.34e-11  1.69e-13  4.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.7114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:14 PM: Optimal value: 2.425e-01
(CVXPY) Oct 06 04:24:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:14 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 11, Objective: 0.2425
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:15 PM: Your problem has 381 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 381
  constraints   = 631
  nnz(P)        = 0
  nnz(A)        = 5173
  cones (total) = 1
    : Nonnegative = 1,  numel = 631

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9836e-01  +2.5257e+02  2.52e+02  9.45e-01  2.56e+01  1.00e+00  1.02e+00   ------   
  1  +5.4535e-01  +5.6106e+01  5.56e+01  4.36e-01  1.56e+01  3.82e-03  5.90e-01  5.75e-01  
  2  +5.0261e-01  +7.5683e+00  7.07e+00  1.31e-01  6.28e+00  2.23e-02  2.64e-01  9.90e-01  
  3  +4.8410e-01  +2.1511e+00  1.67e+00  2.57e-02  1.42e+00  9.10e-03  6.20e-02  7.82e-01  
  4  +4.3574e-01  +1.7037e+00  1.27e+00  9.71e-03  5.44e-01  1.23e-02  2.37e-02  6.58e-01  
  5  +3.8820e-01  +1.3807e+00  9.93e-01  5.43e-03  3.02e-01  1.05e-02  1.37e-02  5.12e-01  
  6  +3.3638e-01  +8.1406e-01  4.78e-01  2.82e-03  1.52e-01  8.62e-05  8.09e-03  7.65e-01  
  7  +2.8821e-01  +4.8113e-01  1.93e-01  1.06e-03  5.67e-02  4.18e-05  3.37e-03  6.15e-01  
  8  +2.6585e-01  +3.7390e-01  1.08e-01  5.46e-04  3.01e-02  3.84e-05  1.82e-03  5.54e-01  
  9  +2.4830e-01  +2.9538e-01  4.71e-02  2.27e-04  1.27e-02  2.51e-05  7.99e-04  6.93e-01  
 10  +2.3717e-01  +2.4562e-01  8.46e-03  4.01e-05  2.24e-03  4.43e-06  1.50e-04  8.27e-01  
 11  +2.3497e-01  +2.3610e-01  1.13e-03  5.34e-06  2.95e-04  5.69e-07  2.08e-05  8.70e-01  
 12  +2.3463e-01  +2.3471e-01  8.56e-05  4.05e-07  2.22e-05  4.60e-08  1.62e-06  9.32e-01  
 13  +2.3460e-01  +2.3460e-01  9.23e-07  4.37e-09  2.39e-07  4.96e-10  1.75e-08  9.89e-01  
 14  +2.3460e-01  +2.3460e-01  9.24e-09  4.37e-11  2.40e-09  4.96e-12  1.75e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.8544ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:15 PM: Optimal value: 2.346e-01
(CVXPY) Oct 06 04:24:15 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:15 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 12, Objective: 0.2346
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:15 PM: Your problem has 391 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Finished problem compilation (took 1.718e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 391
  constraints   = 641
  nnz(P)        = 0
  nnz(A)        = 5245
  cones (total) = 1
    : Nonnegative = 1,  numel = 641

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9823e-01  +2.5256e+02  2.52e+02  9.45e-01  2.54e+01  1.00e+00  1.02e+00   ------   
  1  +5.4069e-01  +5.6274e+01  5.57e+01  4.37e-01  1.54e+01  3.83e-03  5.90e-01  5.74e-01  
  2  +4.9937e-01  +7.6763e+00  7.18e+00  1.30e-01  6.23e+00  2.27e-02  2.64e-01  9.90e-01  
  3  +4.7829e-01  +2.0850e+00  1.61e+00  2.35e-02  1.30e+00  9.30e-03  5.66e-02  8.03e-01  
  4  +4.2927e-01  +1.6966e+00  1.27e+00  9.94e-03  5.51e-01  1.16e-02  2.44e-02  6.23e-01  
  5  +3.8152e-01  +1.3758e+00  9.94e-01  5.61e-03  3.09e-01  9.65e-03  1.43e-02  5.14e-01  
  6  +3.2483e-01  +8.0716e-01  4.82e-01  2.82e-03  1.51e-01  8.30e-05  8.12e-03  8.01e-01  
  7  +2.7700e-01  +4.7942e-01  2.02e-01  1.11e-03  5.92e-02  5.42e-05  3.54e-03  6.28e-01  
  8  +2.5400e-01  +3.7422e-01  1.20e-01  6.04e-04  3.33e-02  5.62e-05  2.01e-03  5.85e-01  
  9  +2.3434e-01  +2.8528e-01  5.09e-02  2.41e-04  1.35e-02  3.03e-05  8.64e-04  6.82e-01  
 10  +2.2146e-01  +2.2928e-01  7.82e-03  3.61e-05  2.03e-03  4.81e-06  1.40e-04  8.75e-01  
 11  +2.1930e-01  +2.2042e-01  1.12e-03  5.17e-06  2.87e-04  6.69e-07  2.10e-05  8.68e-01  
 12  +2.1895e-01  +2.1909e-01  1.36e-04  6.26e-07  3.45e-05  9.65e-08  2.62e-06  9.28e-01  
 13  +2.1890e-01  +2.1890e-01  1.39e-06  6.36e-09  3.51e-07  9.76e-10  2.67e-08  9.90e-01  
 14  +2.1890e-01  +2.1890e-01  1.39e-08  6.37e-11  3.51e-09  9.76e-12  2.67e-10  9.90e-01  
 15  +2.1890e-01  +2.1890e-01  1.39e-10  6.36e-13  3.51e-11  9.78e-14  2.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.0418ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:15 PM: Optimal value: 2.189e-01
(CVXPY) Oct 06 04:24:15 PM: Compilation took 1.718e-02 seconds
(CVXPY) Oct 06 04:24:15 PM: Solver (including time spent in interface) took 1.452e-02 seconds
Iteration: 13, Objective: 0.2189
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:15 PM: Your problem has 401 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 401
  constraints   = 651
  nnz(P)        = 0
  nnz(A)        = 5309
  cones (total) = 1
    : Nonnegative = 1,  numel = 651

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9822e-01  +2.5252e+02  2.52e+02  9.45e-01  2.52e+01  1.00e+00  1.02e+00   ------   
  1  +5.3615e-01  +5.6230e+01  5.57e+01  4.36e-01  1.52e+01  3.85e-03  5.87e-01  5.75e-01  
  2  +4.9462e-01  +7.8898e+00  7.40e+00  1.27e-01  6.05e+00  2.32e-02  2.57e-01  9.90e-01  
  3  +4.6775e-01  +2.0393e+00  1.57e+00  2.02e-02  1.11e+00  1.02e-02  4.85e-02  8.31e-01  
  4  +4.1257e-01  +1.7363e+00  1.32e+00  9.60e-03  5.29e-01  1.22e-02  2.35e-02  5.99e-01  
  5  +3.6777e-01  +1.3160e+00  9.48e-01  5.67e-03  3.09e-01  6.72e-03  1.45e-02  5.42e-01  
  6  +2.9691e-01  +6.3041e-01  3.33e-01  1.90e-03  1.01e-01  8.76e-04  5.56e-03  7.47e-01  
  7  +2.5732e-01  +4.1460e-01  1.57e-01  8.54e-04  4.61e-02  3.33e-04  2.75e-03  6.67e-01  
  8  +2.3904e-01  +3.3034e-01  9.13e-02  4.60e-04  2.56e-02  1.85e-04  1.56e-03  5.07e-01  
  9  +2.2280e-01  +2.5566e-01  3.29e-02  1.58e-04  8.90e-03  5.48e-05  5.79e-04  7.31e-01  
 10  +2.1451e-01  +2.1862e-01  4.11e-03  1.96e-05  1.10e-03  3.79e-06  7.67e-05  9.72e-01  
 11  +2.1320e-01  +2.1370e-01  5.00e-04  2.36e-06  1.30e-04  4.08e-07  9.82e-06  9.23e-01  
 12  +2.1302e-01  +2.1306e-01  4.21e-05  1.98e-07  1.08e-05  3.48e-08  8.38e-07  9.84e-01  
 13  +2.1300e-01  +2.1300e-01  4.22e-07  1.98e-09  1.09e-07  3.49e-10  8.41e-09  9.90e-01  
 14  +2.1300e-01  +2.1300e-01  4.22e-09  1.98e-11  1.09e-09  3.49e-12  8.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.34ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:15 PM: Optimal value: 2.130e-01
(CVXPY) Oct 06 04:24:15 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:24:15 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 14, Objective: 0.2130
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:15 PM: Your problem has 411 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 411
  constraints   = 661
  nnz(P)        = 0
  nnz(A)        = 5359
  cones (total) = 1
    : Nonnegative = 1,  numel = 661

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9823e-01  +2.5265e+02  2.52e+02  9.46e-01  2.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.3408e-01  +5.6198e+01  5.57e+01  4.36e-01  1.50e+01  3.86e-03  5.85e-01  5.77e-01  
  2  +4.9226e-01  +7.9950e+00  7.50e+00  1.26e-01  5.93e+00  2.34e-02  2.53e-01  9.90e-01  
  3  +4.6217e-01  +2.0617e+00  1.60e+00  1.93e-02  1.06e+00  1.07e-02  4.62e-02  8.38e-01  
  4  +4.0212e-01  +1.7425e+00  1.34e+00  9.12e-03  5.01e-01  1.27e-02  2.24e-02  6.00e-01  
  5  +3.4985e-01  +1.1890e+00  8.39e-01  5.03e-03  2.71e-01  4.01e-03  1.32e-02  6.43e-01  
  6  +2.8516e-01  +5.8839e-01  3.03e-01  1.74e-03  9.17e-02  8.96e-04  5.19e-03  6.63e-01  
  7  +2.4603e-01  +3.8809e-01  1.42e-01  7.56e-04  4.09e-02  3.25e-04  2.46e-03  7.40e-01  
  8  +2.3057e-01  +3.1671e-01  8.61e-02  4.34e-04  2.40e-02  1.79e-04  1.48e-03  4.99e-01  
  9  +2.1426e-01  +2.4306e-01  2.88e-02  1.37e-04  7.68e-03  5.40e-05  5.06e-04  7.06e-01  
 10  +2.0829e-01  +2.1772e-01  9.43e-03  4.41e-05  2.46e-03  1.56e-05  1.71e-04  7.25e-01  
 11  +2.0552e-01  +2.0632e-01  7.99e-04  3.75e-06  2.07e-04  7.14e-07  1.52e-05  9.72e-01  
 12  +2.0523e-01  +2.0531e-01  7.50e-05  3.53e-07  1.94e-05  6.47e-08  1.46e-06  9.68e-01  
 13  +2.0520e-01  +2.0520e-01  7.53e-07  3.55e-09  1.95e-07  6.48e-10  1.47e-08  9.90e-01  
 14  +2.0520e-01  +2.0520e-01  7.53e-09  3.55e-11  1.95e-09  6.48e-12  1.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.3526ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:15 PM: Optimal value: 2.052e-01
(CVXPY) Oct 06 04:24:15 PM: Compilation took 1.571e-02 seconds
(CVXPY) Oct 06 04:24:15 PM: Solver (including time spent in interface) took 1.555e-02 seconds
Iteration: 15, Objective: 0.2052
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:15 PM: Your problem has 421 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:15 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 421
  constraints   = 671
  nnz(P)        = 0
  nnz(A)        = 5414
  cones (total) = 1
    : Nonnegative = 1,  numel = 671

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9823e-01  +2.5262e+02  2.52e+02  9.46e-01  2.49e+01  1.00e+00  1.02e+00   ------   
  1  +5.3294e-01  +5.6172e+01  5.56e+01  4.36e-01  1.48e+01  3.86e-03  5.84e-01  5.77e-01  
  2  +4.9069e-01  +8.0420e+00  7.55e+00  1.25e-01  5.83e+00  2.35e-02  2.51e-01  9.90e-01  
  3  +4.5949e-01  +2.1918e+00  1.73e+00  2.04e-02  1.11e+00  1.12e-02  4.88e-02  8.24e-01  
  4  +3.9593e-01  +1.7584e+00  1.36e+00  9.05e-03  4.95e-01  1.29e-02  2.22e-02  6.06e-01  
  5  +3.2745e-01  +9.7400e-01  6.47e-01  3.75e-03  2.00e-01  4.51e-04  1.00e-02  8.62e-01  
  6  +2.6156e-01  +4.7046e-01  2.09e-01  1.19e-03  6.23e-02  1.57e-04  3.66e-03  8.32e-01  
  7  +2.4465e-01  +3.9560e-01  1.51e-01  8.03e-04  4.35e-02  1.24e-04  2.54e-03  4.23e-01  
  8  +2.2145e-01  +2.8776e-01  6.63e-02  3.26e-04  1.81e-02  5.70e-05  1.10e-03  6.21e-01  
  9  +2.1206e-01  +2.4696e-01  3.49e-02  1.67e-04  9.37e-03  3.03e-05  5.89e-04  5.38e-01  
 10  +2.0266e-01  +2.0648e-01  3.82e-03  1.81e-05  1.01e-03  3.03e-06  6.78e-05  9.40e-01  
 11  +2.0147e-01  +2.0190e-01  4.28e-04  2.06e-06  1.13e-04  2.98e-07  8.09e-06  8.91e-01  
 12  +2.0133e-01  +2.0140e-01  7.28e-05  3.46e-07  1.90e-05  6.01e-08  1.41e-06  9.59e-01  
 13  +2.0130e-01  +2.0130e-01  7.72e-07  3.67e-09  2.02e-07  6.34e-10  1.50e-08  9.89e-01  
 14  +2.0130e-01  +2.0130e-01  7.74e-09  3.68e-11  2.02e-09  6.35e-12  1.50e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.3366ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:15 PM: Optimal value: 2.013e-01
(CVXPY) Oct 06 04:24:15 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:15 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 16, Objective: 0.2013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:16 PM: Your problem has 431 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:16 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 431
  constraints   = 681
  nnz(P)        = 0
  nnz(A)        = 5468
  cones (total) = 1
    : Nonnegative = 1,  numel = 681

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9809e-01  +2.5275e+02  2.52e+02  9.47e-01  2.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.2883e-01  +5.6271e+01  5.57e+01  4.37e-01  1.47e+01  3.87e-03  5.84e-01  5.77e-01  
  2  +4.8730e-01  +8.1847e+00  7.70e+00  1.24e-01  5.78e+00  2.39e-02  2.50e-01  9.90e-01  
  3  +4.5263e-01  +2.1299e+00  1.68e+00  1.89e-02  1.03e+00  1.13e-02  4.52e-02  8.36e-01  
  4  +3.9495e-01  +1.8363e+00  1.44e+00  9.79e-03  5.33e-01  1.30e-02  2.39e-02  5.45e-01  
  5  +3.2787e-01  +1.0076e+00  6.80e-01  3.99e-03  2.13e-01  2.49e-03  1.06e-02  7.44e-01  
  6  +2.6530e-01  +5.3404e-01  2.69e-01  1.55e-03  8.11e-02  5.98e-04  4.64e-03  7.05e-01  
  7  +2.3749e-01  +3.8772e-01  1.50e-01  8.11e-04  4.35e-02  3.12e-04  2.58e-03  5.50e-01  
  8  +2.1870e-01  +2.9373e-01  7.50e-02  3.86e-04  2.10e-02  1.43e-04  1.30e-03  5.79e-01  
  9  +2.1012e-01  +2.5107e-01  4.10e-02  2.07e-04  1.13e-02  7.15e-05  7.22e-04  5.27e-01  
 10  +2.0128e-01  +2.0798e-01  6.70e-03  3.39e-05  1.84e-03  8.52e-06  1.25e-04  8.94e-01  
 11  +1.9975e-01  +2.0127e-01  1.52e-03  7.76e-06  4.15e-04  1.44e-06  3.04e-05  8.96e-01  
 12  +1.9928e-01  +1.9948e-01  2.04e-04  1.03e-06  5.46e-05  1.75e-07  4.27e-06  8.88e-01  
 13  +1.9920e-01  +1.9922e-01  1.17e-05  5.83e-08  3.11e-06  9.24e-09  2.47e-07  9.90e-01  
 14  +1.9920e-01  +1.9920e-01  1.17e-07  5.85e-10  3.12e-08  9.27e-11  2.48e-09  9.90e-01  
 15  +1.9920e-01  +1.9920e-01  1.17e-09  5.85e-12  3.12e-10  9.31e-13  2.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.131ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:16 PM: Optimal value: 1.992e-01
(CVXPY) Oct 06 04:24:16 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:16 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 17, Objective: 0.1992
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:16 PM: Your problem has 441 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:16 PM: Finished problem compilation (took 1.152e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 441
  constraints   = 691
  nnz(P)        = 0
  nnz(A)        = 5557
  cones (total) = 1
    : Nonnegative = 1,  numel = 691

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9800e-01  +2.5279e+02  2.52e+02  9.47e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.2474e-01  +5.6381e+01  5.59e+01  4.37e-01  1.45e+01  3.88e-03  5.83e-01  5.76e-01  
  2  +4.8240e-01  +8.2799e+00  7.80e+00  1.23e-01  5.69e+00  2.43e-02  2.48e-01  9.90e-01  
  3  +4.4350e-01  +2.2229e+00  1.78e+00  1.95e-02  1.05e+00  1.15e-02  4.66e-02  8.29e-01  
  4  +3.8148e-01  +2.0134e+00  1.63e+00  1.07e-02  5.79e-01  1.32e-02  2.60e-02  5.65e-01  
  5  +3.2311e-01  +1.0495e+00  7.26e-01  4.61e-03  2.43e-01  1.26e-04  1.22e-02  8.35e-01  
  6  +2.5707e-01  +4.9612e-01  2.39e-01  1.43e-03  7.43e-02  7.39e-05  4.31e-03  7.23e-01  
  7  +2.3373e-01  +3.9268e-01  1.59e-01  8.81e-04  4.67e-02  7.12e-05  2.78e-03  4.87e-01  
  8  +2.1428e-01  +2.9969e-01  8.54e-02  4.47e-04  2.38e-02  4.33e-05  1.50e-03  5.21e-01  
  9  +2.0498e-01  +2.5766e-01  5.27e-02  2.65e-04  1.42e-02  3.13e-05  9.22e-04  5.04e-01  
 10  +1.9613e-01  +2.1636e-01  2.02e-02  1.00e-04  5.36e-03  1.64e-05  3.67e-04  8.72e-01  
 11  +1.9086e-01  +1.9472e-01  3.87e-03  1.91e-05  1.01e-03  2.88e-06  7.41e-05  8.32e-01  
 12  +1.8975e-01  +1.9041e-01  6.54e-04  3.22e-06  1.68e-04  5.17e-07  1.34e-05  9.71e-01  
 13  +1.8951e-01  +1.8953e-01  2.18e-05  1.07e-07  5.60e-06  1.66e-08  4.56e-07  9.70e-01  
 14  +1.8950e-01  +1.8950e-01  2.19e-07  1.08e-09  5.60e-08  1.66e-10  4.56e-09  9.90e-01  
 15  +1.8950e-01  +1.8950e-01  2.19e-09  1.08e-11  5.60e-10  1.66e-12  4.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.5017ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:16 PM: Optimal value: 1.895e-01
(CVXPY) Oct 06 04:24:16 PM: Compilation took 1.152e-02 seconds
(CVXPY) Oct 06 04:24:16 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 18, Objective: 0.1895
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:16 PM: Your problem has 451 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:16 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 451
  constraints   = 701
  nnz(P)        = 0
  nnz(A)        = 5606
  cones (total) = 1
    : Nonnegative = 1,  numel = 701

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9793e-01  +2.5292e+02  2.52e+02  9.47e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.2058e-01  +5.6542e+01  5.60e+01  4.38e-01  1.44e+01  3.89e-03  5.83e-01  5.76e-01  
  2  +4.7824e-01  +8.3733e+00  7.90e+00  1.22e-01  5.64e+00  2.46e-02  2.48e-01  9.90e-01  
  3  +4.3738e-01  +2.3489e+00  1.91e+00  2.08e-02  1.11e+00  1.16e-02  4.97e-02  8.17e-01  
  4  +3.7506e-01  +2.0623e+00  1.69e+00  1.12e-02  6.01e-01  1.30e-02  2.73e-02  5.48e-01  
  5  +3.1357e-01  +9.9736e-01  6.84e-01  4.20e-03  2.20e-01  1.03e-03  1.12e-02  7.98e-01  
  6  +2.5361e-01  +5.2867e-01  2.75e-01  1.64e-03  8.48e-02  3.32e-04  4.91e-03  6.63e-01  
  7  +2.2344e-01  +3.6879e-01  1.45e-01  8.07e-04  4.25e-02  1.76e-04  2.57e-03  5.83e-01  
  8  +2.0400e-01  +2.7164e-01  6.76e-02  3.54e-04  1.89e-02  7.97e-05  1.21e-03  6.14e-01  
  9  +1.9473e-01  +2.2447e-01  2.97e-02  1.52e-04  8.09e-03  3.04e-05  5.42e-04  8.38e-01  
 10  +1.8887e-01  +1.9813e-01  9.25e-03  4.73e-05  2.50e-03  7.90e-06  1.77e-04  9.90e-01  
 11  +1.8655e-01  +1.8912e-01  2.57e-03  1.31e-05  6.88e-04  2.07e-06  5.15e-05  7.43e-01  
 12  +1.8580e-01  +1.8632e-01  5.25e-04  2.64e-06  1.37e-04  4.22e-07  1.10e-05  9.51e-01  
 13  +1.8561e-01  +1.8563e-01  1.86e-05  9.32e-08  4.83e-06  1.45e-08  3.93e-07  9.68e-01  
 14  +1.8560e-01  +1.8560e-01  1.86e-07  9.34e-10  4.84e-08  1.45e-10  3.94e-09  9.90e-01  
 15  +1.8560e-01  +1.8560e-01  1.86e-09  9.34e-12  4.84e-10  1.46e-12  3.94e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.0445ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:16 PM: Optimal value: 1.856e-01
(CVXPY) Oct 06 04:24:16 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:16 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 19, Objective: 0.1856
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:16 PM: Your problem has 461 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:16 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 461
  constraints   = 711
  nnz(P)        = 0
  nnz(A)        = 5685
  cones (total) = 1
    : Nonnegative = 1,  numel = 711

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9789e-01  +2.5290e+02  2.52e+02  9.48e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.1670e-01  +5.6622e+01  5.61e+01  4.37e-01  1.42e+01  3.91e-03  5.82e-01  5.75e-01  
  2  +4.7285e-01  +8.4803e+00  8.01e+00  1.20e-01  5.51e+00  2.49e-02  2.46e-01  9.90e-01  
  3  +4.2928e-01  +2.4400e+00  2.01e+00  2.14e-02  1.13e+00  1.16e-02  5.14e-02  8.09e-01  
  4  +3.6679e-01  +2.1826e+00  1.82e+00  1.20e-02  6.36e-01  1.28e-02  2.94e-02  5.42e-01  
  5  +3.1732e-01  +1.1896e+00  8.72e-01  5.43e-03  2.83e-01  2.85e-03  1.43e-02  6.82e-01  
  6  +2.5873e-01  +5.8062e-01  3.22e-01  1.94e-03  9.93e-02  7.91e-04  5.67e-03  6.55e-01  
  7  +2.2589e-01  +4.0480e-01  1.79e-01  1.00e-03  5.23e-02  4.04e-04  3.10e-03  5.74e-01  
  8  +2.0529e-01  +2.9670e-01  9.14e-02  4.92e-04  2.59e-02  1.95e-04  1.60e-03  5.31e-01  
  9  +1.9073e-01  +2.2325e-01  3.25e-02  1.70e-04  9.01e-03  6.05e-05  5.82e-04  7.14e-01  
 10  +1.8489e-01  +1.9500e-01  1.01e-02  5.21e-05  2.77e-03  1.16e-05  1.86e-04  8.78e-01  
 11  +1.8285e-01  +1.8618e-01  3.33e-03  1.73e-05  9.10e-04  3.36e-06  6.45e-05  7.80e-01  
 12  +1.8200e-01  +1.8280e-01  8.01e-04  4.10e-06  2.14e-04  7.36e-07  1.61e-05  8.54e-01  
 13  +1.8174e-01  +1.8184e-01  1.01e-04  5.10e-07  2.66e-05  9.10e-08  2.07e-06  8.85e-01  
 14  +1.8170e-01  +1.8170e-01  1.25e-06  6.31e-09  3.28e-07  1.12e-09  2.57e-08  9.88e-01  
 15  +1.8170e-01  +1.8170e-01  1.26e-08  6.34e-11  3.30e-09  1.13e-11  2.59e-10  9.90e-01  
 16  +1.8170e-01  +1.8170e-01  1.27e-10  6.36e-13  3.31e-11  1.13e-13  2.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.5936ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:16 PM: Optimal value: 1.817e-01
(CVXPY) Oct 06 04:24:16 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:16 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 20, Objective: 0.1817
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:17 PM: Your problem has 471 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 471
  constraints   = 721
  nnz(P)        = 0
  nnz(A)        = 5744
  cones (total) = 1
    : Nonnegative = 1,  numel = 721

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9782e-01  +2.5296e+02  2.52e+02  9.48e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.1346e-01  +5.6577e+01  5.61e+01  4.37e-01  1.41e+01  3.92e-03  5.80e-01  5.77e-01  
  2  +4.6751e-01  +8.6738e+00  8.21e+00  1.18e-01  5.37e+00  2.54e-02  2.41e-01  9.90e-01  
  3  +4.1503e-01  +2.6464e+00  2.23e+00  2.16e-02  1.13e+00  1.31e-02  5.17e-02  8.05e-01  
  4  +3.4730e-01  +2.0616e+00  1.71e+00  1.10e-02  5.80e-01  1.26e-02  2.70e-02  5.38e-01  
  5  +2.9316e-01  +9.1045e-01  6.17e-01  4.01e-03  2.06e-01  1.19e-03  1.08e-02  7.58e-01  
  6  +2.4452e-01  +5.4795e-01  3.03e-01  1.87e-03  9.55e-02  5.11e-04  5.53e-03  5.74e-01  
  7  +2.0964e-01  +3.4884e-01  1.39e-01  7.97e-04  4.13e-02  2.18e-04  2.54e-03  6.44e-01  
  8  +1.9335e-01  +2.6448e-01  7.11e-02  3.93e-04  2.06e-02  1.05e-04  1.32e-03  5.36e-01  
  9  +1.8267e-01  +2.1058e-01  2.79e-02  1.50e-04  7.89e-03  3.91e-05  5.22e-04  6.72e-01  
 10  +1.7785e-01  +1.8710e-01  9.25e-03  4.98e-05  2.61e-03  9.09e-06  1.81e-04  8.38e-01  
 11  +1.7583e-01  +1.7857e-01  2.75e-03  1.47e-05  7.68e-04  2.43e-06  5.58e-05  8.19e-01  
 12  +1.7503e-01  +1.7542e-01  3.86e-04  2.06e-06  1.07e-04  3.21e-07  8.14e-06  8.70e-01  
 13  +1.7490e-01  +1.7491e-01  9.60e-06  5.12e-08  2.66e-06  7.81e-09  2.04e-07  9.77e-01  
 14  +1.7490e-01  +1.7490e-01  9.61e-08  5.13e-10  2.66e-08  7.82e-11  2.04e-09  9.90e-01  
 15  +1.7490e-01  +1.7490e-01  9.61e-10  5.13e-12  2.66e-10  7.82e-13  2.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.0664ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:17 PM: Optimal value: 1.749e-01
(CVXPY) Oct 06 04:24:17 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:17 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 21, Objective: 0.1749
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:17 PM: Your problem has 481 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 481
  constraints   = 731
  nnz(P)        = 0
  nnz(A)        = 5798
  cones (total) = 1
    : Nonnegative = 1,  numel = 731

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9782e-01  +2.5295e+02  2.52e+02  9.48e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +5.1032e-01  +5.6632e+01  5.61e+01  4.36e-01  1.39e+01  3.93e-03  5.78e-01  5.77e-01  
  2  +4.6403e-01  +8.6884e+00  8.22e+00  1.17e-01  5.27e+00  2.55e-02  2.39e-01  9.90e-01  
  3  +4.1116e-01  +2.7755e+00  2.36e+00  2.31e-02  1.19e+00  1.30e-02  5.54e-02  7.90e-01  
  4  +3.4562e-01  +2.1713e+00  1.83e+00  1.20e-02  6.26e-01  1.25e-02  2.96e-02  5.18e-01  
  5  +2.9322e-01  +9.7253e-01  6.79e-01  4.42e-03  2.26e-01  1.23e-03  1.19e-02  7.64e-01  
  6  +2.4323e-01  +5.6564e-01  3.22e-01  2.01e-03  1.01e-01  5.03e-04  5.95e-03  5.85e-01  
  7  +2.0835e-01  +3.6032e-01  1.52e-01  8.80e-04  4.51e-02  2.20e-04  2.81e-03  6.52e-01  
  8  +1.9294e-01  +2.7947e-01  8.65e-02  4.82e-04  2.49e-02  1.21e-04  1.61e-03  4.82e-01  
  9  +1.7961e-01  +2.1105e-01  3.14e-02  1.69e-04  8.82e-03  4.07e-05  5.94e-04  6.99e-01  
 10  +1.7438e-01  +1.8457e-01  1.02e-02  5.45e-05  2.84e-03  7.92e-06  1.99e-04  9.90e-01  
 11  +1.7175e-01  +1.7397e-01  2.21e-03  1.19e-05  6.12e-04  1.61e-06  4.58e-05  8.24e-01  
 12  +1.7104e-01  +1.7115e-01  1.09e-04  5.86e-07  3.00e-05  6.78e-08  2.35e-06  9.52e-01  
 13  +1.7100e-01  +1.7100e-01  1.17e-06  6.32e-09  3.23e-07  7.27e-10  2.55e-08  9.89e-01  
 14  +1.7100e-01  +1.7100e-01  1.17e-08  6.33e-11  3.24e-09  7.28e-12  2.55e-10  9.90e-01  
 15  +1.7100e-01  +1.7100e-01  1.17e-10  6.33e-13  3.24e-11  7.28e-14  2.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.5288ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:17 PM: Optimal value: 1.710e-01
(CVXPY) Oct 06 04:24:17 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:17 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 22, Objective: 0.1710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:17 PM: Your problem has 491 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 491
  constraints   = 741
  nnz(P)        = 0
  nnz(A)        = 5836
  cones (total) = 1
    : Nonnegative = 1,  numel = 741

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9782e-01  +2.5299e+02  2.52e+02  9.49e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.0898e-01  +5.6649e+01  5.61e+01  4.36e-01  1.38e+01  3.94e-03  5.77e-01  5.77e-01  
  2  +4.6287e-01  +8.6871e+00  8.22e+00  1.16e-01  5.19e+00  2.55e-02  2.38e-01  9.90e-01  
  3  +4.0813e-01  +2.6172e+00  2.21e+00  2.14e-02  1.10e+00  1.25e-02  5.16e-02  8.06e-01  
  4  +3.4574e-01  +2.1814e+00  1.84e+00  1.21e-02  6.27e-01  1.25e-02  2.99e-02  4.87e-01  
  5  +2.9292e-01  +9.5183e-01  6.59e-01  4.42e-03  2.23e-01  1.12e-04  1.20e-02  8.34e-01  
  6  +2.3729e-01  +5.1763e-01  2.80e-01  1.77e-03  8.83e-02  8.93e-05  5.36e-03  6.52e-01  
  7  +2.0995e-01  +3.7132e-01  1.61e-01  9.51e-04  4.84e-02  7.65e-05  3.05e-03  5.81e-01  
  8  +1.9300e-01  +2.8109e-01  8.81e-02  4.98e-04  2.56e-02  4.57e-05  1.68e-03  5.11e-01  
  9  +1.7944e-01  +2.1073e-01  3.13e-02  1.71e-04  8.84e-03  1.78e-05  6.06e-04  6.94e-01  
 10  +1.7423e-01  +1.8412e-01  9.88e-03  5.37e-05  2.77e-03  7.83e-06  1.98e-04  9.90e-01  
 11  +1.7196e-01  +1.7475e-01  2.79e-03  1.52e-05  7.78e-04  2.12e-06  5.87e-05  7.69e-01  
 12  +1.7127e-01  +1.7204e-01  7.73e-04  4.19e-06  2.14e-04  5.86e-07  1.68e-05  8.32e-01  
 13  +1.7101e-01  +1.7104e-01  2.93e-05  1.59e-07  8.09e-06  2.16e-08  6.46e-07  9.90e-01  
 14  +1.7100e-01  +1.7100e-01  2.95e-07  1.60e-09  8.14e-08  2.17e-10  6.50e-09  9.90e-01  
 15  +1.7100e-01  +1.7100e-01  2.95e-09  1.60e-11  8.15e-10  2.17e-12  6.51e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.5987ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:17 PM: Optimal value: 1.710e-01
(CVXPY) Oct 06 04:24:17 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:17 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 23, Objective: 0.1710
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:17 PM: Your problem has 501 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 501
  constraints   = 751
  nnz(P)        = 0
  nnz(A)        = 5871
  cones (total) = 1
    : Nonnegative = 1,  numel = 751

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9783e-01  +2.5304e+02  2.53e+02  9.49e-01  2.37e+01  1.00e+00  1.02e+00   ------   
  1  +5.0645e-01  +5.6625e+01  5.61e+01  4.36e-01  1.36e+01  3.95e-03  5.75e-01  5.78e-01  
  2  +4.5840e-01  +8.8288e+00  8.37e+00  1.14e-01  5.05e+00  2.58e-02  2.34e-01  9.90e-01  
  3  +3.9751e-01  +2.6547e+00  2.26e+00  2.06e-02  1.05e+00  1.29e-02  4.99e-02  8.10e-01  
  4  +3.3451e-01  +2.1215e+00  1.79e+00  1.16e-02  5.93e-01  1.19e-02  2.87e-02  4.90e-01  
  5  +2.8145e-01  +8.6694e-01  5.85e-01  3.91e-03  1.95e-01  8.29e-04  1.08e-02  7.85e-01  
  6  +2.2135e-01  +4.4079e-01  2.19e-01  1.37e-03  6.76e-02  2.49e-04  4.28e-03  7.58e-01  
  7  +2.0568e-01  +3.6106e-01  1.55e-01  9.21e-04  4.64e-02  1.72e-04  2.96e-03  4.67e-01  
  8  +1.8790e-01  +2.6471e-01  7.68e-02  4.35e-04  2.22e-02  8.38e-05  1.47e-03  5.40e-01  
  9  +1.7703e-01  +2.0973e-01  3.27e-02  1.77e-04  9.18e-03  3.49e-05  6.27e-04  6.47e-01  
 10  +1.7089e-01  +1.7944e-01  8.54e-03  4.59e-05  2.38e-03  6.84e-06  1.71e-04  9.30e-01  
 11  +1.6886e-01  +1.7100e-01  2.14e-03  1.15e-05  5.92e-04  1.62e-06  4.53e-05  8.22e-01  
 12  +1.6827e-01  +1.6874e-01  4.68e-04  2.49e-06  1.27e-04  3.55e-07  1.02e-05  9.24e-01  
 13  +1.6810e-01  +1.6811e-01  6.88e-06  3.66e-08  1.87e-06  4.96e-09  1.52e-07  9.85e-01  
 14  +1.6810e-01  +1.6810e-01  6.88e-08  3.66e-10  1.87e-08  4.96e-11  1.52e-09  9.90e-01  
 15  +1.6810e-01  +1.6810e-01  6.88e-10  3.66e-12  1.87e-10  4.96e-13  1.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.9261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:17 PM: Optimal value: 1.681e-01
(CVXPY) Oct 06 04:24:17 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:17 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 24, Objective: 0.1681
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:17 PM: Your problem has 511 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:17 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 761
  nnz(P)        = 0
  nnz(A)        = 5918
  cones (total) = 1
    : Nonnegative = 1,  numel = 761

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9759e-01  +2.5312e+02  2.53e+02  9.49e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +4.9999e-01  +5.6811e+01  5.63e+01  4.37e-01  1.35e+01  3.96e-03  5.77e-01  5.77e-01  
  2  +4.4935e-01  +9.0444e+00  8.60e+00  1.13e-01  5.03e+00  2.66e-02  2.34e-01  9.90e-01  
  3  +3.8988e-01  +3.0180e+00  2.63e+00  2.43e-02  1.22e+00  1.35e-02  5.83e-02  7.71e-01  
  4  +3.3329e-01  +2.3983e+00  2.07e+00  1.43e-02  7.24e-01  1.12e-02  3.53e-02  4.87e-01  
  5  +2.8006e-01  +9.0658e-01  6.27e-01  4.34e-03  2.15e-01  1.02e-04  1.18e-02  8.73e-01  
  6  +2.2519e-01  +4.9747e-01  2.72e-01  1.77e-03  8.70e-02  9.77e-05  5.39e-03  6.74e-01  
  7  +1.9955e-01  +3.4900e-01  1.49e-01  9.07e-04  4.55e-02  7.51e-05  2.92e-03  6.03e-01  
  8  +1.8213e-01  +2.5273e-01  7.06e-02  4.07e-04  2.07e-02  3.89e-05  1.38e-03  5.89e-01  
  9  +1.7291e-01  +2.0577e-01  3.29e-02  1.81e-04  9.39e-03  1.98e-05  6.41e-04  6.06e-01  
 10  +1.6667e-01  +1.7478e-01  8.11e-03  4.43e-05  2.29e-03  5.28e-06  1.65e-04  8.53e-01  
 11  +1.6492e-01  +1.6707e-01  2.15e-03  1.18e-05  6.02e-04  1.44e-06  4.63e-05  8.20e-01  
 12  +1.6437e-01  +1.6486e-01  4.87e-04  2.65e-06  1.35e-04  3.49e-07  1.09e-05  9.06e-01  
 13  +1.6420e-01  +1.6421e-01  7.55e-06  4.10e-08  2.08e-06  5.13e-09  1.70e-07  9.85e-01  
 14  +1.6420e-01  +1.6420e-01  7.55e-08  4.10e-10  2.08e-08  5.13e-11  1.70e-09  9.90e-01  
 15  +1.6420e-01  +1.6420e-01  7.55e-10  4.10e-12  2.08e-10  5.14e-13  1.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.48ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:17 PM: Optimal value: 1.642e-01
(CVXPY) Oct 06 04:24:17 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:17 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 25, Objective: 0.1642
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:18 PM: Your problem has 521 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:18 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 771
  nnz(P)        = 0
  nnz(A)        = 5978
  cones (total) = 1
    : Nonnegative = 1,  numel = 771

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9756e-01  +2.5312e+02  2.53e+02  9.50e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +4.9807e-01  +5.6876e+01  5.64e+01  4.38e-01  1.34e+01  3.96e-03  5.77e-01  5.76e-01  
  2  +4.4733e-01  +9.0563e+00  8.61e+00  1.13e-01  4.99e+00  2.66e-02  2.35e-01  9.90e-01  
  3  +3.8742e-01  +3.0831e+00  2.70e+00  2.50e-02  1.25e+00  1.36e-02  6.04e-02  7.62e-01  
  4  +3.2121e-01  +2.3154e+00  1.99e+00  1.34e-02  6.72e-01  1.11e-02  3.33e-02  5.29e-01  
  5  +2.7314e-01  +8.7870e-01  6.06e-01  4.21e-03  2.06e-01  9.99e-04  1.16e-02  7.97e-01  
  6  +2.2301e-01  +5.4326e-01  3.20e-01  2.09e-03  1.02e-01  4.07e-04  6.35e-03  7.13e-01  
  7  +1.9198e-01  +3.2371e-01  1.32e-01  8.04e-04  3.97e-02  1.60e-04  2.67e-03  6.51e-01  
  8  +1.7637e-01  +2.3404e-01  5.77e-02  3.35e-04  1.67e-02  6.47e-05  1.17e-03  6.75e-01  
  9  +1.7031e-01  +2.0242e-01  3.21e-02  1.81e-04  9.19e-03  3.46e-05  6.54e-04  5.26e-01  
 10  +1.6424e-01  +1.7128e-01  7.04e-03  3.94e-05  1.99e-03  6.67e-06  1.50e-04  8.08e-01  
 11  +1.6290e-01  +1.6501e-01  2.11e-03  1.18e-05  5.93e-04  1.80e-06  4.75e-05  7.78e-01  
 12  +1.6247e-01  +1.6327e-01  8.00e-04  4.39e-06  2.20e-04  6.56e-07  1.84e-05  7.23e-01  
 13  +1.6221e-01  +1.6225e-01  3.84e-05  2.10e-07  1.05e-05  2.69e-08  9.01e-07  9.90e-01  
 14  +1.6220e-01  +1.6220e-01  3.89e-07  2.12e-09  1.06e-07  2.72e-10  9.13e-09  9.90e-01  
 15  +1.6220e-01  +1.6220e-01  3.90e-09  2.13e-11  1.07e-09  2.73e-12  9.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.935ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:18 PM: Optimal value: 1.622e-01
(CVXPY) Oct 06 04:24:18 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:18 PM: Solver (including time spent in interface) took 3.129e-02 seconds
Iteration: 26, Objective: 0.1622
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:18 PM: Your problem has 531 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:18 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 781
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 781

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9757e-01  +2.5313e+02  2.53e+02  9.50e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +4.9551e-01  +5.6890e+01  5.64e+01  4.37e-01  1.33e+01  3.97e-03  5.75e-01  5.77e-01  
  2  +4.4322e-01  +9.1412e+00  8.70e+00  1.12e-01  4.90e+00  2.69e-02  2.32e-01  9.90e-01  
  3  +3.8124e-01  +3.1179e+00  2.74e+00  2.49e-02  1.23e+00  1.36e-02  6.00e-02  7.61e-01  
  4  +3.2418e-01  +2.3505e+00  2.03e+00  1.41e-02  7.03e-01  1.08e-02  3.52e-02  4.80e-01  
  5  +2.7367e-01  +9.0725e-01  6.34e-01  4.48e-03  2.18e-01  4.28e-04  1.23e-02  8.48e-01  
  6  +2.1967e-01  +5.3302e-01  3.13e-01  2.06e-03  9.97e-02  2.37e-04  6.26e-03  7.50e-01  
  7  +1.8808e-01  +3.1674e-01  1.29e-01  7.89e-04  3.88e-02  1.01e-04  2.61e-03  6.64e-01  
  8  +1.7354e-01  +2.3430e-01  6.08e-02  3.56e-04  1.77e-02  4.82e-05  1.24e-03  6.40e-01  
  9  +1.6680e-01  +1.9947e-01  3.27e-02  1.85e-04  9.36e-03  2.62e-05  6.66e-04  5.42e-01  
 10  +1.6050e-01  +1.6768e-01  7.19e-03  4.03e-05  2.03e-03  5.34e-06  1.53e-04  8.09e-01  
 11  +1.5913e-01  +1.6133e-01  2.20e-03  1.23e-05  6.16e-04  1.59e-06  4.98e-05  8.24e-01  
 12  +1.5862e-01  +1.5927e-01  6.54e-04  3.63e-06  1.81e-04  4.70e-07  1.53e-05  7.95e-01  
 13  +1.5841e-01  +1.5842e-01  1.62e-05  8.96e-08  4.46e-06  1.08e-08  3.83e-07  9.90e-01  
 14  +1.5840e-01  +1.5840e-01  1.62e-07  8.96e-10  4.46e-08  1.08e-10  3.84e-09  9.90e-01  
 15  +1.5840e-01  +1.5840e-01  1.62e-09  8.96e-12  4.46e-10  1.08e-12  3.84e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.3398ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:18 PM: Optimal value: 1.584e-01
(CVXPY) Oct 06 04:24:18 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:18 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 27, Objective: 0.1584
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:18 PM: Your problem has 541 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:18 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 791
  nnz(P)        = 0
  nnz(A)        = 6125
  cones (total) = 1
    : Nonnegative = 1,  numel = 791

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9754e-01  +2.5308e+02  2.53e+02  9.50e-01  2.31e+01  1.00e+00  1.02e+00   ------   
  1  +4.9270e-01  +5.6977e+01  5.65e+01  4.37e-01  1.32e+01  3.99e-03  5.74e-01  5.76e-01  
  2  +4.4087e-01  +9.0683e+00  8.63e+00  1.11e-01  4.82e+00  2.67e-02  2.32e-01  9.90e-01  
  3  +3.8243e-01  +3.2490e+00  2.87e+00  2.71e-02  1.32e+00  1.34e-02  6.57e-02  7.40e-01  
  4  +3.2130e-01  +2.5524e+00  2.23e+00  1.56e-02  7.70e-01  1.10e-02  3.90e-02  5.04e-01  
  5  +2.7764e-01  +9.9179e-01  7.14e-01  5.15e-03  2.50e-01  2.01e-04  1.41e-02  8.64e-01  
  6  +2.3131e-01  +6.2931e-01  3.98e-01  2.70e-03  1.30e-01  1.82e-04  8.01e-03  6.18e-01  
  7  +1.9302e-01  +3.4793e-01  1.55e-01  9.83e-04  4.78e-02  7.92e-05  3.18e-03  6.60e-01  
  8  +1.8435e-01  +2.9978e-01  1.15e-01  7.11e-04  3.50e-02  6.38e-05  2.35e-03  3.51e-01  
  9  +1.6932e-01  +2.1713e-01  4.78e-02  2.78e-04  1.40e-02  2.93e-05  9.65e-04  6.61e-01  
 10  +1.6451e-01  +1.9427e-01  2.98e-02  1.69e-04  8.58e-03  1.88e-05  5.96e-04  4.48e-01  
 11  +1.5836e-01  +1.6373e-01  5.37e-03  3.01e-05  1.53e-03  3.97e-06  1.13e-04  9.87e-01  
 12  +1.5753e-01  +1.6056e-01  3.03e-03  1.69e-05  8.61e-04  2.27e-06  6.55e-05  5.53e-01  
 13  +1.5663e-01  +1.5711e-01  4.83e-04  2.68e-06  1.36e-04  3.56e-07  1.09e-05  9.90e-01  
 14  +1.5646e-01  +1.5647e-01  1.74e-05  9.63e-08  4.87e-06  1.25e-08  3.97e-07  9.67e-01  
 15  +1.5645e-01  +1.5645e-01  1.74e-07  9.64e-10  4.88e-08  1.25e-10  3.97e-09  9.90e-01  
 16  +1.5645e-01  +1.5645e-01  1.74e-09  9.65e-12  4.88e-10  1.26e-12  3.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.8149ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:18 PM: Optimal value: 1.565e-01
(CVXPY) Oct 06 04:24:18 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:18 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 28, Objective: 0.1565
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:18 PM: Your problem has 551 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:18 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 801
  nnz(P)        = 0
  nnz(A)        = 6167
  cones (total) = 1
    : Nonnegative = 1,  numel = 801

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9754e-01  +2.5307e+02  2.53e+02  9.51e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +4.9148e-01  +5.7061e+01  5.66e+01  4.38e-01  1.31e+01  4.00e-03  5.74e-01  5.76e-01  
  2  +4.3931e-01  +9.0784e+00  8.64e+00  1.11e-01  4.76e+00  2.68e-02  2.32e-01  9.90e-01  
  3  +3.8119e-01  +3.3228e+00  2.94e+00  2.79e-02  1.35e+00  1.35e-02  6.77e-02  7.31e-01  
  4  +3.1573e-01  +2.5567e+00  2.24e+00  1.55e-02  7.55e-01  1.09e-02  3.88e-02  5.33e-01  
  5  +2.7382e-01  +9.9501e-01  7.21e-01  5.15e-03  2.48e-01  8.52e-04  1.41e-02  8.06e-01  
  6  +2.2948e-01  +6.3384e-01  4.04e-01  2.75e-03  1.31e-01  4.28e-04  8.16e-03  5.97e-01  
  7  +1.8999e-01  +3.3740e-01  1.47e-01  9.35e-04  4.50e-02  1.51e-04  3.06e-03  6.83e-01  
  8  +1.8327e-01  +3.0066e-01  1.17e-01  7.26e-04  3.52e-02  1.18e-04  2.42e-03  3.12e-01  
  9  +1.6935e-01  +2.2297e-01  5.36e-02  3.18e-04  1.56e-02  5.31e-05  1.11e-03  5.91e-01  
 10  +1.6464e-01  +1.9809e-01  3.35e-02  1.95e-04  9.61e-03  3.22e-05  6.97e-04  4.40e-01  
 11  +1.5824e-01  +1.6392e-01  5.68e-03  3.31e-05  1.62e-03  3.98e-06  1.25e-04  9.86e-01  
 12  +1.5738e-01  +1.6046e-01  3.08e-03  1.79e-05  8.73e-04  2.18e-06  7.07e-05  5.73e-01  
 13  +1.5655e-01  +1.5714e-01  5.82e-04  3.35e-06  1.63e-04  4.06e-07  1.41e-05  9.90e-01  
 14  +1.5636e-01  +1.5639e-01  2.82e-05  1.62e-07  7.85e-06  1.91e-08  6.94e-07  9.54e-01  
 15  +1.5635e-01  +1.5635e-01  2.84e-07  1.63e-09  7.89e-08  1.92e-10  6.99e-09  9.90e-01  
 16  +1.5635e-01  +1.5635e-01  2.84e-09  1.63e-11  7.90e-10  1.92e-12  7.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.6281ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:18 PM: Optimal value: 1.564e-01
(CVXPY) Oct 06 04:24:18 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:18 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 29, Objective: 0.1564
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:19 PM: Your problem has 561 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 811
  nnz(P)        = 0
  nnz(A)        = 6208
  cones (total) = 1
    : Nonnegative = 1,  numel = 811

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9735e-01  +2.5335e+02  2.53e+02  9.51e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.8480e-01  +5.7077e+01  5.66e+01  4.37e-01  1.29e+01  4.01e-03  5.73e-01  5.77e-01  
  2  +4.2498e-01  +9.3443e+00  8.92e+00  1.07e-01  4.60e+00  2.75e-02  2.27e-01  9.90e-01  
  3  +3.6328e-01  +3.3162e+00  2.95e+00  2.67e-02  1.28e+00  1.33e-02  6.54e-02  7.36e-01  
  4  +3.1198e-01  +2.5378e+00  2.23e+00  1.62e-02  7.83e-01  1.01e-02  4.08e-02  4.59e-01  
  5  +2.6574e-01  +9.5438e-01  6.89e-01  5.06e-03  2.41e-01  9.16e-05  1.40e-02  9.08e-01  
  6  +2.1975e-01  +5.8992e-01  3.70e-01  2.57e-03  1.22e-01  1.36e-04  7.71e-03  6.39e-01  
  7  +1.8412e-01  +3.3282e-01  1.49e-01  9.58e-04  4.59e-02  6.56e-05  3.14e-03  6.59e-01  
  8  +1.7612e-01  +2.8807e-01  1.12e-01  7.01e-04  3.39e-02  5.48e-05  2.35e-03  3.49e-01  
  9  +1.6254e-01  +2.1214e-01  4.96e-02  2.97e-04  1.45e-02  2.59e-05  1.04e-03  5.98e-01  
 10  +1.5753e-01  +1.8507e-01  2.75e-02  1.63e-04  7.96e-03  1.58e-05  5.88e-04  5.69e-01  
 11  +1.5205e-01  +1.5707e-01  5.02e-03  2.96e-05  1.44e-03  2.82e-06  1.13e-04  8.60e-01  
 12  +1.5134e-01  +1.5391e-01  2.57e-03  1.52e-05  7.36e-04  1.54e-06  6.06e-05  5.88e-01  
 13  +1.5068e-01  +1.5106e-01  3.81e-04  2.26e-06  1.08e-04  2.52e-07  9.41e-06  9.68e-01  
 14  +1.5055e-01  +1.5056e-01  4.85e-06  2.88e-08  1.38e-06  3.10e-09  1.21e-07  9.87e-01  
 15  +1.5055e-01  +1.5055e-01  4.85e-08  2.88e-10  1.38e-08  3.10e-11  1.21e-09  9.90e-01  
 16  +1.5055e-01  +1.5055e-01  4.85e-10  2.88e-12  1.38e-10  3.10e-13  1.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.6675ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:19 PM: Optimal value: 1.506e-01
(CVXPY) Oct 06 04:24:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:19 PM: Solver (including time spent in interface) took 3.218e-02 seconds
Iteration: 30, Objective: 0.1506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:19 PM: Your problem has 564 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 564
  constraints   = 814
  nnz(P)        = 0
  nnz(A)        = 6241
  cones (total) = 1
    : Nonnegative = 1,  numel = 814

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9731e-01  +2.5341e+02  2.53e+02  9.51e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +4.8376e-01  +5.7107e+01  5.66e+01  4.37e-01  1.29e+01  4.01e-03  5.73e-01  5.77e-01  
  2  +4.2380e-01  +9.3437e+00  8.92e+00  1.07e-01  4.58e+00  2.75e-02  2.27e-01  9.90e-01  
  3  +3.6301e-01  +3.3430e+00  2.98e+00  2.72e-02  1.30e+00  1.32e-02  6.67e-02  7.32e-01  
  4  +3.1183e-01  +2.6015e+00  2.29e+00  1.67e-02  8.07e-01  1.02e-02  4.22e-02  4.59e-01  
  5  +2.6830e-01  +1.0172e+00  7.49e-01  5.55e-03  2.65e-01  9.22e-05  1.53e-02  9.08e-01  
  6  +2.2370e-01  +6.1775e-01  3.94e-01  2.77e-03  1.31e-01  1.21e-04  8.28e-03  6.07e-01  
  7  +1.8683e-01  +3.4785e-01  1.61e-01  1.05e-03  5.03e-02  6.18e-05  3.42e-03  6.48e-01  
  8  +1.7783e-01  +2.9749e-01  1.20e-01  7.56e-04  3.65e-02  5.22e-05  2.52e-03  3.54e-01  
  9  +1.6323e-01  +2.1544e-01  5.22e-02  3.14e-04  1.53e-02  2.57e-05  1.10e-03  6.29e-01  
 10  +1.5897e-01  +1.9307e-01  3.41e-02  2.02e-04  9.92e-03  1.77e-05  7.20e-04  4.11e-01  
 11  +1.5285e-01  +1.5999e-01  7.14e-03  4.22e-05  2.06e-03  5.19e-06  1.59e-04  9.90e-01  
 12  +1.5136e-01  +1.5382e-01  2.46e-03  1.46e-05  7.08e-04  1.75e-06  5.80e-05  7.57e-01  
 13  +1.5075e-01  +1.5135e-01  6.01e-04  3.57e-06  1.72e-04  4.20e-07  1.47e-05  9.90e-01  
 14  +1.5055e-01  +1.5057e-01  1.35e-05  8.04e-08  3.87e-06  9.09e-09  3.35e-07  9.78e-01  
 15  +1.5055e-01  +1.5055e-01  1.35e-07  8.04e-10  3.87e-08  9.09e-11  3.35e-09  9.90e-01  
 16  +1.5055e-01  +1.5055e-01  1.35e-09  8.04e-12  3.87e-10  9.10e-13  3.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.6936ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:19 PM: Optimal value: 1.506e-01
(CVXPY) Oct 06 04:24:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:19 PM: Solver (including time spent in interface) took 3.117e-02 seconds
Iteration: 31, Objective: 0.1506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:19 PM: Your problem has 569 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Finished problem compilation (took 1.616e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 819
  nnz(P)        = 0
  nnz(A)        = 6266
  cones (total) = 1
    : Nonnegative = 1,  numel = 819

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9730e-01  +2.5342e+02  2.53e+02  9.51e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +4.8171e-01  +5.7182e+01  5.67e+01  4.37e-01  1.29e+01  4.02e-03  5.73e-01  5.76e-01  
  2  +4.2117e-01  +9.3816e+00  8.96e+00  1.06e-01  4.54e+00  2.77e-02  2.26e-01  9.90e-01  
  3  +3.5970e-01  +3.4428e+00  3.08e+00  2.80e-02  1.33e+00  1.35e-02  6.86e-02  7.26e-01  
  4  +3.0826e-01  +2.6184e+00  2.31e+00  1.69e-02  8.11e-01  1.01e-02  4.27e-02  4.62e-01  
  5  +2.6452e-01  +9.7495e-01  7.10e-01  5.24e-03  2.49e-01  6.02e-04  1.45e-02  8.51e-01  
  6  +2.2360e-01  +6.4081e-01  4.17e-01  2.94e-03  1.38e-01  3.45e-04  8.74e-03  5.62e-01  
  7  +1.8057e-01  +3.0537e-01  1.25e-01  8.11e-04  3.86e-02  1.03e-04  2.68e-03  7.51e-01  
  8  +1.7125e-01  +2.5881e-01  8.76e-02  5.47e-04  2.64e-02  7.11e-05  1.85e-03  5.17e-01  
  9  +1.5993e-01  +1.9855e-01  3.86e-02  2.33e-04  1.13e-02  3.11e-05  8.23e-04  6.09e-01  
 10  +1.5612e-01  +1.7518e-01  1.91e-02  1.16e-04  5.59e-03  1.43e-05  4.29e-04  9.90e-01  
 11  +1.5196e-01  +1.5661e-01  4.65e-03  2.81e-05  1.35e-03  3.17e-06  1.10e-04  7.67e-01  
 12  +1.5122e-01  +1.5346e-01  2.24e-03  1.35e-05  6.49e-04  1.53e-06  5.49e-05  5.99e-01  
 13  +1.5068e-01  +1.5120e-01  5.23e-04  3.13e-06  1.50e-04  3.47e-07  1.33e-05  8.42e-01  
 14  +1.5056e-01  +1.5073e-01  1.73e-04  1.01e-06  4.85e-05  1.14e-07  4.45e-06  7.31e-01  
 15  +1.5051e-01  +1.5052e-01  1.51e-05  8.77e-08  4.19e-06  9.76e-09  3.92e-07  9.73e-01  
 16  +1.5050e-01  +1.5050e-01  1.61e-07  9.32e-10  4.45e-08  1.04e-10  4.17e-09  9.89e-01  
 17  +1.5050e-01  +1.5050e-01  1.61e-09  9.34e-12  4.46e-10  1.04e-12  4.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.2888ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:19 PM: Optimal value: 1.505e-01
(CVXPY) Oct 06 04:24:19 PM: Compilation took 1.616e-02 seconds
(CVXPY) Oct 06 04:24:19 PM: Solver (including time spent in interface) took 3.077e-02 seconds
Iteration: 32, Objective: 0.1505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:19 PM: Your problem has 570 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Finished problem compilation (took 1.567e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 570
  constraints   = 820
  nnz(P)        = 0
  nnz(A)        = 6277
  cones (total) = 1
    : Nonnegative = 1,  numel = 820

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9730e-01  +2.5341e+02  2.53e+02  9.51e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +4.8165e-01  +5.7176e+01  5.67e+01  4.37e-01  1.28e+01  4.02e-03  5.73e-01  5.76e-01  
  2  +4.2110e-01  +9.3757e+00  8.95e+00  1.06e-01  4.54e+00  2.77e-02  2.26e-01  9.90e-01  
  3  +3.5963e-01  +3.4440e+00  3.08e+00  2.80e-02  1.33e+00  1.35e-02  6.87e-02  7.25e-01  
  4  +3.0832e-01  +2.6268e+00  2.32e+00  1.70e-02  8.14e-01  1.01e-02  4.30e-02  4.59e-01  
  5  +2.6463e-01  +9.8143e-01  7.17e-01  5.30e-03  2.51e-01  5.50e-04  1.46e-02  8.56e-01  
  6  +2.2383e-01  +6.4508e-01  4.21e-01  2.97e-03  1.40e-01  3.23e-04  8.85e-03  5.62e-01  
  7  +1.8084e-01  +3.0758e-01  1.27e-01  8.27e-04  3.93e-02  9.81e-05  2.74e-03  7.47e-01  
  8  +1.7153e-01  +2.6136e-01  8.98e-02  5.62e-04  2.71e-02  6.99e-05  1.90e-03  4.96e-01  
  9  +1.5853e-01  +1.9376e-01  3.52e-02  2.10e-04  1.03e-02  2.78e-05  7.42e-04  6.72e-01  
 10  +1.5594e-01  +1.8041e-01  2.45e-02  1.43e-04  7.07e-03  1.92e-05  5.18e-04  6.62e-01  
 11  +1.5098e-01  +1.5833e-01  7.34e-03  4.23e-05  2.09e-03  5.35e-06  1.61e-04  7.89e-01  
 12  +1.4954e-01  +1.5225e-01  2.71e-03  1.56e-05  7.70e-04  1.92e-06  6.23e-05  7.04e-01  
 13  +1.4871e-01  +1.4890e-01  1.87e-04  1.08e-06  5.27e-05  1.17e-07  4.48e-06  9.45e-01  
 14  +1.4865e-01  +1.4865e-01  2.46e-06  1.42e-08  6.94e-07  1.53e-09  5.95e-08  9.87e-01  
 15  +1.4865e-01  +1.4865e-01  2.47e-08  1.43e-10  6.95e-09  1.54e-11  5.96e-10  9.90e-01  
 16  +1.4865e-01  +1.4865e-01  2.47e-10  1.43e-12  6.96e-11  1.54e-13  5.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.4545ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:19 PM: Optimal value: 1.487e-01
(CVXPY) Oct 06 04:24:19 PM: Compilation took 1.567e-02 seconds
(CVXPY) Oct 06 04:24:19 PM: Solver (including time spent in interface) took 3.097e-02 seconds
Iteration: 33, Objective: 0.1487
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:19 PM: Your problem has 571 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:19 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 571
  constraints   = 821
  nnz(P)        = 0
  nnz(A)        = 6291
  cones (total) = 1
    : Nonnegative = 1,  numel = 821

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9727e-01  +2.5345e+02  2.53e+02  9.51e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +4.8122e-01  +5.7209e+01  5.67e+01  4.37e-01  1.28e+01  4.02e-03  5.73e-01  5.76e-01  
  2  +4.2089e-01  +9.3981e+00  8.98e+00  1.07e-01  4.54e+00  2.77e-02  2.27e-01  9.89e-01  
  3  +3.5966e-01  +3.4761e+00  3.12e+00  2.84e-02  1.34e+00  1.35e-02  6.96e-02  7.22e-01  
  4  +3.0736e-01  +2.6322e+00  2.32e+00  1.70e-02  8.15e-01  1.01e-02  4.31e-02  4.67e-01  
  5  +2.6393e-01  +9.8360e-01  7.20e-01  5.31e-03  2.52e-01  6.61e-04  1.47e-02  8.44e-01  
  6  +2.2296e-01  +6.4870e-01  4.26e-01  3.01e-03  1.41e-01  3.71e-04  8.98e-03  5.58e-01  
  7  +1.7879e-01  +2.9848e-01  1.20e-01  7.82e-04  3.70e-02  1.01e-04  2.62e-03  7.75e-01  
  8  +1.6498e-01  +2.2824e-01  6.33e-02  3.92e-04  1.89e-02  5.24e-05  1.37e-03  6.24e-01  
  9  +1.5945e-01  +2.0051e-01  4.11e-02  2.48e-04  1.21e-02  3.41e-05  8.82e-04  4.33e-01  
 10  +1.5557e-01  +1.8023e-01  2.47e-02  1.46e-04  7.15e-03  1.96e-05  5.38e-04  7.28e-01  
 11  +1.5069e-01  +1.5772e-01  7.03e-03  4.14e-05  2.01e-03  5.04e-06  1.60e-04  8.38e-01  
 12  +1.4934e-01  +1.5202e-01  2.68e-03  1.57e-05  7.62e-04  1.87e-06  6.43e-05  6.85e-01  
 13  +1.4866e-01  +1.4928e-01  6.20e-04  3.61e-06  1.74e-04  4.18e-07  1.54e-05  7.95e-01  
 14  +1.4846e-01  +1.4849e-01  2.86e-05  1.66e-07  8.01e-06  1.87e-08  7.26e-07  9.69e-01  
 15  +1.4845e-01  +1.4845e-01  2.88e-07  1.67e-09  8.05e-08  1.88e-10  7.30e-09  9.90e-01  
 16  +1.4845e-01  +1.4845e-01  2.88e-09  1.67e-11  8.05e-10  1.88e-12  7.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.3676ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:19 PM: Optimal value: 1.485e-01
(CVXPY) Oct 06 04:24:19 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:19 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 34, Objective: 0.1485
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:20 PM: Your problem has 573 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:20 PM: Finished problem compilation (took 9.048e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 573
  constraints   = 823
  nnz(P)        = 0
  nnz(A)        = 6313
  cones (total) = 1
    : Nonnegative = 1,  numel = 823

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9727e-01  +2.5348e+02  2.53e+02  9.51e-01  2.27e+01  1.00e+00  1.02e+00   ------   
  1  +4.8096e-01  +5.7205e+01  5.67e+01  4.37e-01  1.28e+01  4.02e-03  5.73e-01  5.76e-01  
  2  +4.2012e-01  +9.5011e+00  9.08e+00  1.08e-01  4.56e+00  2.76e-02  2.29e-01  9.83e-01  
  3  +3.5999e-01  +3.5103e+00  3.15e+00  2.89e-02  1.36e+00  1.34e-02  7.10e-02  7.19e-01  
  4  +3.0727e-01  +2.6884e+00  2.38e+00  1.74e-02  8.34e-01  1.02e-02  4.43e-02  4.65e-01  
  5  +2.6476e-01  +9.9525e-01  7.30e-01  5.43e-03  2.57e-01  3.89e-04  1.50e-02  8.75e-01  
  6  +2.2368e-01  +6.5597e-01  4.32e-01  3.07e-03  1.44e-01  2.58e-04  9.17e-03  5.57e-01  
  7  +1.7949e-01  +3.0398e-01  1.24e-01  8.19e-04  3.87e-02  7.79e-05  2.75e-03  7.65e-01  
  8  +1.6802e-01  +2.4549e-01  7.75e-02  4.89e-04  2.34e-02  5.12e-05  1.69e-03  5.28e-01  
  9  +1.5905e-01  +1.9903e-01  4.00e-02  2.43e-04  1.18e-02  2.72e-05  8.72e-04  5.60e-01  
 10  +1.5575e-01  +1.8122e-01  2.55e-02  1.53e-04  7.42e-03  1.84e-05  5.62e-04  7.28e-01  
 11  +1.5067e-01  +1.5787e-01  7.21e-03  4.26e-05  2.07e-03  4.88e-06  1.65e-04  7.77e-01  
 12  +1.4931e-01  +1.5201e-01  2.70e-03  1.59e-05  7.69e-04  1.79e-06  6.51e-05  6.94e-01  
 13  +1.4864e-01  +1.4923e-01  5.87e-04  3.45e-06  1.66e-04  3.76e-07  1.48e-05  7.87e-01  
 14  +1.4846e-01  +1.4848e-01  2.18e-05  1.28e-07  6.13e-06  1.36e-08  5.58e-07  9.70e-01  
 15  +1.4845e-01  +1.4845e-01  2.19e-07  1.28e-09  6.15e-08  1.36e-10  5.60e-09  9.90e-01  
 16  +1.4845e-01  +1.4845e-01  2.19e-09  1.28e-11  6.15e-10  1.37e-12  5.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.2332ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:20 PM: Optimal value: 1.485e-01
(CVXPY) Oct 06 04:24:20 PM: Compilation took 9.048e-04 seconds
(CVXPY) Oct 06 04:24:20 PM: Solver (including time spent in interface) took 3.079e-02 seconds
FULL MODEL:
  Accruacy: 0.816
  Our objective: 0.6319999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.036)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0 AND x8 = 0)                                                        <-- (term's our objective: 0.076)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x9 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 1)                                                        <-- (term's our objective: 0.044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0 AND x8 = 1)                                                                   <-- (term's our objective: 0.068)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1)                                             <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.032)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x3 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)                                                        <-- (term's our objective: 0.036)
 OR (x1 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.016)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.024)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 12.680021286010742
Best over terms:
  Our final objective: 0.07599999999999996
    Its accruacy: 0.538
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.07599999999999996
  Highest accruacy: 0.538
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

