Command:
python test_script.py -s constant_subclass -d 10 -n 50 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 10.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:26 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:26 PM: Finished problem compilation (took 4.109e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 346
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9416e-01  +2.6362e+01  2.59e+01  8.40e-01  7.17e+00  1.00e+00  1.08e+00   ------   
  1  +5.5604e-01  +5.8339e+00  5.28e+00  3.75e-01  4.20e+00  3.70e-03  6.19e-01  5.93e-01  
  2  +4.6128e-01  +1.2777e+00  8.16e-01  8.76e-02  1.22e+00  2.35e-02  2.35e-01  9.90e-01  
  3  +4.0385e-01  +7.1166e-01  3.08e-01  2.27e-02  3.27e-01  1.07e-02  7.42e-02  7.41e-01  
  4  +3.7451e-01  +4.9593e-01  1.21e-01  7.58e-03  1.09e-01  3.71e-03  2.87e-02  6.89e-01  
  5  +3.5357e-01  +4.0458e-01  5.10e-02  2.53e-03  3.64e-02  1.09e-03  1.18e-02  7.40e-01  
  6  +3.4075e-01  +3.4261e-01  1.87e-03  8.73e-05  1.26e-03  1.19e-05  4.59e-04  9.89e-01  
  7  +3.4011e-01  +3.4013e-01  1.87e-05  8.71e-07  1.26e-05  1.19e-07  4.61e-06  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.87e-07  8.71e-09  1.26e-07  1.19e-09  4.61e-08  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.87e-09  8.71e-11  1.26e-09  1.19e-11  4.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 659.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:26 PM: Optimal value: 3.401e-01
(CVXPY) Oct 06 04:22:26 PM: Compilation took 4.109e-02 seconds
(CVXPY) Oct 06 04:22:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:26 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:26 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 429
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8544e-01  +2.6758e+01  2.63e+01  8.51e-01  7.29e+00  1.00e+00  1.10e+00   ------   
  1  +5.1425e-01  +5.8288e+00  5.31e+00  3.83e-01  4.11e+00  3.74e-03  6.19e-01  6.01e-01  
  2  +3.7885e-01  +1.3089e+00  9.30e-01  7.58e-02  1.05e+00  2.60e-02  2.08e-01  9.90e-01  
  3  +3.1814e-01  +6.4430e-01  3.26e-01  2.14e-02  3.01e-01  1.02e-02  6.97e-02  7.33e-01  
  4  +2.8347e-01  +4.3262e-01  1.49e-01  8.42e-03  1.23e-01  3.53e-03  3.00e-02  7.65e-01  
  5  +2.7083e-01  +3.8762e-01  1.17e-01  5.89e-03  9.26e-02  2.70e-03  2.10e-02  3.95e-01  
  6  +2.4697e-01  +2.7094e-01  2.40e-02  1.14e-03  1.81e-02  4.43e-04  4.29e-03  8.59e-01  
  7  +2.4042e-01  +2.4081e-01  3.86e-04  1.83e-05  2.91e-04  4.97e-06  7.01e-05  9.86e-01  
  8  +2.4031e-01  +2.4033e-01  2.25e-05  1.12e-06  1.72e-05  2.06e-07  4.40e-06  9.40e-01  
  9  +2.4030e-01  +2.4030e-01  3.09e-07  1.54e-08  2.36e-07  2.90e-09  6.07e-08  9.87e-01  
 10  +2.4030e-01  +2.4030e-01  3.09e-09  1.54e-10  2.36e-09  2.90e-11  6.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 709.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:26 PM: Optimal value: 2.403e-01
(CVXPY) Oct 06 04:22:26 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:26 PM: Your problem has 66 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:26 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 66
  constraints   = 91
  nnz(P)        = 0
  nnz(A)        = 492
  cones (total) = 1
    : Nonnegative = 1,  numel = 91

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7715e-01  +2.7157e+01  2.67e+01  8.59e-01  7.20e+00  1.00e+00  1.12e+00   ------   
  1  +4.7664e-01  +5.8272e+00  5.35e+00  3.90e-01  3.94e+00  3.76e-03  6.17e-01  6.08e-01  
  2  +2.8658e-01  +1.5570e+00  1.27e+00  8.16e-02  1.11e+00  2.70e-02  2.13e-01  9.13e-01  
  3  +2.0952e-01  +5.9952e-01  3.90e-01  2.19e-02  3.16e-01  1.15e-02  6.58e-02  7.91e-01  
  4  +1.5657e-01  +3.4399e-01  1.87e-01  9.25e-03  1.44e-01  5.09e-03  3.04e-02  6.38e-01  
  5  +1.2561e-01  +2.0689e-01  8.13e-02  3.61e-03  5.83e-02  2.10e-03  1.28e-02  6.52e-01  
  6  +1.0292e-01  +1.1001e-01  7.09e-03  3.08e-04  4.94e-03  1.43e-04  1.17e-03  9.16e-01  
  7  +1.0057e-01  +1.0073e-01  1.65e-04  7.31e-06  1.16e-04  1.99e-06  2.82e-05  9.76e-01  
  8  +1.0050e-01  +1.0051e-01  7.85e-06  3.70e-07  5.58e-06  7.24e-08  1.54e-06  9.48e-01  
  9  +1.0050e-01  +1.0050e-01  7.94e-08  3.75e-09  5.65e-08  7.34e-10  1.58e-08  9.90e-01  
 10  +1.0050e-01  +1.0050e-01  7.94e-10  3.75e-11  5.65e-10  7.34e-12  1.58e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 695.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:26 PM: Optimal value: 1.005e-01
(CVXPY) Oct 06 04:22:26 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:26 PM: Your problem has 76 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:26 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 101
  nnz(P)        = 0
  nnz(A)        = 527
  cones (total) = 1
    : Nonnegative = 1,  numel = 101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7285e-01  +2.7395e+01  2.69e+01  8.66e-01  6.96e+00  1.00e+00  1.12e+00   ------   
  1  +4.3709e-01  +5.9617e+00  5.52e+00  3.97e-01  3.76e+00  3.88e-03  6.16e-01  6.01e-01  
  2  +2.4473e-01  +1.7812e+00  1.54e+00  1.00e-01  1.25e+00  2.56e-02  2.49e-01  8.27e-01  
  3  +1.9312e-01  +6.1639e-01  4.23e-01  2.60e-02  3.53e-01  1.16e-02  7.62e-02  7.44e-01  
  4  +1.1644e-01  +2.7284e-01  1.56e-01  7.75e-03  1.20e-01  3.86e-03  2.54e-02  8.23e-01  
  5  +9.8240e-02  +2.1282e-01  1.15e-01  5.14e-03  8.50e-02  2.44e-03  1.75e-02  5.04e-01  
  6  +6.5709e-02  +8.0310e-02  1.46e-02  6.30e-04  1.03e-02  2.61e-04  2.29e-03  8.76e-01  
  7  +6.0768e-02  +6.1149e-02  3.81e-04  1.67e-05  2.71e-04  4.02e-06  6.24e-05  9.73e-01  
  8  +6.0611e-02  +6.0632e-02  2.10e-05  1.01e-06  1.52e-05  1.34e-07  4.19e-06  9.46e-01  
  9  +6.0600e-02  +6.0600e-02  2.64e-07  1.28e-08  1.91e-07  1.69e-09  5.41e-08  9.87e-01  
 10  +6.0600e-02  +6.0600e-02  2.64e-09  1.28e-10  1.91e-09  1.69e-11  5.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 763.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:26 PM: Optimal value: 6.060e-02
(CVXPY) Oct 06 04:22:26 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:26 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.0606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:27 PM: Your problem has 86 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Finished problem compilation (took 1.554e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 86
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 558
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6780e-01  +2.7535e+01  2.71e+01  8.72e-01  6.73e+00  1.00e+00  1.13e+00   ------   
  1  +3.9075e-01  +6.0299e+00  5.64e+00  3.99e-01  3.54e+00  4.01e-03  6.09e-01  5.99e-01  
  2  +1.9485e-01  +1.9432e+00  1.75e+00  1.14e-01  1.35e+00  2.30e-02  2.73e-01  7.51e-01  
  3  +1.5013e-01  +4.9759e-01  3.47e-01  2.28e-02  2.95e-01  9.49e-03  6.64e-02  8.20e-01  
  4  +1.0034e-01  +3.0461e-01  2.04e-01  1.12e-02  1.69e-01  5.20e-03  3.53e-02  6.73e-01  
  5  +8.0106e-02  +2.2450e-01  1.44e-01  6.98e-03  1.13e-01  3.54e-03  2.31e-02  4.55e-01  
  6  +4.8721e-02  +7.5877e-02  2.72e-02  1.24e-03  2.00e-02  5.95e-04  4.39e-03  8.41e-01  
  7  +4.0993e-02  +4.1874e-02  8.80e-04  4.07e-05  6.48e-04  1.32e-05  1.48e-04  9.69e-01  
  8  +4.0746e-02  +4.0862e-02  1.16e-04  5.78e-06  8.67e-05  1.29e-06  2.27e-05  8.52e-01  
  9  +4.0702e-02  +4.0705e-02  3.77e-06  1.95e-07  2.83e-06  3.44e-08  7.99e-07  9.67e-01  
 10  +4.0700e-02  +4.0700e-02  3.77e-08  1.95e-09  2.83e-08  3.44e-10  8.02e-09  9.90e-01  
 11  +4.0700e-02  +4.0700e-02  3.77e-10  1.95e-11  2.83e-10  3.44e-12  8.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 873.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:27 PM: Optimal value: 4.070e-02
(CVXPY) Oct 06 04:22:27 PM: Compilation took 1.554e-02 seconds
(CVXPY) Oct 06 04:22:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:27 PM: Your problem has 96 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 96
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 594
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5480e-01  +2.7298e+01  2.68e+01  8.77e-01  6.56e+00  1.00e+00  1.12e+00   ------   
  1  +3.1059e-01  +6.4078e+00  6.10e+00  4.12e-01  3.47e+00  4.34e-03  6.07e-01  5.63e-01  
  2  +1.4887e-01  +1.6365e+00  1.49e+00  1.08e-01  1.20e+00  2.53e-02  2.60e-01  8.08e-01  
  3  +1.1103e-01  +5.8444e-01  4.73e-01  3.37e-02  4.05e-01  1.15e-02  9.42e-02  8.59e-01  
  4  +6.9652e-02  +2.1983e-01  1.50e-01  9.49e-03  1.29e-01  3.79e-03  2.93e-02  8.11e-01  
  5  +5.3336e-02  +1.7664e-01  1.23e-01  6.61e-03  9.95e-02  2.74e-03  2.13e-02  5.01e-01  
  6  +2.8431e-02  +5.7250e-02  2.88e-02  1.43e-03  2.18e-02  6.29e-04  4.82e-03  8.00e-01  
  7  +2.1014e-02  +2.1690e-02  6.76e-04  3.38e-05  5.10e-04  8.45e-06  1.16e-04  9.76e-01  
  8  +2.0840e-02  +2.0963e-02  1.23e-04  6.67e-06  9.44e-05  1.39e-06  2.51e-05  7.95e-01  
  9  +2.0802e-02  +2.0807e-02  4.77e-06  2.66e-07  3.66e-06  4.64e-08  1.04e-06  9.62e-01  
 10  +2.0800e-02  +2.0800e-02  4.82e-08  2.69e-09  3.70e-08  4.69e-10  1.05e-08  9.90e-01  
 11  +2.0800e-02  +2.0800e-02  4.82e-10  2.69e-11  3.70e-10  4.69e-12  1.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 886.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:27 PM: Optimal value: 2.080e-02
(CVXPY) Oct 06 04:22:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:27 PM: Your problem has 106 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 106
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 629
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4351e-01  +2.7348e+01  2.69e+01  8.81e-01  6.41e+00  1.00e+00  1.11e+00   ------   
  1  +2.3011e-01  +6.9670e+00  6.74e+00  4.29e-01  3.44e+00  4.73e-03  6.11e-01  5.24e-01  
  2  +1.4378e-01  +1.4219e+00  1.28e+00  1.07e-01  1.15e+00  2.84e-02  2.49e-01  8.75e-01  
  3  +9.6249e-02  +5.2644e-01  4.30e-01  3.50e-02  4.06e-01  1.09e-02  9.13e-02  6.90e-01  
  4  +5.0287e-02  +2.0106e-01  1.51e-01  1.05e-02  1.40e-01  4.16e-03  3.05e-02  7.46e-01  
  5  +1.9549e-02  +8.7021e-02  6.75e-02  3.77e-03  5.50e-02  1.78e-03  1.21e-02  7.03e-01  
  6  +2.7310e-03  +9.0643e-03  6.33e-03  3.40e-04  4.98e-03  1.40e-04  1.14e-03  9.15e-01  
  7  +1.0328e-03  +1.4499e-03  4.17e-04  2.33e-05  3.34e-04  5.35e-06  8.09e-05  9.29e-01  
  8  +9.1744e-04  +9.6471e-04  4.73e-05  2.85e-06  3.89e-05  5.04e-07  1.05e-05  9.30e-01  
  9  +9.0023e-04  +9.0082e-04  5.95e-07  3.63e-08  4.91e-07  6.00e-09  1.35e-07  9.87e-01  
 10  +9.0000e-04  +9.0001e-04  5.96e-09  3.64e-10  4.91e-09  6.00e-11  1.35e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 921.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:27 PM: Optimal value: 9.000e-04
(CVXPY) Oct 06 04:22:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.0009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:27 PM: Your problem has 116 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 116
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 675
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3674e-01  +2.7774e+01  2.73e+01  8.86e-01  6.32e+00  1.00e+00  1.13e+00   ------   
  1  +1.3147e-01  +7.2979e+00  7.17e+00  4.25e-01  3.31e+00  5.06e-03  6.09e-01  5.43e-01  
  2  +6.6281e-02  +1.4651e+00  1.40e+00  1.11e-01  1.14e+00  2.94e-02  2.63e-01  8.40e-01  
  3  +5.9312e-02  +2.8792e-01  2.29e-01  2.17e-02  2.25e-01  6.93e-03  5.95e-02  8.06e-01  
  4  +2.3455e-02  +1.3573e-01  1.12e-01  8.96e-03  1.02e-01  2.81e-03  2.72e-02  7.40e-01  
  5  +5.6582e-03  +3.4958e-02  2.93e-02  2.03e-03  2.50e-02  6.67e-04  6.82e-03  8.04e-01  
  6  +1.0672e-03  +2.1881e-03  1.12e-03  7.87e-05  9.57e-04  1.81e-05  2.71e-04  9.62e-01  
  7  +9.1465e-04  +1.2427e-03  3.28e-04  2.45e-05  2.87e-04  3.38e-06  9.39e-05  8.35e-01  
  8  +8.5911e-04  +9.0327e-04  4.42e-05  3.36e-06  3.86e-05  4.19e-07  1.33e-05  8.70e-01  
  9  +8.5015e-04  +8.5081e-04  6.62e-07  5.07e-08  5.80e-07  6.01e-09  2.02e-07  9.85e-01  
 10  +8.5000e-04  +8.5001e-04  6.62e-09  5.07e-10  5.80e-09  6.01e-11  2.02e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.116ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:27 PM: Optimal value: 8.500e-04
(CVXPY) Oct 06 04:22:27 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:22:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:27 PM: Your problem has 117 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 142
  nnz(P)        = 0
  nnz(A)        = 681
  cones (total) = 1
    : Nonnegative = 1,  numel = 142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3388e-01  +2.7803e+01  2.74e+01  8.86e-01  6.32e+00  1.00e+00  1.13e+00   ------   
  1  +1.1679e-01  +7.3732e+00  7.26e+00  4.27e-01  3.32e+00  5.10e-03  6.09e-01  5.45e-01  
  2  +5.9639e-02  +1.3132e+00  1.25e+00  1.02e-01  1.05e+00  3.09e-02  2.43e-01  8.96e-01  
  3  +4.7186e-02  +2.6642e-01  2.19e-01  2.11e-02  2.18e-01  7.01e-03  5.73e-02  8.15e-01  
  4  +1.5574e-02  +8.4521e-02  6.89e-02  5.74e-03  6.40e-02  2.23e-03  1.74e-02  7.55e-01  
  5  +3.6647e-03  +1.9004e-02  1.53e-02  1.20e-03  1.38e-02  2.66e-04  3.83e-03  9.15e-01  
  6  +1.0550e-03  +2.0829e-03  1.03e-03  8.13e-05  9.31e-04  1.34e-05  2.66e-04  9.35e-01  
  7  +8.6672e-04  +1.0754e-03  2.09e-04  1.68e-05  1.87e-04  1.56e-06  6.39e-05  9.01e-01  
  8  +8.3213e-04  +8.6620e-04  3.41e-05  2.78e-06  3.05e-05  2.29e-07  1.09e-05  8.98e-01  
  9  +8.2511e-04  +8.2558e-04  4.71e-07  3.86e-08  4.21e-07  3.08e-09  1.53e-07  9.87e-01  
 10  +8.2500e-04  +8.2501e-04  4.71e-09  3.86e-10  4.21e-09  3.08e-11  1.53e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 961µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:27 PM: Optimal value: 8.250e-04
(CVXPY) Oct 06 04:22:27 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:22:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:27 PM: Your problem has 118 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 118
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 684
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3353e-01  +2.7805e+01  2.74e+01  8.86e-01  6.30e+00  1.00e+00  1.13e+00   ------   
  1  +1.0825e-01  +7.4035e+00  7.30e+00  4.27e-01  3.30e+00  5.13e-03  6.08e-01  5.47e-01  
  2  +5.8193e-02  +1.3420e+00  1.28e+00  1.05e-01  1.07e+00  3.07e-02  2.48e-01  8.83e-01  
  3  +4.7761e-02  +2.6535e-01  2.18e-01  2.12e-02  2.17e-01  6.97e-03  5.74e-02  8.06e-01  
  4  +1.5137e-02  +8.4565e-02  6.94e-02  5.80e-03  6.45e-02  2.15e-03  1.76e-02  7.72e-01  
  5  +3.0958e-03  +1.5750e-02  1.27e-02  9.98e-04  1.14e-02  2.14e-04  3.20e-03  9.27e-01  
  6  +1.0287e-03  +1.9624e-03  9.34e-04  7.52e-05  8.49e-04  1.08e-05  2.47e-04  9.34e-01  
  7  +8.6035e-04  +1.0561e-03  1.96e-04  1.60e-05  1.76e-04  1.48e-06  6.13e-05  8.82e-01  
  8  +8.3109e-04  +8.6512e-04  3.40e-05  2.82e-06  3.06e-05  2.34e-07  1.11e-05  8.85e-01  
  9  +8.2509e-04  +8.2555e-04  4.62e-07  3.84e-08  4.15e-07  3.15e-09  1.52e-07  9.87e-01  
 10  +8.2500e-04  +8.2501e-04  4.62e-09  3.84e-10  4.15e-09  3.15e-11  1.52e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0046ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:27 PM: Optimal value: 8.250e-04
(CVXPY) Oct 06 04:22:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:27 PM: Your problem has 119 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 119
  constraints   = 144
  nnz(P)        = 0
  nnz(A)        = 688
  cones (total) = 1
    : Nonnegative = 1,  numel = 144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3319e-01  +2.7846e+01  2.74e+01  8.86e-01  6.29e+00  1.00e+00  1.13e+00   ------   
  1  +1.0592e-01  +7.4618e+00  7.36e+00  4.30e-01  3.31e+00  5.16e-03  6.10e-01  5.46e-01  
  2  +5.9308e-02  +1.3024e+00  1.24e+00  1.02e-01  1.05e+00  3.13e-02  2.45e-01  8.99e-01  
  3  +4.4829e-02  +2.5692e-01  2.12e-01  2.06e-02  2.11e-01  6.82e-03  5.64e-02  8.30e-01  
  4  +1.4251e-02  +7.9172e-02  6.49e-02  5.44e-03  6.04e-02  2.10e-03  1.67e-02  7.64e-01  
  5  +3.9261e-03  +2.0553e-02  1.66e-02  1.32e-03  1.51e-02  2.95e-04  4.26e-03  8.93e-01  
  6  +1.1555e-03  +2.7588e-03  1.60e-03  1.29e-04  1.46e-03  2.45e-05  4.24e-04  9.01e-01  
  7  +8.7699e-04  +1.1279e-03  2.51e-04  2.11e-05  2.32e-04  1.36e-06  7.72e-05  9.50e-01  
  8  +8.3490e-04  +9.0885e-04  7.40e-05  6.09e-06  6.69e-05  3.99e-07  2.40e-05  7.20e-01  
  9  +8.2151e-04  +8.2764e-04  6.14e-06  5.07e-07  5.55e-06  3.32e-08  2.03e-06  9.31e-01  
 10  +8.2002e-04  +8.2008e-04  6.52e-08  5.39e-09  5.89e-08  3.53e-10  2.17e-08  9.90e-01  
 11  +8.2000e-04  +8.2000e-04  6.53e-10  5.39e-11  5.90e-10  3.53e-12  2.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0267ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:27 PM: Optimal value: 8.200e-04
(CVXPY) Oct 06 04:22:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:27 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x9 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x6 = 0)                       <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x3 = 0 AND x5 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 1 AND x9 = 1)            <-- (term's our objective: 0.12)
 OR (x2 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.36)
 OR (x2 = 1 AND x4 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.08)
 OR (x4 = 1 AND x7 = 1)                                             <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.135991096496582
Best over terms:
  Our final objective: 0.36
    Its accruacy: 0.68
    Its hamming distance: 4
  Shortest hamming distance: 3
    Its our objective: 0.07999999999999996
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

