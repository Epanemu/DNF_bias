Command:
python test_script.py -s constant_subclass -d 9 -n 10 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:28 PM: Your problem has 24 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:28 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 24
  constraints   = 29
  nnz(P)        = 0
  nnz(A)        = 79
  cones (total) = 1
    : Nonnegative = 1,  numel = 29

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6137e-01  +6.1399e+00  5.68e+00  7.68e-01  2.66e+00  1.00e+00  1.28e+00   ------   
  1  +4.4733e-01  +1.2625e+00  8.15e-01  3.04e-01  1.22e+00  3.55e-03  6.26e-01  7.01e-01  
  2  +3.0020e-01  +4.8540e-01  1.85e-01  7.33e-02  3.28e-01  9.80e-03  2.17e-01  7.79e-01  
  3  +2.1648e-01  +2.7600e-01  5.95e-02  1.58e-02  8.16e-02  4.05e-03  6.55e-02  8.82e-01  
  4  +2.0059e-01  +2.0191e-01  1.32e-03  3.60e-04  1.85e-03  8.40e-05  1.60e-03  9.76e-01  
  5  +2.0020e-01  +2.0022e-01  1.32e-05  3.60e-06  1.85e-05  8.38e-07  1.60e-05  9.90e-01  
  6  +2.0020e-01  +2.0020e-01  1.32e-07  3.60e-08  1.85e-07  8.38e-09  1.60e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  1.32e-09  3.60e-10  1.85e-09  8.38e-11  1.60e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 252.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:28 PM: Optimal value: 2.002e-01
(CVXPY) Oct 06 04:13:28 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:13:28 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:28 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:28 PM: Finished problem compilation (took 9.668e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 111
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5192e-01  +6.3124e+00  5.96e+00  7.98e-01  2.79e+00  1.00e+00  1.30e+00   ------   
  1  +1.4485e-01  +1.0098e+00  8.65e-01  3.09e-01  1.11e+00  4.06e-03  5.55e-01  7.15e-01  
  2  +5.8348e-02  +2.1071e-01  1.52e-01  6.60e-02  2.57e-01  8.43e-03  1.59e-01  8.20e-01  
  3  +1.2462e-02  +5.3221e-02  4.08e-02  1.45e-02  6.38e-02  2.68e-03  4.15e-02  8.02e-01  
  4  +3.7667e-04  +9.4081e-04  5.64e-04  2.01e-04  8.95e-04  3.18e-05  5.97e-04  9.87e-01  
  5  +2.1482e-04  +2.4546e-04  3.06e-05  1.29e-05  5.25e-05  2.90e-07  3.86e-05  9.36e-01  
  6  +2.0020e-04  +2.0067e-04  4.70e-07  2.12e-07  8.09e-07  1.30e-08  6.82e-07  9.85e-01  
  7  +2.0000e-04  +2.0001e-04  4.69e-09  2.11e-09  8.08e-09  1.30e-10  6.82e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 233.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:28 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:13:28 PM: Compilation took 9.668e-04 seconds
(CVXPY) Oct 06 04:13:28 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:28 PM: Your problem has 44 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:28 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 49
  nnz(P)        = 0
  nnz(A)        = 148
  cones (total) = 1
    : Nonnegative = 1,  numel = 49

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.0230e-01  +6.1844e+00  5.88e+00  8.21e-01  2.96e+00  1.00e+00  1.27e+00   ------   
  1  +4.7114e-02  +9.6137e-01  9.14e-01  3.52e-01  1.20e+00  4.26e-03  5.56e-01  6.85e-01  
  2  +2.4242e-02  +1.6673e-01  1.42e-01  7.02e-02  2.81e-01  1.07e-02  1.60e-01  8.58e-01  
  3  +1.8272e-03  +9.4944e-03  7.67e-03  3.71e-03  1.57e-02  5.60e-04  9.70e-03  9.53e-01  
  4  +2.7994e-04  +5.0632e-04  2.26e-04  1.13e-04  4.72e-04  1.37e-05  2.96e-04  9.70e-01  
  5  +2.1389e-04  +2.5151e-04  3.76e-05  2.12e-05  7.99e-05  1.25e-06  6.05e-05  9.39e-01  
  6  +2.0045e-04  +2.0151e-04  1.06e-06  5.48e-07  2.14e-06  2.81e-08  1.88e-06  9.84e-01  
  7  +2.0000e-04  +2.0002e-04  1.06e-08  5.48e-09  2.14e-08  2.81e-10  1.89e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  1.06e-10  5.48e-11  2.14e-10  2.81e-12  1.89e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 260.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:28 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:13:28 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:28 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:28 PM: Your problem has 45 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:28 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 45
  constraints   = 50
  nnz(P)        = 0
  nnz(A)        = 151
  cones (total) = 1
    : Nonnegative = 1,  numel = 50

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.8640e-01  +6.3016e+00  6.02e+00  8.23e-01  2.96e+00  1.00e+00  1.30e+00   ------   
  1  +1.8160e-02  +9.5503e-01  9.37e-01  3.55e-01  1.21e+00  4.24e-03  5.68e-01  6.86e-01  
  2  +8.2138e-03  +1.1709e-01  1.09e-01  5.49e-02  2.16e-01  1.10e-02  1.30e-01  9.38e-01  
  3  +5.5279e-04  +2.6190e-03  2.07e-03  1.05e-03  4.19e-03  2.43e-04  2.72e-03  9.87e-01  
  4  +2.4207e-04  +3.9181e-04  1.50e-04  8.14e-05  3.14e-04  1.40e-05  2.10e-04  9.23e-01  
  5  +2.0126e-04  +2.1707e-04  1.58e-05  9.41e-06  3.49e-05  3.30e-07  2.82e-05  9.90e-01  
  6  +2.0005e-04  +2.0026e-04  2.14e-07  1.27e-07  4.73e-07  4.20e-09  3.92e-07  9.86e-01  
  7  +2.0000e-04  +2.0000e-04  2.14e-09  1.27e-09  4.73e-09  4.20e-11  3.92e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 252.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:28 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:13:28 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:28 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 1 AND x2 = 1 AND x8 = 1) <-- (term's our objective: 0.4)
 OR (x2 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.1132683753967285
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.6
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

