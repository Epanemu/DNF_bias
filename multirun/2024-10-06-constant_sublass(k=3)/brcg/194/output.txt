Command:
python test_script.py -s constant_subclass -d 5 -n 10000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15139999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.1552
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:18 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:18 PM: Finished problem compilation (took 6.332e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +1.0020e+03  1.00e+03  3.64e-01  5.42e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4627e-01  +1.4307e+02  1.43e+02  1.45e-01  2.69e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1087e-01  +3.4010e+01  3.35e+01  1.16e-01  2.11e+01  2.35e-05  2.32e-01  8.83e-02  
  4  +5.0017e-01  +1.2219e+00  7.22e-01  4.86e-03  9.00e-01  4.45e-06  1.36e-01  9.90e-01  
  5  +5.0001e-01  +6.4375e-01  1.44e-01  9.60e-04  1.79e-01  1.84e-06  3.15e-02  8.04e-01  
  6  +4.9933e-01  +7.8582e-01  2.86e-01  9.61e-04  1.80e-01  2.88e-05  3.56e-03  9.30e-01  
  7  +4.9233e-01  +7.2767e-01  2.35e-01  1.02e-04  1.92e-02  2.55e-04  3.08e-04  9.14e-01  
  8  +4.7596e-01  +5.8018e-01  1.04e-01  2.56e-05  4.80e-03  1.85e-04  8.05e-05  8.09e-01  
  9  +4.5850e-01  +4.8295e-01  2.45e-02  5.76e-06  1.08e-03  1.67e-06  2.10e-05  9.59e-01  
 10  +4.5110e-01  +4.5258e-01  1.48e-03  3.10e-07  5.79e-05  7.57e-08  1.30e-06  9.56e-01  
 11  +4.5061e-01  +4.5062e-01  1.52e-05  3.17e-09  5.92e-07  7.73e-10  1.34e-08  9.90e-01  
 12  +4.5060e-01  +4.5060e-01  1.52e-07  3.17e-11  5.92e-09  7.73e-12  1.34e-10  9.90e-01  
 13  +4.5060e-01  +4.5060e-01  1.52e-09  3.17e-13  5.93e-11  7.93e-14  1.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 74.4945ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:18 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:18 PM: Optimal value: 4.506e-01
(CVXPY) Oct 06 03:55:18 PM: Compilation took 6.332e-02 seconds
(CVXPY) Oct 06 03:55:18 PM: Solver (including time spent in interface) took 8.827e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:18 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:18 PM: Finished problem compilation (took 3.158e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 49328
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0013e+03  5.00e+03  9.85e-01  9.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.9949e-01  +1.0024e+03  1.00e+03  3.65e-01  5.74e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4608e-01  +1.4267e+02  1.42e+02  1.45e-01  2.84e+01  9.88e-03  2.35e-01  7.80e-01  
  3  +5.1075e-01  +3.3773e+01  3.33e+01  1.15e-01  2.22e+01  2.35e-05  2.32e-01  9.09e-02  
  4  +5.0031e-01  +1.6988e+00  1.20e+00  8.08e-03  1.57e+00  5.03e-06  1.60e-01  7.27e-01  
  5  +5.0007e-01  +8.6675e-01  3.67e-01  2.45e-03  4.82e-01  2.36e-06  7.12e-02  6.71e-01  
  6  +5.0000e-01  +7.6221e-01  2.62e-01  1.73e-03  3.41e-01  3.05e-06  2.51e-02  7.38e-01  
  7  +4.9865e-01  +7.4488e-01  2.46e-01  4.52e-04  8.99e-02  4.14e-05  1.38e-03  9.68e-01  
  8  +4.9230e-01  +6.9989e-01  2.08e-01  8.46e-05  1.69e-02  1.86e-04  2.37e-04  8.37e-01  
  9  +4.9171e-01  +6.9412e-01  2.02e-01  7.13e-05  1.42e-02  1.69e-04  1.97e-04  3.30e-01  
 10  +4.9128e-01  +6.9014e-01  1.99e-01  6.27e-05  1.25e-02  1.52e-04  1.73e-04  2.72e-01  
 11  +4.8805e-01  +6.5808e-01  1.70e-01  4.48e-05  8.92e-03  3.43e-05  1.24e-04  8.68e-01  
 12  +4.6940e-01  +5.7837e-01  1.09e-01  2.05e-05  4.06e-03  1.78e-05  5.86e-05  7.81e-01  
 13  +4.3963e-01  +4.7062e-01  3.10e-02  5.20e-06  1.03e-03  2.05e-06  1.60e-05  8.30e-01  
 14  +4.3876e-01  +4.6584e-01  2.71e-02  4.76e-06  9.42e-04  1.54e-06  1.59e-05  6.83e-02  
 15  +4.3873e-01  +4.6586e-01  2.71e-02  4.77e-06  9.44e-04  1.55e-06  1.58e-05  1.02e-02  
 16  +4.3797e-01  +4.6781e-01  2.98e-02  4.84e-06  9.57e-04  2.03e-06  1.49e-05  2.81e-01  
 17  +4.2617e-01  +4.3002e-01  3.85e-03  6.06e-07  1.20e-04  2.79e-07  1.93e-06  9.90e-01  
 18  +4.2442e-01  +4.2446e-01  4.06e-05  6.39e-09  1.26e-06  2.88e-09  2.04e-08  9.90e-01  
 19  +4.2440e-01  +4.2440e-01  4.06e-07  6.39e-11  1.26e-08  2.88e-11  2.04e-10  9.90e-01  
 20  +4.2440e-01  +4.2440e-01  4.06e-09  6.39e-13  1.26e-10  2.89e-13  2.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.079ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:18 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:18 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 03:55:18 PM: Compilation took 3.158e-02 seconds
(CVXPY) Oct 06 03:55:18 PM: Solver (including time spent in interface) took 1.460e-01 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:18 PM: Your problem has 5024 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:18 PM: Finished problem compilation (took 3.401e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5024
  constraints   = 10024
  nnz(P)        = 0
  nnz(A)        = 49964
  cones (total) = 1
    : Nonnegative = 1,  numel = 10024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0013e+03  5.00e+03  9.85e-01  9.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.9942e-01  +1.0026e+03  1.00e+03  3.65e-01  5.74e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4601e-01  +1.4253e+02  1.42e+02  1.45e-01  2.84e+01  9.89e-03  2.35e-01  7.80e-01  
  3  +5.1074e-01  +3.3752e+01  3.32e+01  1.15e-01  2.22e+01  2.35e-05  2.32e-01  9.14e-02  
  4  +5.0032e-01  +1.7433e+00  1.24e+00  8.38e-03  1.63e+00  5.07e-06  1.62e-01  7.10e-01  
  5  +5.0004e-01  +7.9261e-01  2.93e-01  1.96e-03  3.85e-01  2.20e-06  5.88e-02  7.95e-01  
  6  +4.9994e-01  +8.0142e-01  3.01e-01  1.92e-03  3.78e-01  5.12e-06  1.72e-02  8.49e-01  
  7  +4.9728e-01  +7.4503e-01  2.48e-01  2.66e-04  5.30e-02  7.91e-05  7.71e-04  9.60e-01  
  8  +4.9469e-01  +7.2924e-01  2.35e-01  1.45e-04  2.88e-02  1.30e-04  4.08e-04  4.84e-01  
  9  +4.9581e-01  +7.2408e-01  2.28e-01  1.38e-04  2.75e-02  9.54e-05  3.85e-04  3.07e-01  
 10  +4.9395e-01  +7.1454e-01  2.21e-01  9.83e-05  1.96e-02  1.18e-04  2.73e-04  3.33e-01  
 11  +4.9502e-01  +7.0124e-01  2.06e-01  8.97e-05  1.79e-02  5.10e-05  2.48e-04  5.78e-01  
 12  +4.9301e-01  +6.9077e-01  1.98e-01  6.95e-05  1.39e-02  5.27e-05  1.92e-04  3.38e-01  
 13  +4.8309e-01  +6.4316e-01  1.60e-01  3.37e-05  6.71e-03  4.22e-05  9.37e-05  8.47e-01  
 14  +4.8227e-01  +6.3987e-01  1.58e-01  3.34e-05  6.65e-03  3.90e-05  9.32e-05  5.47e-02  
 15  +4.6575e-01  +5.7585e-01  1.10e-01  2.09e-05  4.16e-03  2.28e-05  6.10e-05  4.32e-01  
 16  +4.3427e-01  +4.6043e-01  2.62e-02  4.52e-06  8.94e-04  2.30e-07  1.44e-05  8.93e-01  
 17  +4.2443e-01  +4.2817e-01  3.74e-03  6.23e-07  1.23e-04  2.54e-07  2.06e-06  9.90e-01  
 18  +4.2442e-01  +4.2818e-01  3.76e-03  6.16e-07  1.22e-04  2.61e-07  2.02e-06  4.70e-02  
 19  +4.2436e-01  +4.2797e-01  3.61e-03  6.03e-07  1.19e-04  2.42e-07  2.01e-06  7.68e-02  
 20  +4.2407e-01  +4.2705e-01  2.98e-03  4.88e-07  9.65e-05  2.22e-07  1.61e-06  8.66e-01  
 21  +4.2313e-01  +4.2406e-01  9.31e-04  1.53e-07  3.02e-05  6.91e-08  5.07e-07  9.90e-01  
 22  +4.2271e-01  +4.2272e-01  1.31e-05  2.15e-09  4.26e-07  9.39e-10  7.17e-09  9.90e-01  
 23  +4.2270e-01  +4.2270e-01  1.31e-07  2.15e-11  4.26e-09  9.40e-12  7.17e-11  9.90e-01  
 24  +4.2270e-01  +4.2270e-01  1.31e-09  2.15e-13  4.26e-11  9.61e-14  7.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.9937ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:19 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:19 PM: Optimal value: 4.227e-01
(CVXPY) Oct 06 03:55:19 PM: Compilation took 3.401e-02 seconds
(CVXPY) Oct 06 03:55:19 PM: Solver (including time spent in interface) took 1.650e-01 seconds
FULL MODEL:
  Accruacy: 0.5776
  Our objective: 0.15519999999999995

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.1514)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.003)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.649630069732666
Best over terms:
  Our final objective: 0.15140000000000003
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15140000000000003
  Highest accruacy: 0.5757
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

