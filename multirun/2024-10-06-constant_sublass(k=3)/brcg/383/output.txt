Command:
python test_script.py -s constant_subclass -d 10 -n 1000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.17600000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 10.

Computed total variation: 0.698
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:17 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:17 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 6521
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9999e-01  +5.0085e+02  5.00e+02  9.56e-01  3.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7793e-01  +1.1023e+02  1.10e+02  4.26e-01  2.44e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2786e-01  +1.2204e+01  1.17e+01  1.49e-01  1.08e+01  1.81e-02  2.83e-01  9.75e-01  
  3  +5.0586e-01  +3.0905e+00  2.58e+00  5.48e-02  3.93e+00  4.82e-05  2.35e-01  5.49e-01  
  4  +5.0068e-01  +7.8754e-01  2.87e-01  6.48e-03  4.88e-01  1.15e-05  7.10e-02  8.16e-01  
  5  +5.0012e-01  +7.5947e-01  2.59e-01  5.17e-03  3.92e-01  2.23e-05  2.56e-02  7.00e-01  
  6  +4.9333e-01  +7.3198e-01  2.39e-01  9.00e-04  6.95e-02  1.53e-04  2.81e-03  9.05e-01  
  7  +4.7530e-01  +5.8998e-01  1.15e-01  2.88e-04  2.21e-02  8.03e-05  9.84e-04  7.78e-01  
  8  +4.5505e-01  +4.9832e-01  4.33e-02  9.51e-05  7.27e-03  1.73e-05  3.83e-04  7.56e-01  
  9  +4.4617e-01  +4.5897e-01  1.28e-02  2.73e-05  2.09e-03  5.44e-06  1.18e-04  9.90e-01  
 10  +4.4220e-01  +4.4251e-01  3.10e-04  6.55e-07  5.00e-05  1.13e-07  2.94e-06  9.82e-01  
 11  +4.4210e-01  +4.4210e-01  3.10e-06  6.55e-09  5.00e-07  1.13e-09  2.94e-08  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  3.10e-08  6.55e-11  5.00e-09  1.13e-11  2.94e-10  9.90e-01  
 13  +4.4210e-01  +4.4210e-01  3.10e-10  6.55e-13  5.00e-11  1.13e-13  2.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.0425ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:17 PM: Optimal value: 4.421e-01
(CVXPY) Oct 06 04:25:17 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:25:17 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:17 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:17 PM: Finished problem compilation (took 1.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 7453
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9987e-01  +5.0130e+02  5.01e+02  9.56e-01  3.86e+01  1.00e+00  1.01e+00   ------   
  1  +5.7699e-01  +1.1034e+02  1.10e+02  4.28e-01  2.50e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2653e-01  +1.2007e+01  1.15e+01  1.46e-01  1.09e+01  1.83e-02  2.79e-01  9.90e-01  
  3  +5.0551e-01  +2.9713e+00  2.47e+00  5.33e-02  3.95e+00  5.16e-05  2.13e-01  6.50e-01  
  4  +5.0148e-01  +1.2408e+00  7.39e-01  1.68e-02  1.29e+00  2.22e-05  1.10e-01  5.40e-01  
  5  +4.9947e-01  +9.3661e-01  4.37e-01  7.74e-03  6.08e-01  3.57e-05  2.96e-02  8.37e-01  
  6  +4.8643e-01  +8.2786e-01  3.41e-01  1.30e-03  1.04e-01  1.76e-04  3.81e-03  8.78e-01  
  7  +4.7923e-01  +7.6392e-01  2.85e-01  9.38e-04  7.49e-02  1.52e-04  2.77e-03  3.39e-01  
  8  +4.7653e-01  +7.3521e-01  2.59e-01  8.49e-04  6.75e-02  1.09e-04  2.60e-03  3.90e-01  
  9  +4.5730e-01  +5.8229e-01  1.25e-01  3.18e-04  2.51e-02  5.10e-05  9.95e-04  9.41e-01  
 10  +4.5174e-01  +5.6340e-01  1.12e-01  2.15e-04  1.70e-02  5.92e-05  6.39e-04  7.29e-01  
 11  +4.4895e-01  +5.5385e-01  1.05e-01  1.85e-04  1.46e-02  5.96e-05  5.50e-04  2.75e-01  
 12  +4.3799e-01  +5.0111e-01  6.31e-02  1.14e-04  9.00e-03  3.79e-05  3.53e-04  9.90e-01  
 13  +4.2124e-01  +4.4369e-01  2.24e-02  3.77e-05  2.97e-03  1.15e-05  1.22e-04  7.87e-01  
 14  +4.1248e-01  +4.1334e-01  8.64e-04  1.38e-06  1.09e-04  2.58e-07  4.63e-06  9.66e-01  
 15  +4.1210e-01  +4.1211e-01  8.71e-06  1.39e-08  1.09e-06  2.57e-09  4.68e-08  9.90e-01  
 16  +4.1210e-01  +4.1210e-01  8.71e-08  1.39e-10  1.09e-08  2.57e-11  4.68e-10  9.90e-01  
 17  +4.1210e-01  +4.1210e-01  8.71e-10  1.39e-12  1.09e-10  2.57e-13  4.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.4602ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:17 PM: Optimal value: 4.121e-01
(CVXPY) Oct 06 04:25:17 PM: Compilation took 1.565e-02 seconds
(CVXPY) Oct 06 04:25:17 PM: Solver (including time spent in interface) took 1.560e-02 seconds
Iteration: 2, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:17 PM: Your problem has 541 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:17 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 1041
  nnz(P)        = 0
  nnz(A)        = 7960
  cones (total) = 1
    : Nonnegative = 1,  numel = 1041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9981e-01  +5.0113e+02  5.01e+02  9.57e-01  3.87e+01  1.00e+00  1.01e+00   ------   
  1  +5.7630e-01  +1.1034e+02  1.10e+02  4.30e-01  2.50e+01  3.75e-03  5.90e-01  5.76e-01  
  2  +5.2577e-01  +1.2101e+01  1.16e+01  1.47e-01  1.09e+01  1.86e-02  2.80e-01  9.90e-01  
  3  +5.0574e-01  +2.7320e+00  2.23e+00  5.05e-02  3.80e+00  5.60e-05  1.79e-01  7.71e-01  
  4  +5.0113e-01  +1.1784e+00  6.77e-01  1.59e-02  1.23e+00  3.07e-05  8.27e-02  6.00e-01  
  5  +4.9477e-01  +1.1957e+00  7.01e-01  4.92e-03  3.96e-01  1.43e-04  1.38e-02  9.37e-01  
  6  +4.7861e-01  +9.4736e-01  4.69e-01  1.61e-03  1.30e-01  2.02e-04  4.52e-03  6.89e-01  
  7  +4.6468e-01  +8.0411e-01  3.39e-01  9.40e-04  7.52e-02  1.64e-04  2.69e-03  4.94e-01  
  8  +4.5532e-01  +7.6630e-01  3.11e-01  6.51e-04  5.20e-02  1.84e-04  1.85e-03  4.05e-01  
  9  +4.4893e-01  +6.9862e-01  2.50e-01  5.38e-04  4.29e-02  1.31e-04  1.56e-03  4.59e-01  
 10  +4.1563e-01  +5.2272e-01  1.07e-01  1.96e-04  1.55e-02  5.23e-05  6.08e-04  7.04e-01  
 11  +3.9907e-01  +4.5177e-01  5.27e-02  9.29e-05  7.36e-03  2.73e-05  3.04e-04  6.14e-01  
 12  +3.8732e-01  +4.0193e-01  1.46e-02  2.54e-05  2.01e-03  1.01e-05  8.78e-05  9.90e-01  
 13  +3.8144e-01  +3.8175e-01  3.08e-04  5.35e-07  4.22e-05  1.67e-07  1.91e-06  9.80e-01  
 14  +3.8130e-01  +3.8130e-01  3.08e-06  5.36e-09  4.23e-07  1.67e-09  1.92e-08  9.90e-01  
 15  +3.8130e-01  +3.8130e-01  3.08e-08  5.36e-11  4.23e-09  1.67e-11  1.92e-10  9.90e-01  
 16  +3.8130e-01  +3.8130e-01  3.08e-10  5.36e-13  4.23e-11  1.67e-13  1.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.0022ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:17 PM: Optimal value: 3.813e-01
(CVXPY) Oct 06 04:25:17 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:17 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 3, Objective: 0.3813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:18 PM: Your problem has 551 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 1051
  nnz(P)        = 0
  nnz(A)        = 8227
  cones (total) = 1
    : Nonnegative = 1,  numel = 1051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9977e-01  +5.0142e+02  5.01e+02  9.57e-01  3.86e+01  1.00e+00  1.01e+00   ------   
  1  +5.7491e-01  +1.1038e+02  1.10e+02  4.31e-01  2.48e+01  3.76e-03  5.90e-01  5.76e-01  
  2  +5.2487e-01  +1.2236e+01  1.17e+01  1.47e-01  1.08e+01  1.87e-02  2.79e-01  9.90e-01  
  3  +5.0606e-01  +2.3942e+00  1.89e+00  4.36e-02  3.36e+00  6.13e-05  1.38e-01  8.69e-01  
  4  +5.0102e-01  +1.2200e+00  7.19e-01  1.55e-02  1.21e+00  6.17e-05  5.56e-02  6.67e-01  
  5  +4.9357e-01  +1.2800e+00  7.86e-01  4.55e-03  3.71e-01  2.48e-04  1.19e-02  8.63e-01  
  6  +4.7266e-01  +1.0542e+00  5.81e-01  1.57e-03  1.28e-01  3.99e-04  4.12e-03  6.75e-01  
  7  +4.4818e-01  +8.8293e-01  4.35e-01  9.23e-04  7.48e-02  3.27e-04  2.51e-03  4.60e-01  
  8  +4.1140e-01  +6.3521e-01  2.24e-01  4.67e-04  3.74e-02  1.13e-04  1.40e-03  6.37e-01  
  9  +3.8531e-01  +5.0711e-01  1.22e-01  2.45e-04  1.95e-02  5.71e-05  7.94e-04  4.92e-01  
 10  +3.6233e-01  +3.9898e-01  3.66e-02  7.20e-05  5.73e-03  2.15e-05  2.57e-04  9.90e-01  
 11  +3.5035e-01  +3.5203e-01  1.68e-03  3.28e-06  2.61e-04  6.78e-07  1.27e-05  9.57e-01  
 12  +3.4971e-01  +3.4972e-01  1.72e-05  3.38e-08  2.68e-06  6.86e-09  1.32e-07  9.90e-01  
 13  +3.4970e-01  +3.4970e-01  1.72e-07  3.38e-10  2.68e-08  6.86e-11  1.32e-09  9.90e-01  
 14  +3.4970e-01  +3.4970e-01  1.72e-09  3.37e-12  2.68e-10  6.86e-13  1.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.8198ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:18 PM: Optimal value: 3.497e-01
(CVXPY) Oct 06 04:25:18 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:18 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 4, Objective: 0.3497
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:18 PM: Your problem has 561 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Finished problem compilation (took 1.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 1061
  nnz(P)        = 0
  nnz(A)        = 8388
  cones (total) = 1
    : Nonnegative = 1,  numel = 1061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0163e+02  5.01e+02  9.57e-01  3.85e+01  1.00e+00  1.01e+00   ------   
  1  +5.7293e-01  +1.1047e+02  1.10e+02  4.32e-01  2.47e+01  3.76e-03  5.91e-01  5.76e-01  
  2  +5.2389e-01  +1.2418e+01  1.19e+01  1.47e-01  1.07e+01  1.90e-02  2.78e-01  9.90e-01  
  3  +5.0678e-01  +2.3192e+00  1.81e+00  4.01e-02  3.14e+00  4.59e-04  1.14e-01  8.63e-01  
  4  +5.0558e-01  +2.1617e+00  1.66e+00  2.51e-02  2.01e+00  9.34e-04  6.41e-02  5.17e-01  
  5  +5.0178e-01  +1.9249e+00  1.42e+00  1.66e-02  1.33e+00  5.09e-04  4.47e-02  7.13e-01  
  6  +4.8824e-01  +1.4952e+00  1.01e+00  3.09e-03  2.55e-01  1.53e-03  7.58e-03  8.35e-01  
  7  +4.7319e-01  +1.2868e+00  8.14e-01  2.12e-03  1.74e-01  1.19e-03  5.33e-03  3.89e-01  
  8  +4.5778e-01  +1.1327e+00  6.75e-01  1.53e-03  1.25e-01  9.36e-04  3.94e-03  3.61e-01  
  9  +4.3147e-01  +8.0978e-01  3.78e-01  9.66e-04  7.78e-02  1.75e-05  2.72e-03  8.38e-01  
 10  +3.7664e-01  +5.1613e-01  1.39e-01  2.86e-04  2.28e-02  3.50e-05  9.02e-04  8.05e-01  
 11  +3.5400e-01  +4.2167e-01  6.77e-02  1.37e-04  1.08e-02  1.99e-05  4.68e-04  5.57e-01  
 12  +3.3645e-01  +3.4931e-01  1.29e-02  2.57e-05  2.03e-03  4.92e-06  9.72e-05  8.70e-01  
 13  +3.3215e-01  +3.3258e-01  4.23e-04  8.43e-07  6.64e-05  1.47e-07  3.33e-06  9.67e-01  
 14  +3.3200e-01  +3.3201e-01  4.23e-06  8.43e-09  6.64e-07  1.47e-09  3.33e-08  9.90e-01  
 15  +3.3200e-01  +3.3200e-01  4.23e-08  8.43e-11  6.64e-09  1.47e-11  3.33e-10  9.90e-01  
 16  +3.3200e-01  +3.3200e-01  4.23e-10  8.43e-13  6.64e-11  1.47e-13  3.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.3716ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:18 PM: Optimal value: 3.320e-01
(CVXPY) Oct 06 04:25:18 PM: Compilation took 1.570e-02 seconds
(CVXPY) Oct 06 04:25:18 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 5, Objective: 0.3320
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:18 PM: Your problem has 571 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 571
  constraints   = 1071
  nnz(P)        = 0
  nnz(A)        = 8546
  cones (total) = 1
    : Nonnegative = 1,  numel = 1071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9967e-01  +5.0182e+02  5.01e+02  9.57e-01  3.83e+01  1.00e+00  1.01e+00   ------   
  1  +5.7161e-01  +1.1046e+02  1.10e+02  4.33e-01  2.45e+01  3.76e-03  5.90e-01  5.76e-01  
  2  +5.2314e-01  +1.2541e+01  1.20e+01  1.47e-01  1.06e+01  1.91e-02  2.76e-01  9.90e-01  
  3  +5.0893e-01  +3.4659e+00  2.96e+00  5.76e-02  4.46e+00  2.86e-03  1.43e-01  6.43e-01  
  4  +4.9960e-01  +1.5490e+00  1.05e+00  1.74e-02  1.39e+00  4.10e-03  4.92e-02  9.90e-01  
  5  +4.9316e-01  +1.5404e+00  1.05e+00  7.82e-03  6.38e-01  7.97e-03  1.99e-02  6.65e-01  
  6  +4.7183e-01  +1.3861e+00  9.14e-01  2.68e-03  2.21e-01  1.54e-02  6.66e-03  7.54e-01  
  7  +4.5723e-01  +1.1959e+00  7.39e-01  1.94e-03  1.59e-01  1.02e-02  4.94e-03  3.86e-01  
  8  +4.3683e-01  +1.0018e+00  5.65e-01  1.33e-03  1.08e-01  6.14e-03  3.52e-03  4.15e-01  
  9  +4.0335e-01  +7.4262e-01  3.39e-01  7.64e-04  6.15e-02  2.17e-03  2.18e-03  5.22e-01  
 10  +3.6379e-01  +5.1733e-01  1.54e-01  3.27e-04  2.60e-02  7.08e-04  1.04e-03  5.79e-01  
 11  +3.4056e-01  +4.0778e-01  6.72e-02  1.39e-04  1.11e-02  2.21e-04  4.83e-04  6.56e-01  
 12  +3.2402e-01  +3.3523e-01  1.12e-02  2.29e-05  1.81e-03  2.56e-05  8.74e-05  8.65e-01  
 13  +3.2042e-01  +3.2078e-01  3.58e-04  7.29e-07  5.75e-05  7.22e-07  2.89e-06  9.68e-01  
 14  +3.2030e-01  +3.2030e-01  3.61e-06  7.33e-09  5.79e-07  7.26e-09  2.92e-08  9.90e-01  
 15  +3.2030e-01  +3.2030e-01  3.61e-08  7.33e-11  5.79e-09  7.26e-11  2.92e-10  9.90e-01  
 16  +3.2030e-01  +3.2030e-01  3.61e-10  7.33e-13  5.79e-11  7.26e-13  2.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.4141ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:18 PM: Optimal value: 3.203e-01
(CVXPY) Oct 06 04:25:18 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:18 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 6, Objective: 0.3203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:18 PM: Your problem has 581 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Finished problem compilation (took 1.569e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 581
  constraints   = 1081
  nnz(P)        = 0
  nnz(A)        = 8664
  cones (total) = 1
    : Nonnegative = 1,  numel = 1081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0177e+02  5.01e+02  9.58e-01  3.82e+01  1.00e+00  1.01e+00   ------   
  1  +5.7045e-01  +1.1045e+02  1.10e+02  4.33e-01  2.43e+01  3.76e-03  5.89e-01  5.77e-01  
  2  +5.2239e-01  +1.2651e+01  1.21e+01  1.46e-01  1.05e+01  1.93e-02  2.75e-01  9.90e-01  
  3  +5.0958e-01  +3.8678e+00  3.36e+00  6.11e-02  4.71e+00  3.81e-03  1.46e-01  5.88e-01  
  4  +4.9976e-01  +1.7419e+00  1.24e+00  1.99e-02  1.58e+00  4.50e-03  5.44e-02  9.68e-01  
  5  +4.9196e-01  +1.6964e+00  1.20e+00  8.39e-03  6.87e-01  8.77e-03  2.10e-02  6.74e-01  
  6  +4.6931e-01  +1.4832e+00  1.01e+00  3.01e-03  2.49e-01  1.53e-02  7.41e-03  7.20e-01  
  7  +4.5137e-01  +1.2512e+00  8.00e-01  2.04e-03  1.68e-01  9.83e-03  5.18e-03  4.45e-01  
  8  +4.1539e-01  +8.4234e-01  4.27e-01  1.03e-03  8.35e-02  6.65e-04  2.84e-03  7.49e-01  
  9  +3.7200e-01  +5.9376e-01  2.22e-01  4.94e-04  3.95e-02  2.25e-04  1.51e-03  6.10e-01  
 10  +3.3597e-01  +4.1784e-01  8.19e-02  1.76e-04  1.40e-02  6.15e-05  6.10e-04  6.91e-01  
 11  +3.1883e-01  +3.4228e-01  2.35e-02  4.97e-05  3.95e-03  1.56e-05  1.89e-04  7.56e-01  
 12  +3.1314e-01  +3.1818e-01  5.04e-03  1.07e-05  8.44e-04  3.20e-06  4.25e-05  8.00e-01  
 13  +3.1178e-01  +3.1259e-01  8.09e-04  1.70e-06  1.34e-04  4.61e-07  6.90e-06  9.10e-01  
 14  +3.1150e-01  +3.1151e-01  9.36e-06  1.97e-08  1.55e-06  5.31e-09  8.01e-08  9.88e-01  
 15  +3.1150e-01  +3.1150e-01  9.36e-08  1.97e-10  1.55e-08  5.31e-11  8.01e-10  9.90e-01  
 16  +3.1150e-01  +3.1150e-01  9.36e-10  1.97e-12  1.55e-10  5.31e-13  8.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.7889ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:18 PM: Optimal value: 3.115e-01
(CVXPY) Oct 06 04:25:18 PM: Compilation took 1.569e-02 seconds
(CVXPY) Oct 06 04:25:18 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 7, Objective: 0.3115
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:18 PM: Your problem has 591 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 591
  constraints   = 1091
  nnz(P)        = 0
  nnz(A)        = 8809
  cones (total) = 1
    : Nonnegative = 1,  numel = 1091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0178e+02  5.01e+02  9.58e-01  3.80e+01  1.00e+00  1.01e+00   ------   
  1  +5.6985e-01  +1.1041e+02  1.10e+02  4.34e-01  2.41e+01  3.77e-03  5.89e-01  5.77e-01  
  2  +5.2194e-01  +1.2707e+01  1.22e+01  1.46e-01  1.03e+01  1.94e-02  2.74e-01  9.90e-01  
  3  +5.0970e-01  +3.9732e+00  3.46e+00  6.12e-02  4.70e+00  4.11e-03  1.44e-01  5.76e-01  
  4  +4.9965e-01  +1.7773e+00  1.28e+00  1.95e-02  1.55e+00  4.62e-03  5.22e-02  9.78e-01  
  5  +4.8716e-01  +1.7096e+00  1.22e+00  6.29e-03  5.18e-01  1.09e-02  1.54e-02  7.85e-01  
  6  +4.6158e-01  +1.4189e+00  9.57e-01  2.52e-03  2.08e-01  1.50e-02  6.20e-03  6.62e-01  
  7  +4.4325e-01  +1.2402e+00  7.97e-01  1.83e-03  1.50e-01  1.09e-02  4.60e-03  3.78e-01  
  8  +4.0927e-01  +8.3553e-01  4.26e-01  1.06e-03  8.49e-02  9.32e-05  2.91e-03  7.13e-01  
  9  +3.6118e-01  +5.4821e-01  1.87e-01  4.17e-04  3.32e-02  4.26e-05  1.29e-03  6.16e-01  
 10  +3.2937e-01  +3.9682e-01  6.74e-02  1.45e-04  1.16e-02  2.10e-05  5.00e-04  7.25e-01  
 11  +3.1474e-01  +3.3139e-01  1.66e-02  3.54e-05  2.82e-03  5.98e-06  1.31e-04  8.03e-01  
 12  +3.1088e-01  +3.1472e-01  3.84e-03  8.14e-06  6.43e-04  1.67e-06  3.12e-05  8.83e-01  
 13  +3.0999e-01  +3.1131e-01  1.33e-03  2.76e-06  2.18e-04  6.00e-07  1.10e-05  7.44e-01  
 14  +3.0952e-01  +3.0957e-01  4.96e-05  1.03e-07  8.10e-06  2.17e-08  4.16e-07  9.65e-01  
 15  +3.0950e-01  +3.0950e-01  4.99e-07  1.03e-09  8.15e-08  2.18e-10  4.19e-09  9.90e-01  
 16  +3.0950e-01  +3.0950e-01  5.00e-09  1.03e-11  8.15e-10  2.18e-12  4.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.7974ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:19 PM: Optimal value: 3.095e-01
(CVXPY) Oct 06 04:25:19 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:19 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 8, Objective: 0.3095
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:19 PM: Your problem has 601 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 601
  constraints   = 1101
  nnz(P)        = 0
  nnz(A)        = 8992
  cones (total) = 1
    : Nonnegative = 1,  numel = 1101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0178e+02  5.01e+02  9.58e-01  3.79e+01  1.00e+00  1.01e+00   ------   
  1  +5.6907e-01  +1.1039e+02  1.10e+02  4.35e-01  2.39e+01  3.77e-03  5.88e-01  5.77e-01  
  2  +5.2133e-01  +1.2769e+01  1.22e+01  1.46e-01  1.02e+01  1.94e-02  2.73e-01  9.90e-01  
  3  +5.0962e-01  +4.0061e+00  3.50e+00  5.97e-02  4.58e+00  4.31e-03  1.39e-01  5.74e-01  
  4  +4.9970e-01  +1.8507e+00  1.35e+00  1.86e-02  1.49e+00  4.76e-03  4.83e-02  9.58e-01  
  5  +4.8707e-01  +1.8360e+00  1.35e+00  6.50e-03  5.35e-01  9.72e-03  1.57e-02  8.25e-01  
  6  +4.6232e-01  +1.4373e+00  9.75e-01  2.64e-03  2.18e-01  1.11e-02  6.43e-03  6.63e-01  
  7  +4.4067e-01  +1.2302e+00  7.90e-01  1.80e-03  1.47e-01  8.11e-03  4.51e-03  4.06e-01  
  8  +4.1130e-01  +8.8072e-01  4.69e-01  1.20e-03  9.66e-02  7.19e-04  3.25e-03  6.06e-01  
  9  +3.5622e-01  +5.4089e-01  1.85e-01  4.08e-04  3.25e-02  2.08e-04  1.24e-03  6.75e-01  
 10  +3.2801e-01  +4.0843e-01  8.04e-02  1.74e-04  1.39e-02  7.66e-05  5.77e-04  6.40e-01  
 11  +3.1134e-01  +3.3239e-01  2.10e-02  4.49e-05  3.58e-03  1.90e-05  1.59e-04  7.49e-01  
 12  +3.0996e-01  +3.2748e-01  1.75e-02  3.54e-05  2.90e-03  1.57e-05  1.23e-04  3.66e-01  
 13  +3.0704e-01  +3.1503e-01  7.99e-03  1.62e-05  1.31e-03  4.41e-06  5.84e-05  9.90e-01  
 14  +3.0417e-01  +3.0510e-01  9.29e-04  1.84e-06  1.50e-04  4.76e-07  6.82e-06  9.07e-01  
 15  +3.0381e-01  +3.0383e-01  1.95e-05  3.84e-08  3.12e-06  9.33e-09  1.45e-07  9.80e-01  
 16  +3.0380e-01  +3.0380e-01  1.95e-07  3.85e-10  3.12e-08  9.34e-11  1.45e-09  9.90e-01  
 17  +3.0380e-01  +3.0380e-01  1.95e-09  3.85e-12  3.12e-10  9.34e-13  1.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.2905ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:19 PM: Optimal value: 3.038e-01
(CVXPY) Oct 06 04:25:19 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:19 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 9, Objective: 0.3038
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:19 PM: Your problem has 611 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Finished problem compilation (took 1.555e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 611
  constraints   = 1111
  nnz(P)        = 0
  nnz(A)        = 9107
  cones (total) = 1
    : Nonnegative = 1,  numel = 1111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0189e+02  5.01e+02  9.58e-01  3.78e+01  1.00e+00  1.01e+00   ------   
  1  +5.6682e-01  +1.1048e+02  1.10e+02  4.36e-01  2.38e+01  3.77e-03  5.89e-01  5.77e-01  
  2  +5.2015e-01  +1.2973e+01  1.25e+01  1.45e-01  1.02e+01  1.97e-02  2.72e-01  9.90e-01  
  3  +5.0913e-01  +3.9217e+00  3.41e+00  5.51e-02  4.25e+00  4.45e-03  1.27e-01  5.90e-01  
  4  +5.0484e-01  +3.0208e+00  2.52e+00  3.31e-02  2.63e+00  4.81e-03  7.84e-02  4.64e-01  
  5  +4.9780e-01  +2.7438e+00  2.25e+00  1.69e-02  1.37e+00  3.58e-03  4.01e-02  8.76e-01  
  6  +4.7422e-01  +2.0385e+00  1.56e+00  4.45e-03  3.69e-01  6.77e-03  1.04e-02  7.43e-01  
  7  +4.4253e-01  +1.4672e+00  1.02e+00  2.48e-03  2.03e-01  3.62e-03  6.08e-03  5.35e-01  
  8  +4.2742e-01  +1.2637e+00  8.36e-01  1.98e-03  1.62e-01  2.18e-03  5.00e-03  3.47e-01  
  9  +3.8759e-01  +8.3804e-01  4.50e-01  1.07e-03  8.58e-02  4.12e-04  2.95e-03  6.90e-01  
 10  +3.3399e-01  +4.8366e-01  1.50e-01  3.39e-04  2.68e-02  8.79e-05  1.07e-03  7.06e-01  
 11  +3.1452e-01  +3.9461e-01  8.01e-02  1.76e-04  1.41e-02  4.75e-05  5.95e-04  6.44e-01  
 12  +3.0464e-01  +3.4976e-01  4.51e-02  9.76e-05  7.85e-03  2.70e-05  3.40e-04  4.91e-01  
 13  +2.9697e-01  +3.1634e-01  1.94e-02  4.08e-05  3.32e-03  1.20e-05  1.45e-04  6.27e-01  
 14  +2.9243e-01  +2.9891e-01  6.47e-03  1.32e-05  1.09e-03  3.62e-06  4.82e-05  7.82e-01  
 15  +2.9047e-01  +2.9120e-01  7.25e-04  1.47e-06  1.20e-04  3.93e-07  5.50e-06  9.24e-01  
 16  +2.9021e-01  +2.9022e-01  1.35e-05  2.74e-08  2.24e-06  6.98e-09  1.04e-07  9.82e-01  
 17  +2.9020e-01  +2.9020e-01  1.35e-07  2.74e-10  2.24e-08  6.98e-11  1.04e-09  9.90e-01  
 18  +2.9020e-01  +2.9020e-01  1.35e-09  2.74e-12  2.24e-10  6.98e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.8906ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:19 PM: Optimal value: 2.902e-01
(CVXPY) Oct 06 04:25:19 PM: Compilation took 1.555e-02 seconds
(CVXPY) Oct 06 04:25:19 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 10, Objective: 0.2902
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:19 PM: Your problem has 621 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 621
  constraints   = 1121
  nnz(P)        = 0
  nnz(A)        = 9237
  cones (total) = 1
    : Nonnegative = 1,  numel = 1121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0196e+02  5.01e+02  9.58e-01  3.76e+01  1.00e+00  1.01e+00   ------   
  1  +5.6478e-01  +1.1048e+02  1.10e+02  4.36e-01  2.36e+01  3.78e-03  5.88e-01  5.77e-01  
  2  +5.1905e-01  +1.3130e+01  1.26e+01  1.44e-01  1.01e+01  1.99e-02  2.70e-01  9.90e-01  
  3  +5.0831e-01  +3.6850e+00  3.18e+00  4.89e-02  3.79e+00  4.32e-03  1.12e-01  6.23e-01  
  4  +5.0650e-01  +3.3504e+00  2.84e+00  3.72e-02  2.94e+00  4.70e-03  8.55e-02  2.48e-01  
  5  +5.0178e-01  +3.0464e+00  2.54e+00  2.93e-02  2.31e+00  2.74e-03  7.19e-02  4.77e-01  
  6  +4.7924e-01  +1.7820e+00  1.30e+00  4.28e-03  3.57e-01  6.62e-03  9.85e-03  8.70e-01  
  7  +4.5484e-01  +1.5003e+00  1.05e+00  2.81e-03  2.31e-01  5.01e-03  6.68e-03  4.23e-01  
  8  +4.3443e-01  +1.2982e+00  8.64e-01  2.10e-03  1.72e-01  3.37e-03  5.15e-03  3.68e-01  
  9  +3.9494e-01  +9.0267e-01  5.08e-01  1.32e-03  1.06e-01  2.88e-05  3.55e-03  7.64e-01  
 10  +3.3611e-01  +5.2296e-01  1.87e-01  4.35e-04  3.45e-02  1.82e-05  1.32e-03  6.67e-01  
 11  +3.2048e-01  +4.5300e-01  1.33e-01  3.02e-04  2.41e-02  2.35e-05  9.61e-04  3.92e-01  
 12  +2.9791e-01  +3.4824e-01  5.03e-02  1.12e-04  9.01e-03  1.13e-05  3.86e-04  6.50e-01  
 13  +2.8949e-01  +3.1218e-01  2.27e-02  4.92e-05  4.00e-03  6.39e-06  1.74e-04  6.24e-01  
 14  +2.8676e-01  +3.0188e-01  1.51e-02  3.16e-05  2.61e-03  4.97e-06  1.12e-04  4.64e-01  
 15  +2.8307e-01  +2.8690e-01  3.83e-03  7.94e-06  6.55e-04  2.07e-06  2.91e-05  9.90e-01  
 16  +2.8161e-01  +2.8189e-01  2.74e-04  5.64e-07  4.65e-05  1.45e-07  2.10e-06  9.39e-01  
 17  +2.8150e-01  +2.8150e-01  2.81e-06  5.77e-09  4.76e-07  1.48e-09  2.15e-08  9.90e-01  
 18  +2.8150e-01  +2.8150e-01  2.81e-08  5.77e-11  4.76e-09  1.48e-11  2.15e-10  9.90e-01  
 19  +2.8150e-01  +2.8150e-01  2.81e-10  5.77e-13  4.76e-11  1.48e-13  2.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.0775ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:19 PM: Optimal value: 2.815e-01
(CVXPY) Oct 06 04:25:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:19 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 11, Objective: 0.2815
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:19 PM: Your problem has 631 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 631
  constraints   = 1131
  nnz(P)        = 0
  nnz(A)        = 9423
  cones (total) = 1
    : Nonnegative = 1,  numel = 1131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0189e+02  5.01e+02  9.58e-01  3.75e+01  1.00e+00  1.01e+00   ------   
  1  +5.6378e-01  +1.1043e+02  1.10e+02  4.36e-01  2.34e+01  3.78e-03  5.87e-01  5.78e-01  
  2  +5.1842e-01  +1.3205e+01  1.27e+01  1.44e-01  9.95e+00  2.00e-02  2.68e-01  9.90e-01  
  3  +5.0765e-01  +3.4773e+00  2.97e+00  4.45e-02  3.44e+00  4.14e-03  1.02e-01  6.52e-01  
  4  +5.0655e-01  +3.3300e+00  2.82e+00  3.63e-02  2.85e+00  4.56e-03  8.28e-02  1.96e-01  
  5  +5.0193e-01  +3.1411e+00  2.64e+00  2.96e-02  2.32e+00  2.86e-03  7.17e-02  4.53e-01  
  6  +4.7947e-01  +1.9244e+00  1.44e+00  4.76e-03  3.96e-01  6.76e-03  1.09e-02  8.55e-01  
  7  +4.5186e-01  +1.5377e+00  1.09e+00  2.97e-03  2.43e-01  4.47e-03  7.06e-03  4.68e-01  
  8  +4.3327e-01  +1.3596e+00  9.26e-01  2.26e-03  1.85e-01  3.29e-03  5.50e-03  3.48e-01  
  9  +3.9946e-01  +9.9204e-01  5.93e-01  1.53e-03  1.23e-01  6.98e-04  4.02e-03  5.70e-01  
 10  +3.3897e-01  +5.7209e-01  2.33e-01  5.39e-04  4.27e-02  1.88e-04  1.59e-03  6.80e-01  
 11  +3.1968e-01  +4.7749e-01  1.58e-01  3.61e-04  2.86e-02  1.22e-04  1.12e-03  3.82e-01  
 12  +2.9385e-01  +3.5250e-01  5.86e-02  1.31e-04  1.04e-02  4.24e-05  4.49e-04  6.58e-01  
 13  +2.8367e-01  +3.0712e-01  2.35e-02  5.14e-05  4.09e-03  1.57e-05  1.87e-04  6.80e-01  
 14  +2.7801e-01  +2.8276e-01  4.74e-03  1.03e-05  8.10e-04  2.89e-06  3.96e-05  8.40e-01  
 15  +2.7668e-01  +2.7744e-01  7.63e-04  1.63e-06  1.28e-04  4.11e-07  6.57e-06  9.03e-01  
 16  +2.7640e-01  +2.7642e-01  1.21e-05  2.57e-08  2.02e-06  6.17e-09  1.05e-07  9.84e-01  
 17  +2.7640e-01  +2.7640e-01  1.21e-07  2.57e-10  2.02e-08  6.17e-11  1.05e-09  9.90e-01  
 18  +2.7640e-01  +2.7640e-01  1.21e-09  2.57e-12  2.02e-10  6.18e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.4874ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:19 PM: Optimal value: 2.764e-01
(CVXPY) Oct 06 04:25:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:19 PM: Solver (including time spent in interface) took 3.168e-02 seconds
Iteration: 12, Objective: 0.2764
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:20 PM: Your problem has 641 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:20 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 641
  constraints   = 1141
  nnz(P)        = 0
  nnz(A)        = 9531
  cones (total) = 1
    : Nonnegative = 1,  numel = 1141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0193e+02  5.01e+02  9.59e-01  3.74e+01  1.00e+00  1.01e+00   ------   
  1  +5.6285e-01  +1.1042e+02  1.10e+02  4.37e-01  2.33e+01  3.78e-03  5.86e-01  5.78e-01  
  2  +5.1780e-01  +1.3283e+01  1.28e+01  1.43e-01  9.85e+00  2.01e-02  2.67e-01  9.90e-01  
  3  +5.0704e-01  +3.2758e+00  2.77e+00  4.05e-02  3.14e+00  3.95e-03  9.32e-02  6.83e-01  
  4  +5.0627e-01  +3.2283e+00  2.72e+00  3.42e-02  2.69e+00  4.37e-03  7.80e-02  1.79e-01  
  5  +5.0127e-01  +3.2618e+00  2.76e+00  2.71e-02  2.14e+00  3.10e-03  6.40e-02  5.49e-01  
  6  +4.7746e-01  +2.1195e+00  1.64e+00  5.01e-03  4.15e-01  6.89e-03  1.14e-02  8.27e-01  
  7  +4.4481e-01  +1.6329e+00  1.19e+00  2.90e-03  2.37e-01  4.60e-03  6.87e-03  5.08e-01  
  8  +4.2149e-01  +1.2798e+00  8.58e-01  2.20e-03  1.78e-01  1.72e-03  5.44e-03  4.35e-01  
  9  +3.6277e-01  +7.5588e-01  3.93e-01  9.17e-04  7.27e-02  4.07e-04  2.52e-03  6.93e-01  
 10  +3.2298e-01  +5.2225e-01  1.99e-01  4.62e-04  3.64e-02  1.78e-04  1.40e-03  5.11e-01  
 11  +3.0086e-01  +4.1420e-01  1.13e-01  2.55e-04  2.03e-02  9.34e-05  8.31e-04  5.42e-01  
 12  +2.7988e-01  +3.1452e-01  3.46e-02  7.62e-05  6.07e-03  2.58e-05  2.73e-04  7.27e-01  
 13  +2.7195e-01  +2.7882e-01  6.87e-03  1.50e-05  1.19e-03  4.40e-06  5.76e-05  8.63e-01  
 14  +2.7033e-01  +2.7213e-01  1.79e-03  3.90e-06  3.06e-04  1.00e-06  1.55e-05  8.61e-01  
 15  +2.6971e-01  +2.6976e-01  4.05e-05  8.79e-08  6.91e-06  2.05e-08  3.56e-07  9.77e-01  
 16  +2.6970e-01  +2.6970e-01  4.07e-07  8.84e-10  6.95e-08  2.06e-10  3.58e-09  9.90e-01  
 17  +2.6970e-01  +2.6970e-01  4.08e-09  8.86e-12  6.96e-10  2.06e-12  3.59e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.7209ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:20 PM: Optimal value: 2.697e-01
(CVXPY) Oct 06 04:25:20 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:20 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 13, Objective: 0.2697
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:20 PM: Your problem has 651 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:20 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 651
  constraints   = 1151
  nnz(P)        = 0
  nnz(A)        = 9605
  cones (total) = 1
    : Nonnegative = 1,  numel = 1151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0199e+02  5.01e+02  9.59e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.6101e-01  +1.1045e+02  1.10e+02  4.37e-01  2.31e+01  3.79e-03  5.86e-01  5.79e-01  
  2  +5.1671e-01  +1.3424e+01  1.29e+01  1.42e-01  9.76e+00  2.03e-02  2.65e-01  9.90e-01  
  3  +5.0583e-01  +2.8827e+00  2.38e+00  3.33e-02  2.60e+00  3.58e-03  7.70e-02  7.40e-01  
  4  +5.0540e-01  +3.0055e+00  2.50e+00  2.95e-02  2.33e+00  4.00e-03  6.71e-02  2.02e-01  
  5  +4.9748e-01  +3.5717e+00  3.07e+00  1.86e-02  1.50e+00  4.70e-03  4.16e-02  7.59e-01  
  6  +4.7178e-01  +2.5344e+00  2.06e+00  5.69e-03  4.70e-01  6.85e-03  1.29e-02  6.94e-01  
  7  +4.4199e-01  +2.0183e+00  1.58e+00  3.61e-03  2.96e-01  5.26e-03  8.41e-03  4.22e-01  
  8  +4.2102e-01  +1.5785e+00  1.16e+00  2.78e-03  2.25e-01  2.67e-03  6.72e-03  3.46e-01  
  9  +3.7664e-01  +9.4063e-01  5.64e-01  1.45e-03  1.14e-01  2.26e-05  3.87e-03  8.65e-01  
 10  +3.1362e-01  +4.8269e-01  1.69e-01  4.06e-04  3.17e-02  1.74e-05  1.25e-03  7.22e-01  
 11  +3.0143e-01  +4.3751e-01  1.36e-01  3.17e-04  2.51e-02  2.96e-05  1.01e-03  3.94e-01  
 12  +2.7530e-01  +3.2079e-01  4.55e-02  1.03e-04  8.19e-03  1.19e-05  3.64e-04  6.94e-01  
 13  +2.7024e-01  +2.9838e-01  2.81e-02  6.28e-05  5.02e-03  9.48e-06  2.31e-04  5.50e-01  
 14  +2.6227e-01  +2.6533e-01  3.06e-03  6.75e-06  5.39e-04  1.14e-06  2.66e-05  9.30e-01  
 15  +2.6125e-01  +2.6138e-01  1.32e-04  2.91e-07  2.32e-05  4.54e-08  1.19e-06  9.64e-01  
 16  +2.6120e-01  +2.6120e-01  1.44e-06  3.17e-09  2.52e-07  4.94e-10  1.30e-08  9.89e-01  
 17  +2.6120e-01  +2.6120e-01  1.44e-08  3.17e-11  2.52e-09  4.95e-12  1.30e-10  9.90e-01  
 18  +2.6120e-01  +2.6120e-01  1.44e-10  3.17e-13  2.52e-11  4.95e-14  1.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.624ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:20 PM: Optimal value: 2.612e-01
(CVXPY) Oct 06 04:25:20 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:25:20 PM: Solver (including time spent in interface) took 3.773e-02 seconds
Iteration: 14, Objective: 0.2612
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:20 PM: Your problem has 661 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:20 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 661
  constraints   = 1161
  nnz(P)        = 0
  nnz(A)        = 9678
  cones (total) = 1
    : Nonnegative = 1,  numel = 1161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0204e+02  5.02e+02  9.59e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.5895e-01  +1.1051e+02  1.10e+02  4.37e-01  2.30e+01  3.80e-03  5.85e-01  5.79e-01  
  2  +5.1541e-01  +1.3594e+01  1.31e+01  1.42e-01  9.68e+00  2.05e-02  2.64e-01  9.90e-01  
  3  +5.0431e-01  +2.3920e+00  1.89e+00  2.51e-02  1.98e+00  3.13e-03  5.85e-02  8.06e-01  
  4  +5.0136e-01  +3.0439e+00  2.54e+00  1.89e-02  1.52e+00  4.41e-03  4.18e-02  6.14e-01  
  5  +4.8007e-01  +2.6154e+00  2.14e+00  6.75e-03  5.58e-01  7.23e-03  1.50e-02  7.08e-01  
  6  +4.4411e-01  +1.7352e+00  1.29e+00  3.54e-03  2.88e-01  3.06e-03  8.30e-03  5.82e-01  
  7  +4.2080e-01  +1.4792e+00  1.06e+00  2.65e-03  2.14e-01  2.15e-03  6.39e-03  3.52e-01  
  8  +3.5989e-01  +8.0239e-01  4.42e-01  1.13e-03  8.87e-02  7.81e-05  3.07e-03  8.12e-01  
  9  +3.0736e-01  +4.8046e-01  1.73e-01  4.26e-04  3.33e-02  3.61e-05  1.31e-03  6.39e-01  
 10  +2.9279e-01  +4.2027e-01  1.27e-01  3.01e-04  2.38e-02  3.89e-05  9.65e-04  4.69e-01  
 11  +2.7710e-01  +3.4954e-01  7.24e-02  1.66e-04  1.32e-02  2.33e-05  5.64e-04  4.61e-01  
 12  +2.6301e-01  +2.8742e-01  2.44e-02  5.43e-05  4.34e-03  8.32e-06  1.99e-04  6.93e-01  
 13  +2.5725e-01  +2.6262e-01  5.37e-03  1.19e-05  9.45e-04  2.09e-06  4.57e-05  8.54e-01  
 14  +2.5580e-01  +2.5686e-01  1.07e-03  2.34e-06  1.85e-04  4.62e-07  9.30e-06  9.09e-01  
 15  +2.5541e-01  +2.5543e-01  1.93e-05  4.22e-08  3.35e-06  7.94e-09  1.70e-07  9.82e-01  
 16  +2.5540e-01  +2.5540e-01  1.93e-07  4.23e-10  3.35e-08  7.95e-11  1.70e-09  9.90e-01  
 17  +2.5540e-01  +2.5540e-01  1.93e-09  4.23e-12  3.35e-10  7.95e-13  1.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.0774ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:20 PM: Optimal value: 2.554e-01
(CVXPY) Oct 06 04:25:20 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:25:20 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 15, Objective: 0.2554
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:20 PM: Your problem has 671 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:20 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 671
  constraints   = 1171
  nnz(P)        = 0
  nnz(A)        = 9777
  cones (total) = 1
    : Nonnegative = 1,  numel = 1171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0194e+02  5.01e+02  9.59e-01  3.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.5722e-01  +1.1054e+02  1.10e+02  4.37e-01  2.28e+01  3.80e-03  5.84e-01  5.79e-01  
  2  +5.1464e-01  +1.3718e+01  1.32e+01  1.41e-01  9.55e+00  2.07e-02  2.62e-01  9.90e-01  
  3  +5.0362e-01  +2.4208e+00  1.92e+00  2.45e-02  1.92e+00  3.38e-03  5.66e-02  8.09e-01  
  4  +4.9438e-01  +2.9088e+00  2.41e+00  1.34e-02  1.09e+00  5.92e-03  2.97e-02  7.15e-01  
  5  +4.6523e-01  +2.2347e+00  1.77e+00  4.68e-03  3.86e-01  8.60e-03  1.05e-02  6.74e-01  
  6  +4.3620e-01  +1.8637e+00  1.43e+00  3.27e-03  2.67e-01  6.60e-03  7.56e-03  3.57e-01  
  7  +3.8960e-01  +1.1133e+00  7.24e-01  1.96e-03  1.55e-01  5.06e-05  5.02e-03  6.45e-01  
  8  +3.2597e-01  +6.1304e-01  2.87e-01  7.21e-04  5.59e-02  4.48e-05  2.08e-03  6.67e-01  
  9  +2.9648e-01  +4.5970e-01  1.63e-01  3.99e-04  3.12e-02  3.72e-05  1.24e-03  5.07e-01  
 10  +2.7567e-01  +3.5777e-01  8.21e-02  1.93e-04  1.53e-02  2.44e-05  6.45e-04  5.91e-01  
 11  +2.6368e-01  +3.0370e-01  4.00e-02  9.13e-05  7.27e-03  1.31e-05  3.23e-04  5.67e-01  
 12  +2.5622e-01  +2.7112e-01  1.49e-02  3.34e-05  2.66e-03  5.05e-06  1.25e-04  6.54e-01  
 13  +2.5248e-01  +2.5503e-01  2.55e-03  5.65e-06  4.49e-04  9.52e-07  2.21e-05  8.77e-01  
 14  +2.5166e-01  +2.5180e-01  1.46e-04  3.21e-07  2.54e-05  6.03e-08  1.29e-06  9.78e-01  
 15  +2.5160e-01  +2.5160e-01  1.54e-06  3.39e-09  2.68e-07  6.36e-10  1.37e-08  9.89e-01  
 16  +2.5160e-01  +2.5160e-01  1.54e-08  3.40e-11  2.69e-09  6.36e-12  1.37e-10  9.90e-01  
 17  +2.5160e-01  +2.5160e-01  1.54e-10  3.40e-13  2.69e-11  6.37e-14  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.0443ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:20 PM: Optimal value: 2.516e-01
(CVXPY) Oct 06 04:25:20 PM: Compilation took 1.572e-02 seconds
(CVXPY) Oct 06 04:25:20 PM: Solver (including time spent in interface) took 3.191e-02 seconds
Iteration: 16, Objective: 0.2516
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:21 PM: Your problem has 681 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 681
  constraints   = 1181
  nnz(P)        = 0
  nnz(A)        = 9874
  cones (total) = 1
    : Nonnegative = 1,  numel = 1181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0197e+02  5.01e+02  9.59e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.5522e-01  +1.1057e+02  1.10e+02  4.38e-01  2.27e+01  3.80e-03  5.84e-01  5.79e-01  
  2  +5.1326e-01  +1.3905e+01  1.34e+01  1.40e-01  9.47e+00  2.10e-02  2.61e-01  9.90e-01  
  3  +5.0225e-01  +2.4199e+00  1.92e+00  2.30e-02  1.80e+00  3.75e-03  5.28e-02  8.19e-01  
  4  +4.8669e-01  +2.6792e+00  2.19e+00  9.45e-03  7.74e-01  8.35e-03  2.09e-02  7.35e-01  
  5  +4.4658e-01  +1.8344e+00  1.39e+00  3.54e-03  2.90e-01  7.41e-03  8.06e-03  7.00e-01  
  6  +4.2142e-01  +1.5907e+00  1.17e+00  2.77e-03  2.24e-01  5.49e-03  6.48e-03  2.85e-01  
  7  +3.6181e-01  +9.2061e-01  5.59e-01  1.52e-03  1.19e-01  4.21e-05  4.06e-03  7.16e-01  
  8  +2.9947e-01  +4.7274e-01  1.73e-01  4.49e-04  3.46e-02  2.27e-05  1.38e-03  7.15e-01  
  9  +2.8704e-01  +4.2259e-01  1.36e-01  3.39e-04  2.65e-02  2.83e-05  1.08e-03  3.75e-01  
 10  +2.6791e-01  +3.3654e-01  6.86e-02  1.63e-04  1.29e-02  1.89e-05  5.57e-04  5.87e-01  
 11  +2.5435e-01  +2.7804e-01  2.37e-02  5.42e-05  4.33e-03  7.27e-06  2.00e-04  6.98e-01  
 12  +2.4869e-01  +2.5415e-01  5.46e-03  1.23e-05  9.82e-04  1.97e-06  4.80e-05  8.46e-01  
 13  +2.4718e-01  +2.4822e-01  1.03e-03  2.31e-06  1.83e-04  4.25e-07  9.30e-06  9.11e-01  
 14  +2.4681e-01  +2.4683e-01  2.01e-05  4.48e-08  3.55e-06  7.92e-09  1.83e-07  9.81e-01  
 15  +2.4680e-01  +2.4680e-01  2.01e-07  4.48e-10  3.55e-08  7.92e-11  1.83e-09  9.90e-01  
 16  +2.4680e-01  +2.4680e-01  2.01e-09  4.48e-12  3.55e-10  7.93e-13  1.83e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.581ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:21 PM: Optimal value: 2.468e-01
(CVXPY) Oct 06 04:25:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:21 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 17, Objective: 0.2468
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:21 PM: Your problem has 691 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:21 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 691
  constraints   = 1191
  nnz(P)        = 0
  nnz(A)        = 9934
  cones (total) = 1
    : Nonnegative = 1,  numel = 1191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0202e+02  5.02e+02  9.60e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.5326e-01  +1.1064e+02  1.10e+02  4.39e-01  2.25e+01  3.81e-03  5.84e-01  5.79e-01  
  2  +5.1213e-01  +1.4038e+01  1.35e+01  1.40e-01  9.39e+00  2.11e-02  2.60e-01  9.90e-01  
  3  +5.0115e-01  +2.4798e+00  1.98e+00  2.26e-02  1.77e+00  4.10e-03  5.16e-02  8.23e-01  
  4  +4.8168e-01  +2.5267e+00  2.05e+00  8.21e-03  6.74e-01  9.43e-03  1.81e-02  7.28e-01  
  5  +4.4376e-01  +1.8017e+00  1.36e+00  3.84e-03  3.12e-01  6.60e-03  8.83e-03  6.16e-01  
  6  +4.1933e-01  +1.5512e+00  1.13e+00  2.95e-03  2.37e-01  4.79e-03  6.96e-03  3.05e-01  
  7  +3.6063e-01  +9.3652e-01  5.76e-01  1.58e-03  1.23e-01  4.07e-05  4.18e-03  7.65e-01  
  8  +2.9745e-01  +4.7982e-01  1.82e-01  4.76e-04  3.66e-02  2.33e-05  1.45e-03  7.08e-01  
  9  +2.8526e-01  +4.3276e-01  1.48e-01  3.70e-04  2.90e-02  2.98e-05  1.16e-03  3.48e-01  
 10  +2.6679e-01  +3.5006e-01  8.33e-02  2.00e-04  1.59e-02  2.01e-05  6.69e-04  4.92e-01  
 11  +2.5346e-01  +2.9156e-01  3.81e-02  8.87e-05  7.09e-03  1.09e-05  3.15e-04  6.06e-01  
 12  +2.4558e-01  +2.5875e-01  1.32e-02  2.98e-05  2.39e-03  4.54e-06  1.11e-04  7.51e-01  
 13  +2.4196e-01  +2.4392e-01  1.96e-03  4.40e-06  3.50e-04  9.06e-07  1.72e-05  9.90e-01  
 14  +2.4122e-01  +2.4129e-01  6.23e-05  1.40e-07  1.11e-05  2.68e-08  5.57e-07  9.71e-01  
 15  +2.4120e-01  +2.4120e-01  6.29e-07  1.41e-09  1.12e-07  2.70e-10  5.63e-09  9.90e-01  
 16  +2.4120e-01  +2.4120e-01  6.30e-09  1.42e-11  1.12e-09  2.71e-12  5.64e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.7706ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:21 PM: Optimal value: 2.412e-01
(CVXPY) Oct 06 04:25:21 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:21 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 18, Objective: 0.2412
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:21 PM: Your problem has 701 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 701
  constraints   = 1201
  nnz(P)        = 0
  nnz(A)        = 10014
  cones (total) = 1
    : Nonnegative = 1,  numel = 1201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0213e+02  5.02e+02  9.60e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.5098e-01  +1.1073e+02  1.10e+02  4.38e-01  2.24e+01  3.82e-03  5.83e-01  5.79e-01  
  2  +5.1102e-01  +1.4174e+01  1.37e+01  1.39e-01  9.24e+00  2.13e-02  2.58e-01  9.90e-01  
  3  +4.9975e-01  +2.4296e+00  1.93e+00  2.09e-02  1.63e+00  4.31e-03  4.77e-02  8.41e-01  
  4  +4.7707e-01  +2.3837e+00  1.91e+00  7.32e-03  5.99e-01  9.97e-03  1.62e-02  7.19e-01  
  5  +4.3644e-01  +1.7185e+00  1.28e+00  3.65e-03  2.94e-01  6.40e-03  8.48e-03  5.88e-01  
  6  +4.0968e-01  +1.4639e+00  1.05e+00  2.81e-03  2.24e-01  4.25e-03  6.73e-03  3.28e-01  
  7  +3.4017e-01  +7.9291e-01  4.53e-01  1.21e-03  9.34e-02  1.21e-04  3.31e-03  7.76e-01  
  8  +2.8476e-01  +4.4996e-01  1.65e-01  4.31e-04  3.30e-02  4.84e-05  1.36e-03  6.90e-01  
  9  +2.7148e-01  +3.9147e-01  1.20e-01  3.03e-04  2.35e-02  4.04e-05  9.90e-04  4.14e-01  
 10  +2.5385e-01  +3.0979e-01  5.59e-02  1.35e-04  1.06e-02  1.97e-05  4.75e-04  5.69e-01  
 11  +2.4609e-01  +2.7540e-01  2.93e-02  6.92e-05  5.46e-03  1.07e-05  2.54e-04  5.27e-01  
 12  +2.3949e-01  +2.4660e-01  7.11e-03  1.66e-05  1.30e-03  2.76e-06  6.41e-05  8.27e-01  
 13  +2.3754e-01  +2.3853e-01  9.93e-04  2.31e-06  1.81e-04  3.83e-07  9.26e-06  8.88e-01  
 14  +2.3721e-01  +2.3723e-01  2.18e-05  5.06e-08  3.97e-06  8.40e-09  2.06e-07  9.86e-01  
 15  +2.3720e-01  +2.3720e-01  2.18e-07  5.06e-10  3.97e-08  8.40e-11  2.06e-09  9.90e-01  
 16  +2.3720e-01  +2.3720e-01  2.18e-09  5.07e-12  3.98e-10  8.40e-13  2.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.3985ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:21 PM: Optimal value: 2.372e-01
(CVXPY) Oct 06 04:25:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:21 PM: Solver (including time spent in interface) took 3.134e-02 seconds
Iteration: 19, Objective: 0.2372
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:21 PM: Your problem has 711 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:21 PM: Finished problem compilation (took 1.661e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 711
  constraints   = 1211
  nnz(P)        = 0
  nnz(A)        = 10088
  cones (total) = 1
    : Nonnegative = 1,  numel = 1211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0227e+02  5.02e+02  9.60e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.4859e-01  +1.1079e+02  1.10e+02  4.38e-01  2.22e+01  3.82e-03  5.82e-01  5.79e-01  
  2  +5.0897e-01  +1.4365e+01  1.39e+01  1.37e-01  9.14e+00  2.16e-02  2.56e-01  9.90e-01  
  3  +4.9713e-01  +2.5317e+00  2.03e+00  2.03e-02  1.59e+00  4.99e-03  4.60e-02  8.47e-01  
  4  +4.6747e-01  +2.2764e+00  1.81e+00  6.56e-03  5.36e-01  1.10e-02  1.46e-02  7.18e-01  
  5  +4.2667e-01  +1.7082e+00  1.28e+00  3.63e-03  2.92e-01  7.07e-03  8.48e-03  5.30e-01  
  6  +4.0204e-01  +1.4730e+00  1.07e+00  2.85e-03  2.26e-01  5.12e-03  6.85e-03  2.79e-01  
  7  +3.3904e-01  +8.5216e-01  5.13e-01  1.42e-03  1.09e-01  1.52e-04  3.85e-03  7.70e-01  
  8  +2.8299e-01  +4.5840e-01  1.75e-01  4.69e-04  3.58e-02  5.03e-05  1.46e-03  7.02e-01  
  9  +2.7053e-01  +4.0700e-01  1.36e-01  3.49e-04  2.72e-02  4.61e-05  1.12e-03  3.98e-01  
 10  +2.5418e-01  +3.3197e-01  7.78e-02  1.90e-04  1.50e-02  2.77e-05  6.46e-04  4.84e-01  
 11  +2.3847e-01  +2.6097e-01  2.25e-02  5.28e-05  4.21e-03  8.18e-06  1.95e-04  7.42e-01  
 12  +2.3318e-01  +2.3844e-01  5.26e-03  1.22e-05  9.73e-04  1.88e-06  4.75e-05  7.77e-01  
 13  +2.3187e-01  +2.3299e-01  1.12e-03  2.60e-06  2.06e-04  4.08e-07  1.04e-05  8.15e-01  
 14  +2.3151e-01  +2.3153e-01  2.49e-05  5.77e-08  4.57e-06  9.71e-09  2.33e-07  9.90e-01  
 15  +2.3150e-01  +2.3150e-01  2.49e-07  5.77e-10  4.57e-08  9.71e-11  2.33e-09  9.90e-01  
 16  +2.3150e-01  +2.3150e-01  2.49e-09  5.77e-12  4.57e-10  9.71e-13  2.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.4091ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:21 PM: Optimal value: 2.315e-01
(CVXPY) Oct 06 04:25:21 PM: Compilation took 1.661e-02 seconds
(CVXPY) Oct 06 04:25:21 PM: Solver (including time spent in interface) took 3.080e-02 seconds
Iteration: 20, Objective: 0.2315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:22 PM: Your problem has 714 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 714
  constraints   = 1214
  nnz(P)        = 0
  nnz(A)        = 10130
  cones (total) = 1
    : Nonnegative = 1,  numel = 1214

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0227e+02  5.02e+02  9.60e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.4849e-01  +1.1078e+02  1.10e+02  4.38e-01  2.22e+01  3.82e-03  5.82e-01  5.79e-01  
  2  +5.0882e-01  +1.4382e+01  1.39e+01  1.37e-01  9.12e+00  2.16e-02  2.56e-01  9.90e-01  
  3  +4.9677e-01  +2.5042e+00  2.01e+00  1.98e-02  1.55e+00  4.97e-03  4.49e-02  8.62e-01  
  4  +4.6584e-01  +2.2394e+00  1.77e+00  6.28e-03  5.13e-01  1.11e-02  1.40e-02  7.23e-01  
  5  +4.2711e-01  +1.7355e+00  1.31e+00  3.66e-03  2.94e-01  7.66e-03  8.50e-03  4.93e-01  
  6  +4.0084e-01  +1.4748e+00  1.07e+00  2.83e-03  2.25e-01  5.44e-03  6.78e-03  2.84e-01  
  7  +3.3531e-01  +8.2494e-01  4.90e-01  1.34e-03  1.04e-01  1.85e-04  3.65e-03  7.64e-01  
  8  +2.8058e-01  +4.5603e-01  1.75e-01  4.66e-04  3.59e-02  6.24e-05  1.44e-03  6.99e-01  
  9  +2.6724e-01  +3.9972e-01  1.32e-01  3.34e-04  2.63e-02  5.23e-05  1.07e-03  4.10e-01  
 10  +2.5039e-01  +3.2213e-01  7.17e-02  1.73e-04  1.38e-02  2.93e-05  5.83e-04  5.13e-01  
 11  +2.4736e-01  +3.0858e-01  6.12e-02  1.45e-04  1.17e-02  2.60e-05  4.93e-04  2.47e-01  
 12  +2.3871e-01  +2.6784e-01  2.91e-02  6.72e-05  5.47e-03  1.50e-05  2.40e-04  9.90e-01  
 13  +2.3134e-01  +2.3889e-01  7.54e-03  1.71e-05  1.40e-03  3.67e-06  6.45e-05  7.67e-01  
 14  +2.2913e-01  +2.3032e-01  1.18e-03  2.68e-06  2.18e-04  5.52e-07  1.05e-05  8.72e-01  
 15  +2.2871e-01  +2.2875e-01  3.40e-05  7.71e-08  6.25e-06  1.52e-08  3.04e-07  9.83e-01  
 16  +2.2870e-01  +2.2870e-01  3.40e-07  7.71e-10  6.26e-08  1.52e-10  3.04e-09  9.90e-01  
 17  +2.2870e-01  +2.2870e-01  3.41e-09  7.72e-12  6.26e-10  1.52e-12  3.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.3951ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:22 PM: Optimal value: 2.287e-01
(CVXPY) Oct 06 04:25:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:22 PM: Solver (including time spent in interface) took 4.696e-02 seconds
Iteration: 21, Objective: 0.2287
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:22 PM: Your problem has 724 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:22 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 724
  constraints   = 1224
  nnz(P)        = 0
  nnz(A)        = 10241
  cones (total) = 1
    : Nonnegative = 1,  numel = 1224

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0232e+02  5.02e+02  9.60e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.4738e-01  +1.1078e+02  1.10e+02  4.39e-01  2.20e+01  3.83e-03  5.82e-01  5.79e-01  
  2  +5.0764e-01  +1.4469e+01  1.40e+01  1.36e-01  9.01e+00  2.17e-02  2.54e-01  9.90e-01  
  3  +4.9504e-01  +2.5660e+00  2.07e+00  1.95e-02  1.52e+00  5.39e-03  4.41e-02  8.61e-01  
  4  +4.6193e-01  +2.1965e+00  1.73e+00  6.21e-03  5.05e-01  1.11e-02  1.39e-02  7.12e-01  
  5  +4.2426e-01  +1.7295e+00  1.31e+00  3.68e-03  2.95e-01  8.01e-03  8.58e-03  4.76e-01  
  6  +3.9792e-01  +1.4672e+00  1.07e+00  2.83e-03  2.24e-01  5.66e-03  6.81e-03  2.91e-01  
  7  +3.3291e-01  +8.1705e-01  4.84e-01  1.32e-03  1.02e-01  2.37e-04  3.61e-03  7.62e-01  
  8  +2.7834e-01  +4.5165e-01  1.73e-01  4.57e-04  3.52e-02  7.54e-05  1.42e-03  7.09e-01  
  9  +2.6424e-01  +3.9297e-01  1.29e-01  3.22e-04  2.54e-02  5.89e-05  1.02e-03  4.05e-01  
 10  +2.4640e-01  +3.1378e-01  6.74e-02  1.60e-04  1.29e-02  3.11e-05  5.40e-04  5.33e-01  
 11  +2.3668e-01  +2.7092e-01  3.42e-02  7.94e-05  6.46e-03  1.60e-05  2.80e-04  5.57e-01  
 12  +2.3048e-01  +2.4365e-01  1.32e-02  3.00e-05  2.44e-03  6.35e-06  1.11e-04  8.09e-01  
 13  +2.2693e-01  +2.2993e-01  3.00e-03  6.68e-06  5.46e-04  1.42e-06  2.59e-05  8.71e-01  
 14  +2.2594e-01  +2.2632e-01  3.74e-04  8.28e-07  6.75e-05  1.73e-07  3.29e-06  9.09e-01  
 15  +2.2580e-01  +2.2581e-01  4.29e-06  9.52e-09  7.76e-07  1.95e-09  3.80e-08  9.89e-01  
 16  +2.2580e-01  +2.2580e-01  4.30e-08  9.52e-11  7.76e-09  1.95e-11  3.80e-10  9.90e-01  
 17  +2.2580e-01  +2.2580e-01  4.30e-10  9.53e-13  7.77e-11  1.96e-13  3.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.4192ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:22 PM: Optimal value: 2.258e-01
(CVXPY) Oct 06 04:25:22 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:22 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 22, Objective: 0.2258
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:22 PM: Your problem has 734 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:22 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 734
  constraints   = 1234
  nnz(P)        = 0
  nnz(A)        = 10325
  cones (total) = 1
    : Nonnegative = 1,  numel = 1234

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0242e+02  5.02e+02  9.60e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.4492e-01  +1.1096e+02  1.10e+02  4.39e-01  2.19e+01  3.84e-03  5.81e-01  5.79e-01  
  2  +5.0555e-01  +1.4643e+01  1.41e+01  1.36e-01  8.95e+00  2.20e-02  2.54e-01  9.90e-01  
  3  +4.9239e-01  +2.8053e+00  2.31e+00  2.05e-02  1.59e+00  6.18e-03  4.61e-02  8.49e-01  
  4  +4.5634e-01  +2.2222e+00  1.77e+00  6.56e-03  5.30e-01  1.08e-02  1.47e-02  7.00e-01  
  5  +4.1599e-01  +1.7582e+00  1.34e+00  3.74e-03  2.98e-01  8.67e-03  8.76e-03  4.85e-01  
  6  +3.9027e-01  +1.4906e+00  1.10e+00  2.88e-03  2.27e-01  6.16e-03  6.96e-03  2.89e-01  
  7  +3.2905e-01  +8.3347e-01  5.04e-01  1.40e-03  1.07e-01  2.24e-04  3.84e-03  7.71e-01  
  8  +2.7500e-01  +4.4828e-01  1.73e-01  4.64e-04  3.55e-02  6.89e-05  1.44e-03  7.13e-01  
  9  +2.6191e-01  +3.9425e-01  1.32e-01  3.36e-04  2.64e-02  5.60e-05  1.07e-03  3.92e-01  
 10  +2.4448e-01  +3.1640e-01  7.19e-02  1.73e-04  1.39e-02  3.12e-05  5.85e-04  5.19e-01  
 11  +2.3171e-01  +2.5976e-01  2.81e-02  6.50e-05  5.28e-03  1.25e-05  2.33e-04  6.93e-01  
 12  +2.2742e-01  +2.4092e-01  1.35e-02  3.09e-05  2.51e-03  6.26e-06  1.15e-04  7.33e-01  
 13  +2.2416e-01  +2.2775e-01  3.59e-03  8.22e-06  6.65e-04  1.62e-06  3.17e-05  7.50e-01  
 14  +2.2333e-01  +2.2441e-01  1.08e-03  2.45e-06  1.98e-04  4.99e-07  9.73e-06  9.90e-01  
 15  +2.2297e-01  +2.2313e-01  1.63e-04  3.67e-07  2.97e-05  7.45e-08  1.48e-06  8.86e-01  
 16  +2.2290e-01  +2.2291e-01  4.01e-06  9.01e-09  7.30e-07  1.82e-09  3.66e-08  9.85e-01  
 17  +2.2290e-01  +2.2290e-01  4.02e-08  9.03e-11  7.32e-09  1.82e-11  3.67e-10  9.90e-01  
 18  +2.2290e-01  +2.2290e-01  4.06e-10  9.12e-13  7.39e-11  1.85e-13  3.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.9843ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:22 PM: Optimal value: 2.229e-01
(CVXPY) Oct 06 04:25:22 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:22 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 23, Objective: 0.2229
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:22 PM: Your problem has 744 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:22 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 744
  constraints   = 1244
  nnz(P)        = 0
  nnz(A)        = 10407
  cones (total) = 1
    : Nonnegative = 1,  numel = 1244

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0233e+02  5.02e+02  9.60e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.4403e-01  +1.1093e+02  1.10e+02  4.39e-01  2.18e+01  3.84e-03  5.81e-01  5.79e-01  
  2  +5.0485e-01  +1.4711e+01  1.42e+01  1.35e-01  8.85e+00  2.21e-02  2.52e-01  9.90e-01  
  3  +4.9109e-01  +2.8883e+00  2.40e+00  2.06e-02  1.60e+00  6.53e-03  4.63e-02  8.48e-01  
  4  +4.5258e-01  +2.2391e+00  1.79e+00  6.48e-03  5.22e-01  1.11e-02  1.46e-02  7.01e-01  
  5  +4.1124e-01  +1.7853e+00  1.37e+00  3.70e-03  2.94e-01  9.37e-03  8.68e-03  4.71e-01  
  6  +3.7315e-01  +1.3387e+00  9.66e-01  2.53e-03  1.98e-01  4.52e-03  6.28e-03  4.14e-01  
  7  +3.1021e-01  +6.9593e-01  3.86e-01  1.05e-03  7.97e-02  8.05e-04  2.96e-03  6.61e-01  
  8  +2.7768e-01  +5.0632e-01  2.29e-01  6.01e-04  4.63e-02  4.31e-04  1.83e-03  4.67e-01  
  9  +2.5181e-01  +3.7309e-01  1.21e-01  3.00e-04  2.36e-02  2.07e-04  9.87e-04  5.45e-01  
 10  +2.3660e-01  +2.9914e-01  6.25e-02  1.50e-04  1.19e-02  9.42e-05  5.26e-04  5.47e-01  
 11  +2.2449e-01  +2.4170e-01  1.72e-02  4.06e-05  3.23e-03  2.32e-05  1.53e-04  7.32e-01  
 12  +2.2028e-01  +2.2207e-01  1.79e-03  4.24e-06  3.34e-04  8.71e-07  1.69e-05  9.80e-01  
 13  +2.1965e-01  +2.1971e-01  5.51e-05  1.31e-07  1.03e-05  2.34e-08  5.35e-07  9.80e-01  
 14  +2.1963e-01  +2.1963e-01  5.54e-07  1.32e-09  1.03e-07  2.35e-10  5.38e-09  9.90e-01  
 15  +2.1963e-01  +2.1963e-01  5.54e-09  1.32e-11  1.03e-09  2.35e-12  5.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.963ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:22 PM: Optimal value: 2.196e-01
(CVXPY) Oct 06 04:25:22 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:25:22 PM: Solver (including time spent in interface) took 3.123e-02 seconds
Iteration: 24, Objective: 0.2196
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:23 PM: Your problem has 754 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 754
  constraints   = 1254
  nnz(P)        = 0
  nnz(A)        = 10456
  cones (total) = 1
    : Nonnegative = 1,  numel = 1254

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0233e+02  5.02e+02  9.61e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.4294e-01  +1.1095e+02  1.10e+02  4.39e-01  2.16e+01  3.84e-03  5.80e-01  5.79e-01  
  2  +5.0376e-01  +1.4783e+01  1.43e+01  1.35e-01  8.76e+00  2.22e-02  2.52e-01  9.90e-01  
  3  +4.8941e-01  +2.8941e+00  2.40e+00  2.00e-02  1.54e+00  6.76e-03  4.50e-02  8.53e-01  
  4  +4.4880e-01  +2.1916e+00  1.74e+00  6.27e-03  5.02e-01  1.10e-02  1.42e-02  7.02e-01  
  5  +4.0983e-01  +1.7965e+00  1.39e+00  3.79e-03  3.00e-01  9.27e-03  8.91e-03  4.47e-01  
  6  +3.7566e-01  +1.4065e+00  1.03e+00  2.70e-03  2.10e-01  5.26e-03  6.65e-03  3.71e-01  
  7  +3.1081e-01  +7.1613e-01  4.05e-01  1.11e-03  8.39e-02  6.46e-04  3.13e-03  7.11e-01  
  8  +2.6596e-01  +4.4608e-01  1.80e-01  4.71e-04  3.60e-02  2.36e-04  1.49e-03  6.46e-01  
  9  +2.5037e-01  +3.7276e-01  1.22e-01  3.05e-04  2.38e-02  1.48e-04  1.01e-03  4.28e-01  
 10  +2.3152e-01  +2.8279e-01  5.13e-02  1.23e-04  9.65e-03  5.46e-05  4.38e-04  6.31e-01  
 11  +2.1981e-01  +2.2858e-01  8.77e-03  2.06e-05  1.61e-03  6.91e-06  7.99e-05  8.76e-01  
 12  +2.1742e-01  +2.1865e-01  1.23e-03  2.89e-06  2.24e-04  7.94e-07  1.19e-05  8.89e-01  
 13  +2.1701e-01  +2.1704e-01  2.59e-05  6.09e-08  4.71e-06  1.45e-08  2.54e-07  9.82e-01  
 14  +2.1700e-01  +2.1700e-01  2.59e-07  6.09e-10  4.71e-08  1.45e-10  2.54e-09  9.90e-01  
 15  +2.1700e-01  +2.1700e-01  2.59e-09  6.09e-12  4.71e-10  1.45e-12  2.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.0293ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:23 PM: Optimal value: 2.170e-01
(CVXPY) Oct 06 04:25:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:23 PM: Solver (including time spent in interface) took 3.119e-02 seconds
Iteration: 25, Objective: 0.2170
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:23 PM: Your problem has 758 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:23 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 758
  constraints   = 1258
  nnz(P)        = 0
  nnz(A)        = 10509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1258

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0236e+02  5.02e+02  9.61e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.4242e-01  +1.1097e+02  1.10e+02  4.39e-01  2.16e+01  3.85e-03  5.80e-01  5.79e-01  
  2  +5.0347e-01  +1.4804e+01  1.43e+01  1.34e-01  8.72e+00  2.22e-02  2.51e-01  9.90e-01  
  3  +4.8897e-01  +3.0028e+00  2.51e+00  2.07e-02  1.59e+00  6.97e-03  4.65e-02  8.48e-01  
  4  +4.4809e-01  +2.2415e+00  1.79e+00  6.49e-03  5.19e-01  1.09e-02  1.47e-02  7.00e-01  
  5  +4.0949e-01  +1.7988e+00  1.39e+00  3.87e-03  3.06e-01  9.10e-03  9.12e-03  4.40e-01  
  6  +3.8323e-01  +1.5211e+00  1.14e+00  2.97e-03  2.32e-01  6.60e-03  7.21e-03  2.86e-01  
  7  +3.2146e-01  +8.2580e-01  5.04e-01  1.41e-03  1.07e-01  2.25e-04  3.91e-03  7.83e-01  
  8  +2.6803e-01  +4.4241e-01  1.74e-01  4.69e-04  3.54e-02  7.09e-05  1.48e-03  7.16e-01  
  9  +2.5478e-01  +3.8614e-01  1.31e-01  3.37e-04  2.60e-02  5.57e-05  1.09e-03  3.67e-01  
 10  +2.3649e-01  +3.0368e-01  6.72e-02  1.63e-04  1.28e-02  2.88e-05  5.68e-04  5.50e-01  
 11  +2.2268e-01  +2.4102e-01  1.83e-02  4.33e-05  3.40e-03  7.66e-06  1.63e-04  7.72e-01  
 12  +2.1831e-01  +2.2233e-01  4.03e-03  9.44e-06  7.35e-04  1.61e-06  3.77e-05  8.03e-01  
 13  +2.1720e-01  +2.1778e-01  5.85e-04  1.38e-06  1.06e-04  2.26e-07  5.69e-06  8.70e-01  
 14  +2.1701e-01  +2.1702e-01  1.81e-05  4.26e-08  3.29e-06  7.29e-09  1.78e-07  9.90e-01  
 15  +2.1700e-01  +2.1700e-01  1.81e-07  4.26e-10  3.29e-08  7.29e-11  1.78e-09  9.90e-01  
 16  +2.1700e-01  +2.1700e-01  1.81e-09  4.26e-12  3.29e-10  7.30e-13  1.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.0042ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:23 PM: Optimal value: 2.170e-01
(CVXPY) Oct 06 04:25:23 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:23 PM: Solver (including time spent in interface) took 4.686e-02 seconds
Iteration: 26, Objective: 0.2170
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:23 PM: Your problem has 763 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:23 PM: Finished problem compilation (took 8.414e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 763
  constraints   = 1263
  nnz(P)        = 0
  nnz(A)        = 10563
  cones (total) = 1
    : Nonnegative = 1,  numel = 1263

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0236e+02  5.02e+02  9.61e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.4216e-01  +1.1095e+02  1.10e+02  4.39e-01  2.15e+01  3.85e-03  5.80e-01  5.80e-01  
  2  +5.0322e-01  +1.4811e+01  1.43e+01  1.34e-01  8.67e+00  2.22e-02  2.51e-01  9.90e-01  
  3  +4.8852e-01  +3.0432e+00  2.55e+00  2.09e-02  1.60e+00  7.09e-03  4.68e-02  8.46e-01  
  4  +4.4685e-01  +2.2484e+00  1.80e+00  6.50e-03  5.18e-01  1.10e-02  1.47e-02  7.02e-01  
  5  +4.0749e-01  +1.8065e+00  1.40e+00  3.85e-03  3.03e-01  9.23e-03  9.08e-03  4.44e-01  
  6  +3.8100e-01  +1.5162e+00  1.14e+00  2.95e-03  2.30e-01  6.55e-03  7.19e-03  2.86e-01  
  7  +3.1811e-01  +7.9889e-01  4.81e-01  1.35e-03  1.01e-01  1.80e-04  3.76e-03  7.96e-01  
  8  +2.6656e-01  +4.3851e-01  1.72e-01  4.63e-04  3.49e-02  6.41e-05  1.46e-03  7.10e-01  
  9  +2.5407e-01  +3.8460e-01  1.31e-01  3.36e-04  2.58e-02  5.13e-05  1.09e-03  3.55e-01  
 10  +2.3580e-01  +3.0109e-01  6.53e-02  1.59e-04  1.24e-02  2.62e-05  5.56e-04  5.63e-01  
 11  +2.2464e-01  +2.5013e-01  2.55e-02  6.07e-05  4.75e-03  1.01e-05  2.26e-04  6.32e-01  
 12  +2.1902e-01  +2.2526e-01  6.24e-03  1.47e-05  1.14e-03  2.48e-06  5.80e-05  8.16e-01  
 13  +2.1730e-01  +2.1817e-01  8.72e-04  2.05e-06  1.59e-04  3.31e-07  8.46e-06  8.80e-01  
 14  +2.1703e-01  +2.1713e-01  9.19e-05  2.17e-07  1.67e-05  3.82e-08  9.06e-07  9.90e-01  
 15  +2.1700e-01  +2.1700e-01  9.57e-07  2.26e-09  1.74e-07  3.97e-10  9.45e-09  9.90e-01  
 16  +2.1700e-01  +2.1700e-01  9.59e-09  2.26e-11  1.74e-09  3.98e-12  9.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.516ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:23 PM: Optimal value: 2.170e-01
(CVXPY) Oct 06 04:25:23 PM: Compilation took 8.414e-03 seconds
(CVXPY) Oct 06 04:25:23 PM: Solver (including time spent in interface) took 3.843e-02 seconds
Iteration: 27, Objective: 0.2170
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:23 PM: Your problem has 773 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:23 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 773
  constraints   = 1273
  nnz(P)        = 0
  nnz(A)        = 10618
  cones (total) = 1
    : Nonnegative = 1,  numel = 1273

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9924e-01  +5.0229e+02  5.02e+02  9.61e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.4077e-01  +1.1100e+02  1.10e+02  4.40e-01  2.14e+01  3.85e-03  5.80e-01  5.79e-01  
  2  +5.0198e-01  +1.4939e+01  1.44e+01  1.34e-01  8.62e+00  2.24e-02  2.50e-01  9.90e-01  
  3  +4.8630e-01  +3.0686e+00  2.58e+00  2.03e-02  1.55e+00  7.42e-03  4.55e-02  8.53e-01  
  4  +4.4331e-01  +2.2304e+00  1.79e+00  6.46e-03  5.13e-01  1.08e-02  1.47e-02  6.95e-01  
  5  +4.0223e-01  +1.8015e+00  1.40e+00  3.78e-03  2.97e-01  9.42e-03  8.93e-03  4.46e-01  
  6  +3.4475e-01  +1.0863e+00  7.42e-01  2.00e-03  1.52e-01  1.22e-03  5.17e-03  6.84e-01  
  7  +2.8091e-01  +5.1785e-01  2.37e-01  6.53e-04  4.87e-02  2.40e-04  1.96e-03  6.92e-01  
  8  +2.6325e-01  +4.4330e-01  1.80e-01  4.69e-04  3.59e-02  1.75e-04  1.46e-03  3.81e-01  
  9  +2.4207e-01  +3.4276e-01  1.01e-01  2.48e-04  1.93e-02  9.21e-05  8.32e-04  5.23e-01  
 10  +2.2421e-01  +2.5785e-01  3.36e-02  8.00e-05  6.25e-03  2.36e-05  2.94e-04  8.03e-01  
 11  +2.1568e-01  +2.2014e-01  4.46e-03  1.05e-05  8.15e-04  2.41e-06  4.16e-05  9.07e-01  
 12  +2.1449e-01  +2.1532e-01  8.33e-04  1.97e-06  1.52e-04  4.14e-07  8.15e-06  8.43e-01  
 13  +2.1422e-01  +2.1427e-01  5.08e-05  1.20e-07  9.26e-06  2.16e-08  5.04e-07  9.90e-01  
 14  +2.1420e-01  +2.1420e-01  5.12e-07  1.21e-09  9.35e-08  2.17e-10  5.09e-09  9.90e-01  
 15  +2.1420e-01  +2.1420e-01  5.13e-09  1.22e-11  9.36e-10  2.18e-12  5.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.1066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:23 PM: Optimal value: 2.142e-01
(CVXPY) Oct 06 04:25:23 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:23 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 28, Objective: 0.2142
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:24 PM: Your problem has 783 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:24 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 783
  constraints   = 1283
  nnz(P)        = 0
  nnz(A)        = 10679
  cones (total) = 1
    : Nonnegative = 1,  numel = 1283

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +5.0230e+02  5.02e+02  9.61e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.3865e-01  +1.1101e+02  1.10e+02  4.40e-01  2.12e+01  3.86e-03  5.79e-01  5.80e-01  
  2  +4.9989e-01  +1.5101e+01  1.46e+01  1.32e-01  8.53e+00  2.27e-02  2.48e-01  9.90e-01  
  3  +4.8248e-01  +3.1160e+00  2.63e+00  1.94e-02  1.49e+00  8.00e-03  4.35e-02  8.58e-01  
  4  +4.3491e-01  +2.1951e+00  1.76e+00  6.16e-03  4.87e-01  1.08e-02  1.41e-02  6.98e-01  
  5  +3.9462e-01  +1.7842e+00  1.39e+00  3.76e-03  2.94e-01  9.15e-03  8.91e-03  4.30e-01  
  6  +3.4452e-01  +1.0585e+00  7.14e-01  2.20e-03  1.66e-01  7.27e-05  5.80e-03  6.82e-01  
  7  +2.7543e-01  +5.0247e-01  2.27e-01  6.39e-04  4.75e-02  3.96e-05  1.92e-03  7.43e-01  
  8  +2.6081e-01  +4.4200e-01  1.81e-01  4.86e-04  3.70e-02  4.14e-05  1.50e-03  3.37e-01  
  9  +2.4033e-01  +3.4549e-01  1.05e-01  2.67e-04  2.08e-02  2.89e-05  8.84e-04  5.06e-01  
 10  +2.2293e-01  +2.6235e-01  3.94e-02  9.67e-05  7.57e-03  1.44e-05  3.49e-04  7.85e-01  
 11  +2.1349e-01  +2.1987e-01  6.38e-03  1.53e-05  1.19e-03  2.31e-06  6.00e-05  8.82e-01  
 12  +2.1177e-01  +2.1287e-01  1.09e-03  2.63e-06  2.03e-04  3.88e-07  1.08e-05  8.56e-01  
 13  +2.1144e-01  +2.1155e-01  1.07e-04  2.58e-07  1.98e-05  4.32e-08  1.08e-06  9.90e-01  
 14  +2.1140e-01  +2.1140e-01  1.12e-06  2.69e-09  2.07e-07  4.50e-10  1.13e-08  9.90e-01  
 15  +2.1140e-01  +2.1140e-01  1.12e-08  2.69e-11  2.07e-09  4.51e-12  1.13e-10  9.90e-01  
 16  +2.1140e-01  +2.1140e-01  1.12e-10  2.70e-13  2.07e-11  4.52e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.8121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:24 PM: Optimal value: 2.114e-01
(CVXPY) Oct 06 04:25:24 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:24 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 29, Objective: 0.2114
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:24 PM: Your problem has 793 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:24 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 793
  constraints   = 1293
  nnz(P)        = 0
  nnz(A)        = 10739
  cones (total) = 1
    : Nonnegative = 1,  numel = 1293

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0232e+02  5.02e+02  9.61e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.3614e-01  +1.1113e+02  1.11e+02  4.40e-01  2.11e+01  3.86e-03  5.78e-01  5.80e-01  
  2  +4.9827e-01  +1.5324e+01  1.48e+01  1.32e-01  8.43e+00  2.30e-02  2.47e-01  9.90e-01  
  3  +4.7912e-01  +3.0718e+00  2.59e+00  1.81e-02  1.38e+00  8.44e-03  4.06e-02  8.65e-01  
  4  +4.2570e-01  +2.1456e+00  1.72e+00  5.64e-03  4.43e-01  1.15e-02  1.29e-02  7.05e-01  
  5  +3.8901e-01  +1.7589e+00  1.37e+00  3.73e-03  2.91e-01  9.37e-03  8.81e-03  3.65e-01  
  6  +3.2672e-01  +9.8941e-01  6.63e-01  1.97e-03  1.48e-01  7.62e-05  5.28e-03  7.79e-01  
  7  +2.6934e-01  +4.9251e-01  2.23e-01  6.45e-04  4.78e-02  3.65e-05  1.97e-03  6.95e-01  
  8  +2.5141e-01  +4.1063e-01  1.59e-01  4.33e-04  3.29e-02  3.46e-05  1.37e-03  4.11e-01  
  9  +2.3409e-01  +3.2737e-01  9.33e-02  2.40e-04  1.86e-02  2.47e-05  8.06e-04  5.13e-01  
 10  +2.1828e-01  +2.5123e-01  3.29e-02  8.19e-05  6.36e-03  1.05e-05  2.97e-04  7.40e-01  
 11  +2.1207e-01  +2.2320e-01  1.11e-02  2.72e-05  2.10e-03  3.62e-06  1.04e-04  6.86e-01  
 12  +2.0943e-01  +2.1160e-01  2.17e-03  5.26e-06  4.03e-04  7.36e-07  2.12e-05  8.58e-01  
 13  +2.0880e-01  +2.0909e-01  2.86e-04  6.89e-07  5.24e-05  1.03e-07  2.89e-06  9.23e-01  
 14  +2.0870e-01  +2.0872e-01  1.28e-05  3.06e-08  2.33e-06  4.68e-09  1.30e-07  9.60e-01  
 15  +2.0870e-01  +2.0870e-01  1.28e-07  3.08e-10  2.34e-08  4.70e-11  1.30e-09  9.90e-01  
 16  +2.0870e-01  +2.0870e-01  1.28e-09  3.08e-12  2.34e-10  4.70e-13  1.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.1987ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:24 PM: Optimal value: 2.087e-01
(CVXPY) Oct 06 04:25:24 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:25:24 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 30, Objective: 0.2087
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:24 PM: Your problem has 803 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:24 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 803
  constraints   = 1303
  nnz(P)        = 0
  nnz(A)        = 10807
  cones (total) = 1
    : Nonnegative = 1,  numel = 1303

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9919e-01  +5.0230e+02  5.02e+02  9.61e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.3482e-01  +1.1115e+02  1.11e+02  4.40e-01  2.10e+01  3.87e-03  5.78e-01  5.80e-01  
  2  +4.9700e-01  +1.5382e+01  1.49e+01  1.31e-01  8.35e+00  2.31e-02  2.46e-01  9.90e-01  
  3  +4.7757e-01  +3.4503e+00  2.97e+00  2.04e-02  1.54e+00  9.06e-03  4.55e-02  8.43e-01  
  4  +4.2367e-01  +2.2769e+00  1.85e+00  6.16e-03  4.82e-01  1.14e-02  1.41e-02  7.07e-01  
  5  +3.8360e-01  +1.8081e+00  1.42e+00  3.88e-03  3.00e-01  8.95e-03  9.20e-03  4.03e-01  
  6  +3.3047e-01  +1.0887e+00  7.58e-01  2.32e-03  1.73e-01  7.14e-05  6.17e-03  7.84e-01  
  7  +2.7197e-01  +5.1609e-01  2.44e-01  7.13e-04  5.24e-02  3.46e-05  2.15e-03  7.12e-01  
  8  +2.5111e-01  +4.1882e-01  1.68e-01  4.59e-04  3.47e-02  3.51e-05  1.45e-03  4.53e-01  
  9  +2.3353e-01  +3.3090e-01  9.74e-02  2.54e-04  1.95e-02  2.43e-05  8.47e-04  4.96e-01  
 10  +2.2006e-01  +2.6498e-01  4.49e-02  1.13e-04  8.72e-03  1.24e-05  4.00e-04  5.86e-01  
 11  +2.1459e-01  +2.3751e-01  2.29e-02  5.70e-05  4.38e-03  8.60e-06  2.10e-04  7.69e-01  
 12  +2.1060e-01  +2.2089e-01  1.03e-02  2.48e-05  1.92e-03  4.03e-06  9.50e-05  6.38e-01  
 13  +2.0894e-01  +2.1419e-01  5.24e-03  1.24e-05  9.60e-04  2.14e-06  4.91e-05  6.62e-01  
 14  +2.0721e-01  +2.0748e-01  2.71e-04  6.37e-07  4.90e-05  1.01e-07  2.61e-06  9.82e-01  
 15  +2.0710e-01  +2.0710e-01  3.12e-06  7.35e-09  5.65e-07  1.15e-09  3.03e-08  9.89e-01  
 16  +2.0710e-01  +2.0710e-01  3.13e-08  7.36e-11  5.66e-09  1.15e-11  3.03e-10  9.90e-01  
 17  +2.0710e-01  +2.0710e-01  3.14e-10  7.38e-13  5.67e-11  1.15e-13  3.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.9741ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:24 PM: Optimal value: 2.071e-01
(CVXPY) Oct 06 04:25:24 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:24 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 31, Objective: 0.2071
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:24 PM: Your problem has 813 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:24 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 813
  constraints   = 1313
  nnz(P)        = 0
  nnz(A)        = 10874
  cones (total) = 1
    : Nonnegative = 1,  numel = 1313

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0234e+02  5.02e+02  9.61e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.3269e-01  +1.1132e+02  1.11e+02  4.40e-01  2.09e+01  3.88e-03  5.77e-01  5.79e-01  
  2  +4.9532e-01  +1.5490e+01  1.50e+01  1.30e-01  8.28e+00  2.32e-02  2.45e-01  9.90e-01  
  3  +4.7425e-01  +3.2471e+00  2.77e+00  1.84e-02  1.39e+00  9.01e-03  4.13e-02  8.60e-01  
  4  +4.1814e-01  +2.0980e+00  1.68e+00  5.65e-03  4.39e-01  1.03e-02  1.31e-02  7.06e-01  
  5  +3.8225e-01  +1.7367e+00  1.35e+00  3.79e-03  2.92e-01  8.37e-03  9.04e-03  3.70e-01  
  6  +3.2804e-01  +1.0645e+00  7.37e-01  2.29e-03  1.70e-01  6.75e-05  6.13e-03  7.79e-01  
  7  +2.7097e-01  +5.1468e-01  2.44e-01  7.21e-04  5.28e-02  3.28e-05  2.18e-03  7.01e-01  
  8  +2.5028e-01  +4.1629e-01  1.66e-01  4.59e-04  3.46e-02  3.30e-05  1.45e-03  4.53e-01  
  9  +2.3331e-01  +3.3106e-01  9.78e-02  2.58e-04  1.97e-02  2.36e-05  8.61e-04  4.95e-01  
 10  +2.2256e-01  +2.7809e-01  5.55e-02  1.43e-04  1.09e-02  1.39e-05  4.98e-04  4.50e-01  
 11  +2.1558e-01  +2.4431e-01  2.87e-02  7.22e-05  5.55e-03  7.94e-06  2.62e-04  5.39e-01  
 12  +2.1181e-01  +2.2503e-01  1.32e-02  3.24e-05  2.50e-03  5.78e-06  1.22e-04  9.52e-01  
 13  +2.0919e-01  +2.1497e-01  5.78e-03  1.38e-05  1.06e-03  2.53e-06  5.42e-05  7.07e-01  
 14  +2.0743e-01  +2.0826e-01  8.32e-04  1.97e-06  1.51e-04  3.50e-07  8.03e-06  9.90e-01  
 15  +2.0711e-01  +2.0712e-01  1.34e-05  3.16e-08  2.42e-06  5.27e-09  1.31e-07  9.84e-01  
 16  +2.0710e-01  +2.0710e-01  1.34e-07  3.16e-10  2.42e-08  5.27e-11  1.31e-09  9.90e-01  
 17  +2.0710e-01  +2.0710e-01  1.34e-09  3.17e-12  2.43e-10  5.30e-13  1.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.0916ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:24 PM: Optimal value: 2.071e-01
(CVXPY) Oct 06 04:25:24 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:25:24 PM: Solver (including time spent in interface) took 4.685e-02 seconds
Iteration: 32, Objective: 0.2071
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:25 PM: Your problem has 818 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:25 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 818
  constraints   = 1318
  nnz(P)        = 0
  nnz(A)        = 10933
  cones (total) = 1
    : Nonnegative = 1,  numel = 1318

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0235e+02  5.02e+02  9.62e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.3210e-01  +1.1135e+02  1.11e+02  4.40e-01  2.08e+01  3.88e-03  5.77e-01  5.79e-01  
  2  +4.9481e-01  +1.5511e+01  1.50e+01  1.30e-01  8.23e+00  2.33e-02  2.45e-01  9.90e-01  
  3  +4.7328e-01  +3.3664e+00  2.89e+00  1.90e-02  1.44e+00  9.24e-03  4.28e-02  8.51e-01  
  4  +4.1540e-01  +2.0863e+00  1.67e+00  5.62e-03  4.36e-01  1.01e-02  1.31e-02  7.19e-01  
  5  +3.7880e-01  +1.7400e+00  1.36e+00  3.77e-03  2.90e-01  8.28e-03  9.03e-03  3.74e-01  
  6  +3.2802e-01  +1.0819e+00  7.54e-01  2.38e-03  1.76e-01  6.52e-05  6.39e-03  7.72e-01  
  7  +2.7042e-01  +5.1696e-01  2.47e-01  7.32e-04  5.35e-02  3.06e-05  2.22e-03  7.03e-01  
  8  +2.5009e-01  +4.2011e-01  1.70e-01  4.72e-04  3.55e-02  3.23e-05  1.50e-03  4.47e-01  
  9  +2.3354e-01  +3.3573e-01  1.02e-01  2.72e-04  2.07e-02  2.35e-05  9.13e-04  4.76e-01  
 10  +2.2294e-01  +2.8201e-01  5.91e-02  1.54e-04  1.17e-02  1.41e-05  5.41e-04  4.37e-01  
 11  +2.1286e-01  +2.3138e-01  1.85e-02  4.74e-05  3.61e-03  5.11e-06  1.76e-04  7.39e-01  
 12  +2.0983e-01  +2.1799e-01  8.16e-03  2.00e-05  1.54e-03  2.64e-06  7.67e-05  6.74e-01  
 13  +2.0856e-01  +2.1275e-01  4.19e-03  1.01e-05  7.76e-04  1.51e-06  3.99e-05  6.90e-01  
 14  +2.0723e-01  +2.0760e-01  3.70e-04  8.76e-07  6.73e-05  1.28e-07  3.58e-06  9.26e-01  
 15  +2.0710e-01  +2.0711e-01  4.34e-06  1.03e-08  7.88e-07  1.47e-09  4.23e-08  9.88e-01  
 16  +2.0710e-01  +2.0710e-01  4.35e-08  1.03e-10  7.89e-09  1.47e-11  4.23e-10  9.90e-01  
 17  +2.0710e-01  +2.0710e-01  4.36e-10  1.03e-12  7.92e-11  1.48e-13  4.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.144ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:25 PM: Optimal value: 2.071e-01
(CVXPY) Oct 06 04:25:25 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:25:25 PM: Solver (including time spent in interface) took 4.688e-02 seconds
FULL MODEL:
  Accruacy: 0.769
  Our objective: 0.538

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)                                                                   <-- (term's our objective: 0.116)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.022)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                                             <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0)                                             <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.022)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.022)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.022)
 OR (x1 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.014)
 OR (x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 13.100775003433228
Best over terms:
  Our final objective: 0.11599999999999999
    Its accruacy: 0.558
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.11599999999999999
  Highest accruacy: 0.558
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

