Command:
python test_script.py -s constant_subclass -d 10 -n 5000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15599999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 10.

Computed total variation: 0.4044
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:15 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:15 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 32521
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5008e+03  2.50e+03  9.80e-01  8.55e+01  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4952e+02  5.49e+02  4.39e-01  5.64e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2923e-01  +6.0317e+01  5.98e+01  1.72e-01  2.83e+01  1.78e-02  2.89e-01  9.56e-01  
  3  +5.0810e-01  +1.5617e+01  1.51e+01  1.06e-01  1.73e+01  4.99e-05  2.61e-01  3.61e-01  
  4  +5.0086e-01  +1.5851e+00  1.08e+00  1.06e-02  1.80e+00  6.75e-06  1.33e-01  7.66e-01  
  5  +5.0012e-01  +6.8250e-01  1.82e-01  1.73e-03  2.97e-01  1.50e-05  3.43e-02  9.90e-01  
  6  +4.9999e-01  +7.2174e-01  2.22e-01  1.34e-03  2.31e-01  9.45e-05  5.32e-03  8.77e-01  
  7  +4.9835e-01  +7.1473e-01  2.16e-01  1.89e-04  3.28e-02  8.22e-04  5.62e-04  8.95e-01  
  8  +4.9453e-01  +6.7635e-01  1.82e-01  1.05e-04  1.83e-02  8.85e-04  3.16e-04  5.69e-01  
  9  +4.8702e-01  +6.2209e-01  1.35e-01  8.25e-05  1.43e-02  3.88e-04  2.63e-04  3.15e-01  
 10  +4.7742e-01  +5.6795e-01  9.05e-02  4.84e-05  8.36e-03  1.50e-04  1.65e-04  5.67e-01  
 11  +4.6892e-01  +5.2469e-01  5.58e-02  2.71e-05  4.67e-03  1.54e-06  9.96e-05  8.90e-01  
 12  +4.5840e-01  +4.7799e-01  1.96e-02  8.46e-06  1.46e-03  1.20e-06  3.39e-05  8.62e-01  
 13  +4.5351e-01  +4.5712e-01  3.62e-03  1.51e-06  2.60e-04  3.26e-07  6.33e-06  9.90e-01  
 14  +4.5232e-01  +4.5236e-01  4.84e-05  2.00e-08  3.46e-06  4.27e-09  8.55e-08  9.87e-01  
 15  +4.5230e-01  +4.5230e-01  4.84e-07  2.00e-10  3.46e-08  4.27e-11  8.55e-10  9.90e-01  
 16  +4.5230e-01  +4.5230e-01  4.84e-09  2.00e-12  3.46e-10  4.28e-13  8.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.0734ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:15 PM: Optimal value: 4.523e-01
(CVXPY) Oct 06 04:26:15 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:26:15 PM: Solver (including time spent in interface) took 9.367e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:15 PM: Your problem has 2531 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:15 PM: Finished problem compilation (took 1.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2531
  constraints   = 5031
  nnz(P)        = 0
  nnz(A)        = 36998
  cones (total) = 1
    : Nonnegative = 1,  numel = 5031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5018e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7811e-01  +5.4991e+02  5.49e+02  4.40e-01  5.81e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2897e-01  +6.0113e+01  5.96e+01  1.72e-01  2.92e+01  1.79e-02  2.90e-01  9.59e-01  
  3  +5.0797e-01  +1.5481e+01  1.50e+01  1.06e-01  1.77e+01  5.02e-05  2.60e-01  3.75e-01  
  4  +5.0125e-01  +2.3983e+00  1.90e+00  1.85e-02  3.19e+00  9.73e-06  1.66e-01  5.50e-01  
  5  +5.0013e-01  +9.7848e-01  4.78e-01  4.54e-03  7.99e-01  8.75e-06  8.97e-02  7.08e-01  
  6  +4.9997e-01  +8.1448e-01  3.15e-01  2.92e-03  5.14e-01  9.73e-06  3.10e-02  7.79e-01  
  7  +4.9597e-01  +7.1613e-01  2.20e-01  3.94e-04  7.08e-02  1.39e-04  1.16e-03  9.79e-01  
  8  +4.9193e-01  +6.8974e-01  1.98e-01  2.15e-04  3.86e-02  2.06e-04  6.20e-04  4.78e-01  
  9  +4.8810e-01  +6.6871e-01  1.81e-01  1.40e-04  2.52e-02  1.75e-04  3.99e-04  6.02e-01  
 10  +4.8366e-01  +6.4662e-01  1.63e-01  9.88e-05  1.77e-02  1.84e-04  2.79e-04  3.37e-01  
 11  +4.8319e-01  +6.4580e-01  1.63e-01  9.41e-05  1.69e-02  1.20e-04  2.68e-04  3.59e-01  
 12  +4.8290e-01  +6.3915e-01  1.56e-01  9.17e-05  1.64e-02  1.01e-04  2.67e-04  8.02e-02  
 13  +4.8094e-01  +6.4903e-01  1.68e-01  7.82e-05  1.40e-02  2.66e-05  2.20e-04  9.19e-01  
 14  +4.7351e-01  +6.1680e-01  1.43e-01  5.76e-05  1.03e-02  2.33e-05  1.63e-04  3.48e-01  
 15  +4.6037e-01  +5.6160e-01  1.01e-01  3.70e-05  6.60e-03  1.29e-05  1.08e-04  6.81e-01  
 16  +4.3224e-01  +4.5555e-01  2.33e-02  7.49e-06  1.33e-03  2.11e-06  2.33e-05  9.90e-01  
 17  +4.2230e-01  +4.2271e-01  4.08e-04  1.29e-07  2.29e-05  2.36e-08  4.15e-07  9.87e-01  
 18  +4.2210e-01  +4.2211e-01  4.09e-06  1.29e-09  2.29e-07  2.36e-10  4.15e-09  9.90e-01  
 19  +4.2210e-01  +4.2210e-01  4.09e-08  1.29e-11  2.29e-09  2.37e-12  4.16e-11  9.90e-01  
 20  +4.2210e-01  +4.2210e-01  4.09e-10  1.29e-13  2.29e-11  2.38e-14  4.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.5316ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:15 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 04:26:15 PM: Compilation took 1.565e-02 seconds
(CVXPY) Oct 06 04:26:15 PM: Solver (including time spent in interface) took 1.411e-01 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:16 PM: Your problem has 2541 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:16 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2541
  constraints   = 5041
  nnz(P)        = 0
  nnz(A)        = 38008
  cones (total) = 1
    : Nonnegative = 1,  numel = 5041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5017e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7803e-01  +5.4990e+02  5.49e+02  4.41e-01  5.81e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2889e-01  +6.0034e+01  5.95e+01  1.72e-01  2.91e+01  1.79e-02  2.89e-01  9.60e-01  
  3  +5.0794e-01  +1.5448e+01  1.49e+01  1.05e-01  1.77e+01  5.03e-05  2.59e-01  3.79e-01  
  4  +5.0118e-01  +2.2654e+00  1.76e+00  1.72e-02  2.98e+00  9.38e-06  1.60e-01  5.83e-01  
  5  +5.0013e-01  +9.7886e-01  4.79e-01  4.55e-03  8.01e-01  9.41e-06  8.35e-02  7.39e-01  
  6  +4.9993e-01  +8.1814e-01  3.18e-01  2.91e-03  5.14e-01  1.23e-05  2.61e-02  7.76e-01  
  7  +4.9549e-01  +7.5829e-01  2.63e-01  4.34e-04  7.81e-02  1.71e-04  1.26e-03  9.61e-01  
  8  +4.8813e-01  +7.0639e-01  2.18e-01  1.70e-04  3.05e-02  2.97e-04  4.79e-04  6.77e-01  
  9  +4.8758e-01  +7.0215e-01  2.15e-01  1.54e-04  2.77e-02  2.46e-04  4.33e-04  2.77e-01  
 10  +4.8337e-01  +6.8166e-01  1.98e-01  1.16e-04  2.07e-02  2.24e-04  3.24e-04  3.85e-01  
 11  +4.8449e-01  +6.8336e-01  1.99e-01  1.09e-04  1.96e-02  1.20e-04  3.08e-04  4.73e-01  
 12  +4.8039e-01  +6.6399e-01  1.84e-01  9.67e-05  1.73e-02  3.82e-05  2.75e-04  6.69e-01  
 13  +4.6103e-01  +5.7933e-01  1.18e-01  4.60e-05  8.22e-03  1.68e-05  1.34e-04  8.83e-01  
 14  +4.3307e-01  +4.7490e-01  4.18e-02  1.44e-05  2.56e-03  4.24e-06  4.50e-05  8.07e-01  
 15  +4.2905e-01  +4.6090e-01  3.19e-02  1.08e-05  1.91e-03  3.40e-06  3.39e-05  3.28e-01  
 16  +4.2774e-01  +4.5601e-01  2.83e-02  9.37e-06  1.67e-03  3.59e-06  2.96e-05  5.01e-01  
 17  +4.2176e-01  +4.3568e-01  1.39e-02  4.55e-06  8.09e-04  1.89e-06  1.47e-05  6.57e-01  
 18  +4.1683e-01  +4.1918e-01  2.34e-03  7.62e-07  1.36e-04  3.20e-07  2.50e-06  8.51e-01  
 19  +4.1595e-01  +4.1628e-01  3.30e-04  1.07e-07  1.90e-05  4.89e-08  3.53e-07  9.66e-01  
 20  +4.1580e-01  +4.1580e-01  3.39e-06  1.10e-09  1.95e-07  5.03e-10  3.63e-09  9.90e-01  
 21  +4.1580e-01  +4.1580e-01  3.39e-08  1.10e-11  1.95e-09  5.03e-12  3.63e-11  9.90e-01  
 22  +4.1580e-01  +4.1580e-01  3.39e-10  1.10e-13  1.95e-11  5.03e-14  3.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 128.5328ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:16 PM: Optimal value: 4.158e-01
(CVXPY) Oct 06 04:26:16 PM: Compilation took 1.572e-02 seconds
(CVXPY) Oct 06 04:26:16 PM: Solver (including time spent in interface) took 1.412e-01 seconds
Iteration: 3, Objective: 0.4158
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:16 PM: Your problem has 2551 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:16 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2551
  constraints   = 5051
  nnz(P)        = 0
  nnz(A)        = 38918
  cones (total) = 1
    : Nonnegative = 1,  numel = 5051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7783e-01  +5.5000e+02  5.49e+02  4.41e-01  5.81e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2869e-01  +5.9889e+01  5.94e+01  1.72e-01  2.89e+01  1.80e-02  2.89e-01  9.63e-01  
  3  +5.0789e-01  +1.5392e+01  1.49e+01  1.05e-01  1.76e+01  5.06e-05  2.58e-01  3.87e-01  
  4  +5.0085e-01  +1.6461e+00  1.15e+00  1.13e-02  1.96e+00  7.58e-06  1.27e-01  7.66e-01  
  5  +5.0025e-01  +9.5834e-01  4.58e-01  4.36e-03  7.68e-01  1.31e-05  5.14e-02  8.51e-01  
  6  +4.9976e-01  +8.2896e-01  3.29e-01  1.81e-03  3.24e-01  5.36e-05  6.19e-03  9.20e-01  
  7  +4.9584e-01  +8.0411e-01  3.08e-01  2.65e-04  4.79e-02  4.07e-04  7.19e-04  8.85e-01  
  8  +4.9281e-01  +7.8519e-01  2.92e-01  1.86e-04  3.35e-02  4.67e-04  5.02e-04  3.90e-01  
  9  +4.8760e-01  +7.5105e-01  2.63e-01  1.39e-04  2.51e-02  3.91e-04  3.81e-04  4.02e-01  
 10  +4.7757e-01  +6.9775e-01  2.20e-01  9.94e-05  1.79e-02  2.93e-04  2.78e-04  3.99e-01  
 11  +4.6624e-01  +6.4477e-01  1.79e-01  7.47e-05  1.34e-02  1.90e-04  2.14e-04  3.55e-01  
 12  +4.5546e-01  +5.9371e-01  1.38e-01  5.95e-05  1.06e-02  1.76e-06  1.79e-04  8.21e-01  
 13  +4.3046e-01  +4.9429e-01  6.38e-02  2.37e-05  4.22e-03  1.58e-06  7.56e-05  6.26e-01  
 14  +4.1390e-01  +4.3248e-01  1.86e-02  6.63e-06  1.18e-03  6.44e-07  2.23e-05  7.38e-01  
 15  +4.0758e-01  +4.1014e-01  2.57e-03  8.94e-07  1.59e-04  2.24e-07  3.14e-06  9.36e-01  
 16  +4.0651e-01  +4.0655e-01  3.46e-05  1.20e-08  2.13e-06  3.19e-09  4.26e-08  9.89e-01  
 17  +4.0650e-01  +4.0650e-01  3.46e-07  1.20e-10  2.13e-08  3.19e-11  4.26e-10  9.90e-01  
 18  +4.0650e-01  +4.0650e-01  3.46e-09  1.20e-12  2.13e-10  3.22e-13  4.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 117.3036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:16 PM: Optimal value: 4.065e-01
(CVXPY) Oct 06 04:26:16 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:26:16 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 4, Objective: 0.4065
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:16 PM: Your problem has 2561 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:16 PM: Finished problem compilation (took 1.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2561
  constraints   = 5061
  nnz(P)        = 0
  nnz(A)        = 39607
  cones (total) = 1
    : Nonnegative = 1,  numel = 5061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5014e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7763e-01  +5.4997e+02  5.49e+02  4.41e-01  5.80e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2855e-01  +5.9748e+01  5.92e+01  1.72e-01  2.88e+01  1.80e-02  2.88e-01  9.65e-01  
  3  +5.0785e-01  +1.5343e+01  1.48e+01  1.05e-01  1.75e+01  5.08e-05  2.56e-01  3.93e-01  
  4  +5.0080e-01  +1.5602e+00  1.06e+00  1.04e-02  1.82e+00  7.43e-06  1.20e-01  8.02e-01  
  5  +5.0031e-01  +1.0126e+00  5.12e-01  4.87e-03  8.57e-01  1.48e-05  4.38e-02  8.40e-01  
  6  +4.9953e-01  +9.9142e-01  4.92e-01  1.23e-03  2.22e-01  1.26e-04  3.45e-03  9.79e-01  
  7  +4.9533e-01  +9.3994e-01  4.45e-01  2.79e-04  5.06e-02  4.89e-04  7.44e-04  7.98e-01  
  8  +4.8861e-01  +8.5035e-01  3.62e-01  2.04e-04  3.68e-02  3.33e-04  5.52e-04  4.09e-01  
  9  +4.8373e-01  +8.0803e-01  3.24e-01  1.66e-04  2.99e-02  2.58e-04  4.54e-04  3.18e-01  
 10  +4.6895e-01  +6.9215e-01  2.23e-01  1.07e-04  1.92e-02  3.96e-05  3.06e-04  7.55e-01  
 11  +4.5588e-01  +6.3055e-01  1.75e-01  7.49e-05  1.34e-02  2.97e-05  2.21e-04  3.51e-01  
 12  +4.4900e-01  +5.9657e-01  1.48e-01  6.51e-05  1.16e-02  1.60e-05  2.07e-04  5.73e-01  
 13  +4.2699e-01  +4.9433e-01  6.73e-02  2.76e-05  4.91e-03  6.74e-06  9.16e-05  6.82e-01  
 14  +4.2348e-01  +4.8836e-01  6.49e-02  2.50e-05  4.45e-03  7.10e-06  8.14e-05  3.45e-01  
 15  +4.1308e-01  +4.4860e-01  3.55e-02  1.33e-05  2.36e-03  3.90e-06  4.48e-05  5.44e-01  
 16  +4.1024e-01  +4.3774e-01  2.75e-02  1.02e-05  1.81e-03  3.05e-06  3.47e-05  2.75e-01  
 17  +4.0264e-01  +4.0921e-01  6.57e-03  2.38e-06  4.23e-04  7.41e-07  8.41e-06  8.06e-01  
 18  +4.0038e-01  +4.0134e-01  9.57e-04  3.41e-07  6.06e-05  1.11e-07  1.23e-06  8.88e-01  
 19  +4.0000e-01  +4.0001e-01  1.05e-05  3.74e-09  6.64e-07  1.22e-09  1.35e-08  9.89e-01  
 20  +4.0000e-01  +4.0000e-01  1.05e-07  3.74e-11  6.64e-09  1.22e-11  1.35e-10  9.90e-01  
 21  +4.0000e-01  +4.0000e-01  1.05e-09  3.74e-13  6.64e-11  1.22e-13  1.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.3399ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:17 PM: Optimal value: 4.000e-01
(CVXPY) Oct 06 04:26:17 PM: Compilation took 1.565e-02 seconds
(CVXPY) Oct 06 04:26:17 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 5, Objective: 0.4000
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:17 PM: Your problem has 2571 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:17 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2571
  constraints   = 5071
  nnz(P)        = 0
  nnz(A)        = 40490
  cones (total) = 1
    : Nonnegative = 1,  numel = 5071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5016e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7749e-01  +5.4999e+02  5.49e+02  4.42e-01  5.80e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2843e-01  +5.9625e+01  5.91e+01  1.71e-01  2.87e+01  1.81e-02  2.87e-01  9.67e-01  
  3  +5.0782e-01  +1.5302e+01  1.48e+01  1.04e-01  1.74e+01  5.09e-05  2.55e-01  3.98e-01  
  4  +5.0089e-01  +1.7426e+00  1.24e+00  1.22e-02  2.13e+00  8.09e-06  1.29e-01  7.41e-01  
  5  +5.0021e-01  +1.0215e+00  5.21e-01  4.92e-03  8.67e-01  1.52e-05  4.72e-02  9.17e-01  
  6  +4.9935e-01  +9.4181e-01  4.42e-01  2.00e-03  3.59e-01  7.23e-05  6.27e-03  8.83e-01  
  7  +4.9286e-01  +8.8755e-01  3.95e-01  3.11e-04  5.63e-02  4.51e-04  8.32e-04  8.69e-01  
  8  +4.8586e-01  +8.3480e-01  3.49e-01  1.98e-04  3.59e-02  4.82e-04  5.36e-04  4.32e-01  
  9  +4.7973e-01  +7.9366e-01  3.14e-01  1.55e-04  2.79e-02  3.85e-04  4.23e-04  3.61e-01  
 10  +4.5474e-01  +6.3717e-01  1.82e-01  7.89e-05  1.41e-02  1.35e-05  2.30e-04  8.61e-01  
 11  +4.4257e-01  +5.8620e-01  1.44e-01  5.96e-05  1.07e-02  1.10e-05  1.80e-04  3.24e-01  
 12  +4.1609e-01  +4.7643e-01  6.03e-02  2.33e-05  4.14e-03  5.01e-06  7.65e-05  7.58e-01  
 13  +4.0583e-01  +4.3484e-01  2.90e-02  1.09e-05  1.93e-03  3.35e-06  3.70e-05  8.62e-01  
 14  +3.9900e-01  +4.0873e-01  9.73e-03  3.62e-06  6.43e-04  1.17e-06  1.27e-05  7.69e-01  
 15  +3.9630e-01  +3.9856e-01  2.26e-03  8.40e-07  1.49e-04  2.82e-07  3.01e-06  9.51e-01  
 16  +3.9579e-01  +3.9673e-01  9.44e-04  3.50e-07  6.22e-05  1.17e-07  1.26e-06  6.06e-01  
 17  +3.9545e-01  +3.9553e-01  7.31e-05  2.71e-08  4.82e-06  8.89e-09  9.76e-08  9.90e-01  
 18  +3.9543e-01  +3.9543e-01  7.66e-07  2.84e-10  5.05e-08  9.32e-11  1.02e-09  9.90e-01  
 19  +3.9543e-01  +3.9543e-01  7.66e-09  2.84e-12  5.05e-10  9.32e-13  1.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.6379ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:17 PM: Optimal value: 3.954e-01
(CVXPY) Oct 06 04:26:17 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:17 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 6, Objective: 0.3954
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:17 PM: Your problem has 2581 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:17 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2581
  constraints   = 5081
  nnz(P)        = 0
  nnz(A)        = 40974
  cones (total) = 1
    : Nonnegative = 1,  numel = 5081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5017e+03  2.50e+03  9.80e-01  8.83e+01  1.00e+00  1.00e+00   ------   
  1  +5.7726e-01  +5.5001e+02  5.49e+02  4.42e-01  5.79e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2824e-01  +5.9442e+01  5.89e+01  1.71e-01  2.85e+01  1.81e-02  2.86e-01  9.69e-01  
  3  +5.0777e-01  +1.5239e+01  1.47e+01  1.04e-01  1.73e+01  5.12e-05  2.53e-01  4.06e-01  
  4  +5.0096e-01  +1.8897e+00  1.39e+00  1.37e-02  2.38e+00  8.71e-06  1.34e-01  7.00e-01  
  5  +5.0023e-01  +1.1316e+00  6.31e-01  5.96e-03  1.05e+00  1.53e-05  5.42e-02  8.70e-01  
  6  +4.9842e-01  +9.7817e-01  4.80e-01  1.45e-03  2.62e-01  1.04e-04  4.18e-03  9.73e-01  
  7  +4.8991e-01  +9.0834e-01  4.18e-01  3.06e-04  5.55e-02  4.28e-04  8.15e-04  8.06e-01  
  8  +4.7884e-01  +8.3345e-01  3.55e-01  1.85e-04  3.35e-02  4.47e-04  5.03e-04  4.39e-01  
  9  +4.7574e-01  +8.1078e-01  3.35e-01  1.68e-04  3.04e-02  3.13e-04  4.60e-04  3.01e-01  
 10  +4.5305e-01  +6.7529e-01  2.22e-01  9.87e-05  1.77e-02  1.06e-04  2.87e-04  6.19e-01  
 11  +4.3705e-01  +5.9829e-01  1.61e-01  6.87e-05  1.23e-02  6.34e-05  2.09e-04  3.55e-01  
 12  +4.0907e-01  +4.6982e-01  6.07e-02  2.43e-05  4.32e-03  7.43e-06  8.13e-05  8.59e-01  
 13  +4.0038e-01  +4.3281e-01  3.24e-02  1.27e-05  2.25e-03  3.99e-06  4.39e-05  7.68e-01  
 14  +3.9442e-01  +4.0878e-01  1.44e-02  5.60e-06  9.93e-04  1.75e-06  2.00e-05  5.85e-01  
 15  +3.9139e-01  +3.9654e-01  5.15e-03  1.99e-06  3.53e-04  6.21e-07  7.26e-06  8.63e-01  
 16  +3.8982e-01  +3.9056e-01  7.39e-04  2.86e-07  5.07e-05  8.84e-08  1.05e-06  8.72e-01  
 17  +3.8956e-01  +3.8957e-01  1.42e-05  5.51e-09  9.78e-07  1.67e-09  2.04e-08  9.84e-01  
 18  +3.8955e-01  +3.8955e-01  1.43e-07  5.52e-11  9.79e-09  1.67e-11  2.04e-10  9.90e-01  
 19  +3.8955e-01  +3.8955e-01  1.43e-09  5.54e-13  9.81e-11  1.68e-13  2.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.267ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:17 PM: Optimal value: 3.896e-01
(CVXPY) Oct 06 04:26:17 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:26:17 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 7, Objective: 0.3896
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:18 PM: Your problem has 2591 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:18 PM: Finished problem compilation (took 4.071e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2591
  constraints   = 5091
  nnz(P)        = 0
  nnz(A)        = 41364
  cones (total) = 1
    : Nonnegative = 1,  numel = 5091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5016e+03  2.50e+03  9.80e-01  8.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.7707e-01  +5.5006e+02  5.49e+02  4.42e-01  5.78e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2811e-01  +5.9336e+01  5.88e+01  1.70e-01  2.84e+01  1.81e-02  2.86e-01  9.71e-01  
  3  +5.0775e-01  +1.5204e+01  1.47e+01  1.03e-01  1.73e+01  5.14e-05  2.52e-01  4.11e-01  
  4  +5.0083e-01  +1.6478e+00  1.15e+00  1.13e-02  1.97e+00  8.02e-06  1.19e-01  7.81e-01  
  5  +5.0042e-01  +1.2881e+00  7.88e-01  7.31e-03  1.29e+00  1.86e-05  4.64e-02  8.30e-01  
  6  +4.9916e-01  +1.0451e+00  5.46e-01  1.45e-03  2.63e-01  1.07e-04  3.99e-03  9.31e-01  
  7  +4.9380e-01  +9.8902e-01  4.95e-01  3.58e-04  6.52e-02  3.85e-04  9.33e-04  7.73e-01  
  8  +4.8602e-01  +9.1166e-01  4.26e-01  2.43e-04  4.41e-02  3.44e-04  6.43e-04  4.17e-01  
  9  +4.7737e-01  +8.4733e-01  3.70e-01  1.85e-04  3.34e-02  2.62e-04  4.99e-04  3.68e-01  
 10  +4.6710e-01  +7.5217e-01  2.85e-01  1.56e-04  2.80e-02  2.25e-06  4.50e-04  7.46e-01  
 11  +4.4878e-01  +6.5459e-01  2.06e-01  9.98e-05  1.79e-02  5.04e-06  2.99e-04  4.54e-01  
 12  +4.1973e-01  +5.2762e-01  1.08e-01  4.49e-05  8.00e-03  5.08e-06  1.44e-04  6.54e-01  
 13  +4.0342e-01  +4.5616e-01  5.27e-02  2.14e-05  3.79e-03  2.64e-06  7.29e-05  5.37e-01  
 14  +3.9246e-01  +4.0872e-01  1.63e-02  6.42e-06  1.14e-03  1.81e-06  2.30e-05  9.70e-01  
 15  +3.8857e-01  +3.9328e-01  4.71e-03  1.86e-06  3.29e-04  5.24e-07  6.82e-06  7.38e-01  
 16  +3.8745e-01  +3.8881e-01  1.35e-03  5.35e-07  9.47e-05  1.53e-07  1.98e-06  9.90e-01  
 17  +3.8703e-01  +3.8725e-01  2.20e-04  8.66e-08  1.53e-05  2.47e-08  3.22e-07  8.74e-01  
 18  +3.8695e-01  +3.8696e-01  1.05e-05  4.12e-09  7.30e-07  1.17e-09  1.54e-08  9.67e-01  
 19  +3.8695e-01  +3.8695e-01  1.05e-07  4.14e-11  7.32e-09  1.18e-11  1.54e-10  9.90e-01  
 20  +3.8695e-01  +3.8695e-01  1.06e-09  4.19e-13  7.41e-11  1.20e-13  1.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.349ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:18 PM: Optimal value: 3.870e-01
(CVXPY) Oct 06 04:26:18 PM: Compilation took 4.071e-02 seconds
(CVXPY) Oct 06 04:26:18 PM: Solver (including time spent in interface) took 1.338e-01 seconds
Iteration: 8, Objective: 0.3870
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:18 PM: Your problem has 2601 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:18 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2601
  constraints   = 5101
  nnz(P)        = 0
  nnz(A)        = 41934
  cones (total) = 1
    : Nonnegative = 1,  numel = 5101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.80e-01  8.82e+01  1.00e+00  1.00e+00   ------   
  1  +5.7690e-01  +5.5016e+02  5.50e+02  4.43e-01  5.77e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2797e-01  +5.9213e+01  5.87e+01  1.70e-01  2.83e+01  1.82e-02  2.85e-01  9.73e-01  
  3  +5.0772e-01  +1.5171e+01  1.47e+01  1.03e-01  1.72e+01  5.17e-05  2.51e-01  4.16e-01  
  4  +5.0089e-01  +1.7735e+00  1.27e+00  1.26e-02  2.18e+00  8.50e-06  1.25e-01  7.42e-01  
  5  +5.0034e-01  +1.2655e+00  7.65e-01  7.14e-03  1.25e+00  1.76e-05  4.83e-02  8.35e-01  
  6  +4.9868e-01  +1.0625e+00  5.64e-01  1.52e-03  2.75e-01  1.08e-04  4.19e-03  9.30e-01  
  7  +4.9153e-01  +9.9266e-01  5.01e-01  3.62e-04  6.60e-02  3.93e-04  9.47e-04  7.78e-01  
  8  +4.8236e-01  +9.1636e-01  4.34e-01  2.38e-04  4.31e-02  3.88e-04  6.32e-04  4.04e-01  
  9  +4.7311e-01  +8.4241e-01  3.69e-01  1.89e-04  3.41e-02  2.54e-04  5.15e-04  3.54e-01  
 10  +4.6600e-01  +7.7707e-01  3.11e-01  1.67e-04  3.00e-02  8.37e-05  4.95e-04  4.40e-01  
 11  +4.5971e-01  +7.4113e-01  2.81e-01  1.48e-04  2.67e-02  6.14e-05  4.42e-04  3.01e-01  
 12  +4.4101e-01  +6.3304e-01  1.92e-01  9.37e-05  1.67e-02  3.73e-05  2.90e-04  4.02e-01  
 13  +4.1637e-01  +5.2773e-01  1.11e-01  4.73e-05  8.40e-03  1.86e-05  1.54e-04  6.33e-01  
 14  +3.9711e-01  +4.3778e-01  4.07e-02  1.66e-05  2.94e-03  5.40e-06  5.83e-05  7.81e-01  
 15  +3.9526e-01  +4.2923e-01  3.40e-02  1.38e-05  2.44e-03  4.39e-06  4.90e-05  3.61e-01  
 16  +3.9180e-01  +4.1444e-01  2.26e-02  9.04e-06  1.60e-03  2.91e-06  3.27e-05  4.63e-01  
 17  +3.9169e-01  +4.1374e-01  2.20e-02  8.84e-06  1.56e-03  2.78e-06  3.21e-05  1.48e-01  
 18  +3.9176e-01  +4.1393e-01  2.22e-02  8.83e-06  1.56e-03  2.80e-06  3.20e-05  6.02e-02  
 19  +3.8850e-01  +4.0048e-01  1.20e-02  4.74e-06  8.39e-04  1.48e-06  1.76e-05  6.32e-01  
 20  +3.8618e-01  +3.9117e-01  4.98e-03  1.95e-06  3.46e-04  5.66e-07  7.43e-06  9.90e-01  
 21  +3.8443e-01  +3.8464e-01  2.12e-04  8.23e-08  1.46e-05  2.30e-08  3.21e-07  9.79e-01  
 22  +3.8435e-01  +3.8435e-01  2.16e-06  8.40e-10  1.49e-07  2.35e-10  3.28e-09  9.90e-01  
 23  +3.8435e-01  +3.8435e-01  2.17e-08  8.41e-12  1.49e-09  2.35e-12  3.29e-11  9.90e-01  
 24  +3.8435e-01  +3.8435e-01  2.17e-10  8.45e-14  1.49e-11  2.39e-14  3.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.916ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:18 PM: Optimal value: 3.844e-01
(CVXPY) Oct 06 04:26:18 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:18 PM: Solver (including time spent in interface) took 1.569e-01 seconds
Iteration: 9, Objective: 0.3844
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:18 PM: Your problem has 2611 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:18 PM: Finished problem compilation (took 1.685e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2611
  constraints   = 5111
  nnz(P)        = 0
  nnz(A)        = 42244
  cones (total) = 1
    : Nonnegative = 1,  numel = 5111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7675e-01  +5.5014e+02  5.50e+02  4.43e-01  5.76e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2785e-01  +5.9087e+01  5.86e+01  1.70e-01  2.81e+01  1.82e-02  2.85e-01  9.75e-01  
  3  +5.0770e-01  +1.5135e+01  1.46e+01  1.03e-01  1.71e+01  5.18e-05  2.50e-01  4.21e-01  
  4  +5.0087e-01  +1.7379e+00  1.24e+00  1.22e-02  2.12e+00  8.44e-06  1.21e-01  7.56e-01  
  5  +5.0041e-01  +1.3459e+00  8.46e-01  7.84e-03  1.38e+00  1.83e-05  4.84e-02  8.09e-01  
  6  +4.9869e-01  +1.0694e+00  5.71e-01  1.37e-03  2.50e-01  1.14e-04  3.73e-03  9.43e-01  
  7  +4.9177e-01  +9.9839e-01  5.07e-01  3.53e-04  6.43e-02  3.79e-04  9.15e-04  7.62e-01  
  8  +4.8288e-01  +9.2422e-01  4.41e-01  2.39e-04  4.35e-02  3.45e-04  6.32e-04  4.20e-01  
  9  +4.7269e-01  +8.4146e-01  3.69e-01  1.90e-04  3.43e-02  1.96e-04  5.16e-04  4.05e-01  
 10  +4.6084e-01  +7.5001e-01  2.89e-01  1.55e-04  2.79e-02  1.73e-06  4.60e-04  8.04e-01  
 11  +4.3962e-01  +6.2886e-01  1.89e-01  9.26e-05  1.65e-02  5.87e-06  2.87e-04  5.44e-01  
 12  +4.1566e-01  +5.3309e-01  1.17e-01  4.97e-05  8.83e-03  6.89e-06  1.61e-04  6.44e-01  
 13  +3.9718e-01  +4.4956e-01  5.24e-02  2.13e-05  3.78e-03  3.47e-06  7.43e-05  6.31e-01  
 14  +3.9468e-01  +4.3894e-01  4.43e-02  1.78e-05  3.16e-03  3.13e-06  6.29e-05  2.30e-01  
 15  +3.8893e-01  +4.1468e-01  2.57e-02  1.02e-05  1.80e-03  2.02e-06  3.72e-05  5.10e-01  
 16  +3.8852e-01  +4.1290e-01  2.44e-02  9.65e-06  1.71e-03  1.96e-06  3.53e-05  1.04e-01  
 17  +3.8851e-01  +4.1241e-01  2.39e-02  9.41e-06  1.67e-03  2.08e-06  3.44e-05  1.99e-01  
 18  +3.8220e-01  +3.8690e-01  4.70e-03  1.82e-06  3.23e-04  5.36e-07  6.96e-06  9.90e-01  
 19  +3.8057e-01  +3.8090e-01  3.30e-04  1.28e-07  2.26e-05  3.74e-08  4.94e-07  9.36e-01  
 20  +3.8045e-01  +3.8045e-01  3.36e-06  1.30e-09  2.30e-07  3.82e-10  5.04e-09  9.90e-01  
 21  +3.8045e-01  +3.8045e-01  3.36e-08  1.30e-11  2.30e-09  3.82e-12  5.04e-11  9.90e-01  
 22  +3.8045e-01  +3.8045e-01  3.36e-10  1.30e-13  2.30e-11  3.82e-14  5.05e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.6249ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:19 PM: Optimal value: 3.805e-01
(CVXPY) Oct 06 04:26:19 PM: Compilation took 1.685e-02 seconds
(CVXPY) Oct 06 04:26:19 PM: Solver (including time spent in interface) took 1.567e-01 seconds
Iteration: 10, Objective: 0.3805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:19 PM: Your problem has 2621 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:19 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2621
  constraints   = 5121
  nnz(P)        = 0
  nnz(A)        = 42601
  cones (total) = 1
    : Nonnegative = 1,  numel = 5121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5015e+03  2.50e+03  9.80e-01  8.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.7638e-01  +5.5027e+02  5.50e+02  4.43e-01  5.76e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2764e-01  +5.8917e+01  5.84e+01  1.69e-01  2.80e+01  1.83e-02  2.84e-01  9.78e-01  
  3  +5.0766e-01  +1.5095e+01  1.46e+01  1.02e-01  1.70e+01  5.23e-05  2.48e-01  4.29e-01  
  4  +5.0081e-01  +1.6312e+00  1.13e+00  1.12e-02  1.95e+00  8.22e-06  1.13e-01  7.96e-01  
  5  +5.0047e-01  +1.3840e+00  8.83e-01  7.91e-03  1.39e+00  2.05e-05  3.93e-02  8.04e-01  
  6  +4.9861e-01  +1.2102e+00  7.12e-01  1.24e-03  2.27e-01  1.52e-04  3.23e-03  9.24e-01  
  7  +4.9134e-01  +1.0980e+00  6.07e-01  3.69e-04  6.73e-02  3.89e-04  9.38e-04  7.39e-01  
  8  +4.8392e-01  +1.0224e+00  5.38e-01  2.84e-04  5.16e-02  3.17e-04  7.36e-04  3.39e-01  
  9  +4.7536e-01  +9.4335e-01  4.68e-01  2.32e-04  4.20e-02  2.39e-04  6.15e-04  2.73e-01  
 10  +4.4504e-01  +6.9641e-01  2.51e-01  1.19e-04  2.13e-02  2.28e-06  3.46e-04  8.29e-01  
 11  +4.1563e-01  +5.5041e-01  1.35e-01  5.89e-05  1.05e-02  2.72e-06  1.88e-04  5.19e-01  
 12  +4.0451e-01  +4.9998e-01  9.55e-02  4.06e-05  7.20e-03  5.82e-06  1.36e-04  5.92e-01  
 13  +3.8955e-01  +4.3274e-01  4.32e-02  1.79e-05  3.17e-03  3.11e-06  6.38e-05  6.45e-01  
 14  +3.8487e-01  +4.1179e-01  2.69e-02  1.09e-05  1.93e-03  2.63e-06  3.99e-05  7.54e-01  
 15  +3.8440e-01  +4.0974e-01  2.53e-02  1.02e-05  1.81e-03  2.55e-06  3.75e-05  2.10e-01  
 16  +3.7868e-01  +3.8629e-01  7.61e-03  3.04e-06  5.37e-04  8.66e-07  1.16e-05  9.90e-01  
 17  +3.7611e-01  +3.7655e-01  4.36e-04  1.73e-07  3.05e-05  4.83e-08  6.81e-07  9.61e-01  
 18  +3.7595e-01  +3.7596e-01  4.50e-06  1.78e-09  3.15e-07  4.97e-10  7.03e-09  9.90e-01  
 19  +3.7595e-01  +3.7595e-01  4.50e-08  1.78e-11  3.15e-09  4.97e-12  7.03e-11  9.90e-01  
 20  +3.7595e-01  +3.7595e-01  4.50e-10  1.78e-13  3.15e-11  5.01e-14  7.08e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.0089ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:19 PM: Optimal value: 3.760e-01
(CVXPY) Oct 06 04:26:19 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:26:19 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 11, Objective: 0.3760
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:19 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:19 PM: Finished problem compilation (took 3.134e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 42906
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5016e+03  2.50e+03  9.80e-01  8.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.7615e-01  +5.5035e+02  5.50e+02  4.44e-01  5.75e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2753e-01  +5.8836e+01  5.83e+01  1.69e-01  2.78e+01  1.83e-02  2.83e-01  9.80e-01  
  3  +5.0765e-01  +1.5074e+01  1.46e+01  1.02e-01  1.70e+01  5.25e-05  2.47e-01  4.33e-01  
  4  +5.0082e-01  +1.6518e+00  1.15e+00  1.14e-02  1.98e+00  8.35e-06  1.13e-01  7.91e-01  
  5  +5.0044e-01  +1.4117e+00  9.11e-01  7.88e-03  1.39e+00  2.32e-05  3.57e-02  8.51e-01  
  6  +4.9825e-01  +1.2609e+00  7.63e-01  1.23e-03  2.25e-01  1.68e-04  3.18e-03  9.15e-01  
  7  +4.8999e-01  +1.1275e+00  6.38e-01  3.74e-04  6.83e-02  4.03e-04  9.51e-04  7.29e-01  
  8  +4.8145e-01  +1.0428e+00  5.61e-01  2.82e-04  5.13e-02  3.24e-04  7.31e-04  3.64e-01  
  9  +4.7287e-01  +9.5797e-01  4.85e-01  2.37e-04  4.28e-02  2.33e-04  6.28e-04  2.50e-01  
 10  +4.4596e-01  +7.2015e-01  2.74e-01  1.34e-04  2.41e-02  2.12e-06  3.91e-04  8.03e-01  
 11  +4.1742e-01  +5.7348e-01  1.56e-01  6.92e-05  1.23e-02  2.39e-06  2.19e-04  4.84e-01  
 12  +4.0422e-01  +5.1015e-01  1.06e-01  4.51e-05  7.98e-03  1.20e-05  1.50e-04  9.90e-01  
 13  +3.8224e-01  +4.1058e-01  2.83e-02  1.17e-05  2.07e-03  2.79e-06  4.32e-05  7.45e-01  
 14  +3.7718e-01  +3.8827e-01  1.11e-02  4.51e-06  7.95e-04  1.22e-06  1.72e-05  9.90e-01  
 15  +3.7440e-01  +3.7746e-01  3.05e-03  1.23e-06  2.17e-04  3.32e-07  4.86e-06  7.92e-01  
 16  +3.7350e-01  +3.7402e-01  5.26e-04  2.09e-07  3.70e-05  5.41e-08  8.43e-07  9.90e-01  
 17  +3.7330e-01  +3.7331e-01  5.48e-06  2.18e-09  3.85e-07  5.63e-10  8.81e-09  9.90e-01  
 18  +3.7330e-01  +3.7330e-01  5.48e-08  2.18e-11  3.85e-09  5.63e-12  8.81e-11  9.90e-01  
 19  +3.7330e-01  +3.7330e-01  5.48e-10  2.18e-13  3.85e-11  5.67e-14  8.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 134.1826ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:19 PM: Optimal value: 3.733e-01
(CVXPY) Oct 06 04:26:19 PM: Compilation took 3.134e-02 seconds
(CVXPY) Oct 06 04:26:19 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 12, Objective: 0.3733
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:20 PM: Your problem has 2641 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:20 PM: Finished problem compilation (took 3.147e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2641
  constraints   = 5141
  nnz(P)        = 0
  nnz(A)        = 43218
  cones (total) = 1
    : Nonnegative = 1,  numel = 5141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.80e-01  8.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.7597e-01  +5.5025e+02  5.50e+02  4.44e-01  5.74e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2743e-01  +5.8731e+01  5.82e+01  1.68e-01  2.77e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0762e-01  +1.5036e+01  1.45e+01  1.02e-01  1.69e+01  5.27e-05  2.45e-01  4.38e-01  
  4  +5.0084e-01  +1.6888e+00  1.19e+00  1.18e-02  2.04e+00  8.58e-06  1.14e-01  7.82e-01  
  5  +5.0038e-01  +1.4270e+00  9.27e-01  7.67e-03  1.36e+00  2.58e-05  3.18e-02  8.78e-01  
  6  +4.9763e-01  +1.3184e+00  8.21e-01  1.20e-03  2.19e-01  1.87e-04  3.08e-03  9.07e-01  
  7  +4.8785e-01  +1.1474e+00  6.60e-01  3.85e-04  7.03e-02  3.94e-04  9.78e-04  7.13e-01  
  8  +4.8037e-01  +1.0731e+00  5.93e-01  2.96e-04  5.38e-02  3.04e-04  7.63e-04  3.98e-01  
  9  +4.6839e-01  +9.3969e-01  4.71e-01  2.38e-04  4.30e-02  1.52e-04  6.37e-04  3.83e-01  
 10  +4.3968e-01  +7.0226e-01  2.63e-01  1.28e-04  2.29e-02  1.42e-06  3.79e-04  8.88e-01  
 11  +4.1646e-01  +5.8561e-01  1.69e-01  7.65e-05  1.36e-02  2.67e-06  2.43e-04  4.25e-01  
 12  +3.9577e-01  +4.8695e-01  9.12e-02  3.89e-05  6.88e-03  8.02e-06  1.33e-04  8.67e-01  
 13  +3.8000e-01  +4.1480e-01  3.48e-02  1.45e-05  2.56e-03  3.11e-06  5.32e-05  6.81e-01  
 14  +3.7471e-01  +3.9132e-01  1.66e-02  6.86e-06  1.21e-03  1.62e-06  2.59e-05  7.20e-01  
 15  +3.7111e-01  +3.7622e-01  5.10e-03  2.10e-06  3.70e-04  5.02e-07  8.12e-06  7.26e-01  
 16  +3.6988e-01  +3.7104e-01  1.16e-03  4.76e-07  8.39e-05  1.19e-07  1.86e-06  9.90e-01  
 17  +3.6947e-01  +3.6949e-01  1.50e-05  6.15e-09  1.08e-06  1.54e-09  2.41e-08  9.87e-01  
 18  +3.6947e-01  +3.6947e-01  1.50e-07  6.16e-11  1.09e-08  1.54e-11  2.42e-10  9.90e-01  
 19  +3.6947e-01  +3.6947e-01  1.50e-09  6.16e-13  1.09e-10  1.54e-13  2.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.8649ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:20 PM: Optimal value: 3.695e-01
(CVXPY) Oct 06 04:26:20 PM: Compilation took 3.147e-02 seconds
(CVXPY) Oct 06 04:26:20 PM: Solver (including time spent in interface) took 1.407e-01 seconds
Iteration: 13, Objective: 0.3695
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:20 PM: Your problem has 2651 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:20 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2651
  constraints   = 5151
  nnz(P)        = 0
  nnz(A)        = 43467
  cones (total) = 1
    : Nonnegative = 1,  numel = 5151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.80e-01  8.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.7572e-01  +5.5033e+02  5.50e+02  4.44e-01  5.73e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2728e-01  +5.8601e+01  5.81e+01  1.68e-01  2.75e+01  1.84e-02  2.82e-01  9.84e-01  
  3  +5.0760e-01  +1.5006e+01  1.45e+01  1.01e-01  1.68e+01  5.30e-05  2.44e-01  4.43e-01  
  4  +5.0083e-01  +1.6788e+00  1.18e+00  1.17e-02  2.03e+00  8.64e-06  1.11e-01  7.88e-01  
  5  +5.0040e-01  +1.4498e+00  9.49e-01  7.72e-03  1.37e+00  2.61e-05  3.07e-02  8.60e-01  
  6  +4.9779e-01  +1.3556e+00  8.58e-01  1.29e-03  2.35e-01  1.77e-04  3.28e-03  8.97e-01  
  7  +4.8843e-01  +1.1819e+00  6.93e-01  4.16e-04  7.60e-02  3.71e-04  1.05e-03  7.11e-01  
  8  +4.7729e-01  +1.0729e+00  5.96e-01  2.90e-04  5.27e-02  3.00e-04  7.50e-04  4.21e-01  
  9  +4.6886e-01  +9.6564e-01  4.97e-01  2.55e-04  4.61e-02  1.62e-04  6.81e-04  3.02e-01  
 10  +4.4828e-01  +7.7710e-01  3.29e-01  1.68e-04  3.01e-02  2.66e-05  4.81e-04  7.36e-01  
 11  +4.1574e-01  +5.9383e-01  1.78e-01  8.09e-05  1.44e-02  1.32e-05  2.54e-04  5.75e-01  
 12  +3.9324e-01  +4.8484e-01  9.16e-02  3.98e-05  7.04e-03  6.70e-06  1.36e-04  5.52e-01  
 13  +3.8071e-01  +4.2641e-01  4.57e-02  1.92e-05  3.39e-03  4.36e-06  6.94e-05  7.91e-01  
 14  +3.7211e-01  +3.8822e-01  1.61e-02  6.72e-06  1.19e-03  1.65e-06  2.54e-05  8.02e-01  
 15  +3.7170e-01  +3.8636e-01  1.47e-02  6.09e-06  1.08e-03  1.51e-06  2.31e-05  2.34e-01  
 16  +3.6766e-01  +3.6969e-01  2.03e-03  8.40e-07  1.48e-04  2.14e-07  3.27e-06  9.82e-01  
 17  +3.6696e-01  +3.6701e-01  4.13e-05  1.71e-08  3.02e-06  4.27e-09  6.70e-08  9.85e-01  
 18  +3.6695e-01  +3.6695e-01  4.13e-07  1.71e-10  3.02e-08  4.28e-11  6.70e-10  9.90e-01  
 19  +3.6695e-01  +3.6695e-01  4.13e-09  1.71e-12  3.02e-10  4.28e-13  6.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.8372ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:20 PM: Optimal value: 3.670e-01
(CVXPY) Oct 06 04:26:20 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:20 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 14, Objective: 0.3670
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:20 PM: Your problem has 2661 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:20 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2661
  constraints   = 5161
  nnz(P)        = 0
  nnz(A)        = 43691
  cones (total) = 1
    : Nonnegative = 1,  numel = 5161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5017e+03  2.50e+03  9.80e-01  8.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.7554e-01  +5.5039e+02  5.50e+02  4.44e-01  5.72e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2714e-01  +5.8476e+01  5.79e+01  1.67e-01  2.74e+01  1.84e-02  2.81e-01  9.86e-01  
  3  +5.0758e-01  +1.4975e+01  1.45e+01  1.01e-01  1.67e+01  5.32e-05  2.43e-01  4.49e-01  
  4  +5.0081e-01  +1.6454e+00  1.14e+00  1.14e-02  1.97e+00  8.59e-06  1.08e-01  8.01e-01  
  5  +5.0056e-01  +1.6481e+00  1.15e+00  9.12e-03  1.62e+00  2.75e-05  3.41e-02  8.26e-01  
  6  +4.9846e-01  +1.4763e+00  9.78e-01  1.63e-03  2.97e-01  1.49e-04  4.15e-03  8.82e-01  
  7  +4.9108e-01  +1.2974e+00  8.06e-01  5.36e-04  9.79e-02  3.18e-04  1.34e-03  7.08e-01  
  8  +4.7992e-01  +1.0794e+00  6.00e-01  3.55e-04  6.44e-02  1.62e-04  9.20e-04  5.37e-01  
  9  +4.7570e-01  +1.0325e+00  5.57e-01  3.14e-04  5.69e-02  1.39e-04  8.24e-04  2.04e-01  
 10  +4.5542e-01  +8.3773e-01  3.82e-01  1.88e-04  3.38e-02  4.97e-05  5.19e-04  7.38e-01  
 11  +4.1356e-01  +5.8665e-01  1.73e-01  7.65e-05  1.36e-02  1.53e-05  2.38e-04  6.41e-01  
 12  +3.9670e-01  +5.0609e-01  1.09e-01  4.75e-05  8.41e-03  9.75e-06  1.58e-04  4.59e-01  
 13  +3.8049e-01  +4.2980e-01  4.93e-02  2.09e-05  3.69e-03  4.96e-06  7.44e-05  7.71e-01  
 14  +3.7429e-01  +4.0231e-01  2.80e-02  1.17e-05  2.07e-03  2.89e-06  4.31e-05  5.45e-01  
 15  +3.7025e-01  +3.8403e-01  1.38e-02  5.71e-06  1.01e-03  1.49e-06  2.14e-05  7.94e-01  
 16  +3.6885e-01  +3.7810e-01  9.25e-03  3.81e-06  6.73e-04  9.91e-07  1.44e-05  6.92e-01  
 17  +3.6708e-01  +3.7113e-01  4.05e-03  1.65e-06  2.92e-04  4.35e-07  6.33e-06  6.73e-01  
 18  +3.6574e-01  +3.6592e-01  1.84e-04  7.49e-08  1.33e-05  1.96e-08  2.90e-07  9.60e-01  
 19  +3.6568e-01  +3.6568e-01  2.05e-06  8.35e-10  1.48e-07  2.18e-10  3.24e-09  9.89e-01  
 20  +3.6568e-01  +3.6568e-01  2.05e-08  8.35e-12  1.48e-09  2.19e-12  3.24e-11  9.90e-01  
 21  +3.6568e-01  +3.6568e-01  2.05e-10  8.35e-14  1.48e-11  2.19e-14  3.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.6002ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:21 PM: Optimal value: 3.657e-01
(CVXPY) Oct 06 04:26:21 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:21 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 15, Objective: 0.3657
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:21 PM: Your problem has 2671 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:21 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2671
  constraints   = 5171
  nnz(P)        = 0
  nnz(A)        = 44096
  cones (total) = 1
    : Nonnegative = 1,  numel = 5171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.7547e-01  +5.5039e+02  5.50e+02  4.45e-01  5.71e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2705e-01  +5.8388e+01  5.79e+01  1.67e-01  2.73e+01  1.84e-02  2.81e-01  9.87e-01  
  3  +5.0756e-01  +1.4945e+01  1.44e+01  1.01e-01  1.67e+01  5.34e-05  2.42e-01  4.53e-01  
  4  +5.0077e-01  +1.5830e+00  1.08e+00  1.08e-02  1.87e+00  8.43e-06  1.04e-01  8.24e-01  
  5  +5.0060e-01  +1.6493e+00  1.15e+00  8.80e-03  1.57e+00  2.86e-05  3.11e-02  8.15e-01  
  6  +4.9891e-01  +1.5324e+00  1.03e+00  1.82e-03  3.33e-01  1.37e-04  4.62e-03  8.54e-01  
  7  +4.9295e-01  +1.3607e+00  8.68e-01  6.20e-04  1.13e-01  2.89e-04  1.54e-03  7.02e-01  
  8  +4.8556e-01  +1.1417e+00  6.56e-01  4.44e-04  8.08e-02  1.37e-04  1.14e-03  5.25e-01  
  9  +4.7555e-01  +1.0456e+00  5.70e-01  3.03e-04  5.49e-02  1.32e-04  7.88e-04  3.98e-01  
 10  +4.5567e-01  +8.3960e-01  3.84e-01  2.00e-04  3.60e-02  3.77e-05  5.54e-04  6.82e-01  
 11  +4.4459e-01  +7.7308e-01  3.28e-01  1.64e-04  2.94e-02  3.12e-05  4.68e-04  2.25e-01  
 12  +4.4164e-01  +7.5413e-01  3.12e-01  1.57e-04  2.81e-02  2.91e-05  4.56e-04  3.10e-01  
 13  +4.0370e-01  +5.4139e-01  1.38e-01  6.17e-05  1.09e-02  1.03e-05  1.99e-04  6.27e-01  
 14  +3.9551e-01  +5.0410e-01  1.09e-01  4.68e-05  8.29e-03  1.08e-05  1.55e-04  6.99e-01  
 15  +3.7814e-01  +4.2331e-01  4.52e-02  1.92e-05  3.38e-03  4.40e-06  6.84e-05  6.22e-01  
 16  +3.7287e-01  +3.9964e-01  2.68e-02  1.12e-05  1.98e-03  2.69e-06  4.11e-05  5.19e-01  
 17  +3.6797e-01  +3.7788e-01  9.92e-03  4.11e-06  7.25e-04  1.05e-06  1.55e-05  8.77e-01  
 18  +3.6611e-01  +3.7014e-01  4.04e-03  1.67e-06  2.95e-04  4.28e-07  6.38e-06  8.38e-01  
 19  +3.6546e-01  +3.6760e-01  2.14e-03  8.85e-07  1.56e-04  2.27e-07  3.40e-06  5.40e-01  
 20  +3.6503e-01  +3.6589e-01  8.57e-04  3.54e-07  6.25e-05  8.78e-08  1.36e-06  9.90e-01  
 21  +3.6474e-01  +3.6479e-01  5.37e-05  2.22e-08  3.91e-06  5.50e-09  8.57e-08  9.42e-01  
 22  +3.6472e-01  +3.6472e-01  5.41e-07  2.23e-10  3.94e-08  5.54e-11  8.64e-10  9.90e-01  
 23  +3.6472e-01  +3.6472e-01  5.42e-09  2.23e-12  3.94e-10  5.54e-13  8.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.6921ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:21 PM: Optimal value: 3.647e-01
(CVXPY) Oct 06 04:26:21 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:21 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 16, Objective: 0.3647
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:21 PM: Your problem has 2677 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:21 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2677
  constraints   = 5177
  nnz(P)        = 0
  nnz(A)        = 44312
  cones (total) = 1
    : Nonnegative = 1,  numel = 5177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.7534e-01  +5.5039e+02  5.50e+02  4.45e-01  5.70e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2697e-01  +5.8319e+01  5.78e+01  1.67e-01  2.72e+01  1.85e-02  2.80e-01  9.88e-01  
  3  +5.0754e-01  +1.4924e+01  1.44e+01  1.01e-01  1.66e+01  5.36e-05  2.41e-01  4.56e-01  
  4  +5.0078e-01  +1.6016e+00  1.10e+00  1.10e-02  1.90e+00  8.56e-06  1.04e-01  8.19e-01  
  5  +5.0059e-01  +1.6442e+00  1.14e+00  9.03e-03  1.60e+00  2.67e-05  3.29e-02  7.88e-01  
  6  +4.9883e-01  +1.5234e+00  1.02e+00  1.82e-03  3.32e-01  1.34e-04  4.60e-03  8.67e-01  
  7  +4.9184e-01  +1.3380e+00  8.46e-01  5.59e-04  1.02e-01  3.08e-04  1.39e-03  7.33e-01  
  8  +4.8257e-01  +1.1298e+00  6.47e-01  3.99e-04  7.26e-02  1.49e-04  1.02e-03  5.21e-01  
  9  +4.7571e-01  +1.0447e+00  5.69e-01  3.23e-04  5.86e-02  1.15e-04  8.43e-04  3.39e-01  
 10  +4.5364e-01  +8.1899e-01  3.65e-01  1.91e-04  3.42e-02  2.20e-05  5.29e-04  9.03e-01  
 11  +4.2736e-01  +6.7119e-01  2.44e-01  1.16e-04  2.06e-02  1.48e-05  3.45e-04  4.33e-01  
 12  +3.9867e-01  +5.2599e-01  1.27e-01  5.70e-05  1.01e-02  8.31e-06  1.87e-04  6.01e-01  
 13  +3.8312e-01  +4.5266e-01  6.95e-02  3.02e-05  5.32e-03  4.91e-06  1.05e-04  5.30e-01  
 14  +3.7657e-01  +4.2296e-01  4.64e-02  1.97e-05  3.48e-03  3.51e-06  7.10e-05  4.14e-01  
 15  +3.7061e-01  +3.9502e-01  2.44e-02  1.02e-05  1.80e-03  2.45e-06  3.76e-05  8.47e-01  
 16  +3.6651e-01  +3.7789e-01  1.14e-02  4.73e-06  8.33e-04  1.16e-06  1.79e-05  5.97e-01  
 17  +3.6522e-01  +3.7238e-01  7.16e-03  2.96e-06  5.22e-04  7.41e-07  1.13e-05  6.58e-01  
 18  +3.6372e-01  +3.6641e-01  2.69e-03  1.11e-06  1.95e-04  2.78e-07  4.26e-06  7.25e-01  
 19  +3.6291e-01  +3.6323e-01  3.15e-04  1.30e-07  2.29e-05  3.22e-08  5.04e-07  9.34e-01  
 20  +3.6280e-01  +3.6281e-01  9.55e-06  3.93e-09  6.93e-07  9.72e-10  1.53e-08  9.81e-01  
 21  +3.6280e-01  +3.6280e-01  9.59e-08  3.94e-11  6.95e-09  9.75e-12  1.54e-10  9.90e-01  
 22  +3.6280e-01  +3.6280e-01  9.64e-10  3.96e-13  6.99e-11  9.83e-14  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.1465ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:21 PM: Optimal value: 3.628e-01
(CVXPY) Oct 06 04:26:21 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:21 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 17, Objective: 0.3628
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:22 PM: Your problem has 2687 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:22 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2687
  constraints   = 5187
  nnz(P)        = 0
  nnz(A)        = 44542
  cones (total) = 1
    : Nonnegative = 1,  numel = 5187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7517e-01  +5.5035e+02  5.50e+02  4.45e-01  5.69e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2688e-01  +5.8228e+01  5.77e+01  1.67e-01  2.71e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0753e-01  +1.4904e+01  1.44e+01  1.00e-01  1.66e+01  5.37e-05  2.40e-01  4.59e-01  
  4  +5.0075e-01  +1.5372e+00  1.04e+00  1.04e-02  1.79e+00  8.40e-06  9.90e-02  8.44e-01  
  5  +5.0073e-01  +1.8384e+00  1.34e+00  9.35e-03  1.67e+00  3.30e-05  3.00e-02  8.15e-01  
  6  +4.9927e-01  +1.7000e+00  1.20e+00  2.21e-03  4.04e-01  1.25e-04  5.57e-03  8.19e-01  
  7  +4.9281e-01  +1.4323e+00  9.40e-01  6.22e-04  1.14e-01  2.87e-04  1.54e-03  7.70e-01  
  8  +4.8569e-01  +1.2196e+00  7.34e-01  4.85e-04  8.83e-02  1.43e-04  1.23e-03  4.38e-01  
  9  +4.7659e-01  +1.0906e+00  6.14e-01  3.42e-04  6.21e-02  1.14e-04  8.86e-04  4.38e-01  
 10  +4.6927e-01  +1.0028e+00  5.34e-01  2.91e-04  5.26e-02  8.02e-05  7.69e-04  3.41e-01  
 11  +4.4858e-01  +8.4145e-01  3.93e-01  1.92e-04  3.45e-02  5.18e-05  5.35e-04  4.31e-01  
 12  +4.0499e-01  +5.6777e-01  1.63e-01  7.19e-05  1.27e-02  1.38e-05  2.27e-04  6.60e-01  
 13  +3.8394e-01  +4.6708e-01  8.31e-02  3.59e-05  6.33e-03  7.29e-06  1.24e-04  5.97e-01  
 14  +3.7334e-01  +4.1808e-01  4.47e-02  1.90e-05  3.34e-03  4.11e-06  6.90e-05  5.50e-01  
 15  +3.7017e-01  +4.0353e-01  3.34e-02  1.40e-05  2.46e-03  3.22e-06  5.18e-05  4.29e-01  
 16  +3.6627e-01  +3.8622e-01  1.99e-02  8.27e-06  1.46e-03  2.00e-06  3.15e-05  5.72e-01  
 17  +3.6251e-01  +3.7019e-01  7.68e-03  3.13e-06  5.52e-04  8.15e-07  1.24e-05  9.90e-01  
 18  +3.6014e-01  +3.6109e-01  9.53e-04  3.85e-07  6.79e-05  9.99e-08  1.57e-06  8.87e-01  
 19  +3.5980e-01  +3.5981e-01  1.08e-05  4.34e-09  7.66e-07  1.12e-09  1.77e-08  9.89e-01  
 20  +3.5980e-01  +3.5980e-01  1.08e-07  4.34e-11  7.66e-09  1.12e-11  1.77e-10  9.90e-01  
 21  +3.5980e-01  +3.5980e-01  1.08e-09  4.34e-13  7.66e-11  1.13e-13  1.78e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 150.2428ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:22 PM: Optimal value: 3.598e-01
(CVXPY) Oct 06 04:26:22 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:26:22 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 18, Objective: 0.3598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:22 PM: Your problem has 2697 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:22 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2697
  constraints   = 5197
  nnz(P)        = 0
  nnz(A)        = 44810
  cones (total) = 1
    : Nonnegative = 1,  numel = 5197

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5015e+03  2.50e+03  9.81e-01  8.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7508e-01  +5.5028e+02  5.50e+02  4.45e-01  5.68e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2679e-01  +5.8227e+01  5.77e+01  1.66e-01  2.70e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0758e-01  +1.4915e+01  1.44e+01  1.00e-01  1.65e+01  5.42e-05  2.38e-01  4.67e-01  
  4  +5.0074e-01  +1.5535e+00  1.05e+00  1.06e-02  1.82e+00  8.65e-06  9.93e-02  8.40e-01  
  5  +5.0068e-01  +1.8540e+00  1.35e+00  9.46e-03  1.69e+00  3.31e-05  3.03e-02  8.16e-01  
  6  +4.9889e-01  +1.6905e+00  1.19e+00  2.09e-03  3.83e-01  1.31e-04  5.26e-03  8.32e-01  
  7  +4.9164e-01  +1.4372e+00  9.46e-01  6.25e-04  1.14e-01  2.89e-04  1.55e-03  7.44e-01  
  8  +4.8430e-01  +1.2469e+00  7.63e-01  4.76e-04  8.67e-02  1.65e-04  1.21e-03  4.43e-01  
  9  +4.7555e-01  +1.1114e+00  6.36e-01  3.52e-04  6.38e-02  1.22e-04  9.10e-04  4.12e-01  
 10  +4.6561e-01  +9.9312e-01  5.28e-01  2.79e-04  5.03e-02  7.78e-05  7.42e-04  4.24e-01  
 11  +4.3457e-01  +7.4938e-01  3.15e-01  1.48e-04  2.63e-02  3.46e-05  4.26e-04  5.99e-01  
 12  +4.0124e-01  +5.5983e-01  1.59e-01  7.06e-05  1.25e-02  1.41e-05  2.27e-04  5.30e-01  
 13  +3.8419e-01  +4.7659e-01  9.24e-02  4.00e-05  7.04e-03  8.30e-06  1.38e-04  5.10e-01  
 14  +3.7361e-01  +4.2708e-01  5.35e-02  2.27e-05  3.99e-03  4.86e-06  8.23e-05  4.68e-01  
 15  +3.6978e-01  +4.0916e-01  3.94e-02  1.65e-05  2.90e-03  3.75e-06  6.10e-05  4.13e-01  
 16  +3.6154e-01  +3.7284e-01  1.13e-02  4.62e-06  8.12e-04  1.14e-06  1.81e-05  8.44e-01  
 17  +3.5819e-01  +3.5926e-01  1.07e-03  4.32e-07  7.60e-05  1.08e-07  1.76e-06  9.90e-01  
 18  +3.5781e-01  +3.5782e-01  1.36e-05  5.50e-09  9.67e-07  1.36e-09  2.25e-08  9.88e-01  
 19  +3.5780e-01  +3.5780e-01  1.36e-07  5.50e-11  9.67e-09  1.36e-11  2.25e-10  9.90e-01  
 20  +3.5780e-01  +3.5780e-01  1.36e-09  5.50e-13  9.67e-11  1.36e-13  2.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.8244ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:22 PM: Optimal value: 3.578e-01
(CVXPY) Oct 06 04:26:22 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:22 PM: Solver (including time spent in interface) took 1.568e-01 seconds
Iteration: 19, Objective: 0.3578
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:22 PM: Your problem has 2707 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:22 PM: Finished problem compilation (took 3.133e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2707
  constraints   = 5207
  nnz(P)        = 0
  nnz(A)        = 45113
  cones (total) = 1
    : Nonnegative = 1,  numel = 5207

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.74e+01  1.00e+00  1.01e+00   ------   
  1  +5.7489e-01  +5.5038e+02  5.50e+02  4.45e-01  5.68e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2670e-01  +5.8315e+01  5.78e+01  1.67e-01  2.69e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0766e-01  +1.4902e+01  1.44e+01  9.97e-02  1.65e+01  5.49e-05  2.35e-01  4.80e-01  
  4  +5.0074e-01  +1.5922e+00  1.09e+00  1.10e-02  1.89e+00  9.08e-06  1.02e-01  8.27e-01  
  5  +5.0047e-01  +1.7169e+00  1.22e+00  8.72e-03  1.55e+00  3.18e-05  2.86e-02  8.22e-01  
  6  +4.9777e-01  +1.5793e+00  1.08e+00  1.67e-03  3.05e-01  1.54e-04  4.18e-03  8.59e-01  
  7  +4.8862e-01  +1.3590e+00  8.70e-01  5.63e-04  1.03e-01  3.06e-04  1.40e-03  6.94e-01  
  8  +4.8172e-01  +1.2068e+00  7.25e-01  4.21e-04  7.64e-02  1.69e-04  1.07e-03  5.34e-01  
  9  +4.6714e-01  +1.0319e+00  5.65e-01  2.89e-04  5.23e-02  1.11e-04  7.60e-04  4.54e-01  
 10  +4.4332e-01  +7.9115e-01  3.48e-01  1.87e-04  3.34e-02  1.30e-05  5.37e-04  8.54e-01  
 11  +4.3773e-01  +7.6123e-01  3.24e-01  1.69e-04  3.01e-02  1.37e-05  4.91e-04  1.60e-01  
 12  +4.3603e-01  +7.5329e-01  3.17e-01  1.65e-04  2.94e-02  1.70e-05  4.84e-04  2.12e-01  
 13  +4.0623e-01  +5.8968e-01  1.83e-01  8.52e-05  1.50e-02  9.83e-06  2.71e-04  4.90e-01  
 14  +3.8413e-01  +4.8306e-01  9.89e-02  4.34e-05  7.64e-03  6.70e-06  1.50e-04  6.25e-01  
 15  +3.6722e-01  +4.0542e-01  3.82e-02  1.61e-05  2.82e-03  3.23e-06  5.99e-05  7.81e-01  
 16  +3.6594e-01  +3.9996e-01  3.40e-02  1.42e-05  2.49e-03  2.94e-06  5.32e-05  1.62e-01  
 17  +3.6319e-01  +3.8617e-01  2.30e-02  9.45e-06  1.66e-03  2.48e-06  3.60e-05  9.90e-01  
 18  +3.5889e-01  +3.6947e-01  1.06e-02  4.30e-06  7.56e-04  1.15e-06  1.69e-05  5.85e-01  
 19  +3.5555e-01  +3.5651e-01  9.63e-04  3.89e-07  6.84e-05  1.01e-07  1.58e-06  9.31e-01  
 20  +3.5520e-01  +3.5522e-01  1.18e-05  4.74e-09  8.34e-07  1.22e-09  1.93e-08  9.90e-01  
 21  +3.5520e-01  +3.5520e-01  1.18e-07  4.74e-11  8.34e-09  1.22e-11  1.93e-10  9.90e-01  
 22  +3.5520e-01  +3.5520e-01  1.18e-09  4.74e-13  8.35e-11  1.23e-13  1.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.7579ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:23 PM: Optimal value: 3.552e-01
(CVXPY) Oct 06 04:26:23 PM: Compilation took 3.133e-02 seconds
(CVXPY) Oct 06 04:26:23 PM: Solver (including time spent in interface) took 1.724e-01 seconds
Iteration: 20, Objective: 0.3552
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:23 PM: Your problem has 2717 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:23 PM: Finished problem compilation (took 3.133e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2717
  constraints   = 5217
  nnz(P)        = 0
  nnz(A)        = 45330
  cones (total) = 1
    : Nonnegative = 1,  numel = 5217

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.73e+01  1.00e+00  1.01e+00   ------   
  1  +5.7477e-01  +5.5031e+02  5.50e+02  4.45e-01  5.66e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2662e-01  +5.8352e+01  5.78e+01  1.66e-01  2.68e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0770e-01  +1.4847e+01  1.43e+01  9.91e-02  1.64e+01  5.53e-05  2.32e-01  4.90e-01  
  4  +5.0072e-01  +1.6063e+00  1.11e+00  1.12e-02  1.92e+00  9.38e-06  1.02e-01  8.22e-01  
  5  +5.0041e-01  +1.7292e+00  1.23e+00  8.86e-03  1.58e+00  3.17e-05  2.92e-02  8.15e-01  
  6  +4.9714e-01  +1.5755e+00  1.08e+00  1.59e-03  2.91e-01  1.62e-04  3.99e-03  8.70e-01  
  7  +4.8729e-01  +1.3376e+00  8.50e-01  5.68e-04  1.04e-01  2.88e-04  1.42e-03  6.79e-01  
  8  +4.8005e-01  +1.2031e+00  7.23e-01  4.18e-04  7.60e-02  1.82e-04  1.06e-03  5.14e-01  
  9  +4.6981e-01  +1.0651e+00  5.95e-01  3.27e-04  5.91e-02  1.14e-04  8.55e-04  4.02e-01  
 10  +4.4199e-01  +7.9099e-01  3.49e-01  1.75e-04  3.13e-02  1.26e-05  4.95e-04  9.90e-01  
 11  +4.0274e-01  +5.7265e-01  1.70e-01  7.70e-05  1.36e-02  7.44e-06  2.45e-04  6.07e-01  
 12  +3.8664e-01  +4.9781e-01  1.11e-01  4.90e-05  8.60e-03  6.54e-06  1.66e-04  4.85e-01  
 13  +3.7509e-01  +4.4495e-01  6.99e-02  3.00e-05  5.26e-03  4.73e-06  1.07e-04  4.72e-01  
 14  +3.6355e-01  +3.9270e-01  2.92e-02  1.21e-05  2.12e-03  2.94e-06  4.56e-05  9.05e-01  
 15  +3.6297e-01  +3.8994e-01  2.70e-02  1.12e-05  1.97e-03  2.71e-06  4.28e-05  2.16e-01  
 16  +3.6217e-01  +3.8650e-01  2.43e-02  1.01e-05  1.77e-03  2.47e-06  3.86e-05  2.15e-01  
 17  +3.6080e-01  +3.8083e-01  2.00e-02  8.27e-06  1.45e-03  2.07e-06  3.18e-05  3.22e-01  
 18  +3.5843e-01  +3.7146e-01  1.30e-02  5.32e-06  9.32e-04  1.36e-06  2.08e-05  4.41e-01  
 19  +3.5484e-01  +3.5729e-01  2.45e-03  9.91e-07  1.74e-04  2.54e-07  3.99e-06  8.23e-01  
 20  +3.5401e-01  +3.5404e-01  2.97e-05  1.20e-08  2.10e-06  3.05e-09  4.85e-08  9.88e-01  
 21  +3.5400e-01  +3.5400e-01  2.97e-07  1.20e-10  2.10e-08  3.05e-11  4.85e-10  9.90e-01  
 22  +3.5400e-01  +3.5400e-01  2.97e-09  1.20e-12  2.10e-10  3.06e-13  4.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 167.6281ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:23 PM: Optimal value: 3.540e-01
(CVXPY) Oct 06 04:26:23 PM: Compilation took 3.133e-02 seconds
(CVXPY) Oct 06 04:26:23 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 21, Objective: 0.3540
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:23 PM: Your problem has 2727 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:23 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2727
  constraints   = 5227
  nnz(P)        = 0
  nnz(A)        = 45492
  cones (total) = 1
    : Nonnegative = 1,  numel = 5227

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.7463e-01  +5.5029e+02  5.50e+02  4.46e-01  5.65e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2655e-01  +5.8386e+01  5.79e+01  1.66e-01  2.68e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0773e-01  +1.4776e+01  1.43e+01  9.85e-02  1.63e+01  5.56e-05  2.29e-01  5.01e-01  
  4  +5.0071e-01  +1.6316e+00  1.13e+00  1.14e-02  1.96e+00  9.70e-06  1.04e-01  8.12e-01  
  5  +5.0026e-01  +1.8346e+00  1.33e+00  8.53e-03  1.52e+00  3.86e-05  2.62e-02  8.68e-01  
  6  +4.9574e-01  +1.6271e+00  1.13e+00  1.43e-03  2.61e-01  1.92e-04  3.57e-03  8.67e-01  
  7  +4.8499e-01  +1.3293e+00  8.44e-01  5.82e-04  1.06e-01  2.54e-04  1.46e-03  6.43e-01  
  8  +4.7585e-01  +1.1826e+00  7.07e-01  3.96e-04  7.18e-02  1.73e-04  1.02e-03  5.53e-01  
  9  +4.6833e-01  +1.0879e+00  6.20e-01  3.35e-04  6.04e-02  1.28e-04  8.76e-04  2.82e-01  
 10  +4.4013e-01  +7.9612e-01  3.56e-01  1.79e-04  3.19e-02  1.64e-05  5.09e-04  9.02e-01  
 11  +4.0348e-01  +5.9003e-01  1.87e-01  8.59e-05  1.51e-02  1.28e-05  2.74e-04  7.33e-01  
 12  +3.8303e-01  +4.8995e-01  1.07e-01  4.73e-05  8.29e-03  8.30e-06  1.63e-04  5.92e-01  
 13  +3.7263e-01  +4.4100e-01  6.84e-02  2.95e-05  5.16e-03  5.75e-06  1.07e-04  4.86e-01  
 14  +3.6136e-01  +3.8850e-01  2.71e-02  1.13e-05  1.98e-03  2.89e-06  4.36e-05  9.55e-01  
 15  +3.6062e-01  +3.8493e-01  2.43e-02  1.02e-05  1.78e-03  2.55e-06  3.96e-05  3.34e-01  
 16  +3.6021e-01  +3.8311e-01  2.29e-02  9.59e-06  1.68e-03  2.41e-06  3.73e-05  1.53e-01  
 17  +3.5905e-01  +3.7838e-01  1.93e-02  8.04e-06  1.41e-03  2.05e-06  3.14e-05  3.14e-01  
 18  +3.5564e-01  +3.6491e-01  9.27e-03  3.80e-06  6.65e-04  9.79e-07  1.53e-05  5.94e-01  
 19  +3.5276e-01  +3.5351e-01  7.56e-04  3.08e-07  5.38e-05  7.87e-08  1.27e-06  9.23e-01  
 20  +3.5250e-01  +3.5251e-01  7.77e-06  3.16e-09  5.53e-07  8.08e-10  1.31e-08  9.90e-01  
 21  +3.5250e-01  +3.5250e-01  7.77e-08  3.16e-11  5.53e-09  8.09e-12  1.31e-10  9.90e-01  
 22  +3.5250e-01  +3.5250e-01  7.77e-10  3.16e-13  5.53e-11  8.10e-14  1.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.8795ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:24 PM: Optimal value: 3.525e-01
(CVXPY) Oct 06 04:26:24 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:26:24 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 22, Objective: 0.3525
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:24 PM: Your problem has 2737 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:24 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:24 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2737
  constraints   = 5237
  nnz(P)        = 0
  nnz(A)        = 45775
  cones (total) = 1
    : Nonnegative = 1,  numel = 5237

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.7451e-01  +5.5030e+02  5.50e+02  4.46e-01  5.65e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2651e-01  +5.8453e+01  5.79e+01  1.66e-01  2.67e+01  1.86e-02  2.79e-01  9.90e-01  
  3  +5.0776e-01  +1.4710e+01  1.42e+01  9.79e-02  1.62e+01  5.59e-05  2.27e-01  5.10e-01  
  4  +5.0068e-01  +1.6111e+00  1.11e+00  1.13e-02  1.93e+00  9.82e-06  1.03e-01  8.17e-01  
  5  +5.0020e-01  +1.8995e+00  1.40e+00  8.58e-03  1.53e+00  4.13e-05  2.57e-02  8.74e-01  
  6  +4.9515e-01  +1.6619e+00  1.17e+00  1.41e-03  2.58e-01  2.00e-04  3.52e-03  8.66e-01  
  7  +4.8329e-01  +1.3261e+00  8.43e-01  5.68e-04  1.03e-01  2.50e-04  1.43e-03  6.49e-01  
  8  +4.7150e-01  +1.1748e+00  7.03e-01  3.70e-04  6.70e-02  1.93e-04  9.53e-04  5.21e-01  
  9  +4.6444e-01  +1.0920e+00  6.28e-01  3.20e-04  5.76e-02  1.49e-04  8.39e-04  2.44e-01  
 10  +4.3931e-01  +7.9184e-01  3.53e-01  1.91e-04  3.39e-02  1.28e-06  5.50e-04  8.92e-01  
 11  +4.0192e-01  +5.8569e-01  1.84e-01  8.50e-05  1.50e-02  5.41e-06  2.72e-04  6.35e-01  
 12  +3.8575e-01  +5.0675e-01  1.21e-01  5.43e-05  9.52e-03  6.54e-06  1.85e-04  5.37e-01  
 13  +3.7081e-01  +4.3515e-01  6.43e-02  2.80e-05  4.90e-03  4.15e-06  1.02e-04  5.66e-01  
 14  +3.6260e-01  +3.9630e-01  3.37e-02  1.43e-05  2.50e-03  3.10e-06  5.49e-05  8.32e-01  
 15  +3.6165e-01  +3.9167e-01  3.00e-02  1.28e-05  2.24e-03  2.82e-06  4.96e-05  3.26e-01  
 16  +3.6001e-01  +3.8450e-01  2.45e-02  1.04e-05  1.81e-03  2.36e-06  4.06e-05  3.41e-01  
 17  +3.5823e-01  +3.7702e-01  1.88e-02  7.90e-06  1.38e-03  1.84e-06  3.13e-05  3.68e-01  
 18  +3.5640e-01  +3.6966e-01  1.33e-02  5.51e-06  9.63e-04  1.32e-06  2.21e-05  4.06e-01  
 19  +3.5287e-01  +3.5547e-01  2.60e-03  1.07e-06  1.87e-04  2.57e-07  4.43e-06  8.08e-01  
 20  +3.5201e-01  +3.5205e-01  3.38e-05  1.39e-08  2.43e-06  3.31e-09  5.80e-08  9.87e-01  
 21  +3.5200e-01  +3.5200e-01  3.38e-07  1.39e-10  2.43e-08  3.31e-11  5.80e-10  9.90e-01  
 22  +3.5200e-01  +3.5200e-01  3.38e-09  1.39e-12  2.43e-10  3.31e-13  5.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 169.6259ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:24 PM: Optimal value: 3.520e-01
(CVXPY) Oct 06 04:26:24 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:24 PM: Solver (including time spent in interface) took 1.878e-01 seconds
Iteration: 23, Objective: 0.3520
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:24 PM: Your problem has 2747 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:24 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2747
  constraints   = 5247
  nnz(P)        = 0
  nnz(A)        = 45893
  cones (total) = 1
    : Nonnegative = 1,  numel = 5247

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.7439e-01  +5.5018e+02  5.50e+02  4.46e-01  5.63e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2646e-01  +5.8482e+01  5.80e+01  1.66e-01  2.66e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0778e-01  +1.4627e+01  1.41e+01  9.73e-02  1.61e+01  5.60e-05  2.25e-01  5.19e-01  
  4  +5.0066e-01  +1.6121e+00  1.11e+00  1.13e-02  1.94e+00  1.00e-05  1.03e-01  8.15e-01  
  5  +5.0017e-01  +2.0503e+00  1.55e+00  9.10e-03  1.63e+00  4.46e-05  2.68e-02  8.83e-01  
  6  +4.9468e-01  +1.7278e+00  1.23e+00  1.47e-03  2.69e-01  2.00e-04  3.68e-03  8.64e-01  
  7  +4.8438e-01  +1.3608e+00  8.76e-01  6.52e-04  1.19e-01  2.08e-04  1.65e-03  6.33e-01  
  8  +4.7705e-01  +1.2294e+00  7.52e-01  4.50e-04  8.14e-02  1.55e-04  1.15e-03  5.40e-01  
  9  +4.6990e-01  +1.1248e+00  6.55e-01  3.75e-04  6.76e-02  1.14e-04  9.79e-04  3.08e-01  
 10  +4.5996e-01  +1.0288e+00  5.69e-01  3.04e-04  5.45e-02  9.17e-05  8.13e-04  2.75e-01  
 11  +4.2818e-01  +7.3078e-01  3.03e-01  1.50e-04  2.66e-02  1.26e-05  4.43e-04  9.69e-01  
 12  +3.9632e-01  +5.5781e-01  1.61e-01  7.47e-05  1.31e-02  6.65e-06  2.44e-04  4.98e-01  
 13  +3.7413e-01  +4.4967e-01  7.55e-02  3.36e-05  5.87e-03  3.77e-06  1.20e-04  5.94e-01  
 14  +3.7157e-01  +4.3794e-01  6.64e-02  2.92e-05  5.09e-03  3.75e-06  1.06e-04  2.25e-01  
 15  +3.6041e-01  +3.8717e-01  2.68e-02  1.14e-05  1.99e-03  2.06e-06  4.39e-05  7.61e-01  
 16  +3.6012e-01  +3.8557e-01  2.55e-02  1.09e-05  1.90e-03  1.99e-06  4.24e-05  1.40e-01  
 17  +3.5995e-01  +3.8474e-01  2.48e-02  1.06e-05  1.85e-03  1.98e-06  4.12e-05  8.93e-02  
 18  +3.5870e-01  +3.7930e-01  2.06e-02  8.73e-06  1.52e-03  1.77e-06  3.41e-05  3.62e-01  
 19  +3.5373e-01  +3.5894e-01  5.20e-03  2.17e-06  3.78e-04  4.70e-07  8.83e-06  8.45e-01  
 20  +3.5209e-01  +3.5234e-01  2.52e-04  1.04e-07  1.82e-05  2.37e-08  4.33e-07  9.90e-01  
 21  +3.5200e-01  +3.5200e-01  2.53e-06  1.05e-09  1.83e-07  2.38e-10  4.36e-09  9.90e-01  
 22  +3.5200e-01  +3.5200e-01  2.53e-08  1.05e-11  1.83e-09  2.38e-12  4.36e-11  9.90e-01  
 23  +3.5200e-01  +3.5200e-01  2.53e-10  1.05e-13  1.83e-11  2.39e-14  4.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 171.217ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:24 PM: Optimal value: 3.520e-01
(CVXPY) Oct 06 04:26:24 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:24 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 24, Objective: 0.3520
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:25 PM: Your problem has 2757 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:25 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2757
  constraints   = 5257
  nnz(P)        = 0
  nnz(A)        = 46008
  cones (total) = 1
    : Nonnegative = 1,  numel = 5257

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.7428e-01  +5.5018e+02  5.50e+02  4.46e-01  5.63e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2641e-01  +5.8554e+01  5.80e+01  1.66e-01  2.65e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0781e-01  +1.4537e+01  1.40e+01  9.66e-02  1.59e+01  5.62e-05  2.22e-01  5.30e-01  
  4  +5.0064e-01  +1.6198e+00  1.12e+00  1.14e-02  1.95e+00  1.03e-05  1.04e-01  8.09e-01  
  5  +5.0011e-01  +1.9357e+00  1.44e+00  9.25e-03  1.65e+00  3.95e-05  2.85e-02  8.61e-01  
  6  +4.9416e-01  +1.6359e+00  1.14e+00  1.38e-03  2.51e-01  2.03e-04  3.46e-03  8.81e-01  
  7  +4.8360e-01  +1.2600e+00  7.76e-01  5.90e-04  1.07e-01  1.85e-04  1.50e-03  7.00e-01  
  8  +4.7526e-01  +1.1648e+00  6.90e-01  4.04e-04  7.29e-02  1.50e-04  1.04e-03  5.47e-01  
  9  +4.6713e-01  +1.0642e+00  5.97e-01  3.34e-04  6.01e-02  1.02e-04  8.81e-04  3.73e-01  
 10  +4.4537e-01  +8.6870e-01  4.23e-01  2.18e-04  3.89e-02  4.87e-05  6.10e-04  5.91e-01  
 11  +4.0101e-01  +5.8573e-01  1.85e-01  8.40e-05  1.48e-02  1.52e-05  2.67e-04  6.51e-01  
 12  +3.8345e-01  +4.9979e-01  1.16e-01  5.20e-05  9.09e-03  1.01e-05  1.78e-04  4.99e-01  
 13  +3.6922e-01  +4.3177e-01  6.25e-02  2.72e-05  4.75e-03  5.62e-06  9.99e-05  5.37e-01  
 14  +3.6202e-01  +3.9724e-01  3.52e-02  1.50e-05  2.62e-03  3.53e-06  5.77e-05  7.78e-01  
 15  +3.6064e-01  +3.9061e-01  3.00e-02  1.28e-05  2.23e-03  3.01e-06  4.98e-05  4.23e-01  
 16  +3.5856e-01  +3.8151e-01  2.29e-02  9.75e-06  1.70e-03  2.33e-06  3.85e-05  4.18e-01  
 17  +3.5678e-01  +3.7398e-01  1.72e-02  7.27e-06  1.27e-03  1.75e-06  2.90e-05  3.80e-01  
 18  +3.5498e-01  +3.6672e-01  1.17e-02  4.91e-06  8.56e-04  1.20e-06  1.98e-05  4.36e-01  
 19  +3.5170e-01  +3.5350e-01  1.80e-03  7.47e-07  1.30e-04  1.82e-07  3.11e-06  8.53e-01  
 20  +3.5111e-01  +3.5113e-01  2.18e-05  9.04e-09  1.58e-06  2.18e-09  3.79e-08  9.88e-01  
 21  +3.5110e-01  +3.5110e-01  2.18e-07  9.05e-11  1.58e-08  2.19e-11  3.79e-10  9.90e-01  
 22  +3.5110e-01  +3.5110e-01  2.18e-09  9.05e-13  1.58e-10  2.19e-13  3.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 168.2468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:25 PM: Optimal value: 3.511e-01
(CVXPY) Oct 06 04:26:25 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:25 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 25, Objective: 0.3511
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:25 PM: Your problem has 2767 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:25 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2767
  constraints   = 5267
  nnz(P)        = 0
  nnz(A)        = 46159
  cones (total) = 1
    : Nonnegative = 1,  numel = 5267

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.7402e-01  +5.5035e+02  5.50e+02  4.46e-01  5.62e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2629e-01  +5.8684e+01  5.82e+01  1.66e-01  2.65e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0786e-01  +1.4342e+01  1.38e+01  9.51e-02  1.57e+01  5.68e-05  2.17e-01  5.51e-01  
  4  +5.0060e-01  +1.6535e+00  1.15e+00  1.18e-02  2.01e+00  1.09e-05  1.07e-01  7.89e-01  
  5  +4.9987e-01  +1.8648e+00  1.36e+00  8.83e-03  1.57e+00  3.99e-05  2.75e-02  8.79e-01  
  6  +4.9184e-01  +1.5572e+00  1.07e+00  1.15e-03  2.10e-01  2.35e-04  2.89e-03  8.97e-01  
  7  +4.9195e-01  +1.3872e+00  8.95e-01  9.55e-04  1.74e-01  1.16e-04  2.40e-03  5.21e-01  
  8  +4.7306e-01  +1.1241e+00  6.51e-01  3.61e-04  6.52e-02  1.60e-04  9.25e-04  6.48e-01  
  9  +4.7071e-01  +1.0927e+00  6.22e-01  3.45e-04  6.23e-02  1.28e-04  8.91e-04  2.16e-01  
 10  +4.5926e-01  +1.0008e+00  5.42e-01  2.80e-04  5.02e-02  1.03e-04  7.44e-04  2.57e-01  
 11  +4.3745e-01  +8.2012e-01  3.83e-01  2.00e-04  3.55e-02  3.09e-05  5.74e-04  7.27e-01  
 12  +3.9761e-01  +5.7958e-01  1.82e-01  8.38e-05  1.47e-02  1.25e-05  2.71e-04  5.72e-01  
 13  +3.7603e-01  +4.7066e-01  9.46e-02  4.25e-05  7.41e-03  6.91e-06  1.50e-04  5.65e-01  
 14  +3.6907e-01  +4.3725e-01  6.82e-02  3.00e-05  5.23e-03  5.36e-06  1.10e-04  3.85e-01  
 15  +3.5833e-01  +3.8572e-01  2.74e-02  1.17e-05  2.04e-03  2.81e-06  4.56e-05  9.49e-01  
 16  +3.5790e-01  +3.8348e-01  2.56e-02  1.10e-05  1.91e-03  2.58e-06  4.33e-05  2.05e-01  
 17  +3.5770e-01  +3.8259e-01  2.49e-02  1.07e-05  1.86e-03  2.52e-06  4.21e-05  7.37e-02  
 18  +3.5650e-01  +3.7736e-01  2.09e-02  8.91e-06  1.55e-03  2.13e-06  3.53e-05  3.40e-01  
 19  +3.5501e-01  +3.7133e-01  1.63e-02  6.90e-06  1.20e-03  1.67e-06  2.76e-05  3.24e-01  
 20  +3.5106e-01  +3.5519e-01  4.13e-03  1.73e-06  3.01e-04  4.18e-07  7.18e-06  7.64e-01  
 21  +3.4974e-01  +3.4985e-01  1.11e-04  4.65e-08  8.09e-06  1.10e-08  1.96e-07  9.77e-01  
 22  +3.4970e-01  +3.4970e-01  1.11e-06  4.65e-10  8.10e-08  1.10e-10  1.96e-09  9.90e-01  
 23  +3.4970e-01  +3.4970e-01  1.11e-08  4.65e-12  8.10e-10  1.10e-12  1.96e-11  9.90e-01  
 24  +3.4970e-01  +3.4970e-01  1.11e-10  4.64e-14  8.10e-12  1.10e-14  1.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 178.6869ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:25 PM: Optimal value: 3.497e-01
(CVXPY) Oct 06 04:26:25 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:25 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 26, Objective: 0.3497
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:26 PM: Your problem has 2777 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:26 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2777
  constraints   = 5277
  nnz(P)        = 0
  nnz(A)        = 46419
  cones (total) = 1
    : Nonnegative = 1,  numel = 5277

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.7391e-01  +5.5038e+02  5.50e+02  4.47e-01  5.61e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2623e-01  +5.8739e+01  5.82e+01  1.66e-01  2.64e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0788e-01  +1.4235e+01  1.37e+01  9.43e-02  1.56e+01  5.70e-05  2.15e-01  5.61e-01  
  4  +5.0057e-01  +1.6548e+00  1.15e+00  1.18e-02  2.02e+00  1.12e-05  1.08e-01  7.85e-01  
  5  +4.9967e-01  +1.7948e+00  1.30e+00  8.15e-03  1.45e+00  4.16e-05  2.51e-02  8.92e-01  
  6  +4.9308e-01  +1.5979e+00  1.10e+00  1.49e-03  2.71e-01  1.94e-04  3.79e-03  8.52e-01  
  7  +4.9243e-01  +1.2449e+00  7.53e-01  8.29e-04  1.51e-01  4.50e-05  2.08e-03  9.90e-01  
  8  +4.7823e-01  +1.1026e+00  6.24e-01  3.74e-04  6.76e-02  6.79e-05  9.50e-04  5.77e-01  
  9  +4.7325e-01  +1.0627e+00  5.89e-01  3.40e-04  6.12e-02  6.27e-05  8.75e-04  1.90e-01  
 10  +4.5011e-01  +8.9387e-01  4.44e-01  2.27e-04  4.05e-02  4.28e-05  6.18e-04  5.49e-01  
 11  +4.1104e-01  +6.5245e-01  2.41e-01  1.13e-04  1.99e-02  1.89e-05  3.47e-04  5.38e-01  
 12  +3.8609e-01  +5.2331e-01  1.37e-01  6.29e-05  1.10e-02  1.04e-05  2.13e-04  4.85e-01  
 13  +3.6730e-01  +4.3141e-01  6.41e-02  2.85e-05  4.97e-03  5.19e-06  1.05e-04  6.33e-01  
 14  +3.6085e-01  +4.0053e-01  3.97e-02  1.72e-05  3.00e-03  3.78e-06  6.61e-05  7.66e-01  
 15  +3.5906e-01  +3.9249e-01  3.34e-02  1.44e-05  2.51e-03  3.22e-06  5.59e-05  2.68e-01  
 16  +3.5238e-01  +3.6324e-01  1.09e-02  4.62e-06  8.02e-04  1.07e-06  1.89e-05  7.99e-01  
 17  +3.4960e-01  +3.5163e-01  2.03e-03  8.56e-07  1.49e-04  1.93e-07  3.61e-06  9.59e-01  
 18  +3.4891e-01  +3.4894e-01  3.11e-05  1.31e-08  2.27e-06  2.93e-09  5.55e-08  9.85e-01  
 19  +3.4890e-01  +3.4890e-01  3.11e-07  1.31e-10  2.27e-08  2.93e-11  5.55e-10  9.90e-01  
 20  +3.4890e-01  +3.4890e-01  3.11e-09  1.31e-12  2.27e-10  2.94e-13  5.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.8255ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:26 PM: Optimal value: 3.489e-01
(CVXPY) Oct 06 04:26:26 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:26 PM: Solver (including time spent in interface) took 1.723e-01 seconds
Iteration: 27, Objective: 0.3489
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:26 PM: Your problem has 2779 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:26 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2779
  constraints   = 5279
  nnz(P)        = 0
  nnz(A)        = 46575
  cones (total) = 1
    : Nonnegative = 1,  numel = 5279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.7385e-01  +5.5032e+02  5.50e+02  4.47e-01  5.61e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2620e-01  +5.8773e+01  5.82e+01  1.66e-01  2.64e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0789e-01  +1.4164e+01  1.37e+01  9.37e-02  1.55e+01  5.71e-05  2.13e-01  5.68e-01  
  4  +5.0055e-01  +1.6471e+00  1.15e+00  1.17e-02  2.00e+00  1.13e-05  1.08e-01  7.85e-01  
  5  +4.9961e-01  +1.7916e+00  1.29e+00  8.13e-03  1.45e+00  4.20e-05  2.51e-02  8.91e-01  
  6  +4.8936e-01  +1.4932e+00  1.00e+00  9.71e-04  1.77e-01  2.72e-04  2.44e-03  9.05e-01  
  7  +4.8696e-01  +1.3154e+00  8.28e-01  7.31e-04  1.33e-01  1.34e-04  1.84e-03  5.93e-01  
  8  +4.6627e-01  +1.0914e+00  6.25e-01  3.29e-04  5.92e-02  1.58e-04  8.53e-04  5.71e-01  
  9  +4.5620e-01  +9.9166e-01  5.35e-01  2.85e-04  5.11e-02  1.05e-04  7.64e-04  2.75e-01  
 10  +4.2661e-01  +7.6659e-01  3.40e-01  1.67e-04  2.96e-02  4.76e-05  4.86e-04  5.15e-01  
 11  +3.9266e-01  +5.6320e-01  1.71e-01  7.93e-05  1.39e-02  1.87e-05  2.59e-04  5.26e-01  
 12  +3.7238e-01  +4.5933e-01  8.69e-02  3.92e-05  6.85e-03  9.00e-06  1.40e-04  5.84e-01  
 13  +3.6859e-01  +4.4071e-01  7.21e-02  3.20e-05  5.60e-03  7.55e-06  1.17e-04  2.80e-01  
 14  +3.5753e-01  +3.8663e-01  2.91e-02  1.25e-05  2.18e-03  3.16e-06  4.86e-05  9.85e-01  
 15  +3.5686e-01  +3.8346e-01  2.66e-02  1.15e-05  2.01e-03  2.81e-06  4.52e-05  2.17e-01  
 16  +3.5639e-01  +3.8137e-01  2.50e-02  1.08e-05  1.88e-03  2.64e-06  4.25e-05  1.18e-01  
 17  +3.5484e-01  +3.7460e-01  1.98e-02  8.49e-06  1.48e-03  2.08e-06  3.38e-05  3.86e-01  
 18  +3.5366e-01  +3.6983e-01  1.62e-02  6.88e-06  1.20e-03  1.70e-06  2.75e-05  3.10e-01  
 19  +3.4974e-01  +3.5379e-01  4.06e-03  1.71e-06  2.98e-04  4.22e-07  7.12e-06  7.66e-01  
 20  +3.4843e-01  +3.4851e-01  8.58e-05  3.61e-08  6.29e-06  8.59e-09  1.52e-07  9.83e-01  
 21  +3.4840e-01  +3.4840e-01  8.58e-07  3.61e-10  6.29e-08  8.60e-11  1.52e-09  9.90e-01  
 22  +3.4840e-01  +3.4840e-01  8.58e-09  3.61e-12  6.29e-10  8.60e-13  1.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 178.1138ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:26 PM: Optimal value: 3.484e-01
(CVXPY) Oct 06 04:26:26 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:26:26 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 28, Objective: 0.3484
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:26 PM: Your problem has 2789 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:26 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2789
  constraints   = 5289
  nnz(P)        = 0
  nnz(A)        = 46686
  cones (total) = 1
    : Nonnegative = 1,  numel = 5289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5016e+03  2.50e+03  9.81e-01  8.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7364e-01  +5.5029e+02  5.50e+02  4.47e-01  5.60e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2608e-01  +5.8856e+01  5.83e+01  1.66e-01  2.64e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0793e-01  +1.3944e+01  1.34e+01  9.19e-02  1.53e+01  5.75e-05  2.08e-01  5.87e-01  
  4  +5.0048e-01  +1.6362e+00  1.14e+00  1.16e-02  1.99e+00  1.19e-05  1.09e-01  7.79e-01  
  5  +4.9951e-01  +1.6889e+00  1.19e+00  8.13e-03  1.44e+00  3.86e-05  2.65e-02  8.61e-01  
  6  +4.9122e-01  +1.4940e+00  1.00e+00  1.31e-03  2.37e-01  2.14e-04  3.33e-03  8.77e-01  
  7  +4.8995e-01  +1.2981e+00  8.08e-01  8.69e-04  1.58e-01  9.55e-05  2.19e-03  7.82e-01  
  8  +4.6931e-01  +1.0764e+00  6.07e-01  3.28e-04  5.92e-02  1.40e-04  8.44e-04  6.52e-01  
  9  +4.6579e-01  +1.0453e+00  5.80e-01  3.14e-04  5.65e-02  1.25e-04  8.16e-04  8.67e-02  
 10  +4.4749e-01  +8.8510e-01  4.38e-01  2.51e-04  4.46e-02  2.31e-05  7.04e-04  7.99e-01  
 11  +4.3423e-01  +8.0983e-01  3.76e-01  2.03e-04  3.59e-02  2.39e-05  5.89e-04  4.16e-01  
 12  +3.9849e-01  +5.9839e-01  2.00e-01  9.50e-05  1.67e-02  1.21e-05  3.06e-04  5.33e-01  
 13  +3.7044e-01  +4.5493e-01  8.45e-02  3.82e-05  6.68e-03  5.54e-06  1.38e-04  6.70e-01  
 14  +3.6496e-01  +4.2898e-01  6.40e-02  2.84e-05  4.96e-03  4.76e-06  1.05e-04  4.03e-01  
 15  +3.5650e-01  +3.8877e-01  3.23e-02  1.40e-05  2.43e-03  3.08e-06  5.42e-05  8.38e-01  
 16  +3.5478e-01  +3.7954e-01  2.48e-02  1.07e-05  1.86e-03  2.52e-06  4.21e-05  9.90e-01  
 17  +3.5085e-01  +3.6369e-01  1.28e-02  5.46e-06  9.53e-04  1.32e-06  2.22e-05  6.66e-01  
 18  +3.4712e-01  +3.4892e-01  1.80e-03  7.57e-07  1.32e-04  1.78e-07  3.19e-06  9.03e-01  
 19  +3.4651e-01  +3.4655e-01  3.35e-05  1.41e-08  2.45e-06  3.29e-09  5.97e-08  9.82e-01  
 20  +3.4650e-01  +3.4650e-01  3.35e-07  1.41e-10  2.45e-08  3.30e-11  5.98e-10  9.90e-01  
 21  +3.4650e-01  +3.4650e-01  3.35e-09  1.41e-12  2.45e-10  3.31e-13  6.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 163.4575ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:27 PM: Optimal value: 3.465e-01
(CVXPY) Oct 06 04:26:27 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:27 PM: Solver (including time spent in interface) took 1.721e-01 seconds
Iteration: 29, Objective: 0.3465
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:27 PM: Your problem has 2791 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:27 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2791
  constraints   = 5291
  nnz(P)        = 0
  nnz(A)        = 46729
  cones (total) = 1
    : Nonnegative = 1,  numel = 5291

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.81e-01  8.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7363e-01  +5.5027e+02  5.50e+02  4.47e-01  5.60e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2607e-01  +5.8856e+01  5.83e+01  1.66e-01  2.63e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0793e-01  +1.3924e+01  1.34e+01  9.17e-02  1.52e+01  5.75e-05  2.07e-01  5.89e-01  
  4  +5.0048e-01  +1.6416e+00  1.14e+00  1.17e-02  2.00e+00  1.20e-05  1.09e-01  7.76e-01  
  5  +4.9953e-01  +1.6717e+00  1.17e+00  8.18e-03  1.45e+00  3.74e-05  2.70e-02  8.54e-01  
  6  +4.9141e-01  +1.4854e+00  9.94e-01  1.33e-03  2.41e-01  2.10e-04  3.38e-03  8.78e-01  
  7  +4.8989e-01  +1.2902e+00  8.00e-01  8.63e-04  1.56e-01  9.66e-05  2.18e-03  7.96e-01  
  8  +4.6956e-01  +1.0752e+00  6.06e-01  3.30e-04  5.94e-02  1.42e-04  8.48e-04  6.51e-01  
  9  +4.6597e-01  +1.0437e+00  5.78e-01  3.15e-04  5.66e-02  1.26e-04  8.18e-04  9.13e-02  
 10  +4.4853e-01  +8.9151e-01  4.43e-01  2.55e-04  4.54e-02  2.44e-05  7.15e-04  7.89e-01  
 11  +4.3452e-01  +8.1002e-01  3.75e-01  2.03e-04  3.60e-02  2.43e-05  5.89e-04  4.14e-01  
 12  +3.9835e-01  +5.9691e-01  1.99e-01  9.44e-05  1.66e-02  1.22e-05  3.03e-04  5.40e-01  
 13  +3.6969e-01  +4.5102e-01  8.13e-02  3.67e-05  6.42e-03  5.19e-06  1.32e-04  6.60e-01  
 14  +3.6520e-01  +4.2985e-01  6.46e-02  2.87e-05  5.00e-03  4.68e-06  1.05e-04  3.63e-01  
 15  +3.5579e-01  +3.8590e-01  3.01e-02  1.30e-05  2.26e-03  2.86e-06  5.01e-05  8.43e-01  
 16  +3.5405e-01  +3.7712e-01  2.31e-02  9.93e-06  1.73e-03  2.29e-06  3.91e-05  9.90e-01  
 17  +3.5071e-01  +3.6357e-01  1.29e-02  5.45e-06  9.49e-04  1.31e-06  2.19e-05  6.69e-01  
 18  +3.4753e-01  +3.5109e-01  3.56e-03  1.49e-06  2.60e-04  3.62e-07  6.18e-06  7.63e-01  
 19  +3.4633e-01  +3.4643e-01  9.51e-05  3.96e-08  6.91e-06  9.57e-09  1.67e-07  9.74e-01  
 20  +3.4630e-01  +3.4630e-01  9.54e-07  3.97e-10  6.93e-08  9.59e-11  1.67e-09  9.90e-01  
 21  +3.4630e-01  +3.4630e-01  9.54e-09  3.97e-12  6.93e-10  9.59e-13  1.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 168.3301ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:27 PM: Optimal value: 3.463e-01
(CVXPY) Oct 06 04:26:27 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:27 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 30, Objective: 0.3463
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:27 PM: Your problem has 2801 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:27 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2801
  constraints   = 5301
  nnz(P)        = 0
  nnz(A)        = 46832
  cones (total) = 1
    : Nonnegative = 1,  numel = 5301

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5017e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7352e-01  +5.5030e+02  5.50e+02  4.47e-01  5.59e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2603e-01  +5.8899e+01  5.84e+01  1.66e-01  2.63e+01  1.87e-02  2.78e-01  9.90e-01  
  3  +5.0795e-01  +1.3836e+01  1.33e+01  9.10e-02  1.51e+01  5.77e-05  2.05e-01  5.96e-01  
  4  +5.0046e-01  +1.6487e+00  1.15e+00  1.18e-02  2.01e+00  1.22e-05  1.10e-01  7.69e-01  
  5  +4.9950e-01  +1.6425e+00  1.14e+00  8.18e-03  1.44e+00  3.64e-05  2.76e-02  8.48e-01  
  6  +4.9245e-01  +1.4931e+00  1.00e+00  1.56e-03  2.83e-01  1.83e-04  4.02e-03  8.57e-01  
  7  +4.8809e-01  +1.2144e+00  7.26e-01  7.24e-04  1.31e-01  9.78e-05  1.83e-03  9.86e-01  
  8  +4.7604e-01  +1.1122e+00  6.36e-01  4.12e-04  7.42e-02  1.18e-04  1.06e-03  5.07e-01  
  9  +4.6942e-01  +1.0518e+00  5.82e-01  3.63e-04  6.52e-02  9.04e-05  9.48e-04  2.98e-01  
 10  +4.5839e-01  +9.7313e-01  5.15e-01  2.93e-04  5.24e-02  7.80e-05  7.85e-04  2.39e-01  
 11  +4.1071e-01  +6.5079e-01  2.40e-01  1.11e-04  1.95e-02  2.56e-05  3.34e-04  7.14e-01  
 12  +3.8749e-01  +5.3881e-01  1.51e-01  6.91e-05  1.21e-02  1.52e-05  2.28e-04  4.49e-01  
 13  +3.7184e-01  +4.6431e-01  9.25e-02  4.15e-05  7.25e-03  9.14e-06  1.47e-04  4.49e-01  
 14  +3.6090e-01  +4.1312e-01  5.22e-02  2.31e-05  4.03e-03  5.11e-06  8.69e-05  4.58e-01  
 15  +3.5584e-01  +3.8978e-01  3.39e-02  1.48e-05  2.58e-03  3.37e-06  5.71e-05  4.14e-01  
 16  +3.5424e-01  +3.8016e-01  2.59e-02  1.12e-05  1.95e-03  2.60e-06  4.37e-05  9.90e-01  
 17  +3.4989e-01  +3.6236e-01  1.25e-02  5.30e-06  9.22e-04  1.28e-06  2.14e-05  6.93e-01  
 18  +3.4612e-01  +3.4735e-01  1.22e-03  5.14e-07  8.96e-05  1.21e-07  2.16e-06  9.40e-01  
 19  +3.4570e-01  +3.4572e-01  1.42e-05  5.94e-09  1.03e-06  1.39e-09  2.51e-08  9.89e-01  
 20  +3.4570e-01  +3.4570e-01  1.42e-07  5.94e-11  1.04e-08  1.39e-11  2.52e-10  9.90e-01  
 21  +3.4570e-01  +3.4570e-01  1.42e-09  5.94e-13  1.04e-10  1.39e-13  2.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 164.5651ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:28 PM: Optimal value: 3.457e-01
(CVXPY) Oct 06 04:26:28 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:26:28 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 31, Objective: 0.3457
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:28 PM: Your problem has 2811 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:28 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2811
  constraints   = 5311
  nnz(P)        = 0
  nnz(A)        = 47129
  cones (total) = 1
    : Nonnegative = 1,  numel = 5311

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7336e-01  +5.5028e+02  5.50e+02  4.47e-01  5.58e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2593e-01  +5.8960e+01  5.84e+01  1.66e-01  2.62e+01  1.87e-02  2.77e-01  9.90e-01  
  3  +5.0797e-01  +1.3666e+01  1.32e+01  8.97e-02  1.49e+01  5.80e-05  2.01e-01  6.10e-01  
  4  +5.0042e-01  +1.6598e+00  1.16e+00  1.19e-02  2.02e+00  1.28e-05  1.12e-01  7.55e-01  
  5  +4.9937e-01  +1.6677e+00  1.17e+00  8.34e-03  1.47e+00  3.80e-05  2.82e-02  8.48e-01  
  6  +4.9212e-01  +1.5132e+00  1.02e+00  1.67e-03  3.02e-01  1.81e-04  4.31e-03  8.50e-01  
  7  +4.8439e-01  +1.1967e+00  7.12e-01  6.43e-04  1.16e-01  1.37e-04  1.63e-03  9.77e-01  
  8  +4.7629e-01  +1.1353e+00  6.59e-01  4.56e-04  8.22e-02  1.40e-04  1.17e-03  4.02e-01  
  9  +4.6865e-01  +1.0687e+00  6.00e-01  3.80e-04  6.83e-02  1.10e-04  9.92e-04  3.39e-01  
 10  +4.5227e-01  +9.4792e-01  4.96e-01  2.74e-04  4.89e-02  8.67e-05  7.42e-04  3.46e-01  
 11  +3.9989e-01  +5.9362e-01  1.94e-01  8.93e-05  1.57e-02  1.82e-05  2.78e-04  7.48e-01  
 12  +3.8413e-01  +5.2414e-01  1.40e-01  6.37e-05  1.11e-02  1.36e-05  2.12e-04  4.20e-01  
 13  +3.6693e-01  +4.4502e-01  7.81e-02  3.49e-05  6.09e-03  7.93e-06  1.26e-04  6.60e-01  
 14  +3.5348e-01  +3.8181e-01  2.83e-02  1.24e-05  2.16e-03  2.99e-06  4.85e-05  8.56e-01  
 15  +3.5304e-01  +3.7988e-01  2.68e-02  1.17e-05  2.04e-03  2.80e-06  4.59e-05  1.69e-01  
 16  +3.5086e-01  +3.7011e-01  1.92e-02  8.29e-06  1.44e-03  1.99e-06  3.30e-05  5.61e-01  
 17  +3.4715e-01  +3.5466e-01  7.51e-03  3.20e-06  5.56e-04  7.67e-07  1.32e-05  6.82e-01  
 18  +3.4498e-01  +3.4578e-01  7.94e-04  3.35e-07  5.83e-05  7.46e-08  1.42e-06  9.90e-01  
 19  +3.4470e-01  +3.4471e-01  8.30e-06  3.50e-09  6.09e-07  7.78e-10  1.49e-08  9.90e-01  
 20  +3.4470e-01  +3.4470e-01  8.31e-08  3.51e-11  6.10e-09  7.79e-12  1.49e-10  9.90e-01  
 21  +3.4470e-01  +3.4470e-01  8.31e-10  3.51e-13  6.10e-11  7.82e-14  1.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 170.9083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:28 PM: Optimal value: 3.447e-01
(CVXPY) Oct 06 04:26:28 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:28 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 32, Objective: 0.3447
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:28 PM: Your problem has 2821 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:28 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2821
  constraints   = 5321
  nnz(P)        = 0
  nnz(A)        = 47302
  cones (total) = 1
    : Nonnegative = 1,  numel = 5321

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7327e-01  +5.5028e+02  5.50e+02  4.47e-01  5.57e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2588e-01  +5.8976e+01  5.85e+01  1.66e-01  2.61e+01  1.87e-02  2.77e-01  9.90e-01  
  3  +5.0799e-01  +1.3581e+01  1.31e+01  8.90e-02  1.48e+01  5.81e-05  2.00e-01  6.17e-01  
  4  +5.0042e-01  +1.6934e+00  1.19e+00  1.22e-02  2.08e+00  1.32e-05  1.14e-01  7.37e-01  
  5  +4.9943e-01  +1.6160e+00  1.12e+00  8.42e-03  1.48e+00  3.48e-05  2.99e-02  8.31e-01  
  6  +4.9253e-01  +1.4830e+00  9.90e-01  1.75e-03  3.16e-01  1.70e-04  4.53e-03  8.53e-01  
  7  +4.8392e-01  +1.1851e+00  7.01e-01  6.33e-04  1.14e-01  1.49e-04  1.61e-03  9.90e-01  
  8  +4.7631e-01  +1.1326e+00  6.56e-01  4.57e-04  8.24e-02  1.52e-04  1.17e-03  3.97e-01  
  9  +4.6857e-01  +1.0671e+00  5.98e-01  3.80e-04  6.83e-02  1.19e-04  9.91e-04  3.38e-01  
 10  +4.5170e-01  +9.4364e-01  4.92e-01  2.72e-04  4.84e-02  9.26e-05  7.36e-04  3.54e-01  
 11  +3.9968e-01  +5.9364e-01  1.94e-01  8.98e-05  1.58e-02  1.94e-05  2.79e-04  7.39e-01  
 12  +3.8294e-01  +5.1948e-01  1.37e-01  6.23e-05  1.09e-02  1.38e-05  2.08e-04  4.39e-01  
 13  +3.6852e-01  +4.5283e-01  8.43e-02  3.79e-05  6.61e-03  8.72e-06  1.36e-04  5.76e-01  
 14  +3.5619e-01  +3.9514e-01  3.89e-02  1.73e-05  3.00e-03  4.04e-06  6.60e-05  6.38e-01  
 15  +3.5506e-01  +3.9006e-01  3.50e-02  1.54e-05  2.67e-03  3.65e-06  5.91e-05  1.42e-01  
 16  +3.5352e-01  +3.8207e-01  2.85e-02  1.24e-05  2.16e-03  2.95e-06  4.83e-05  5.60e-01  
 17  +3.4763e-01  +3.5665e-01  9.02e-03  3.89e-06  6.76e-04  9.09e-07  1.58e-05  8.20e-01  
 18  +3.4510e-01  +3.4627e-01  1.17e-03  4.98e-07  8.66e-05  1.10e-07  2.10e-06  9.67e-01  
 19  +3.4471e-01  +3.4472e-01  1.75e-05  7.44e-09  1.29e-06  1.63e-09  3.15e-08  9.86e-01  
 20  +3.4470e-01  +3.4470e-01  1.75e-07  7.46e-11  1.30e-08  1.63e-11  3.16e-10  9.90e-01  
 21  +3.4470e-01  +3.4470e-01  1.80e-09  7.67e-13  1.33e-10  1.69e-13  3.27e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 172.2076ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:28 PM: Optimal value: 3.447e-01
(CVXPY) Oct 06 04:26:28 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:28 PM: Solver (including time spent in interface) took 1.881e-01 seconds
Iteration: 33, Objective: 0.3447
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:29 PM: Your problem has 2828 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:29 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2828
  constraints   = 5328
  nnz(P)        = 0
  nnz(A)        = 47462
  cones (total) = 1
    : Nonnegative = 1,  numel = 5328

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7315e-01  +5.5031e+02  5.50e+02  4.47e-01  5.56e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2584e-01  +5.9027e+01  5.85e+01  1.66e-01  2.61e+01  1.87e-02  2.77e-01  9.90e-01  
  3  +5.0800e-01  +1.3494e+01  1.30e+01  8.83e-02  1.47e+01  5.83e-05  1.98e-01  6.24e-01  
  4  +5.0040e-01  +1.7032e+00  1.20e+00  1.23e-02  2.09e+00  1.35e-05  1.16e-01  7.27e-01  
  5  +4.9940e-01  +1.5686e+00  1.07e+00  8.25e-03  1.45e+00  3.37e-05  3.00e-02  8.24e-01  
  6  +4.9315e-01  +1.4617e+00  9.69e-01  1.91e-03  3.45e-01  1.55e-04  5.00e-03  8.38e-01  
  7  +4.8545e-01  +1.2070e+00  7.22e-01  7.04e-04  1.27e-01  1.51e-04  1.79e-03  9.90e-01  
  8  +4.7592e-01  +1.1322e+00  6.56e-01  4.61e-04  8.31e-02  1.61e-04  1.18e-03  4.50e-01  
  9  +4.6866e-01  +1.0694e+00  6.01e-01  3.87e-04  6.94e-02  1.22e-04  1.01e-03  3.61e-01  
 10  +4.5369e-01  +9.5996e-01  5.06e-01  2.86e-04  5.10e-02  9.87e-05  7.71e-04  3.22e-01  
 11  +4.0335e-01  +6.1711e-01  2.14e-01  9.95e-05  1.75e-02  2.39e-05  3.05e-04  7.37e-01  
 12  +3.8318e-01  +5.2352e-01  1.40e-01  6.43e-05  1.12e-02  1.51e-05  2.14e-04  4.60e-01  
 13  +3.7287e-01  +4.7526e-01  1.02e-01  4.63e-05  8.07e-03  1.10e-05  1.61e-04  3.70e-01  
 14  +3.5788e-01  +4.0420e-01  4.63e-02  2.05e-05  3.57e-03  5.04e-06  7.74e-05  8.61e-01  
 15  +3.5490e-01  +3.9061e-01  3.57e-02  1.57e-05  2.73e-03  3.90e-06  6.03e-05  2.71e-01  
 16  +3.5234e-01  +3.7679e-01  2.44e-02  1.07e-05  1.86e-03  2.53e-06  4.18e-05  9.90e-01  
 17  +3.4841e-01  +3.6067e-01  1.23e-02  5.30e-06  9.21e-04  1.27e-06  2.15e-05  5.43e-01  
 18  +3.4501e-01  +3.4681e-01  1.80e-03  7.73e-07  1.34e-04  1.79e-07  3.24e-06  9.02e-01  
 19  +3.4442e-01  +3.4448e-01  5.77e-05  2.47e-08  4.29e-06  5.70e-09  1.05e-07  9.70e-01  
 20  +3.4440e-01  +3.4440e-01  5.78e-07  2.47e-10  4.30e-08  5.71e-11  1.05e-09  9.90e-01  
 21  +3.4440e-01  +3.4440e-01  5.86e-09  2.51e-12  4.36e-10  5.80e-13  1.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 172.8983ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:29 PM: Optimal value: 3.444e-01
(CVXPY) Oct 06 04:26:29 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:29 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 34, Objective: 0.3444
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:29 PM: Your problem has 2838 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:29 PM: Finished problem compilation (took 4.795e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2838
  constraints   = 5338
  nnz(P)        = 0
  nnz(A)        = 47618
  cones (total) = 1
    : Nonnegative = 1,  numel = 5338

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.7298e-01  +5.5036e+02  5.50e+02  4.48e-01  5.56e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2577e-01  +5.9112e+01  5.86e+01  1.66e-01  2.60e+01  1.87e-02  2.77e-01  9.90e-01  
  3  +5.0803e-01  +1.3347e+01  1.28e+01  8.70e-02  1.45e+01  5.86e-05  1.94e-01  6.36e-01  
  4  +5.0037e-01  +1.7196e+00  1.22e+00  1.25e-02  2.12e+00  1.41e-05  1.18e-01  7.08e-01  
  5  +4.9942e-01  +1.5770e+00  1.08e+00  8.65e-03  1.51e+00  3.23e-05  3.31e-02  8.00e-01  
  6  +4.9259e-01  +1.4604e+00  9.68e-01  1.88e-03  3.39e-01  1.63e-04  4.92e-03  8.59e-01  
  7  +4.8436e-01  +1.2077e+00  7.23e-01  6.93e-04  1.25e-01  1.57e-04  1.76e-03  9.90e-01  
  8  +4.7577e-01  +1.1419e+00  6.66e-01  4.80e-04  8.65e-02  1.65e-04  1.23e-03  4.01e-01  
  9  +4.6385e-01  +1.0441e+00  5.80e-01  3.55e-04  6.36e-02  1.28e-04  9.33e-04  4.27e-01  
 10  +4.4191e-01  +8.8436e-01  4.42e-01  2.36e-04  4.19e-02  8.46e-05  6.53e-04  4.25e-01  
 11  +3.9855e-01  +6.0460e-01  2.06e-01  9.84e-05  1.72e-02  2.61e-05  3.09e-04  6.05e-01  
 12  +3.7622e-01  +4.9449e-01  1.18e-01  5.46e-05  9.52e-03  1.36e-05  1.88e-04  5.22e-01  
 13  +3.6553e-01  +4.4405e-01  7.85e-02  3.54e-05  6.16e-03  8.84e-06  1.28e-04  5.19e-01  
 14  +3.5229e-01  +3.8136e-01  2.91e-02  1.28e-05  2.22e-03  3.14e-06  5.00e-05  9.22e-01  
 15  +3.5034e-01  +3.7242e-01  2.21e-02  9.68e-06  1.68e-03  2.22e-06  3.86e-05  6.21e-01  
 16  +3.4554e-01  +3.5201e-01  6.47e-03  2.81e-06  4.87e-04  6.50e-07  1.17e-05  7.43e-01  
 17  +3.4375e-01  +3.4478e-01  1.03e-03  4.43e-07  7.68e-05  9.46e-08  1.88e-06  9.65e-01  
 18  +3.4340e-01  +3.4342e-01  1.23e-05  5.29e-09  9.17e-07  1.13e-09  2.26e-08  9.88e-01  
 19  +3.4340e-01  +3.4340e-01  1.23e-07  5.29e-11  9.18e-09  1.13e-11  2.26e-10  9.90e-01  
 20  +3.4340e-01  +3.4340e-01  1.25e-09  5.37e-13  9.31e-11  1.15e-13  2.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 179.7592ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:29 PM: Optimal value: 3.434e-01
(CVXPY) Oct 06 04:26:29 PM: Compilation took 4.795e-02 seconds
(CVXPY) Oct 06 04:26:29 PM: Solver (including time spent in interface) took 1.916e-01 seconds
Iteration: 35, Objective: 0.3434
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:30 PM: Your problem has 2848 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:30 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2848
  constraints   = 5348
  nnz(P)        = 0
  nnz(A)        = 47763
  cones (total) = 1
    : Nonnegative = 1,  numel = 5348

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.7285e-01  +5.5034e+02  5.50e+02  4.48e-01  5.55e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2566e-01  +5.9155e+01  5.86e+01  1.66e-01  2.60e+01  1.87e-02  2.77e-01  9.90e-01  
  3  +5.0806e-01  +1.3171e+01  1.27e+01  8.55e-02  1.43e+01  5.90e-05  1.90e-01  6.49e-01  
  4  +5.0043e-01  +1.8818e+00  1.38e+00  1.41e-02  2.38e+00  1.54e-05  1.25e-01  6.34e-01  
  5  +4.9956e-01  +1.5112e+00  1.01e+00  8.66e-03  1.50e+00  2.75e-05  3.65e-02  7.74e-01  
  6  +4.8752e-01  +1.3756e+00  8.88e-01  1.09e-03  1.97e-01  2.59e-04  2.80e-03  9.38e-01  
  7  +4.7709e-01  +1.1988e+00  7.22e-01  5.74e-04  1.03e-01  2.03e-04  1.47e-03  7.56e-01  
  8  +4.5857e-01  +1.0347e+00  5.76e-01  3.35e-04  5.99e-02  1.71e-04  8.86e-04  5.32e-01  
  9  +4.2246e-01  +7.5909e-01  3.37e-01  1.70e-04  3.00e-02  2.19e-05  4.96e-04  8.58e-01  
 10  +3.9425e-01  +5.9725e-01  2.03e-01  9.79e-05  1.71e-02  1.25e-05  3.13e-04  4.28e-01  
 11  +3.7523e-01  +4.9869e-01  1.23e-01  5.77e-05  1.00e-02  8.05e-06  1.99e-04  4.58e-01  
 12  +3.6205e-01  +4.3394e-01  7.19e-02  3.27e-05  5.68e-03  4.93e-06  1.21e-04  4.72e-01  
 13  +3.5120e-01  +3.8099e-01  2.98e-02  1.32e-05  2.29e-03  2.63e-06  5.18e-05  8.29e-01  
 14  +3.4943e-01  +3.7237e-01  2.29e-02  1.01e-05  1.76e-03  2.08e-06  4.05e-05  6.31e-01  
 15  +3.4493e-01  +3.5295e-01  8.02e-03  3.51e-06  6.08e-04  7.35e-07  1.46e-05  7.01e-01  
 16  +3.4361e-01  +3.4758e-01  3.97e-03  1.72e-06  2.98e-04  3.62e-07  7.24e-06  7.50e-01  
 17  +3.4233e-01  +3.4244e-01  1.02e-04  4.38e-08  7.60e-06  9.04e-09  1.88e-07  9.78e-01  
 18  +3.4230e-01  +3.4230e-01  1.02e-06  4.39e-10  7.61e-08  9.05e-11  1.88e-09  9.90e-01  
 19  +3.4230e-01  +3.4230e-01  1.02e-08  4.39e-12  7.61e-10  9.05e-13  1.88e-11  9.90e-01  
 20  +3.4230e-01  +3.4230e-01  1.04e-10  4.50e-14  7.79e-12  9.30e-15  1.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 172.6237ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:30 PM: Optimal value: 3.423e-01
(CVXPY) Oct 06 04:26:30 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:26:30 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 36, Objective: 0.3423
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:30 PM: Your problem has 2858 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:30 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2858
  constraints   = 5358
  nnz(P)        = 0
  nnz(A)        = 47966
  cones (total) = 1
    : Nonnegative = 1,  numel = 5358

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.7274e-01  +5.5032e+02  5.50e+02  4.48e-01  5.54e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2559e-01  +5.9204e+01  5.87e+01  1.66e-01  2.59e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0809e-01  +1.3047e+01  1.25e+01  8.45e-02  1.41e+01  5.93e-05  1.87e-01  6.58e-01  
  4  +5.0040e-01  +1.8951e+00  1.39e+00  1.42e-02  2.40e+00  1.59e-05  1.27e-01  6.17e-01  
  5  +4.9953e-01  +1.4917e+00  9.92e-01  8.54e-03  1.48e+00  2.75e-05  3.66e-02  7.73e-01  
  6  +4.8735e-01  +1.3668e+00  8.79e-01  1.11e-03  2.00e-01  2.60e-04  2.84e-03  9.37e-01  
  7  +4.7668e-01  +1.1996e+00  7.23e-01  5.79e-04  1.04e-01  2.18e-04  1.49e-03  7.40e-01  
  8  +4.5809e-01  +1.0351e+00  5.77e-01  3.37e-04  6.02e-02  1.85e-04  8.92e-04  5.28e-01  
  9  +4.2406e-01  +7.7337e-01  3.49e-01  1.79e-04  3.16e-02  2.74e-05  5.19e-04  8.28e-01  
 10  +3.9521e-01  +6.0504e-01  2.10e-01  1.02e-04  1.78e-02  1.51e-05  3.24e-04  4.35e-01  
 11  +3.7442e-01  +4.9546e-01  1.21e-01  5.68e-05  9.88e-03  8.77e-06  1.96e-04  4.76e-01  
 12  +3.6174e-01  +4.3283e-01  7.11e-02  3.25e-05  5.64e-03  5.36e-06  1.19e-04  4.77e-01  
 13  +3.5107e-01  +3.8074e-01  2.97e-02  1.32e-05  2.28e-03  2.72e-06  5.16e-05  8.35e-01  
 14  +3.4975e-01  +3.7426e-01  2.45e-02  1.09e-05  1.89e-03  2.24e-06  4.33e-05  4.78e-01  
 15  +3.4775e-01  +3.6496e-01  1.72e-02  7.59e-06  1.32e-03  1.62e-06  3.08e-05  5.75e-01  
 16  +3.4585e-01  +3.5698e-01  1.11e-02  4.86e-06  8.43e-04  1.06e-06  2.00e-05  5.73e-01  
 17  +3.4272e-01  +3.4430e-01  1.58e-03  6.81e-07  1.18e-04  1.46e-07  2.90e-06  8.80e-01  
 18  +3.4221e-01  +3.4223e-01  2.18e-05  9.43e-09  1.63e-06  2.00e-09  4.04e-08  9.88e-01  
 19  +3.4220e-01  +3.4220e-01  2.19e-07  9.44e-11  1.64e-08  2.00e-11  4.05e-10  9.90e-01  
 20  +3.4220e-01  +3.4220e-01  2.23e-09  9.61e-13  1.67e-10  2.05e-13  4.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 181.6825ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:30 PM: Optimal value: 3.422e-01
(CVXPY) Oct 06 04:26:30 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:26:30 PM: Solver (including time spent in interface) took 2.038e-01 seconds
Iteration: 37, Objective: 0.3422
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:30 PM: Your problem has 2862 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:31 PM: Finished problem compilation (took 4.697e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2862
  constraints   = 5362
  nnz(P)        = 0
  nnz(A)        = 47998
  cones (total) = 1
    : Nonnegative = 1,  numel = 5362

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.7268e-01  +5.5027e+02  5.50e+02  4.48e-01  5.53e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2557e-01  +5.9199e+01  5.87e+01  1.66e-01  2.59e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0809e-01  +1.3008e+01  1.25e+01  8.41e-02  1.40e+01  5.93e-05  1.87e-01  6.60e-01  
  4  +5.0038e-01  +1.8778e+00  1.38e+00  1.40e-02  2.37e+00  1.60e-05  1.26e-01  6.20e-01  
  5  +4.9950e-01  +1.5214e+00  1.02e+00  8.76e-03  1.52e+00  2.84e-05  3.74e-02  7.67e-01  
  6  +4.8770e-01  +1.3867e+00  8.99e-01  1.18e-03  2.13e-01  2.52e-04  3.04e-03  9.35e-01  
  7  +4.7914e-01  +1.2275e+00  7.48e-01  6.39e-04  1.15e-01  1.92e-04  1.64e-03  7.77e-01  
  8  +4.6007e-01  +1.0548e+00  5.95e-01  3.50e-04  6.26e-02  1.78e-04  9.21e-04  5.53e-01  
  9  +4.3812e-01  +8.8662e-01  4.48e-01  2.38e-04  4.21e-02  8.09e-05  6.62e-04  5.74e-01  
 10  +3.9516e-01  +6.0026e-01  2.05e-01  9.88e-05  1.73e-02  2.34e-05  3.13e-04  6.26e-01  
 11  +3.7376e-01  +4.9052e-01  1.17e-01  5.46e-05  9.49e-03  1.24e-05  1.89e-04  4.97e-01  
 12  +3.6220e-01  +4.3467e-01  7.25e-02  3.31e-05  5.74e-03  7.60e-06  1.21e-04  4.50e-01  
 13  +3.5261e-01  +3.8830e-01  3.57e-02  1.59e-05  2.76e-03  3.74e-06  6.15e-05  7.57e-01  
 14  +3.5176e-01  +3.8444e-01  3.27e-02  1.45e-05  2.51e-03  3.42e-06  5.63e-05  1.44e-01  
 15  +3.4666e-01  +3.6057e-01  1.39e-02  6.10e-06  1.06e-03  1.40e-06  2.47e-05  9.90e-01  
 16  +3.4406e-01  +3.4999e-01  5.93e-03  2.58e-06  4.47e-04  5.89e-07  1.07e-05  6.27e-01  
 17  +3.4231e-01  +3.4290e-01  5.88e-04  2.54e-07  4.41e-05  5.30e-08  1.09e-06  9.90e-01  
 18  +3.4210e-01  +3.4211e-01  7.81e-06  3.38e-09  5.85e-07  7.01e-10  1.45e-08  9.87e-01  
 19  +3.4210e-01  +3.4210e-01  7.87e-08  3.40e-11  5.90e-09  7.06e-12  1.46e-10  9.90e-01  
 20  +3.4210e-01  +3.4210e-01  8.18e-10  3.53e-13  6.12e-11  7.38e-14  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 172.4782ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:31 PM: Optimal value: 3.421e-01
(CVXPY) Oct 06 04:26:31 PM: Compilation took 4.697e-02 seconds
(CVXPY) Oct 06 04:26:31 PM: Solver (including time spent in interface) took 1.732e-01 seconds
Iteration: 38, Objective: 0.3421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:31 PM: Your problem has 2872 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:31 PM: Finished problem compilation (took 3.244e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2872
  constraints   = 5372
  nnz(P)        = 0
  nnz(A)        = 48172
  cones (total) = 1
    : Nonnegative = 1,  numel = 5372

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.7239e-01  +5.5039e+02  5.50e+02  4.48e-01  5.53e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2542e-01  +5.9322e+01  5.88e+01  1.66e-01  2.59e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0815e-01  +1.2768e+01  1.23e+01  8.20e-02  1.37e+01  6.00e-05  1.81e-01  6.78e-01  
  4  +5.0041e-01  +2.0204e+00  1.52e+00  1.54e-02  2.59e+00  1.78e-05  1.33e-01  5.45e-01  
  5  +4.9954e-01  +1.4845e+00  9.85e-01  8.62e-03  1.49e+00  2.70e-05  3.89e-02  7.57e-01  
  6  +4.8372e-01  +1.3689e+00  8.85e-01  9.20e-04  1.66e-01  3.32e-04  2.35e-03  9.60e-01  
  7  +4.7361e-01  +1.2375e+00  7.64e-01  5.59e-04  1.01e-01  2.54e-04  1.44e-03  6.51e-01  
  8  +4.5879e-01  +1.0892e+00  6.30e-01  3.81e-04  6.80e-02  1.92e-04  1.00e-03  4.44e-01  
  9  +4.3800e-01  +9.1966e-01  4.82e-01  2.59e-04  4.59e-02  1.32e-04  7.20e-04  3.56e-01  
 10  +3.9921e-01  +6.4240e-01  2.43e-01  1.20e-04  2.09e-02  4.07e-05  3.73e-04  6.04e-01  
 11  +3.7111e-01  +4.8619e-01  1.15e-01  5.45e-05  9.46e-03  1.59e-05  1.91e-04  5.69e-01  
 12  +3.6312e-01  +4.4674e-01  8.36e-02  3.85e-05  6.67e-03  1.10e-05  1.40e-04  4.48e-01  
 13  +3.5122e-01  +3.8826e-01  3.70e-02  1.67e-05  2.89e-03  4.38e-06  6.48e-05  7.44e-01  
 14  +3.5024e-01  +3.8371e-01  3.35e-02  1.50e-05  2.59e-03  3.95e-06  5.85e-05  1.40e-01  
 15  +3.4697e-01  +3.6670e-01  1.97e-02  8.74e-06  1.51e-03  1.98e-06  3.51e-05  9.90e-01  
 16  +3.4308e-01  +3.5072e-01  7.64e-03  3.35e-06  5.79e-04  7.57e-07  1.40e-05  6.55e-01  
 17  +3.4103e-01  +3.4226e-01  1.23e-03  5.35e-07  9.25e-05  1.11e-07  2.30e-06  9.90e-01  
 18  +3.4061e-01  +3.4064e-01  2.65e-05  1.15e-08  1.99e-06  2.36e-09  4.99e-08  9.80e-01  
 19  +3.4060e-01  +3.4060e-01  2.66e-07  1.15e-10  2.00e-08  2.36e-11  5.00e-10  9.90e-01  
 20  +3.4060e-01  +3.4060e-01  2.75e-09  1.19e-12  2.06e-10  2.46e-13  5.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 180.4749ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:31 PM: Optimal value: 3.406e-01
(CVXPY) Oct 06 04:26:31 PM: Compilation took 3.244e-02 seconds
(CVXPY) Oct 06 04:26:31 PM: Solver (including time spent in interface) took 1.875e-01 seconds
Iteration: 39, Objective: 0.3406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:31 PM: Your problem has 2873 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:31 PM: Finished problem compilation (took 4.705e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2873
  constraints   = 5373
  nnz(P)        = 0
  nnz(A)        = 48193
  cones (total) = 1
    : Nonnegative = 1,  numel = 5373

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7236e-01  +5.5041e+02  5.50e+02  4.48e-01  5.52e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2542e-01  +5.9336e+01  5.88e+01  1.66e-01  2.58e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0815e-01  +1.2755e+01  1.22e+01  8.18e-02  1.37e+01  6.00e-05  1.81e-01  6.79e-01  
  4  +5.0040e-01  +2.0141e+00  1.51e+00  1.53e-02  2.58e+00  1.78e-05  1.33e-01  5.45e-01  
  5  +4.9952e-01  +1.4871e+00  9.88e-01  8.63e-03  1.49e+00  2.73e-05  3.89e-02  7.57e-01  
  6  +4.8461e-01  +1.3722e+00  8.88e-01  9.79e-04  1.77e-01  3.14e-04  2.50e-03  9.55e-01  
  7  +4.7438e-01  +1.2351e+00  7.61e-01  5.76e-04  1.04e-01  2.50e-04  1.48e-03  6.66e-01  
  8  +4.5775e-01  +1.0723e+00  6.15e-01  3.68e-04  6.56e-02  1.88e-04  9.72e-04  4.98e-01  
  9  +4.3842e-01  +9.1850e-01  4.80e-01  2.60e-04  4.60e-02  1.29e-04  7.20e-04  3.46e-01  
 10  +3.9941e-01  +6.4260e-01  2.43e-01  1.20e-04  2.09e-02  4.05e-05  3.73e-04  6.01e-01  
 11  +3.7120e-01  +4.8698e-01  1.16e-01  5.49e-05  9.52e-03  1.57e-05  1.92e-04  5.86e-01  
 12  +3.6286e-01  +4.4575e-01  8.29e-02  3.82e-05  6.62e-03  1.07e-05  1.39e-04  4.54e-01  
 13  +3.5219e-01  +3.9324e-01  4.11e-02  1.85e-05  3.21e-03  4.87e-06  7.15e-05  6.91e-01  
 14  +3.5060e-01  +3.8589e-01  3.53e-02  1.58e-05  2.73e-03  4.17e-06  6.16e-05  1.82e-01  
 15  +3.4752e-01  +3.6942e-01  2.19e-02  9.71e-06  1.68e-03  2.21e-06  3.86e-05  9.90e-01  
 16  +3.4332e-01  +3.5202e-01  8.70e-03  3.81e-06  6.59e-04  8.73e-07  1.58e-05  6.30e-01  
 17  +3.4140e-01  +3.4405e-01  2.64e-03  1.15e-06  1.99e-04  2.48e-07  4.87e-06  9.05e-01  
 18  +3.4056e-01  +3.4072e-01  1.66e-04  7.17e-08  1.24e-05  1.53e-08  3.09e-07  9.45e-01  
 19  +3.4050e-01  +3.4050e-01  1.72e-06  7.42e-10  1.28e-07  1.58e-10  3.20e-09  9.90e-01  
 20  +3.4050e-01  +3.4050e-01  1.72e-08  7.43e-12  1.28e-09  1.58e-12  3.21e-11  9.90e-01  
 21  +3.4050e-01  +3.4050e-01  1.72e-10  7.44e-14  1.29e-11  1.60e-14  3.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 179.7005ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:32 PM: Optimal value: 3.405e-01
(CVXPY) Oct 06 04:26:32 PM: Compilation took 4.705e-02 seconds
(CVXPY) Oct 06 04:26:32 PM: Solver (including time spent in interface) took 1.884e-01 seconds
Iteration: 40, Objective: 0.3405
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:32 PM: Your problem has 2883 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:32 PM: Finished problem compilation (took 4.594e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2883
  constraints   = 5383
  nnz(P)        = 0
  nnz(A)        = 48330
  cones (total) = 1
    : Nonnegative = 1,  numel = 5383

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5017e+03  2.50e+03  9.81e-01  8.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7227e-01  +5.5035e+02  5.50e+02  4.48e-01  5.51e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2536e-01  +5.9322e+01  5.88e+01  1.66e-01  2.58e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0816e-01  +1.2688e+01  1.22e+01  8.12e-02  1.36e+01  6.01e-05  1.79e-01  6.83e-01  
  4  +5.0040e-01  +2.0380e+00  1.54e+00  1.55e-02  2.61e+00  1.83e-05  1.34e-01  5.30e-01  
  5  +4.9951e-01  +1.4865e+00  9.87e-01  8.61e-03  1.49e+00  2.77e-05  3.88e-02  7.60e-01  
  6  +4.8580e-01  +1.3782e+00  8.92e-01  1.07e-03  1.93e-01  2.92e-04  2.75e-03  9.46e-01  
  7  +4.7529e-01  +1.2365e+00  7.61e-01  6.02e-04  1.08e-01  2.51e-04  1.55e-03  6.83e-01  
  8  +4.5442e-01  +1.0371e+00  5.83e-01  3.35e-04  5.98e-02  1.85e-04  8.91e-04  6.03e-01  
  9  +4.3308e-01  +8.7689e-01  4.44e-01  2.34e-04  4.13e-02  1.20e-04  6.57e-04  3.53e-01  
 10  +3.9052e-01  +5.8969e-01  1.99e-01  9.69e-05  1.69e-02  3.06e-05  3.11e-04  6.33e-01  
 11  +3.7087e-01  +4.8723e-01  1.16e-01  5.50e-05  9.53e-03  1.60e-05  1.92e-04  5.09e-01  
 12  +3.6174e-01  +4.4191e-01  8.02e-02  3.71e-05  6.41e-03  1.06e-05  1.36e-04  4.09e-01  
 13  +3.5567e-01  +4.1136e-01  5.57e-02  2.54e-05  4.39e-03  6.92e-06  9.58e-05  5.12e-01  
 14  +3.5017e-01  +3.8542e-01  3.52e-02  1.58e-05  2.74e-03  4.32e-06  6.19e-05  4.16e-01  
 15  +3.4790e-01  +3.7214e-01  2.42e-02  1.08e-05  1.87e-03  2.44e-06  4.28e-05  9.90e-01  
 16  +3.4405e-01  +3.5614e-01  1.21e-02  5.32e-06  9.19e-04  1.22e-06  2.18e-05  5.48e-01  
 17  +3.4098e-01  +3.4336e-01  2.38e-03  1.04e-06  1.80e-04  2.26e-07  4.39e-06  9.32e-01  
 18  +3.4026e-01  +3.4051e-01  2.53e-04  1.10e-07  1.91e-05  2.35e-08  4.70e-07  9.20e-01  
 19  +3.4018e-01  +3.4018e-01  2.63e-06  1.15e-09  1.98e-07  2.45e-10  4.89e-09  9.90e-01  
 20  +3.4018e-01  +3.4018e-01  2.63e-08  1.15e-11  1.98e-09  2.45e-12  4.89e-11  9.90e-01  
 21  +3.4018e-01  +3.4018e-01  2.65e-10  1.15e-13  1.99e-11  2.47e-14  4.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 181.4676ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:32 PM: Optimal value: 3.402e-01
(CVXPY) Oct 06 04:26:32 PM: Compilation took 4.594e-02 seconds
(CVXPY) Oct 06 04:26:32 PM: Solver (including time spent in interface) took 1.891e-01 seconds
Iteration: 41, Objective: 0.3402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:32 PM: Your problem has 2893 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:32 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2893
  constraints   = 5393
  nnz(P)        = 0
  nnz(A)        = 48462
  cones (total) = 1
    : Nonnegative = 1,  numel = 5393

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5018e+03  2.50e+03  9.81e-01  8.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.7208e-01  +5.5035e+02  5.50e+02  4.48e-01  5.50e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2525e-01  +5.9396e+01  5.89e+01  1.65e-01  2.57e+01  1.88e-02  2.76e-01  9.90e-01  
  3  +5.0820e-01  +1.2506e+01  1.20e+01  7.96e-02  1.33e+01  6.06e-05  1.75e-01  6.94e-01  
  4  +5.0042e-01  +2.1338e+00  1.63e+00  1.64e-02  2.75e+00  1.99e-05  1.37e-01  4.77e-01  
  5  +4.9947e-01  +1.4386e+00  9.39e-01  8.14e-03  1.40e+00  2.82e-05  3.69e-02  7.76e-01  
  6  +4.8668e-01  +1.3618e+00  8.75e-01  1.13e-03  2.04e-01  2.81e-04  2.91e-03  9.36e-01  
  7  +4.7706e-01  +1.2495e+00  7.72e-01  6.66e-04  1.20e-01  2.77e-04  1.71e-03  6.01e-01  
  8  +4.6049e-01  +1.1046e+00  6.44e-01  3.98e-04  7.11e-02  2.46e-04  1.05e-03  5.35e-01  
  9  +4.1692e-01  +7.4449e-01  3.28e-01  1.62e-04  2.84e-02  2.80e-05  4.70e-04  8.82e-01  
 10  +3.9362e-01  +6.1354e-01  2.20e-01  1.07e-04  1.87e-02  1.76e-05  3.40e-04  3.58e-01  
 11  +3.6724e-01  +4.7283e-01  1.06e-01  5.01e-05  8.66e-03  8.17e-06  1.78e-04  5.72e-01  
 12  +3.6076e-01  +4.4094e-01  8.02e-02  3.73e-05  6.43e-03  6.57e-06  1.37e-04  3.69e-01  
 13  +3.5385e-01  +4.0704e-01  5.32e-02  2.44e-05  4.20e-03  4.59e-06  9.29e-05  4.75e-01  
 14  +3.4907e-01  +3.8437e-01  3.53e-02  1.60e-05  2.74e-03  3.10e-06  6.28e-05  3.91e-01  
 15  +3.4666e-01  +3.7051e-01  2.39e-02  1.07e-05  1.84e-03  2.30e-06  4.28e-05  9.90e-01  
 16  +3.4276e-01  +3.5415e-01  1.14e-02  5.06e-06  8.71e-04  1.10e-06  2.10e-05  5.66e-01  
 17  +3.3989e-01  +3.4201e-01  2.12e-03  9.36e-07  1.61e-04  1.93e-07  4.00e-06  9.89e-01  
 18  +3.3924e-01  +3.3942e-01  1.85e-04  8.18e-08  1.41e-05  1.68e-08  3.52e-07  9.23e-01  
 19  +3.3918e-01  +3.3918e-01  1.92e-06  8.46e-10  1.46e-07  1.73e-10  3.64e-09  9.90e-01  
 20  +3.3918e-01  +3.3918e-01  1.92e-08  8.46e-12  1.46e-09  1.73e-12  3.65e-11  9.90e-01  
 21  +3.3918e-01  +3.3918e-01  1.93e-10  8.51e-14  1.46e-11  1.75e-14  3.67e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 187.2893ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:33 PM: Optimal value: 3.392e-01
(CVXPY) Oct 06 04:26:33 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:33 PM: Solver (including time spent in interface) took 2.035e-01 seconds
Iteration: 42, Objective: 0.3392
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:33 PM: Your problem has 2903 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:33 PM: Finished problem compilation (took 4.787e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2903
  constraints   = 5403
  nnz(P)        = 0
  nnz(A)        = 48568
  cones (total) = 1
    : Nonnegative = 1,  numel = 5403

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.7186e-01  +5.5040e+02  5.50e+02  4.49e-01  5.50e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2515e-01  +5.9509e+01  5.90e+01  1.65e-01  2.57e+01  1.88e-02  2.76e-01  9.90e-01  
  3  +5.0825e-01  +1.2323e+01  1.18e+01  7.78e-02  1.30e+01  6.11e-05  1.71e-01  7.06e-01  
  4  +5.0035e-01  +2.1035e+00  1.60e+00  1.59e-02  2.67e+00  2.13e-05  1.38e-01  4.56e-01  
  5  +4.9934e-01  +1.4493e+00  9.50e-01  8.07e-03  1.39e+00  3.18e-05  3.61e-02  7.82e-01  
  6  +4.8953e-01  +1.3747e+00  8.85e-01  1.52e-03  2.73e-01  2.30e-04  3.97e-03  9.02e-01  
  7  +4.7865e-01  +1.2520e+00  7.73e-01  7.29e-04  1.31e-01  2.80e-04  1.87e-03  7.25e-01  
  8  +4.6183e-01  +1.1124e+00  6.51e-01  4.16e-04  7.44e-02  2.69e-04  1.09e-03  5.66e-01  
  9  +4.3140e-01  +8.6713e-01  4.36e-01  2.32e-04  4.09e-02  1.28e-04  6.50e-04  5.80e-01  
 10  +3.9230e-01  +6.1231e-01  2.20e-01  1.09e-04  1.90e-02  4.39e-05  3.48e-04  5.38e-01  
 11  +3.6947e-01  +4.9089e-01  1.21e-01  5.84e-05  1.01e-02  1.95e-05  2.05e-04  5.75e-01  
 12  +3.6078e-01  +4.4699e-01  8.62e-02  4.06e-05  6.99e-03  1.31e-05  1.49e-04  3.93e-01  
 13  +3.5468e-01  +4.1590e-01  6.12e-02  2.83e-05  4.87e-03  8.35e-06  1.07e-04  5.29e-01  
 14  +3.4664e-01  +3.7696e-01  3.03e-02  1.37e-05  2.36e-03  3.86e-06  5.48e-05  6.33e-01  
 15  +3.4502e-01  +3.6702e-01  2.20e-02  9.96e-06  1.71e-03  2.14e-06  4.02e-05  9.90e-01  
 16  +3.4221e-01  +3.5535e-01  1.31e-02  5.88e-06  1.01e-03  1.27e-06  2.44e-05  4.85e-01  
 17  +3.3894e-01  +3.4158e-01  2.64e-03  1.18e-06  2.02e-04  2.48e-07  5.04e-06  8.87e-01  
 18  +3.3818e-01  +3.3852e-01  3.33e-04  1.48e-07  2.54e-05  3.04e-08  6.39e-07  9.10e-01  
 19  +3.3808e-01  +3.3808e-01  3.47e-06  1.54e-09  2.65e-07  3.17e-10  6.67e-09  9.90e-01  
 20  +3.3808e-01  +3.3808e-01  3.48e-08  1.54e-11  2.66e-09  3.17e-12  6.69e-11  9.90e-01  
 21  +3.3808e-01  +3.3808e-01  3.49e-10  1.55e-13  2.67e-11  3.20e-14  6.73e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 186.2536ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:33 PM: Optimal value: 3.381e-01
(CVXPY) Oct 06 04:26:33 PM: Compilation took 4.787e-02 seconds
(CVXPY) Oct 06 04:26:33 PM: Solver (including time spent in interface) took 1.889e-01 seconds
Iteration: 43, Objective: 0.3381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:33 PM: Your problem has 2913 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:33 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2913
  constraints   = 5413
  nnz(P)        = 0
  nnz(A)        = 48808
  cones (total) = 1
    : Nonnegative = 1,  numel = 5413

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.7162e-01  +5.5039e+02  5.50e+02  4.49e-01  5.49e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2507e-01  +5.9585e+01  5.91e+01  1.65e-01  2.56e+01  1.89e-02  2.76e-01  9.90e-01  
  3  +5.0828e-01  +1.2192e+01  1.17e+01  7.66e-02  1.28e+01  6.15e-05  1.68e-01  7.14e-01  
  4  +5.0033e-01  +2.1223e+00  1.62e+00  1.60e-02  2.68e+00  2.27e-05  1.39e-01  4.30e-01  
  5  +4.9931e-01  +1.4550e+00  9.56e-01  8.06e-03  1.39e+00  3.37e-05  3.62e-02  7.80e-01  
  6  +4.8939e-01  +1.3765e+00  8.87e-01  1.54e-03  2.76e-01  2.41e-04  4.02e-03  9.01e-01  
  7  +4.7669e-01  +1.2429e+00  7.66e-01  6.81e-04  1.22e-01  3.14e-04  1.75e-03  7.56e-01  
  8  +4.6783e-01  +1.1613e+00  6.93e-01  5.02e-04  8.96e-02  2.40e-04  1.30e-03  4.90e-01  
  9  +4.3344e-01  +8.8762e-01  4.54e-01  2.34e-04  4.13e-02  1.50e-04  6.44e-04  6.57e-01  
 10  +3.9309e-01  +6.2319e-01  2.30e-01  1.14e-04  1.98e-02  4.98e-05  3.58e-04  5.16e-01  
 11  +3.6726e-01  +4.8556e-01  1.18e-01  5.68e-05  9.79e-03  1.98e-05  1.99e-04  6.05e-01  
 12  +3.5888e-01  +4.4362e-01  8.47e-02  3.97e-05  6.83e-03  1.33e-05  1.45e-04  4.08e-01  
 13  +3.5251e-01  +4.1157e-01  5.91e-02  2.72e-05  4.67e-03  8.32e-06  1.03e-04  5.32e-01  
 14  +3.4210e-01  +3.6120e-01  1.91e-02  8.63e-06  1.48e-03  2.11e-06  3.50e-05  9.19e-01  
 15  +3.3796e-01  +3.4299e-01  5.03e-03  2.25e-06  3.87e-04  5.26e-07  9.53e-06  8.04e-01  
 16  +3.3668e-01  +3.3753e-01  8.54e-04  3.80e-07  6.54e-05  8.17e-08  1.64e-06  9.14e-01  
 17  +3.3640e-01  +3.3641e-01  1.03e-05  4.57e-09  7.87e-07  9.70e-10  1.98e-08  9.89e-01  
 18  +3.3640e-01  +3.3640e-01  1.03e-07  4.59e-11  7.89e-09  9.73e-12  1.98e-10  9.90e-01  
 19  +3.3640e-01  +3.3640e-01  1.03e-09  4.60e-13  7.91e-11  9.78e-14  1.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 181.5468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:33 PM: Optimal value: 3.364e-01
(CVXPY) Oct 06 04:26:33 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:33 PM: Solver (including time spent in interface) took 1.881e-01 seconds
Iteration: 44, Objective: 0.3364
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:34 PM: Your problem has 2923 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:34 PM: Finished problem compilation (took 4.791e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:34 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2923
  constraints   = 5423
  nnz(P)        = 0
  nnz(A)        = 49136
  cones (total) = 1
    : Nonnegative = 1,  numel = 5423

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.7154e-01  +5.5029e+02  5.50e+02  4.49e-01  5.48e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2504e-01  +5.9623e+01  5.91e+01  1.65e-01  2.55e+01  1.89e-02  2.76e-01  9.90e-01  
  3  +5.0829e-01  +1.2107e+01  1.16e+01  7.58e-02  1.27e+01  6.17e-05  1.66e-01  7.19e-01  
  4  +5.0019e-01  +1.9757e+00  1.48e+00  1.45e-02  2.43e+00  2.32e-05  1.36e-01  4.57e-01  
  5  +4.9897e-01  +1.4557e+00  9.57e-01  7.71e-03  1.33e+00  4.14e-05  3.30e-02  8.02e-01  
  6  +4.9143e-01  +1.3795e+00  8.88e-01  2.07e-03  3.70e-01  1.98e-04  5.58e-03  8.39e-01  
  7  +4.7910e-01  +1.2575e+00  7.78e-01  8.28e-04  1.48e-01  3.26e-04  2.15e-03  7.60e-01  
  8  +4.6611e-01  +1.1524e+00  6.86e-01  4.95e-04  8.84e-02  2.92e-04  1.29e-03  6.33e-01  
  9  +4.2999e-01  +8.6331e-01  4.33e-01  2.24e-04  3.95e-02  1.51e-04  6.24e-04  7.06e-01  
 10  +3.9105e-01  +6.1444e-01  2.23e-01  1.11e-04  1.93e-02  5.26e-05  3.52e-04  5.09e-01  
 11  +3.6683e-01  +4.8610e-01  1.19e-01  5.75e-05  9.91e-03  2.13e-05  2.02e-04  6.13e-01  
 12  +3.5817e-01  +4.4256e-01  8.44e-02  3.97e-05  6.83e-03  1.41e-05  1.46e-04  4.02e-01  
 13  +3.5180e-01  +4.1031e-01  5.85e-02  2.70e-05  4.64e-03  8.56e-06  1.03e-04  5.49e-01  
 14  +3.4139e-01  +3.5965e-01  1.83e-02  8.28e-06  1.42e-03  1.95e-06  3.38e-05  9.60e-01  
 15  +3.3739e-01  +3.4218e-01  4.79e-03  2.15e-06  3.70e-04  4.87e-07  9.14e-06  8.04e-01  
 16  +3.3614e-01  +3.3687e-01  7.33e-04  3.27e-07  5.62e-05  6.84e-08  1.41e-06  9.26e-01  
 17  +3.3590e-01  +3.3591e-01  8.51e-06  3.80e-09  6.53e-07  7.88e-10  1.65e-08  9.89e-01  
 18  +3.3590e-01  +3.3590e-01  8.54e-08  3.81e-11  6.55e-09  7.90e-12  1.65e-10  9.90e-01  
 19  +3.3590e-01  +3.3590e-01  8.56e-10  3.82e-13  6.57e-11  7.94e-14  1.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 176.5899ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:34 PM: Optimal value: 3.359e-01
(CVXPY) Oct 06 04:26:34 PM: Compilation took 4.791e-02 seconds
(CVXPY) Oct 06 04:26:34 PM: Solver (including time spent in interface) took 1.874e-01 seconds
Iteration: 45, Objective: 0.3359
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:34 PM: Your problem has 2933 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:34 PM: Finished problem compilation (took 3.080e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2933
  constraints   = 5433
  nnz(P)        = 0
  nnz(A)        = 49318
  cones (total) = 1
    : Nonnegative = 1,  numel = 5433

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.7141e-01  +5.5026e+02  5.50e+02  4.49e-01  5.47e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2494e-01  +5.9667e+01  5.91e+01  1.65e-01  2.54e+01  1.89e-02  2.76e-01  9.90e-01  
  3  +5.0831e-01  +1.1965e+01  1.15e+01  7.45e-02  1.25e+01  6.21e-05  1.62e-01  7.27e-01  
  4  +5.0020e-01  +2.0286e+00  1.53e+00  1.49e-02  2.49e+00  2.57e-05  1.38e-01  4.17e-01  
  5  +4.9900e-01  +1.4555e+00  9.57e-01  7.73e-03  1.33e+00  4.37e-05  3.37e-02  7.93e-01  
  6  +4.8965e-01  +1.3701e+00  8.80e-01  1.74e-03  3.12e-01  2.53e-04  4.63e-03  8.74e-01  
  7  +4.7852e-01  +1.2738e+00  7.95e-01  8.26e-04  1.48e-01  3.67e-04  2.15e-03  6.72e-01  
  8  +4.7531e-01  +1.2400e+00  7.65e-01  6.77e-04  1.21e-01  2.65e-04  1.75e-03  4.92e-01  
  9  +4.4928e-01  +1.0291e+00  5.80e-01  3.33e-04  5.91e-02  2.58e-04  8.89e-04  5.75e-01  
 10  +4.0216e-01  +6.7846e-01  2.76e-01  1.38e-04  2.40e-02  7.07e-05  4.17e-04  6.34e-01  
 11  +3.8545e-01  +5.9005e-01  2.05e-01  1.01e-04  1.74e-02  4.61e-05  3.25e-04  3.25e-01  
 12  +3.6401e-01  +4.7730e-01  1.13e-01  5.43e-05  9.35e-03  2.22e-05  1.92e-04  4.98e-01  
 13  +3.5506e-01  +4.3286e-01  7.78e-02  3.65e-05  6.27e-03  1.43e-05  1.35e-04  3.85e-01  
 14  +3.4900e-01  +4.0277e-01  5.38e-02  2.49e-05  4.28e-03  9.09e-06  9.58e-05  4.26e-01  
 15  +3.4136e-01  +3.6593e-01  2.46e-02  1.12e-05  1.93e-03  3.71e-06  4.55e-05  6.44e-01  
 16  +3.3632e-01  +3.4210e-01  5.79e-03  2.62e-06  4.49e-04  5.58e-07  1.11e-05  9.90e-01  
 17  +3.3485e-01  +3.3607e-01  1.22e-03  5.47e-07  9.40e-05  1.10e-07  2.36e-06  9.06e-01  
 18  +3.3446e-01  +3.3447e-01  1.86e-05  8.35e-09  1.44e-06  1.65e-09  3.62e-08  9.89e-01  
 19  +3.3445e-01  +3.3445e-01  1.87e-07  8.40e-11  1.44e-08  1.66e-11  3.64e-10  9.90e-01  
 20  +3.3445e-01  +3.3445e-01  1.90e-09  8.54e-13  1.47e-10  1.69e-13  3.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 184.9564ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:34 PM: Optimal value: 3.345e-01
(CVXPY) Oct 06 04:26:34 PM: Compilation took 3.080e-02 seconds
(CVXPY) Oct 06 04:26:34 PM: Solver (including time spent in interface) took 2.038e-01 seconds
Iteration: 46, Objective: 0.3345
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:35 PM: Your problem has 2943 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:35 PM: Finished problem compilation (took 4.608e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2943
  constraints   = 5443
  nnz(P)        = 0
  nnz(A)        = 49444
  cones (total) = 1
    : Nonnegative = 1,  numel = 5443

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.7137e-01  +5.5023e+02  5.50e+02  4.49e-01  5.46e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2489e-01  +5.9681e+01  5.92e+01  1.65e-01  2.54e+01  1.89e-02  2.75e-01  9.90e-01  
  3  +5.0832e-01  +1.1891e+01  1.14e+01  7.38e-02  1.24e+01  6.23e-05  1.61e-01  7.31e-01  
  4  +5.0014e-01  +1.9881e+00  1.49e+00  1.44e-02  2.41e+00  2.70e-05  1.38e-01  4.16e-01  
  5  +4.9885e-01  +1.4513e+00  9.52e-01  7.55e-03  1.30e+00  4.87e-05  3.25e-02  7.99e-01  
  6  +4.8847e-01  +1.3628e+00  8.74e-01  1.64e-03  2.92e-01  2.88e-04  4.35e-03  8.84e-01  
  7  +4.8303e-01  +1.3284e+00  8.45e-01  1.06e-03  1.89e-01  3.32e-04  2.75e-03  5.41e-01  
  8  +4.8235e-01  +1.3110e+00  8.29e-01  8.27e-04  1.48e-01  1.76e-04  2.11e-03  7.55e-01  
  9  +4.6268e-01  +1.1370e+00  6.74e-01  4.27e-04  7.61e-02  2.03e-04  1.11e-03  5.27e-01  
 10  +4.2146e-01  +8.0825e-01  3.87e-01  1.95e-04  3.43e-02  8.59e-05  5.55e-04  6.46e-01  
 11  +3.8385e-01  +5.8108e-01  1.97e-01  9.77e-05  1.69e-02  3.06e-05  3.18e-04  5.19e-01  
 12  +3.6528e-01  +4.8566e-01  1.20e-01  5.80e-05  9.98e-03  1.66e-05  2.05e-04  5.27e-01  
 13  +3.5513e-01  +4.3489e-01  7.98e-02  3.75e-05  6.44e-03  1.06e-05  1.39e-04  4.13e-01  
 14  +3.4925e-01  +4.0542e-01  5.62e-02  2.61e-05  4.48e-03  7.04e-06  1.00e-04  4.63e-01  
 15  +3.4105e-01  +3.6581e-01  2.48e-02  1.13e-05  1.94e-03  2.88e-06  4.59e-05  6.83e-01  
 16  +3.3632e-01  +3.4366e-01  7.34e-03  3.33e-06  5.71e-04  7.46e-07  1.40e-05  8.83e-01  
 17  +3.3462e-01  +3.3640e-01  1.78e-03  8.02e-07  1.38e-04  1.65e-07  3.44e-06  8.96e-01  
 18  +3.3406e-01  +3.3410e-01  3.76e-05  1.69e-08  2.91e-06  3.33e-09  7.32e-08  9.88e-01  
 19  +3.3405e-01  +3.3405e-01  3.77e-07  1.70e-10  2.91e-08  3.34e-11  7.33e-10  9.90e-01  
 20  +3.3405e-01  +3.3405e-01  3.78e-09  1.70e-12  2.92e-10  3.35e-13  7.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 190.4988ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:35 PM: Optimal value: 3.341e-01
(CVXPY) Oct 06 04:26:35 PM: Compilation took 4.608e-02 seconds
(CVXPY) Oct 06 04:26:35 PM: Solver (including time spent in interface) took 2.052e-01 seconds
Iteration: 47, Objective: 0.3341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:35 PM: Your problem has 2945 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:35 PM: Finished problem compilation (took 4.675e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2945
  constraints   = 5445
  nnz(P)        = 0
  nnz(A)        = 49460
  cones (total) = 1
    : Nonnegative = 1,  numel = 5445

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.7139e-01  +5.5021e+02  5.50e+02  4.49e-01  5.46e+01  3.77e-03  5.86e-01  5.76e-01  
  2  +5.2489e-01  +5.9668e+01  5.91e+01  1.65e-01  2.54e+01  1.89e-02  2.75e-01  9.90e-01  
  3  +5.0832e-01  +1.1885e+01  1.14e+01  7.37e-02  1.23e+01  6.23e-05  1.61e-01  7.31e-01  
  4  +5.0014e-01  +1.9905e+00  1.49e+00  1.45e-02  2.42e+00  2.71e-05  1.38e-01  4.15e-01  
  5  +4.9886e-01  +1.4529e+00  9.54e-01  7.57e-03  1.30e+00  4.88e-05  3.26e-02  7.98e-01  
  6  +4.8843e-01  +1.3640e+00  8.76e-01  1.63e-03  2.91e-01  2.90e-04  4.34e-03  8.85e-01  
  7  +4.8299e-01  +1.3294e+00  8.46e-01  1.05e-03  1.88e-01  3.33e-04  2.74e-03  5.41e-01  
  8  +4.8239e-01  +1.3122e+00  8.30e-01  8.28e-04  1.48e-01  1.76e-04  2.11e-03  7.53e-01  
  9  +4.6303e-01  +1.1406e+00  6.78e-01  4.32e-04  7.69e-02  2.02e-04  1.12e-03  5.20e-01  
 10  +4.2220e-01  +8.1420e-01  3.92e-01  1.98e-04  3.48e-02  8.75e-05  5.62e-04  6.47e-01  
 11  +3.8318e-01  +5.7694e-01  1.94e-01  9.60e-05  1.66e-02  2.92e-05  3.14e-04  5.37e-01  
 12  +3.6567e-01  +4.8763e-01  1.22e-01  5.87e-05  1.01e-02  1.66e-05  2.07e-04  5.10e-01  
 13  +3.5531e-01  +4.3582e-01  8.05e-02  3.79e-05  6.51e-03  1.06e-05  1.41e-04  4.11e-01  
 14  +3.4945e-01  +4.0651e-01  5.71e-02  2.65e-05  4.55e-03  7.07e-06  1.02e-04  4.66e-01  
 15  +3.4128e-01  +3.6703e-01  2.57e-02  1.18e-05  2.02e-03  2.96e-06  4.76e-05  6.89e-01  
 16  +3.3597e-01  +3.4222e-01  6.26e-03  2.83e-06  4.86e-04  6.14e-07  1.19e-05  9.43e-01  
 17  +3.3477e-01  +3.3730e-01  2.53e-03  1.14e-06  1.95e-04  2.42e-07  4.86e-06  6.86e-01  
 18  +3.3402e-01  +3.3423e-01  2.10e-04  9.38e-08  1.62e-05  1.81e-08  4.05e-07  9.90e-01  
 19  +3.3395e-01  +3.3395e-01  2.17e-06  9.69e-10  1.67e-07  1.87e-10  4.19e-09  9.90e-01  
 20  +3.3395e-01  +3.3395e-01  2.17e-08  9.71e-12  1.67e-09  1.87e-12  4.20e-11  9.90e-01  
 21  +3.3395e-01  +3.3395e-01  2.18e-10  9.72e-14  1.67e-11  1.88e-14  4.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 197.871ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:35 PM: Optimal value: 3.340e-01
(CVXPY) Oct 06 04:26:35 PM: Compilation took 4.675e-02 seconds
(CVXPY) Oct 06 04:26:35 PM: Solver (including time spent in interface) took 2.036e-01 seconds
Iteration: 48, Objective: 0.3340
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:36 PM: Your problem has 2955 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:36 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2955
  constraints   = 5455
  nnz(P)        = 0
  nnz(A)        = 49671
  cones (total) = 1
    : Nonnegative = 1,  numel = 5455

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7120e-01  +5.5026e+02  5.50e+02  4.49e-01  5.45e+01  3.77e-03  5.86e-01  5.76e-01  
  2  +5.2479e-01  +5.9747e+01  5.92e+01  1.65e-01  2.53e+01  1.89e-02  2.75e-01  9.90e-01  
  3  +5.0836e-01  +1.1750e+01  1.12e+01  7.24e-02  1.21e+01  6.28e-05  1.57e-01  7.38e-01  
  4  +5.0035e-01  +2.2736e+00  1.77e+00  1.71e-02  2.84e+00  3.24e-05  1.41e-01  3.23e-01  
  5  +4.9924e-01  +1.4537e+00  9.54e-01  7.77e-03  1.34e+00  4.57e-05  3.43e-02  8.02e-01  
  6  +4.8904e-01  +1.3829e+00  8.94e-01  1.50e-03  2.69e-01  3.24e-04  3.89e-03  9.03e-01  
  7  +4.8383e-01  +1.3467e+00  8.63e-01  9.93e-04  1.78e-01  3.62e-04  2.54e-03  5.15e-01  
  8  +4.8252e-01  +1.3275e+00  8.45e-01  7.89e-04  1.42e-01  2.08e-04  1.99e-03  7.00e-01  
  9  +4.6713e-01  +1.1884e+00  7.21e-01  4.74e-04  8.46e-02  2.19e-04  1.22e-03  4.63e-01  
 10  +4.2940e-01  +8.7279e-01  4.43e-01  2.26e-04  3.98e-02  1.05e-04  6.27e-04  6.52e-01  
 11  +3.8626e-01  +5.9447e-01  2.08e-01  1.04e-04  1.80e-02  3.04e-05  3.34e-04  5.52e-01  
 12  +3.6551e-01  +4.8824e-01  1.23e-01  5.94e-05  1.02e-02  1.58e-05  2.09e-04  5.52e-01  
 13  +3.5512e-01  +4.3627e-01  8.12e-02  3.83e-05  6.58e-03  1.01e-05  1.42e-04  4.35e-01  
 14  +3.4929e-01  +4.0712e-01  5.78e-02  2.69e-05  4.62e-03  6.87e-06  1.03e-04  4.69e-01  
 15  +3.3938e-01  +3.5903e-01  1.97e-02  8.99e-06  1.54e-03  2.08e-06  3.67e-05  8.70e-01  
 16  +3.3559e-01  +3.4199e-01  6.39e-03  2.90e-06  4.98e-04  6.41e-07  1.22e-05  7.96e-01  
 17  +3.3424e-01  +3.3628e-01  2.03e-03  9.15e-07  1.57e-04  2.00e-07  3.92e-06  7.30e-01  
 18  +3.3364e-01  +3.3377e-01  1.27e-04  5.69e-08  9.80e-06  1.11e-08  2.46e-07  9.86e-01  
 19  +3.3360e-01  +3.3360e-01  1.29e-06  5.77e-10  9.94e-08  1.13e-10  2.49e-09  9.90e-01  
 20  +3.3360e-01  +3.3360e-01  1.29e-08  5.78e-12  9.95e-10  1.13e-12  2.50e-11  9.90e-01  
 21  +3.3360e-01  +3.3360e-01  1.30e-10  5.81e-14  1.00e-11  1.14e-14  2.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 199.2448ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:36 PM: Optimal value: 3.336e-01
(CVXPY) Oct 06 04:26:36 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:26:36 PM: Solver (including time spent in interface) took 2.050e-01 seconds
Iteration: 49, Objective: 0.3336
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:36 PM: Your problem has 2957 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:36 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2957
  constraints   = 5457
  nnz(P)        = 0
  nnz(A)        = 49693
  cones (total) = 1
    : Nonnegative = 1,  numel = 5457

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5018e+03  2.50e+03  9.81e-01  8.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7118e-01  +5.5024e+02  5.50e+02  4.50e-01  5.45e+01  3.77e-03  5.86e-01  5.76e-01  
  2  +5.2478e-01  +5.9756e+01  5.92e+01  1.65e-01  2.53e+01  1.89e-02  2.75e-01  9.90e-01  
  3  +5.0837e-01  +1.1731e+01  1.12e+01  7.22e-02  1.21e+01  6.28e-05  1.57e-01  7.39e-01  
  4  +5.0038e-01  +2.3210e+00  1.82e+00  1.75e-02  2.91e+00  3.34e-05  1.42e-01  3.11e-01  
  5  +4.9930e-01  +1.4551e+00  9.56e-01  7.83e-03  1.35e+00  4.52e-05  3.47e-02  7.99e-01  
  6  +4.8963e-01  +1.3909e+00  9.01e-01  1.55e-03  2.78e-01  3.17e-04  4.02e-03  9.00e-01  
  7  +4.8344e-01  +1.3423e+00  8.59e-01  9.67e-04  1.73e-01  3.71e-04  2.47e-03  5.45e-01  
  8  +4.8237e-01  +1.3266e+00  8.44e-01  8.00e-04  1.44e-01  2.34e-04  2.02e-03  6.05e-01  
  9  +4.6780e-01  +1.1970e+00  7.29e-01  4.86e-04  8.69e-02  2.37e-04  1.25e-03  4.98e-01  
 10  +4.3453e-01  +9.1588e-01  4.81e-01  2.53e-04  4.46e-02  1.28e-04  6.93e-04  6.02e-01  
 11  +3.8944e-01  +6.1206e-01  2.23e-01  1.11e-04  1.93e-02  3.38e-05  3.54e-04  5.80e-01  
 12  +3.6381e-01  +4.7841e-01  1.15e-01  5.56e-05  9.55e-03  1.49e-05  1.97e-04  5.79e-01  
 13  +3.5535e-01  +4.3714e-01  8.18e-02  3.86e-05  6.63e-03  1.02e-05  1.43e-04  4.25e-01  
 14  +3.4903e-01  +4.0604e-01  5.70e-02  2.66e-05  4.56e-03  6.80e-06  1.02e-04  4.50e-01  
 15  +3.3941e-01  +3.5941e-01  2.00e-02  9.17e-06  1.57e-03  2.08e-06  3.75e-05  8.94e-01  
 16  +3.3594e-01  +3.4401e-01  8.07e-03  3.67e-06  6.30e-04  8.24e-07  1.55e-05  6.46e-01  
 17  +3.3406e-01  +3.3585e-01  1.79e-03  8.06e-07  1.39e-04  1.73e-07  3.47e-06  8.56e-01  
 18  +3.3351e-01  +3.3356e-01  4.24e-05  1.91e-08  3.28e-06  3.81e-09  8.27e-08  9.88e-01  
 19  +3.3350e-01  +3.3350e-01  4.24e-07  1.91e-10  3.28e-08  3.81e-11  8.27e-10  9.90e-01  
 20  +3.3350e-01  +3.3350e-01  4.25e-09  1.91e-12  3.29e-10  3.83e-13  8.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 194.6474ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:36 PM: Optimal value: 3.335e-01
(CVXPY) Oct 06 04:26:36 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:36 PM: Solver (including time spent in interface) took 2.033e-01 seconds
Iteration: 50, Objective: 0.3335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:37 PM: Your problem has 2967 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:37 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2967
  constraints   = 5467
  nnz(P)        = 0
  nnz(A)        = 49877
  cones (total) = 1
    : Nonnegative = 1,  numel = 5467

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5019e+03  2.50e+03  9.81e-01  8.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.7102e-01  +5.5031e+02  5.50e+02  4.50e-01  5.44e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2473e-01  +5.9847e+01  5.93e+01  1.65e-01  2.52e+01  1.89e-02  2.75e-01  9.90e-01  
  3  +5.0839e-01  +1.1642e+01  1.11e+01  7.14e-02  1.20e+01  6.32e-05  1.55e-01  7.44e-01  
  4  +5.0054e-01  +2.5301e+00  2.03e+00  1.94e-02  3.21e+00  3.91e-05  1.43e-01  2.63e-01  
  5  +4.9950e-01  +1.4557e+00  9.56e-01  7.97e-03  1.37e+00  4.54e-05  3.63e-02  7.88e-01  
  6  +4.9261e-01  +1.4188e+00  9.26e-01  1.95e-03  3.50e-01  2.72e-04  5.09e-03  8.72e-01  
  7  +4.7818e-01  +1.2785e+00  8.00e-01  6.74e-04  1.21e-01  4.80e-04  1.70e-03  8.51e-01  
  8  +4.7621e-01  +1.2575e+00  7.81e-01  6.24e-04  1.12e-01  3.79e-04  1.58e-03  2.75e-01  
  9  +4.6963e-01  +1.2051e+00  7.35e-01  5.23e-04  9.35e-02  3.64e-04  1.34e-03  2.03e-01  
 10  +4.2532e-01  +8.3956e-01  4.14e-01  1.99e-04  3.50e-02  1.91e-04  5.47e-04  7.45e-01  
 11  +3.8774e-01  +6.1470e-01  2.27e-01  1.12e-04  1.94e-02  6.85e-05  3.55e-04  4.91e-01  
 12  +3.6416e-01  +4.8553e-01  1.21e-01  5.87e-05  1.01e-02  2.95e-05  2.07e-04  5.50e-01  
 13  +3.5451e-01  +4.3609e-01  8.16e-02  3.85e-05  6.60e-03  1.80e-05  1.43e-04  4.32e-01  
 14  +3.4884e-01  +4.0652e-01  5.77e-02  2.69e-05  4.60e-03  1.06e-05  1.03e-04  5.21e-01  
 15  +3.3966e-01  +3.6117e-01  2.15e-02  9.88e-06  1.69e-03  2.95e-06  4.04e-05  8.34e-01  
 16  +3.3566e-01  +3.4305e-01  7.39e-03  3.37e-06  5.77e-04  9.75e-07  1.43e-05  6.81e-01  
 17  +3.3401e-01  +3.3568e-01  1.67e-03  7.56e-07  1.30e-04  1.90e-07  3.26e-06  8.60e-01  
 18  +3.3351e-01  +3.3355e-01  3.87e-05  1.75e-08  3.00e-06  3.83e-09  7.61e-08  9.88e-01  
 19  +3.3350e-01  +3.3350e-01  3.87e-07  1.75e-10  3.00e-08  3.83e-11  7.62e-10  9.90e-01  
 20  +3.3350e-01  +3.3350e-01  3.88e-09  1.75e-12  3.01e-10  3.84e-13  7.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.8264ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:37 PM: Optimal value: 3.335e-01
(CVXPY) Oct 06 04:26:37 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:37 PM: Solver (including time spent in interface) took 2.038e-01 seconds
Iteration: 51, Objective: 0.3335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:37 PM: Your problem has 2969 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:37 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2969
  constraints   = 5469
  nnz(P)        = 0
  nnz(A)        = 49897
  cones (total) = 1
    : Nonnegative = 1,  numel = 5469

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5019e+03  2.50e+03  9.81e-01  8.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7101e-01  +5.5032e+02  5.50e+02  4.50e-01  5.44e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2471e-01  +5.9855e+01  5.93e+01  1.65e-01  2.52e+01  1.89e-02  2.75e-01  9.90e-01  
  3  +5.0840e-01  +1.1624e+01  1.11e+01  7.12e-02  1.19e+01  6.33e-05  1.54e-01  7.45e-01  
  4  +5.0058e-01  +2.5771e+00  2.08e+00  1.98e-02  3.27e+00  4.05e-05  1.43e-01  2.53e-01  
  5  +4.9953e-01  +1.4552e+00  9.56e-01  7.99e-03  1.37e+00  4.58e-05  3.65e-02  7.87e-01  
  6  +4.9313e-01  +1.4250e+00  9.32e-01  2.05e-03  3.67e-01  2.64e-04  5.34e-03  8.67e-01  
  7  +4.7766e-01  +1.2711e+00  7.93e-01  6.40e-04  1.15e-01  5.01e-04  1.61e-03  8.96e-01  
  8  +4.7564e-01  +1.2506e+00  7.75e-01  6.03e-04  1.08e-01  4.40e-04  1.52e-03  1.66e-01  
  9  +4.6422e-01  +1.1633e+00  6.99e-01  4.46e-04  7.96e-02  3.86e-04  1.15e-03  3.76e-01  
 10  +4.1768e-01  +7.8246e-01  3.65e-01  1.80e-04  3.16e-02  8.72e-05  5.12e-04  7.96e-01  
 11  +3.8376e-01  +5.8775e-01  2.04e-01  1.01e-04  1.75e-02  3.57e-05  3.27e-04  4.92e-01  
 12  +3.5905e-01  +4.5640e-01  9.74e-02  4.68e-05  8.03e-03  1.45e-05  1.70e-04  6.07e-01  
 13  +3.5436e-01  +4.3337e-01  7.90e-02  3.74e-05  6.41e-03  1.13e-05  1.39e-04  2.81e-01  
 14  +3.4789e-01  +4.0129e-01  5.34e-02  2.49e-05  4.27e-03  7.14e-06  9.63e-05  4.68e-01  
 15  +3.3871e-01  +3.5664e-01  1.79e-02  8.23e-06  1.41e-03  1.96e-06  3.40e-05  8.82e-01  
 16  +3.3461e-01  +3.3834e-01  3.73e-03  1.70e-06  2.91e-04  3.89e-07  7.30e-06  8.27e-01  
 17  +3.3353e-01  +3.3365e-01  1.12e-04  5.08e-08  8.70e-06  1.07e-08  2.21e-07  9.81e-01  
 18  +3.3350e-01  +3.3350e-01  1.12e-06  5.09e-10  8.71e-08  1.07e-10  2.21e-09  9.90e-01  
 19  +3.3350e-01  +3.3350e-01  1.12e-08  5.11e-12  8.74e-10  1.08e-12  2.22e-11  9.90e-01  
 20  +3.3350e-01  +3.3350e-01  1.13e-10  5.13e-14  8.79e-12  1.08e-14  2.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.1538ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:37 PM: Optimal value: 3.335e-01
(CVXPY) Oct 06 04:26:37 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:37 PM: Solver (including time spent in interface) took 2.191e-01 seconds
Iteration: 52, Objective: 0.3335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:38 PM: Your problem has 2970 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:38 PM: Finished problem compilation (took 4.712e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2970
  constraints   = 5470
  nnz(P)        = 0
  nnz(A)        = 49902
  cones (total) = 1
    : Nonnegative = 1,  numel = 5470

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5019e+03  2.50e+03  9.81e-01  8.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7102e-01  +5.5031e+02  5.50e+02  4.50e-01  5.44e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2471e-01  +5.9853e+01  5.93e+01  1.65e-01  2.52e+01  1.89e-02  2.75e-01  9.90e-01  
  3  +5.0840e-01  +1.1622e+01  1.11e+01  7.12e-02  1.19e+01  6.33e-05  1.54e-01  7.45e-01  
  4  +5.0058e-01  +2.5808e+00  2.08e+00  1.98e-02  3.28e+00  4.07e-05  1.43e-01  2.53e-01  
  5  +4.9954e-01  +1.4572e+00  9.58e-01  8.01e-03  1.37e+00  4.58e-05  3.66e-02  7.86e-01  
  6  +4.9310e-01  +1.4272e+00  9.34e-01  2.04e-03  3.66e-01  2.67e-04  5.32e-03  8.68e-01  
  7  +4.7762e-01  +1.2717e+00  7.94e-01  6.39e-04  1.15e-01  5.02e-04  1.61e-03  8.95e-01  
  8  +4.7558e-01  +1.2509e+00  7.75e-01  6.02e-04  1.08e-01  4.40e-04  1.52e-03  1.67e-01  
  9  +4.6394e-01  +1.1616e+00  6.98e-01  4.43e-04  7.91e-02  3.83e-04  1.14e-03  3.82e-01  
 10  +4.1726e-01  +7.7989e-01  3.63e-01  1.79e-04  3.14e-02  8.88e-05  5.10e-04  7.87e-01  
 11  +3.8388e-01  +5.8853e-01  2.05e-01  1.01e-04  1.75e-02  3.69e-05  3.28e-04  4.86e-01  
 12  +3.5898e-01  +4.5607e-01  9.71e-02  4.67e-05  8.01e-03  1.48e-05  1.69e-04  6.09e-01  
 13  +3.5435e-01  +4.3329e-01  7.89e-02  3.74e-05  6.41e-03  1.16e-05  1.39e-04  2.79e-01  
 14  +3.4793e-01  +4.0152e-01  5.36e-02  2.50e-05  4.28e-03  7.30e-06  9.66e-05  4.64e-01  
 15  +3.3881e-01  +3.5708e-01  1.83e-02  8.39e-06  1.44e-03  2.00e-06  3.46e-05  8.88e-01  
 16  +3.3462e-01  +3.3838e-01  3.76e-03  1.72e-06  2.94e-04  3.93e-07  7.36e-06  8.29e-01  
 17  +3.3354e-01  +3.3366e-01  1.20e-04  5.48e-08  9.38e-06  1.16e-08  2.38e-07  9.79e-01  
 18  +3.3350e-01  +3.3350e-01  1.22e-06  5.55e-10  9.49e-08  1.17e-10  2.41e-09  9.90e-01  
 19  +3.3350e-01  +3.3350e-01  1.22e-08  5.55e-12  9.50e-10  1.18e-12  2.41e-11  9.90e-01  
 20  +3.3350e-01  +3.3350e-01  1.23e-10  5.58e-14  9.55e-12  1.18e-14  2.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 198.2188ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:38 PM: Optimal value: 3.335e-01
(CVXPY) Oct 06 04:26:38 PM: Compilation took 4.712e-02 seconds
(CVXPY) Oct 06 04:26:38 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 53, Objective: 0.3335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:38 PM: Your problem has 2971 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:38 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2971
  constraints   = 5471
  nnz(P)        = 0
  nnz(A)        = 49908
  cones (total) = 1
    : Nonnegative = 1,  numel = 5471

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5019e+03  2.50e+03  9.81e-01  8.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.7101e-01  +5.5032e+02  5.50e+02  4.50e-01  5.44e+01  3.77e-03  5.87e-01  5.76e-01  
  2  +5.2470e-01  +5.9858e+01  5.93e+01  1.65e-01  2.52e+01  1.89e-02  2.75e-01  9.90e-01  
  3  +5.0840e-01  +1.1614e+01  1.11e+01  7.11e-02  1.19e+01  6.33e-05  1.54e-01  7.45e-01  
  4  +5.0059e-01  +2.5999e+00  2.10e+00  2.00e-02  3.31e+00  4.13e-05  1.43e-01  2.49e-01  
  5  +4.9955e-01  +1.4560e+00  9.56e-01  8.01e-03  1.37e+00  4.60e-05  3.67e-02  7.86e-01  
  6  +4.9309e-01  +1.4274e+00  9.34e-01  2.02e-03  3.63e-01  2.71e-04  5.27e-03  8.70e-01  
  7  +4.7771e-01  +1.2727e+00  7.95e-01  6.38e-04  1.15e-01  5.05e-04  1.61e-03  8.94e-01  
  8  +4.7560e-01  +1.2515e+00  7.76e-01  6.00e-04  1.08e-01  4.43e-04  1.52e-03  1.69e-01  
  9  +4.6397e-01  +1.1621e+00  6.98e-01  4.43e-04  7.91e-02  3.85e-04  1.14e-03  3.79e-01  
 10  +4.1730e-01  +7.8022e-01  3.63e-01  1.79e-04  3.14e-02  8.59e-05  5.11e-04  7.92e-01  
 11  +3.8359e-01  +5.8680e-01  2.03e-01  1.01e-04  1.74e-02  3.54e-05  3.26e-04  4.90e-01  
 12  +3.5895e-01  +4.5591e-01  9.70e-02  4.66e-05  8.00e-03  1.44e-05  1.69e-04  6.06e-01  
 13  +3.5429e-01  +4.3302e-01  7.87e-02  3.73e-05  6.39e-03  1.13e-05  1.39e-04  2.80e-01  
 14  +3.4792e-01  +4.0146e-01  5.35e-02  2.50e-05  4.28e-03  7.16e-06  9.66e-05  4.64e-01  
 15  +3.3876e-01  +3.5686e-01  1.81e-02  8.31e-06  1.42e-03  1.97e-06  3.43e-05  8.87e-01  
 16  +3.3462e-01  +3.3836e-01  3.75e-03  1.71e-06  2.92e-04  3.88e-07  7.33e-06  8.30e-01  
 17  +3.3354e-01  +3.3365e-01  1.18e-04  5.36e-08  9.17e-06  1.13e-08  2.33e-07  9.79e-01  
 18  +3.3350e-01  +3.3350e-01  1.19e-06  5.43e-10  9.28e-08  1.14e-10  2.36e-09  9.90e-01  
 19  +3.3350e-01  +3.3350e-01  1.19e-08  5.43e-12  9.29e-10  1.15e-12  2.36e-11  9.90e-01  
 20  +3.3350e-01  +3.3350e-01  1.20e-10  5.46e-14  9.35e-12  1.15e-14  2.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.3526ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:38 PM: Optimal value: 3.335e-01
(CVXPY) Oct 06 04:26:38 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:26:38 PM: Solver (including time spent in interface) took 2.038e-01 seconds
FULL MODEL:
  Accruacy: 0.6304
  Our objective: 0.26080000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.156)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.0056)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0048)
 OR (x0 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.0072)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 1)            <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.0048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.0048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.0104)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0036)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 32.25245785713196
Best over terms:
  Our final objective: 0.15599999999999997
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15599999999999997
  Highest accruacy: 0.578
   dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 136 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 137 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 138 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 139 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 140 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 141 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 142 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 143 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 144 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 145 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 146 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 147 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 148 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 149 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 150 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 151 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 152 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 153 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 154 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 155 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 156 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 157 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 158 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 159 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 160 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 161 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 162 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

