Command:
python test_script.py -s constant_subclass -d 10 -n 10000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 10.

Computed total variation: 0.3102
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:35 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:35 PM: Finished problem compilation (took 9.406e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 65021
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +1.0987e+03  1.10e+03  4.43e-01  8.03e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2940e-01  +1.2046e+02  1.20e+02  1.78e-01  4.15e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0839e-01  +3.1291e+01  3.08e+01  1.24e-01  2.90e+01  5.02e-05  2.63e-01  3.41e-01  
  4  +5.0116e-01  +3.4189e+00  2.92e+00  1.99e-02  4.71e+00  6.12e-06  1.70e-01  5.87e-01  
  5  +5.0012e-01  +1.0356e+00  5.35e-01  3.59e-03  8.70e-01  4.55e-05  9.94e-02  9.90e-01  
  6  +4.9999e-01  +6.1825e-01  1.18e-01  7.87e-04  1.92e-01  2.77e-05  1.67e-02  8.45e-01  
  7  +4.9721e-01  +7.8072e-01  2.84e-01  2.45e-04  6.01e-02  1.36e-03  7.57e-04  9.82e-01  
  8  +4.9064e-01  +7.2585e-01  2.35e-01  7.60e-05  1.87e-02  3.19e-03  2.31e-04  7.07e-01  
  9  +4.8450e-01  +6.2114e-01  1.37e-01  4.57e-05  1.12e-02  6.92e-04  1.44e-04  5.64e-01  
 10  +4.7712e-01  +5.5766e-01  8.05e-02  2.31e-05  5.65e-03  1.06e-04  7.60e-05  7.93e-01  
 11  +4.7486e-01  +5.4203e-01  6.72e-02  1.81e-05  4.43e-03  1.10e-06  6.13e-05  9.07e-01  
 12  +4.6483e-01  +4.9424e-01  2.94e-02  6.99e-06  1.71e-03  6.27e-07  2.58e-05  6.77e-01  
 13  +4.6332e-01  +4.8633e-01  2.30e-02  5.24e-06  1.28e-03  1.05e-06  1.98e-05  9.90e-01  
 14  +4.5656e-01  +4.5758e-01  1.02e-03  2.14e-07  5.24e-05  3.65e-08  9.00e-07  9.67e-01  
 15  +4.5620e-01  +4.5621e-01  1.06e-05  2.20e-09  5.37e-07  3.77e-10  9.32e-09  9.90e-01  
 16  +4.5620e-01  +4.5620e-01  1.06e-07  2.20e-11  5.37e-09  3.77e-12  9.32e-11  9.90e-01  
 17  +4.5620e-01  +4.5620e-01  1.06e-09  2.20e-13  5.37e-11  3.95e-14  9.75e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.3325ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:35 PM: Optimal value: 4.562e-01
(CVXPY) Oct 06 04:29:35 PM: Compilation took 9.406e-02 seconds
(CVXPY) Oct 06 04:29:35 PM: Solver (including time spent in interface) took 1.407e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:35 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:35 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 73959
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0016e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7819e-01  +1.0990e+03  1.10e+03  4.43e-01  8.28e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2926e-01  +1.2022e+02  1.20e+02  1.78e-01  4.28e+01  1.78e-02  2.90e-01  9.55e-01  
  3  +5.0832e-01  +3.1152e+01  3.06e+01  1.24e-01  2.98e+01  5.03e-05  2.63e-01  3.48e-01  
  4  +5.0112e-01  +3.3288e+00  2.83e+00  1.93e-02  4.72e+00  6.21e-06  1.65e-01  6.09e-01  
  5  +5.0021e-01  +1.2314e+00  7.31e-01  4.91e-03  1.22e+00  4.09e-05  9.84e-02  8.59e-01  
  6  +5.0006e-01  +8.1195e-01  3.12e-01  2.07e-03  5.19e-01  3.21e-05  3.36e-02  7.97e-01  
  7  +4.9949e-01  +8.3742e-01  3.38e-01  8.59e-04  2.18e-01  3.03e-04  2.76e-03  9.86e-01  
  8  +4.9376e-01  +8.0148e-01  3.08e-01  9.64e-05  2.46e-02  2.66e-03  2.72e-04  9.02e-01  
  9  +4.9076e-01  +7.5739e-01  2.67e-01  8.05e-05  2.05e-02  1.99e-03  2.30e-04  2.45e-01  
 10  +4.9003e-01  +7.3078e-01  2.41e-01  6.99e-05  1.78e-02  1.29e-03  2.00e-04  3.44e-01  
 11  +4.8832e-01  +6.9869e-01  2.10e-01  6.12e-05  1.55e-02  6.56e-04  1.76e-04  3.97e-01  
 12  +4.8396e-01  +6.5498e-01  1.71e-01  4.55e-05  1.15e-02  1.91e-04  1.31e-04  6.67e-01  
 13  +4.7683e-01  +6.1018e-01  1.33e-01  3.25e-05  8.24e-03  2.45e-05  9.44e-05  7.88e-01  
 14  +4.6015e-01  +5.3343e-01  7.33e-02  1.31e-05  3.32e-03  1.23e-05  3.86e-05  7.46e-01  
 15  +4.5942e-01  +5.3084e-01  7.14e-02  1.31e-05  3.31e-03  1.16e-05  3.86e-05  3.74e-03  
 16  +4.4858e-01  +4.9806e-01  4.95e-02  9.22e-06  2.33e-03  3.08e-06  2.86e-05  6.84e-01  
 17  +4.3766e-01  +4.5854e-01  2.09e-02  3.25e-06  8.19e-04  1.65e-06  9.99e-06  6.72e-01  
 18  +4.3684e-01  +4.5587e-01  1.90e-02  3.17e-06  7.99e-04  1.37e-06  9.95e-06  5.30e-02  
 19  +4.3661e-01  +4.5490e-01  1.83e-02  2.99e-06  7.54e-04  1.34e-06  9.35e-06  1.64e-01  
 20  +4.3047e-01  +4.3425e-01  3.78e-03  5.91e-07  1.49e-04  2.70e-07  1.87e-06  8.37e-01  
 21  +4.2892e-01  +4.2898e-01  5.51e-05  8.65e-09  2.18e-06  4.06e-09  2.76e-08  9.90e-01  
 22  +4.2890e-01  +4.2890e-01  5.51e-07  8.65e-11  2.18e-08  4.06e-11  2.76e-10  9.90e-01  
 23  +4.2890e-01  +4.2890e-01  5.52e-09  8.65e-13  2.18e-10  4.06e-13  2.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 203.6575ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:35 PM: Optimal value: 4.289e-01
(CVXPY) Oct 06 04:29:35 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:29:35 PM: Solver (including time spent in interface) took 2.204e-01 seconds
Iteration: 2, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:36 PM: Your problem has 5041 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:36 PM: Finished problem compilation (took 4.767e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5041
  constraints   = 10041
  nnz(P)        = 0
  nnz(A)        = 79160
  cones (total) = 1
    : Nonnegative = 1,  numel = 10041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7819e-01  +1.0988e+03  1.10e+03  4.43e-01  8.38e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2925e-01  +1.2017e+02  1.20e+02  1.78e-01  4.32e+01  1.78e-02  2.90e-01  9.56e-01  
  3  +5.0832e-01  +3.1138e+01  3.06e+01  1.24e-01  3.01e+01  5.03e-05  2.63e-01  3.48e-01  
  4  +5.0112e-01  +3.3246e+00  2.82e+00  1.93e-02  4.77e+00  6.21e-06  1.64e-01  6.10e-01  
  5  +5.0015e-01  +1.1004e+00  6.00e-01  4.03e-03  1.02e+00  4.26e-05  8.77e-02  9.90e-01  
  6  +5.0002e-01  +7.7232e-01  2.72e-01  1.80e-03  4.57e-01  4.04e-05  2.55e-02  7.60e-01  
  7  +4.9878e-01  +9.1915e-01  4.20e-01  6.40e-04  1.65e-01  6.50e-04  1.95e-03  9.90e-01  
  8  +4.9368e-01  +8.6289e-01  3.69e-01  1.44e-04  3.72e-02  2.46e-03  4.17e-04  7.90e-01  
  9  +4.9211e-01  +8.0699e-01  3.15e-01  1.18e-04  3.04e-02  1.76e-03  3.40e-04  2.96e-01  
 10  +4.9107e-01  +7.4200e-01  2.51e-01  8.42e-05  2.17e-02  7.91e-04  2.41e-04  5.90e-01  
 11  +4.8911e-01  +6.8998e-01  2.01e-01  6.07e-05  1.56e-02  1.52e-04  1.74e-04  7.83e-01  
 12  +4.8671e-01  +6.6890e-01  1.82e-01  5.52e-05  1.42e-02  7.32e-05  1.59e-04  4.27e-01  
 13  +4.8159e-01  +6.3865e-01  1.57e-01  4.26e-05  1.09e-02  3.32e-05  1.23e-04  5.91e-01  
 14  +4.6670e-01  +5.6546e-01  9.88e-02  2.04e-05  5.23e-03  2.29e-05  6.03e-05  5.58e-01  
 15  +4.6662e-01  +5.6692e-01  1.00e-01  1.96e-05  5.03e-03  2.18e-05  5.76e-05  1.58e-01  
 16  +4.6269e-01  +5.5143e-01  8.87e-02  1.85e-05  4.74e-03  1.41e-05  5.60e-05  2.13e-01  
 17  +4.5949e-01  +5.3893e-01  7.94e-02  1.58e-05  4.05e-03  1.28e-05  4.76e-05  1.59e-01  
 18  +4.4798e-01  +4.9795e-01  5.00e-02  8.12e-06  2.07e-03  7.06e-06  2.45e-05  6.94e-01  
 19  +4.3414e-01  +4.4600e-01  1.19e-02  1.87e-06  4.78e-04  8.21e-07  5.88e-06  9.90e-01  
 20  +4.2912e-01  +4.2959e-01  4.78e-04  7.50e-08  1.91e-05  3.27e-08  2.39e-07  9.72e-01  
 21  +4.2890e-01  +4.2891e-01  4.84e-06  7.59e-10  1.94e-07  3.31e-10  2.42e-09  9.90e-01  
 22  +4.2890e-01  +4.2890e-01  4.84e-08  7.59e-12  1.94e-09  3.32e-12  2.43e-11  9.90e-01  
 23  +4.2890e-01  +4.2890e-01  4.84e-10  7.60e-14  1.94e-11  3.33e-14  2.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 211.8845ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:36 PM: Optimal value: 4.289e-01
(CVXPY) Oct 06 04:29:36 PM: Compilation took 4.767e-02 seconds
(CVXPY) Oct 06 04:29:36 PM: Solver (including time spent in interface) took 2.346e-01 seconds
Iteration: 3, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:36 PM: Your problem has 5051 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:36 PM: Finished problem compilation (took 4.728e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5051
  constraints   = 10051
  nnz(P)        = 0
  nnz(A)        = 81076
  cones (total) = 1
    : Nonnegative = 1,  numel = 10051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7811e-01  +1.0989e+03  1.10e+03  4.43e-01  8.38e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2918e-01  +1.2004e+02  1.20e+02  1.78e-01  4.31e+01  1.78e-02  2.89e-01  9.57e-01  
  3  +5.0830e-01  +3.1094e+01  3.06e+01  1.24e-01  3.00e+01  5.04e-05  2.62e-01  3.51e-01  
  4  +5.0111e-01  +3.3159e+00  2.81e+00  1.92e-02  4.76e+00  6.23e-06  1.63e-01  6.13e-01  
  5  +5.0019e-01  +1.1906e+00  6.90e-01  4.64e-03  1.17e+00  4.19e-05  9.14e-02  9.19e-01  
  6  +5.0008e-01  +9.1712e-01  4.17e-01  2.77e-03  7.02e-01  3.98e-05  3.91e-02  6.84e-01  
  7  +4.9979e-01  +8.4212e-01  3.42e-01  1.38e-03  3.54e-01  1.65e-04  5.17e-03  9.42e-01  
  8  +4.9574e-01  +8.1317e-01  3.17e-01  1.38e-04  3.57e-02  1.90e-03  3.90e-04  9.25e-01  
  9  +4.9348e-01  +7.7674e-01  2.83e-01  1.09e-04  2.82e-02  1.68e-03  3.07e-04  2.95e-01  
 10  +4.9406e-01  +7.7916e-01  2.85e-01  1.10e-04  2.83e-02  1.61e-03  3.06e-04  4.83e-02  
 11  +4.9292e-01  +7.3160e-01  2.39e-01  8.24e-05  2.12e-02  5.83e-04  2.29e-04  6.82e-01  
 12  +4.8926e-01  +7.0961e-01  2.20e-01  5.85e-05  1.51e-02  5.83e-04  1.63e-04  3.95e-01  
 13  +4.8798e-01  +6.9848e-01  2.10e-01  5.77e-05  1.49e-02  4.69e-04  1.62e-04  1.09e-01  
 14  +4.8522e-01  +6.8363e-01  1.98e-01  4.98e-05  1.28e-02  3.85e-04  1.40e-04  2.76e-01  
 15  +4.8385e-01  +6.7546e-01  1.92e-01  4.82e-05  1.24e-02  3.00e-04  1.36e-04  1.73e-01  
 16  +4.7145e-01  +6.2016e-01  1.49e-01  3.06e-05  7.84e-03  2.09e-04  8.83e-05  4.69e-01  
 17  +4.5858e-01  +5.6589e-01  1.07e-01  2.07e-05  5.30e-03  1.25e-04  6.21e-05  3.67e-01  
 18  +4.5063e-01  +5.3384e-01  8.32e-02  1.53e-05  3.92e-03  6.58e-05  4.70e-05  4.58e-01  
 19  +4.2844e-01  +4.4883e-01  2.04e-02  3.49e-06  8.91e-04  6.61e-07  1.15e-05  9.34e-01  
 20  +4.2112e-01  +4.2366e-01  2.55e-03  4.28e-07  1.09e-04  1.71e-07  1.45e-06  9.90e-01  
 21  +4.2001e-01  +4.2004e-01  2.87e-05  4.83e-09  1.23e-06  1.92e-09  1.65e-08  9.89e-01  
 22  +4.2000e-01  +4.2000e-01  2.87e-07  4.83e-11  1.23e-08  1.92e-11  1.65e-10  9.90e-01  
 23  +4.2000e-01  +4.2000e-01  2.87e-09  4.82e-13  1.23e-10  1.92e-13  1.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.4575ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:36 PM: Optimal value: 4.200e-01
(CVXPY) Oct 06 04:29:36 PM: Compilation took 4.728e-02 seconds
(CVXPY) Oct 06 04:29:36 PM: Solver (including time spent in interface) took 2.346e-01 seconds
Iteration: 4, Objective: 0.4200
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:37 PM: Your problem has 5061 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:37 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5061
  constraints   = 10061
  nnz(P)        = 0
  nnz(A)        = 82594
  cones (total) = 1
    : Nonnegative = 1,  numel = 10061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7803e-01  +1.0990e+03  1.10e+03  4.44e-01  8.38e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2911e-01  +1.1991e+02  1.19e+02  1.78e-01  4.31e+01  1.79e-02  2.89e-01  9.57e-01  
  3  +5.0828e-01  +3.1052e+01  3.05e+01  1.24e-01  3.00e+01  5.05e-05  2.62e-01  3.53e-01  
  4  +5.0111e-01  +3.3091e+00  2.81e+00  1.92e-02  4.76e+00  6.24e-06  1.63e-01  6.16e-01  
  5  +5.0020e-01  +1.2142e+00  7.14e-01  4.80e-03  1.21e+00  4.23e-05  8.98e-02  9.19e-01  
  6  +5.0005e-01  +8.6108e-01  3.61e-01  2.38e-03  6.04e-01  4.25e-05  2.82e-02  8.08e-01  
  7  +4.9913e-01  +8.5844e-01  3.59e-01  6.44e-04  1.66e-01  4.73e-04  1.93e-03  9.77e-01  
  8  +4.9459e-01  +8.1964e-01  3.25e-01  1.31e-04  3.39e-02  2.12e-03  3.65e-04  8.14e-01  
  9  +4.9281e-01  +8.0061e-01  3.08e-01  1.06e-04  2.75e-02  2.11e-03  2.95e-04  2.55e-01  
 10  +4.9313e-01  +7.8202e-01  2.89e-01  8.76e-05  2.26e-02  1.50e-03  2.40e-04  4.51e-01  
 11  +4.9073e-01  +7.4287e-01  2.52e-01  6.98e-05  1.80e-02  8.06e-04  1.92e-04  5.24e-01  
 12  +4.8585e-01  +7.1117e-01  2.25e-01  5.58e-05  1.44e-02  5.98e-04  1.55e-04  3.61e-01  
 13  +4.8013e-01  +6.7800e-01  1.98e-01  4.70e-05  1.21e-02  3.72e-04  1.33e-04  3.43e-01  
 14  +4.5884e-01  +5.7279e-01  1.14e-01  2.34e-05  6.01e-03  4.06e-06  7.02e-05  8.70e-01  
 15  +4.5046e-01  +5.4060e-01  9.01e-02  1.75e-05  4.49e-03  3.30e-06  5.37e-05  2.78e-01  
 16  +4.3558e-01  +4.8369e-01  4.81e-02  8.71e-06  2.22e-03  2.94e-06  2.78e-05  9.90e-01  
 17  +4.2481e-01  +4.4438e-01  1.96e-02  3.45e-06  8.80e-04  1.16e-06  1.14e-05  6.23e-01  
 18  +4.1919e-01  +4.2405e-01  4.86e-03  8.41e-07  2.15e-04  3.04e-07  2.88e-06  8.61e-01  
 19  +4.1733e-01  +4.1762e-01  2.98e-04  5.14e-08  1.31e-05  1.85e-08  1.79e-07  9.54e-01  
 20  +4.1720e-01  +4.1720e-01  3.42e-06  5.88e-10  1.50e-07  2.14e-10  2.05e-09  9.90e-01  
 21  +4.1720e-01  +4.1720e-01  3.42e-08  5.88e-12  1.50e-09  2.14e-12  2.05e-11  9.90e-01  
 22  +4.1720e-01  +4.1720e-01  3.42e-10  5.89e-14  1.50e-11  2.16e-14  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.835ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:37 PM: Optimal value: 4.172e-01
(CVXPY) Oct 06 04:29:37 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:37 PM: Solver (including time spent in interface) took 2.195e-01 seconds
Iteration: 5, Objective: 0.4172
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:37 PM: Your problem has 5071 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:37 PM: Finished problem compilation (took 4.753e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5071
  constraints   = 10071
  nnz(P)        = 0
  nnz(A)        = 83506
  cones (total) = 1
    : Nonnegative = 1,  numel = 10071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7796e-01  +1.0990e+03  1.10e+03  4.44e-01  8.37e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2905e-01  +1.1980e+02  1.19e+02  1.78e-01  4.30e+01  1.79e-02  2.89e-01  9.58e-01  
  3  +5.0827e-01  +3.1013e+01  3.05e+01  1.24e-01  2.99e+01  5.06e-05  2.61e-01  3.55e-01  
  4  +5.0111e-01  +3.3009e+00  2.80e+00  1.91e-02  4.74e+00  6.26e-06  1.61e-01  6.19e-01  
  5  +5.0018e-01  +1.1715e+00  6.71e-01  4.51e-03  1.14e+00  4.45e-05  8.23e-02  9.90e-01  
  6  +5.0003e-01  +8.6749e-01  3.67e-01  2.39e-03  6.06e-01  5.66e-05  2.23e-02  8.07e-01  
  7  +4.9780e-01  +8.7578e-01  3.78e-01  3.51e-04  9.07e-02  1.09e-03  1.00e-03  9.71e-01  
  8  +4.9570e-01  +8.5598e-01  3.60e-01  2.08e-04  5.36e-02  1.66e-03  5.83e-04  4.29e-01  
  9  +4.9584e-01  +7.7571e-01  2.80e-01  1.35e-04  3.48e-02  4.08e-04  3.70e-04  8.94e-01  
 10  +4.9305e-01  +7.5268e-01  2.60e-01  8.26e-05  2.13e-02  3.69e-04  2.25e-04  6.86e-01  
 11  +4.9065e-01  +7.4135e-01  2.51e-01  6.74e-05  1.74e-02  3.68e-04  1.84e-04  2.74e-01  
 12  +4.8702e-01  +7.2236e-01  2.35e-01  6.43e-05  1.66e-02  2.71e-04  1.79e-04  1.79e-01  
 13  +4.8536e-01  +7.1521e-01  2.30e-01  6.04e-05  1.56e-02  2.49e-04  1.69e-04  1.23e-01  
 14  +4.8444e-01  +7.0828e-01  2.24e-01  6.01e-05  1.55e-02  2.18e-04  1.68e-04  6.75e-02  
 15  +4.6574e-01  +6.2354e-01  1.58e-01  3.17e-05  8.13e-03  1.57e-04  9.18e-05  5.43e-01  
 16  +4.4152e-01  +5.2151e-01  8.00e-02  1.57e-05  4.00e-03  7.21e-06  4.92e-05  7.87e-01  
 17  +4.3548e-01  +4.9795e-01  6.25e-02  1.18e-05  3.01e-03  4.82e-06  3.76e-05  5.57e-01  
 18  +4.2333e-01  +4.5203e-01  2.87e-02  5.22e-06  1.33e-03  2.10e-06  1.74e-05  5.63e-01  
 19  +4.1632e-01  +4.2612e-01  9.81e-03  1.71e-06  4.35e-04  6.75e-07  5.85e-06  9.90e-01  
 20  +4.1292e-01  +4.1437e-01  1.45e-03  2.51e-07  6.41e-05  9.95e-08  8.80e-07  9.90e-01  
 21  +4.1231e-01  +4.1233e-01  2.42e-05  4.18e-09  1.07e-06  1.63e-09  1.47e-08  9.90e-01  
 22  +4.1230e-01  +4.1230e-01  2.42e-07  4.18e-11  1.07e-08  1.63e-11  1.47e-10  9.90e-01  
 23  +4.1230e-01  +4.1230e-01  2.42e-09  4.18e-13  1.07e-10  1.64e-13  1.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 234.1892ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:37 PM: Optimal value: 4.123e-01
(CVXPY) Oct 06 04:29:37 PM: Compilation took 4.753e-02 seconds
(CVXPY) Oct 06 04:29:37 PM: Solver (including time spent in interface) took 2.513e-01 seconds
Iteration: 6, Objective: 0.4123
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:38 PM: Your problem has 5081 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:38 PM: Finished problem compilation (took 6.209e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5081
  constraints   = 10081
  nnz(P)        = 0
  nnz(A)        = 84318
  cones (total) = 1
    : Nonnegative = 1,  numel = 10081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7791e-01  +1.0990e+03  1.10e+03  4.44e-01  8.37e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2901e-01  +1.1972e+02  1.19e+02  1.78e-01  4.29e+01  1.79e-02  2.89e-01  9.59e-01  
  3  +5.0826e-01  +3.0988e+01  3.05e+01  1.23e-01  2.99e+01  5.06e-05  2.61e-01  3.57e-01  
  4  +5.0111e-01  +3.2971e+00  2.80e+00  1.91e-02  4.74e+00  6.27e-06  1.61e-01  6.21e-01  
  5  +5.0018e-01  +1.1856e+00  6.85e-01  4.61e-03  1.16e+00  4.49e-05  8.13e-02  9.90e-01  
  6  +5.0003e-01  +8.8376e-01  3.84e-01  2.48e-03  6.30e-01  5.90e-05  2.23e-02  7.95e-01  
  7  +4.9745e-01  +8.8775e-01  3.90e-01  3.14e-04  8.12e-02  1.25e-03  8.84e-04  9.80e-01  
  8  +4.9458e-01  +8.6073e-01  3.66e-01  1.73e-04  4.48e-02  1.97e-03  4.82e-04  4.72e-01  
  9  +4.9268e-01  +8.1579e-01  3.23e-01  1.23e-04  3.18e-02  1.61e-03  3.40e-04  4.92e-01  
 10  +4.9030e-01  +7.8410e-01  2.94e-01  9.30e-05  2.40e-02  1.31e-03  2.56e-04  4.36e-01  
 11  +4.8608e-01  +7.5225e-01  2.66e-01  6.83e-05  1.76e-02  1.11e-03  1.89e-04  4.28e-01  
 12  +4.8255e-01  +7.2864e-01  2.46e-01  6.66e-05  1.71e-02  8.43e-04  1.88e-04  8.63e-02  
 13  +4.7768e-01  +6.9802e-01  2.20e-01  5.65e-05  1.45e-02  6.14e-04  1.61e-04  2.82e-01  
 14  +4.5876e-01  +6.0892e-01  1.50e-01  3.08e-05  7.89e-03  3.98e-04  9.12e-05  5.04e-01  
 15  +4.5203e-01  +5.7899e-01  1.27e-01  2.55e-05  6.54e-03  2.81e-04  7.73e-05  2.54e-01  
 16  +4.4394e-01  +5.4243e-01  9.85e-02  1.93e-05  4.93e-03  1.11e-04  5.99e-05  5.55e-01  
 17  +4.2547e-01  +4.6745e-01  4.20e-02  7.79e-06  1.99e-03  3.23e-05  2.57e-05  6.61e-01  
 18  +4.2007e-01  +4.4694e-01  2.69e-02  4.85e-06  1.24e-03  1.69e-05  1.63e-05  4.94e-01  
 19  +4.1246e-01  +4.1861e-01  6.15e-03  1.08e-06  2.75e-04  1.63e-06  3.77e-06  9.18e-01  
 20  +4.1051e-01  +4.1169e-01  1.18e-03  2.07e-07  5.27e-05  9.35e-08  7.31e-07  9.90e-01  
 21  +4.1001e-01  +4.1002e-01  1.45e-05  2.53e-09  6.46e-07  1.14e-09  9.00e-09  9.88e-01  
 22  +4.1000e-01  +4.1000e-01  1.45e-07  2.53e-11  6.46e-09  1.14e-11  9.00e-11  9.90e-01  
 23  +4.1000e-01  +4.1000e-01  1.45e-09  2.53e-13  6.46e-11  1.14e-13  9.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 216.9242ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:38 PM: Optimal value: 4.100e-01
(CVXPY) Oct 06 04:29:38 PM: Compilation took 6.209e-02 seconds
(CVXPY) Oct 06 04:29:38 PM: Solver (including time spent in interface) took 2.194e-01 seconds
Iteration: 7, Objective: 0.4100
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:38 PM: Your problem has 5091 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:38 PM: Finished problem compilation (took 6.284e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5091
  constraints   = 10091
  nnz(P)        = 0
  nnz(A)        = 84895
  cones (total) = 1
    : Nonnegative = 1,  numel = 10091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7786e-01  +1.0990e+03  1.10e+03  4.44e-01  8.36e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2897e-01  +1.1965e+02  1.19e+02  1.78e-01  4.28e+01  1.79e-02  2.88e-01  9.59e-01  
  3  +5.0825e-01  +3.0966e+01  3.05e+01  1.23e-01  2.98e+01  5.07e-05  2.60e-01  3.58e-01  
  4  +5.0110e-01  +3.2931e+00  2.79e+00  1.91e-02  4.73e+00  6.28e-06  1.60e-01  6.22e-01  
  5  +5.0019e-01  +1.2118e+00  7.12e-01  4.79e-03  1.21e+00  4.51e-05  8.12e-02  9.79e-01  
  6  +5.0002e-01  +8.7914e-01  3.79e-01  2.44e-03  6.21e-01  6.02e-05  2.11e-02  7.89e-01  
  7  +4.9711e-01  +8.9281e-01  3.96e-01  2.84e-04  7.35e-02  1.41e-03  7.93e-04  9.79e-01  
  8  +4.9416e-01  +8.6597e-01  3.72e-01  1.66e-04  4.29e-02  2.09e-03  4.59e-04  4.41e-01  
  9  +4.9130e-01  +8.3360e-01  3.42e-01  1.21e-04  3.14e-02  2.16e-03  3.35e-04  3.45e-01  
 10  +4.8844e-01  +7.8547e-01  2.97e-01  8.67e-05  2.24e-02  1.43e-03  2.39e-04  5.51e-01  
 11  +4.8676e-01  +7.7259e-01  2.86e-01  7.59e-05  1.96e-02  1.27e-03  2.10e-04  2.36e-01  
 12  +4.8202e-01  +7.2306e-01  2.41e-01  6.32e-05  1.63e-02  3.12e-04  1.77e-04  6.32e-01  
 13  +4.5674e-01  +6.0079e-01  1.44e-01  2.83e-05  7.26e-03  1.55e-04  8.37e-05  6.61e-01  
 14  +4.4489e-01  +5.5136e-01  1.06e-01  2.07e-05  5.29e-03  9.48e-05  6.37e-05  3.20e-01  
 15  +4.3545e-01  +5.1261e-01  7.72e-02  1.47e-05  3.76e-03  4.33e-05  4.68e-05  5.21e-01  
 16  +4.1665e-01  +4.3810e-01  2.14e-02  3.93e-06  1.00e-03  5.41e-06  1.34e-05  8.52e-01  
 17  +4.1282e-01  +4.2409e-01  1.13e-02  2.03e-06  5.18e-04  1.91e-06  7.12e-06  7.08e-01  
 18  +4.0889e-01  +4.1011e-01  1.22e-03  2.18e-07  5.57e-05  1.88e-07  7.88e-07  9.03e-01  
 19  +4.0841e-01  +4.0842e-01  1.62e-05  2.89e-09  7.38e-07  2.26e-09  1.05e-08  9.89e-01  
 20  +4.0840e-01  +4.0840e-01  1.62e-07  2.89e-11  7.38e-09  2.26e-11  1.05e-10  9.90e-01  
 21  +4.0840e-01  +4.0840e-01  1.62e-09  2.90e-13  7.38e-11  2.28e-13  1.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.4988ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:38 PM: Optimal value: 4.084e-01
(CVXPY) Oct 06 04:29:38 PM: Compilation took 6.284e-02 seconds
(CVXPY) Oct 06 04:29:38 PM: Solver (including time spent in interface) took 2.351e-01 seconds
Iteration: 8, Objective: 0.4084
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:39 PM: Your problem has 5101 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:39 PM: Finished problem compilation (took 6.302e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5101
  constraints   = 10101
  nnz(P)        = 0
  nnz(A)        = 85756
  cones (total) = 1
    : Nonnegative = 1,  numel = 10101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7781e-01  +1.0989e+03  1.10e+03  4.44e-01  8.35e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2893e-01  +1.1957e+02  1.19e+02  1.78e-01  4.27e+01  1.79e-02  2.88e-01  9.60e-01  
  3  +5.0824e-01  +3.0935e+01  3.04e+01  1.23e-01  2.97e+01  5.07e-05  2.60e-01  3.60e-01  
  4  +5.0110e-01  +3.2863e+00  2.79e+00  1.91e-02  4.72e+00  6.29e-06  1.59e-01  6.24e-01  
  5  +5.0019e-01  +1.2167e+00  7.17e-01  4.82e-03  1.22e+00  4.57e-05  7.90e-02  9.90e-01  
  6  +5.0001e-01  +8.8631e-01  3.86e-01  2.47e-03  6.26e-01  6.64e-05  1.95e-02  7.84e-01  
  7  +4.9689e-01  +8.9305e-01  3.96e-01  2.74e-04  7.08e-02  1.51e-03  7.60e-04  9.72e-01  
  8  +4.9191e-01  +8.5077e-01  3.59e-01  1.27e-04  3.28e-02  2.64e-03  3.48e-04  5.68e-01  
  9  +4.8859e-01  +8.2200e-01  3.33e-01  9.55e-05  2.47e-02  2.58e-03  2.62e-04  3.45e-01  
 10  +4.8660e-01  +7.9953e-01  3.13e-01  8.32e-05  2.15e-02  2.11e-03  2.29e-04  2.62e-01  
 11  +4.8389e-01  +7.6051e-01  2.77e-01  7.28e-05  1.88e-02  9.70e-04  2.02e-04  4.57e-01  
 12  +4.6624e-01  +6.5163e-01  1.85e-01  4.17e-05  1.07e-02  1.31e-04  1.21e-04  8.08e-01  
 13  +4.4538e-01  +5.5982e-01  1.14e-01  2.35e-05  6.01e-03  6.30e-05  7.25e-05  4.71e-01  
 14  +4.3648e-01  +5.2320e-01  8.67e-02  1.72e-05  4.40e-03  3.14e-05  5.47e-05  4.92e-01  
 15  +4.2951e-01  +4.9482e-01  6.53e-02  1.27e-05  3.23e-03  1.99e-05  4.11e-05  3.78e-01  
 16  +4.1426e-01  +4.3410e-01  1.98e-02  3.68e-06  9.39e-04  3.63e-06  1.27e-05  8.23e-01  
 17  +4.1037e-01  +4.1926e-01  8.89e-03  1.63e-06  4.15e-04  8.34e-07  5.75e-06  8.87e-01  
 18  +4.0735e-01  +4.0846e-01  1.12e-03  2.03e-07  5.18e-05  9.84e-08  7.36e-07  8.89e-01  
 19  +4.0691e-01  +4.0693e-01  1.79e-05  3.25e-09  8.27e-07  1.39e-09  1.19e-08  9.89e-01  
 20  +4.0690e-01  +4.0690e-01  1.80e-07  3.26e-11  8.30e-09  1.40e-11  1.19e-10  9.90e-01  
 21  +4.0690e-01  +4.0690e-01  1.80e-09  3.26e-13  8.30e-11  1.42e-13  1.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.1928ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:39 PM: Optimal value: 4.069e-01
(CVXPY) Oct 06 04:29:39 PM: Compilation took 6.302e-02 seconds
(CVXPY) Oct 06 04:29:39 PM: Solver (including time spent in interface) took 2.348e-01 seconds
Iteration: 9, Objective: 0.4069
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:39 PM: Your problem has 5111 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:39 PM: Finished problem compilation (took 6.270e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5111
  constraints   = 10111
  nnz(P)        = 0
  nnz(A)        = 86459
  cones (total) = 1
    : Nonnegative = 1,  numel = 10111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7779e-01  +1.0989e+03  1.10e+03  4.44e-01  8.35e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2891e-01  +1.1952e+02  1.19e+02  1.78e-01  4.26e+01  1.79e-02  2.88e-01  9.60e-01  
  3  +5.0823e-01  +3.0915e+01  3.04e+01  1.23e-01  2.97e+01  5.07e-05  2.60e-01  3.61e-01  
  4  +5.0110e-01  +3.2817e+00  2.78e+00  1.90e-02  4.71e+00  6.30e-06  1.59e-01  6.26e-01  
  5  +5.0019e-01  +1.2234e+00  7.23e-01  4.87e-03  1.23e+00  4.57e-05  7.82e-02  9.90e-01  
  6  +5.0002e-01  +9.0569e-01  4.06e-01  2.59e-03  6.57e-01  6.66e-05  2.03e-02  7.69e-01  
  7  +4.9695e-01  +8.9909e-01  4.02e-01  2.79e-04  7.21e-02  1.48e-03  7.69e-04  9.73e-01  
  8  +4.9085e-01  +8.4822e-01  3.57e-01  1.12e-04  2.91e-02  2.91e-03  3.07e-04  6.29e-01  
  9  +4.8711e-01  +8.2011e-01  3.33e-01  8.43e-05  2.18e-02  2.82e-03  2.30e-04  3.57e-01  
 10  +4.8414e-01  +7.8283e-01  2.99e-01  7.46e-05  1.93e-02  1.70e-03  2.06e-04  3.45e-01  
 11  +4.8244e-01  +7.6959e-01  2.87e-01  7.14e-05  1.84e-02  1.49e-03  1.98e-04  1.00e-01  
 12  +4.6985e-01  +6.9200e-01  2.22e-01  5.03e-05  1.29e-02  7.99e-04  1.44e-04  4.48e-01  
 13  +4.5018e-01  +5.9447e-01  1.44e-01  3.00e-05  7.68e-03  4.10e-04  9.08e-05  4.34e-01  
 14  +4.3940e-01  +5.4606e-01  1.07e-01  2.15e-05  5.49e-03  2.64e-04  6.72e-05  3.20e-01  
 15  +4.2970e-01  +5.0307e-01  7.34e-02  1.42e-05  3.64e-03  1.29e-04  4.60e-05  4.96e-01  
 16  +4.2152e-01  +4.6794e-01  4.64e-02  8.67e-06  2.21e-03  4.03e-05  2.87e-05  7.04e-01  
 17  +4.1449e-01  +4.4033e-01  2.58e-02  4.75e-06  1.21e-03  2.11e-05  1.62e-05  4.67e-01  
 18  +4.0839e-01  +4.1631e-01  7.93e-03  1.42e-06  3.62e-04  1.45e-06  4.96e-06  9.67e-01  
 19  +4.0656e-01  +4.0980e-01  3.24e-03  5.77e-07  1.47e-04  2.24e-07  2.05e-06  9.90e-01  
 20  +4.0525e-01  +4.0538e-01  1.27e-04  2.26e-08  5.76e-06  8.53e-09  8.12e-08  9.65e-01  
 21  +4.0520e-01  +4.0520e-01  1.28e-06  2.27e-10  5.79e-08  8.57e-11  8.18e-10  9.90e-01  
 22  +4.0520e-01  +4.0520e-01  1.28e-08  2.27e-12  5.79e-10  8.57e-13  8.18e-12  9.90e-01  
 23  +4.0520e-01  +4.0520e-01  1.28e-10  2.27e-14  5.80e-12  8.73e-15  8.32e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 237.265ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:40 PM: Optimal value: 4.052e-01
(CVXPY) Oct 06 04:29:40 PM: Compilation took 6.270e-02 seconds
(CVXPY) Oct 06 04:29:40 PM: Solver (including time spent in interface) took 2.515e-01 seconds
Iteration: 10, Objective: 0.4052
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:40 PM: Your problem has 5121 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:40 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5121
  constraints   = 10121
  nnz(P)        = 0
  nnz(A)        = 87089
  cones (total) = 1
    : Nonnegative = 1,  numel = 10121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7772e-01  +1.0988e+03  1.10e+03  4.44e-01  8.34e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2885e-01  +1.1939e+02  1.19e+02  1.77e-01  4.25e+01  1.79e-02  2.88e-01  9.61e-01  
  3  +5.0822e-01  +3.0874e+01  3.04e+01  1.23e-01  2.96e+01  5.08e-05  2.59e-01  3.63e-01  
  4  +5.0110e-01  +3.2757e+00  2.77e+00  1.90e-02  4.70e+00  6.31e-06  1.58e-01  6.28e-01  
  5  +5.0020e-01  +1.2421e+00  7.42e-01  5.00e-03  1.26e+00  4.62e-05  7.68e-02  9.90e-01  
  6  +5.0002e-01  +9.2897e-01  4.29e-01  2.71e-03  6.89e-01  7.03e-05  1.98e-02  7.71e-01  
  7  +4.9698e-01  +9.1107e-01  4.14e-01  2.86e-04  7.40e-02  1.47e-03  7.85e-04  9.69e-01  
  8  +4.9089e-01  +8.5788e-01  3.67e-01  1.16e-04  2.99e-02  2.84e-03  3.14e-04  6.30e-01  
  9  +4.8773e-01  +8.3473e-01  3.47e-01  8.99e-05  2.33e-02  2.77e-03  2.44e-04  3.24e-01  
 10  +4.8582e-01  +8.0577e-01  3.20e-01  8.16e-05  2.11e-02  1.82e-03  2.23e-04  3.04e-01  
 11  +4.7625e-01  +7.1312e-01  2.37e-01  6.17e-05  1.59e-02  1.74e-05  1.74e-04  7.79e-01  
 12  +4.6349e-01  +6.5241e-01  1.89e-01  4.38e-05  1.13e-02  1.30e-05  1.28e-04  3.86e-01  
 13  +4.4303e-01  +5.6105e-01  1.18e-01  2.46e-05  6.30e-03  7.28e-06  7.59e-05  4.66e-01  
 14  +4.3530e-01  +5.2883e-01  9.35e-02  1.89e-05  4.83e-03  5.63e-06  5.97e-05  2.81e-01  
 15  +4.2311e-01  +4.7854e-01  5.54e-02  1.06e-05  2.72e-03  3.27e-06  3.49e-05  6.46e-01  
 16  +4.1587e-01  +4.4965e-01  3.38e-02  6.29e-06  1.60e-03  2.07e-06  2.11e-05  6.12e-01  
 17  +4.0897e-01  +4.2287e-01  1.39e-02  2.51e-06  6.40e-04  9.19e-07  8.67e-06  9.45e-01  
 18  +4.0562e-01  +4.1089e-01  5.27e-03  9.43e-07  2.41e-04  3.47e-07  3.33e-06  7.80e-01  
 19  +4.0360e-01  +4.0384e-01  2.40e-04  4.26e-08  1.09e-05  1.55e-08  1.53e-07  9.69e-01  
 20  +4.0350e-01  +4.0350e-01  2.42e-06  4.30e-10  1.10e-07  1.56e-10  1.55e-09  9.90e-01  
 21  +4.0350e-01  +4.0350e-01  2.42e-08  4.30e-12  1.10e-09  1.56e-12  1.55e-11  9.90e-01  
 22  +4.0350e-01  +4.0350e-01  2.42e-10  4.30e-14  1.10e-11  1.58e-14  1.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 227.9123ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:40 PM: Optimal value: 4.035e-01
(CVXPY) Oct 06 04:29:40 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:40 PM: Solver (including time spent in interface) took 2.510e-01 seconds
Iteration: 11, Objective: 0.4035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:40 PM: Your problem has 5131 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:40 PM: Finished problem compilation (took 6.356e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5131
  constraints   = 10131
  nnz(P)        = 0
  nnz(A)        = 87638
  cones (total) = 1
    : Nonnegative = 1,  numel = 10131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7763e-01  +1.0990e+03  1.10e+03  4.45e-01  8.34e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2879e-01  +1.1930e+02  1.19e+02  1.77e-01  4.24e+01  1.79e-02  2.88e-01  9.62e-01  
  3  +5.0821e-01  +3.0850e+01  3.03e+01  1.23e-01  2.95e+01  5.09e-05  2.59e-01  3.65e-01  
  4  +5.0110e-01  +3.2759e+00  2.77e+00  1.90e-02  4.70e+00  6.32e-06  1.58e-01  6.29e-01  
  5  +5.0021e-01  +1.2606e+00  7.60e-01  5.12e-03  1.29e+00  4.68e-05  7.59e-02  9.90e-01  
  6  +5.0002e-01  +9.4170e-01  4.42e-01  2.76e-03  7.00e-01  7.49e-05  1.87e-02  7.84e-01  
  7  +4.9683e-01  +9.2792e-01  4.31e-01  2.82e-04  7.31e-02  1.53e-03  7.70e-04  9.69e-01  
  8  +4.9011e-01  +8.8142e-01  3.91e-01  1.10e-04  2.84e-02  3.25e-03  2.96e-04  6.40e-01  
  9  +4.8663e-01  +8.3498e-01  3.48e-01  9.44e-05  2.44e-02  2.26e-03  2.58e-04  2.94e-01  
 10  +4.7930e-01  +7.7909e-01  3.00e-01  7.26e-05  1.87e-02  1.59e-03  2.02e-04  3.81e-01  
 11  +4.6311e-01  +6.7398e-01  2.11e-01  4.87e-05  1.25e-02  4.88e-04  1.42e-04  5.58e-01  
 12  +4.4892e-01  +6.0491e-01  1.56e-01  3.38e-05  8.66e-03  3.08e-04  1.03e-04  3.34e-01  
 13  +4.3687e-01  +5.4819e-01  1.11e-01  2.30e-05  5.87e-03  1.13e-04  7.26e-05  5.85e-01  
 14  +4.2591e-01  +4.9913e-01  7.32e-02  1.44e-05  3.68e-03  2.58e-05  4.70e-05  7.69e-01  
 15  +4.0955e-01  +4.3201e-01  2.25e-02  4.25e-06  1.08e-03  4.76e-06  1.47e-05  8.17e-01  
 16  +4.0729e-01  +4.2301e-01  1.57e-02  2.92e-06  7.44e-04  2.15e-06  1.02e-05  6.71e-01  
 17  +4.0303e-01  +4.0748e-01  4.45e-03  8.11e-07  2.07e-04  5.76e-07  2.92e-06  7.45e-01  
 18  +4.0158e-01  +4.0224e-01  6.64e-04  1.20e-07  3.06e-05  4.40e-08  4.38e-07  9.90e-01  
 19  +4.0130e-01  +4.0131e-01  7.86e-06  1.42e-09  3.62e-07  5.20e-10  5.19e-09  9.88e-01  
 20  +4.0130e-01  +4.0130e-01  7.86e-08  1.42e-11  3.62e-09  5.20e-12  5.19e-11  9.90e-01  
 21  +4.0130e-01  +4.0130e-01  7.86e-10  1.42e-13  3.62e-11  5.26e-14  5.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.8668ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:41 PM: Optimal value: 4.013e-01
(CVXPY) Oct 06 04:29:41 PM: Compilation took 6.356e-02 seconds
(CVXPY) Oct 06 04:29:41 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 12, Objective: 0.4013
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:41 PM: Your problem has 5141 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:41 PM: Finished problem compilation (took 6.296e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5141
  constraints   = 10141
  nnz(P)        = 0
  nnz(A)        = 88172
  cones (total) = 1
    : Nonnegative = 1,  numel = 10141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7753e-01  +1.0991e+03  1.10e+03  4.45e-01  8.33e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2874e-01  +1.1923e+02  1.19e+02  1.77e-01  4.23e+01  1.80e-02  2.87e-01  9.63e-01  
  3  +5.0820e-01  +3.0836e+01  3.03e+01  1.23e-01  2.95e+01  5.10e-05  2.59e-01  3.67e-01  
  4  +5.0110e-01  +3.2775e+00  2.78e+00  1.90e-02  4.70e+00  6.33e-06  1.57e-01  6.30e-01  
  5  +5.0021e-01  +1.2754e+00  7.75e-01  5.22e-03  1.32e+00  4.74e-05  7.52e-02  9.90e-01  
  6  +5.0001e-01  +9.4574e-01  4.46e-01  2.76e-03  7.00e-01  7.85e-05  1.78e-02  7.88e-01  
  7  +4.9681e-01  +9.3357e-01  4.37e-01  2.85e-04  7.38e-02  1.54e-03  7.77e-04  9.65e-01  
  8  +4.9004e-01  +8.8344e-01  3.93e-01  1.11e-04  2.88e-02  3.18e-03  3.01e-04  6.42e-01  
  9  +4.8697e-01  +8.4258e-01  3.56e-01  9.55e-05  2.47e-02  2.29e-03  2.60e-04  3.09e-01  
 10  +4.8237e-01  +8.0179e-01  3.19e-01  8.14e-05  2.10e-02  1.61e-03  2.24e-04  3.05e-01  
 11  +4.7295e-01  +7.3039e-01  2.57e-01  6.42e-05  1.65e-02  6.07e-04  1.82e-04  5.00e-01  
 12  +4.4568e-01  +5.9013e-01  1.44e-01  3.02e-05  7.73e-03  2.49e-04  9.20e-05  5.87e-01  
 13  +4.3995e-01  +5.6462e-01  1.25e-01  2.58e-05  6.59e-03  1.66e-04  8.00e-05  3.05e-01  
 14  +4.2592e-01  +5.0413e-01  7.82e-02  1.56e-05  3.98e-03  8.44e-05  5.08e-05  4.52e-01  
 15  +4.1823e-01  +4.7167e-01  5.34e-02  1.03e-05  2.62e-03  3.22e-05  3.43e-05  6.42e-01  
 16  +4.1047e-01  +4.4057e-01  3.01e-02  5.68e-06  1.45e-03  1.55e-05  1.97e-05  5.16e-01  
 17  +4.0417e-01  +4.1559e-01  1.14e-02  2.11e-06  5.39e-04  2.93e-06  7.57e-06  8.44e-01  
 18  +4.0074e-01  +4.0282e-01  2.07e-03  3.81e-07  9.72e-05  1.57e-07  1.40e-06  9.90e-01  
 19  +3.9991e-01  +3.9994e-01  2.80e-05  5.13e-09  1.31e-06  2.07e-09  1.90e-08  9.87e-01  
 20  +3.9990e-01  +3.9990e-01  2.80e-07  5.13e-11  1.31e-08  2.07e-11  1.90e-10  9.90e-01  
 21  +3.9990e-01  +3.9990e-01  2.80e-09  5.13e-13  1.31e-10  2.09e-13  1.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 221.8856ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:41 PM: Optimal value: 3.999e-01
(CVXPY) Oct 06 04:29:41 PM: Compilation took 6.296e-02 seconds
(CVXPY) Oct 06 04:29:41 PM: Solver (including time spent in interface) took 2.357e-01 seconds
Iteration: 13, Objective: 0.3999
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:41 PM: Your problem has 5151 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:41 PM: Finished problem compilation (took 6.242e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5151
  constraints   = 10151
  nnz(P)        = 0
  nnz(A)        = 88658
  cones (total) = 1
    : Nonnegative = 1,  numel = 10151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7747e-01  +1.0990e+03  1.10e+03  4.45e-01  8.32e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2870e-01  +1.1913e+02  1.19e+02  1.77e-01  4.22e+01  1.80e-02  2.87e-01  9.63e-01  
  3  +5.0819e-01  +3.0806e+01  3.03e+01  1.22e-01  2.94e+01  5.10e-05  2.58e-01  3.68e-01  
  4  +5.0110e-01  +3.2702e+00  2.77e+00  1.90e-02  4.69e+00  6.34e-06  1.56e-01  6.32e-01  
  5  +5.0022e-01  +1.2910e+00  7.91e-01  5.33e-03  1.34e+00  4.78e-05  7.41e-02  9.90e-01  
  6  +5.0001e-01  +9.5472e-01  4.55e-01  2.77e-03  7.02e-01  8.33e-05  1.67e-02  8.00e-01  
  7  +4.9674e-01  +9.4277e-01  4.46e-01  2.82e-04  7.31e-02  1.57e-03  7.66e-04  9.61e-01  
  8  +4.8986e-01  +8.9410e-01  4.04e-01  1.12e-04  2.89e-02  3.23e-03  3.00e-04  6.35e-01  
  9  +4.8590e-01  +8.4621e-01  3.60e-01  9.41e-05  2.43e-02  2.23e-03  2.56e-04  3.32e-01  
 10  +4.7479e-01  +7.4760e-01  2.73e-01  6.74e-05  1.74e-02  6.39e-04  1.89e-04  6.22e-01  
 11  +4.5127e-01  +6.1860e-01  1.67e-01  3.77e-05  9.66e-03  2.30e-05  1.14e-04  7.98e-01  
 12  +4.4162e-01  +5.7676e-01  1.35e-01  2.92e-05  7.46e-03  1.60e-05  9.06e-05  3.31e-01  
 13  +4.2690e-01  +5.1417e-01  8.73e-02  1.78e-05  4.55e-03  9.09e-06  5.81e-05  4.35e-01  
 14  +4.2358e-01  +5.0064e-01  7.71e-02  1.55e-05  3.94e-03  7.63e-06  5.09e-05  2.21e-01  
 15  +4.1269e-01  +4.5622e-01  4.35e-02  8.31e-06  2.12e-03  3.29e-06  2.85e-05  7.74e-01  
 16  +4.0246e-01  +4.1614e-01  1.37e-02  2.55e-06  6.49e-04  8.67e-07  9.19e-06  9.90e-01  
 17  +3.9755e-01  +3.9822e-01  6.61e-04  1.22e-07  3.12e-05  3.99e-08  4.57e-07  9.58e-01  
 18  +3.9730e-01  +3.9731e-01  6.78e-06  1.26e-09  3.20e-07  4.08e-10  4.70e-09  9.90e-01  
 19  +3.9730e-01  +3.9730e-01  6.78e-08  1.25e-11  3.20e-09  4.08e-12  4.70e-11  9.90e-01  
 20  +3.9730e-01  +3.9730e-01  6.78e-10  1.26e-13  3.20e-11  4.09e-14  4.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 211.503ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:42 PM: Optimal value: 3.973e-01
(CVXPY) Oct 06 04:29:42 PM: Compilation took 6.242e-02 seconds
(CVXPY) Oct 06 04:29:42 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 14, Objective: 0.3973
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:42 PM: Your problem has 5161 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:42 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5161
  constraints   = 10161
  nnz(P)        = 0
  nnz(A)        = 89030
  cones (total) = 1
    : Nonnegative = 1,  numel = 10161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.27e+02  1.00e+00  1.00e+00   ------   
  1  +5.7736e-01  +1.0991e+03  1.10e+03  4.45e-01  8.31e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2862e-01  +1.1900e+02  1.18e+02  1.77e-01  4.21e+01  1.80e-02  2.87e-01  9.64e-01  
  3  +5.0818e-01  +3.0778e+01  3.03e+01  1.22e-01  2.93e+01  5.12e-05  2.57e-01  3.70e-01  
  4  +5.0110e-01  +3.2695e+00  2.77e+00  1.90e-02  4.69e+00  6.36e-06  1.56e-01  6.33e-01  
  5  +5.0022e-01  +1.3133e+00  8.13e-01  5.48e-03  1.38e+00  4.85e-05  7.30e-02  9.90e-01  
  6  +4.9999e-01  +9.5659e-01  4.57e-01  2.68e-03  6.81e-01  9.17e-05  1.45e-02  8.42e-01  
  7  +4.9667e-01  +9.4592e-01  4.49e-01  2.74e-04  7.10e-02  1.58e-03  7.40e-04  9.53e-01  
  8  +4.9136e-01  +9.0728e-01  4.16e-01  1.31e-04  3.38e-02  2.78e-03  3.51e-04  5.54e-01  
  9  +4.8679e-01  +8.5808e-01  3.71e-01  1.01e-04  2.61e-02  2.21e-03  2.74e-04  3.79e-01  
 10  +4.8145e-01  +8.1624e-01  3.35e-01  8.45e-05  2.18e-02  1.68e-03  2.32e-04  2.91e-01  
 11  +4.7423e-01  +7.6571e-01  2.91e-01  7.19e-05  1.85e-02  1.12e-03  2.02e-04  2.73e-01  
 12  +4.4819e-01  +6.1217e-01  1.64e-01  3.64e-05  9.32e-03  3.54e-05  1.10e-04  8.05e-01  
 13  +4.3212e-01  +5.4185e-01  1.10e-01  2.30e-05  5.86e-03  1.55e-05  7.33e-05  5.59e-01  
 14  +4.2228e-01  +5.0048e-01  7.82e-02  1.57e-05  3.99e-03  8.55e-06  5.16e-05  5.44e-01  
 15  +4.1638e-01  +4.7551e-01  5.91e-02  1.14e-05  2.91e-03  4.55e-06  3.83e-05  7.87e-01  
 16  +4.0942e-01  +4.4736e-01  3.79e-02  7.14e-06  1.82e-03  2.56e-06  2.46e-05  9.52e-01  
 17  +4.0057e-01  +4.1340e-01  1.28e-02  2.39e-06  6.09e-04  8.49e-07  8.70e-06  7.16e-01  
 18  +3.9623e-01  +3.9705e-01  8.21e-04  1.52e-07  3.87e-05  4.97e-08  5.71e-07  9.90e-01  
 19  +3.9590e-01  +3.9591e-01  8.42e-06  1.56e-09  3.97e-07  5.09e-10  5.87e-09  9.90e-01  
 20  +3.9590e-01  +3.9590e-01  8.42e-08  1.56e-11  3.97e-09  5.09e-12  5.87e-11  9.90e-01  
 21  +3.9590e-01  +3.9590e-01  8.42e-10  1.56e-13  3.97e-11  5.10e-14  5.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 227.0066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:42 PM: Optimal value: 3.959e-01
(CVXPY) Oct 06 04:29:42 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:42 PM: Solver (including time spent in interface) took 2.501e-01 seconds
Iteration: 15, Objective: 0.3959
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:43 PM: Your problem has 5171 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:43 PM: Finished problem compilation (took 6.242e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5171
  constraints   = 10171
  nnz(P)        = 0
  nnz(A)        = 89494
  cones (total) = 1
    : Nonnegative = 1,  numel = 10171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7733e-01  +1.0990e+03  1.10e+03  4.45e-01  8.31e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2861e-01  +1.1896e+02  1.18e+02  1.77e-01  4.20e+01  1.80e-02  2.87e-01  9.65e-01  
  3  +5.0818e-01  +3.0765e+01  3.03e+01  1.22e-01  2.93e+01  5.12e-05  2.57e-01  3.71e-01  
  4  +5.0109e-01  +3.2672e+00  2.77e+00  1.90e-02  4.68e+00  6.36e-06  1.55e-01  6.34e-01  
  5  +5.0023e-01  +1.3200e+00  8.20e-01  5.52e-03  1.39e+00  4.87e-05  7.25e-02  9.90e-01  
  6  +5.0001e-01  +1.0010e+00  5.01e-01  3.00e-03  7.60e-01  8.85e-05  1.69e-02  7.93e-01  
  7  +4.9684e-01  +9.7804e-01  4.81e-01  3.06e-04  7.92e-02  1.52e-03  8.27e-04  9.59e-01  
  8  +4.9096e-01  +9.2937e-01  4.38e-01  1.33e-04  3.43e-02  2.87e-03  3.56e-04  5.99e-01  
  9  +4.8671e-01  +8.7354e-01  3.87e-01  1.05e-04  2.72e-02  2.09e-03  2.85e-04  3.75e-01  
 10  +4.8299e-01  +8.3836e-01  3.55e-01  9.24e-05  2.38e-02  1.59e-03  2.53e-04  2.54e-01  
 11  +4.7648e-01  +7.7757e-01  3.01e-01  7.92e-05  2.04e-02  7.00e-04  2.21e-04  4.20e-01  
 12  +4.4894e-01  +6.1844e-01  1.70e-01  3.67e-05  9.40e-03  5.24e-05  1.10e-04  8.46e-01  
 13  +4.3896e-01  +5.7496e-01  1.36e-01  2.87e-05  7.33e-03  3.71e-05  8.92e-05  2.67e-01  
 14  +4.2334e-01  +5.0842e-01  8.51e-02  1.72e-05  4.38e-03  1.62e-05  5.64e-05  5.51e-01  
 15  +4.0706e-01  +4.4066e-01  3.36e-02  6.47e-06  1.65e-03  3.24e-06  2.25e-05  8.67e-01  
 16  +3.9896e-01  +4.0897e-01  1.00e-02  1.89e-06  4.80e-04  6.74e-07  6.87e-06  9.53e-01  
 17  +3.9607e-01  +3.9837e-01  2.30e-03  4.31e-07  1.10e-04  1.52e-07  1.61e-06  7.93e-01  
 18  +3.9522e-01  +3.9528e-01  5.72e-05  1.07e-08  2.72e-06  3.52e-09  4.03e-08  9.86e-01  
 19  +3.9520e-01  +3.9520e-01  5.73e-07  1.07e-10  2.72e-08  3.53e-11  4.04e-10  9.90e-01  
 20  +3.9520e-01  +3.9520e-01  5.73e-09  1.07e-12  2.72e-10  3.53e-13  4.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.9721ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:43 PM: Optimal value: 3.952e-01
(CVXPY) Oct 06 04:29:43 PM: Compilation took 6.242e-02 seconds
(CVXPY) Oct 06 04:29:43 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 16, Objective: 0.3952
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:43 PM: Your problem has 5181 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:43 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5181
  constraints   = 10181
  nnz(P)        = 0
  nnz(A)        = 89898
  cones (total) = 1
    : Nonnegative = 1,  numel = 10181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7725e-01  +1.0991e+03  1.10e+03  4.45e-01  8.30e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2855e-01  +1.1884e+02  1.18e+02  1.77e-01  4.19e+01  1.80e-02  2.86e-01  9.66e-01  
  3  +5.0816e-01  +3.0735e+01  3.02e+01  1.22e-01  2.92e+01  5.13e-05  2.57e-01  3.73e-01  
  4  +5.0109e-01  +3.2654e+00  2.76e+00  1.90e-02  4.68e+00  6.37e-06  1.55e-01  6.35e-01  
  5  +5.0023e-01  +1.3366e+00  8.36e-01  5.64e-03  1.42e+00  4.91e-05  7.16e-02  9.90e-01  
  6  +5.0000e-01  +1.0039e+00  5.04e-01  2.95e-03  7.49e-01  9.33e-05  1.56e-02  8.09e-01  
  7  +4.9682e-01  +9.8374e-01  4.87e-01  3.05e-04  7.91e-02  1.52e-03  8.23e-04  9.53e-01  
  8  +4.9136e-01  +9.3686e-01  4.46e-01  1.40e-04  3.63e-02  2.72e-03  3.75e-04  5.75e-01  
  9  +4.8745e-01  +8.8540e-01  3.98e-01  1.07e-04  2.76e-02  2.07e-03  2.88e-04  4.32e-01  
 10  +4.7584e-01  +7.8067e-01  3.05e-01  7.52e-05  1.94e-02  8.82e-04  2.09e-04  5.45e-01  
 11  +4.6824e-01  +7.3772e-01  2.69e-01  6.40e-05  1.65e-02  6.93e-04  1.82e-04  1.95e-01  
 12  +4.4288e-01  +5.9914e-01  1.56e-01  3.45e-05  8.80e-03  8.01e-05  1.06e-04  7.22e-01  
 13  +4.3577e-01  +5.6752e-01  1.32e-01  2.81e-05  7.18e-03  4.50e-05  8.82e-05  4.38e-01  
 14  +4.1784e-01  +4.8929e-01  7.15e-02  1.44e-05  3.67e-03  1.53e-05  4.81e-05  6.39e-01  
 15  +4.0844e-01  +4.5029e-01  4.19e-02  8.20e-06  2.08e-03  7.59e-06  2.83e-05  5.31e-01  
 16  +4.0004e-01  +4.1595e-01  1.59e-02  3.03e-06  7.70e-04  1.68e-06  1.09e-05  8.62e-01  
 17  +3.9517e-01  +3.9745e-01  2.27e-03  4.28e-07  1.09e-04  1.93e-07  1.59e-06  9.16e-01  
 18  +3.9432e-01  +3.9438e-01  5.51e-05  1.03e-08  2.62e-06  3.68e-09  3.90e-08  9.90e-01  
 19  +3.9430e-01  +3.9430e-01  5.52e-07  1.04e-10  2.63e-08  3.69e-11  3.91e-10  9.90e-01  
 20  +3.9430e-01  +3.9430e-01  5.52e-09  1.04e-12  2.63e-10  3.69e-13  3.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 228.0944ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:43 PM: Optimal value: 3.943e-01
(CVXPY) Oct 06 04:29:43 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:43 PM: Solver (including time spent in interface) took 2.513e-01 seconds
Iteration: 17, Objective: 0.3943
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:44 PM: Your problem has 5191 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:44 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5191
  constraints   = 10191
  nnz(P)        = 0
  nnz(A)        = 90258
  cones (total) = 1
    : Nonnegative = 1,  numel = 10191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7719e-01  +1.0992e+03  1.10e+03  4.46e-01  8.29e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2851e-01  +1.1879e+02  1.18e+02  1.77e-01  4.18e+01  1.80e-02  2.86e-01  9.66e-01  
  3  +5.0816e-01  +3.0726e+01  3.02e+01  1.22e-01  2.92e+01  5.13e-05  2.57e-01  3.74e-01  
  4  +5.0109e-01  +3.2677e+00  2.77e+00  1.90e-02  4.68e+00  6.38e-06  1.55e-01  6.36e-01  
  5  +5.0024e-01  +1.3545e+00  8.54e-01  5.76e-03  1.45e+00  4.93e-05  7.19e-02  9.82e-01  
  6  +4.9997e-01  +9.6414e-01  4.64e-01  2.60e-03  6.60e-01  1.01e-04  1.25e-02  8.75e-01  
  7  +4.9674e-01  +9.5115e-01  4.54e-01  2.75e-04  7.12e-02  1.53e-03  7.40e-04  9.44e-01  
  8  +4.9236e-01  +9.1369e-01  4.21e-01  1.45e-04  3.76e-02  2.38e-03  3.88e-04  5.21e-01  
  9  +4.8923e-01  +8.8256e-01  3.93e-01  1.12e-04  2.90e-02  2.12e-03  3.01e-04  3.86e-01  
 10  +4.8550e-01  +8.4399e-01  3.58e-01  9.85e-05  2.54e-02  1.46e-03  2.67e-04  3.09e-01  
 11  +4.6876e-01  +7.3816e-01  2.69e-01  6.10e-05  1.57e-02  9.20e-04  1.72e-04  4.99e-01  
 12  +4.4926e-01  +6.2969e-01  1.80e-01  4.20e-05  1.07e-02  8.35e-06  1.27e-04  7.36e-01  
 13  +4.3485e-01  +5.6464e-01  1.30e-01  2.80e-05  7.15e-03  5.99e-06  8.85e-05  5.96e-01  
 14  +4.1994e-01  +4.9958e-01  7.96e-02  1.62e-05  4.13e-03  3.89e-06  5.36e-05  6.81e-01  
 15  +4.0382e-01  +4.3232e-01  2.85e-02  5.56e-06  1.41e-03  1.39e-06  1.95e-05  7.37e-01  
 16  +3.9908e-01  +4.1294e-01  1.39e-02  2.65e-06  6.74e-04  7.97e-07  9.50e-06  8.82e-01  
 17  +3.9622e-01  +4.0218e-01  5.96e-03  1.13e-06  2.88e-04  3.43e-07  4.14e-06  5.93e-01  
 18  +3.9515e-01  +3.9816e-01  3.01e-03  5.69e-07  1.45e-04  1.74e-07  2.10e-06  6.85e-01  
 19  +3.9406e-01  +3.9423e-01  1.60e-04  3.01e-08  7.67e-06  9.26e-09  1.13e-07  9.85e-01  
 20  +3.9400e-01  +3.9400e-01  1.72e-06  3.23e-10  8.23e-08  9.94e-11  1.21e-09  9.89e-01  
 21  +3.9400e-01  +3.9400e-01  1.72e-08  3.23e-12  8.23e-10  9.94e-13  1.21e-11  9.90e-01  
 22  +3.9400e-01  +3.9400e-01  1.72e-10  3.23e-14  8.23e-12  1.01e-14  1.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 240.5838ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:44 PM: Optimal value: 3.940e-01
(CVXPY) Oct 06 04:29:44 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:44 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 18, Objective: 0.3940
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:44 PM: Your problem has 5201 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:44 PM: Finished problem compilation (took 6.252e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5201
  constraints   = 10201
  nnz(P)        = 0
  nnz(A)        = 90721
  cones (total) = 1
    : Nonnegative = 1,  numel = 10201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7716e-01  +1.0991e+03  1.10e+03  4.46e-01  8.29e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2850e-01  +1.1875e+02  1.18e+02  1.77e-01  4.17e+01  1.80e-02  2.86e-01  9.66e-01  
  3  +5.0815e-01  +3.0710e+01  3.02e+01  1.22e-01  2.91e+01  5.13e-05  2.56e-01  3.75e-01  
  4  +5.0109e-01  +3.2660e+00  2.76e+00  1.90e-02  4.68e+00  6.38e-06  1.54e-01  6.36e-01  
  5  +5.0026e-01  +1.3961e+00  8.96e-01  6.04e-03  1.52e+00  4.86e-05  7.38e-02  9.55e-01  
  6  +5.0001e-01  +9.9931e-01  4.99e-01  2.90e-03  7.37e-01  9.00e-05  1.50e-02  8.39e-01  
  7  +4.9709e-01  +9.8317e-01  4.86e-01  3.14e-04  8.13e-02  1.39e-03  8.45e-04  9.50e-01  
  8  +4.9217e-01  +9.3602e-01  4.44e-01  1.49e-04  3.84e-02  2.39e-03  3.97e-04  5.66e-01  
  9  +4.9055e-01  +8.8599e-01  3.95e-01  1.19e-04  3.07e-02  1.27e-03  3.18e-04  5.57e-01  
 10  +4.8647e-01  +8.4363e-01  3.57e-01  1.03e-04  2.66e-02  8.49e-04  2.78e-04  3.36e-01  
 11  +4.7094e-01  +7.4863e-01  2.78e-01  6.42e-05  1.65e-02  6.03e-04  1.80e-04  4.79e-01  
 12  +4.6730e-01  +7.2689e-01  2.60e-01  6.17e-05  1.58e-02  4.09e-04  1.75e-04  2.09e-01  
 13  +4.4180e-01  +5.9772e-01  1.56e-01  3.34e-05  8.54e-03  1.77e-04  1.02e-04  4.96e-01  
 14  +4.3311e-01  +5.5922e-01  1.26e-01  2.64e-05  6.72e-03  1.04e-04  8.31e-05  3.85e-01  
 15  +4.2000e-01  +5.0192e-01  8.19e-02  1.65e-05  4.20e-03  4.13e-05  5.44e-05  5.85e-01  
 16  +4.0295e-01  +4.3049e-01  2.75e-02  5.33e-06  1.35e-03  1.08e-05  1.87e-05  7.15e-01  
 17  +3.9893e-01  +4.1412e-01  1.52e-02  2.89e-06  7.35e-04  3.39e-06  1.04e-05  7.37e-01  
 18  +3.9500e-01  +3.9918e-01  4.19e-03  7.88e-07  2.00e-04  5.52e-07  2.89e-06  8.82e-01  
 19  +3.9381e-01  +3.9485e-01  1.03e-03  1.94e-07  4.92e-05  7.20e-08  7.17e-07  9.64e-01  
 20  +3.9341e-01  +3.9343e-01  1.81e-05  3.38e-09  8.60e-07  1.26e-09  1.26e-08  9.83e-01  
 21  +3.9340e-01  +3.9340e-01  1.82e-07  3.41e-11  8.66e-09  1.27e-11  1.27e-10  9.90e-01  
 22  +3.9340e-01  +3.9340e-01  1.86e-09  3.48e-13  8.86e-11  1.30e-13  1.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 234.9441ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:45 PM: Optimal value: 3.934e-01
(CVXPY) Oct 06 04:29:45 PM: Compilation took 6.252e-02 seconds
(CVXPY) Oct 06 04:29:45 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 19, Objective: 0.3934
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:45 PM: Your problem has 5211 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:45 PM: Finished problem compilation (took 6.600e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5211
  constraints   = 10211
  nnz(P)        = 0
  nnz(A)        = 90953
  cones (total) = 1
    : Nonnegative = 1,  numel = 10211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7707e-01  +1.0991e+03  1.10e+03  4.46e-01  8.28e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2843e-01  +1.1862e+02  1.18e+02  1.76e-01  4.16e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0815e-01  +3.0683e+01  3.02e+01  1.22e-01  2.91e+01  5.14e-05  2.56e-01  3.76e-01  
  4  +5.0109e-01  +3.2638e+00  2.76e+00  1.90e-02  4.68e+00  6.39e-06  1.54e-01  6.37e-01  
  5  +5.0025e-01  +1.3967e+00  8.96e-01  6.04e-03  1.52e+00  4.99e-05  7.14e-02  9.73e-01  
  6  +4.9998e-01  +9.9038e-01  4.90e-01  2.71e-03  6.90e-01  1.04e-04  1.27e-02  8.56e-01  
  7  +4.9682e-01  +9.7568e-01  4.79e-01  2.92e-04  7.55e-02  1.50e-03  7.83e-04  9.42e-01  
  8  +4.9180e-01  +9.2915e-01  4.37e-01  1.46e-04  3.77e-02  2.41e-03  3.89e-04  5.42e-01  
  9  +4.9014e-01  +9.0036e-01  4.10e-01  1.27e-04  3.27e-02  1.80e-03  3.38e-04  3.40e-01  
 10  +4.8449e-01  +8.5929e-01  3.75e-01  9.46e-05  2.44e-02  1.61e-03  2.56e-04  3.78e-01  
 11  +4.7146e-01  +7.6537e-01  2.94e-01  7.16e-05  1.84e-02  8.00e-04  2.01e-04  4.10e-01  
 12  +4.4393e-01  +6.1492e-01  1.71e-01  3.71e-05  9.46e-03  2.31e-04  1.13e-04  6.14e-01  
 13  +4.3088e-01  +5.5543e-01  1.25e-01  2.62e-05  6.66e-03  1.03e-04  8.30e-05  5.00e-01  
 14  +4.1921e-01  +5.0313e-01  8.39e-02  1.70e-05  4.31e-03  2.58e-05  5.60e-05  7.52e-01  
 15  +4.0365e-01  +4.3755e-01  3.39e-02  6.64e-06  1.68e-03  8.87e-06  2.33e-05  6.34e-01  
 16  +4.0130e-01  +4.2801e-01  2.67e-02  5.18e-06  1.31e-03  6.58e-06  1.83e-05  2.76e-01  
 17  +3.9836e-01  +4.1488e-01  1.65e-02  3.15e-06  8.00e-04  1.19e-06  1.13e-05  9.90e-01  
 18  +3.9350e-01  +3.9694e-01  3.44e-03  6.52e-07  1.66e-04  2.38e-07  2.41e-06  8.27e-01  
 19  +3.9231e-01  +3.9261e-01  2.95e-04  5.57e-08  1.42e-05  1.93e-08  2.08e-07  9.43e-01  
 20  +3.9220e-01  +3.9220e-01  3.07e-06  5.80e-10  1.47e-07  2.01e-10  2.17e-09  9.90e-01  
 21  +3.9220e-01  +3.9220e-01  3.07e-08  5.81e-12  1.47e-09  2.01e-12  2.17e-11  9.90e-01  
 22  +3.9220e-01  +3.9220e-01  3.09e-10  5.84e-14  1.48e-11  2.03e-14  2.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 246.7223ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:45 PM: Optimal value: 3.922e-01
(CVXPY) Oct 06 04:29:45 PM: Compilation took 6.600e-02 seconds
(CVXPY) Oct 06 04:29:45 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 20, Objective: 0.3922
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:45 PM: Your problem has 5221 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:45 PM: Finished problem compilation (took 7.895e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5221
  constraints   = 10221
  nnz(P)        = 0
  nnz(A)        = 91306
  cones (total) = 1
    : Nonnegative = 1,  numel = 10221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7697e-01  +1.0992e+03  1.10e+03  4.46e-01  8.27e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2837e-01  +1.1851e+02  1.18e+02  1.76e-01  4.15e+01  1.80e-02  2.85e-01  9.68e-01  
  3  +5.0814e-01  +3.0658e+01  3.01e+01  1.22e-01  2.90e+01  5.15e-05  2.55e-01  3.78e-01  
  4  +5.0109e-01  +3.2619e+00  2.76e+00  1.90e-02  4.67e+00  6.40e-06  1.53e-01  6.39e-01  
  5  +5.0026e-01  +1.4171e+00  9.17e-01  6.18e-03  1.55e+00  5.11e-05  6.99e-02  9.78e-01  
  6  +4.9995e-01  +9.9140e-01  4.91e-01  2.60e-03  6.61e-01  1.14e-04  1.13e-02  8.71e-01  
  7  +4.9674e-01  +9.7516e-01  4.78e-01  2.85e-04  7.39e-02  1.52e-03  7.64e-04  9.36e-01  
  8  +4.9329e-01  +9.4263e-01  4.49e-01  1.75e-04  4.54e-02  2.08e-03  4.68e-04  4.23e-01  
  9  +4.9202e-01  +8.9599e-01  4.04e-01  1.43e-04  3.70e-02  1.01e-03  3.82e-04  5.90e-01  
 10  +4.8734e-01  +8.6139e-01  3.74e-01  1.05e-04  2.70e-02  8.91e-04  2.81e-04  4.46e-01  
 11  +4.8093e-01  +8.1412e-01  3.33e-01  9.01e-05  2.32e-02  4.95e-04  2.46e-04  3.98e-01  
 12  +4.5081e-01  +6.4569e-01  1.95e-01  4.14e-05  1.06e-02  1.96e-04  1.22e-04  6.68e-01  
 13  +4.3212e-01  +5.6189e-01  1.30e-01  2.71e-05  6.91e-03  9.51e-05  8.52e-05  4.14e-01  
 14  +4.2323e-01  +5.2368e-01  1.00e-01  2.06e-05  5.25e-03  6.19e-05  6.69e-05  3.28e-01  
 15  +4.0807e-01  +4.5906e-01  5.10e-02  1.01e-05  2.56e-03  1.41e-05  3.47e-05  7.82e-01  
 16  +4.0116e-01  +4.3061e-01  2.94e-02  5.72e-06  1.45e-03  5.88e-06  2.02e-05  6.36e-01  
 17  +3.9639e-01  +4.1096e-01  1.46e-02  2.80e-06  7.10e-04  1.00e-06  1.01e-05  9.90e-01  
 18  +3.9407e-01  +4.0226e-01  8.19e-03  1.57e-06  3.98e-04  5.58e-07  5.76e-06  4.64e-01  
 19  +3.9229e-01  +3.9560e-01  3.31e-03  6.32e-07  1.60e-04  2.20e-07  2.35e-06  6.64e-01  
 20  +3.9136e-01  +3.9212e-01  7.66e-04  1.45e-07  3.69e-05  4.44e-08  5.45e-07  9.90e-01  
 21  +3.9107e-01  +3.9113e-01  5.66e-05  1.07e-08  2.71e-06  3.27e-09  4.02e-08  9.41e-01  
 22  +3.9105e-01  +3.9105e-01  5.76e-07  1.09e-10  2.76e-08  3.33e-11  4.10e-10  9.90e-01  
 23  +3.9105e-01  +3.9105e-01  5.76e-09  1.09e-12  2.76e-10  3.37e-13  4.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 257.6172ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:46 PM: Optimal value: 3.911e-01
(CVXPY) Oct 06 04:29:46 PM: Compilation took 7.895e-02 seconds
(CVXPY) Oct 06 04:29:46 PM: Solver (including time spent in interface) took 2.658e-01 seconds
Iteration: 21, Objective: 0.3911
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:46 PM: Your problem has 5231 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:46 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5231
  constraints   = 10231
  nnz(P)        = 0
  nnz(A)        = 91649
  cones (total) = 1
    : Nonnegative = 1,  numel = 10231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7691e-01  +1.0992e+03  1.10e+03  4.46e-01  8.26e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2832e-01  +1.1840e+02  1.18e+02  1.76e-01  4.15e+01  1.80e-02  2.85e-01  9.69e-01  
  3  +5.0813e-01  +3.0629e+01  3.01e+01  1.21e-01  2.89e+01  5.16e-05  2.55e-01  3.80e-01  
  4  +5.0109e-01  +3.2598e+00  2.76e+00  1.90e-02  4.67e+00  6.41e-06  1.52e-01  6.40e-01  
  5  +5.0026e-01  +1.4304e+00  9.30e-01  6.26e-03  1.57e+00  5.23e-05  6.82e-02  9.86e-01  
  6  +4.9988e-01  +9.5161e-01  4.52e-01  2.10e-03  5.35e-01  1.40e-04  7.98e-03  9.38e-01  
  7  +4.9640e-01  +9.3419e-01  4.38e-01  2.36e-04  6.12e-02  1.63e-03  6.31e-04  9.23e-01  
  8  +4.9428e-01  +9.1758e-01  4.23e-01  1.79e-04  4.63e-02  1.90e-03  4.76e-04  2.83e-01  
  9  +4.9031e-01  +8.7663e-01  3.86e-01  1.23e-04  3.17e-02  1.36e-03  3.27e-04  6.47e-01  
 10  +4.8955e-01  +8.7191e-01  3.82e-01  1.18e-04  3.04e-02  1.31e-03  3.15e-04  8.34e-02  
 11  +4.8754e-01  +8.4988e-01  3.62e-01  1.10e-04  2.85e-02  5.87e-04  2.98e-04  4.90e-01  
 12  +4.7585e-01  +7.8301e-01  3.07e-01  7.73e-05  1.99e-02  4.69e-04  2.14e-04  4.00e-01  
 13  +4.5475e-01  +6.7384e-01  2.19e-01  5.10e-05  1.30e-02  1.63e-04  1.50e-04  5.46e-01  
 14  +4.3484e-01  +5.8060e-01  1.46e-01  3.18e-05  8.10e-03  8.78e-05  9.99e-05  3.97e-01  
 15  +4.2113e-01  +5.2091e-01  9.98e-02  2.10e-05  5.32e-03  3.96e-05  6.91e-05  5.19e-01  
 16  +4.0741e-01  +4.6244e-01  5.50e-02  1.12e-05  2.84e-03  1.94e-05  3.89e-05  4.78e-01  
 17  +4.0072e-01  +4.3468e-01  3.40e-02  6.76e-06  1.71e-03  1.03e-05  2.42e-05  4.80e-01  
 18  +3.9869e-01  +4.2645e-01  2.78e-02  5.49e-06  1.39e-03  8.21e-06  1.99e-05  2.09e-01  
 19  +3.9540e-01  +4.1179e-01  1.64e-02  3.18e-06  8.06e-04  1.23e-06  1.17e-05  9.90e-01  
 20  +3.9069e-01  +3.9419e-01  3.50e-03  6.74e-07  1.71e-04  2.09e-07  2.56e-06  9.87e-01  
 21  +3.8945e-01  +3.8971e-01  2.57e-04  4.93e-08  1.25e-05  1.52e-08  1.90e-07  9.34e-01  
 22  +3.8935e-01  +3.8935e-01  2.69e-06  5.15e-10  1.31e-07  1.59e-10  1.99e-09  9.90e-01  
 23  +3.8935e-01  +3.8935e-01  2.69e-08  5.15e-12  1.31e-09  1.59e-12  1.99e-11  9.90e-01  
 24  +3.8935e-01  +3.8935e-01  2.69e-10  5.15e-14  1.31e-11  1.60e-14  2.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 267.406ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:46 PM: Optimal value: 3.894e-01
(CVXPY) Oct 06 04:29:46 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:46 PM: Solver (including time spent in interface) took 2.813e-01 seconds
Iteration: 22, Objective: 0.3894
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:47 PM: Your problem has 5241 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:47 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:47 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5241
  constraints   = 10241
  nnz(P)        = 0
  nnz(A)        = 91951
  cones (total) = 1
    : Nonnegative = 1,  numel = 10241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7690e-01  +1.0991e+03  1.10e+03  4.46e-01  8.26e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2831e-01  +1.1839e+02  1.18e+02  1.76e-01  4.14e+01  1.80e-02  2.85e-01  9.69e-01  
  3  +5.0812e-01  +3.0622e+01  3.01e+01  1.21e-01  2.89e+01  5.16e-05  2.55e-01  3.80e-01  
  4  +5.0109e-01  +3.2593e+00  2.76e+00  1.90e-02  4.67e+00  6.41e-06  1.52e-01  6.40e-01  
  5  +5.0026e-01  +1.4251e+00  9.25e-01  6.23e-03  1.56e+00  5.23e-05  6.78e-02  9.90e-01  
  6  +4.9988e-01  +9.5902e-01  4.59e-01  2.12e-03  5.41e-01  1.42e-04  8.03e-03  9.37e-01  
  7  +4.9638e-01  +9.4102e-01  4.45e-01  2.38e-04  6.17e-02  1.64e-03  6.36e-04  9.23e-01  
  8  +4.9414e-01  +9.2278e-01  4.29e-01  1.78e-04  4.61e-02  1.92e-03  4.74e-04  2.95e-01  
  9  +4.9064e-01  +8.8303e-01  3.92e-01  1.26e-04  3.26e-02  1.34e-03  3.37e-04  6.21e-01  
 10  +4.8979e-01  +8.7745e-01  3.88e-01  1.20e-04  3.11e-02  1.29e-03  3.22e-04  9.35e-02  
 11  +4.8795e-01  +8.5548e-01  3.68e-01  1.14e-04  2.93e-02  6.42e-04  3.05e-04  4.44e-01  
 12  +4.7607e-01  +7.8716e-01  3.11e-01  7.74e-05  1.99e-02  5.12e-04  2.14e-04  4.33e-01  
 13  +4.5558e-01  +6.7914e-01  2.24e-01  5.23e-05  1.34e-02  1.73e-04  1.54e-04  5.37e-01  
 14  +4.3652e-01  +5.8912e-01  1.53e-01  3.35e-05  8.52e-03  9.87e-05  1.05e-04  3.72e-01  
 15  +4.2095e-01  +5.2062e-01  9.97e-02  2.10e-05  5.32e-03  4.37e-05  6.91e-05  5.16e-01  
 16  +4.0798e-01  +4.6520e-01  5.72e-02  1.17e-05  2.96e-03  2.24e-05  4.04e-05  4.59e-01  
 17  +4.0082e-01  +4.3546e-01  3.46e-02  6.92e-06  1.75e-03  1.23e-05  2.47e-05  4.52e-01  
 18  +3.9846e-01  +4.2588e-01  2.74e-02  5.42e-06  1.37e-03  9.38e-06  1.96e-05  2.39e-01  
 19  +3.9561e-01  +4.1278e-01  1.72e-02  3.33e-06  8.45e-04  1.33e-06  1.22e-05  9.90e-01  
 20  +3.9033e-01  +3.9311e-01  2.78e-03  5.38e-07  1.36e-04  1.93e-07  2.04e-06  8.94e-01  
 21  +3.8934e-01  +3.8946e-01  1.16e-04  2.24e-08  5.67e-06  7.43e-09  8.59e-08  9.73e-01  
 22  +3.8930e-01  +3.8930e-01  1.17e-06  2.25e-10  5.70e-08  7.47e-11  8.63e-10  9.90e-01  
 23  +3.8930e-01  +3.8930e-01  1.18e-08  2.28e-12  5.77e-10  7.57e-13  8.75e-12  9.90e-01  
 24  +3.8930e-01  +3.8930e-01  1.21e-10  2.33e-14  5.91e-12  7.75e-15  8.96e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 270.8456ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:47 PM: Optimal value: 3.893e-01
(CVXPY) Oct 06 04:29:47 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:29:47 PM: Solver (including time spent in interface) took 2.817e-01 seconds
Iteration: 23, Objective: 0.3893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:47 PM: Your problem has 5251 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:47 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5251
  constraints   = 10251
  nnz(P)        = 0
  nnz(A)        = 92252
  cones (total) = 1
    : Nonnegative = 1,  numel = 10251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7681e-01  +1.0992e+03  1.10e+03  4.46e-01  8.25e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2829e-01  +1.1837e+02  1.18e+02  1.76e-01  4.13e+01  1.81e-02  2.85e-01  9.69e-01  
  3  +5.0812e-01  +3.0622e+01  3.01e+01  1.21e-01  2.88e+01  5.17e-05  2.54e-01  3.81e-01  
  4  +5.0109e-01  +3.2619e+00  2.76e+00  1.90e-02  4.67e+00  6.42e-06  1.52e-01  6.40e-01  
  5  +5.0026e-01  +1.4320e+00  9.32e-01  6.28e-03  1.57e+00  5.25e-05  6.77e-02  9.89e-01  
  6  +4.9988e-01  +9.5768e-01  4.58e-01  2.10e-03  5.36e-01  1.43e-04  7.92e-03  9.36e-01  
  7  +4.9638e-01  +9.3958e-01  4.43e-01  2.38e-04  6.16e-02  1.63e-03  6.35e-04  9.22e-01  
  8  +4.9409e-01  +9.2176e-01  4.28e-01  1.77e-04  4.58e-02  1.94e-03  4.71e-04  2.92e-01  
  9  +4.9035e-01  +8.9030e-01  4.00e-01  1.27e-04  3.28e-02  1.83e-03  3.39e-04  4.63e-01  
 10  +4.8842e-01  +8.7875e-01  3.90e-01  1.14e-04  2.93e-02  1.75e-03  3.04e-04  1.72e-01  
 11  +4.8030e-01  +8.2529e-01  3.45e-01  8.63e-05  2.22e-02  1.33e-03  2.35e-04  4.02e-01  
 12  +4.5843e-01  +6.9696e-01  2.39e-01  5.57e-05  1.43e-02  3.65e-04  1.62e-04  5.90e-01  
 13  +4.3967e-01  +6.0637e-01  1.67e-01  3.67e-05  9.34e-03  2.14e-04  1.13e-04  3.50e-01  
 14  +4.2627e-01  +5.4637e-01  1.20e-01  2.55e-05  6.48e-03  1.25e-04  8.24e-05  3.70e-01  
 15  +4.1288e-01  +4.8802e-01  7.51e-02  1.54e-05  3.90e-03  6.45e-05  5.22e-05  4.57e-01  
 16  +4.0231e-01  +4.4308e-01  4.08e-02  8.08e-06  2.05e-03  2.24e-05  2.85e-05  6.62e-01  
 17  +3.9729e-01  +4.2272e-01  2.54e-02  4.97e-06  1.26e-03  1.31e-05  1.80e-05  4.12e-01  
 18  +3.9544e-01  +4.1361e-01  1.82e-02  3.51e-06  8.88e-04  1.58e-06  1.27e-05  9.90e-01  
 19  +3.9206e-01  +4.0112e-01  9.05e-03  1.74e-06  4.41e-04  7.62e-07  6.47e-06  5.43e-01  
 20  +3.8928e-01  +3.9082e-01  1.54e-03  2.96e-07  7.49e-05  1.24e-07  1.12e-06  8.49e-01  
 21  +3.8872e-01  +3.8878e-01  5.62e-05  1.08e-08  2.73e-06  4.23e-09  4.11e-08  9.70e-01  
 22  +3.8870e-01  +3.8870e-01  5.65e-07  1.08e-10  2.75e-08  4.25e-11  4.13e-10  9.90e-01  
 23  +3.8870e-01  +3.8870e-01  5.66e-09  1.09e-12  2.75e-10  4.27e-13  4.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 277.5042ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:48 PM: Optimal value: 3.887e-01
(CVXPY) Oct 06 04:29:48 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:29:48 PM: Solver (including time spent in interface) took 2.980e-01 seconds
Iteration: 24, Objective: 0.3887
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:48 PM: Your problem has 5261 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:48 PM: Finished problem compilation (took 7.813e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5261
  constraints   = 10261
  nnz(P)        = 0
  nnz(A)        = 92499
  cones (total) = 1
    : Nonnegative = 1,  numel = 10261

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7677e-01  +1.0992e+03  1.10e+03  4.46e-01  8.24e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2826e-01  +1.1831e+02  1.18e+02  1.76e-01  4.12e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0812e-01  +3.0608e+01  3.01e+01  1.21e-01  2.88e+01  5.17e-05  2.54e-01  3.82e-01  
  4  +5.0109e-01  +3.2607e+00  2.76e+00  1.90e-02  4.67e+00  6.42e-06  1.52e-01  6.41e-01  
  5  +5.0027e-01  +1.4433e+00  9.43e-01  6.35e-03  1.59e+00  5.30e-05  6.71e-02  9.90e-01  
  6  +4.9987e-01  +9.5695e-01  4.57e-01  2.05e-03  5.24e-01  1.47e-04  7.61e-03  9.35e-01  
  7  +4.9631e-01  +9.3866e-01  4.42e-01  2.33e-04  6.04e-02  1.66e-03  6.22e-04  9.20e-01  
  8  +4.9393e-01  +9.1982e-01  4.26e-01  1.73e-04  4.47e-02  1.94e-03  4.59e-04  3.11e-01  
  9  +4.9031e-01  +8.9462e-01  4.04e-01  1.29e-04  3.32e-02  2.03e-03  3.43e-04  3.54e-01  
 10  +4.8731e-01  +8.7638e-01  3.89e-01  1.09e-04  2.81e-02  1.90e-03  2.92e-04  2.52e-01  
 11  +4.7757e-01  +8.1043e-01  3.33e-01  8.25e-05  2.12e-02  1.16e-03  2.26e-04  4.65e-01  
 12  +4.5317e-01  +6.7509e-01  2.22e-01  4.99e-05  1.27e-02  4.24e-04  1.47e-04  5.41e-01  
 13  +4.3120e-01  +5.7067e-01  1.39e-01  2.98e-05  7.57e-03  2.12e-04  9.42e-05  4.11e-01  
 14  +4.2185e-01  +5.3019e-01  1.08e-01  2.25e-05  5.72e-03  1.03e-04  7.36e-05  4.94e-01  
 15  +4.0952e-01  +4.7736e-01  6.78e-02  1.37e-05  3.48e-03  5.76e-05  4.70e-05  4.09e-01  
 16  +4.0339e-01  +4.5071e-01  4.73e-02  9.36e-06  2.37e-03  2.43e-05  3.28e-05  6.13e-01  
 17  +3.9365e-01  +4.1133e-01  1.77e-02  3.44e-06  8.70e-04  8.17e-06  1.26e-05  6.49e-01  
 18  +3.8969e-01  +3.9570e-01  6.01e-03  1.16e-06  2.93e-04  2.54e-06  4.37e-06  6.86e-01  
 19  +3.8805e-01  +3.8918e-01  1.14e-03  2.18e-07  5.51e-05  1.06e-07  8.33e-07  9.84e-01  
 20  +3.8761e-01  +3.8763e-01  2.07e-05  3.96e-09  1.00e-06  1.74e-09  1.52e-08  9.86e-01  
 21  +3.8760e-01  +3.8760e-01  2.08e-07  3.98e-11  1.01e-08  1.75e-11  1.53e-10  9.90e-01  
 22  +3.8760e-01  +3.8760e-01  2.09e-09  3.99e-13  1.01e-10  1.77e-13  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 256.6119ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:48 PM: Optimal value: 3.876e-01
(CVXPY) Oct 06 04:29:48 PM: Compilation took 7.813e-02 seconds
(CVXPY) Oct 06 04:29:48 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 25, Objective: 0.3876
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:48 PM: Your problem has 5271 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:49 PM: Finished problem compilation (took 7.804e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5271
  constraints   = 10271
  nnz(P)        = 0
  nnz(A)        = 93039
  cones (total) = 1
    : Nonnegative = 1,  numel = 10271

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7672e-01  +1.0991e+03  1.10e+03  4.47e-01  8.24e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2821e-01  +1.1822e+02  1.18e+02  1.76e-01  4.11e+01  1.81e-02  2.84e-01  9.70e-01  
  3  +5.0810e-01  +3.0568e+01  3.01e+01  1.21e-01  2.87e+01  5.18e-05  2.54e-01  3.85e-01  
  4  +5.0109e-01  +3.2478e+00  2.75e+00  1.89e-02  4.65e+00  6.44e-06  1.51e-01  6.45e-01  
  5  +5.0030e-01  +1.5366e+00  1.04e+00  6.97e-03  1.74e+00  5.31e-05  6.78e-02  9.58e-01  
  6  +4.9992e-01  +1.0384e+00  5.38e-01  2.50e-03  6.37e-01  1.37e-04  9.37e-03  8.92e-01  
  7  +4.9653e-01  +1.0224e+00  5.26e-01  2.79e-04  7.23e-02  1.59e-03  7.38e-04  9.22e-01  
  8  +4.8923e-01  +9.5558e-01  4.66e-01  1.25e-04  3.22e-02  2.69e-03  3.29e-04  6.08e-01  
  9  +4.8598e-01  +9.2887e-01  4.43e-01  1.12e-04  2.90e-02  2.36e-03  2.98e-04  1.77e-01  
 10  +4.8247e-01  +9.0307e-01  4.21e-01  1.04e-04  2.67e-02  2.12e-03  2.78e-04  1.11e-01  
 11  +4.7732e-01  +8.6369e-01  3.86e-01  9.49e-05  2.44e-02  1.65e-03  2.59e-04  1.64e-01  
 12  +4.6131e-01  +7.5264e-01  2.91e-01  7.07e-05  1.81e-02  6.22e-04  2.03e-04  4.60e-01  
 13  +4.3053e-01  +5.8374e-01  1.53e-01  3.35e-05  8.52e-03  2.28e-04  1.06e-04  5.37e-01  
 14  +4.2403e-01  +5.5361e-01  1.30e-01  2.79e-05  7.07e-03  1.67e-04  8.98e-05  2.55e-01  
 15  +4.1139e-01  +4.9532e-01  8.39e-02  1.75e-05  4.42e-03  6.87e-05  5.90e-05  5.75e-01  
 16  +4.0067e-01  +4.4729e-01  4.66e-02  9.43e-06  2.39e-03  2.37e-05  3.33e-05  6.68e-01  
 17  +3.9263e-01  +4.1324e-01  2.06e-02  4.11e-06  1.04e-03  9.18e-06  1.51e-05  6.07e-01  
 18  +3.8862e-01  +3.9660e-01  7.99e-03  1.58e-06  3.99e-04  2.98e-06  5.95e-06  6.81e-01  
 19  +3.8686e-01  +3.8953e-01  2.67e-03  5.22e-07  1.32e-04  6.23e-07  2.00e-06  8.15e-01  
 20  +3.8597e-01  +3.8616e-01  1.87e-04  3.63e-08  9.18e-06  1.51e-08  1.41e-07  9.90e-01  
 21  +3.8590e-01  +3.8590e-01  1.91e-06  3.70e-10  9.35e-08  1.54e-10  1.44e-09  9.90e-01  
 22  +3.8590e-01  +3.8590e-01  1.91e-08  3.71e-12  9.38e-10  1.54e-12  1.44e-11  9.90e-01  
 23  +3.8590e-01  +3.8590e-01  1.92e-10  3.72e-14  9.43e-12  1.57e-14  1.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 267.952ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:49 PM: Optimal value: 3.859e-01
(CVXPY) Oct 06 04:29:49 PM: Compilation took 7.804e-02 seconds
(CVXPY) Oct 06 04:29:49 PM: Solver (including time spent in interface) took 2.812e-01 seconds
Iteration: 26, Objective: 0.3859
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:49 PM: Your problem has 5281 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:49 PM: Finished problem compilation (took 7.871e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5281
  constraints   = 10281
  nnz(P)        = 0
  nnz(A)        = 93319
  cones (total) = 1
    : Nonnegative = 1,  numel = 10281

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7668e-01  +1.0991e+03  1.10e+03  4.47e-01  8.23e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2816e-01  +1.1812e+02  1.18e+02  1.76e-01  4.10e+01  1.81e-02  2.84e-01  9.71e-01  
  3  +5.0810e-01  +3.0541e+01  3.00e+01  1.21e-01  2.87e+01  5.18e-05  2.53e-01  3.86e-01  
  4  +5.0109e-01  +3.2454e+00  2.74e+00  1.89e-02  4.64e+00  6.45e-06  1.50e-01  6.46e-01  
  5  +5.0031e-01  +1.5480e+00  1.05e+00  7.04e-03  1.76e+00  5.39e-05  6.66e-02  9.63e-01  
  6  +4.9990e-01  +1.0347e+00  5.35e-01  2.36e-03  6.02e-01  1.47e-04  8.50e-03  9.02e-01  
  7  +4.9640e-01  +1.0176e+00  5.21e-01  2.67e-04  6.93e-02  1.63e-03  7.06e-04  9.18e-01  
  8  +4.9174e-01  +9.7651e-01  4.85e-01  1.56e-04  4.05e-02  2.29e-03  4.12e-04  4.60e-01  
  9  +4.8607e-01  +9.2770e-01  4.42e-01  1.19e-04  3.08e-02  2.08e-03  3.18e-04  3.37e-01  
 10  +4.8110e-01  +8.8702e-01  4.06e-01  1.06e-04  2.73e-02  1.62e-03  2.86e-04  2.18e-01  
 11  +4.7381e-01  +8.2831e-01  3.55e-01  9.37e-05  2.41e-02  8.52e-04  2.59e-04  3.38e-01  
 12  +4.4785e-01  +6.7434e-01  2.26e-01  5.15e-05  1.32e-02  4.06e-04  1.53e-04  5.10e-01  
 13  +4.3344e-01  +6.0225e-01  1.69e-01  3.73e-05  9.50e-03  2.60e-04  1.17e-04  2.95e-01  
 14  +4.1756e-01  +5.2659e-01  1.09e-01  2.33e-05  5.91e-03  1.05e-04  7.71e-05  5.41e-01  
 15  +4.0899e-01  +4.8769e-01  7.87e-02  1.65e-05  4.18e-03  6.89e-05  5.64e-05  3.31e-01  
 16  +3.9713e-01  +4.3471e-01  3.76e-02  7.63e-06  1.93e-03  2.21e-05  2.74e-05  6.79e-01  
 17  +3.8931e-01  +4.0172e-01  1.24e-02  2.47e-06  6.25e-04  5.55e-06  9.27e-06  7.51e-01  
 18  +3.8674e-01  +3.9125e-01  4.51e-03  8.94e-07  2.26e-04  1.66e-06  3.42e-06  7.06e-01  
 19  +3.8548e-01  +3.8625e-01  7.73e-04  1.53e-07  3.86e-05  1.91e-07  5.90e-07  8.95e-01  
 20  +3.8521e-01  +3.8522e-01  1.60e-05  3.15e-09  7.96e-07  2.34e-09  1.22e-08  9.90e-01  
 21  +3.8520e-01  +3.8520e-01  1.63e-07  3.21e-11  8.10e-09  2.38e-11  1.24e-10  9.90e-01  
 22  +3.8520e-01  +3.8520e-01  1.76e-09  3.46e-13  8.75e-11  2.59e-13  1.35e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 263.1365ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:49 PM: Optimal value: 3.852e-01
(CVXPY) Oct 06 04:29:49 PM: Compilation took 7.871e-02 seconds
(CVXPY) Oct 06 04:29:49 PM: Solver (including time spent in interface) took 2.668e-01 seconds
Iteration: 27, Objective: 0.3852
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:50 PM: Your problem has 5291 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:50 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5291
  constraints   = 10291
  nnz(P)        = 0
  nnz(A)        = 93490
  cones (total) = 1
    : Nonnegative = 1,  numel = 10291

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7658e-01  +1.0992e+03  1.10e+03  4.47e-01  8.22e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2813e-01  +1.1808e+02  1.18e+02  1.75e-01  4.09e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0809e-01  +3.0532e+01  3.00e+01  1.21e-01  2.86e+01  5.19e-05  2.53e-01  3.87e-01  
  4  +5.0109e-01  +3.2444e+00  2.74e+00  1.89e-02  4.64e+00  6.46e-06  1.50e-01  6.46e-01  
  5  +5.0032e-01  +1.5899e+00  1.09e+00  7.32e-03  1.82e+00  5.42e-05  6.71e-02  9.50e-01  
  6  +4.9993e-01  +1.0749e+00  5.75e-01  2.60e-03  6.62e-01  1.40e-04  9.48e-03  8.86e-01  
  7  +4.9664e-01  +1.0574e+00  5.61e-01  3.00e-04  7.78e-02  1.53e-03  7.91e-04  9.18e-01  
  8  +4.9023e-01  +9.8951e-01  4.99e-01  1.44e-04  3.73e-02  2.42e-03  3.79e-04  5.75e-01  
  9  +4.8657e-01  +9.5395e-01  4.67e-01  1.26e-04  3.25e-02  2.08e-03  3.34e-04  2.12e-01  
 10  +4.8171e-01  +9.1238e-01  4.31e-01  1.11e-04  2.86e-02  1.69e-03  2.98e-04  2.06e-01  
 11  +4.7771e-01  +8.7679e-01  3.99e-01  1.04e-04  2.67e-02  1.23e-03  2.83e-04  1.87e-01  
 12  +4.5955e-01  +7.4701e-01  2.87e-01  7.10e-05  1.82e-02  3.16e-04  2.05e-04  5.97e-01  
 13  +4.3107e-01  +5.9185e-01  1.61e-01  3.59e-05  9.13e-03  1.08e-04  1.13e-04  5.65e-01  
 14  +4.1860e-01  +5.3339e-01  1.15e-01  2.48e-05  6.29e-03  4.87e-05  8.18e-05  5.27e-01  
 15  +4.0839e-01  +4.8697e-01  7.86e-02  1.66e-05  4.19e-03  2.98e-05  5.68e-05  3.73e-01  
 16  +3.9698e-01  +4.3597e-01  3.90e-02  7.97e-06  2.01e-03  1.04e-05  2.87e-05  6.66e-01  
 17  +3.9068e-01  +4.0896e-01  1.83e-02  3.68e-06  9.29e-04  3.74e-06  1.37e-05  6.68e-01  
 18  +3.8794e-01  +3.9766e-01  9.72e-03  1.95e-06  4.92e-04  1.81e-06  7.37e-06  5.29e-01  
 19  +3.8576e-01  +3.8859e-01  2.83e-03  5.65e-07  1.43e-04  2.80e-07  2.17e-06  9.05e-01  
 20  +3.8481e-01  +3.8498e-01  1.68e-04  3.35e-08  8.47e-06  1.28e-08  1.30e-07  9.70e-01  
 21  +3.8475e-01  +3.8475e-01  1.73e-06  3.45e-10  8.72e-08  1.32e-10  1.34e-09  9.90e-01  
 22  +3.8475e-01  +3.8475e-01  1.74e-08  3.46e-12  8.75e-10  1.32e-12  1.34e-11  9.90e-01  
 23  +3.8475e-01  +3.8475e-01  1.74e-10  3.47e-14  8.78e-12  1.33e-14  1.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 269.2224ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:50 PM: Optimal value: 3.848e-01
(CVXPY) Oct 06 04:29:50 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:29:50 PM: Solver (including time spent in interface) took 2.969e-01 seconds
Iteration: 28, Objective: 0.3848
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:50 PM: Your problem has 5301 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:50 PM: Finished problem compilation (took 9.488e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5301
  constraints   = 10301
  nnz(P)        = 0
  nnz(A)        = 93766
  cones (total) = 1
    : Nonnegative = 1,  numel = 10301

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7656e-01  +1.0992e+03  1.10e+03  4.47e-01  8.22e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2812e-01  +1.1805e+02  1.18e+02  1.75e-01  4.09e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0809e-01  +3.0519e+01  3.00e+01  1.21e-01  2.86e+01  5.19e-05  2.53e-01  3.88e-01  
  4  +5.0108e-01  +3.2438e+00  2.74e+00  1.89e-02  4.64e+00  6.46e-06  1.50e-01  6.47e-01  
  5  +5.0032e-01  +1.5896e+00  1.09e+00  7.31e-03  1.82e+00  5.47e-05  6.64e-02  9.56e-01  
  6  +4.9992e-01  +1.0793e+00  5.79e-01  2.56e-03  6.53e-01  1.45e-04  9.21e-03  8.88e-01  
  7  +4.9657e-01  +1.0609e+00  5.64e-01  2.97e-04  7.70e-02  1.56e-03  7.84e-04  9.16e-01  
  8  +4.9003e-01  +9.9014e-01  5.00e-01  1.43e-04  3.71e-02  2.42e-03  3.78e-04  5.76e-01  
  9  +4.8683e-01  +9.5879e-01  4.72e-01  1.28e-04  3.30e-02  2.10e-03  3.39e-04  1.89e-01  
 10  +4.8240e-01  +9.2040e-01  4.38e-01  1.13e-04  2.92e-02  1.72e-03  3.04e-04  2.05e-01  
 11  +4.7745e-01  +8.7763e-01  4.00e-01  1.04e-04  2.67e-02  1.23e-03  2.82e-04  2.09e-01  
 12  +4.5643e-01  +7.2499e-01  2.69e-01  6.67e-05  1.70e-02  8.25e-05  1.95e-04  7.33e-01  
 13  +4.3348e-01  +6.0505e-01  1.72e-01  3.90e-05  9.92e-03  4.32e-05  1.22e-04  4.28e-01  
 14  +4.2140e-01  +5.4814e-01  1.27e-01  2.78e-05  7.06e-03  2.50e-05  9.10e-05  4.14e-01  
 15  +4.0789e-01  +4.8629e-01  7.84e-02  1.66e-05  4.20e-03  1.36e-05  5.73e-05  4.43e-01  
 16  +3.9835e-01  +4.4333e-01  4.50e-02  9.24e-06  2.33e-03  5.87e-06  3.31e-05  6.37e-01  
 17  +3.9057e-01  +4.1026e-01  1.97e-02  3.97e-06  1.00e-03  2.32e-06  1.48e-05  6.24e-01  
 18  +3.8755e-01  +3.9751e-01  9.96e-03  1.99e-06  5.02e-04  1.02e-06  7.55e-06  6.23e-01  
 19  +3.8588e-01  +3.9072e-01  4.84e-03  9.61e-07  2.43e-04  4.57e-07  3.69e-06  5.94e-01  
 20  +3.8503e-01  +3.8732e-01  2.29e-03  4.51e-07  1.14e-04  1.87e-07  1.74e-06  6.82e-01  
 21  +3.8437e-01  +3.8481e-01  4.37e-04  8.52e-08  2.15e-05  2.39e-08  3.33e-07  9.90e-01  
 22  +3.8420e-01  +3.8421e-01  7.86e-06  1.53e-09  3.86e-07  4.30e-10  5.99e-09  9.82e-01  
 23  +3.8420e-01  +3.8420e-01  7.88e-08  1.53e-11  3.87e-09  4.31e-12  6.01e-11  9.90e-01  
 24  +3.8420e-01  +3.8420e-01  7.88e-10  1.54e-13  3.87e-11  4.40e-14  6.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 280.5407ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:51 PM: Optimal value: 3.842e-01
(CVXPY) Oct 06 04:29:51 PM: Compilation took 9.488e-02 seconds
(CVXPY) Oct 06 04:29:51 PM: Solver (including time spent in interface) took 3.025e-01 seconds
Iteration: 29, Objective: 0.3842
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:51 PM: Your problem has 5311 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:51 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5311
  constraints   = 10311
  nnz(P)        = 0
  nnz(A)        = 94085
  cones (total) = 1
    : Nonnegative = 1,  numel = 10311

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7653e-01  +1.0991e+03  1.10e+03  4.47e-01  8.21e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2811e-01  +1.1802e+02  1.17e+02  1.75e-01  4.08e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0809e-01  +3.0512e+01  3.00e+01  1.21e-01  2.85e+01  5.20e-05  2.52e-01  3.88e-01  
  4  +5.0108e-01  +3.2417e+00  2.74e+00  1.89e-02  4.63e+00  6.46e-06  1.49e-01  6.47e-01  
  5  +5.0032e-01  +1.5958e+00  1.10e+00  7.35e-03  1.83e+00  5.51e-05  6.58e-02  9.58e-01  
  6  +4.9990e-01  +1.0678e+00  5.68e-01  2.42e-03  6.18e-01  1.53e-04  8.50e-03  8.96e-01  
  7  +4.9648e-01  +1.0490e+00  5.53e-01  2.85e-04  7.37e-02  1.59e-03  7.50e-04  9.12e-01  
  8  +4.9085e-01  +9.8862e-01  4.98e-01  1.54e-04  3.98e-02  2.24e-03  4.06e-04  5.18e-01  
  9  +4.8527e-01  +9.3942e-01  4.54e-01  1.20e-04  3.10e-02  1.93e-03  3.20e-04  3.36e-01  
 10  +4.8086e-01  +9.0258e-01  4.22e-01  1.09e-04  2.82e-02  1.57e-03  2.95e-04  1.64e-01  
 11  +4.7628e-01  +8.6637e-01  3.90e-01  1.01e-04  2.60e-02  1.21e-03  2.76e-04  1.73e-01  
 12  +4.5261e-01  +7.0117e-01  2.49e-01  6.12e-05  1.56e-02  1.18e-05  1.81e-04  7.80e-01  
 13  +4.3645e-01  +6.2022e-01  1.84e-01  4.26e-05  1.08e-02  8.23e-06  1.32e-04  3.17e-01  
 14  +4.2118e-01  +5.4798e-01  1.27e-01  2.81e-05  7.11e-03  5.56e-06  9.20e-05  4.45e-01  
 15  +4.0583e-01  +4.7818e-01  7.23e-02  1.54e-05  3.88e-03  3.12e-06  5.34e-05  4.97e-01  
 16  +3.9982e-01  +4.5113e-01  5.13e-02  1.06e-05  2.69e-03  2.40e-06  3.79e-05  4.98e-01  
 17  +3.9222e-01  +4.1880e-01  2.66e-02  5.41e-06  1.37e-03  1.25e-06  2.00e-05  5.15e-01  
 18  +3.8690e-01  +3.9657e-01  9.66e-03  1.94e-06  4.89e-04  4.68e-07  7.42e-06  7.04e-01  
 19  +3.8431e-01  +3.8609e-01  1.78e-03  3.53e-07  8.91e-05  8.86e-08  1.38e-06  8.77e-01  
 20  +3.8371e-01  +3.8374e-01  2.79e-05  5.54e-09  1.40e-06  1.39e-09  2.18e-08  9.85e-01  
 21  +3.8370e-01  +3.8370e-01  2.80e-07  5.55e-11  1.40e-08  1.39e-11  2.18e-10  9.90e-01  
 22  +3.8370e-01  +3.8370e-01  2.80e-09  5.55e-13  1.40e-10  1.39e-13  2.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 256.1289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:51 PM: Optimal value: 3.837e-01
(CVXPY) Oct 06 04:29:51 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:29:51 PM: Solver (including time spent in interface) took 2.813e-01 seconds
Iteration: 30, Objective: 0.3837
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:52 PM: Your problem has 5321 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:52 PM: Finished problem compilation (took 9.376e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5321
  constraints   = 10321
  nnz(P)        = 0
  nnz(A)        = 94411
  cones (total) = 1
    : Nonnegative = 1,  numel = 10321

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7643e-01  +1.0993e+03  1.10e+03  4.47e-01  8.20e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2803e-01  +1.1792e+02  1.17e+02  1.75e-01  4.07e+01  1.81e-02  2.84e-01  9.73e-01  
  3  +5.0808e-01  +3.0493e+01  3.00e+01  1.21e-01  2.85e+01  5.21e-05  2.52e-01  3.91e-01  
  4  +5.0108e-01  +3.2438e+00  2.74e+00  1.90e-02  4.64e+00  6.47e-06  1.49e-01  6.48e-01  
  5  +5.0032e-01  +1.6113e+00  1.11e+00  7.44e-03  1.85e+00  5.73e-05  6.38e-02  9.72e-01  
  6  +4.9988e-01  +1.0993e+00  5.99e-01  2.39e-03  6.11e-01  1.69e-04  8.08e-03  8.96e-01  
  7  +4.9637e-01  +1.0758e+00  5.79e-01  2.92e-04  7.56e-02  1.62e-03  7.69e-04  9.07e-01  
  8  +4.9038e-01  +1.0017e+00  5.11e-01  1.57e-04  4.05e-02  2.15e-03  4.13e-04  5.38e-01  
  9  +4.8643e-01  +9.6180e-01  4.75e-01  1.31e-04  3.38e-02  1.76e-03  3.48e-04  3.06e-01  
 10  +4.8103e-01  +9.1113e-01  4.30e-01  1.14e-04  2.95e-02  1.20e-03  3.09e-04  2.90e-01  
 11  +4.7629e-01  +8.7075e-01  3.94e-01  1.06e-04  2.72e-02  8.37e-04  2.90e-04  2.16e-01  
 12  +4.5171e-01  +7.0958e-01  2.58e-01  6.09e-05  1.55e-02  2.54e-04  1.79e-04  6.21e-01  
 13  +4.3548e-01  +6.2517e-01  1.90e-01  4.31e-05  1.09e-02  1.59e-04  1.34e-04  3.03e-01  
 14  +4.2153e-01  +5.5717e-01  1.36e-01  2.99e-05  7.56e-03  8.80e-05  9.75e-05  3.99e-01  
 15  +4.0585e-01  +4.8400e-01  7.81e-02  1.66e-05  4.19e-03  4.20e-05  5.77e-05  4.84e-01  
 16  +3.9824e-01  +4.4913e-01  5.09e-02  1.06e-05  2.67e-03  2.04e-05  3.79e-05  5.31e-01  
 17  +3.9137e-01  +4.1937e-01  2.80e-02  5.73e-06  1.44e-03  1.04e-05  2.13e-05  4.84e-01  
 18  +3.8665e-01  +3.9930e-01  1.26e-02  2.56e-06  6.45e-04  4.40e-06  9.79e-06  5.73e-01  
 19  +3.8439e-01  +3.8963e-01  5.23e-03  1.05e-06  2.64e-04  1.09e-06  4.07e-06  7.88e-01  
 20  +3.8275e-01  +3.8317e-01  4.15e-04  8.26e-08  2.08e-05  4.71e-08  3.26e-07  9.69e-01  
 21  +3.8260e-01  +3.8261e-01  4.34e-06  8.63e-10  2.18e-07  4.88e-10  3.41e-09  9.90e-01  
 22  +3.8260e-01  +3.8260e-01  4.34e-08  8.65e-12  2.18e-09  4.89e-12  3.42e-11  9.90e-01  
 23  +3.8260e-01  +3.8260e-01  4.34e-10  8.65e-14  2.18e-11  4.91e-14  3.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 269.5495ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:52 PM: Optimal value: 3.826e-01
(CVXPY) Oct 06 04:29:52 PM: Compilation took 9.376e-02 seconds
(CVXPY) Oct 06 04:29:52 PM: Solver (including time spent in interface) took 2.812e-01 seconds
Iteration: 31, Objective: 0.3826
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:52 PM: Your problem has 5331 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:52 PM: Finished problem compilation (took 9.382e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5331
  constraints   = 10331
  nnz(P)        = 0
  nnz(A)        = 94712
  cones (total) = 1
    : Nonnegative = 1,  numel = 10331

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7644e-01  +1.0991e+03  1.10e+03  4.47e-01  8.19e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2802e-01  +1.1785e+02  1.17e+02  1.75e-01  4.06e+01  1.81e-02  2.83e-01  9.73e-01  
  3  +5.0807e-01  +3.0466e+01  3.00e+01  1.20e-01  2.84e+01  5.21e-05  2.52e-01  3.91e-01  
  4  +5.0108e-01  +3.2362e+00  2.74e+00  1.89e-02  4.62e+00  6.47e-06  1.48e-01  6.49e-01  
  5  +5.0034e-01  +1.6484e+00  1.15e+00  7.68e-03  1.91e+00  5.73e-05  6.41e-02  9.61e-01  
  6  +4.9990e-01  +1.1242e+00  6.24e-01  2.49e-03  6.37e-01  1.65e-04  8.43e-03  8.91e-01  
  7  +4.9656e-01  +1.0996e+00  6.03e-01  3.12e-04  8.06e-02  1.54e-03  8.20e-04  9.05e-01  
  8  +4.8989e-01  +1.0093e+00  5.19e-01  1.55e-04  4.01e-02  2.13e-03  4.09e-04  5.77e-01  
  9  +4.8694e-01  +9.6906e-01  4.82e-01  1.34e-04  3.46e-02  1.40e-03  3.56e-04  3.80e-01  
 10  +4.8155e-01  +9.1724e-01  4.36e-01  1.18e-04  3.04e-02  9.46e-04  3.18e-04  2.85e-01  
 11  +4.7625e-01  +8.7488e-01  3.99e-01  1.07e-04  2.75e-02  6.83e-04  2.93e-04  2.20e-01  
 12  +4.5011e-01  +7.0217e-01  2.52e-01  5.96e-05  1.52e-02  1.43e-04  1.76e-04  6.90e-01  
 13  +4.2612e-01  +5.7890e-01  1.53e-01  3.42e-05  8.65e-03  6.46e-05  1.09e-04  4.52e-01  
 14  +4.1655e-01  +5.3463e-01  1.18e-01  2.57e-05  6.48e-03  3.43e-05  8.52e-05  4.79e-01  
 15  +4.0349e-01  +4.7515e-01  7.17e-02  1.51e-05  3.82e-03  1.79e-05  5.31e-05  4.57e-01  
 16  +3.9356e-01  +4.2925e-01  3.57e-02  7.27e-06  1.83e-03  3.01e-06  2.66e-05  9.58e-01  
 17  +3.8800e-01  +4.0591e-01  1.79e-02  3.61e-06  9.10e-04  1.25e-06  1.36e-05  7.79e-01  
 18  +3.8677e-01  +4.0070e-01  1.39e-02  2.80e-06  7.04e-04  8.88e-07  1.06e-05  5.63e-01  
 19  +3.8346e-01  +3.8780e-01  4.34e-03  8.65e-07  2.18e-04  2.72e-07  3.38e-06  7.27e-01  
 20  +3.8205e-01  +3.8247e-01  4.17e-04  8.25e-08  2.08e-05  2.34e-08  3.27e-07  9.64e-01  
 21  +3.8190e-01  +3.8191e-01  5.11e-06  1.01e-09  2.54e-07  2.86e-10  4.01e-09  9.88e-01  
 22  +3.8190e-01  +3.8190e-01  5.11e-08  1.01e-11  2.55e-09  2.86e-12  4.02e-11  9.90e-01  
 23  +3.8190e-01  +3.8190e-01  5.23e-10  1.03e-13  2.60e-11  2.95e-14  4.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 257.087ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:53 PM: Optimal value: 3.819e-01
(CVXPY) Oct 06 04:29:53 PM: Compilation took 9.382e-02 seconds
(CVXPY) Oct 06 04:29:53 PM: Solver (including time spent in interface) took 2.822e-01 seconds
Iteration: 32, Objective: 0.3819
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:53 PM: Your problem has 5341 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:53 PM: Finished problem compilation (took 9.365e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5341
  constraints   = 10341
  nnz(P)        = 0
  nnz(A)        = 95007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10341

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7642e-01  +1.0990e+03  1.10e+03  4.47e-01  8.19e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2802e-01  +1.1785e+02  1.17e+02  1.75e-01  4.05e+01  1.81e-02  2.83e-01  9.73e-01  
  3  +5.0807e-01  +3.0465e+01  3.00e+01  1.20e-01  2.84e+01  5.21e-05  2.52e-01  3.91e-01  
  4  +5.0108e-01  +3.2358e+00  2.73e+00  1.89e-02  4.62e+00  6.48e-06  1.48e-01  6.50e-01  
  5  +5.0034e-01  +1.6455e+00  1.15e+00  7.66e-03  1.91e+00  5.77e-05  6.36e-02  9.65e-01  
  6  +4.9988e-01  +1.1261e+00  6.26e-01  2.45e-03  6.25e-01  1.71e-04  8.19e-03  8.94e-01  
  7  +4.9648e-01  +1.1008e+00  6.04e-01  3.07e-04  7.95e-02  1.57e-03  8.09e-04  9.03e-01  
  8  +4.8973e-01  +1.0088e+00  5.19e-01  1.54e-04  3.99e-02  2.12e-03  4.08e-04  5.74e-01  
  9  +4.8686e-01  +9.6938e-01  4.83e-01  1.34e-04  3.46e-02  1.39e-03  3.56e-04  3.78e-01  
 10  +4.8122e-01  +9.1421e-01  4.33e-01  1.18e-04  3.03e-02  8.71e-04  3.18e-04  3.20e-01  
 11  +4.7615e-01  +8.7355e-01  3.97e-01  1.07e-04  2.76e-02  6.26e-04  2.94e-04  2.19e-01  
 12  +4.4992e-01  +7.0373e-01  2.54e-01  5.94e-05  1.51e-02  1.78e-04  1.75e-04  6.50e-01  
 13  +4.2879e-01  +5.9498e-01  1.66e-01  3.72e-05  9.43e-03  9.20e-05  1.18e-04  3.92e-01  
 14  +4.1613e-01  +5.3536e-01  1.19e-01  2.59e-05  6.54e-03  4.26e-05  8.62e-05  5.20e-01  
 15  +3.9715e-01  +4.4803e-01  5.09e-02  1.06e-05  2.68e-03  9.89e-06  3.83e-05  7.59e-01  
 16  +3.9159e-01  +4.2371e-01  3.21e-02  6.60e-06  1.66e-03  5.38e-06  2.45e-05  4.93e-01  
 17  +3.8519e-01  +3.9607e-01  1.09e-02  2.19e-06  5.52e-04  9.38e-07  8.46e-06  9.19e-01  
 18  +3.8351e-01  +3.8945e-01  5.93e-03  1.19e-06  2.98e-04  4.41e-07  4.64e-06  6.58e-01  
 19  +3.8158e-01  +3.8206e-01  4.86e-04  9.64e-08  2.43e-05  3.46e-08  3.85e-07  9.30e-01  
 20  +3.8140e-01  +3.8141e-01  6.76e-06  1.34e-09  3.37e-07  4.42e-10  5.36e-09  9.90e-01  
 21  +3.8140e-01  +3.8140e-01  6.77e-08  1.34e-11  3.38e-09  4.43e-12  5.37e-11  9.90e-01  
 22  +3.8140e-01  +3.8140e-01  7.00e-10  1.39e-13  3.49e-11  4.61e-14  5.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 254.0911ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:53 PM: Optimal value: 3.814e-01
(CVXPY) Oct 06 04:29:53 PM: Compilation took 9.365e-02 seconds
(CVXPY) Oct 06 04:29:53 PM: Solver (including time spent in interface) took 2.665e-01 seconds
Iteration: 33, Objective: 0.3814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:54 PM: Your problem has 5351 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:54 PM: Finished problem compilation (took 9.373e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5351
  constraints   = 10351
  nnz(P)        = 0
  nnz(A)        = 95246
  cones (total) = 1
    : Nonnegative = 1,  numel = 10351

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7641e-01  +1.0990e+03  1.10e+03  4.47e-01  8.18e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2801e-01  +1.1782e+02  1.17e+02  1.75e-01  4.05e+01  1.81e-02  2.83e-01  9.73e-01  
  3  +5.0807e-01  +3.0452e+01  2.99e+01  1.20e-01  2.83e+01  5.21e-05  2.52e-01  3.92e-01  
  4  +5.0108e-01  +3.2333e+00  2.73e+00  1.89e-02  4.61e+00  6.48e-06  1.48e-01  6.50e-01  
  5  +5.0033e-01  +1.6274e+00  1.13e+00  7.53e-03  1.87e+00  5.85e-05  6.21e-02  9.79e-01  
  6  +4.9985e-01  +1.1244e+00  6.25e-01  2.30e-03  5.87e-01  1.86e-04  7.49e-03  9.04e-01  
  7  +4.9624e-01  +1.0979e+00  6.02e-01  2.91e-04  7.53e-02  1.65e-03  7.66e-04  8.99e-01  
  8  +4.9034e-01  +1.0179e+00  5.28e-01  1.65e-04  4.26e-02  2.04e-03  4.36e-04  5.09e-01  
  9  +4.8734e-01  +9.8161e-01  4.94e-01  1.40e-04  3.61e-02  1.57e-03  3.71e-04  3.36e-01  
 10  +4.8318e-01  +9.3665e-01  4.53e-01  1.25e-04  3.22e-02  1.08e-03  3.36e-04  2.81e-01  
 11  +4.7421e-01  +8.6415e-01  3.90e-01  1.04e-04  2.66e-02  6.71e-04  2.85e-04  3.29e-01  
 12  +4.4594e-01  +6.8137e-01  2.35e-01  5.54e-05  1.41e-02  9.58e-05  1.66e-04  7.29e-01  
 13  +4.2867e-01  +5.9544e-01  1.67e-01  3.76e-05  9.52e-03  5.75e-05  1.20e-04  3.37e-01  
 14  +4.1450e-01  +5.2934e-01  1.15e-01  2.50e-05  6.31e-03  2.69e-05  8.39e-05  5.20e-01  
 15  +3.9824e-01  +4.5492e-01  5.67e-02  1.19e-05  2.99e-03  7.89e-06  4.27e-05  7.33e-01  
 16  +3.9044e-01  +4.2096e-01  3.05e-02  6.28e-06  1.58e-03  3.79e-06  2.35e-05  5.48e-01  
 17  +3.8462e-01  +3.9556e-01  1.09e-02  2.21e-06  5.57e-04  7.60e-07  8.58e-06  9.37e-01  
 18  +3.8338e-01  +3.9067e-01  7.30e-03  1.47e-06  3.69e-04  4.81e-07  5.75e-06  4.81e-01  
 19  +3.8133e-01  +3.8281e-01  1.48e-03  2.96e-07  7.44e-05  9.44e-08  1.18e-06  8.29e-01  
 20  +3.8081e-01  +3.8085e-01  3.32e-05  6.61e-09  1.66e-06  2.10e-09  2.66e-08  9.78e-01  
 21  +3.8080e-01  +3.8080e-01  3.33e-07  6.63e-11  1.67e-08  2.10e-11  2.67e-10  9.90e-01  
 22  +3.8080e-01  +3.8080e-01  3.36e-09  6.68e-13  1.68e-10  2.13e-13  2.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 248.9036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:54 PM: Optimal value: 3.808e-01
(CVXPY) Oct 06 04:29:54 PM: Compilation took 9.373e-02 seconds
(CVXPY) Oct 06 04:29:54 PM: Solver (including time spent in interface) took 2.665e-01 seconds
Iteration: 34, Objective: 0.3808
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:54 PM: Your problem has 5361 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:54 PM: Finished problem compilation (took 9.445e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5361
  constraints   = 10361
  nnz(P)        = 0
  nnz(A)        = 95516
  cones (total) = 1
    : Nonnegative = 1,  numel = 10361

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7630e-01  +1.0991e+03  1.10e+03  4.48e-01  8.17e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2792e-01  +1.1767e+02  1.17e+02  1.75e-01  4.04e+01  1.81e-02  2.83e-01  9.75e-01  
  3  +5.0806e-01  +3.0419e+01  2.99e+01  1.20e-01  2.83e+01  5.22e-05  2.51e-01  3.94e-01  
  4  +5.0108e-01  +3.2339e+00  2.73e+00  1.89e-02  4.62e+00  6.48e-06  1.47e-01  6.51e-01  
  5  +5.0033e-01  +1.6431e+00  1.14e+00  7.62e-03  1.89e+00  6.03e-05  6.02e-02  9.90e-01  
  6  +4.9982e-01  +1.1465e+00  6.47e-01  2.19e-03  5.60e-01  2.05e-04  6.90e-03  9.12e-01  
  7  +4.9609e-01  +1.1167e+00  6.21e-01  2.89e-04  7.48e-02  1.69e-03  7.59e-04  8.92e-01  
  8  +4.9086e-01  +1.0395e+00  5.49e-01  1.79e-04  4.61e-02  1.91e-03  4.71e-04  4.66e-01  
  9  +4.8756e-01  +9.9720e-01  5.10e-01  1.48e-04  3.81e-02  1.49e-03  3.92e-04  3.47e-01  
 10  +4.8488e-01  +9.6336e-01  4.78e-01  1.39e-04  3.58e-02  1.14e-03  3.71e-04  1.88e-01  
 11  +4.7350e-01  +8.5490e-01  3.81e-01  1.05e-04  2.68e-02  2.84e-04  2.89e-04  6.50e-01  
 12  +4.5473e-01  +7.4140e-01  2.87e-01  7.00e-05  1.78e-02  1.81e-04  2.04e-04  3.75e-01  
 13  +4.2591e-01  +5.8551e-01  1.60e-01  3.60e-05  9.11e-03  6.97e-05  1.16e-04  5.07e-01  
 14  +4.1770e-01  +5.4757e-01  1.30e-01  2.87e-05  7.24e-03  4.54e-05  9.49e-05  3.45e-01  
 15  +4.0435e-01  +4.8627e-01  8.19e-02  1.76e-05  4.43e-03  2.43e-05  6.14e-05  4.38e-01  
 16  +3.9228e-01  +4.3169e-01  3.94e-02  8.20e-06  2.06e-03  8.02e-06  3.03e-05  6.96e-01  
 17  +3.8969e-01  +4.2047e-01  3.08e-02  6.36e-06  1.60e-03  5.90e-06  2.38e-05  2.79e-01  
 18  +3.8357e-01  +3.9415e-01  1.06e-02  2.15e-06  5.41e-04  1.33e-06  8.36e-06  8.25e-01  
 19  +3.8198e-01  +3.8766e-01  5.68e-03  1.15e-06  2.88e-04  6.01e-07  4.51e-06  6.14e-01  
 20  +3.8069e-01  +3.8262e-01  1.94e-03  3.87e-07  9.74e-05  1.81e-07  1.55e-06  7.36e-01  
 21  +3.8002e-01  +3.8009e-01  6.29e-05  1.25e-08  3.15e-06  5.40e-09  5.04e-08  9.73e-01  
 22  +3.8000e-01  +3.8000e-01  6.31e-07  1.26e-10  3.16e-08  5.42e-11  5.05e-10  9.90e-01  
 23  +3.8000e-01  +3.8000e-01  6.32e-09  1.26e-12  3.17e-10  5.48e-13  5.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 264.9972ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:55 PM: Optimal value: 3.800e-01
(CVXPY) Oct 06 04:29:55 PM: Compilation took 9.445e-02 seconds
(CVXPY) Oct 06 04:29:55 PM: Solver (including time spent in interface) took 2.823e-01 seconds
Iteration: 35, Objective: 0.3800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:55 PM: Your problem has 5371 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:55 PM: Finished problem compilation (took 9.412e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5371
  constraints   = 10371
  nnz(P)        = 0
  nnz(A)        = 95772
  cones (total) = 1
    : Nonnegative = 1,  numel = 10371

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7627e-01  +1.0991e+03  1.10e+03  4.48e-01  8.17e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2792e-01  +1.1765e+02  1.17e+02  1.75e-01  4.03e+01  1.81e-02  2.83e-01  9.75e-01  
  3  +5.0805e-01  +3.0408e+01  2.99e+01  1.20e-01  2.82e+01  5.22e-05  2.51e-01  3.95e-01  
  4  +5.0108e-01  +3.2316e+00  2.73e+00  1.89e-02  4.61e+00  6.49e-06  1.47e-01  6.52e-01  
  5  +5.0034e-01  +1.6657e+00  1.17e+00  7.76e-03  1.93e+00  6.02e-05  6.06e-02  9.82e-01  
  6  +4.9984e-01  +1.1650e+00  6.65e-01  2.33e-03  5.96e-01  1.96e-04  7.43e-03  8.96e-01  
  7  +4.9626e-01  +1.1350e+00  6.39e-01  3.08e-04  7.96e-02  1.63e-03  8.08e-04  8.93e-01  
  8  +4.9079e-01  +1.0508e+00  5.60e-01  1.81e-04  4.67e-02  1.92e-03  4.77e-04  4.92e-01  
  9  +4.8795e-01  +1.0107e+00  5.23e-01  1.53e-04  3.93e-02  1.50e-03  4.04e-04  3.33e-01  
 10  +4.8532e-01  +9.7778e-01  4.92e-01  1.43e-04  3.67e-02  1.20e-03  3.81e-04  1.70e-01  
 11  +4.7191e-01  +8.4511e-01  3.73e-01  1.01e-04  2.58e-02  2.06e-04  2.79e-04  7.20e-01  
 12  +4.5171e-01  +7.2461e-01  2.73e-01  6.62e-05  1.68e-02  1.18e-04  1.95e-04  4.07e-01  
 13  +4.2482e-01  +5.8200e-01  1.57e-01  3.56e-05  8.99e-03  4.99e-05  1.15e-04  4.79e-01  
 14  +4.1699e-01  +5.4582e-01  1.29e-01  2.85e-05  7.19e-03  3.21e-05  9.47e-05  3.67e-01  
 15  +4.0311e-01  +4.8194e-01  7.88e-02  1.69e-05  4.27e-03  1.68e-05  5.96e-05  4.55e-01  
 16  +3.9190e-01  +4.3145e-01  3.95e-02  8.27e-06  2.08e-03  6.62e-06  3.07e-05  6.29e-01  
 17  +3.8878e-01  +4.1778e-01  2.90e-02  6.01e-06  1.51e-03  4.48e-06  2.27e-05  3.49e-01  
 18  +3.8371e-01  +3.9575e-01  1.20e-02  2.46e-06  6.19e-04  1.34e-06  9.57e-06  7.69e-01  
 19  +3.8190e-01  +3.8838e-01  6.48e-03  1.32e-06  3.31e-04  6.85e-07  5.19e-06  5.09e-01  
 20  +3.8059e-01  +3.8309e-01  2.51e-03  5.04e-07  1.27e-04  2.03e-07  2.01e-06  7.96e-01  
 21  +3.7977e-01  +3.7995e-01  1.86e-04  3.72e-08  9.36e-06  1.43e-08  1.50e-07  9.36e-01  
 22  +3.7970e-01  +3.7970e-01  1.92e-06  3.83e-10  9.63e-08  1.46e-10  1.55e-09  9.90e-01  
 23  +3.7970e-01  +3.7970e-01  1.92e-08  3.84e-12  9.64e-10  1.47e-12  1.55e-11  9.90e-01  
 24  +3.7970e-01  +3.7970e-01  2.00e-10  4.00e-14  1.01e-11  1.55e-14  1.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 294.5611ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:55 PM: Optimal value: 3.797e-01
(CVXPY) Oct 06 04:29:55 PM: Compilation took 9.412e-02 seconds
(CVXPY) Oct 06 04:29:55 PM: Solver (including time spent in interface) took 3.127e-01 seconds
Iteration: 36, Objective: 0.3797
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:55 PM: Your problem has 5375 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:56 PM: Finished problem compilation (took 1.098e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5375
  constraints   = 10375
  nnz(P)        = 0
  nnz(A)        = 95870
  cones (total) = 1
    : Nonnegative = 1,  numel = 10375

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7622e-01  +1.0992e+03  1.10e+03  4.48e-01  8.17e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2790e-01  +1.1763e+02  1.17e+02  1.75e-01  4.03e+01  1.81e-02  2.83e-01  9.75e-01  
  3  +5.0805e-01  +3.0406e+01  2.99e+01  1.20e-01  2.82e+01  5.23e-05  2.51e-01  3.95e-01  
  4  +5.0108e-01  +3.2326e+00  2.73e+00  1.89e-02  4.61e+00  6.49e-06  1.47e-01  6.52e-01  
  5  +5.0034e-01  +1.6725e+00  1.17e+00  7.80e-03  1.94e+00  6.07e-05  6.02e-02  9.84e-01  
  6  +4.9983e-01  +1.1646e+00  6.65e-01  2.27e-03  5.82e-01  2.02e-04  7.18e-03  8.99e-01  
  7  +4.9620e-01  +1.1342e+00  6.38e-01  3.04e-04  7.85e-02  1.65e-03  7.97e-04  8.91e-01  
  8  +4.9123e-01  +1.0571e+00  5.66e-01  1.89e-04  4.88e-02  1.87e-03  4.98e-04  4.57e-01  
  9  +4.8798e-01  +1.0133e+00  5.25e-01  1.55e-04  4.00e-02  1.50e-03  4.11e-04  3.45e-01  
 10  +4.8593e-01  +9.8742e-01  5.01e-01  1.46e-04  3.77e-02  1.27e-03  3.90e-04  1.41e-01  
 11  +4.7398e-01  +8.6416e-01  3.90e-01  1.06e-04  2.72e-02  3.22e-04  2.93e-04  6.62e-01  
 12  +4.6259e-01  +7.9446e-01  3.32e-01  8.43e-05  2.15e-02  2.53e-04  2.40e-04  2.24e-01  
 13  +4.2773e-01  +5.9338e-01  1.66e-01  3.77e-05  9.53e-03  4.27e-05  1.20e-04  6.92e-01  
 14  +4.1803e-01  +5.4925e-01  1.31e-01  2.92e-05  7.36e-03  2.92e-05  9.63e-05  3.06e-01  
 15  +4.0532e-01  +4.9171e-01  8.64e-02  1.86e-05  4.69e-03  1.49e-05  6.48e-05  4.99e-01  
 16  +3.9220e-01  +4.3300e-01  4.08e-02  8.53e-06  2.14e-03  5.02e-06  3.15e-05  7.14e-01  
 17  +3.8943e-01  +4.2108e-01  3.16e-02  6.56e-06  1.65e-03  3.69e-06  2.46e-05  2.97e-01  
 18  +3.8415e-01  +3.9847e-01  1.43e-02  2.93e-06  7.36e-04  1.35e-06  1.13e-05  7.15e-01  
 19  +3.8216e-01  +3.9036e-01  8.19e-03  1.67e-06  4.19e-04  7.39e-07  6.54e-06  4.76e-01  
 20  +3.8068e-01  +3.8435e-01  3.67e-03  7.39e-07  1.86e-04  2.85e-07  2.94e-06  7.05e-01  
 21  +3.7961e-01  +3.8017e-01  5.60e-04  1.12e-07  2.82e-05  2.95e-08  4.51e-07  9.90e-01  
 22  +3.7940e-01  +3.7941e-01  6.81e-06  1.36e-09  3.42e-07  3.58e-10  5.49e-09  9.88e-01  
 23  +3.7940e-01  +3.7940e-01  6.82e-08  1.36e-11  3.43e-09  3.59e-12  5.50e-11  9.90e-01  
 24  +3.7940e-01  +3.7940e-01  7.08e-10  1.41e-13  3.55e-11  3.76e-14  5.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 286.9468ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:56 PM: Optimal value: 3.794e-01
(CVXPY) Oct 06 04:29:56 PM: Compilation took 1.098e-01 seconds
(CVXPY) Oct 06 04:29:56 PM: Solver (including time spent in interface) took 2.986e-01 seconds
Iteration: 37, Objective: 0.3794
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:56 PM: Your problem has 5384 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:56 PM: Finished problem compilation (took 1.105e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5384
  constraints   = 10384
  nnz(P)        = 0
  nnz(A)        = 96168
  cones (total) = 1
    : Nonnegative = 1,  numel = 10384

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7621e-01  +1.0992e+03  1.10e+03  4.48e-01  8.16e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2789e-01  +1.1761e+02  1.17e+02  1.75e-01  4.02e+01  1.81e-02  2.83e-01  9.75e-01  
  3  +5.0805e-01  +3.0402e+01  2.99e+01  1.20e-01  2.82e+01  5.23e-05  2.51e-01  3.96e-01  
  4  +5.0108e-01  +3.2325e+00  2.73e+00  1.89e-02  4.61e+00  6.49e-06  1.47e-01  6.52e-01  
  5  +5.0034e-01  +1.6779e+00  1.18e+00  7.84e-03  1.95e+00  6.08e-05  6.02e-02  9.83e-01  
  6  +4.9983e-01  +1.1684e+00  6.69e-01  2.29e-03  5.84e-01  2.01e-04  7.21e-03  8.98e-01  
  7  +4.9623e-01  +1.1379e+00  6.42e-01  3.06e-04  7.91e-02  1.64e-03  8.04e-04  8.90e-01  
  8  +4.9146e-01  +1.0626e+00  5.71e-01  1.94e-04  5.00e-02  1.84e-03  5.11e-04  4.45e-01  
  9  +4.8787e-01  +1.0150e+00  5.27e-01  1.56e-04  4.02e-02  1.49e-03  4.14e-04  3.57e-01  
 10  +4.8581e-01  +9.8884e-01  5.03e-01  1.47e-04  3.78e-02  1.26e-03  3.92e-04  1.44e-01  
 11  +4.7472e-01  +8.7102e-01  3.96e-01  1.09e-04  2.79e-02  3.32e-04  3.00e-04  6.47e-01  
 12  +4.6350e-01  +8.0179e-01  3.38e-01  8.65e-05  2.21e-02  2.64e-04  2.46e-04  2.24e-01  
 13  +4.2470e-01  +5.7597e-01  1.51e-01  3.40e-05  8.60e-03  1.95e-05  1.09e-04  7.74e-01  
 14  +4.1703e-01  +5.4269e-01  1.26e-01  2.78e-05  7.01e-03  1.46e-05  9.19e-05  2.76e-01  
 15  +4.0449e-01  +4.8748e-01  8.30e-02  1.79e-05  4.49e-03  8.09e-06  6.23e-05  4.95e-01  
 16  +3.9201e-01  +4.3264e-01  4.06e-02  8.50e-06  2.14e-03  3.31e-06  3.14e-05  6.77e-01  
 17  +3.8935e-01  +4.2120e-01  3.18e-02  6.61e-06  1.66e-03  2.50e-06  2.48e-05  3.02e-01  
 18  +3.8389e-01  +3.9796e-01  1.41e-02  2.88e-06  7.24e-04  9.66e-07  1.12e-05  7.39e-01  
 19  +3.8166e-01  +3.8885e-01  7.19e-03  1.46e-06  3.68e-04  4.76e-07  5.77e-06  5.66e-01  
 20  +3.8058e-01  +3.8456e-01  3.98e-03  8.04e-07  2.02e-04  2.50e-07  3.20e-06  5.80e-01  
 21  +3.7932e-01  +3.7965e-01  3.29e-04  6.60e-08  1.66e-05  1.71e-08  2.67e-07  9.90e-01  
 22  +3.7920e-01  +3.7920e-01  3.54e-06  7.09e-10  1.78e-07  1.84e-10  2.87e-09  9.89e-01  
 23  +3.7920e-01  +3.7920e-01  3.54e-08  7.10e-12  1.78e-09  1.84e-12  2.87e-11  9.90e-01  
 24  +3.7920e-01  +3.7920e-01  3.67e-10  7.35e-14  1.85e-11  1.93e-14  3.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 298.0344ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:57 PM: Optimal value: 3.792e-01
(CVXPY) Oct 06 04:29:57 PM: Compilation took 1.105e-01 seconds
(CVXPY) Oct 06 04:29:57 PM: Solver (including time spent in interface) took 3.137e-01 seconds
Iteration: 38, Objective: 0.3792
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:57 PM: Your problem has 5388 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:57 PM: Finished problem compilation (took 1.093e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5388
  constraints   = 10388
  nnz(P)        = 0
  nnz(A)        = 96290
  cones (total) = 1
    : Nonnegative = 1,  numel = 10388

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7619e-01  +1.0992e+03  1.10e+03  4.48e-01  8.16e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2786e-01  +1.1757e+02  1.17e+02  1.75e-01  4.02e+01  1.82e-02  2.83e-01  9.75e-01  
  3  +5.0805e-01  +3.0395e+01  2.99e+01  1.20e-01  2.81e+01  5.23e-05  2.51e-01  3.96e-01  
  4  +5.0108e-01  +3.2337e+00  2.73e+00  1.89e-02  4.61e+00  6.50e-06  1.47e-01  6.52e-01  
  5  +5.0035e-01  +1.6934e+00  1.19e+00  7.94e-03  1.97e+00  6.09e-05  6.04e-02  9.79e-01  
  6  +4.9984e-01  +1.1713e+00  6.71e-01  2.31e-03  5.90e-01  1.99e-04  7.29e-03  8.97e-01  
  7  +4.9630e-01  +1.1410e+00  6.45e-01  3.11e-04  8.04e-02  1.61e-03  8.16e-04  8.90e-01  
  8  +4.9148e-01  +1.0640e+00  5.72e-01  1.95e-04  5.03e-02  1.82e-03  5.13e-04  4.52e-01  
  9  +4.8830e-01  +1.0183e+00  5.30e-01  1.59e-04  4.09e-02  1.42e-03  4.21e-04  3.68e-01  
 10  +4.8598e-01  +9.8770e-01  5.02e-01  1.48e-04  3.82e-02  1.15e-03  3.95e-04  1.74e-01  
 11  +4.7425e-01  +8.6539e-01  3.91e-01  1.08e-04  2.76e-02  2.72e-04  2.97e-04  6.80e-01  
 12  +4.6232e-01  +7.9282e-01  3.30e-01  8.43e-05  2.15e-02  2.13e-04  2.40e-04  2.36e-01  
 13  +4.2435e-01  +5.7594e-01  1.52e-01  3.41e-05  8.62e-03  2.99e-05  1.10e-04  7.22e-01  
 14  +4.1691e-01  +5.4340e-01  1.26e-01  2.80e-05  7.06e-03  2.20e-05  9.26e-05  2.74e-01  
 15  +4.0412e-01  +4.8671e-01  8.26e-02  1.78e-05  4.47e-03  1.12e-05  6.21e-05  5.16e-01  
 16  +3.9230e-01  +4.3456e-01  4.23e-02  8.87e-06  2.23e-03  4.76e-06  3.28e-05  6.15e-01  
 17  +3.8946e-01  +4.2235e-01  3.29e-02  6.85e-06  1.72e-03  3.52e-06  2.57e-05  2.95e-01  
 18  +3.8456e-01  +4.0153e-01  1.70e-02  3.49e-06  8.78e-04  1.65e-06  1.35e-05  5.74e-01  
 19  +3.8041e-01  +3.8420e-01  3.79e-03  7.73e-07  1.94e-04  2.52e-07  3.07e-06  9.31e-01  
 20  +3.7915e-01  +3.7930e-01  1.51e-04  3.07e-08  7.71e-06  9.43e-09  1.23e-07  9.69e-01  
 21  +3.7910e-01  +3.7910e-01  1.52e-06  3.09e-10  7.76e-08  9.49e-11  1.24e-09  9.90e-01  
 22  +3.7910e-01  +3.7910e-01  1.52e-08  3.09e-12  7.77e-10  9.53e-13  1.25e-11  9.90e-01  
 23  +3.7910e-01  +3.7910e-01  1.54e-10  3.14e-14  7.86e-12  9.65e-15  1.26e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 281.3356ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:57 PM: Optimal value: 3.791e-01
(CVXPY) Oct 06 04:29:57 PM: Compilation took 1.093e-01 seconds
(CVXPY) Oct 06 04:29:57 PM: Solver (including time spent in interface) took 3.000e-01 seconds
Iteration: 39, Objective: 0.3791
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:57 PM: Your problem has 5398 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:58 PM: Finished problem compilation (took 9.375e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5398
  constraints   = 10398
  nnz(P)        = 0
  nnz(A)        = 96491
  cones (total) = 1
    : Nonnegative = 1,  numel = 10398

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7620e-01  +1.0991e+03  1.10e+03  4.48e-01  8.15e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2786e-01  +1.1756e+02  1.17e+02  1.75e-01  4.01e+01  1.82e-02  2.83e-01  9.75e-01  
  3  +5.0805e-01  +3.0389e+01  2.99e+01  1.20e-01  2.81e+01  5.23e-05  2.50e-01  3.96e-01  
  4  +5.0108e-01  +3.2315e+00  2.73e+00  1.89e-02  4.61e+00  6.49e-06  1.47e-01  6.52e-01  
  5  +5.0034e-01  +1.6825e+00  1.18e+00  7.86e-03  1.95e+00  6.13e-05  5.96e-02  9.86e-01  
  6  +4.9982e-01  +1.1722e+00  6.72e-01  2.24e-03  5.73e-01  2.08e-04  7.01e-03  9.00e-01  
  7  +4.9617e-01  +1.1409e+00  6.45e-01  3.04e-04  7.86e-02  1.65e-03  7.98e-04  8.88e-01  
  8  +4.9144e-01  +1.0646e+00  5.73e-01  1.97e-04  5.07e-02  1.81e-03  5.18e-04  4.33e-01  
  9  +4.8833e-01  +1.0189e+00  5.31e-01  1.60e-04  4.12e-02  1.40e-03  4.24e-04  3.73e-01  
 10  +4.8614e-01  +9.9026e-01  5.04e-01  1.50e-04  3.85e-02  1.16e-03  3.99e-04  1.63e-01  
 11  +4.7248e-01  +8.5390e-01  3.81e-01  1.01e-04  2.59e-02  2.82e-04  2.80e-04  7.11e-01  
 12  +4.5935e-01  +7.7490e-01  3.16e-01  7.87e-05  2.00e-02  2.06e-04  2.26e-04  2.54e-01  
 13  +4.2641e-01  +5.9053e-01  1.64e-01  3.73e-05  9.43e-03  5.24e-05  1.20e-04  6.14e-01  
 14  +4.1722e-01  +5.4856e-01  1.31e-01  2.92e-05  7.36e-03  3.54e-05  9.69e-05  3.16e-01  
 15  +4.0402e-01  +4.8834e-01  8.43e-02  1.82e-05  4.58e-03  1.80e-05  6.37e-05  4.85e-01  
 16  +3.9162e-01  +4.3268e-01  4.11e-02  8.60e-06  2.16e-03  6.38e-06  3.19e-05  6.78e-01  
 17  +3.8918e-01  +4.2197e-01  3.28e-02  6.82e-06  1.71e-03  4.66e-06  2.56e-05  3.10e-01  
 18  +3.8398e-01  +3.9956e-01  1.56e-02  3.19e-06  8.02e-04  1.61e-06  1.24e-05  7.41e-01  
 19  +3.8068e-01  +3.8608e-01  5.40e-03  1.10e-06  2.75e-04  4.66e-07  4.36e-06  7.71e-01  
 20  +3.7949e-01  +3.8144e-01  1.96e-03  3.95e-07  9.91e-05  1.59e-07  1.59e-06  6.90e-01  
 21  +3.7882e-01  +3.7887e-01  5.44e-05  1.09e-08  2.74e-06  3.96e-09  4.43e-08  9.79e-01  
 22  +3.7880e-01  +3.7880e-01  5.45e-07  1.09e-10  2.75e-08  3.96e-11  4.44e-10  9.90e-01  
 23  +3.7880e-01  +3.7880e-01  5.48e-09  1.10e-12  2.76e-10  4.02e-13  4.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 287.7148ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:58 PM: Optimal value: 3.788e-01
(CVXPY) Oct 06 04:29:58 PM: Compilation took 9.375e-02 seconds
(CVXPY) Oct 06 04:29:58 PM: Solver (including time spent in interface) took 3.126e-01 seconds
Iteration: 40, Objective: 0.3788
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:58 PM: Your problem has 5408 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:58 PM: Finished problem compilation (took 1.101e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5408
  constraints   = 10408
  nnz(P)        = 0
  nnz(A)        = 96662
  cones (total) = 1
    : Nonnegative = 1,  numel = 10408

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7612e-01  +1.0991e+03  1.10e+03  4.48e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2785e-01  +1.1754e+02  1.17e+02  1.75e-01  4.01e+01  1.82e-02  2.83e-01  9.76e-01  
  3  +5.0804e-01  +3.0387e+01  2.99e+01  1.20e-01  2.81e+01  5.24e-05  2.50e-01  3.97e-01  
  4  +5.0108e-01  +3.2322e+00  2.73e+00  1.90e-02  4.61e+00  6.50e-06  1.47e-01  6.53e-01  
  5  +5.0034e-01  +1.6833e+00  1.18e+00  7.87e-03  1.95e+00  6.19e-05  5.91e-02  9.90e-01  
  6  +4.9979e-01  +1.1599e+00  6.60e-01  2.10e-03  5.38e-01  2.18e-04  6.50e-03  9.08e-01  
  7  +4.9602e-01  +1.1287e+00  6.33e-01  2.90e-04  7.49e-02  1.70e-03  7.61e-04  8.84e-01  
  8  +4.9133e-01  +1.0554e+00  5.64e-01  1.94e-04  5.01e-02  1.78e-03  5.13e-04  4.12e-01  
  9  +4.8845e-01  +1.0142e+00  5.26e-01  1.59e-04  4.10e-02  1.37e-03  4.22e-04  3.82e-01  
 10  +4.8623e-01  +9.8627e-01  5.00e-01  1.49e-04  3.84e-02  1.13e-03  3.98e-04  1.62e-01  
 11  +4.7126e-01  +8.4459e-01  3.73e-01  9.76e-05  2.49e-02  2.78e-04  2.70e-04  7.29e-01  
 12  +4.5625e-01  +7.5584e-01  3.00e-01  7.36e-05  1.87e-02  1.88e-04  2.13e-04  2.85e-01  
 13  +4.2708e-01  +5.9683e-01  1.70e-01  3.87e-05  9.77e-03  6.73e-05  1.24e-04  5.24e-01  
 14  +4.1625e-01  +5.4622e-01  1.30e-01  2.89e-05  7.28e-03  4.27e-05  9.63e-05  3.46e-01  
 15  +4.0314e-01  +4.8584e-01  8.27e-02  1.79e-05  4.49e-03  2.28e-05  6.29e-05  4.44e-01  
 16  +3.9140e-01  +4.3277e-01  4.14e-02  8.68e-06  2.18e-03  8.18e-06  3.22e-05  6.65e-01  
 17  +3.8887e-01  +4.2159e-01  3.27e-02  6.81e-06  1.71e-03  5.78e-06  2.56e-05  3.31e-01  
 18  +3.8388e-01  +4.0006e-01  1.62e-02  3.33e-06  8.36e-04  2.19e-06  1.29e-05  6.72e-01  
 19  +3.8109e-01  +3.8809e-01  6.99e-03  1.43e-06  3.58e-04  4.87e-07  5.64e-06  9.26e-01  
 20  +3.7934e-01  +3.8138e-01  2.05e-03  4.14e-07  1.04e-04  1.27e-07  1.67e-06  8.24e-01  
 21  +3.7862e-01  +3.7867e-01  5.20e-05  1.05e-08  2.64e-06  2.98e-09  4.26e-08  9.85e-01  
 22  +3.7860e-01  +3.7860e-01  5.21e-07  1.05e-10  2.64e-08  2.98e-11  4.27e-10  9.90e-01  
 23  +3.7860e-01  +3.7860e-01  5.35e-09  1.08e-12  2.71e-10  3.08e-13  4.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 304.083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:59 PM: Optimal value: 3.786e-01
(CVXPY) Oct 06 04:29:59 PM: Compilation took 1.101e-01 seconds
(CVXPY) Oct 06 04:29:59 PM: Solver (including time spent in interface) took 3.127e-01 seconds
Iteration: 41, Objective: 0.3786
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:59 PM: Your problem has 5418 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:59 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5418
  constraints   = 10418
  nnz(P)        = 0
  nnz(A)        = 96921
  cones (total) = 1
    : Nonnegative = 1,  numel = 10418

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7603e-01  +1.0991e+03  1.10e+03  4.48e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2779e-01  +1.1743e+02  1.17e+02  1.75e-01  4.00e+01  1.82e-02  2.82e-01  9.77e-01  
  3  +5.0804e-01  +3.0360e+01  2.99e+01  1.20e-01  2.80e+01  5.24e-05  2.50e-01  3.99e-01  
  4  +5.0108e-01  +3.2305e+00  2.73e+00  1.89e-02  4.60e+00  6.51e-06  1.46e-01  6.54e-01  
  5  +5.0035e-01  +1.7127e+00  1.21e+00  8.04e-03  1.99e+00  6.30e-05  5.83e-02  9.90e-01  
  6  +4.9977e-01  +1.1726e+00  6.73e-01  2.04e-03  5.22e-01  2.29e-04  6.20e-03  9.11e-01  
  7  +4.9594e-01  +1.1397e+00  6.44e-01  2.88e-04  7.43e-02  1.71e-03  7.54e-04  8.80e-01  
  8  +4.9168e-01  +1.0707e+00  5.79e-01  2.03e-04  5.23e-02  1.73e-03  5.35e-04  3.78e-01  
  9  +4.8717e-01  +1.0150e+00  5.28e-01  1.55e-04  3.98e-02  1.40e-03  4.11e-04  4.14e-01  
 10  +4.8510e-01  +9.9038e-01  5.05e-01  1.47e-04  3.79e-02  1.19e-03  3.93e-04  1.28e-01  
 11  +4.7328e-01  +8.7004e-01  3.97e-01  1.10e-04  2.80e-02  2.63e-04  3.03e-04  6.69e-01  
 12  +4.5932e-01  +7.8386e-01  3.25e-01  8.24e-05  2.10e-02  1.86e-04  2.38e-04  2.96e-01  
 13  +4.2263e-01  +5.7653e-01  1.54e-01  3.48e-05  8.77e-03  3.57e-05  1.13e-04  6.78e-01  
 14  +4.1383e-01  +5.3672e-01  1.23e-01  2.73e-05  6.87e-03  2.53e-05  9.18e-05  2.82e-01  
 15  +3.9565e-01  +4.5469e-01  5.90e-02  1.27e-05  3.18e-03  8.24e-06  4.61e-05  6.78e-01  
 16  +3.9029e-01  +4.3128e-01  4.10e-02  8.68e-06  2.18e-03  5.41e-06  3.25e-05  3.60e-01  
 17  +3.8745e-01  +4.1887e-01  3.14e-02  6.60e-06  1.65e-03  3.85e-06  2.51e-05  3.26e-01  
 18  +3.8304e-01  +4.0011e-01  1.71e-02  3.55e-06  8.90e-04  1.96e-06  1.39e-05  5.07e-01  
 19  +3.7958e-01  +3.8545e-01  5.87e-03  1.21e-06  3.03e-04  5.44e-07  4.84e-06  7.78e-01  
 20  +3.7829e-01  +3.8033e-01  2.03e-03  4.15e-07  1.04e-04  1.79e-07  1.69e-06  6.91e-01  
 21  +3.7763e-01  +3.7771e-01  7.81e-05  1.59e-08  3.99e-06  4.59e-09  6.51e-08  9.90e-01  
 22  +3.7760e-01  +3.7760e-01  7.88e-07  1.60e-10  4.02e-08  4.63e-11  6.57e-10  9.90e-01  
 23  +3.7760e-01  +3.7760e-01  7.89e-09  1.61e-12  4.03e-10  4.64e-13  6.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 293.7886ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:59 PM: Optimal value: 3.776e-01
(CVXPY) Oct 06 04:29:59 PM: Compilation took 1.094e-01 seconds
(CVXPY) Oct 06 04:29:59 PM: Solver (including time spent in interface) took 2.969e-01 seconds
Iteration: 42, Objective: 0.3776
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:00 PM: Your problem has 5425 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:00 PM: Finished problem compilation (took 9.927e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5425
  constraints   = 10425
  nnz(P)        = 0
  nnz(A)        = 97037
  cones (total) = 1
    : Nonnegative = 1,  numel = 10425

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7603e-01  +1.0991e+03  1.10e+03  4.48e-01  8.13e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2778e-01  +1.1740e+02  1.17e+02  1.74e-01  3.99e+01  1.82e-02  2.82e-01  9.77e-01  
  3  +5.0803e-01  +3.0349e+01  2.98e+01  1.20e-01  2.80e+01  5.24e-05  2.50e-01  3.99e-01  
  4  +5.0108e-01  +3.2294e+00  2.73e+00  1.89e-02  4.60e+00  6.51e-06  1.46e-01  6.54e-01  
  5  +5.0036e-01  +1.7242e+00  1.22e+00  8.11e-03  2.01e+00  6.29e-05  5.84e-02  9.86e-01  
  6  +4.9978e-01  +1.1767e+00  6.77e-01  2.06e-03  5.28e-01  2.26e-04  6.29e-03  9.09e-01  
  7  +4.9601e-01  +1.1442e+00  6.48e-01  2.92e-04  7.55e-02  1.68e-03  7.67e-04  8.80e-01  
  8  +4.9192e-01  +1.0771e+00  5.85e-01  2.08e-04  5.35e-02  1.71e-03  5.47e-04  3.70e-01  
  9  +4.8748e-01  +1.0202e+00  5.33e-01  1.58e-04  4.07e-02  1.38e-03  4.20e-04  4.14e-01  
 10  +4.8526e-01  +9.9358e-01  5.08e-01  1.49e-04  3.83e-02  1.17e-03  3.98e-04  1.43e-01  
 11  +4.7226e-01  +8.6262e-01  3.90e-01  1.06e-04  2.72e-02  2.44e-04  2.95e-04  6.97e-01  
 12  +4.5832e-01  +7.7756e-01  3.19e-01  8.08e-05  2.05e-02  1.68e-04  2.34e-04  2.99e-01  
 13  +4.2392e-01  +5.8483e-01  1.61e-01  3.67e-05  9.25e-03  3.82e-05  1.19e-04  6.46e-01  
 14  +4.1410e-01  +5.3946e-01  1.25e-01  2.80e-05  7.05e-03  2.65e-05  9.43e-05  2.90e-01  
 15  +3.9606e-01  +4.5709e-01  6.10e-02  1.31e-05  3.30e-03  8.17e-06  4.78e-05  7.05e-01  
 16  +3.8981e-01  +4.2965e-01  3.98e-02  8.45e-06  2.12e-03  5.06e-06  3.18e-05  3.89e-01  
 17  +3.8631e-01  +4.1420e-01  2.79e-02  5.86e-06  1.47e-03  3.19e-06  2.24e-05  4.21e-01  
 18  +3.8206e-01  +3.9607e-01  1.40e-02  2.92e-06  7.32e-04  1.52e-06  1.15e-05  5.36e-01  
 19  +3.8015e-01  +3.8800e-01  7.85e-03  1.63e-06  4.08e-04  7.99e-07  6.50e-06  5.04e-01  
 20  +3.7816e-01  +3.7971e-01  1.55e-03  3.18e-07  7.96e-05  9.16e-08  1.29e-06  9.70e-01  
 21  +3.7762e-01  +3.7767e-01  5.09e-05  1.04e-08  2.60e-06  2.92e-09  4.25e-08  9.72e-01  
 22  +3.7760e-01  +3.7760e-01  5.10e-07  1.04e-10  2.61e-08  2.93e-11  4.26e-10  9.90e-01  
 23  +3.7760e-01  +3.7760e-01  5.62e-09  1.15e-12  2.87e-10  3.24e-13  4.72e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 282.772ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:00 PM: Optimal value: 3.776e-01
(CVXPY) Oct 06 04:30:00 PM: Compilation took 9.927e-02 seconds
(CVXPY) Oct 06 04:30:00 PM: Solver (including time spent in interface) took 3.128e-01 seconds
FULL MODEL:
  Accruacy: 0.5932
  Our objective: 0.18640000000000007

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1424)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x5 = 0 AND x9 = 0)                                                        <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.003)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.0046)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 39.16251468658447
Best over terms:
  Our final objective: 0.1424
    Its accruacy: 0.5712
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1424
  Highest accruacy: 0.5712
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

