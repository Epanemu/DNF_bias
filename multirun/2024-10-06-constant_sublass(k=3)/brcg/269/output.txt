Command:
python test_script.py -s constant_subclass -d 7 -n 5000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1452
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.19840000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:11 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:11 PM: Finished problem compilation (took 6.847e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.8811e-01  +5.2570e+02  5.25e+02  4.01e-01  4.61e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3799e-01  +6.5518e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.67e-01  
  3  +5.0944e-01  +1.6559e+01  1.60e+01  1.04e-01  1.49e+01  3.37e-05  2.44e-01  1.77e-01  
  4  +5.0034e-01  +1.0631e+00  5.63e-01  5.43e-03  8.03e-01  6.85e-06  1.10e-01  9.90e-01  
  5  +5.0004e-01  +6.5863e-01  1.59e-01  1.50e-03  2.24e-01  5.11e-06  2.77e-02  8.10e-01  
  6  +4.9783e-01  +1.0861e+00  5.88e-01  9.70e-04  1.46e-01  1.56e-04  3.03e-03  9.74e-01  
  7  +4.9029e-01  +9.2663e-01  4.36e-01  2.50e-04  3.76e-02  3.71e-04  7.66e-04  7.53e-01  
  8  +4.8297e-01  +6.7519e-01  1.92e-01  1.15e-04  1.73e-02  3.33e-06  3.77e-04  7.32e-01  
  9  +4.7218e-01  +5.9564e-01  1.23e-01  6.28e-05  9.41e-03  3.22e-06  2.18e-04  5.06e-01  
 10  +4.5991e-01  +5.1271e-01  5.28e-02  2.42e-05  3.62e-03  4.32e-06  9.30e-05  9.90e-01  
 11  +4.4962e-01  +4.6772e-01  1.81e-02  7.78e-06  1.16e-03  1.36e-06  3.22e-05  7.01e-01  
 12  +4.4662e-01  +4.5423e-01  7.61e-03  3.20e-06  4.79e-04  7.02e-07  1.35e-05  9.90e-01  
 13  +4.4416e-01  +4.4433e-01  1.75e-04  7.34e-08  1.10e-05  1.55e-08  3.17e-07  9.83e-01  
 14  +4.4410e-01  +4.4410e-01  1.75e-06  7.34e-10  1.10e-07  1.54e-10  3.18e-09  9.90e-01  
 15  +4.4410e-01  +4.4410e-01  1.75e-08  7.34e-12  1.10e-09  1.55e-12  3.18e-11  9.90e-01  
 16  +4.4410e-01  +4.4410e-01  1.75e-10  7.35e-14  1.10e-11  1.55e-14  3.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.8607ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:11 PM: Optimal value: 4.441e-01
(CVXPY) Oct 06 04:04:11 PM: Compilation took 6.847e-02 seconds
(CVXPY) Oct 06 04:04:11 PM: Solver (including time spent in interface) took 6.331e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:11 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:11 PM: Finished problem compilation (took 2.040e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 29354
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8795e-01  +5.2590e+02  5.25e+02  4.01e-01  4.80e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3768e-01  +6.5215e+01  6.47e+01  1.52e-01  2.31e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0927e-01  +1.6382e+01  1.59e+01  1.04e-01  1.54e+01  3.37e-05  2.44e-01  1.85e-01  
  4  +5.0045e-01  +1.2837e+00  7.83e-01  7.58e-03  1.16e+00  7.66e-06  1.25e-01  8.56e-01  
  5  +5.0017e-01  +8.9535e-01  3.95e-01  3.77e-03  5.82e-01  6.04e-06  6.22e-02  6.16e-01  
  6  +4.9989e-01  +8.3818e-01  3.38e-01  2.66e-03  4.13e-01  1.60e-05  1.34e-02  8.84e-01  
  7  +4.9418e-01  +7.8344e-01  2.89e-01  2.41e-04  3.78e-02  2.29e-04  7.02e-04  9.51e-01  
  8  +4.8932e-01  +7.2062e-01  2.31e-01  1.71e-04  2.69e-02  1.65e-04  5.03e-04  3.83e-01  
  9  +4.8877e-01  +7.1191e-01  2.23e-01  1.58e-04  2.48e-02  1.40e-04  4.58e-04  2.12e-01  
 10  +4.8464e-01  +6.6688e-01  1.82e-01  1.03e-04  1.61e-02  6.87e-05  2.96e-04  6.93e-01  
 11  +4.8451e-01  +6.6591e-01  1.81e-01  1.03e-04  1.61e-02  6.75e-05  2.96e-04  1.07e-02  
 12  +4.8135e-01  +6.4558e-01  1.64e-01  8.39e-05  1.31e-02  4.60e-05  2.43e-04  4.37e-01  
 13  +4.8029e-01  +6.3903e-01  1.59e-01  8.13e-05  1.27e-02  3.72e-05  2.34e-04  2.12e-01  
 14  +4.6744e-01  +5.7929e-01  1.12e-01  4.21e-05  6.57e-03  3.11e-05  1.22e-04  5.27e-01  
 15  +4.6436e-01  +5.6731e-01  1.03e-01  3.85e-05  6.00e-03  2.26e-05  1.13e-04  3.33e-01  
 16  +4.5778e-01  +5.4146e-01  8.37e-02  2.94e-05  4.58e-03  1.81e-05  8.69e-05  2.73e-01  
 17  +4.4147e-01  +4.7642e-01  3.50e-02  1.12e-05  1.74e-03  4.12e-06  3.44e-05  9.90e-01  
 18  +4.2830e-01  +4.3006e-01  1.76e-03  5.54e-07  8.62e-05  1.96e-07  1.77e-06  9.90e-01  
 19  +4.2751e-01  +4.2753e-01  1.77e-05  5.56e-09  8.65e-07  1.95e-09  1.78e-08  9.90e-01  
 20  +4.2750e-01  +4.2750e-01  1.77e-07  5.56e-11  8.65e-09  1.95e-11  1.78e-10  9.90e-01  
 21  +4.2750e-01  +4.2750e-01  1.77e-09  5.56e-13  8.65e-11  1.96e-13  1.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.2271ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:12 PM: Optimal value: 4.275e-01
(CVXPY) Oct 06 04:04:12 PM: Compilation took 2.040e-02 seconds
(CVXPY) Oct 06 04:04:12 PM: Solver (including time spent in interface) took 8.966e-02 seconds
Iteration: 2, Objective: 0.4275
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:12 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:12 PM: Finished problem compilation (took 2.776e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 30325
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5011e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8786e-01  +5.2589e+02  5.25e+02  4.02e-01  4.80e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3757e-01  +6.5103e+01  6.46e+01  1.52e-01  2.30e+01  1.32e-02  2.53e-01  8.71e-01  
  3  +5.0923e-01  +1.6343e+01  1.58e+01  1.04e-01  1.54e+01  3.38e-05  2.43e-01  1.87e-01  
  4  +5.0044e-01  +1.2739e+00  7.73e-01  7.49e-03  1.15e+00  7.71e-06  1.22e-01  8.65e-01  
  5  +5.0017e-01  +8.9732e-01  3.97e-01  3.80e-03  5.85e-01  6.20e-06  5.97e-02  6.12e-01  
  6  +4.9961e-01  +7.6241e-01  2.63e-01  1.61e-03  2.50e-01  2.51e-05  6.13e-03  9.87e-01  
  7  +4.9238e-01  +7.1202e-01  2.20e-01  1.50e-04  2.36e-02  2.82e-04  4.26e-04  9.31e-01  
  8  +4.8806e-01  +6.8821e-01  2.00e-01  1.14e-04  1.79e-02  2.51e-04  3.19e-04  3.72e-01  
  9  +4.8480e-01  +6.7685e-01  1.92e-01  9.64e-05  1.51e-02  1.96e-04  2.71e-04  3.62e-01  
 10  +4.8168e-01  +6.6113e-01  1.79e-01  8.70e-05  1.37e-02  1.06e-04  2.46e-04  4.35e-01  
 11  +4.7197e-01  +6.1938e-01  1.47e-01  6.10e-05  9.55e-03  8.04e-05  1.76e-04  3.94e-01  
 12  +4.4458e-01  +5.0328e-01  5.87e-02  2.10e-05  3.27e-03  4.98e-06  6.44e-05  8.88e-01  
 13  +4.4402e-01  +5.0238e-01  5.84e-02  2.02e-05  3.15e-03  5.25e-06  6.18e-05  9.41e-02  
 14  +4.4179e-01  +4.9380e-01  5.20e-02  1.81e-05  2.83e-03  5.85e-06  5.63e-05  4.97e-01  
 15  +4.3147e-01  +4.5896e-01  2.75e-02  9.11e-06  1.42e-03  3.18e-06  2.89e-05  5.50e-01  
 16  +4.2833e-01  +4.4763e-01  1.93e-02  6.24e-06  9.72e-04  2.75e-06  1.99e-05  7.51e-01  
 17  +4.2086e-01  +4.2277e-01  1.91e-03  6.16e-07  9.59e-05  2.76e-07  2.02e-06  9.41e-01  
 18  +4.2001e-01  +4.2005e-01  3.15e-05  1.01e-08  1.58e-06  4.60e-09  3.34e-08  9.87e-01  
 19  +4.2000e-01  +4.2000e-01  3.15e-07  1.01e-10  1.58e-08  4.60e-11  3.34e-10  9.90e-01  
 20  +4.2000e-01  +4.2000e-01  3.15e-09  1.01e-12  1.58e-10  4.61e-13  3.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.3358ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:12 PM: Optimal value: 4.200e-01
(CVXPY) Oct 06 04:04:12 PM: Compilation took 2.776e-02 seconds
(CVXPY) Oct 06 04:04:12 PM: Solver (including time spent in interface) took 9.762e-02 seconds
Iteration: 3, Objective: 0.4200
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:12 PM: Your problem has 2545 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:12 PM: Finished problem compilation (took 3.274e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2545
  constraints   = 5045
  nnz(P)        = 0
  nnz(A)        = 31133
  cones (total) = 1
    : Nonnegative = 1,  numel = 5045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5011e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8757e-01  +5.2623e+02  5.26e+02  4.02e-01  4.80e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3735e-01  +6.4896e+01  6.44e+01  1.52e-01  2.29e+01  1.33e-02  2.53e-01  8.73e-01  
  3  +5.0919e-01  +1.6303e+01  1.58e+01  1.03e-01  1.53e+01  3.40e-05  2.43e-01  1.91e-01  
  4  +5.0045e-01  +1.2962e+00  7.96e-01  7.71e-03  1.18e+00  7.79e-06  1.23e-01  8.57e-01  
  5  +5.0012e-01  +8.5370e-01  3.54e-01  3.37e-03  5.20e-01  6.66e-06  4.77e-02  7.68e-01  
  6  +4.9942e-01  +9.4278e-01  4.43e-01  2.24e-03  3.51e-01  3.83e-05  7.78e-03  9.10e-01  
  7  +4.8997e-01  +8.3599e-01  3.46e-01  2.05e-04  3.23e-02  3.59e-04  5.80e-04  9.26e-01  
  8  +4.8398e-01  +7.5292e-01  2.69e-01  1.46e-04  2.30e-02  1.87e-04  4.12e-04  5.06e-01  
  9  +4.7965e-01  +7.3022e-01  2.51e-01  1.16e-04  1.83e-02  1.84e-04  3.29e-04  2.49e-01  
 10  +4.7866e-01  +7.2154e-01  2.43e-01  1.16e-04  1.82e-02  1.70e-04  3.29e-04  1.37e-02  
 11  +4.7442e-01  +6.9535e-01  2.21e-01  9.80e-05  1.54e-02  1.38e-04  2.81e-04  2.55e-01  
 12  +4.7368e-01  +6.8708e-01  2.13e-01  9.73e-05  1.53e-02  1.23e-04  2.80e-04  4.19e-02  
 13  +4.6497e-01  +6.4255e-01  1.78e-01  7.49e-05  1.17e-02  9.62e-05  2.20e-04  2.63e-01  
 14  +4.5352e-01  +5.7915e-01  1.26e-01  5.02e-05  7.84e-03  3.61e-05  1.53e-04  6.04e-01  
 15  +4.3219e-01  +4.8665e-01  5.45e-02  1.97e-05  3.07e-03  1.07e-05  6.35e-05  7.16e-01  
 16  +4.3097e-01  +4.8206e-01  5.11e-02  1.82e-05  2.83e-03  9.91e-06  5.86e-05  1.39e-01  
 17  +4.2861e-01  +4.6881e-01  4.02e-02  1.39e-05  2.17e-03  5.68e-06  4.52e-05  9.90e-01  
 18  +4.2022e-01  +4.3978e-01  1.96e-02  6.63e-06  1.03e-03  2.81e-06  2.21e-05  5.64e-01  
 19  +4.1306e-01  +4.1486e-01  1.80e-03  6.08e-07  9.47e-05  2.53e-07  2.10e-06  9.48e-01  
 20  +4.1231e-01  +4.1233e-01  2.33e-05  7.86e-09  1.22e-06  3.26e-09  2.72e-08  9.89e-01  
 21  +4.1230e-01  +4.1230e-01  2.33e-07  7.86e-11  1.22e-08  3.26e-11  2.72e-10  9.90e-01  
 22  +4.1230e-01  +4.1230e-01  2.33e-09  7.86e-13  1.22e-10  3.27e-13  2.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.8541ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:12 PM: Optimal value: 4.123e-01
(CVXPY) Oct 06 04:04:12 PM: Compilation took 3.274e-02 seconds
(CVXPY) Oct 06 04:04:12 PM: Solver (including time spent in interface) took 9.622e-02 seconds
Iteration: 4, Objective: 0.4123
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:12 PM: Your problem has 2554 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:12 PM: Finished problem compilation (took 1.635e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2554
  constraints   = 5054
  nnz(P)        = 0
  nnz(A)        = 31565
  cones (total) = 1
    : Nonnegative = 1,  numel = 5054

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8740e-01  +5.2641e+02  5.26e+02  4.03e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3720e-01  +6.4749e+01  6.42e+01  1.51e-01  2.28e+01  1.33e-02  2.53e-01  8.75e-01  
  3  +5.0916e-01  +1.6273e+01  1.58e+01  1.03e-01  1.53e+01  3.41e-05  2.42e-01  1.93e-01  
  4  +5.0046e-01  +1.3046e+00  8.04e-01  7.80e-03  1.20e+00  7.82e-06  1.22e-01  8.55e-01  
  5  +5.0011e-01  +8.4297e-01  3.43e-01  3.26e-03  5.04e-01  7.05e-06  4.33e-02  8.06e-01  
  6  +4.9778e-01  +1.2517e+00  7.54e-01  1.50e-03  2.35e-01  1.15e-04  4.38e-03  9.90e-01  
  7  +4.8944e-01  +1.0604e+00  5.71e-01  3.78e-04  5.95e-02  2.92e-04  1.08e-03  7.57e-01  
  8  +4.8658e-01  +8.1409e-01  3.28e-01  1.99e-04  3.12e-02  4.54e-05  5.61e-04  8.03e-01  
  9  +4.8321e-01  +7.8950e-01  3.06e-01  1.59e-04  2.50e-02  4.60e-05  4.49e-04  2.65e-01  
 10  +4.8280e-01  +7.6787e-01  2.85e-01  1.54e-04  2.41e-02  3.72e-05  4.35e-04  1.86e-01  
 11  +4.8022e-01  +7.2862e-01  2.48e-01  1.30e-04  2.04e-02  2.63e-05  3.71e-04  4.85e-01  
 12  +4.6944e-01  +6.5886e-01  1.89e-01  8.61e-05  1.35e-02  1.84e-05  2.52e-04  6.88e-01  
 13  +4.3933e-01  +5.1854e-01  7.92e-02  3.02e-05  4.71e-03  6.70e-06  9.59e-05  7.17e-01  
 14  +4.3297e-01  +4.9365e-01  6.07e-02  2.22e-05  3.46e-03  6.01e-06  7.16e-05  4.67e-01  
 15  +4.2992e-01  +4.8229e-01  5.24e-02  1.88e-05  2.92e-03  5.67e-06  6.11e-05  3.63e-01  
 16  +4.1649e-01  +4.3167e-01  1.52e-02  5.32e-06  8.26e-04  1.94e-06  1.82e-05  9.49e-01  
 17  +4.1110e-01  +4.1257e-01  1.48e-03  5.13e-07  7.98e-05  1.88e-07  1.81e-06  9.21e-01  
 18  +4.1051e-01  +4.1053e-01  1.84e-05  6.37e-09  9.91e-07  2.34e-09  2.26e-08  9.89e-01  
 19  +4.1050e-01  +4.1050e-01  1.84e-07  6.37e-11  9.91e-09  2.34e-11  2.26e-10  9.90e-01  
 20  +4.1050e-01  +4.1050e-01  1.84e-09  6.37e-13  9.91e-11  2.35e-13  2.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.9228ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:12 PM: Optimal value: 4.105e-01
(CVXPY) Oct 06 04:04:12 PM: Compilation took 1.635e-02 seconds
(CVXPY) Oct 06 04:04:12 PM: Solver (including time spent in interface) took 9.508e-02 seconds
Iteration: 5, Objective: 0.4105
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:13 PM: Your problem has 2555 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:13 PM: Finished problem compilation (took 1.641e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2555
  constraints   = 5055
  nnz(P)        = 0
  nnz(A)        = 31604
  cones (total) = 1
    : Nonnegative = 1,  numel = 5055

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8737e-01  +5.2642e+02  5.26e+02  4.03e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3717e-01  +6.4724e+01  6.42e+01  1.51e-01  2.28e+01  1.33e-02  2.53e-01  8.75e-01  
  3  +5.0915e-01  +1.6269e+01  1.58e+01  1.03e-01  1.53e+01  3.41e-05  2.42e-01  1.94e-01  
  4  +5.0047e-01  +1.3227e+00  8.22e-01  7.98e-03  1.22e+00  7.86e-06  1.23e-01  8.45e-01  
  5  +5.0010e-01  +8.4113e-01  3.41e-01  3.24e-03  5.01e-01  7.09e-06  4.29e-02  8.30e-01  
  6  +4.9739e-01  +1.2546e+00  7.57e-01  1.36e-03  2.14e-01  1.29e-04  3.96e-03  9.90e-01  
  7  +4.8886e-01  +1.0581e+00  5.69e-01  3.74e-04  5.89e-02  2.93e-04  1.07e-03  7.35e-01  
  8  +4.8577e-01  +8.0271e-01  3.17e-01  1.86e-04  2.93e-02  4.02e-05  5.26e-04  8.38e-01  
  9  +4.8319e-01  +7.8535e-01  3.02e-01  1.56e-04  2.45e-02  4.10e-05  4.39e-04  2.32e-01  
 10  +4.8252e-01  +7.6535e-01  2.83e-01  1.50e-04  2.36e-02  3.43e-05  4.25e-04  1.68e-01  
 11  +4.7850e-01  +7.0859e-01  2.30e-01  1.19e-04  1.87e-02  2.07e-05  3.42e-04  6.83e-01  
 12  +4.6170e-01  +6.2054e-01  1.59e-01  6.81e-05  1.06e-02  1.49e-05  2.03e-04  6.09e-01  
 13  +4.3125e-01  +4.8541e-01  5.42e-02  2.05e-05  3.19e-03  3.99e-06  6.69e-05  7.61e-01  
 14  +4.2978e-01  +4.8045e-01  5.07e-02  1.86e-05  2.90e-03  4.01e-06  6.08e-05  1.56e-01  
 15  +4.2623e-01  +4.6769e-01  4.15e-02  1.52e-05  2.36e-03  3.95e-06  5.05e-05  4.65e-01  
 16  +4.1936e-01  +4.4199e-01  2.26e-02  8.07e-06  1.26e-03  2.44e-06  2.74e-05  6.19e-01  
 17  +4.1264e-01  +4.1810e-01  5.46e-03  1.90e-06  2.96e-04  6.25e-07  6.66e-06  8.28e-01  
 18  +4.1054e-01  +4.1063e-01  9.03e-05  3.13e-08  4.87e-06  1.06e-08  1.11e-07  9.88e-01  
 19  +4.1050e-01  +4.1050e-01  9.03e-07  3.13e-10  4.87e-08  1.06e-10  1.11e-09  9.90e-01  
 20  +4.1050e-01  +4.1050e-01  9.03e-09  3.13e-12  4.87e-10  1.06e-12  1.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 82.0691ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:13 PM: Optimal value: 4.105e-01
(CVXPY) Oct 06 04:04:13 PM: Compilation took 1.641e-02 seconds
(CVXPY) Oct 06 04:04:13 PM: Solver (including time spent in interface) took 9.396e-02 seconds
Iteration: 6, Objective: 0.4105
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:04:13 PM: Your problem has 2556 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:04:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:04:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:04:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:04:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:04:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:04:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:04:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:04:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:04:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:04:13 PM: Finished problem compilation (took 2.030e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2556
  constraints   = 5056
  nnz(P)        = 0
  nnz(A)        = 31654
  cones (total) = 1
    : Nonnegative = 1,  numel = 5056

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8735e-01  +5.2646e+02  5.26e+02  4.03e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3717e-01  +6.4722e+01  6.42e+01  1.51e-01  2.28e+01  1.33e-02  2.53e-01  8.76e-01  
  3  +5.0915e-01  +1.6269e+01  1.58e+01  1.03e-01  1.53e+01  3.41e-05  2.42e-01  1.94e-01  
  4  +5.0047e-01  +1.3226e+00  8.22e-01  7.98e-03  1.22e+00  7.86e-06  1.23e-01  8.45e-01  
  5  +5.0011e-01  +8.4794e-01  3.48e-01  3.31e-03  5.11e-01  7.11e-06  4.38e-02  8.19e-01  
  6  +4.9767e-01  +1.2324e+00  7.35e-01  1.44e-03  2.26e-01  1.18e-04  4.20e-03  9.90e-01  
  7  +4.8891e-01  +1.0401e+00  5.51e-01  3.57e-04  5.62e-02  2.99e-04  1.02e-03  7.61e-01  
  8  +4.8802e-01  +8.8553e-01  3.98e-01  2.50e-04  3.93e-02  1.17e-04  7.03e-04  5.66e-01  
  9  +4.8092e-01  +8.2238e-01  3.41e-01  1.68e-04  2.64e-02  1.15e-04  4.76e-04  3.63e-01  
 10  +4.8079e-01  +8.0625e-01  3.25e-01  1.66e-04  2.61e-02  9.89e-05  4.71e-04  7.55e-02  
 11  +4.8142e-01  +7.4850e-01  2.67e-01  1.42e-04  2.23e-02  3.51e-05  4.05e-04  6.02e-01  
 12  +4.6938e-01  +6.7676e-01  2.07e-01  9.39e-05  1.47e-02  2.77e-05  2.76e-04  3.95e-01  
 13  +4.5738e-01  +6.1130e-01  1.54e-01  6.54e-05  1.02e-02  1.79e-05  1.99e-04  4.64e-01  
 14  +4.3081e-01  +4.8727e-01  5.65e-02  2.15e-05  3.34e-03  5.07e-06  7.05e-05  7.78e-01  
 15  +4.2872e-01  +4.7957e-01  5.09e-02  1.88e-05  2.92e-03  4.78e-06  6.17e-05  1.82e-01  
 16  +4.2603e-01  +4.6834e-01  4.23e-02  1.57e-05  2.45e-03  4.30e-06  5.37e-05  4.48e-01  
 17  +4.2027e-01  +4.4465e-01  2.44e-02  8.93e-06  1.39e-03  2.91e-06  3.09e-05  7.49e-01  
 18  +4.1772e-01  +4.3675e-01  1.90e-02  6.72e-06  1.05e-03  2.41e-06  2.31e-05  3.90e-01  
 19  +4.1102e-01  +4.1256e-01  1.55e-03  5.44e-07  8.46e-05  1.87e-07  1.94e-06  9.27e-01  
 20  +4.1041e-01  +4.1044e-01  2.71e-05  9.54e-09  1.48e-06  3.21e-09  3.42e-08  9.84e-01  
 21  +4.1040e-01  +4.1040e-01  2.71e-07  9.54e-11  1.48e-08  3.20e-11  3.42e-10  9.90e-01  
 22  +4.1040e-01  +4.1040e-01  2.71e-09  9.54e-13  1.48e-10  3.20e-13  3.42e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 92.496ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:04:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:04:13 PM: Optimal value: 4.104e-01
(CVXPY) Oct 06 04:04:13 PM: Compilation took 2.030e-02 seconds
(CVXPY) Oct 06 04:04:13 PM: Solver (including time spent in interface) took 9.990e-02 seconds
FULL MODEL:
  Accruacy: 0.5892
  Our objective: 0.17840000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.1452)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.0088)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.0064)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 8.07172679901123
Best over terms:
  Our final objective: 0.1452
    Its accruacy: 0.5726
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1452
  Highest accruacy: 0.5726
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

