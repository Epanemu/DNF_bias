Command:
python test_script.py -s constant_subclass -d 8 -n 10000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 8.

Computed total variation: 0.20479999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:09 PM: Your problem has 5017 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:09 PM: Finished problem compilation (took 6.274e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5017
  constraints   = 10017
  nnz(P)        = 0
  nnz(A)        = 55017
  cones (total) = 1
    : Nonnegative = 1,  numel = 10017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.11e+02  1.00e+00  1.00e+00   ------   
  1  +5.8416e-01  +1.0695e+03  1.07e+03  4.19e-01  7.08e+01  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3484e-01  +1.2652e+02  1.26e+02  1.63e-01  3.54e+01  1.47e-02  2.66e-01  9.00e-01  
  3  +5.0931e-01  +3.2735e+01  3.22e+01  1.22e-01  2.62e+01  3.95e-05  2.53e-01  2.15e-01  
  4  +5.0082e-01  +2.5853e+00  2.08e+00  1.42e-02  3.09e+00  5.49e-06  1.59e-01  6.72e-01  
  5  +5.0011e-01  +9.1147e-01  4.11e-01  2.76e-03  6.12e-01  2.84e-05  7.55e-02  9.90e-01  
  6  +5.0000e-01  +6.2745e-01  1.27e-01  8.41e-04  1.87e-01  2.97e-05  1.24e-02  8.53e-01  
  7  +4.9809e-01  +6.9791e-01  2.00e-01  1.59e-04  3.56e-02  1.12e-03  4.82e-04  9.77e-01  
  8  +4.9374e-01  +6.7548e-01  1.82e-01  5.71e-05  1.28e-02  2.58e-03  1.71e-04  6.71e-01  
  9  +4.8494e-01  +5.9613e-01  1.11e-01  3.64e-05  8.14e-03  5.21e-04  1.15e-04  5.60e-01  
 10  +4.7788e-01  +5.5826e-01  8.04e-02  2.30e-05  5.15e-03  2.70e-04  7.60e-05  4.97e-01  
 11  +4.7087e-01  +5.2196e-01  5.11e-02  1.31e-05  2.92e-03  2.87e-06  4.55e-05  9.06e-01  
 12  +4.6139e-01  +4.7823e-01  1.68e-02  3.84e-06  8.57e-04  8.20e-07  1.47e-05  7.23e-01  
 13  +4.5948e-01  +4.6962e-01  1.01e-02  2.20e-06  4.91e-04  4.74e-07  8.76e-06  9.90e-01  
 14  +4.5627e-01  +4.5648e-01  2.12e-04  4.41e-08  9.84e-06  8.98e-09  1.87e-07  9.82e-01  
 15  +4.5620e-01  +4.5620e-01  2.12e-06  4.41e-10  9.84e-08  8.99e-11  1.87e-09  9.90e-01  
 16  +4.5620e-01  +4.5620e-01  2.12e-08  4.41e-12  9.85e-10  9.26e-13  1.93e-11  9.90e-01  
 17  +4.5620e-01  +4.5620e-01  2.12e-10  4.41e-14  9.85e-12  9.54e-15  1.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 118.7982ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:09 PM: Optimal value: 4.562e-01
(CVXPY) Oct 06 04:11:09 PM: Compilation took 6.274e-02 seconds
(CVXPY) Oct 06 04:11:09 PM: Solver (including time spent in interface) took 1.409e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:09 PM: Your problem has 5027 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:09 PM: Finished problem compilation (took 3.161e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5027
  constraints   = 10027
  nnz(P)        = 0
  nnz(A)        = 63875
  cones (total) = 1
    : Nonnegative = 1,  numel = 10027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.15e+02  1.00e+00  1.00e+00   ------   
  1  +5.8410e-01  +1.0700e+03  1.07e+03  4.19e-01  7.35e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3467e-01  +1.2623e+02  1.26e+02  1.63e-01  3.66e+01  1.48e-02  2.66e-01  9.01e-01  
  3  +5.0922e-01  +3.2563e+01  3.21e+01  1.22e-01  2.71e+01  3.96e-05  2.53e-01  2.20e-01  
  4  +5.0078e-01  +2.4753e+00  1.97e+00  1.34e-02  3.04e+00  5.61e-06  1.53e-01  7.08e-01  
  5  +5.0013e-01  +9.2490e-01  4.25e-01  2.85e-03  6.55e-01  2.39e-05  6.40e-02  9.68e-01  
  6  +5.0008e-01  +8.8372e-01  3.84e-01  2.44e-03  5.61e-01  4.14e-05  1.97e-02  9.05e-01  
  7  +4.9852e-01  +7.5732e-01  2.59e-01  1.74e-04  4.06e-02  8.92e-04  4.92e-04  9.82e-01  
  8  +4.9543e-01  +7.3610e-01  2.41e-01  7.52e-05  1.76e-02  1.72e-03  2.11e-04  6.24e-01  
  9  +4.9221e-01  +7.0936e-01  2.17e-01  6.40e-05  1.50e-02  1.38e-03  1.82e-04  2.39e-01  
 10  +4.8960e-01  +6.9056e-01  2.01e-01  5.50e-05  1.28e-02  1.07e-03  1.57e-04  2.86e-01  
 11  +4.8745e-01  +6.7578e-01  1.88e-01  5.00e-05  1.17e-02  8.36e-04  1.44e-04  2.16e-01  
 12  +4.8330e-01  +6.4307e-01  1.60e-01  4.40e-05  1.02e-02  1.56e-04  1.27e-04  6.19e-01  
 13  +4.6873e-01  +5.6927e-01  1.01e-01  2.14e-05  4.98e-03  1.72e-05  6.28e-05  9.22e-01  
 14  +4.6376e-01  +5.5085e-01  8.71e-02  1.58e-05  3.67e-03  1.63e-05  4.61e-05  2.85e-01  
 15  +4.6261e-01  +5.4695e-01  8.43e-02  1.57e-05  3.65e-03  1.52e-05  4.61e-05  9.45e-03  
 16  +4.4651e-01  +4.9590e-01  4.94e-02  7.77e-06  1.80e-03  3.15e-06  2.34e-05  9.25e-01  
 17  +4.4497e-01  +4.8891e-01  4.39e-02  6.77e-06  1.57e-03  2.96e-06  2.04e-05  2.72e-01  
 18  +4.4390e-01  +4.8057e-01  3.67e-02  5.96e-06  1.38e-03  2.88e-06  1.83e-05  7.26e-01  
 19  +4.3327e-01  +4.4417e-01  1.09e-02  1.72e-06  3.98e-04  7.93e-07  5.42e-06  7.29e-01  
 20  +4.2946e-01  +4.3075e-01  1.28e-03  2.01e-07  4.65e-05  9.84e-08  6.40e-07  9.49e-01  
 21  +4.2891e-01  +4.2892e-01  1.30e-05  2.04e-09  4.71e-07  9.95e-10  6.49e-09  9.90e-01  
 22  +4.2890e-01  +4.2890e-01  1.30e-07  2.04e-11  4.72e-09  9.95e-12  6.49e-11  9.90e-01  
 23  +4.2890e-01  +4.2890e-01  1.30e-09  2.04e-13  4.73e-11  9.95e-14  6.49e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 170.6346ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:09 PM: Optimal value: 4.289e-01
(CVXPY) Oct 06 04:11:09 PM: Compilation took 3.161e-02 seconds
(CVXPY) Oct 06 04:11:09 PM: Solver (including time spent in interface) took 1.890e-01 seconds
Iteration: 2, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:10 PM: Your problem has 5037 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:10 PM: Finished problem compilation (took 4.711e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5037
  constraints   = 10037
  nnz(P)        = 0
  nnz(A)        = 68112
  cones (total) = 1
    : Nonnegative = 1,  numel = 10037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8402e-01  +1.0701e+03  1.07e+03  4.20e-01  7.41e+01  3.82e-03  5.61e-01  5.97e-01  
  2  +5.3459e-01  +1.2607e+02  1.26e+02  1.63e-01  3.69e+01  1.48e-02  2.66e-01  9.02e-01  
  3  +5.0920e-01  +3.2517e+01  3.20e+01  1.22e-01  2.73e+01  3.97e-05  2.52e-01  2.21e-01  
  4  +5.0078e-01  +2.4698e+00  1.97e+00  1.34e-02  3.06e+00  5.63e-06  1.52e-01  7.12e-01  
  5  +5.0018e-01  +1.0560e+00  5.56e-01  3.74e-03  8.64e-01  2.28e-05  7.43e-02  8.42e-01  
  6  +5.0008e-01  +8.2878e-01  3.29e-01  2.10e-03  4.88e-01  3.17e-05  1.79e-02  9.90e-01  
  7  +4.9891e-01  +8.0484e-01  3.06e-01  2.34e-04  5.52e-02  6.77e-04  6.52e-04  9.72e-01  
  8  +4.9617e-01  +7.7945e-01  2.83e-01  8.84e-05  2.09e-02  1.53e-03  2.42e-04  6.71e-01  
  9  +4.9246e-01  +7.4569e-01  2.53e-01  6.49e-05  1.53e-02  1.41e-03  1.79e-04  3.68e-01  
 10  +4.9150e-01  +7.3429e-01  2.43e-01  6.44e-05  1.52e-02  1.22e-03  1.78e-04  5.92e-02  
 11  +4.8335e-01  +6.7497e-01  1.92e-01  4.44e-05  1.04e-02  5.84e-04  1.25e-04  5.78e-01  
 12  +4.8198e-01  +6.6818e-01  1.86e-01  4.22e-05  9.93e-03  4.92e-04  1.19e-04  1.56e-01  
 13  +4.7822e-01  +6.4715e-01  1.69e-01  3.96e-05  9.31e-03  2.27e-04  1.13e-04  3.79e-01  
 14  +4.6053e-01  +5.7445e-01  1.14e-01  2.16e-05  5.07e-03  1.54e-04  6.44e-05  4.69e-01  
 15  +4.4358e-01  +5.0736e-01  6.38e-02  1.15e-05  2.70e-03  1.54e-06  3.62e-05  8.81e-01  
 16  +4.2531e-01  +4.4152e-01  1.62e-02  2.77e-06  6.46e-04  5.00e-07  9.21e-06  8.03e-01  
 17  +4.2176e-01  +4.2899e-01  7.23e-03  1.22e-06  2.84e-04  3.60e-07  4.10e-06  7.64e-01  
 18  +4.1876e-01  +4.1891e-01  1.44e-04  2.42e-08  5.65e-06  7.16e-09  8.27e-08  9.81e-01  
 19  +4.1870e-01  +4.1870e-01  1.45e-06  2.43e-10  5.67e-08  7.18e-11  8.29e-10  9.90e-01  
 20  +4.1870e-01  +4.1870e-01  1.45e-08  2.43e-12  5.67e-10  7.20e-13  8.31e-12  9.90e-01  
 21  +4.1870e-01  +4.1870e-01  1.45e-10  2.42e-14  5.67e-12  7.21e-15  8.32e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 163.1437ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:10 PM: Optimal value: 4.187e-01
(CVXPY) Oct 06 04:11:10 PM: Compilation took 4.711e-02 seconds
(CVXPY) Oct 06 04:11:10 PM: Solver (including time spent in interface) took 1.882e-01 seconds
Iteration: 3, Objective: 0.4187
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:10 PM: Your problem has 5047 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:10 PM: Finished problem compilation (took 4.681e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5047
  constraints   = 10047
  nnz(P)        = 0
  nnz(A)        = 69263
  cones (total) = 1
    : Nonnegative = 1,  numel = 10047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8393e-01  +1.0702e+03  1.07e+03  4.20e-01  7.41e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3451e-01  +1.2592e+02  1.25e+02  1.63e-01  3.68e+01  1.48e-02  2.66e-01  9.03e-01  
  3  +5.0918e-01  +3.2471e+01  3.20e+01  1.22e-01  2.72e+01  3.97e-05  2.52e-01  2.23e-01  
  4  +5.0078e-01  +2.4663e+00  1.97e+00  1.34e-02  3.06e+00  5.65e-06  1.51e-01  7.15e-01  
  5  +5.0022e-01  +1.1642e+00  6.64e-01  4.47e-03  1.03e+00  2.43e-05  7.94e-02  8.24e-01  
  6  +5.0012e-01  +9.4163e-01  4.42e-01  2.91e-03  6.75e-01  2.97e-05  3.18e-02  6.95e-01  
  7  +4.9976e-01  +8.4514e-01  3.45e-01  7.84e-04  1.85e-01  2.15e-04  2.40e-03  9.79e-01  
  8  +4.9727e-01  +8.2987e-01  3.33e-01  1.25e-04  2.96e-02  1.39e-03  3.44e-04  8.60e-01  
  9  +4.9369e-01  +7.8283e-01  2.89e-01  8.52e-05  2.01e-02  1.32e-03  2.35e-04  4.30e-01  
 10  +4.9206e-01  +7.6066e-01  2.69e-01  7.24e-05  1.71e-02  9.60e-04  1.99e-04  3.64e-01  
 11  +4.9128e-01  +7.5287e-01  2.62e-01  7.21e-05  1.70e-02  8.80e-04  1.99e-04  2.97e-02  
 12  +4.8691e-01  +7.2427e-01  2.37e-01  5.79e-05  1.37e-02  7.60e-04  1.61e-04  2.87e-01  
 13  +4.8440e-01  +7.0099e-01  2.17e-01  5.48e-05  1.29e-02  3.19e-04  1.56e-04  4.04e-01  
 14  +4.8366e-01  +6.9665e-01  2.13e-01  5.44e-05  1.28e-02  2.91e-04  1.56e-04  5.13e-02  
 15  +4.6946e-01  +6.2749e-01  1.58e-01  3.38e-05  7.94e-03  1.93e-04  1.00e-04  4.56e-01  
 16  +4.4953e-01  +5.4167e-01  9.21e-02  1.79e-05  4.18e-03  8.13e-05  5.56e-05  5.40e-01  
 17  +4.4914e-01  +5.3991e-01  9.08e-02  1.76e-05  4.11e-03  7.20e-05  5.47e-05  1.12e-01  
 18  +4.3091e-01  +4.7046e-01  3.96e-02  7.11e-06  1.66e-03  9.90e-06  2.34e-05  8.20e-01  
 19  +4.2966e-01  +4.6582e-01  3.62e-02  6.43e-06  1.50e-03  8.22e-06  2.13e-05  2.14e-01  
 20  +4.2424e-01  +4.4597e-01  2.17e-02  3.80e-06  8.86e-04  4.05e-06  1.28e-05  5.56e-01  
 21  +4.1988e-01  +4.2989e-01  1.00e-02  1.73e-06  4.03e-04  9.00e-07  5.92e-06  9.35e-01  
 22  +4.1587e-01  +4.1628e-01  4.07e-04  7.03e-08  1.64e-05  2.95e-08  2.46e-07  9.90e-01  
 23  +4.1570e-01  +4.1571e-01  4.19e-06  7.23e-10  1.69e-07  3.04e-10  2.53e-09  9.90e-01  
 24  +4.1570e-01  +4.1570e-01  4.19e-08  7.23e-12  1.69e-09  3.04e-12  2.53e-11  9.90e-01  
 25  +4.1570e-01  +4.1570e-01  4.19e-10  7.24e-14  1.69e-11  3.04e-14  2.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.6768ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:10 PM: Optimal value: 4.157e-01
(CVXPY) Oct 06 04:11:10 PM: Compilation took 4.681e-02 seconds
(CVXPY) Oct 06 04:11:10 PM: Solver (including time spent in interface) took 2.188e-01 seconds
Iteration: 4, Objective: 0.4157
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:10 PM: Your problem has 5057 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:11 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5057
  constraints   = 10057
  nnz(P)        = 0
  nnz(A)        = 70265
  cones (total) = 1
    : Nonnegative = 1,  numel = 10057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0018e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8389e-01  +1.0703e+03  1.07e+03  4.20e-01  7.41e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3447e-01  +1.2583e+02  1.25e+02  1.63e-01  3.67e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0917e-01  +3.2443e+01  3.19e+01  1.22e-01  2.72e+01  3.98e-05  2.52e-01  2.24e-01  
  4  +5.0079e-01  +2.5226e+00  2.02e+00  1.38e-02  3.14e+00  5.72e-06  1.52e-01  7.03e-01  
  5  +5.0019e-01  +1.1507e+00  6.51e-01  4.36e-03  1.01e+00  2.33e-05  8.08e-02  8.52e-01  
  6  +5.0005e-01  +8.6050e-01  3.60e-01  2.33e-03  5.40e-01  3.02e-05  2.15e-02  8.63e-01  
  7  +4.9845e-01  +8.8676e-01  3.88e-01  3.69e-04  8.72e-02  5.37e-04  1.06e-03  9.90e-01  
  8  +4.9377e-01  +8.3250e-01  3.39e-01  1.18e-04  2.79e-02  1.35e-03  3.29e-04  7.03e-01  
  9  +4.9236e-01  +8.1536e-01  3.23e-01  1.00e-04  2.37e-02  1.28e-03  2.78e-04  2.30e-01  
 10  +4.9068e-01  +7.7058e-01  2.80e-01  7.72e-05  1.82e-02  6.73e-04  2.13e-04  5.52e-01  
 11  +4.8917e-01  +7.5628e-01  2.67e-01  7.63e-05  1.80e-02  5.67e-04  2.12e-04  6.67e-02  
 12  +4.8470e-01  +7.2857e-01  2.44e-01  6.15e-05  1.45e-02  5.12e-04  1.72e-04  2.57e-01  
 13  +4.8013e-01  +6.8952e-01  2.09e-01  5.15e-05  1.21e-02  1.69e-04  1.46e-04  5.61e-01  
 14  +4.7828e-01  +6.7906e-01  2.01e-01  5.02e-05  1.18e-02  1.30e-04  1.45e-04  1.48e-01  
 15  +4.5569e-01  +5.6888e-01  1.13e-01  2.28e-05  5.35e-03  1.53e-06  6.94e-05  9.41e-01  
 16  +4.4350e-01  +5.2250e-01  7.90e-02  1.52e-05  3.54e-03  1.63e-06  4.80e-05  4.18e-01  
 17  +4.3972e-01  +5.0762e-01  6.79e-02  1.25e-05  2.92e-03  4.22e-06  4.01e-05  9.42e-01  
 18  +4.3097e-01  +4.7486e-01  4.39e-02  7.88e-06  1.84e-03  2.87e-06  2.60e-05  6.92e-01  
 19  +4.2393e-01  +4.4946e-01  2.55e-02  4.49e-06  1.05e-03  1.69e-06  1.52e-05  5.19e-01  
 20  +4.1839e-01  +4.2884e-01  1.04e-02  1.82e-06  4.24e-04  7.26e-07  6.28e-06  9.90e-01  
 21  +4.1423e-01  +4.1452e-01  2.94e-04  5.12e-08  1.19e-05  1.99e-08  1.81e-07  9.90e-01  
 22  +4.1410e-01  +4.1410e-01  2.94e-06  5.12e-10  1.19e-07  1.99e-10  1.82e-09  9.90e-01  
 23  +4.1410e-01  +4.1410e-01  2.94e-08  5.13e-12  1.20e-09  1.99e-12  1.82e-11  9.90e-01  
 24  +4.1410e-01  +4.1410e-01  2.95e-10  5.14e-14  1.20e-11  1.99e-14  1.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 202.4709ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:11 PM: Optimal value: 4.141e-01
(CVXPY) Oct 06 04:11:11 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:11:11 PM: Solver (including time spent in interface) took 2.192e-01 seconds
Iteration: 5, Objective: 0.4141
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:11 PM: Your problem has 5067 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:11 PM: Finished problem compilation (took 4.630e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5067
  constraints   = 10067
  nnz(P)        = 0
  nnz(A)        = 70891
  cones (total) = 1
    : Nonnegative = 1,  numel = 10067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0018e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8385e-01  +1.0703e+03  1.07e+03  4.20e-01  7.40e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3443e-01  +1.2574e+02  1.25e+02  1.63e-01  3.66e+01  1.48e-02  2.65e-01  9.04e-01  
  3  +5.0916e-01  +3.2417e+01  3.19e+01  1.22e-01  2.71e+01  3.98e-05  2.52e-01  2.25e-01  
  4  +5.0081e-01  +2.5931e+00  2.09e+00  1.43e-02  3.25e+00  5.81e-06  1.54e-01  6.88e-01  
  5  +5.0016e-01  +1.1218e+00  6.22e-01  4.16e-03  9.62e-01  2.00e-05  8.33e-02  8.11e-01  
  6  +5.0005e-01  +9.0900e-01  4.09e-01  2.66e-03  6.18e-01  2.52e-05  2.79e-02  7.78e-01  
  7  +4.9839e-01  +8.7211e-01  3.74e-01  4.59e-04  1.08e-01  3.67e-04  1.34e-03  9.90e-01  
  8  +4.9365e-01  +8.2334e-01  3.30e-01  1.42e-04  3.34e-02  9.97e-04  3.98e-04  7.08e-01  
  9  +4.9233e-01  +8.1190e-01  3.20e-01  1.19e-04  2.80e-02  1.03e-03  3.31e-04  2.21e-01  
 10  +4.9420e-01  +7.7212e-01  2.78e-01  1.03e-04  2.44e-02  1.73e-04  2.86e-04  7.31e-01  
 11  +4.9326e-01  +7.4962e-01  2.56e-01  9.29e-05  2.19e-02  9.56e-05  2.57e-04  4.49e-01  
 12  +4.9002e-01  +7.3366e-01  2.44e-01  6.92e-05  1.63e-02  9.76e-05  1.93e-04  3.79e-01  
 13  +4.8771e-01  +7.1764e-01  2.30e-01  6.40e-05  1.51e-02  8.34e-05  1.79e-04  1.56e-01  
 14  +4.8408e-01  +6.9987e-01  2.16e-01  5.98e-05  1.41e-02  3.80e-05  1.70e-04  4.87e-01  
 15  +4.7681e-01  +6.6501e-01  1.88e-01  4.71e-05  1.11e-02  3.05e-05  1.36e-04  3.02e-01  
 16  +4.5388e-01  +5.6502e-01  1.11e-01  2.23e-05  5.22e-03  9.00e-06  6.84e-05  8.03e-01  
 17  +4.4724e-01  +5.3995e-01  9.27e-02  1.82e-05  4.25e-03  6.56e-06  5.70e-05  4.36e-01  
 18  +4.3884e-01  +5.0848e-01  6.96e-02  1.31e-05  3.06e-03  4.07e-06  4.23e-05  9.90e-01  
 19  +4.2299e-01  +4.4938e-01  2.64e-02  4.75e-06  1.11e-03  1.47e-06  1.63e-05  6.99e-01  
 20  +4.2036e-01  +4.3976e-01  1.94e-02  3.46e-06  8.07e-04  1.10e-06  1.20e-05  3.16e-01  
 21  +4.1797e-01  +4.3027e-01  1.23e-02  2.17e-06  5.05e-04  8.10e-07  7.55e-06  9.17e-01  
 22  +4.1350e-01  +4.1494e-01  1.44e-03  2.54e-07  5.92e-05  9.44e-08  9.08e-07  9.31e-01  
 23  +4.1291e-01  +4.1292e-01  1.55e-05  2.72e-09  6.35e-07  1.01e-09  9.77e-09  9.90e-01  
 24  +4.1290e-01  +4.1290e-01  1.55e-07  2.72e-11  6.35e-09  1.01e-11  9.77e-11  9.90e-01  
 25  +4.1290e-01  +4.1290e-01  1.55e-09  2.73e-13  6.36e-11  1.01e-13  9.77e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 199.2782ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:11 PM: Optimal value: 4.129e-01
(CVXPY) Oct 06 04:11:11 PM: Compilation took 4.630e-02 seconds
(CVXPY) Oct 06 04:11:11 PM: Solver (including time spent in interface) took 2.190e-01 seconds
Iteration: 6, Objective: 0.4129
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:11 PM: Your problem has 5077 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:11 PM: Finished problem compilation (took 6.355e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5077
  constraints   = 10077
  nnz(P)        = 0
  nnz(A)        = 71675
  cones (total) = 1
    : Nonnegative = 1,  numel = 10077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0018e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8375e-01  +1.0705e+03  1.07e+03  4.21e-01  7.40e+01  3.82e-03  5.62e-01  5.97e-01  
  2  +5.3434e-01  +1.2558e+02  1.25e+02  1.63e-01  3.65e+01  1.48e-02  2.65e-01  9.05e-01  
  3  +5.0914e-01  +3.2376e+01  3.19e+01  1.21e-01  2.71e+01  3.99e-05  2.51e-01  2.27e-01  
  4  +5.0084e-01  +2.7051e+00  2.20e+00  1.50e-02  3.42e+00  5.95e-06  1.57e-01  6.67e-01  
  5  +5.0013e-01  +1.1221e+00  6.22e-01  4.15e-03  9.60e-01  1.74e-05  8.82e-02  7.75e-01  
  6  +5.0003e-01  +9.4954e-01  4.50e-01  2.95e-03  6.84e-01  2.07e-05  3.61e-02  6.76e-01  
  7  +4.9855e-01  +8.3766e-01  3.39e-01  6.06e-04  1.43e-01  2.22e-04  1.83e-03  9.90e-01  
  8  +4.9114e-01  +7.7229e-01  2.81e-01  1.10e-04  2.60e-02  1.00e-03  3.09e-04  8.35e-01  
  9  +4.9056e-01  +7.7644e-01  2.86e-01  9.16e-05  2.16e-02  1.06e-03  2.54e-04  3.00e-01  
 10  +4.8951e-01  +7.5069e-01  2.61e-01  7.86e-05  1.85e-02  3.53e-04  2.18e-04  6.57e-01  
 11  +4.8589e-01  +7.2992e-01  2.44e-01  6.77e-05  1.60e-02  1.71e-04  1.89e-04  5.35e-01  
 12  +4.7783e-01  +6.8668e-01  2.09e-01  5.33e-05  1.25e-02  4.42e-05  1.53e-04  6.87e-01  
 13  +4.5771e-01  +5.9666e-01  1.39e-01  2.92e-05  6.84e-03  2.20e-05  8.87e-05  5.95e-01  
 14  +4.4023e-01  +5.2496e-01  8.47e-02  1.68e-05  3.93e-03  9.98e-06  5.43e-05  5.17e-01  
 15  +4.3730e-01  +5.1365e-01  7.63e-02  1.49e-05  3.48e-03  8.51e-06  4.87e-05  1.93e-01  
 16  +4.2143e-01  +4.5150e-01  3.01e-02  5.55e-06  1.29e-03  1.66e-06  1.92e-05  9.90e-01  
 17  +4.1651e-01  +4.3337e-01  1.69e-02  3.08e-06  7.18e-04  9.42e-07  1.09e-05  4.75e-01  
 18  +4.1485e-01  +4.2657e-01  1.17e-02  2.12e-06  4.95e-04  7.50e-07  7.57e-06  9.90e-01  
 19  +4.1211e-01  +4.1707e-01  4.97e-03  8.99e-07  2.10e-04  3.18e-07  3.26e-06  6.13e-01  
 20  +4.1013e-01  +4.1020e-01  6.85e-05  1.24e-08  2.90e-06  4.33e-09  4.56e-08  9.87e-01  
 21  +4.1010e-01  +4.1010e-01  6.85e-07  1.24e-10  2.90e-08  4.33e-11  4.56e-10  9.90e-01  
 22  +4.1010e-01  +4.1010e-01  6.86e-09  1.24e-12  2.90e-10  4.33e-13  4.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 191.4727ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:12 PM: Optimal value: 4.101e-01
(CVXPY) Oct 06 04:11:12 PM: Compilation took 6.355e-02 seconds
(CVXPY) Oct 06 04:11:12 PM: Solver (including time spent in interface) took 2.044e-01 seconds
Iteration: 7, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:12 PM: Your problem has 5087 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:12 PM: Finished problem compilation (took 6.278e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5087
  constraints   = 10087
  nnz(P)        = 0
  nnz(A)        = 72362
  cones (total) = 1
    : Nonnegative = 1,  numel = 10087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0017e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8362e-01  +1.0709e+03  1.07e+03  4.21e-01  7.39e+01  3.81e-03  5.62e-01  5.97e-01  
  2  +5.3424e-01  +1.2544e+02  1.25e+02  1.63e-01  3.65e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0912e-01  +3.2339e+01  3.18e+01  1.21e-01  2.70e+01  4.00e-05  2.51e-01  2.29e-01  
  4  +5.0078e-01  +2.4763e+00  1.98e+00  1.35e-02  3.07e+00  5.70e-06  1.49e-01  7.18e-01  
  5  +5.0025e-01  +1.2462e+00  7.46e-01  5.02e-03  1.16e+00  3.05e-05  7.43e-02  9.34e-01  
  6  +5.0003e-01  +8.0662e-01  3.07e-01  1.85e-03  4.30e-01  5.28e-05  1.14e-02  9.31e-01  
  7  +4.9841e-01  +8.2509e-01  3.27e-01  2.27e-04  5.37e-02  9.41e-04  6.29e-04  9.58e-01  
  8  +4.9583e-01  +8.0659e-01  3.11e-01  1.14e-04  2.71e-02  1.63e-03  3.13e-04  5.51e-01  
  9  +4.9357e-01  +7.8827e-01  2.95e-01  8.83e-05  2.09e-02  1.50e-03  2.41e-04  4.02e-01  
 10  +4.9192e-01  +7.7245e-01  2.81e-01  8.32e-05  1.96e-02  1.04e-03  2.28e-04  2.80e-01  
 11  +4.8709e-01  +7.4560e-01  2.59e-01  6.56e-05  1.55e-02  8.91e-04  1.82e-04  3.44e-01  
 12  +4.8432e-01  +7.3062e-01  2.46e-01  6.37e-05  1.50e-02  6.41e-04  1.80e-04  1.80e-01  
 13  +4.7373e-01  +6.7663e-01  2.03e-01  4.79e-05  1.13e-02  4.49e-04  1.39e-04  3.27e-01  
 14  +4.6743e-01  +6.4771e-01  1.80e-01  4.24e-05  9.95e-03  1.70e-04  1.26e-04  4.94e-01  
 15  +4.4041e-01  +5.2992e-01  8.95e-02  1.79e-05  4.19e-03  4.75e-05  5.75e-05  6.76e-01  
 16  +4.3790e-01  +5.2017e-01  8.23e-02  1.62e-05  3.79e-03  3.95e-05  5.25e-05  1.82e-01  
 17  +4.3179e-01  +4.9532e-01  6.35e-02  1.21e-05  2.83e-03  3.88e-06  4.02e-05  9.90e-01  
 18  +4.1999e-01  +4.4994e-01  3.00e-02  5.59e-06  1.30e-03  1.83e-06  1.95e-05  6.36e-01  
 19  +4.1577e-01  +4.3401e-01  1.82e-02  3.38e-06  7.87e-04  1.11e-06  1.20e-05  4.08e-01  
 20  +4.1130e-01  +4.1683e-01  5.54e-03  1.02e-06  2.37e-04  3.50e-07  3.70e-06  9.90e-01  
 21  +4.0920e-01  +4.0944e-01  2.41e-04  4.43e-08  1.03e-05  1.50e-08  1.64e-07  9.66e-01  
 22  +4.0910e-01  +4.0910e-01  2.44e-06  4.47e-10  1.04e-07  1.51e-10  1.65e-09  9.90e-01  
 23  +4.0910e-01  +4.0910e-01  2.44e-08  4.47e-12  1.04e-09  1.51e-12  1.65e-11  9.90e-01  
 24  +4.0910e-01  +4.0910e-01  2.44e-10  4.48e-14  1.04e-11  1.51e-14  1.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 200.0483ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:12 PM: Optimal value: 4.091e-01
(CVXPY) Oct 06 04:11:12 PM: Compilation took 6.278e-02 seconds
(CVXPY) Oct 06 04:11:12 PM: Solver (including time spent in interface) took 2.191e-01 seconds
Iteration: 8, Objective: 0.4091
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:12 PM: Your problem has 5092 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:12 PM: Finished problem compilation (took 4.697e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5092
  constraints   = 10092
  nnz(P)        = 0
  nnz(A)        = 72798
  cones (total) = 1
    : Nonnegative = 1,  numel = 10092

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0017e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8363e-01  +1.0709e+03  1.07e+03  4.21e-01  7.39e+01  3.81e-03  5.62e-01  5.97e-01  
  2  +5.3423e-01  +1.2542e+02  1.25e+02  1.63e-01  3.64e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0912e-01  +3.2328e+01  3.18e+01  1.21e-01  2.70e+01  4.00e-05  2.51e-01  2.29e-01  
  4  +5.0078e-01  +2.4766e+00  1.98e+00  1.35e-02  3.07e+00  5.70e-06  1.49e-01  7.19e-01  
  5  +5.0027e-01  +1.3072e+00  8.07e-01  5.44e-03  1.25e+00  2.97e-05  7.87e-02  8.82e-01  
  6  +5.0007e-01  +8.7837e-01  3.78e-01  2.40e-03  5.57e-01  4.34e-05  1.80e-02  8.32e-01  
  7  +4.9866e-01  +9.0251e-01  4.04e-01  3.10e-04  7.33e-02  8.28e-04  8.60e-04  9.76e-01  
  8  +4.9537e-01  +8.5988e-01  3.65e-01  1.20e-04  2.84e-02  1.72e-03  3.28e-04  6.75e-01  
  9  +4.9365e-01  +8.3322e-01  3.40e-01  1.03e-04  2.44e-02  1.43e-03  2.81e-04  2.78e-01  
 10  +4.8969e-01  +7.9043e-01  3.01e-01  7.78e-05  1.84e-02  1.02e-03  2.14e-04  4.63e-01  
 11  +4.8804e-01  +7.7374e-01  2.86e-01  7.38e-05  1.74e-02  7.75e-04  2.04e-04  1.99e-01  
 12  +4.8190e-01  +7.3431e-01  2.52e-01  6.14e-05  1.44e-02  5.42e-04  1.73e-04  3.09e-01  
 13  +4.6547e-01  +6.4323e-01  1.78e-01  4.02e-05  9.42e-03  1.58e-04  1.19e-04  5.95e-01  
 14  +4.6121e-01  +6.2282e-01  1.62e-01  3.63e-05  8.51e-03  9.19e-05  1.10e-04  3.47e-01  
 15  +4.3730e-01  +5.1898e-01  8.17e-02  1.64e-05  3.82e-03  3.01e-05  5.33e-05  6.15e-01  
 16  +4.3679e-01  +5.1694e-01  8.02e-02  1.60e-05  3.73e-03  2.85e-05  5.22e-05  6.51e-02  
 17  +4.3557e-01  +5.1180e-01  7.62e-02  1.50e-05  3.49e-03  2.08e-05  4.90e-05  3.23e-01  
 18  +4.2378e-01  +4.6518e-01  4.14e-02  7.86e-06  1.83e-03  8.06e-06  2.69e-05  6.29e-01  
 19  +4.1351e-01  +4.2570e-01  1.22e-02  2.26e-06  5.26e-04  2.07e-06  8.14e-06  7.41e-01  
 20  +4.1337e-01  +4.2499e-01  1.16e-02  2.16e-06  5.03e-04  1.84e-06  7.84e-06  1.20e-01  
 21  +4.1336e-01  +4.2495e-01  1.16e-02  2.15e-06  5.02e-04  1.80e-06  7.79e-06  4.70e-02  
 22  +4.1313e-01  +4.2414e-01  1.10e-02  2.03e-06  4.73e-04  1.63e-06  7.33e-06  1.46e-01  
 23  +4.0993e-01  +4.1230e-01  2.37e-03  4.35e-07  1.01e-04  2.41e-07  1.60e-06  8.99e-01  
 24  +4.0904e-01  +4.0915e-01  1.07e-04  1.96e-08  4.55e-06  1.07e-08  7.25e-08  9.56e-01  
 25  +4.0900e-01  +4.0900e-01  1.07e-06  1.96e-10  4.56e-08  1.07e-10  7.27e-10  9.90e-01  
 26  +4.0900e-01  +4.0900e-01  1.07e-08  1.96e-12  4.56e-10  1.07e-12  7.27e-12  9.90e-01  
 27  +4.0900e-01  +4.0900e-01  1.07e-10  1.96e-14  4.56e-12  1.07e-14  7.28e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 236.0061ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:13 PM: Optimal value: 4.090e-01
(CVXPY) Oct 06 04:11:13 PM: Compilation took 4.697e-02 seconds
(CVXPY) Oct 06 04:11:13 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 9, Objective: 0.4090
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:13 PM: Your problem has 5097 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:13 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5097
  constraints   = 10097
  nnz(P)        = 0
  nnz(A)        = 73095
  cones (total) = 1
    : Nonnegative = 1,  numel = 10097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0018e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8358e-01  +1.0710e+03  1.07e+03  4.21e-01  7.39e+01  3.81e-03  5.63e-01  5.97e-01  
  2  +5.3420e-01  +1.2535e+02  1.25e+02  1.63e-01  3.64e+01  1.49e-02  2.65e-01  9.07e-01  
  3  +5.0911e-01  +3.2314e+01  3.18e+01  1.21e-01  2.70e+01  4.01e-05  2.51e-01  2.30e-01  
  4  +5.0078e-01  +2.4786e+00  1.98e+00  1.35e-02  3.08e+00  5.70e-06  1.49e-01  7.19e-01  
  5  +5.0026e-01  +1.2775e+00  7.77e-01  5.24e-03  1.21e+00  3.03e-05  7.58e-02  9.12e-01  
  6  +5.0006e-01  +8.5548e-01  3.55e-01  2.21e-03  5.12e-01  4.91e-05  1.48e-02  8.63e-01  
  7  +4.9853e-01  +8.7284e-01  3.74e-01  2.78e-04  6.58e-02  8.86e-04  7.73e-04  9.58e-01  
  8  +4.9637e-01  +8.5049e-01  3.54e-01  1.46e-04  3.46e-02  1.46e-03  4.01e-04  5.27e-01  
  9  +4.9403e-01  +8.2072e-01  3.27e-01  1.06e-04  2.50e-02  1.40e-03  2.89e-04  4.30e-01  
 10  +4.9039e-01  +7.8678e-01  2.96e-01  7.95e-05  1.88e-02  1.11e-03  2.19e-04  4.52e-01  
 11  +4.8975e-01  +7.8194e-01  2.92e-01  7.79e-05  1.84e-02  1.05e-03  2.15e-04  5.34e-02  
 12  +4.8717e-01  +7.5841e-01  2.71e-01  7.20e-05  1.70e-02  5.92e-04  2.01e-04  3.65e-01  
 13  +4.7482e-01  +6.8656e-01  2.12e-01  5.09e-05  1.20e-02  1.81e-04  1.47e-04  6.44e-01  
 14  +4.4875e-01  +5.6590e-01  1.17e-01  2.46e-05  5.75e-03  3.91e-05  7.71e-05  6.93e-01  
 15  +4.3984e-01  +5.3057e-01  9.07e-02  1.83e-05  4.27e-03  1.77e-05  5.92e-05  5.66e-01  
 16  +4.3635e-01  +5.1680e-01  8.05e-02  1.61e-05  3.75e-03  1.11e-05  5.29e-05  4.50e-01  
 17  +4.2893e-01  +4.8705e-01  5.81e-02  1.14e-05  2.65e-03  7.06e-06  3.84e-05  4.13e-01  
 18  +4.1973e-01  +4.5077e-01  3.10e-02  5.83e-06  1.36e-03  2.65e-06  2.03e-05  8.18e-01  
 19  +4.1605e-01  +4.3690e-01  2.08e-02  3.88e-06  9.05e-04  1.76e-06  1.38e-05  3.48e-01  
 20  +4.1343e-01  +4.2627e-01  1.28e-02  2.37e-06  5.52e-04  8.32e-07  8.52e-06  9.90e-01  
 21  +4.0970e-01  +4.1302e-01  3.32e-03  6.11e-07  1.42e-04  2.13e-07  2.26e-06  7.62e-01  
 22  +4.0854e-01  +4.0891e-01  3.68e-04  6.79e-08  1.58e-05  2.36e-08  2.53e-07  8.90e-01  
 23  +4.0840e-01  +4.0841e-01  4.27e-06  7.86e-10  1.83e-07  2.70e-10  2.93e-09  9.90e-01  
 24  +4.0840e-01  +4.0840e-01  4.27e-08  7.86e-12  1.83e-09  2.70e-12  2.93e-11  9.90e-01  
 25  +4.0840e-01  +4.0840e-01  4.27e-10  7.86e-14  1.83e-11  2.70e-14  2.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 219.9775ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:13 PM: Optimal value: 4.084e-01
(CVXPY) Oct 06 04:11:13 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:11:13 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 10, Objective: 0.4084
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:13 PM: Your problem has 5100 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:13 PM: Finished problem compilation (took 4.694e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5100
  constraints   = 10100
  nnz(P)        = 0
  nnz(A)        = 73300
  cones (total) = 1
    : Nonnegative = 1,  numel = 10100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0017e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8350e-01  +1.0712e+03  1.07e+03  4.21e-01  7.39e+01  3.81e-03  5.63e-01  5.97e-01  
  2  +5.3414e-01  +1.2527e+02  1.25e+02  1.63e-01  3.64e+01  1.49e-02  2.65e-01  9.08e-01  
  3  +5.0910e-01  +3.2299e+01  3.18e+01  1.21e-01  2.70e+01  4.01e-05  2.51e-01  2.31e-01  
  4  +5.0078e-01  +2.4853e+00  1.98e+00  1.36e-02  3.09e+00  5.71e-06  1.49e-01  7.18e-01  
  5  +5.0026e-01  +1.2810e+00  7.81e-01  5.27e-03  1.21e+00  2.86e-05  7.61e-02  8.65e-01  
  6  +5.0008e-01  +9.0883e-01  4.09e-01  2.56e-03  5.93e-01  4.62e-05  1.76e-02  8.25e-01  
  7  +4.9871e-01  +9.1665e-01  4.18e-01  3.26e-04  7.70e-02  8.00e-04  9.03e-04  9.58e-01  
  8  +4.9550e-01  +8.7164e-01  3.76e-01  1.27e-04  3.01e-02  1.63e-03  3.47e-04  6.78e-01  
  9  +4.9322e-01  +8.3983e-01  3.47e-01  1.04e-04  2.45e-02  1.37e-03  2.83e-04  3.26e-01  
 10  +4.9065e-01  +8.0362e-01  3.13e-01  8.94e-05  2.11e-02  8.56e-04  2.46e-04  3.80e-01  
 11  +4.8745e-01  +7.7521e-01  2.88e-01  7.88e-05  1.86e-02  5.96e-04  2.19e-04  3.08e-01  
 12  +4.7859e-01  +7.1961e-01  2.41e-01  5.96e-05  1.40e-02  3.21e-04  1.70e-04  4.82e-01  
 13  +4.5255e-01  +5.8902e-01  1.36e-01  2.87e-05  6.72e-03  8.99e-05  8.88e-05  6.63e-01  
 14  +4.4132e-01  +5.4145e-01  1.00e-01  2.05e-05  4.78e-03  4.98e-05  6.61e-05  4.01e-01  
 15  +4.3717e-01  +5.2437e-01  8.72e-02  1.75e-05  4.09e-03  4.01e-05  5.75e-05  1.96e-01  
 16  +4.3051e-01  +4.9570e-01  6.52e-02  1.27e-05  2.96e-03  8.58e-06  4.26e-05  8.61e-01  
 17  +4.2278e-01  +4.6473e-01  4.19e-02  7.96e-06  1.85e-03  3.34e-06  2.75e-05  8.73e-01  
 18  +4.1338e-01  +4.2830e-01  1.49e-02  2.80e-06  6.52e-04  1.14e-06  1.02e-05  6.83e-01  
 19  +4.1290e-01  +4.2615e-01  1.32e-02  2.50e-06  5.82e-04  9.49e-07  9.15e-06  3.26e-01  
 20  +4.1224e-01  +4.2342e-01  1.12e-02  2.10e-06  4.90e-04  7.64e-07  7.72e-06  4.44e-01  
 21  +4.1139e-01  +4.2032e-01  8.93e-03  1.67e-06  3.89e-04  6.04e-07  6.14e-06  3.36e-01  
 22  +4.0835e-01  +4.0925e-01  9.01e-04  1.68e-07  3.91e-05  5.80e-08  6.33e-07  9.33e-01  
 23  +4.0801e-01  +4.0802e-01  1.46e-05  2.72e-09  6.33e-07  8.98e-10  1.03e-08  9.90e-01  
 24  +4.0800e-01  +4.0800e-01  1.46e-07  2.72e-11  6.34e-09  8.98e-12  1.03e-10  9.90e-01  
 25  +4.0800e-01  +4.0800e-01  1.46e-09  2.72e-13  6.34e-11  8.99e-14  1.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 220.8095ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:14 PM: Optimal value: 4.080e-01
(CVXPY) Oct 06 04:11:14 PM: Compilation took 4.694e-02 seconds
(CVXPY) Oct 06 04:11:14 PM: Solver (including time spent in interface) took 2.437e-01 seconds
Iteration: 11, Objective: 0.4080
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:11:14 PM: Your problem has 5101 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:11:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:11:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:11:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:11:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:11:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:11:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:11:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:11:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:11:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:11:14 PM: Finished problem compilation (took 6.358e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5101
  constraints   = 10101
  nnz(P)        = 0
  nnz(A)        = 73356
  cones (total) = 1
    : Nonnegative = 1,  numel = 10101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0017e+03  5.00e+03  9.86e-01  1.16e+02  1.00e+00  1.00e+00   ------   
  1  +5.8346e-01  +1.0714e+03  1.07e+03  4.22e-01  7.39e+01  3.81e-03  5.63e-01  5.96e-01  
  2  +5.3413e-01  +1.2527e+02  1.25e+02  1.63e-01  3.64e+01  1.49e-02  2.65e-01  9.08e-01  
  3  +5.0910e-01  +3.2305e+01  3.18e+01  1.21e-01  2.69e+01  4.02e-05  2.51e-01  2.31e-01  
  4  +5.0079e-01  +2.4897e+00  1.99e+00  1.36e-02  3.09e+00  5.71e-06  1.49e-01  7.18e-01  
  5  +5.0027e-01  +1.2974e+00  7.97e-01  5.38e-03  1.24e+00  2.86e-05  7.72e-02  8.56e-01  
  6  +5.0009e-01  +9.1706e-01  4.17e-01  2.63e-03  6.09e-01  4.50e-05  1.86e-02  8.14e-01  
  7  +4.9875e-01  +9.2400e-01  4.25e-01  3.39e-04  8.01e-02  7.80e-04  9.40e-04  9.61e-01  
  8  +4.9563e-01  +8.7601e-01  3.80e-01  1.32e-04  3.11e-02  1.58e-03  3.59e-04  6.81e-01  
  9  +4.9358e-01  +8.4180e-01  3.48e-01  1.08e-04  2.54e-02  1.26e-03  2.94e-04  3.47e-01  
 10  +4.9137e-01  +8.0568e-01  3.14e-01  9.40e-05  2.22e-02  7.49e-04  2.59e-04  3.94e-01  
 11  +4.8623e-01  +7.6812e-01  2.82e-01  7.10e-05  1.67e-02  5.73e-04  1.98e-04  4.30e-01  
 12  +4.8345e-01  +7.5064e-01  2.67e-01  6.77e-05  1.59e-02  4.69e-04  1.90e-04  1.28e-01  
 13  +4.7166e-01  +6.8646e-01  2.15e-01  5.00e-05  1.17e-02  2.88e-04  1.46e-04  3.74e-01  
 14  +4.5453e-01  +5.9851e-01  1.44e-01  3.26e-05  7.63e-03  2.78e-06  1.02e-04  7.92e-01  
 15  +4.3694e-01  +5.2242e-01  8.55e-02  1.76e-05  4.11e-03  3.12e-06  5.82e-05  7.33e-01  
 16  +4.3479e-01  +5.1379e-01  7.90e-02  1.61e-05  3.75e-03  3.01e-06  5.34e-05  1.51e-01  
 17  +4.2801e-01  +4.8577e-01  5.78e-02  1.13e-05  2.64e-03  2.71e-06  3.85e-05  5.86e-01  
 18  +4.2026e-01  +4.5406e-01  3.38e-02  6.41e-06  1.49e-03  2.08e-06  2.24e-05  9.90e-01  
 19  +4.1575e-01  +4.3699e-01  2.12e-02  4.00e-06  9.31e-04  1.30e-06  1.43e-05  3.87e-01  
 20  +4.1363e-01  +4.2824e-01  1.46e-02  2.73e-06  6.37e-04  9.13e-07  9.89e-06  9.90e-01  
 21  +4.1052e-01  +4.1705e-01  6.53e-03  1.22e-06  2.84e-04  4.07e-07  4.51e-06  5.75e-01  
 22  +4.0823e-01  +4.0882e-01  5.93e-04  1.11e-07  2.58e-05  3.66e-08  4.17e-07  9.16e-01  
 23  +4.0800e-01  +4.0802e-01  1.15e-05  2.14e-09  4.99e-07  6.84e-10  8.10e-09  9.90e-01  
 24  +4.0800e-01  +4.0800e-01  1.15e-07  2.15e-11  4.99e-09  6.84e-12  8.10e-11  9.90e-01  
 25  +4.0800e-01  +4.0800e-01  1.15e-09  2.14e-13  4.99e-11  6.85e-14  8.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.067ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:11:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:11:14 PM: Optimal value: 4.080e-01
(CVXPY) Oct 06 04:11:14 PM: Compilation took 6.358e-02 seconds
(CVXPY) Oct 06 04:11:14 PM: Solver (including time spent in interface) took 2.180e-01 seconds
FULL MODEL:
  Accruacy: 0.5835
  Our objective: 0.167

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.1424)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.0064)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.003)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.003)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 12.738630056381226
Best over terms:
  Our final objective: 0.1424
    Its accruacy: 0.5712
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1424
  Highest accruacy: 0.5712
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

