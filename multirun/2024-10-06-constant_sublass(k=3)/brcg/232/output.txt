Command:
python test_script.py -s constant_subclass -d 6 -n 10000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 6.

Computed total variation: 0.1528
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:32 PM: Your problem has 5013 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:32 PM: Finished problem compilation (took 5.790e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5013
  constraints   = 10013
  nnz(P)        = 0
  nnz(A)        = 45013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.91e+01  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +1.0289e+03  1.03e+03  3.86e-01  6.01e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4196e-01  +1.3637e+02  1.36e+02  1.50e-01  2.96e+01  1.15e-02  2.44e-01  8.24e-01  
  3  +5.1045e-01  +3.4034e+01  3.35e+01  1.18e-01  2.30e+01  2.90e-05  2.39e-01  1.21e-01  
  4  +5.0030e-01  +1.3604e+00  8.60e-01  5.82e-03  1.15e+00  4.64e-06  1.29e-01  9.90e-01  
  5  +5.0002e-01  +6.4508e-01  1.45e-01  9.67e-04  1.92e-01  3.93e-06  3.27e-02  8.56e-01  
  6  +4.9820e-01  +1.3603e+00  8.62e-01  8.78e-04  1.76e-01  2.30e-04  2.71e-03  9.85e-01  
  7  +5.0009e-01  +9.9414e-01  4.94e-01  7.50e-04  1.51e-01  1.58e-05  2.31e-03  3.73e-01  
  8  +5.0003e-01  +9.1440e-01  4.14e-01  4.77e-04  9.58e-02  1.72e-05  1.44e-03  4.42e-01  
  9  +4.9976e-01  +8.0813e-01  3.08e-01  1.60e-04  3.22e-02  3.17e-05  4.68e-04  7.51e-01  
 10  +4.9878e-01  +7.7140e-01  2.73e-01  7.74e-05  1.56e-02  5.15e-05  2.24e-04  5.73e-01  
 11  +4.9300e-01  +6.7434e-01  1.81e-01  5.92e-05  1.19e-02  1.51e-05  1.78e-04  4.51e-01  
 12  +4.8682e-01  +5.9820e-01  1.11e-01  3.89e-05  7.79e-03  1.35e-07  1.23e-04  9.48e-01  
 13  +4.7275e-01  +5.2723e-01  5.45e-02  1.43e-05  2.86e-03  6.18e-07  4.82e-05  7.20e-01  
 14  +4.5881e-01  +4.6543e-01  6.62e-03  1.49e-06  2.97e-04  9.53e-08  5.79e-06  9.11e-01  
 15  +4.5625e-01  +4.5637e-01  1.24e-04  2.59e-08  5.17e-06  2.57e-09  1.10e-07  9.86e-01  
 16  +4.5620e-01  +4.5620e-01  1.25e-06  2.59e-10  5.17e-08  2.57e-11  1.10e-09  9.90e-01  
 17  +4.5620e-01  +4.5620e-01  1.25e-08  2.59e-12  5.17e-10  2.67e-13  1.14e-11  9.90e-01  
 18  +4.5620e-01  +4.5620e-01  1.25e-10  2.58e-14  5.18e-12  2.77e-15  1.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 106.2372ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:32 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:32 PM: Optimal value: 4.562e-01
(CVXPY) Oct 06 03:59:32 PM: Compilation took 5.790e-02 seconds
(CVXPY) Oct 06 03:59:32 PM: Solver (including time spent in interface) took 1.203e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:32 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:32 PM: Finished problem compilation (took 3.981e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 53858
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9305e-01  +1.0291e+03  1.03e+03  3.86e-01  6.30e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4178e-01  +1.3600e+02  1.35e+02  1.50e-01  3.09e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1035e-01  +3.3816e+01  3.33e+01  1.18e-01  2.40e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0038e-01  +1.6727e+00  1.17e+00  7.94e-03  1.64e+00  5.18e-06  1.44e-01  8.40e-01  
  5  +5.0003e-01  +7.1849e-01  2.18e-01  1.46e-03  3.03e-01  3.45e-06  4.52e-02  7.92e-01  
  6  +5.0001e-01  +7.5741e-01  2.57e-01  1.70e-03  3.55e-01  5.54e-06  2.87e-02  4.85e-01  
  7  +5.0003e-01  +7.9615e-01  2.96e-01  1.93e-03  4.02e-01  5.18e-06  2.30e-02  5.52e-01  
  8  +4.9903e-01  +7.6373e-01  2.65e-01  4.56e-04  9.61e-02  6.10e-05  1.40e-03  9.53e-01  
  9  +4.9367e-01  +7.1522e-01  2.22e-01  8.23e-05  1.73e-02  2.82e-04  2.35e-04  8.33e-01  
 10  +4.9163e-01  +6.9530e-01  2.04e-01  6.63e-05  1.40e-02  2.41e-04  1.87e-04  3.26e-01  
 11  +4.9279e-01  +6.8995e-01  1.97e-01  6.16e-05  1.30e-02  1.25e-04  1.71e-04  4.79e-01  
 12  +4.9245e-01  +6.8651e-01  1.94e-01  6.13e-05  1.29e-02  1.13e-04  1.70e-04  6.71e-02  
 13  +4.8949e-01  +6.6976e-01  1.80e-01  4.83e-05  1.02e-02  1.12e-04  1.34e-04  2.63e-01  
 14  +4.8759e-01  +6.5803e-01  1.70e-01  4.00e-05  8.42e-03  8.43e-05  1.11e-04  4.01e-01  
 15  +4.8558e-01  +6.4993e-01  1.64e-01  3.96e-05  8.33e-03  7.48e-05  1.11e-04  4.26e-02  
 16  +4.7151e-01  +5.8898e-01  1.17e-01  2.16e-05  4.54e-03  5.21e-05  6.20e-05  5.51e-01  
 17  +4.4407e-01  +4.7920e-01  3.51e-02  5.99e-06  1.25e-03  6.71e-07  1.85e-05  8.64e-01  
 18  +4.3480e-01  +4.4771e-01  1.29e-02  2.05e-06  4.29e-04  5.91e-07  6.42e-06  8.11e-01  
 19  +4.3479e-01  +4.4768e-01  1.29e-02  2.05e-06  4.29e-04  5.90e-07  6.42e-06  1.51e-03  
 20  +4.3463e-01  +4.4661e-01  1.20e-02  1.97e-06  4.12e-04  5.23e-07  6.40e-06  4.11e-02  
 21  +4.3461e-01  +4.4657e-01  1.20e-02  1.97e-06  4.11e-04  5.29e-07  6.37e-06  2.01e-02  
 22  +4.3422e-01  +4.4591e-01  1.17e-02  1.85e-06  3.86e-04  6.46e-07  5.78e-06  3.21e-01  
 23  +4.3030e-01  +4.3327e-01  2.97e-03  4.66e-07  9.75e-05  2.39e-07  1.48e-06  9.90e-01  
 24  +4.2892e-01  +4.2895e-01  3.57e-05  5.60e-09  1.17e-06  2.77e-09  1.78e-08  9.90e-01  
 25  +4.2890e-01  +4.2890e-01  3.57e-07  5.60e-11  1.17e-08  2.77e-11  1.78e-10  9.90e-01  
 26  +4.2890e-01  +4.2890e-01  3.57e-09  5.60e-13  1.17e-10  2.78e-13  1.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 170.5989ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:32 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:32 PM: Optimal value: 4.289e-01
(CVXPY) Oct 06 03:59:32 PM: Compilation took 3.981e-02 seconds
(CVXPY) Oct 06 03:59:32 PM: Solver (including time spent in interface) took 1.834e-01 seconds
Iteration: 2, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:32 PM: Your problem has 5030 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:32 PM: Finished problem compilation (took 2.991e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5030
  constraints   = 10030
  nnz(P)        = 0
  nnz(A)        = 55530
  cones (total) = 1
    : Nonnegative = 1,  numel = 10030

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9296e-01  +1.0294e+03  1.03e+03  3.86e-01  6.31e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4167e-01  +1.3580e+02  1.35e+02  1.50e-01  3.09e+01  1.15e-02  2.44e-01  8.27e-01  
  3  +5.1033e-01  +3.3769e+01  3.33e+01  1.18e-01  2.40e+01  2.91e-05  2.39e-01  1.25e-01  
  4  +5.0041e-01  +1.7463e+00  1.25e+00  8.44e-03  1.74e+00  5.26e-06  1.46e-01  8.12e-01  
  5  +5.0007e-01  +8.3650e-01  3.36e-01  2.25e-03  4.68e-01  3.79e-06  6.29e-02  6.63e-01  
  6  +5.0001e-01  +8.5213e-01  3.52e-01  2.30e-03  4.79e-01  7.06e-06  2.63e-02  6.93e-01  
  7  +4.9705e-01  +7.4359e-01  2.47e-01  2.13e-04  4.50e-02  1.62e-04  6.30e-04  9.89e-01  
  8  +4.8940e-01  +6.7989e-01  1.90e-01  6.48e-05  1.37e-02  3.43e-04  1.88e-04  7.19e-01  
  9  +4.8821e-01  +6.6430e-01  1.76e-01  6.29e-05  1.33e-02  2.60e-04  1.85e-04  1.20e-01  
 10  +4.8608e-01  +6.6466e-01  1.79e-01  4.80e-05  1.01e-02  2.62e-04  1.36e-04  4.66e-01  
 11  +4.8563e-01  +6.6466e-01  1.79e-01  4.53e-05  9.55e-03  2.48e-04  1.28e-04  1.45e-01  
 12  +4.8143e-01  +6.4375e-01  1.62e-01  4.26e-05  8.97e-03  1.10e-04  1.24e-04  3.81e-01  
 13  +4.7069e-01  +6.0596e-01  1.35e-01  2.72e-05  5.73e-03  4.61e-05  7.99e-05  7.47e-01  
 14  +4.4772e-01  +5.0533e-01  5.76e-02  1.09e-05  2.28e-03  4.58e-07  3.43e-05  8.72e-01  
 15  +4.3129e-01  +4.4432e-01  1.30e-02  2.26e-06  4.74e-04  4.01e-07  7.49e-06  8.69e-01  
 16  +4.3130e-01  +4.4465e-01  1.33e-02  2.26e-06  4.74e-04  4.32e-07  7.44e-06  2.64e-02  
 17  +4.3129e-01  +4.4462e-01  1.33e-02  2.26e-06  4.73e-04  4.33e-07  7.43e-06  6.42e-03  
 18  +4.3092e-01  +4.4276e-01  1.18e-02  2.08e-06  4.36e-04  4.33e-07  7.18e-06  2.08e-01  
 19  +4.3084e-01  +4.4248e-01  1.16e-02  2.05e-06  4.29e-04  4.32e-07  7.05e-06  3.22e-02  
 20  +4.2955e-01  +4.3821e-01  8.65e-03  1.47e-06  3.08e-04  5.21e-07  4.90e-06  7.64e-01  
 21  +4.2660e-01  +4.2855e-01  1.95e-03  3.35e-07  7.01e-05  1.11e-07  1.14e-06  9.55e-01  
 22  +4.2577e-01  +4.2594e-01  1.70e-04  2.86e-08  5.99e-06  1.05e-08  9.76e-08  9.32e-01  
 23  +4.2570e-01  +4.2570e-01  1.72e-06  2.88e-10  6.03e-08  1.05e-10  9.83e-10  9.90e-01  
 24  +4.2570e-01  +4.2570e-01  1.72e-08  2.88e-12  6.03e-10  1.05e-12  9.83e-12  9.90e-01  
 25  +4.2570e-01  +4.2570e-01  1.72e-10  2.88e-14  6.03e-12  1.06e-14  9.87e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 177.0806ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:33 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:33 PM: Optimal value: 4.257e-01
(CVXPY) Oct 06 03:59:33 PM: Compilation took 2.991e-02 seconds
(CVXPY) Oct 06 03:59:33 PM: Solver (including time spent in interface) took 1.902e-01 seconds
Iteration: 3, Objective: 0.4257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:33 PM: Your problem has 5033 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:33 PM: Finished problem compilation (took 4.005e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5033
  constraints   = 10033
  nnz(P)        = 0
  nnz(A)        = 55936
  cones (total) = 1
    : Nonnegative = 1,  numel = 10033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0013e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9296e-01  +1.0294e+03  1.03e+03  3.87e-01  6.31e+01  3.92e-03  5.26e-01  6.26e-01  
  2  +5.4167e-01  +1.3579e+02  1.35e+02  1.50e-01  3.09e+01  1.15e-02  2.44e-01  8.27e-01  
  3  +5.1032e-01  +3.3763e+01  3.33e+01  1.18e-01  2.40e+01  2.91e-05  2.39e-01  1.25e-01  
  4  +5.0041e-01  +1.7480e+00  1.25e+00  8.46e-03  1.74e+00  5.27e-06  1.46e-01  8.12e-01  
  5  +5.0008e-01  +8.6984e-01  3.70e-01  2.47e-03  5.15e-01  3.85e-06  6.76e-02  6.26e-01  
  6  +5.0001e-01  +8.4072e-01  3.41e-01  2.22e-03  4.62e-01  6.90e-06  2.42e-02  7.52e-01  
  7  +4.9642e-01  +7.6017e-01  2.64e-01  1.81e-04  3.83e-02  1.96e-04  5.30e-04  9.90e-01  
  8  +4.9217e-01  +7.1416e-01  2.22e-01  8.83e-05  1.86e-02  2.39e-04  2.55e-04  6.51e-01  
  9  +4.9169e-01  +7.0288e-01  2.11e-01  8.66e-05  1.83e-02  1.85e-04  2.51e-04  1.44e-01  
 10  +4.9042e-01  +6.9784e-01  2.07e-01  7.14e-05  1.51e-02  1.81e-04  2.04e-04  3.16e-01  
 11  +4.8703e-01  +6.7459e-01  1.88e-01  5.15e-05  1.09e-02  1.20e-04  1.46e-04  5.79e-01  
 12  +4.8511e-01  +6.6669e-01  1.82e-01  5.08e-05  1.07e-02  1.09e-04  1.46e-04  3.33e-02  
 13  +4.8414e-01  +6.6149e-01  1.77e-01  4.71e-05  9.94e-03  4.99e-05  1.35e-04  5.23e-01  
 14  +4.7353e-01  +6.1147e-01  1.38e-01  3.11e-05  6.55e-03  3.19e-05  9.16e-05  4.87e-01  
 15  +4.7305e-01  +6.0929e-01  1.36e-01  3.06e-05  6.43e-03  2.85e-05  8.99e-05  1.15e-01  
 16  +4.5334e-01  +5.2911e-01  7.58e-02  1.44e-05  3.02e-03  1.39e-05  4.45e-05  5.60e-01  
 17  +4.3242e-01  +4.4844e-01  1.60e-02  2.83e-06  5.93e-04  1.51e-06  9.33e-06  8.58e-01  
 18  +4.3221e-01  +4.4798e-01  1.58e-02  2.70e-06  5.66e-04  1.52e-06  8.85e-06  8.12e-02  
 19  +4.3219e-01  +4.4789e-01  1.57e-02  2.70e-06  5.66e-04  1.51e-06  8.85e-06  5.61e-03  
 20  +4.3208e-01  +4.4745e-01  1.54e-02  2.68e-06  5.61e-04  1.44e-06  8.79e-06  3.04e-02  
 21  +4.3220e-01  +4.4788e-01  1.57e-02  2.68e-06  5.62e-04  1.49e-06  8.79e-06  2.32e-02  
 22  +4.3194e-01  +4.4680e-01  1.49e-02  2.64e-06  5.52e-04  1.33e-06  8.79e-06  6.98e-03  
 23  +4.3053e-01  +4.4219e-01  1.17e-02  1.98e-06  4.15e-04  1.03e-06  6.54e-06  4.57e-01  
 24  +4.2645e-01  +4.2816e-01  1.71e-03  2.88e-07  6.04e-05  1.23e-07  9.74e-07  9.90e-01  
 25  +4.2573e-01  +4.2580e-01  6.67e-05  1.13e-08  2.36e-06  4.78e-09  3.82e-08  9.61e-01  
 26  +4.2570e-01  +4.2570e-01  6.70e-07  1.13e-10  2.37e-08  4.80e-11  3.84e-10  9.90e-01  
 27  +4.2570e-01  +4.2570e-01  6.85e-09  1.16e-12  2.42e-10  4.91e-13  3.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 184.842ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:33 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:33 PM: Optimal value: 4.257e-01
(CVXPY) Oct 06 03:59:33 PM: Compilation took 4.005e-02 seconds
(CVXPY) Oct 06 03:59:33 PM: Solver (including time spent in interface) took 1.999e-01 seconds
Iteration: 4, Objective: 0.4257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:33 PM: Your problem has 5035 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:33 PM: Finished problem compilation (took 4.019e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5035
  constraints   = 10035
  nnz(P)        = 0
  nnz(A)        = 56251
  cones (total) = 1
    : Nonnegative = 1,  numel = 10035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9291e-01  +1.0296e+03  1.03e+03  3.87e-01  6.31e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4163e-01  +1.3572e+02  1.35e+02  1.50e-01  3.09e+01  1.16e-02  2.44e-01  8.27e-01  
  3  +5.1032e-01  +3.3752e+01  3.32e+01  1.18e-01  2.40e+01  2.91e-05  2.39e-01  1.26e-01  
  4  +5.0041e-01  +1.7487e+00  1.25e+00  8.46e-03  1.74e+00  5.27e-06  1.46e-01  8.13e-01  
  5  +5.0008e-01  +8.6591e-01  3.66e-01  2.45e-03  5.10e-01  3.88e-06  6.64e-02  6.33e-01  
  6  +5.0001e-01  +8.7375e-01  3.74e-01  2.41e-03  5.03e-01  7.70e-06  2.39e-02  7.77e-01  
  7  +4.9679e-01  +7.4372e-01  2.47e-01  1.88e-04  3.97e-02  1.76e-04  5.50e-04  9.86e-01  
  8  +4.9229e-01  +7.0258e-01  2.10e-01  8.40e-05  1.77e-02  2.29e-04  2.42e-04  7.30e-01  
  9  +4.9149e-01  +6.9425e-01  2.03e-01  8.34e-05  1.76e-02  2.07e-04  2.42e-04  2.64e-02  
 10  +4.9056e-01  +6.9508e-01  2.05e-01  7.07e-05  1.49e-02  2.26e-04  2.03e-04  2.27e-01  
 11  +4.8895e-01  +6.7667e-01  1.88e-01  6.91e-05  1.46e-02  1.66e-04  2.01e-04  1.08e-01  
 12  +4.8776e-01  +6.7347e-01  1.86e-01  6.20e-05  1.31e-02  1.62e-04  1.79e-04  1.84e-01  
 13  +4.8576e-01  +6.6530e-01  1.80e-01  5.86e-05  1.24e-02  9.59e-05  1.72e-04  3.58e-01  
 14  +4.8039e-01  +6.4310e-01  1.63e-01  4.46e-05  9.40e-03  8.06e-05  1.31e-04  3.73e-01  
 15  +4.7843e-01  +6.3597e-01  1.58e-01  3.99e-05  8.41e-03  6.03e-05  1.17e-04  3.28e-01  
 16  +4.7714e-01  +6.2961e-01  1.52e-01  3.95e-05  8.30e-03  5.30e-05  1.17e-04  5.74e-02  
 17  +4.7196e-01  +6.0775e-01  1.36e-01  3.27e-05  6.89e-03  3.65e-05  9.85e-05  3.46e-01  
 18  +4.5469e-01  +5.3603e-01  8.13e-02  1.62e-05  3.40e-03  8.90e-06  5.07e-05  8.09e-01  
 19  +4.4187e-01  +4.8576e-01  4.39e-02  8.27e-06  1.73e-03  4.02e-06  2.70e-05  5.81e-01  
 20  +4.3083e-01  +4.4328e-01  1.24e-02  2.22e-06  4.64e-04  8.87e-07  7.43e-06  9.38e-01  
 21  +4.3084e-01  +4.4362e-01  1.28e-02  2.22e-06  4.64e-04  9.31e-07  7.39e-06  2.94e-02  
 22  +4.3083e-01  +4.4356e-01  1.27e-02  2.21e-06  4.63e-04  9.26e-07  7.38e-06  1.59e-02  
 23  +4.3009e-01  +4.4042e-01  1.03e-02  1.87e-06  3.91e-04  6.58e-07  6.55e-06  4.71e-01  
 24  +4.3004e-01  +4.4026e-01  1.02e-02  1.85e-06  3.87e-04  6.52e-07  6.47e-06  3.15e-02  
 25  +4.2887e-01  +4.3635e-01  7.49e-03  1.32e-06  2.77e-04  5.19e-07  4.49e-06  6.81e-01  
 26  +4.2609e-01  +4.2732e-01  1.22e-03  2.13e-07  4.47e-05  6.65e-08  7.35e-07  9.34e-01  
 27  +4.2562e-01  +4.2568e-01  6.01e-05  1.04e-08  2.18e-06  3.39e-09  3.60e-08  9.58e-01  
 28  +4.2560e-01  +4.2560e-01  6.09e-07  1.06e-10  2.21e-08  3.45e-11  3.65e-10  9.90e-01  
 29  +4.2560e-01  +4.2560e-01  6.19e-09  1.07e-12  2.24e-10  3.50e-13  3.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 208.7163ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:33 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:33 PM: Optimal value: 4.256e-01
(CVXPY) Oct 06 03:59:33 PM: Compilation took 4.019e-02 seconds
(CVXPY) Oct 06 03:59:33 PM: Solver (including time spent in interface) took 2.195e-01 seconds
FULL MODEL:
  Accruacy: 0.5748
  Our objective: 0.14960000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.1424)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0018)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1)                       <-- (term's our objective: 0.005)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.523101091384888
Best over terms:
  Our final objective: 0.1424
    Its accruacy: 0.5712
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1424
  Highest accruacy: 0.5712
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

