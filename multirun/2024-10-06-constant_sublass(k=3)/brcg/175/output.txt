Command:
python test_script.py -s constant_subclass -d 5 -n 500 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.164
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.23199999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:29 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:29 PM: Finished problem compilation (took 2.999e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +2.5083e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9871e-01  +5.0511e+01  4.99e+01  3.44e-01  1.14e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4289e-01  +7.2735e+00  6.73e+00  1.15e-01  4.68e+00  1.01e-02  2.24e-01  8.11e-01  
  3  +5.0116e-01  +1.3144e+00  8.13e-01  2.42e-02  9.56e-01  8.06e-04  1.93e-01  5.41e-01  
  4  +4.9982e-01  +6.6729e-01  1.67e-01  5.00e-03  2.03e-01  2.28e-04  4.10e-02  8.29e-01  
  5  +4.8497e-01  +7.4418e-01  2.59e-01  1.58e-03  6.60e-02  2.32e-03  4.97e-03  9.43e-01  
  6  +4.6751e-01  +5.2864e-01  6.11e-02  3.37e-04  1.40e-02  2.36e-05  1.16e-03  8.61e-01  
  7  +4.5471e-01  +4.7744e-01  2.27e-02  9.63e-05  3.99e-03  1.29e-05  3.88e-04  7.86e-01  
  8  +4.4897e-01  +4.5155e-01  2.58e-03  1.04e-05  4.29e-04  2.31e-06  4.48e-05  9.90e-01  
  9  +4.4811e-01  +4.4814e-01  2.82e-05  1.13e-07  4.67e-06  2.49e-08  4.94e-07  9.89e-01  
 10  +4.4810e-01  +4.4810e-01  2.82e-07  1.13e-09  4.67e-08  2.49e-10  4.94e-09  9.90e-01  
 11  +4.4810e-01  +4.4810e-01  2.82e-09  1.13e-11  4.67e-10  2.49e-12  4.94e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.93ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:29 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:29 PM: Optimal value: 4.481e-01
(CVXPY) Oct 06 03:53:29 PM: Compilation took 2.999e-02 seconds
(CVXPY) Oct 06 03:53:29 PM: Solver (including time spent in interface) took 9.813e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4481
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:29 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:29 PM: Finished problem compilation (took 4.786e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2458
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +2.5117e+02  2.51e+02  9.34e-01  2.08e+01  1.00e+00  1.01e+00   ------   
  1  +5.9535e-01  +5.0682e+01  5.01e+01  3.48e-01  1.18e+01  3.99e-03  5.09e-01  6.44e-01  
  2  +5.3936e-01  +6.8927e+00  6.35e+00  1.09e-01  4.56e+00  1.06e-02  2.13e-01  8.46e-01  
  3  +5.0101e-01  +1.4279e+00  9.27e-01  2.79e-02  1.14e+00  1.48e-03  1.73e-01  6.27e-01  
  4  +4.9840e-01  +9.2075e-01  4.22e-01  1.17e-02  4.94e-01  1.11e-03  5.48e-02  7.61e-01  
  5  +4.7527e-01  +8.5282e-01  3.78e-01  2.58e-03  1.12e-01  5.04e-03  7.72e-03  9.26e-01  
  6  +4.5919e-01  +6.9925e-01  2.40e-01  1.32e-03  5.70e-02  3.25e-03  4.16e-03  5.16e-01  
  7  +4.5697e-01  +6.8522e-01  2.28e-01  1.06e-03  4.60e-02  2.51e-03  3.33e-03  4.35e-01  
  8  +4.4616e-01  +5.9565e-01  1.49e-01  6.87e-04  2.96e-02  9.48e-04  2.25e-03  5.30e-01  
  9  +4.3124e-01  +4.9411e-01  6.29e-02  2.70e-04  1.16e-02  2.38e-05  9.24e-04  9.90e-01  
 10  +4.1964e-01  +4.3653e-01  1.69e-02  6.58e-05  2.82e-03  1.04e-05  2.23e-04  8.12e-01  
 11  +4.1907e-01  +4.3605e-01  1.70e-02  5.74e-05  2.47e-03  1.25e-05  1.89e-04  2.17e-01  
 12  +4.1692e-01  +4.2767e-01  1.08e-02  4.04e-05  1.73e-03  1.38e-05  1.38e-04  9.69e-01  
 13  +4.1330e-01  +4.1609e-01  2.79e-03  9.27e-06  3.98e-04  3.97e-06  3.14e-05  7.89e-01  
 14  +4.1222e-01  +4.1226e-01  3.96e-05  1.31e-07  5.62e-06  5.44e-08  4.48e-07  9.86e-01  
 15  +4.1220e-01  +4.1220e-01  3.96e-07  1.31e-09  5.62e-08  5.44e-10  4.48e-09  9.90e-01  
 16  +4.1220e-01  +4.1220e-01  3.96e-09  1.31e-11  5.62e-10  5.44e-12  4.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.2642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:29 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:29 PM: Optimal value: 4.122e-01
(CVXPY) Oct 06 03:53:29 PM: Compilation took 4.786e-03 seconds
(CVXPY) Oct 06 03:53:29 PM: Solver (including time spent in interface) took 9.604e-03 seconds
Iteration: 2, Objective: 0.4122
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:30 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:30 PM: Finished problem compilation (took 6.655e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2835
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +2.5114e+02  2.51e+02  9.35e-01  2.13e+01  1.00e+00  1.02e+00   ------   
  1  +5.9460e-01  +5.0875e+01  5.03e+01  3.53e-01  1.20e+01  3.97e-03  5.16e-01  6.41e-01  
  2  +5.3863e-01  +6.8329e+00  6.29e+00  1.09e-01  4.58e+00  1.09e-02  2.16e-01  8.54e-01  
  3  +5.0165e-01  +1.5073e+00  1.01e+00  3.08e-02  1.28e+00  1.56e-03  1.77e-01  5.92e-01  
  4  +4.9892e-01  +8.8851e-01  3.90e-01  1.11e-02  4.74e-01  9.94e-04  5.16e-02  8.01e-01  
  5  +4.7569e-01  +8.8104e-01  4.05e-01  2.51e-03  1.11e-01  5.47e-03  7.34e-03  9.25e-01  
  6  +4.6272e-01  +7.8253e-01  3.20e-01  1.48e-03  6.58e-02  4.58e-03  4.40e-03  4.89e-01  
  7  +4.5840e-01  +7.2475e-01  2.66e-01  1.26e-03  5.59e-02  2.54e-03  3.79e-03  3.41e-01  
  8  +4.3415e-01  +5.6986e-01  1.36e-01  5.61e-04  2.47e-02  6.08e-04  1.79e-03  7.22e-01  
  9  +4.1095e-01  +4.5704e-01  4.61e-02  1.81e-04  7.90e-03  1.57e-04  6.27e-04  7.06e-01  
 10  +4.0229e-01  +4.1982e-01  1.75e-02  6.59e-05  2.87e-03  4.26e-05  2.40e-04  7.94e-01  
 11  +3.9713e-01  +3.9952e-01  2.39e-03  8.89e-06  3.86e-04  5.54e-06  3.35e-05  8.67e-01  
 12  +3.9631e-01  +3.9634e-01  2.77e-05  1.03e-07  4.48e-06  5.94e-08  3.91e-07  9.90e-01  
 13  +3.9630e-01  +3.9630e-01  2.77e-07  1.03e-09  4.48e-08  5.94e-10  3.91e-09  9.90e-01  
 14  +3.9630e-01  +3.9630e-01  2.77e-09  1.03e-11  4.48e-10  5.94e-12  3.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5901ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:30 PM: Optimal value: 3.963e-01
(CVXPY) Oct 06 03:53:30 PM: Compilation took 6.655e-03 seconds
(CVXPY) Oct 06 03:53:30 PM: Solver (including time spent in interface) took 5.102e-03 seconds
Iteration: 3, Objective: 0.3963
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:30 PM: Your problem has 288 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:30 PM: Finished problem compilation (took 9.893e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 288
  constraints   = 538
  nnz(P)        = 0
  nnz(A)        = 2979
  cones (total) = 1
    : Nonnegative = 1,  numel = 538

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +2.5122e+02  2.51e+02  9.36e-01  2.13e+01  1.00e+00  1.02e+00   ------   
  1  +5.9360e-01  +5.1022e+01  5.04e+01  3.56e-01  1.20e+01  3.97e-03  5.18e-01  6.39e-01  
  2  +5.3781e-01  +6.7513e+00  6.21e+00  1.09e-01  4.52e+00  1.10e-02  2.15e-01  8.62e-01  
  3  +5.0171e-01  +1.5375e+00  1.04e+00  3.18e-02  1.32e+00  1.67e-03  1.74e-01  6.02e-01  
  4  +4.9880e-01  +9.8517e-01  4.86e-01  1.35e-02  5.78e-01  1.25e-03  5.89e-02  7.55e-01  
  5  +4.7630e-01  +9.2688e-01  4.51e-01  3.05e-03  1.35e-01  5.43e-03  9.13e-03  9.03e-01  
  6  +4.6474e-01  +8.6718e-01  4.02e-01  1.93e-03  8.54e-02  5.83e-03  5.71e-03  4.41e-01  
  7  +4.5378e-01  +7.1247e-01  2.59e-01  1.22e-03  5.38e-02  2.89e-04  3.74e-03  7.91e-01  
  8  +4.1420e-01  +4.9406e-01  7.99e-02  3.30e-04  1.44e-02  5.78e-05  1.14e-03  7.69e-01  
  9  +4.0073e-01  +4.3239e-01  3.17e-02  1.30e-04  5.65e-03  2.74e-05  4.85e-04  7.19e-01  
 10  +3.9338e-01  +4.0098e-01  7.60e-03  3.04e-05  1.32e-03  7.48e-06  1.19e-04  8.46e-01  
 11  +3.9091e-01  +3.9230e-01  1.39e-03  5.27e-06  2.29e-04  1.40e-06  2.15e-05  9.31e-01  
 12  +3.9041e-01  +3.9043e-01  2.43e-05  9.21e-08  4.00e-06  2.47e-08  3.78e-07  9.90e-01  
 13  +3.9040e-01  +3.9040e-01  2.43e-07  9.21e-10  4.00e-08  2.47e-10  3.78e-09  9.90e-01  
 14  +3.9040e-01  +3.9040e-01  2.43e-09  9.21e-12  4.00e-10  2.47e-12  3.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5554ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:30 PM: Optimal value: 3.904e-01
(CVXPY) Oct 06 03:53:30 PM: Compilation took 9.893e-03 seconds
(CVXPY) Oct 06 03:53:30 PM: Solver (including time spent in interface) took 5.097e-03 seconds
Iteration: 4, Objective: 0.3904
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:30 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:30 PM: Finished problem compilation (took 7.263e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3002
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +2.5122e+02  2.51e+02  9.36e-01  2.13e+01  1.00e+00  1.02e+00   ------   
  1  +5.9360e-01  +5.1030e+01  5.04e+01  3.56e-01  1.20e+01  3.97e-03  5.18e-01  6.39e-01  
  2  +5.3774e-01  +6.7442e+00  6.21e+00  1.08e-01  4.51e+00  1.10e-02  2.14e-01  8.62e-01  
  3  +5.0173e-01  +1.5400e+00  1.04e+00  3.19e-02  1.32e+00  1.68e-03  1.74e-01  6.02e-01  
  4  +4.9878e-01  +9.7825e-01  4.79e-01  1.33e-02  5.69e-01  1.24e-03  5.76e-02  7.63e-01  
  5  +4.7618e-01  +9.2314e-01  4.47e-01  3.00e-03  1.33e-01  5.46e-03  8.97e-03  9.02e-01  
  6  +4.6562e-01  +8.7568e-01  4.10e-01  1.95e-03  8.66e-02  5.93e-03  5.77e-03  4.31e-01  
  7  +4.5160e-01  +6.9670e-01  2.45e-01  1.17e-03  5.18e-02  5.69e-05  3.64e-03  7.91e-01  
  8  +4.0972e-01  +4.7053e-01  6.08e-02  2.50e-04  1.09e-02  2.10e-05  8.80e-04  8.16e-01  
  9  +4.0440e-01  +4.4789e-01  4.35e-02  1.76e-04  7.69e-03  2.35e-05  6.42e-04  4.40e-01  
 10  +3.9330e-01  +4.0094e-01  7.64e-03  3.07e-05  1.33e-03  4.89e-06  1.21e-04  8.44e-01  
 11  +3.9098e-01  +3.9244e-01  1.46e-03  5.62e-06  2.44e-04  1.25e-06  2.28e-05  8.99e-01  
 12  +3.9042e-01  +3.9048e-01  5.82e-05  2.21e-07  9.60e-06  5.39e-08  9.07e-07  9.80e-01  
 13  +3.9040e-01  +3.9040e-01  5.85e-07  2.22e-09  9.64e-08  5.41e-10  9.11e-09  9.90e-01  
 14  +3.9040e-01  +3.9040e-01  5.85e-09  2.22e-11  9.64e-10  5.41e-12  9.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.8905ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:30 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:30 PM: Optimal value: 3.904e-01
(CVXPY) Oct 06 03:53:30 PM: Compilation took 7.263e-03 seconds
(CVXPY) Oct 06 03:53:30 PM: Solver (including time spent in interface) took 6.842e-03 seconds
FULL MODEL:
  Accruacy: 0.604
  Our objective: 0.20800000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.064)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.112)
 OR (x0 = 1 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.8349769115448
Best over terms:
  Our final objective: 0.11200000000000004
    Its accruacy: 0.556
    Its hamming distance: 2
  Shortest hamming distance: 1
    Its our objective: 0.06399999999999996
  Highest accruacy: 0.556
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

