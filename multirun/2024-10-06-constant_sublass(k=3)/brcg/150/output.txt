Command:
python test_script.py -s constant_subclass -d 4 -n 10000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1378
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.13779999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:08 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:08 PM: Finished problem compilation (took 6.768e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.84e-01  8.58e+01  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +9.6885e+02  9.68e+02  3.38e-01  4.77e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5104e-01  +1.5090e+02  1.50e+02  1.40e-01  2.42e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1083e-01  +3.2671e+01  3.22e+01  1.11e-01  1.89e+01  1.78e-05  2.25e-01  6.49e-02  
  4  +5.0005e-01  +1.0535e+00  5.53e-01  3.71e-03  6.37e-01  3.84e-06  1.44e-01  9.90e-01  
  5  +4.9999e-01  +6.2217e-01  1.22e-01  8.16e-04  1.41e-01  1.37e-06  2.92e-02  8.26e-01  
  6  +4.9674e-01  +1.0547e+00  5.58e-01  6.71e-04  1.16e-01  7.59e-05  2.13e-03  9.73e-01  
  7  +4.8439e-01  +8.0406e-01  3.20e-01  9.85e-05  1.71e-02  2.40e-04  3.04e-04  8.59e-01  
  8  +4.7392e-01  +5.5246e-01  7.85e-02  2.11e-05  3.65e-03  2.62e-06  6.84e-05  8.99e-01  
  9  +4.6261e-01  +4.7895e-01  1.63e-02  3.97e-06  6.86e-04  6.24e-07  1.38e-05  9.90e-01  
 10  +4.5813e-01  +4.6056e-01  2.42e-03  5.36e-07  9.27e-05  9.31e-08  2.08e-06  8.74e-01  
 11  +4.5722e-01  +4.5726e-01  4.52e-05  9.28e-09  1.61e-06  1.81e-09  3.88e-08  9.86e-01  
 12  +4.5720e-01  +4.5720e-01  4.52e-07  9.27e-11  1.60e-08  1.81e-11  3.88e-10  9.90e-01  
 13  +4.5720e-01  +4.5720e-01  4.53e-09  9.29e-13  1.61e-10  1.98e-13  4.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.6789ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:08 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:08 PM: Optimal value: 4.572e-01
(CVXPY) Oct 06 03:51:08 PM: Compilation took 6.768e-02 seconds
(CVXPY) Oct 06 03:51:08 PM: Solver (including time spent in interface) took 6.992e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4572
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:08 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:08 PM: Finished problem compilation (took 2.143e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 44488
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0012e+03  5.00e+03  9.84e-01  9.15e+01  1.00e+00  1.00e+00   ------   
  1  +6.0800e-01  +9.6990e+02  9.69e+02  3.39e-01  5.10e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5075e-01  +1.5034e+02  1.50e+02  1.40e-01  2.58e+01  8.28e-03  2.28e-01  7.27e-01  
  3  +5.1071e-01  +3.2426e+01  3.19e+01  1.11e-01  2.01e+01  1.78e-05  2.25e-01  6.73e-02  
  4  +5.0035e-01  +1.9963e+00  1.50e+00  1.00e-02  1.81e+00  4.53e-06  1.85e-01  4.84e-01  
  5  +5.0004e-01  +7.6193e-01  2.62e-01  1.75e-03  3.21e-01  1.15e-06  5.97e-02  7.42e-01  
  6  +5.0003e-01  +7.7125e-01  2.71e-01  1.81e-03  3.32e-01  1.48e-06  4.00e-02  4.26e-01  
  7  +5.0005e-01  +8.2763e-01  3.28e-01  2.16e-03  3.96e-01  1.53e-06  3.09e-02  5.77e-01  
  8  +4.9966e-01  +6.9947e-01  2.00e-01  7.23e-04  1.34e-01  7.81e-06  2.62e-03  9.28e-01  
  9  +4.9403e-01  +6.5961e-01  1.66e-01  5.70e-05  1.06e-02  1.01e-04  1.61e-04  9.39e-01  
 10  +4.9070e-01  +6.4196e-01  1.51e-01  4.39e-05  8.14e-03  8.43e-05  1.22e-04  4.00e-01  
 11  +4.8914e-01  +6.3963e-01  1.50e-01  3.49e-05  6.49e-03  8.99e-05  9.68e-05  3.06e-01  
 12  +4.8771e-01  +6.3271e-01  1.45e-01  3.47e-05  6.44e-03  8.11e-05  9.67e-05  2.50e-02  
 13  +4.8332e-01  +6.1430e-01  1.31e-01  3.18e-05  5.90e-03  4.64e-05  9.24e-05  2.97e-01  
 14  +4.8083e-01  +6.0534e-01  1.25e-01  2.86e-05  5.30e-03  4.24e-05  8.25e-05  1.71e-01  
 15  +4.7987e-01  +6.0252e-01  1.23e-01  2.78e-05  5.14e-03  2.72e-05  7.94e-05  3.65e-01  
 16  +4.7834e-01  +5.9910e-01  1.21e-01  2.54e-05  4.71e-03  2.17e-05  7.25e-05  3.20e-01  
 17  +4.7716e-01  +5.9217e-01  1.15e-01  2.47e-05  4.58e-03  1.79e-05  7.20e-05  1.05e-01  
 18  +4.6294e-01  +5.4057e-01  7.76e-02  1.39e-05  2.58e-03  8.75e-06  4.14e-05  6.73e-01  
 19  +4.4987e-01  +4.9526e-01  4.54e-02  7.58e-06  1.40e-03  4.65e-06  2.29e-05  5.33e-01  
 20  +4.3407e-01  +4.4036e-01  6.30e-03  9.91e-07  1.83e-04  4.06e-07  3.12e-06  9.42e-01  
 21  +4.3124e-01  +4.3134e-01  9.82e-05  1.53e-08  2.83e-06  6.30e-09  4.87e-08  9.87e-01  
 22  +4.3120e-01  +4.3120e-01  9.82e-07  1.53e-10  2.83e-08  6.30e-11  4.87e-10  9.90e-01  
 23  +4.3120e-01  +4.3120e-01  9.82e-09  1.53e-12  2.83e-10  6.33e-13  4.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.189ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:09 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:09 PM: Optimal value: 4.312e-01
(CVXPY) Oct 06 03:51:09 PM: Compilation took 2.143e-02 seconds
(CVXPY) Oct 06 03:51:09 PM: Solver (including time spent in interface) took 1.583e-01 seconds
FULL MODEL:
  Accruacy: 0.5689
  Our objective: 0.1378

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1378)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.938145637512207
Best over terms:
  Our final objective: 0.1378
    Its accruacy: 0.5689
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1378
  Highest accruacy: 0.5689
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

