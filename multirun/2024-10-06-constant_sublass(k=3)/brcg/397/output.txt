Command:
python test_script.py -s constant_subclass -d 10 -n 50000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15208
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 10.

Computed total variation: 0.19295999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:46 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:46 PM: Finished problem compilation (took 3.610e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 325021
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.7827e-01  +5.4921e+03  5.49e+03  4.48e-01  1.81e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2954e-01  +6.0158e+02  6.01e+02  1.86e-01  9.70e+01  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0862e-01  +1.5670e+02  1.56e+02  1.52e-01  8.05e+01  5.04e-05  2.66e-01  3.26e-01  
  4  +5.0144e-01  +1.8695e+01  1.82e+01  4.95e-02  2.61e+01  5.56e-06  1.96e-01  4.50e-01  
  5  +5.0002e-01  +1.4285e+00  9.28e-01  2.77e-03  1.51e+00  2.43e-05  1.93e-01  1.60e-01  
  6  +5.0001e-01  +8.8696e-01  3.87e-01  1.15e-03  6.30e-01  1.02e-05  8.81e-02  6.38e-01  
  7  +4.9999e-01  +6.2828e-01  1.28e-01  3.82e-04  2.09e-01  1.02e-05  1.45e-02  8.74e-01  
  8  +4.9826e-01  +8.0598e-01  3.08e-01  1.39e-04  7.66e-02  7.63e-04  4.39e-04  9.90e-01  
  9  +4.8662e-01  +7.3419e-01  2.48e-01  1.60e-05  8.77e-03  5.16e-03  4.82e-05  8.91e-01  
 10  +4.8439e-01  +6.9558e-01  2.11e-01  1.31e-05  7.19e-03  3.89e-03  3.99e-05  2.41e-01  
 11  +4.8636e-01  +6.4538e-01  1.59e-01  1.09e-05  5.99e-03  5.26e-04  3.33e-05  6.12e-01  
 12  +4.8599e-01  +6.3748e-01  1.51e-01  1.08e-05  5.93e-03  4.47e-04  3.33e-05  4.98e-02  
 13  +4.7591e-01  +5.7175e-01  9.58e-02  5.47e-06  3.00e-03  2.44e-04  1.75e-05  5.71e-01  
 14  +4.7494e-01  +5.5988e-01  8.49e-02  5.10e-06  2.80e-03  1.09e-04  1.68e-05  3.90e-01  
 15  +4.6819e-01  +5.2424e-01  5.60e-02  2.96e-06  1.62e-03  5.43e-05  9.98e-06  5.39e-01  
 16  +4.6648e-01  +5.1357e-01  4.71e-02  2.48e-06  1.36e-03  1.38e-05  8.67e-06  6.71e-01  
 17  +4.5504e-01  +4.6023e-01  5.18e-03  2.36e-07  1.29e-04  9.25e-07  9.16e-07  9.08e-01  
 18  +4.5313e-01  +4.5324e-01  1.02e-04  4.25e-09  2.33e-06  1.29e-08  1.79e-08  9.86e-01  
 19  +4.5310e-01  +4.5310e-01  1.02e-06  4.25e-11  2.33e-08  1.29e-10  1.79e-10  9.90e-01  
 20  +4.5310e-01  +4.5310e-01  1.02e-08  4.27e-13  2.34e-10  1.63e-12  2.24e-12  9.90e-01  
 21  +4.5310e-01  +4.5310e-01  1.03e-10  4.18e-15  2.35e-12  2.06e-14  2.81e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0423951s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:47 PM: Optimal value: 4.531e-01
(CVXPY) Oct 06 04:32:47 PM: Compilation took 3.610e-01 seconds
(CVXPY) Oct 06 04:32:47 PM: Solver (including time spent in interface) took 1.125e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:48 PM: Your problem has 25031 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:48 PM: Finished problem compilation (took 2.774e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25031
  constraints   = 50031
  nnz(P)        = 0
  nnz(A)        = 369006
  cones (total) = 1
    : Nonnegative = 1,  numel = 50031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7826e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2951e-01  +6.0131e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0861e-01  +1.5655e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.66e-01  3.27e-01  
  4  +5.0144e-01  +1.8589e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0003e-01  +1.6734e+00  1.17e+00  3.50e-03  1.97e+00  2.69e-05  1.92e-01  1.63e-01  
  6  +5.0000e-01  +6.6666e-01  1.67e-01  4.97e-04  2.80e-01  4.18e-06  3.69e-02  8.22e-01  
  7  +5.0000e-01  +6.8113e-01  1.81e-01  5.40e-04  3.05e-01  4.86e-06  3.28e-02  1.93e-01  
  8  +5.0000e-01  +7.0308e-01  2.03e-01  6.05e-04  3.42e-01  5.03e-06  3.21e-02  1.89e-01  
  9  +4.9997e-01  +7.6128e-01  2.61e-01  7.50e-04  4.23e-01  2.00e-05  8.25e-03  8.35e-01  
 10  +4.9723e-01  +7.3304e-01  2.36e-01  4.05e-05  2.31e-02  1.20e-03  1.13e-04  9.87e-01  
 11  +4.9349e-01  +6.9096e-01  1.97e-01  1.48e-05  8.44e-03  2.01e-03  4.03e-05  8.08e-01  
 12  +4.9384e-01  +6.8855e-01  1.95e-01  1.33e-05  7.56e-03  1.61e-03  3.57e-05  3.47e-01  
 13  +4.9398e-01  +6.8821e-01  1.94e-01  1.31e-05  7.49e-03  1.51e-03  3.53e-05  7.01e-02  
 14  +4.9290e-01  +6.8268e-01  1.90e-01  1.10e-05  6.27e-03  1.47e-03  2.95e-05  2.83e-01  
 15  +4.9298e-01  +6.8195e-01  1.89e-01  1.09e-05  6.21e-03  1.36e-03  2.92e-05  7.86e-02  
 16  +4.9198e-01  +6.7660e-01  1.85e-01  9.80e-06  5.58e-03  1.22e-03  2.63e-05  2.22e-01  
 17  +4.8835e-01  +6.5953e-01  1.71e-01  7.97e-06  4.54e-03  1.02e-03  2.15e-05  3.31e-01  
 18  +4.8231e-01  +6.2750e-01  1.45e-01  6.54e-06  3.72e-03  1.04e-05  1.81e-05  8.35e-01  
 19  +4.5860e-01  +5.3978e-01  8.12e-02  2.76e-06  1.56e-03  5.85e-06  7.97e-06  6.24e-01  
 20  +4.3074e-01  +4.4504e-01  1.43e-02  4.62e-07  2.61e-04  5.69e-08  1.44e-06  9.04e-01  
 21  +4.2415e-01  +4.2433e-01  1.78e-04  5.61e-09  3.17e-06  5.72e-10  1.78e-08  9.88e-01  
 22  +4.2406e-01  +4.2406e-01  1.78e-06  5.60e-11  3.17e-08  5.72e-12  1.78e-10  9.90e-01  
 23  +4.2406e-01  +4.2406e-01  1.78e-08  5.61e-13  3.17e-10  5.98e-14  1.86e-12  9.90e-01  
 24  +4.2406e-01  +4.2406e-01  1.78e-10  5.68e-15  3.17e-12  6.25e-16  1.94e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6325759s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:50 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 04:32:50 PM: Compilation took 2.774e-01 seconds
(CVXPY) Oct 06 04:32:50 PM: Solver (including time spent in interface) took 1.718e+00 seconds
Iteration: 2, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:50 PM: Your problem has 25041 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:51 PM: Finished problem compilation (took 5.031e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25041
  constraints   = 50041
  nnz(P)        = 0
  nnz(A)        = 370953
  cones (total) = 1
    : Nonnegative = 1,  numel = 50041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7825e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2950e-01  +6.0124e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0861e-01  +1.5653e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.66e-01  3.27e-01  
  4  +5.0144e-01  +1.8589e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0003e-01  +1.6893e+00  1.19e+00  3.55e-03  1.99e+00  2.69e-05  1.92e-01  1.62e-01  
  6  +5.0000e-01  +6.6200e-01  1.62e-01  4.83e-04  2.73e-01  4.04e-06  3.58e-02  8.29e-01  
  7  +5.0000e-01  +6.7493e-01  1.75e-01  5.22e-04  2.94e-01  4.63e-06  3.23e-02  1.75e-01  
  8  +5.0000e-01  +6.9965e-01  2.00e-01  5.95e-04  3.36e-01  4.87e-06  3.15e-02  2.11e-01  
  9  +4.9998e-01  +7.5939e-01  2.59e-01  7.45e-04  4.21e-01  1.94e-05  8.23e-03  8.32e-01  
 10  +4.9760e-01  +7.3684e-01  2.39e-01  4.62e-05  2.63e-02  1.05e-03  1.28e-04  9.85e-01  
 11  +4.9632e-01  +7.2008e-01  2.24e-01  2.75e-05  1.57e-02  1.36e-03  7.53e-05  5.32e-01  
 12  +4.9436e-01  +7.0985e-01  2.15e-01  1.87e-05  1.06e-02  1.77e-03  5.07e-05  3.60e-01  
 13  +4.9464e-01  +7.0820e-01  2.14e-01  1.84e-05  1.05e-02  1.63e-03  4.97e-05  9.57e-02  
 14  +4.9422e-01  +7.0281e-01  2.09e-01  1.61e-05  9.16e-03  1.55e-03  4.34e-05  2.34e-01  
 15  +4.9357e-01  +6.9555e-01  2.02e-01  1.35e-05  7.69e-03  1.42e-03  3.63e-05  3.15e-01  
 16  +4.9368e-01  +6.9038e-01  1.97e-01  1.29e-05  7.37e-03  1.09e-03  3.47e-05  2.42e-01  
 17  +4.8705e-01  +6.6021e-01  1.73e-01  7.54e-06  4.29e-03  1.22e-03  2.04e-05  5.23e-01  
 18  +4.8487e-01  +6.4785e-01  1.63e-01  7.16e-06  4.07e-03  8.23e-04  1.95e-05  2.45e-01  
 19  +4.7346e-01  +5.9589e-01  1.22e-01  5.05e-06  2.87e-03  8.51e-06  1.43e-05  8.27e-01  
 20  +4.4396e-01  +4.9002e-01  4.61e-02  1.53e-06  8.66e-04  2.06e-06  4.60e-06  7.69e-01  
 21  +4.3615e-01  +4.6435e-01  2.82e-02  9.19e-07  5.20e-04  1.10e-06  2.82e-06  4.87e-01  
 22  +4.3489e-01  +4.6011e-01  2.52e-02  8.10e-07  4.58e-04  7.82e-07  2.49e-06  4.49e-01  
 23  +4.3171e-01  +4.4976e-01  1.80e-02  5.77e-07  3.26e-04  5.47e-07  1.79e-06  3.11e-01  
 24  +4.2973e-01  +4.4294e-01  1.32e-02  4.17e-07  2.36e-04  2.28e-07  1.30e-06  9.90e-01  
 25  +4.2617e-01  +4.3158e-01  5.42e-03  1.72e-07  9.70e-05  9.31e-08  5.43e-07  6.60e-01  
 26  +4.2382e-01  +4.2411e-01  2.90e-04  9.20e-09  5.20e-06  4.82e-09  2.94e-08  9.73e-01  
 27  +4.2368e-01  +4.2368e-01  2.95e-06  9.36e-11  5.29e-08  4.89e-11  2.99e-10  9.90e-01  
 28  +4.2368e-01  +4.2368e-01  2.95e-08  9.36e-13  5.29e-10  4.89e-13  2.99e-12  9.90e-01  
 29  +4.2368e-01  +4.2368e-01  2.98e-10  9.52e-15  5.35e-12  4.89e-15  2.99e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8384729s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:54 PM: Optimal value: 4.237e-01
(CVXPY) Oct 06 04:32:54 PM: Compilation took 5.031e-01 seconds
(CVXPY) Oct 06 04:32:54 PM: Solver (including time spent in interface) took 2.957e+00 seconds
Iteration: 3, Objective: 0.4237
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:54 PM: Your problem has 25051 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:55 PM: Finished problem compilation (took 5.183e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25051
  constraints   = 50051
  nnz(P)        = 0
  nnz(A)        = 372371
  cones (total) = 1
    : Nonnegative = 1,  numel = 50051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +5.4926e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2949e-01  +6.0116e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5650e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8591e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0003e-01  +1.6803e+00  1.18e+00  3.52e-03  1.98e+00  2.70e-05  1.92e-01  1.64e-01  
  6  +5.0001e-01  +7.6626e-01  2.66e-01  7.94e-04  4.48e-01  6.48e-06  5.65e-02  7.18e-01  
  7  +5.0000e-01  +7.7230e-01  2.72e-01  8.11e-04  4.57e-01  9.52e-06  3.09e-02  5.46e-01  
  8  +4.9991e-01  +7.4742e-01  2.48e-01  6.44e-04  3.64e-01  4.92e-05  4.12e-03  8.98e-01  
  9  +4.9796e-01  +7.3848e-01  2.41e-01  7.50e-05  4.27e-02  8.88e-04  2.13e-04  9.49e-01  
 10  +4.9696e-01  +7.3108e-01  2.34e-01  4.86e-05  2.77e-02  1.24e-03  1.36e-04  4.13e-01  
 11  +4.9738e-01  +7.2589e-01  2.29e-01  4.70e-05  2.68e-02  1.03e-03  1.30e-04  1.89e-01  
 12  +4.9525e-01  +7.0722e-01  2.12e-01  2.26e-05  1.29e-02  1.59e-03  6.15e-05  6.77e-01  
 13  +4.9446e-01  +7.0288e-01  2.08e-01  1.88e-05  1.07e-02  1.70e-03  5.10e-05  2.37e-01  
 14  +4.9514e-01  +7.0001e-01  2.05e-01  1.84e-05  1.05e-02  1.30e-03  4.97e-05  2.37e-01  
 15  +4.9387e-01  +6.9354e-01  2.00e-01  1.48e-05  8.42e-03  1.38e-03  3.99e-05  2.78e-01  
 16  +4.9344e-01  +6.8624e-01  1.93e-01  1.28e-05  7.32e-03  1.01e-03  3.46e-05  4.05e-01  
 17  +4.8992e-01  +6.7010e-01  1.80e-01  9.41e-06  5.36e-03  9.66e-04  2.55e-05  4.11e-01  
 18  +4.8655e-01  +6.4932e-01  1.63e-01  8.17e-06  4.65e-03  8.91e-05  2.25e-05  7.97e-01  
 19  +4.7002e-01  +5.8347e-01  1.13e-01  4.39e-06  2.49e-03  4.99e-05  1.25e-05  6.22e-01  
 20  +4.5434e-01  +5.3058e-01  7.62e-02  2.76e-06  1.56e-03  2.34e-06  8.18e-06  8.23e-01  
 21  +4.3410e-01  +4.5983e-01  2.57e-02  8.59e-07  4.86e-04  5.68e-07  2.68e-06  7.42e-01  
 22  +4.3382e-01  +4.5882e-01  2.50e-02  8.30e-07  4.69e-04  5.39e-07  2.59e-06  1.17e-01  
 23  +4.3323e-01  +4.5673e-01  2.35e-02  7.75e-07  4.38e-04  4.87e-07  2.42e-06  2.04e-01  
 24  +4.3183e-01  +4.5149e-01  1.97e-02  6.29e-07  3.56e-04  3.21e-07  1.97e-06  9.86e-01  
 25  +4.2650e-01  +4.3424e-01  7.73e-03  2.48e-07  1.40e-04  1.26e-07  7.94e-07  6.05e-01  
 26  +4.2341e-01  +4.2420e-01  7.94e-04  2.56e-08  1.45e-05  1.26e-08  8.28e-08  9.90e-01  
 27  +4.2305e-01  +4.2306e-01  1.10e-05  3.55e-10  2.01e-07  1.73e-10  1.15e-09  9.87e-01  
 28  +4.2304e-01  +4.2304e-01  1.10e-07  3.55e-12  2.01e-09  1.73e-12  1.15e-11  9.90e-01  
 29  +4.2304e-01  +4.2304e-01  1.12e-09  3.61e-14  2.04e-11  1.73e-14  1.15e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.5189325s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:57 PM: Optimal value: 4.230e-01
(CVXPY) Oct 06 04:32:57 PM: Compilation took 5.183e-01 seconds
(CVXPY) Oct 06 04:32:57 PM: Solver (including time spent in interface) took 2.643e+00 seconds
Iteration: 4, Objective: 0.4230
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:58 PM: Your problem has 25061 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:58 PM: Finished problem compilation (took 5.267e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25061
  constraints   = 50061
  nnz(P)        = 0
  nnz(A)        = 374035
  cones (total) = 1
    : Nonnegative = 1,  numel = 50061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7823e-01  +5.4927e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2948e-01  +6.0108e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5648e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8590e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.55e-01  
  5  +5.0003e-01  +1.6758e+00  1.18e+00  3.51e-03  1.97e+00  2.71e-05  1.92e-01  1.65e-01  
  6  +5.0001e-01  +7.5975e-01  2.60e-01  7.75e-04  4.37e-01  6.42e-06  5.50e-02  7.25e-01  
  7  +5.0000e-01  +7.7159e-01  2.72e-01  8.09e-04  4.56e-01  9.77e-06  2.99e-02  5.51e-01  
  8  +4.9989e-01  +7.4881e-01  2.49e-01  6.25e-04  3.53e-01  5.67e-05  3.62e-03  9.08e-01  
  9  +4.9821e-01  +7.4131e-01  2.43e-01  8.71e-05  4.96e-02  7.78e-04  2.48e-04  9.32e-01  
 10  +4.9659e-01  +7.3070e-01  2.34e-01  4.43e-05  2.53e-02  1.38e-03  1.23e-04  5.52e-01  
 11  +4.9685e-01  +7.2821e-01  2.31e-01  4.41e-05  2.51e-02  1.25e-03  1.22e-04  8.77e-02  
 12  +4.9550e-01  +7.2092e-01  2.25e-01  2.98e-05  1.70e-02  1.65e-03  8.18e-05  3.83e-01  
 13  +4.9526e-01  +7.1461e-01  2.19e-01  2.46e-05  1.40e-02  1.59e-03  6.71e-05  3.28e-01  
 14  +4.9615e-01  +7.0894e-01  2.13e-01  2.32e-05  1.32e-02  1.11e-03  6.26e-05  3.44e-01  
 15  +4.9481e-01  +7.0000e-01  2.05e-01  1.65e-05  9.41e-03  1.20e-03  4.45e-05  4.41e-01  
 16  +4.9492e-01  +6.9800e-01  2.03e-01  1.59e-05  9.09e-03  1.05e-03  4.29e-05  1.64e-01  
 17  +4.9272e-01  +6.8687e-01  1.94e-01  1.19e-05  6.80e-03  1.07e-03  3.22e-05  3.85e-01  
 18  +4.8985e-01  +6.6300e-01  1.73e-01  8.87e-06  5.05e-03  7.77e-05  2.40e-05  9.80e-01  
 19  +4.8485e-01  +6.4374e-01  1.59e-01  7.86e-06  4.47e-03  7.17e-06  2.23e-05  7.65e-01  
 20  +4.6746e-01  +5.7137e-01  1.04e-01  4.23e-06  2.40e-03  3.42e-06  1.24e-05  6.45e-01  
 21  +4.6480e-01  +5.6476e-01  1.00e-01  3.96e-06  2.24e-03  2.96e-06  1.15e-05  2.10e-01  
 22  +4.5444e-01  +5.3038e-01  7.59e-02  2.80e-06  1.59e-03  2.09e-06  8.33e-06  3.37e-01  
 23  +4.3396e-01  +4.6144e-01  2.75e-02  9.18e-07  5.19e-04  4.15e-07  2.87e-06  8.57e-01  
 24  +4.3143e-01  +4.5268e-01  2.13e-02  6.95e-07  3.93e-04  3.29e-07  2.19e-06  6.19e-01  
 25  +4.2791e-01  +4.4099e-01  1.31e-02  4.26e-07  2.41e-04  2.03e-07  1.36e-06  4.93e-01  
 26  +4.2729e-01  +4.3892e-01  1.16e-02  3.77e-07  2.13e-04  1.81e-07  1.20e-06  2.27e-01  
 27  +4.2525e-01  +4.3203e-01  6.78e-03  2.19e-07  1.24e-04  1.08e-07  7.03e-07  9.90e-01  
 28  +4.2270e-01  +4.2388e-01  1.17e-03  3.80e-08  2.15e-05  1.84e-08  1.24e-07  9.90e-01  
 29  +4.2218e-01  +4.2221e-01  3.64e-05  1.18e-09  6.66e-07  5.67e-10  3.84e-09  9.70e-01  
 30  +4.2216e-01  +4.2216e-01  3.64e-07  1.18e-11  6.66e-09  5.68e-12  3.85e-11  9.90e-01  
 31  +4.2216e-01  +4.2216e-01  3.68e-09  1.19e-13  6.73e-11  5.68e-14  3.85e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.9510014s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:01 PM: Optimal value: 4.222e-01
(CVXPY) Oct 06 04:33:01 PM: Compilation took 5.267e-01 seconds
(CVXPY) Oct 06 04:33:01 PM: Solver (including time spent in interface) took 3.083e+00 seconds
Iteration: 5, Objective: 0.4222
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:02 PM: Your problem has 25071 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:02 PM: Finished problem compilation (took 4.640e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25071
  constraints   = 50071
  nnz(P)        = 0
  nnz(A)        = 375180
  cones (total) = 1
    : Nonnegative = 1,  numel = 50071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4928e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0101e+02  6.00e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5646e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8592e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0003e-01  +1.6935e+00  1.19e+00  3.56e-03  2.00e+00  2.71e-05  1.92e-01  1.63e-01  
  6  +5.0001e-01  +7.4475e-01  2.45e-01  7.30e-04  4.12e-01  6.00e-06  5.19e-02  7.43e-01  
  7  +5.0000e-01  +7.7111e-01  2.71e-01  8.07e-04  4.55e-01  9.56e-06  2.90e-02  5.53e-01  
  8  +4.9988e-01  +7.5212e-01  2.52e-01  6.17e-04  3.49e-01  5.92e-05  3.37e-03  9.13e-01  
  9  +4.9847e-01  +7.4557e-01  2.47e-01  9.93e-05  5.65e-02  6.64e-04  2.84e-04  9.16e-01  
 10  +4.9697e-01  +7.3321e-01  2.36e-01  4.79e-05  2.73e-02  1.22e-03  1.33e-04  5.94e-01  
 11  +4.9661e-01  +7.2815e-01  2.32e-01  3.88e-05  2.21e-02  1.31e-03  1.07e-04  2.85e-01  
 12  +4.9801e-01  +7.1154e-01  2.14e-01  3.15e-05  1.80e-02  5.92e-04  8.49e-05  7.22e-01  
 13  +4.9650e-01  +7.0154e-01  2.05e-01  1.67e-05  9.54e-03  8.16e-04  4.47e-05  6.72e-01  
 14  +4.9487e-01  +6.9051e-01  1.96e-01  1.18e-05  6.72e-03  6.87e-04  3.15e-05  6.06e-01  
 15  +4.9289e-01  +6.8130e-01  1.88e-01  1.00e-05  5.71e-03  6.21e-04  2.69e-05  2.84e-01  
 16  +4.8950e-01  +6.6406e-01  1.75e-01  8.74e-06  4.98e-03  2.05e-04  2.37e-05  6.44e-01  
 17  +4.8508e-01  +6.4626e-01  1.61e-01  7.96e-06  4.53e-03  4.67e-05  2.25e-05  6.21e-01  
 18  +4.6992e-01  +5.8335e-01  1.13e-01  4.71e-06  2.67e-03  2.29e-05  1.37e-05  5.81e-01  
 19  +4.6238e-01  +5.5913e-01  9.67e-02  3.78e-06  2.14e-03  1.47e-05  1.10e-05  3.76e-01  
 20  +4.5350e-01  +5.2903e-01  7.55e-02  2.79e-06  1.58e-03  9.86e-06  8.32e-06  3.33e-01  
 21  +4.4134e-01  +4.8797e-01  4.66e-02  1.59e-06  9.02e-04  2.04e-06  4.89e-06  7.96e-01  
 22  +4.2915e-01  +4.4631e-01  1.72e-02  5.66e-07  3.20e-04  5.62e-07  1.79e-06  7.44e-01  
 23  +4.2490e-01  +4.3195e-01  7.05e-03  2.29e-07  1.29e-04  1.85e-07  7.36e-07  7.50e-01  
 24  +4.2475e-01  +4.3127e-01  6.52e-03  2.12e-07  1.20e-04  1.36e-07  6.82e-07  5.37e-01  
 25  +4.2436e-01  +4.2995e-01  5.60e-03  1.81e-07  1.02e-04  1.04e-07  5.84e-07  5.25e-01  
 26  +4.2354e-01  +4.2735e-01  3.81e-03  1.23e-07  6.96e-05  6.95e-08  3.98e-07  4.13e-01  
 27  +4.2193e-01  +4.2222e-01  2.88e-04  9.31e-09  5.26e-06  4.75e-09  3.03e-08  9.70e-01  
 28  +4.2180e-01  +4.2180e-01  2.97e-06  9.62e-11  5.44e-08  4.90e-11  3.14e-10  9.90e-01  
 29  +4.2180e-01  +4.2180e-01  2.97e-08  9.62e-13  5.44e-10  4.90e-13  3.14e-12  9.90e-01  
 30  +4.2180e-01  +4.2180e-01  3.00e-10  9.80e-15  5.48e-12  4.90e-15  3.14e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5095099s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:04 PM: Optimal value: 4.218e-01
(CVXPY) Oct 06 04:33:04 PM: Compilation took 4.640e-01 seconds
(CVXPY) Oct 06 04:33:04 PM: Solver (including time spent in interface) took 1.569e+00 seconds
Iteration: 6, Objective: 0.4218
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:04 PM: Your problem has 25080 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:04 PM: Finished problem compilation (took 2.975e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25080
  constraints   = 50080
  nnz(P)        = 0
  nnz(A)        = 376043
  cones (total) = 1
    : Nonnegative = 1,  numel = 50080

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4927e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0099e+02  6.00e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5645e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8591e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0003e-01  +1.6569e+00  1.16e+00  3.46e-03  1.94e+00  2.71e-05  1.92e-01  1.69e-01  
  6  +5.0001e-01  +7.4225e-01  2.42e-01  7.23e-04  4.08e-01  6.19e-06  5.14e-02  7.43e-01  
  7  +5.0000e-01  +7.7111e-01  2.71e-01  8.07e-04  4.55e-01  1.03e-05  2.77e-02  5.76e-01  
  8  +4.9985e-01  +7.5021e-01  2.50e-01  5.75e-04  3.25e-01  7.30e-05  2.82e-03  9.23e-01  
  9  +4.9811e-01  +7.4265e-01  2.45e-01  8.38e-05  4.77e-02  8.17e-04  2.38e-04  9.16e-01  
 10  +4.9633e-01  +7.3096e-01  2.35e-01  4.13e-05  2.35e-02  1.47e-03  1.14e-04  5.79e-01  
 11  +4.9655e-01  +7.2898e-01  2.32e-01  4.10e-05  2.34e-02  1.36e-03  1.13e-04  7.08e-02  
 12  +4.9570e-01  +7.1855e-01  2.23e-01  2.80e-05  1.60e-02  1.52e-03  7.65e-05  4.85e-01  
 13  +4.9618e-01  +7.1068e-01  2.15e-01  2.38e-05  1.36e-02  1.13e-03  6.45e-05  4.51e-01  
 14  +4.9491e-01  +7.0362e-01  2.09e-01  1.78e-05  1.02e-02  1.27e-03  4.81e-05  3.53e-01  
 15  +4.9485e-01  +6.9541e-01  2.01e-01  1.49e-05  8.49e-03  8.17e-04  4.01e-05  5.38e-01  
 16  +4.9107e-01  +6.7831e-01  1.87e-01  9.95e-06  5.67e-03  8.52e-04  2.69e-05  4.87e-01  
 17  +4.8682e-01  +6.6040e-01  1.74e-01  8.11e-06  4.61e-03  7.75e-04  2.21e-05  2.62e-01  
 18  +4.8070e-01  +6.3084e-01  1.50e-01  7.02e-06  3.98e-03  7.10e-06  2.10e-05  7.37e-01  
 19  +4.7645e-01  +6.0944e-01  1.33e-01  6.30e-06  3.57e-03  4.29e-06  1.89e-05  3.43e-01  
 20  +4.7531e-01  +6.0584e-01  1.31e-01  6.10e-06  3.46e-03  3.80e-06  1.81e-05  1.57e-01  
 21  +4.7000e-01  +5.8509e-01  1.15e-01  5.12e-06  2.90e-03  3.15e-06  1.53e-05  2.20e-01  
 22  +4.5998e-01  +5.4862e-01  8.86e-02  3.61e-06  2.05e-03  2.06e-06  1.09e-05  4.46e-01  
 23  +4.4786e-01  +5.1083e-01  6.30e-02  2.28e-06  1.29e-03  1.28e-06  6.91e-06  5.45e-01  
 24  +4.3381e-01  +4.6251e-01  2.87e-02  9.73e-07  5.50e-04  5.09e-07  3.06e-06  6.50e-01  
 25  +4.3249e-01  +4.5801e-01  2.55e-02  8.58e-07  4.85e-04  4.49e-07  2.70e-06  1.73e-01  
 26  +4.2996e-01  +4.4904e-01  1.91e-02  6.24e-07  3.53e-04  3.12e-07  1.97e-06  7.42e-01  
 27  +4.2607e-01  +4.3618e-01  1.01e-02  3.29e-07  1.86e-04  1.64e-07  1.05e-06  5.97e-01  
 28  +4.2539e-01  +4.3369e-01  8.29e-03  2.68e-07  1.52e-04  1.30e-07  8.61e-07  9.90e-01  
 29  +4.2304e-01  +4.2618e-01  3.14e-03  1.02e-07  5.75e-05  4.94e-08  3.30e-07  7.08e-01  
 30  +4.2198e-01  +4.2279e-01  8.08e-04  2.62e-08  1.48e-05  1.22e-08  8.55e-08  9.90e-01  
 31  +4.2166e-01  +4.2180e-01  1.38e-04  4.47e-09  2.52e-06  2.09e-09  1.46e-08  8.83e-01  
 32  +4.2160e-01  +4.2160e-01  1.43e-06  4.65e-11  2.63e-08  2.17e-11  1.52e-10  9.90e-01  
 33  +4.2160e-01  +4.2160e-01  1.43e-08  4.65e-13  2.63e-10  2.17e-13  1.52e-12  9.90e-01  
 34  +4.2160e-01  +4.2160e-01  1.44e-10  4.65e-15  2.64e-12  2.17e-15  1.52e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7642346s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:06 PM: Optimal value: 4.216e-01
(CVXPY) Oct 06 04:33:06 PM: Compilation took 2.975e-01 seconds
(CVXPY) Oct 06 04:33:06 PM: Solver (including time spent in interface) took 1.845e+00 seconds
Iteration: 7, Objective: 0.4216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:07 PM: Your problem has 25081 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:07 PM: Finished problem compilation (took 2.969e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25081
  constraints   = 50081
  nnz(P)        = 0
  nnz(A)        = 376158
  cones (total) = 1
    : Nonnegative = 1,  numel = 50081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4927e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0098e+02  6.00e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5645e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8592e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0003e-01  +1.6574e+00  1.16e+00  3.46e-03  1.94e+00  2.71e-05  1.92e-01  1.69e-01  
  6  +5.0001e-01  +7.4043e-01  2.40e-01  7.17e-04  4.05e-01  6.15e-06  5.10e-02  7.45e-01  
  7  +5.0000e-01  +7.7051e-01  2.71e-01  8.05e-04  4.54e-01  1.02e-05  2.77e-02  5.73e-01  
  8  +4.9985e-01  +7.5062e-01  2.51e-01  5.77e-04  3.27e-01  7.23e-05  2.84e-03  9.23e-01  
  9  +4.9817e-01  +7.4324e-01  2.45e-01  8.63e-05  4.91e-02  7.92e-04  2.45e-04  9.14e-01  
 10  +4.9626e-01  +7.3030e-01  2.34e-01  4.01e-05  2.29e-02  1.49e-03  1.11e-04  6.09e-01  
 11  +4.9642e-01  +7.2865e-01  2.32e-01  3.99e-05  2.27e-02  1.41e-03  1.10e-04  5.64e-02  
 12  +4.9563e-01  +7.1876e-01  2.23e-01  2.79e-05  1.59e-02  1.55e-03  7.62e-05  4.68e-01  
 13  +4.9626e-01  +7.1180e-01  2.16e-01  2.46e-05  1.40e-02  1.13e-03  6.66e-05  4.14e-01  
 14  +4.9505e-01  +7.0401e-01  2.09e-01  1.80e-05  1.03e-02  1.24e-03  4.87e-05  3.99e-01  
 15  +4.9494e-01  +6.9565e-01  2.01e-01  1.49e-05  8.50e-03  8.03e-04  4.01e-05  5.49e-01  
 16  +4.9152e-01  +6.8015e-01  1.89e-01  1.03e-05  5.85e-03  8.36e-04  2.77e-05  4.57e-01  
 17  +4.8689e-01  +6.6044e-01  1.74e-01  8.11e-06  4.62e-03  7.45e-04  2.21e-05  3.11e-01  
 18  +4.8107e-01  +6.3277e-01  1.52e-01  7.05e-06  4.01e-03  6.63e-05  2.11e-05  6.68e-01  
 19  +4.7869e-01  +6.1916e-01  1.40e-01  6.79e-06  3.85e-03  3.80e-05  2.02e-05  3.03e-01  
 20  +4.7276e-01  +5.9464e-01  1.22e-01  5.58e-06  3.17e-03  2.52e-05  1.67e-05  3.37e-01  
 21  +4.6527e-01  +5.6875e-01  1.03e-01  4.39e-06  2.49e-03  7.24e-06  1.29e-05  6.90e-01  
 22  +4.5337e-01  +5.2877e-01  7.54e-02  2.87e-06  1.62e-03  5.01e-06  8.60e-06  3.83e-01  
 23  +4.3218e-01  +4.5682e-01  2.46e-02  8.22e-07  4.65e-04  5.35e-07  2.59e-06  8.94e-01  
 24  +4.3129e-01  +4.5371e-01  2.24e-02  7.42e-07  4.19e-04  4.60e-07  2.34e-06  2.85e-01  
 25  +4.2541e-01  +4.3403e-01  8.62e-03  2.81e-07  1.59e-04  1.55e-07  9.01e-07  8.26e-01  
 26  +4.2521e-01  +4.3336e-01  8.15e-03  2.65e-07  1.50e-04  1.44e-07  8.51e-07  1.40e-01  
 27  +4.2325e-01  +4.2684e-01  3.59e-03  1.16e-07  6.58e-05  5.65e-08  3.76e-07  9.90e-01  
 28  +4.2172e-01  +4.2198e-01  2.57e-04  8.36e-09  4.72e-06  3.97e-09  2.72e-08  9.90e-01  
 29  +4.2160e-01  +4.2160e-01  2.64e-06  8.57e-11  4.84e-08  4.07e-11  2.79e-10  9.90e-01  
 30  +4.2160e-01  +4.2160e-01  2.64e-08  8.57e-13  4.84e-10  4.07e-13  2.79e-12  9.90e-01  
 31  +4.2160e-01  +4.2160e-01  2.68e-10  8.72e-15  4.91e-12  4.07e-15  2.80e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6468768s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:09 PM: Optimal value: 4.216e-01
(CVXPY) Oct 06 04:33:09 PM: Compilation took 2.969e-01 seconds
(CVXPY) Oct 06 04:33:09 PM: Solver (including time spent in interface) took 1.726e+00 seconds
Iteration: 8, Objective: 0.4216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:09 PM: Your problem has 25082 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:09 PM: Finished problem compilation (took 2.822e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25082
  constraints   = 50082
  nnz(P)        = 0
  nnz(A)        = 376220
  cones (total) = 1
    : Nonnegative = 1,  numel = 50082

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4927e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0097e+02  6.00e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5644e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8592e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0003e-01  +1.6436e+00  1.14e+00  3.42e-03  1.92e+00  2.72e-05  1.92e-01  1.71e-01  
  6  +5.0000e-01  +7.4240e-01  2.42e-01  7.23e-04  4.08e-01  6.29e-06  5.14e-02  7.42e-01  
  7  +5.0000e-01  +7.7152e-01  2.72e-01  8.08e-04  4.56e-01  1.05e-05  2.75e-02  5.79e-01  
  8  +4.9985e-01  +7.5052e-01  2.51e-01  5.71e-04  3.23e-01  7.56e-05  2.77e-03  9.23e-01  
  9  +4.9806e-01  +7.4272e-01  2.45e-01  8.31e-05  4.73e-02  8.39e-04  2.36e-04  9.15e-01  
 10  +4.9615e-01  +7.3059e-01  2.34e-01  4.00e-05  2.28e-02  1.54e-03  1.11e-04  5.87e-01  
 11  +4.9632e-01  +7.2914e-01  2.33e-01  3.99e-05  2.27e-02  1.45e-03  1.10e-04  5.22e-02  
 12  +4.9577e-01  +7.2070e-01  2.25e-01  2.99e-05  1.70e-02  1.53e-03  8.19e-05  4.07e-01  
 13  +4.9782e-01  +7.0453e-01  2.07e-01  2.30e-05  1.31e-02  4.29e-04  6.17e-05  9.09e-01  
 14  +4.9789e-01  +7.0272e-01  2.05e-01  2.25e-05  1.28e-02  3.71e-04  6.02e-05  1.58e-01  
 15  +4.9426e-01  +6.8770e-01  1.93e-01  9.95e-06  5.68e-03  6.74e-04  2.66e-05  6.58e-01  
 16  +4.9124e-01  +6.7260e-01  1.81e-01  9.07e-06  5.17e-03  2.93e-04  2.45e-05  5.26e-01  
 17  +4.8761e-01  +6.5810e-01  1.70e-01  7.80e-06  4.44e-03  2.77e-04  2.12e-05  1.73e-01  
 18  +4.8097e-01  +6.3170e-01  1.51e-01  6.96e-06  3.96e-03  5.39e-05  2.04e-05  5.75e-01  
 19  +4.7569e-01  +6.0836e-01  1.33e-01  6.06e-06  3.44e-03  3.20e-05  1.79e-05  3.39e-01  
 20  +4.7080e-01  +5.8931e-01  1.19e-01  5.21e-06  2.95e-03  2.54e-05  1.54e-05  2.17e-01  
 21  +4.6273e-01  +5.6156e-01  9.88e-02  4.03e-06  2.28e-03  8.86e-06  1.19e-05  6.36e-01  
 22  +4.5019e-01  +5.1880e-01  6.86e-02  2.54e-06  1.44e-03  5.41e-06  7.66e-06  4.28e-01  
 23  +4.3510e-01  +4.6704e-01  3.19e-02  1.08e-06  6.10e-04  1.10e-06  3.37e-06  8.17e-01  
 24  +4.3402e-01  +4.6320e-01  2.92e-02  9.73e-07  5.50e-04  8.74e-07  3.04e-06  3.18e-01  
 25  +4.2765e-01  +4.4161e-01  1.40e-02  4.56e-07  2.58e-04  3.14e-07  1.45e-06  7.74e-01  
 26  +4.2620e-01  +4.3677e-01  1.06e-02  3.45e-07  1.95e-04  2.31e-07  1.10e-06  3.13e-01  
 27  +4.2543e-01  +4.3390e-01  8.46e-03  2.74e-07  1.55e-04  1.35e-07  8.81e-07  9.90e-01  
 28  +4.2278e-01  +4.2540e-01  2.62e-03  8.52e-08  4.82e-05  4.17e-08  2.77e-07  7.53e-01  
 29  +4.2170e-01  +4.2197e-01  2.64e-04  8.58e-09  4.85e-06  4.00e-09  2.80e-08  9.90e-01  
 30  +4.2158e-01  +4.2159e-01  3.92e-06  1.27e-10  7.20e-08  5.93e-11  4.16e-10  9.87e-01  
 31  +4.2158e-01  +4.2158e-01  3.92e-08  1.27e-12  7.20e-10  5.93e-13  4.16e-12  9.90e-01  
 32  +4.2158e-01  +4.2158e-01  3.92e-10  1.28e-14  7.20e-12  6.03e-15  4.23e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.673538s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:11 PM: Optimal value: 4.216e-01
(CVXPY) Oct 06 04:33:11 PM: Compilation took 2.822e-01 seconds
(CVXPY) Oct 06 04:33:11 PM: Solver (including time spent in interface) took 1.743e+00 seconds
Iteration: 9, Objective: 0.4216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:11 PM: Your problem has 25084 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:11 PM: Finished problem compilation (took 2.832e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25084
  constraints   = 50084
  nnz(P)        = 0
  nnz(A)        = 376403
  cones (total) = 1
    : Nonnegative = 1,  numel = 50084

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4928e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0094e+02  6.00e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5644e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8593e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0003e-01  +1.6543e+00  1.15e+00  3.45e-03  1.93e+00  2.72e-05  1.92e-01  1.70e-01  
  6  +5.0000e-01  +7.3547e-01  2.35e-01  7.03e-04  3.96e-01  6.07e-06  5.00e-02  7.50e-01  
  7  +5.0000e-01  +7.7358e-01  2.74e-01  8.14e-04  4.59e-01  1.06e-05  2.66e-02  5.94e-01  
  8  +4.9984e-01  +7.5371e-01  2.54e-01  5.70e-04  3.23e-01  7.65e-05  2.71e-03  9.20e-01  
  9  +4.9817e-01  +7.4631e-01  2.48e-01  8.73e-05  4.97e-02  7.91e-04  2.48e-04  9.08e-01  
 10  +4.9737e-01  +7.3757e-01  2.40e-01  5.61e-05  3.20e-02  1.07e-03  1.57e-04  4.51e-01  
 11  +4.9683e-01  +7.3158e-01  2.35e-01  4.26e-05  2.43e-02  1.23e-03  1.18e-04  3.36e-01  
 12  +4.9820e-01  +7.1601e-01  2.18e-01  3.61e-05  2.06e-02  5.67e-04  9.78e-05  6.68e-01  
 13  +4.9588e-01  +7.0680e-01  2.11e-01  1.71e-05  9.75e-03  1.09e-03  4.59e-05  5.64e-01  
 14  +4.9542e-01  +7.0202e-01  2.07e-01  1.51e-05  8.62e-03  9.72e-04  4.06e-05  2.77e-01  
 15  +4.9434e-01  +6.9708e-01  2.03e-01  1.32e-05  7.54e-03  1.01e-03  3.55e-05  1.67e-01  
 16  +4.9263e-01  +6.7732e-01  1.85e-01  1.02e-05  5.83e-03  7.53e-05  2.75e-05  9.90e-01  
 17  +4.8830e-01  +6.6018e-01  1.72e-01  8.13e-06  4.63e-03  7.56e-05  2.21e-05  2.35e-01  
 18  +4.8140e-01  +6.3439e-01  1.53e-01  7.10e-06  4.04e-03  9.42e-06  2.11e-05  6.66e-01  
 19  +4.8037e-01  +6.2952e-01  1.49e-01  7.04e-06  4.00e-03  7.57e-06  2.08e-05  1.65e-01  
 20  +4.7420e-01  +6.0317e-01  1.29e-01  5.80e-06  3.29e-03  5.91e-06  1.74e-05  2.38e-01  
 21  +4.6994e-01  +5.8618e-01  1.16e-01  5.08e-06  2.88e-03  4.94e-06  1.53e-05  1.82e-01  
 22  +4.6232e-01  +5.5901e-01  9.67e-02  3.98e-06  2.25e-03  2.31e-06  1.18e-05  6.09e-01  
 23  +4.4948e-01  +5.1627e-01  6.68e-02  2.47e-06  1.40e-03  1.46e-06  7.47e-06  4.72e-01  
 24  +4.4448e-01  +4.9933e-01  5.49e-02  1.96e-06  1.11e-03  1.11e-06  5.99e-06  3.35e-01  
 25  +4.3899e-01  +4.8066e-01  4.17e-02  1.42e-06  8.06e-04  7.42e-07  4.41e-06  5.53e-01  
 26  +4.3239e-01  +4.5792e-01  2.55e-02  8.35e-07  4.72e-04  3.93e-07  2.62e-06  9.90e-01  
 27  +4.2614e-01  +4.3704e-01  1.09e-02  3.55e-07  2.01e-04  1.69e-07  1.14e-06  6.85e-01  
 28  +4.2571e-01  +4.3560e-01  9.89e-03  3.22e-07  1.82e-04  1.54e-07  1.03e-06  1.43e-01  
 29  +4.2455e-01  +4.3145e-01  6.90e-03  2.24e-07  1.27e-04  1.08e-07  7.22e-07  9.90e-01  
 30  +4.2235e-01  +4.2445e-01  2.09e-03  6.81e-08  3.85e-05  3.27e-08  2.22e-07  7.51e-01  
 31  +4.2143e-01  +4.2149e-01  6.26e-05  2.04e-09  1.15e-06  9.76e-10  6.67e-09  9.71e-01  
 32  +4.2140e-01  +4.2140e-01  6.29e-07  2.05e-11  1.16e-08  9.81e-12  6.70e-11  9.90e-01  
 33  +4.2140e-01  +4.2140e-01  6.41e-09  2.09e-13  1.18e-10  9.82e-14  6.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7267479s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:13 PM: Optimal value: 4.214e-01
(CVXPY) Oct 06 04:33:13 PM: Compilation took 2.832e-01 seconds
(CVXPY) Oct 06 04:33:13 PM: Solver (including time spent in interface) took 1.801e+00 seconds
FULL MODEL:
  Accruacy: 0.57856
  Our objective: 0.15711999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.15208)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.00044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.00096)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.00024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.00056)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.00088)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.00056)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 41.02214503288269
Best over terms:
  Our final objective: 0.15208
    Its accruacy: 0.57604
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15208
  Highest accruacy: 0.57604
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

