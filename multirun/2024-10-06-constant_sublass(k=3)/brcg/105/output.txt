Command:
python test_script.py -s constant_subclass -d 3 -n 5000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1372
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 3.

Computed total variation: 0.1372
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:47:28 PM: Your problem has 2507 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:47:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:47:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:47:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:47:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:47:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:47:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:47:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:47:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:47:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:47:28 PM: Finished problem compilation (took 5.604e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2507
  constraints   = 5007
  nnz(P)        = 0
  nnz(A)        = 15007
  cones (total) = 1
    : Nonnegative = 1,  numel = 5007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5007e+03  2.50e+03  9.77e-01  5.51e+01  1.00e+00  1.00e+00   ------   
  1  +6.2007e-01  +4.6377e+02  4.63e+02  3.04e-01  2.86e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5567e-01  +7.9514e+01  7.90e+01  1.33e-01  1.49e+01  6.69e-03  2.20e-01  6.64e-01  
  3  +5.0847e-01  +1.3025e+01  1.25e+01  8.57e-02  9.21e+00  1.07e-05  2.18e-01  6.39e-02  
  4  +5.0001e-01  +1.0441e+00  5.44e-01  5.15e-03  5.67e-01  5.07e-06  1.61e-01  6.46e-01  
  5  +4.9996e-01  +6.1030e-01  1.10e-01  1.04e-03  1.16e-01  1.50e-06  3.03e-02  8.29e-01  
  6  +4.9749e-01  +7.8020e-01  2.83e-01  8.85e-04  9.89e-02  3.27e-05  3.06e-03  9.51e-01  
  7  +4.8117e-01  +6.0819e-01  1.27e-01  6.71e-05  7.50e-03  1.73e-04  2.11e-04  9.31e-01  
  8  +4.6794e-01  +4.8710e-01  1.92e-02  9.60e-06  1.07e-03  1.68e-06  3.27e-05  9.02e-01  
  9  +4.6350e-01  +4.6597e-01  2.47e-03  1.11e-06  1.24e-04  2.10e-07  4.21e-06  9.06e-01  
 10  +4.6252e-01  +4.6258e-01  5.97e-05  2.44e-08  2.72e-06  5.31e-09  1.02e-07  9.88e-01  
 11  +4.6250e-01  +4.6250e-01  5.97e-07  2.44e-10  2.72e-08  5.31e-11  1.02e-09  9.90e-01  
 12  +4.6250e-01  +4.6250e-01  5.97e-09  2.44e-12  2.72e-10  5.58e-13  1.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.7274ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:28 PM: Problem status: optimal
(CVXPY) Oct 06 03:47:28 PM: Optimal value: 4.625e-01
(CVXPY) Oct 06 03:47:28 PM: Compilation took 5.604e-02 seconds
(CVXPY) Oct 06 03:47:28 PM: Solver (including time spent in interface) took 4.394e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:47:28 PM: Your problem has 2510 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:47:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:47:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:47:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:47:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:47:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:47:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:47:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:47:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:47:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:47:28 PM: Finished problem compilation (took 1.521e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2510
  constraints   = 5010
  nnz(P)        = 0
  nnz(A)        = 16975
  cones (total) = 1
    : Nonnegative = 1,  numel = 5010

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0001e-01  +2.5014e+03  2.50e+03  9.77e-01  5.74e+01  1.00e+00  1.00e+00   ------   
  1  +6.1980e-01  +4.6429e+02  4.64e+02  3.05e-01  2.98e+01  4.25e-03  4.37e-01  6.93e-01  
  2  +5.5538e-01  +7.9223e+01  7.87e+01  1.33e-01  1.55e+01  6.73e-03  2.20e-01  6.67e-01  
  3  +5.0821e-01  +1.2744e+01  1.22e+01  8.46e-02  9.46e+00  1.06e-05  2.18e-01  6.83e-02  
  4  +5.0110e-01  +2.6400e+00  2.14e+00  2.01e-02  2.25e+00  6.15e-06  1.99e-01  2.00e-01  
  5  +4.9999e-01  +6.1879e-01  1.19e-01  1.12e-03  1.30e-01  1.27e-06  3.28e-02  9.90e-01  
  6  +4.9955e-01  +7.7319e-01  2.74e-01  2.14e-03  2.47e-01  7.84e-06  1.13e-02  8.26e-01  
  7  +4.8822e-01  +6.4006e-01  1.52e-01  1.10e-04  1.28e-02  1.31e-04  3.20e-04  9.72e-01  
  8  +4.8486e-01  +6.3525e-01  1.50e-01  8.08e-05  9.45e-03  1.62e-04  2.27e-04  3.39e-01  
  9  +4.8498e-01  +6.3388e-01  1.49e-01  7.22e-05  8.44e-03  1.27e-04  2.02e-04  3.47e-01  
 10  +4.8032e-01  +5.9801e-01  1.18e-01  6.23e-05  7.27e-03  5.72e-05  2.01e-04  1.62e-01  
 11  +4.8051e-01  +5.9604e-01  1.16e-01  6.26e-05  7.30e-03  5.47e-05  2.00e-04  1.10e-02  
 12  +4.8115e-01  +5.8773e-01  1.07e-01  6.28e-05  7.32e-03  4.24e-05  1.96e-04  1.17e-01  
 13  +4.6913e-01  +5.2815e-01  5.90e-02  2.83e-05  3.30e-03  1.65e-05  8.56e-05  7.74e-01  
 14  +4.4268e-01  +4.6294e-01  2.03e-02  6.42e-06  7.46e-04  8.35e-06  1.98e-05  8.01e-01  
 15  +4.3175e-01  +4.3223e-01  4.72e-04  1.47e-07  1.71e-05  8.24e-08  4.67e-07  9.83e-01  
 16  +4.3150e-01  +4.3151e-01  4.72e-06  1.47e-09  1.71e-07  8.24e-10  4.67e-09  9.90e-01  
 17  +4.3150e-01  +4.3150e-01  4.73e-08  1.47e-11  1.71e-09  8.28e-12  4.69e-11  9.90e-01  
 18  +4.3150e-01  +4.3150e-01  4.73e-10  1.47e-13  1.71e-11  8.31e-14  4.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 44.4562ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:28 PM: Problem status: optimal
(CVXPY) Oct 06 03:47:28 PM: Optimal value: 4.315e-01
(CVXPY) Oct 06 03:47:28 PM: Compilation took 1.521e-02 seconds
(CVXPY) Oct 06 03:47:28 PM: Solver (including time spent in interface) took 4.513e-02 seconds
FULL MODEL:
  Accruacy: 0.5686
  Our objective: 0.13719999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1372)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.800489902496338
Best over terms:
  Our final objective: 0.13719999999999996
    Its accruacy: 0.5686
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.13719999999999996
  Highest accruacy: 0.5686
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

