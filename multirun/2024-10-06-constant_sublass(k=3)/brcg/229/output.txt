Command:
python test_script.py -s constant_subclass -d 6 -n 5000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1452
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.1752
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:11 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:11 PM: Finished problem compilation (took 5.178e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.79e-01  6.98e+01  1.00e+00  1.00e+00   ------   
  1  +5.9310e-01  +5.1464e+02  5.14e+02  3.83e-01  4.23e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4179e-01  +6.8254e+01  6.77e+01  1.46e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.0994e-01  +1.6748e+01  1.62e+01  1.03e-01  1.40e+01  2.83e-05  2.38e-01  1.33e-01  
  4  +5.0021e-01  +1.0163e+00  5.16e-01  4.96e-03  6.91e-01  7.02e-06  1.16e-01  9.90e-01  
  5  +5.0000e-01  +6.4929e-01  1.49e-01  1.42e-03  1.99e-01  4.14e-06  2.84e-02  8.06e-01  
  6  +4.9585e-01  +1.1399e+00  6.44e-01  9.34e-04  1.32e-01  1.56e-04  2.96e-03  9.85e-01  
  7  +4.8487e-01  +8.7858e-01  3.94e-01  2.16e-04  3.06e-02  3.00e-04  6.78e-04  7.78e-01  
  8  +4.7386e-01  +6.0488e-01  1.31e-01  6.75e-05  9.55e-03  2.95e-06  2.29e-04  8.49e-01  
  9  +4.5477e-01  +4.8725e-01  3.25e-02  1.43e-05  2.02e-03  2.50e-06  5.65e-05  9.90e-01  
 10  +4.4619e-01  +4.5261e-01  6.41e-03  2.70e-06  3.81e-04  5.42e-07  1.14e-05  9.90e-01  
 11  +4.4421e-01  +4.4454e-01  3.31e-04  1.39e-07  1.96e-05  2.94e-08  6.01e-07  9.90e-01  
 12  +4.4410e-01  +4.4410e-01  3.31e-06  1.39e-09  1.96e-07  2.94e-10  6.01e-09  9.90e-01  
 13  +4.4410e-01  +4.4410e-01  3.31e-08  1.39e-11  1.96e-09  2.94e-12  6.02e-11  9.90e-01  
 14  +4.4410e-01  +4.4410e-01  3.31e-10  1.39e-13  1.96e-11  2.94e-14  6.02e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 40.0864ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:11 PM: Optimal value: 4.441e-01
(CVXPY) Oct 06 03:59:11 PM: Compilation took 5.178e-02 seconds
(CVXPY) Oct 06 03:59:11 PM: Solver (including time spent in interface) took 4.508e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:11 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:11 PM: Finished problem compilation (took 1.979e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 26828
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.30e+01  1.00e+00  1.00e+00   ------   
  1  +5.9293e-01  +5.1483e+02  5.14e+02  3.83e-01  4.42e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4146e-01  +6.7917e+01  6.74e+01  1.46e-01  2.12e+01  1.16e-02  2.44e-01  8.29e-01  
  3  +5.0975e-01  +1.6551e+01  1.60e+01  1.02e-01  1.45e+01  2.83e-05  2.37e-01  1.40e-01  
  4  +5.0034e-01  +1.2736e+00  7.73e-01  7.44e-03  1.08e+00  7.83e-06  1.35e-01  8.14e-01  
  5  +5.0012e-01  +8.6904e-01  3.69e-01  3.52e-03  5.14e-01  4.98e-06  6.50e-02  5.88e-01  
  6  +4.9964e-01  +8.4098e-01  3.41e-01  2.39e-03  3.51e-01  1.79e-05  1.06e-02  9.73e-01  
  7  +4.9096e-01  +7.5097e-01  2.60e-01  1.85e-04  2.75e-02  2.33e-04  5.47e-04  9.49e-01  
  8  +4.8694e-01  +7.0178e-01  2.15e-01  1.44e-04  2.14e-02  1.58e-04  4.25e-04  3.47e-01  
  9  +4.8804e-01  +6.9383e-01  2.06e-01  1.27e-04  1.88e-02  7.08e-05  3.73e-04  5.80e-01  
 10  +4.8630e-01  +6.8131e-01  1.95e-01  1.10e-04  1.63e-02  6.59e-05  3.20e-04  2.16e-01  
 11  +4.8613e-01  +6.7590e-01  1.90e-01  1.08e-04  1.60e-02  5.02e-05  3.11e-04  2.46e-01  
 12  +4.7917e-01  +6.3723e-01  1.58e-01  6.99e-05  1.04e-02  4.94e-05  2.02e-04  3.68e-01  
 13  +4.7660e-01  +6.2320e-01  1.47e-01  6.90e-05  1.02e-02  4.17e-05  2.02e-04  1.57e-02  
 14  +4.6962e-01  +5.9097e-01  1.21e-01  4.89e-05  7.24e-03  3.44e-05  1.43e-04  3.87e-01  
 15  +4.6794e-01  +5.8229e-01  1.14e-01  4.65e-05  6.88e-03  2.48e-05  1.36e-04  3.19e-01  
 16  +4.6181e-01  +5.5711e-01  9.53e-02  3.39e-05  5.02e-03  1.63e-05  9.95e-05  6.44e-01  
 17  +4.4486e-01  +4.9088e-01  4.60e-02  1.52e-05  2.24e-03  6.75e-06  4.64e-05  6.28e-01  
 18  +4.2883e-01  +4.3174e-01  2.91e-03  9.14e-07  1.35e-04  2.51e-07  2.91e-06  9.86e-01  
 19  +4.2751e-01  +4.2754e-01  2.97e-05  9.31e-09  1.37e-06  2.54e-09  2.98e-08  9.90e-01  
 20  +4.2750e-01  +4.2750e-01  2.97e-07  9.31e-11  1.37e-08  2.54e-11  2.98e-10  9.90e-01  
 21  +4.2750e-01  +4.2750e-01  2.97e-09  9.31e-13  1.37e-10  2.54e-13  2.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.9594ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:11 PM: Optimal value: 4.275e-01
(CVXPY) Oct 06 03:59:11 PM: Compilation took 1.979e-02 seconds
(CVXPY) Oct 06 03:59:11 PM: Solver (including time spent in interface) took 7.512e-02 seconds
Iteration: 2, Objective: 0.4275
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:11 PM: Your problem has 2533 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:11 PM: Finished problem compilation (took 2.035e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2533
  constraints   = 5033
  nnz(P)        = 0
  nnz(A)        = 27983
  cones (total) = 1
    : Nonnegative = 1,  numel = 5033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.79e-01  7.31e+01  1.00e+00  1.00e+00   ------   
  1  +5.9271e-01  +5.1516e+02  5.15e+02  3.84e-01  4.42e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4131e-01  +6.7807e+01  6.73e+01  1.46e-01  2.11e+01  1.16e-02  2.44e-01  8.31e-01  
  3  +5.0971e-01  +1.6522e+01  1.60e+01  1.02e-01  1.44e+01  2.85e-05  2.37e-01  1.42e-01  
  4  +5.0031e-01  +1.2239e+00  7.24e-01  6.97e-03  1.01e+00  7.83e-06  1.29e-01  8.52e-01  
  5  +5.0007e-01  +8.0428e-01  3.04e-01  2.91e-03  4.25e-01  4.95e-06  5.08e-02  6.64e-01  
  6  +4.9772e-01  +1.1854e+00  6.88e-01  1.67e-03  2.48e-01  8.11e-05  5.13e-03  9.90e-01  
  7  +4.8859e-01  +9.7948e-01  4.91e-01  3.48e-04  5.19e-02  2.35e-04  1.02e-03  8.02e-01  
  8  +4.8541e-01  +7.7155e-01  2.86e-01  1.84e-04  2.73e-02  6.25e-05  5.33e-04  7.25e-01  
  9  +4.8162e-01  +7.3986e-01  2.58e-01  1.39e-04  2.07e-02  5.96e-05  4.01e-04  3.24e-01  
 10  +4.8256e-01  +7.2059e-01  2.38e-01  1.35e-04  2.01e-02  4.28e-05  3.90e-04  2.16e-01  
 11  +4.7536e-01  +6.7218e-01  1.97e-01  9.10e-05  1.35e-02  3.75e-05  2.64e-04  4.15e-01  
 12  +4.7333e-01  +6.5164e-01  1.78e-01  8.24e-05  1.22e-02  2.81e-05  2.40e-04  3.00e-01  
 13  +4.6052e-01  +5.8690e-01  1.26e-01  4.99e-05  7.40e-03  1.97e-05  1.49e-04  4.68e-01  
 14  +4.5117e-01  +5.4531e-01  9.41e-02  3.47e-05  5.14e-03  1.45e-05  1.05e-04  3.18e-01  
 15  +4.4709e-01  +5.2824e-01  8.11e-02  2.85e-05  4.21e-03  1.26e-05  8.70e-05  2.12e-01  
 16  +4.4654e-01  +5.2508e-01  7.85e-02  2.83e-05  4.18e-03  1.18e-05  8.68e-05  4.01e-02  
 17  +4.3684e-01  +4.8555e-01  4.87e-02  1.64e-05  2.42e-03  7.26e-06  5.14e-05  4.71e-01  
 18  +4.2273e-01  +4.2892e-01  6.19e-03  2.00e-06  2.95e-04  8.02e-07  6.52e-06  9.90e-01  
 19  +4.2003e-01  +4.2010e-01  6.95e-05  2.24e-08  3.31e-06  8.75e-09  7.38e-08  9.90e-01  
 20  +4.2000e-01  +4.2000e-01  6.95e-07  2.24e-10  3.31e-08  8.75e-11  7.38e-10  9.90e-01  
 21  +4.2000e-01  +4.2000e-01  6.95e-09  2.24e-12  3.31e-10  8.76e-13  7.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.4881ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:11 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:11 PM: Optimal value: 4.200e-01
(CVXPY) Oct 06 03:59:11 PM: Compilation took 2.035e-02 seconds
(CVXPY) Oct 06 03:59:11 PM: Solver (including time spent in interface) took 8.492e-02 seconds
Iteration: 3, Objective: 0.4200
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:12 PM: Your problem has 2541 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:12 PM: Finished problem compilation (took 2.098e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2541
  constraints   = 5041
  nnz(P)        = 0
  nnz(A)        = 28733
  cones (total) = 1
    : Nonnegative = 1,  numel = 5041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.9267e-01  +5.1527e+02  5.15e+02  3.85e-01  4.42e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4120e-01  +6.7703e+01  6.72e+01  1.46e-01  2.11e+01  1.16e-02  2.44e-01  8.32e-01  
  3  +5.0968e-01  +1.6492e+01  1.60e+01  1.02e-01  1.44e+01  2.85e-05  2.37e-01  1.43e-01  
  4  +5.0029e-01  +1.1812e+00  6.81e-01  6.57e-03  9.57e-01  7.78e-06  1.25e-01  8.83e-01  
  5  +5.0007e-01  +8.0874e-01  3.09e-01  2.95e-03  4.32e-01  5.28e-06  5.06e-02  6.38e-01  
  6  +4.9788e-01  +1.1322e+00  6.34e-01  1.68e-03  2.49e-01  7.72e-05  5.17e-03  9.90e-01  
  7  +4.8866e-01  +9.4664e-01  4.58e-01  3.30e-04  4.92e-02  2.46e-04  9.62e-04  8.15e-01  
  8  +4.8778e-01  +8.4910e-01  3.61e-01  2.53e-04  3.76e-02  1.43e-04  7.30e-04  4.03e-01  
  9  +4.8103e-01  +7.7829e-01  2.97e-01  1.62e-04  2.41e-02  1.33e-04  4.68e-04  4.07e-01  
 10  +4.7990e-01  +7.4240e-01  2.62e-01  1.27e-04  1.88e-02  9.71e-05  3.62e-04  4.26e-01  
 11  +4.8217e-01  +7.2396e-01  2.42e-01  1.22e-04  1.82e-02  5.95e-05  3.47e-04  3.28e-01  
 12  +4.6829e-01  +6.3082e-01  1.63e-01  6.65e-05  9.88e-03  3.40e-05  1.95e-04  6.19e-01  
 13  +4.5773e-01  +5.7820e-01  1.20e-01  4.63e-05  6.85e-03  2.10e-05  1.39e-04  4.54e-01  
 14  +4.5686e-01  +5.7233e-01  1.15e-01  4.54e-05  6.72e-03  1.86e-05  1.38e-04  1.15e-01  
 15  +4.3694e-01  +4.8930e-01  5.24e-02  1.83e-05  2.70e-03  7.59e-06  5.80e-05  6.73e-01  
 16  +4.3348e-01  +4.7612e-01  4.26e-02  1.47e-05  2.17e-03  6.12e-06  4.70e-05  2.92e-01  
 17  +4.2051e-01  +4.2834e-01  7.84e-03  2.60e-06  3.84e-04  1.01e-06  8.66e-06  9.90e-01  
 18  +4.1718e-01  +4.1736e-01  1.79e-04  5.92e-08  8.73e-06  2.23e-08  2.00e-07  9.79e-01  
 19  +4.1710e-01  +4.1710e-01  1.79e-06  5.92e-10  8.74e-08  2.23e-10  2.00e-09  9.90e-01  
 20  +4.1710e-01  +4.1710e-01  1.79e-08  5.92e-12  8.74e-10  2.23e-12  2.00e-11  9.90e-01  
 21  +4.1710e-01  +4.1710e-01  1.79e-10  5.91e-14  8.74e-12  2.24e-14  2.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.0459ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:12 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:12 PM: Optimal value: 4.171e-01
(CVXPY) Oct 06 03:59:12 PM: Compilation took 2.098e-02 seconds
(CVXPY) Oct 06 03:59:12 PM: Solver (including time spent in interface) took 8.011e-02 seconds
FULL MODEL:
  Accruacy: 0.5832
  Our objective: 0.16640000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.1452)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0152)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.897395610809326
Best over terms:
  Our final objective: 0.1452
    Its accruacy: 0.5726
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1452
  Highest accruacy: 0.5726
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

