Command:
python test_script.py -s constant_subclass -d 4 -n 5000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16519999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.1664
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:58 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:58 PM: Finished problem compilation (took 4.834e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5008e+03  2.50e+03  9.78e-01  6.05e+01  1.00e+00  1.00e+00   ------   
  1  +6.0813e-01  +4.8464e+02  4.84e+02  3.36e-01  3.36e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5084e-01  +7.5484e+01  7.49e+01  1.37e-01  1.68e+01  8.24e-03  2.27e-01  7.26e-01  
  3  +5.0990e-01  +1.5572e+01  1.51e+01  9.56e-02  1.13e+01  1.68e-05  2.24e-01  7.68e-02  
  4  +5.0006e-01  +1.0923e+00  5.92e-01  5.63e-03  6.80e-01  6.62e-06  1.50e-01  7.58e-01  
  5  +4.9991e-01  +6.5911e-01  1.59e-01  1.50e-03  1.83e-01  3.41e-06  3.07e-02  8.33e-01  
  6  +4.9052e-01  +9.3206e-01  4.42e-01  5.45e-04  6.72e-02  1.55e-04  1.68e-03  9.74e-01  
  7  +4.7317e-01  +6.5364e-01  1.80e-01  1.03e-04  1.26e-02  1.77e-04  3.21e-04  8.29e-01  
  8  +4.5902e-01  +5.1928e-01  6.03e-02  3.15e-05  3.85e-03  4.44e-05  1.06e-04  7.15e-01  
  9  +4.5160e-01  +4.6521e-01  1.36e-02  6.69e-06  8.19e-04  1.63e-06  2.42e-05  9.90e-01  
 10  +4.4821e-01  +4.5013e-01  1.92e-03  8.81e-07  1.08e-04  2.22e-07  3.50e-06  8.72e-01  
 11  +4.4751e-01  +4.4755e-01  4.02e-05  1.69e-08  2.07e-06  4.30e-09  7.33e-08  9.85e-01  
 12  +4.4750e-01  +4.4750e-01  4.02e-07  1.69e-10  2.07e-08  4.30e-11  7.33e-10  9.90e-01  
 13  +4.4750e-01  +4.4750e-01  4.02e-09  1.69e-12  2.07e-10  4.57e-13  7.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.0847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:58 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:58 PM: Optimal value: 4.475e-01
(CVXPY) Oct 06 03:50:58 PM: Compilation took 4.834e-02 seconds
(CVXPY) Oct 06 03:50:58 PM: Solver (including time spent in interface) took 3.685e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:58 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:58 PM: Finished problem compilation (took 1.969e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22634
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5011e+03  2.50e+03  9.78e-01  6.52e+01  1.00e+00  1.00e+00   ------   
  1  +6.0782e-01  +4.8550e+02  4.85e+02  3.37e-01  3.62e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5036e-01  +7.5023e+01  7.45e+01  1.37e-01  1.79e+01  8.34e-03  2.27e-01  7.31e-01  
  3  +5.0966e-01  +1.5333e+01  1.48e+01  9.50e-02  1.21e+01  1.68e-05  2.24e-01  8.23e-02  
  4  +5.0048e-01  +1.7634e+00  1.26e+00  1.20e-02  1.54e+00  7.52e-06  1.78e-01  4.47e-01  
  5  +5.0009e-01  +8.1426e-01  3.14e-01  2.99e-03  3.89e-01  2.36e-06  6.12e-02  6.81e-01  
  6  +5.0000e-01  +8.4220e-01  3.42e-01  3.17e-03  4.14e-01  3.97e-06  3.17e-02  5.92e-01  
  7  +4.9856e-01  +8.4967e-01  3.51e-01  1.17e-03  1.56e-01  2.49e-05  3.65e-03  9.90e-01  
  8  +4.9216e-01  +7.8936e-01  2.97e-01  2.61e-04  3.47e-02  9.42e-05  7.37e-04  8.00e-01  
  9  +4.8815e-01  +7.4280e-01  2.55e-01  1.70e-04  2.26e-02  8.77e-05  4.78e-04  4.79e-01  
 10  +4.8772e-01  +7.2579e-01  2.38e-01  1.56e-04  2.07e-02  6.84e-05  4.35e-04  2.54e-01  
 11  +4.8743e-01  +7.2106e-01  2.34e-01  1.47e-04  1.95e-02  6.37e-05  4.08e-04  1.49e-01  
 12  +4.8304e-01  +6.8965e-01  2.07e-01  1.02e-04  1.36e-02  5.32e-05  2.83e-04  5.24e-01  
 13  +4.8172e-01  +6.7952e-01  1.98e-01  9.95e-05  1.32e-02  4.38e-05  2.77e-04  1.58e-01  
 14  +4.7348e-01  +6.4112e-01  1.68e-01  7.17e-05  9.50e-03  3.63e-05  2.03e-04  3.94e-01  
 15  +4.5796e-01  +5.6485e-01  1.07e-01  4.09e-05  5.40e-03  7.74e-06  1.20e-04  9.90e-01  
 16  +4.3027e-01  +4.6258e-01  3.23e-02  1.09e-05  1.44e-03  2.37e-06  3.43e-05  7.98e-01  
 17  +4.1795e-01  +4.2005e-01  2.10e-03  6.91e-07  9.09e-05  1.20e-07  2.28e-06  9.39e-01  
 18  +4.1702e-01  +4.1706e-01  4.19e-05  1.38e-08  1.82e-06  3.50e-09  4.65e-08  9.87e-01  
 19  +4.1700e-01  +4.1700e-01  4.19e-07  1.38e-10  1.81e-08  3.50e-11  4.65e-10  9.90e-01  
 20  +4.1700e-01  +4.1700e-01  4.19e-09  1.38e-12  1.81e-10  3.50e-13  4.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 55.6807ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:58 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:58 PM: Optimal value: 4.170e-01
(CVXPY) Oct 06 03:50:58 PM: Compilation took 1.969e-02 seconds
(CVXPY) Oct 06 03:50:58 PM: Solver (including time spent in interface) took 6.035e-02 seconds
Iteration: 2, Objective: 0.4170
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:58 PM: Your problem has 2520 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:58 PM: Finished problem compilation (took 1.820e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2520
  constraints   = 5020
  nnz(P)        = 0
  nnz(A)        = 22804
  cones (total) = 1
    : Nonnegative = 1,  numel = 5020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5010e+03  2.50e+03  9.78e-01  6.52e+01  1.00e+00  1.00e+00   ------   
  1  +6.0779e-01  +4.8557e+02  4.85e+02  3.37e-01  3.62e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5033e-01  +7.4990e+01  7.44e+01  1.37e-01  1.79e+01  8.34e-03  2.27e-01  7.31e-01  
  3  +5.0966e-01  +1.5336e+01  1.48e+01  9.50e-02  1.21e+01  1.68e-05  2.24e-01  8.22e-02  
  4  +5.0044e-01  +1.7033e+00  1.20e+00  1.15e-02  1.47e+00  7.48e-06  1.76e-01  4.67e-01  
  5  +5.0008e-01  +8.1471e-01  3.15e-01  2.99e-03  3.90e-01  2.45e-06  6.10e-02  6.74e-01  
  6  +4.9999e-01  +8.4290e-01  3.43e-01  3.16e-03  4.14e-01  4.23e-06  3.03e-02  6.15e-01  
  7  +4.9803e-01  +8.2723e-01  3.29e-01  9.13e-04  1.21e-01  3.22e-05  2.77e-03  9.90e-01  
  8  +4.9107e-01  +7.6590e-01  2.75e-01  2.29e-04  3.05e-02  1.02e-04  6.49e-04  7.70e-01  
  9  +4.8852e-01  +7.3653e-01  2.48e-01  1.67e-04  2.23e-02  9.11e-05  4.68e-04  4.36e-01  
 10  +4.8825e-01  +7.0594e-01  2.18e-01  1.32e-04  1.76e-02  4.22e-05  3.65e-04  6.64e-01  
 11  +4.8439e-01  +6.8758e-01  2.03e-01  1.05e-04  1.39e-02  4.32e-05  2.90e-04  2.48e-01  
 12  +4.8242e-01  +6.7037e-01  1.88e-01  9.57e-05  1.27e-02  2.83e-05  2.66e-04  4.49e-01  
 13  +4.7149e-01  +6.2513e-01  1.54e-01  6.34e-05  8.40e-03  2.52e-05  1.80e-04  4.06e-01  
 14  +4.3839e-01  +4.8904e-01  5.06e-02  1.72e-05  2.27e-03  3.55e-06  5.27e-05  9.90e-01  
 15  +4.1908e-01  +4.2362e-01  4.54e-03  1.50e-06  1.97e-04  3.87e-07  4.91e-06  9.58e-01  
 16  +4.1709e-01  +4.1726e-01  1.78e-04  5.85e-08  7.70e-06  2.08e-08  1.97e-07  9.87e-01  
 17  +4.1700e-01  +4.1700e-01  1.80e-06  5.93e-10  7.81e-08  2.10e-10  2.00e-09  9.90e-01  
 18  +4.1700e-01  +4.1700e-01  1.80e-08  5.94e-12  7.82e-10  2.11e-12  2.00e-11  9.90e-01  
 19  +4.1700e-01  +4.1700e-01  1.80e-10  5.95e-14  7.83e-12  2.11e-14  2.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.5435ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:59 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:59 PM: Optimal value: 4.170e-01
(CVXPY) Oct 06 03:50:59 PM: Compilation took 1.820e-02 seconds
(CVXPY) Oct 06 03:50:59 PM: Solver (including time spent in interface) took 5.690e-02 seconds
FULL MODEL:
  Accruacy: 0.5832
  Our objective: 0.16639999999999994

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.1652)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.0012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.2402565479278564
Best over terms:
  Our final objective: 0.16519999999999996
    Its accruacy: 0.5826
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.16519999999999996
  Highest accruacy: 0.5826
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

