Command:
python test_script.py -s constant_subclass -d 5 -n 500 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.184
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.328
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:44 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:44 PM: Finished problem compilation (took 4.925e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +2.5080e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9868e-01  +5.0506e+01  4.99e+01  3.44e-01  1.15e+01  3.99e-03  5.05e-01  6.45e-01  
  2  +5.4278e-01  +7.2603e+00  6.72e+00  1.15e-01  4.68e+00  1.02e-02  2.24e-01  8.12e-01  
  3  +5.0146e-01  +1.3785e+00  8.77e-01  2.61e-02  1.03e+00  9.91e-04  1.94e-01  5.16e-01  
  4  +4.9971e-01  +6.9449e-01  1.95e-01  5.78e-03  2.35e-01  3.28e-04  4.29e-02  8.31e-01  
  5  +4.7932e-01  +8.6000e-01  3.81e-01  2.03e-03  8.46e-02  3.78e-03  6.51e-03  9.48e-01  
  6  +4.5491e-01  +5.6642e-01  1.12e-01  5.26e-04  2.18e-02  3.76e-05  1.93e-03  8.31e-01  
  7  +4.3829e-01  +4.8729e-01  4.90e-02  2.14e-04  8.84e-03  2.90e-05  8.86e-04  7.80e-01  
  8  +4.2752e-01  +4.3839e-01  1.09e-02  4.59e-05  1.89e-03  9.33e-06  2.04e-04  9.90e-01  
  9  +4.2415e-01  +4.2429e-01  1.40e-04  5.90e-07  2.43e-05  1.10e-07  2.70e-06  9.90e-01  
 10  +4.2410e-01  +4.2410e-01  1.40e-06  5.90e-09  2.43e-07  1.10e-09  2.70e-08  9.90e-01  
 11  +4.2410e-01  +4.2410e-01  1.40e-08  5.90e-11  2.43e-09  1.10e-11  2.70e-10  9.90e-01  
 12  +4.2410e-01  +4.2410e-01  1.40e-10  5.90e-13  2.43e-11  1.10e-13  2.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7002ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:44 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 03:53:44 PM: Compilation took 4.925e-02 seconds
(CVXPY) Oct 06 03:53:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:44 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:44 PM: Finished problem compilation (took 6.088e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2533
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9847e-01  +2.5212e+02  2.52e+02  9.34e-01  2.11e+01  1.00e+00  1.02e+00   ------   
  1  +5.9263e-01  +5.0900e+01  5.03e+01  3.49e-01  1.21e+01  3.98e-03  5.14e-01  6.43e-01  
  2  +5.3697e-01  +6.6426e+00  6.11e+00  1.04e-01  4.46e+00  1.09e-02  2.06e-01  8.71e-01  
  3  +5.0243e-01  +1.8705e+00  1.37e+00  4.00e-02  1.67e+00  3.21e-03  1.64e-01  5.70e-01  
  4  +4.9120e-01  +1.0525e+00  5.61e-01  9.34e-03  4.12e-01  4.44e-03  2.79e-02  9.05e-01  
  5  +4.6858e-01  +8.6761e-01  3.99e-01  3.35e-03  1.48e-01  6.25e-03  9.97e-03  6.63e-01  
  6  +4.4831e-01  +6.6475e-01  2.16e-01  1.65e-03  7.19e-02  6.50e-04  5.64e-03  7.40e-01  
  7  +4.3391e-01  +5.6705e-01  1.33e-01  7.26e-04  3.17e-02  3.12e-04  2.46e-03  8.64e-01  
  8  +4.3267e-01  +5.6263e-01  1.30e-01  6.78e-04  2.96e-02  1.95e-04  2.17e-03  5.60e-01  
  9  +4.2842e-01  +5.5095e-01  1.23e-01  5.24e-04  2.29e-02  1.96e-04  1.67e-03  3.63e-01  
 10  +4.1017e-01  +4.7502e-01  6.48e-02  2.35e-04  1.02e-02  6.36e-05  7.84e-04  9.59e-01  
 11  +3.9401e-01  +4.0992e-01  1.59e-02  5.49e-05  2.39e-03  1.40e-05  1.96e-04  8.17e-01  
 12  +3.8830e-01  +3.8854e-01  2.44e-04  8.23e-07  3.58e-05  1.53e-07  3.01e-06  9.86e-01  
 13  +3.8820e-01  +3.8820e-01  2.44e-06  8.23e-09  3.58e-07  1.53e-09  3.01e-08  9.90e-01  
 14  +3.8820e-01  +3.8820e-01  2.44e-08  8.23e-11  3.58e-09  1.53e-11  3.02e-10  9.90e-01  
 15  +3.8820e-01  +3.8820e-01  2.44e-10  8.23e-13  3.58e-11  1.53e-13  3.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.1056ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:44 PM: Optimal value: 3.882e-01
(CVXPY) Oct 06 03:53:44 PM: Compilation took 6.088e-03 seconds
(CVXPY) Oct 06 03:53:44 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3882
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:44 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:44 PM: Finished problem compilation (took 8.081e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2857
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9825e-01  +2.5172e+02  2.51e+02  9.35e-01  2.15e+01  1.00e+00  1.02e+00   ------   
  1  +5.9018e-01  +5.1007e+01  5.04e+01  3.53e-01  1.22e+01  3.97e-03  5.16e-01  6.41e-01  
  2  +5.3453e-01  +6.3814e+00  5.85e+00  9.95e-02  4.29e+00  1.13e-02  1.98e-01  8.97e-01  
  3  +5.0150e-01  +1.8095e+00  1.31e+00  3.78e-02  1.61e+00  3.48e-03  1.44e-01  6.86e-01  
  4  +4.7889e-01  +1.1740e+00  6.95e-01  6.46e-03  2.92e-01  8.66e-03  1.77e-02  9.89e-01  
  5  +4.6324e-01  +1.0083e+00  5.45e-01  3.90e-03  1.76e-01  7.11e-03  1.11e-02  4.43e-01  
  6  +4.5859e-01  +1.0097e+00  5.51e-01  3.18e-03  1.43e-01  6.93e-03  8.98e-03  3.45e-01  
  7  +4.4478e-01  +8.9405e-01  4.49e-01  2.18e-03  9.78e-02  3.69e-03  6.36e-03  5.56e-01  
  8  +4.2084e-01  +7.0549e-01  2.85e-01  1.44e-03  6.40e-02  3.28e-05  4.58e-03  7.77e-01  
  9  +3.7698e-01  +4.7346e-01  9.65e-02  4.07e-04  1.79e-02  1.74e-05  1.47e-03  7.09e-01  
 10  +3.6433e-01  +4.1971e-01  5.54e-02  2.34e-04  1.02e-02  4.12e-05  9.40e-04  7.86e-01  
 11  +3.5704e-01  +3.8145e-01  2.44e-02  1.02e-04  4.46e-03  2.46e-05  4.21e-04  8.89e-01  
 12  +3.4911e-01  +3.5133e-01  2.23e-03  9.08e-06  3.96e-04  1.92e-06  3.94e-05  9.79e-01  
 13  +3.4841e-01  +3.4843e-01  2.32e-05  9.45e-08  4.12e-06  1.99e-08  4.13e-07  9.90e-01  
 14  +3.4840e-01  +3.4840e-01  2.32e-07  9.45e-10  4.12e-08  1.99e-10  4.13e-09  9.90e-01  
 15  +3.4840e-01  +3.4840e-01  2.32e-09  9.45e-12  4.12e-10  1.99e-12  4.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:44 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:44 PM: Optimal value: 3.484e-01
(CVXPY) Oct 06 03:53:44 PM: Compilation took 8.081e-03 seconds
(CVXPY) Oct 06 03:53:44 PM: Solver (including time spent in interface) took 9.815e-03 seconds
Iteration: 3, Objective: 0.3484
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:45 PM: Your problem has 288 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:45 PM: Finished problem compilation (took 6.147e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 288
  constraints   = 538
  nnz(P)        = 0
  nnz(A)        = 3001
  cones (total) = 1
    : Nonnegative = 1,  numel = 538

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9821e-01  +2.5190e+02  2.51e+02  9.36e-01  2.15e+01  1.00e+00  1.02e+00   ------   
  1  +5.8876e-01  +5.1148e+01  5.06e+01  3.56e-01  1.21e+01  3.97e-03  5.18e-01  6.40e-01  
  2  +5.3272e-01  +6.1901e+00  5.66e+00  9.58e-02  4.13e+00  1.16e-02  1.92e-01  9.15e-01  
  3  +5.0250e-01  +2.0017e+00  1.50e+00  4.14e-02  1.77e+00  4.16e-03  1.36e-01  6.64e-01  
  4  +4.8305e-01  +1.7553e+00  1.27e+00  1.14e-02  5.15e-01  1.00e-02  3.01e-02  9.32e-01  
  5  +4.4911e-01  +1.3084e+00  8.59e-01  4.36e-03  1.98e-01  1.03e-02  1.20e-02  6.36e-01  
  6  +4.2372e-01  +8.7148e-01  4.48e-01  2.53e-03  1.13e-01  8.32e-05  7.89e-03  7.03e-01  
  7  +3.9779e-01  +6.8873e-01  2.91e-01  1.52e-03  6.69e-02  6.20e-05  5.15e-03  3.84e-01  
  8  +3.7041e-01  +5.1436e-01  1.44e-01  7.06e-04  3.09e-02  5.04e-05  2.70e-03  5.90e-01  
  9  +3.6161e-01  +4.6862e-01  1.07e-01  5.07e-04  2.21e-02  4.50e-05  2.03e-03  3.53e-01  
 10  +3.4363e-01  +3.7219e-01  2.86e-02  1.32e-04  5.74e-03  1.39e-05  5.97e-04  7.80e-01  
 11  +3.3708e-01  +3.3899e-01  1.91e-03  8.81e-06  3.82e-04  9.10e-07  4.21e-05  9.34e-01  
 12  +3.3697e-01  +3.3853e-01  1.56e-03  6.71e-06  2.91e-04  8.99e-07  3.08e-05  4.05e-01  
 13  +3.3674e-01  +3.3745e-01  7.07e-04  3.19e-06  1.38e-04  4.73e-07  1.49e-05  9.07e-01  
 14  +3.3655e-01  +3.3673e-01  1.74e-04  7.38e-07  3.20e-05  1.33e-07  3.41e-06  8.17e-01  
 15  +3.3650e-01  +3.3650e-01  1.84e-06  7.80e-09  3.39e-07  1.41e-09  3.61e-08  9.89e-01  
 16  +3.3650e-01  +3.3650e-01  1.84e-08  7.80e-11  3.39e-09  1.41e-11  3.61e-10  9.90e-01  
 17  +3.3650e-01  +3.3650e-01  1.84e-10  7.80e-13  3.39e-11  1.41e-13  3.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1947ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:45 PM: Optimal value: 3.365e-01
(CVXPY) Oct 06 03:53:45 PM: Compilation took 6.147e-03 seconds
(CVXPY) Oct 06 03:53:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.3365
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:45 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:45 PM: Finished problem compilation (took 1.181e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3039
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9820e-01  +2.5188e+02  2.51e+02  9.36e-01  2.15e+01  1.00e+00  1.02e+00   ------   
  1  +5.8846e-01  +5.1184e+01  5.06e+01  3.56e-01  1.21e+01  3.97e-03  5.19e-01  6.39e-01  
  2  +5.3225e-01  +6.1387e+00  5.61e+00  9.52e-02  4.12e+00  1.16e-02  1.91e-01  9.19e-01  
  3  +5.0202e-01  +1.9440e+00  1.44e+00  3.98e-02  1.71e+00  4.12e-03  1.32e-01  7.00e-01  
  4  +4.8272e-01  +1.8288e+00  1.35e+00  1.20e-02  5.45e-01  1.02e-02  3.18e-02  9.11e-01  
  5  +4.4732e-01  +1.3085e+00  8.61e-01  4.36e-03  1.98e-01  1.00e-02  1.21e-02  6.56e-01  
  6  +4.2440e-01  +8.7693e-01  4.53e-01  2.59e-03  1.16e-01  7.96e-05  8.08e-03  6.81e-01  
  7  +3.9178e-01  +6.4527e-01  2.53e-01  1.31e-03  5.76e-02  5.11e-05  4.52e-03  4.74e-01  
  8  +3.7200e-01  +5.2562e-01  1.54e-01  7.47e-04  3.27e-02  5.80e-05  2.82e-03  5.30e-01  
  9  +3.5912e-01  +4.5636e-01  9.72e-02  4.57e-04  1.99e-02  4.01e-05  1.85e-03  4.00e-01  
 10  +3.3996e-01  +3.5280e-01  1.28e-02  5.93e-05  2.58e-03  6.10e-06  2.75e-04  9.02e-01  
 11  +3.3703e-01  +3.3870e-01  1.67e-03  7.67e-06  3.33e-04  8.23e-07  3.66e-05  8.71e-01  
 12  +3.3698e-01  +3.3854e-01  1.56e-03  6.65e-06  2.90e-04  8.95e-07  3.06e-05  2.79e-01  
 13  +3.3683e-01  +3.3783e-01  9.98e-04  4.37e-06  1.90e-04  6.74e-07  2.01e-05  6.63e-01  
 14  +3.3653e-01  +3.3665e-01  1.16e-04  4.91e-07  2.13e-05  7.78e-08  2.27e-06  9.26e-01  
 15  +3.3650e-01  +3.3650e-01  1.22e-06  5.17e-09  2.25e-07  8.21e-10  2.39e-08  9.89e-01  
 16  +3.3650e-01  +3.3650e-01  1.22e-08  5.17e-11  2.25e-09  8.21e-12  2.39e-10  9.90e-01  
 17  +3.3650e-01  +3.3650e-01  1.22e-10  5.17e-13  2.25e-11  8.23e-14  2.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.3778ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:45 PM: Optimal value: 3.365e-01
(CVXPY) Oct 06 03:53:45 PM: Compilation took 1.181e-02 seconds
(CVXPY) Oct 06 03:53:45 PM: Solver (including time spent in interface) took 5.596e-03 seconds
Iteration: 5, Objective: 0.3365
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:45 PM: Your problem has 290 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:45 PM: Finished problem compilation (took 6.090e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 290
  constraints   = 540
  nnz(P)        = 0
  nnz(A)        = 3057
  cones (total) = 1
    : Nonnegative = 1,  numel = 540

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9821e-01  +2.5193e+02  2.51e+02  9.36e-01  2.15e+01  1.00e+00  1.02e+00   ------   
  1  +5.8851e-01  +5.1191e+01  5.06e+01  3.57e-01  1.21e+01  3.97e-03  5.19e-01  6.39e-01  
  2  +5.3219e-01  +6.1320e+00  5.60e+00  9.52e-02  4.12e+00  1.16e-02  1.92e-01  9.20e-01  
  3  +5.0193e-01  +1.9325e+00  1.43e+00  3.95e-02  1.70e+00  4.11e-03  1.31e-01  7.06e-01  
  4  +4.8283e-01  +1.8630e+00  1.38e+00  1.23e-02  5.59e-01  1.02e-02  3.27e-02  9.09e-01  
  5  +4.4627e-01  +1.2994e+00  8.53e-01  4.29e-03  1.94e-01  9.86e-03  1.19e-02  6.71e-01  
  6  +4.2420e-01  +8.7307e-01  4.49e-01  2.59e-03  1.15e-01  7.72e-05  8.09e-03  6.68e-01  
  7  +3.8947e-01  +6.2833e-01  2.39e-01  1.22e-03  5.39e-02  4.87e-05  4.28e-03  5.08e-01  
  8  +3.7419e-01  +5.3873e-01  1.65e-01  7.98e-04  3.50e-02  6.05e-05  2.99e-03  4.59e-01  
  9  +3.5872e-01  +4.5431e-01  9.56e-02  4.49e-04  1.96e-02  3.80e-05  1.83e-03  4.41e-01  
 10  +3.3906e-01  +3.4809e-01  9.03e-03  4.17e-05  1.81e-03  4.17e-06  1.95e-04  9.36e-01  
 11  +3.3707e-01  +3.3883e-01  1.76e-03  8.10e-06  3.52e-04  8.51e-07  3.85e-05  8.10e-01  
 12  +3.3702e-01  +3.3866e-01  1.64e-03  7.02e-06  3.05e-04  9.29e-07  3.23e-05  2.98e-01  
 13  +3.3679e-01  +3.3767e-01  8.75e-04  3.84e-06  1.67e-04  6.15e-07  1.77e-05  8.05e-01  
 14  +3.3653e-01  +3.3665e-01  1.12e-04  4.77e-07  2.08e-05  7.86e-08  2.21e-06  8.88e-01  
 15  +3.3650e-01  +3.3650e-01  1.16e-06  4.91e-09  2.13e-07  8.08e-10  2.27e-08  9.90e-01  
 16  +3.3650e-01  +3.3650e-01  1.16e-08  4.91e-11  2.13e-09  8.08e-12  2.27e-10  9.90e-01  
 17  +3.3650e-01  +3.3650e-01  1.16e-10  4.91e-13  2.13e-11  8.09e-14  2.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.4407ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:45 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:45 PM: Optimal value: 3.365e-01
(CVXPY) Oct 06 03:53:45 PM: Compilation took 6.090e-03 seconds
(CVXPY) Oct 06 03:53:45 PM: Solver (including time spent in interface) took 4.004e-03 seconds
FULL MODEL:
  Accruacy: 0.656
  Our objective: 0.31199999999999994

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.184)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.072)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.156977653503418
Best over terms:
  Our final objective: 0.184
    Its accruacy: 0.592
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.184
  Highest accruacy: 0.592
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

