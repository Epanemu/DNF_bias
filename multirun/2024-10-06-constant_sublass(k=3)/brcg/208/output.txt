Command:
python test_script.py -s constant_subclass -d 6 -n 50 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 6.

Computed total variation: 0.6799999999999999
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:40 PM: Your problem has 38 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:40 PM: Finished problem compilation (took 4.023e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 63
  nnz(P)        = 0
  nnz(A)        = 238
  cones (total) = 1
    : Nonnegative = 1,  numel = 63

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9285e-01  +2.6182e+01  2.57e+01  8.25e-01  6.14e+00  1.00e+00  1.08e+00   ------   
  1  +5.7946e-01  +5.5635e+00  4.98e+00  3.23e-01  3.38e+00  3.86e-03  5.66e-01  6.34e-01  
  2  +5.0052e-01  +1.1496e+00  6.49e-01  6.97e-02  8.72e-01  1.46e-02  1.93e-01  9.37e-01  
  3  +4.3768e-01  +9.0838e-01  4.71e-01  2.56e-02  3.33e-01  1.47e-02  8.68e-02  6.57e-01  
  4  +3.8443e-01  +4.6912e-01  8.47e-02  4.25e-03  5.44e-02  1.09e-03  1.97e-02  8.18e-01  
  5  +3.6174e-01  +3.6797e-01  6.23e-03  3.04e-04  3.86e-03  6.29e-05  1.72e-03  9.44e-01  
  6  +3.6012e-01  +3.6018e-01  6.29e-05  3.06e-06  3.89e-05  6.29e-07  1.76e-05  9.90e-01  
  7  +3.6010e-01  +3.6010e-01  6.29e-07  3.06e-08  3.89e-07  6.29e-09  1.76e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  6.29e-09  3.06e-10  3.89e-09  6.29e-11  1.76e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 447.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:40 PM: Optimal value: 3.601e-01
(CVXPY) Oct 06 03:56:40 PM: Compilation took 4.023e-02 seconds
(CVXPY) Oct 06 03:56:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:40 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:40 PM: Finished problem compilation (took 9.542e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 306
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8304e-01  +2.6793e+01  2.63e+01  8.38e-01  6.24e+00  1.00e+00  1.12e+00   ------   
  1  +5.2960e-01  +5.7164e+00  5.19e+00  3.39e-01  3.37e+00  3.89e-03  5.87e-01  6.26e-01  
  2  +4.4243e-01  +1.3547e+00  9.12e-01  7.91e-02  9.97e-01  1.72e-02  2.09e-01  8.83e-01  
  3  +3.6112e-01  +8.0329e-01  4.42e-01  2.56e-02  3.33e-01  1.06e-02  7.88e-02  6.91e-01  
  4  +2.9158e-01  +4.6533e-01  1.74e-01  7.53e-03  9.79e-02  4.23e-03  2.64e-02  7.32e-01  
  5  +2.5525e-01  +3.0733e-01  5.21e-02  2.13e-03  2.75e-02  1.17e-03  8.12e-03  7.09e-01  
  6  +2.4110e-01  +2.4354e-01  2.44e-03  1.01e-04  1.30e-03  4.17e-05  4.02e-04  9.61e-01  
  7  +2.4039e-01  +2.4062e-01  2.26e-04  9.55e-06  1.21e-04  2.73e-06  4.00e-05  9.01e-01  
  8  +2.4032e-01  +2.4037e-01  4.86e-05  2.06e-06  2.59e-05  5.29e-07  9.57e-06  9.50e-01  
  9  +2.4030e-01  +2.4030e-01  5.37e-07  2.28e-08  2.86e-07  5.45e-09  1.07e-07  9.89e-01  
 10  +2.4030e-01  +2.4030e-01  5.37e-09  2.28e-10  2.86e-09  5.45e-11  1.07e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 579.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:40 PM: Optimal value: 2.403e-01
(CVXPY) Oct 06 03:56:40 PM: Compilation took 9.542e-03 seconds
(CVXPY) Oct 06 03:56:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:40 PM: Your problem has 58 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:40 PM: Finished problem compilation (took 2.114e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 58
  constraints   = 83
  nnz(P)        = 0
  nnz(A)        = 366
  cones (total) = 1
    : Nonnegative = 1,  numel = 83

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7184e-01  +2.6883e+01  2.64e+01  8.47e-01  6.25e+00  1.00e+00  1.11e+00   ------   
  1  +4.8872e-01  +5.8778e+00  5.39e+00  3.64e-01  3.44e+00  3.90e-03  6.02e-01  6.05e-01  
  2  +3.8797e-01  +1.1699e+00  7.82e-01  6.73e-02  8.55e-01  2.11e-02  1.78e-01  9.90e-01  
  3  +2.8074e-01  +7.5231e-01  4.72e-01  2.50e-02  3.25e-01  1.48e-02  7.77e-02  6.62e-01  
  4  +2.0946e-01  +3.1041e-01  1.01e-01  5.12e-03  6.59e-02  1.95e-03  1.83e-02  8.58e-01  
  5  +1.8459e-01  +1.9857e-01  1.40e-02  6.96e-04  8.95e-03  2.13e-04  2.68e-03  8.88e-01  
  6  +1.8072e-01  +1.8139e-01  6.69e-04  3.37e-05  4.29e-04  8.36e-06  1.33e-04  9.51e-01  
  7  +1.8053e-01  +1.8060e-01  7.27e-05  3.82e-06  4.74e-05  5.50e-07  1.64e-05  9.53e-01  
  8  +1.8050e-01  +1.8050e-01  9.97e-07  5.25e-08  6.51e-07  7.08e-09  2.31e-07  9.88e-01  
  9  +1.8050e-01  +1.8050e-01  9.96e-09  5.25e-10  6.51e-09  7.07e-11  2.31e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 674.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:40 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:40 PM: Optimal value: 1.805e-01
(CVXPY) Oct 06 03:56:40 PM: Compilation took 2.114e-03 seconds
(CVXPY) Oct 06 03:56:40 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:41 PM: Your problem has 68 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:41 PM: Finished problem compilation (took 5.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 68
  constraints   = 93
  nnz(P)        = 0
  nnz(A)        = 397
  cones (total) = 1
    : Nonnegative = 1,  numel = 93

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6048e-01  +2.7033e+01  2.66e+01  8.55e-01  6.03e+00  1.00e+00  1.11e+00   ------   
  1  +4.2623e-01  +5.9052e+00  5.48e+00  3.65e-01  3.26e+00  3.99e-03  5.97e-01  6.04e-01  
  2  +2.7709e-01  +1.1052e+00  8.28e-01  5.92e-02  7.20e-01  2.21e-02  1.50e-01  9.90e-01  
  3  +2.0292e-01  +3.5711e-01  1.54e-01  1.08e-02  1.30e-01  3.28e-03  3.21e-02  8.44e-01  
  4  +1.7193e-01  +2.1984e-01  4.79e-02  3.12e-03  3.73e-02  8.22e-04  1.04e-02  7.75e-01  
  5  +1.6103e-01  +1.6258e-01  1.55e-03  1.01e-04  1.19e-03  1.73e-05  3.55e-04  9.70e-01  
  6  +1.6066e-01  +1.6087e-01  2.09e-04  1.39e-05  1.58e-04  1.47e-06  5.49e-05  9.01e-01  
  7  +1.6060e-01  +1.6061e-01  8.48e-06  5.72e-07  6.44e-06  5.19e-08  2.40e-06  9.75e-01  
  8  +1.6060e-01  +1.6060e-01  8.52e-08  5.75e-09  6.47e-08  5.21e-10  2.42e-08  9.90e-01  
  9  +1.6060e-01  +1.6060e-01  8.53e-10  5.75e-11  6.48e-10  5.21e-12  2.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 693.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:41 PM: Optimal value: 1.606e-01
(CVXPY) Oct 06 03:56:41 PM: Compilation took 5.005e-03 seconds
(CVXPY) Oct 06 03:56:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.1606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:41 PM: Your problem has 69 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:41 PM: Finished problem compilation (took 5.105e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 94
  nnz(P)        = 0
  nnz(A)        = 403
  cones (total) = 1
    : Nonnegative = 1,  numel = 94

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6028e-01  +2.7008e+01  2.65e+01  8.56e-01  6.03e+00  1.00e+00  1.11e+00   ------   
  1  +4.2461e-01  +5.9053e+00  5.48e+00  3.67e-01  3.25e+00  3.99e-03  5.97e-01  6.03e-01  
  2  +2.7587e-01  +1.1066e+00  8.31e-01  5.96e-02  7.23e-01  2.22e-02  1.51e-01  9.90e-01  
  3  +2.0264e-01  +3.6007e-01  1.57e-01  1.12e-02  1.34e-01  3.33e-03  3.29e-02  8.37e-01  
  4  +1.7096e-01  +2.1692e-01  4.60e-02  3.02e-03  3.61e-02  7.77e-04  9.98e-03  7.97e-01  
  5  +1.6101e-01  +1.6255e-01  1.54e-03  1.01e-04  1.19e-03  1.82e-05  3.50e-04  9.69e-01  
  6  +1.6068e-01  +1.6095e-01  2.75e-04  1.84e-05  2.10e-04  2.37e-06  7.20e-05  8.32e-01  
  7  +1.6061e-01  +1.6063e-01  2.62e-05  1.78e-06  2.00e-05  1.76e-07  7.43e-06  9.90e-01  
  8  +1.6060e-01  +1.6060e-01  2.76e-07  1.88e-08  2.11e-07  1.83e-09  7.90e-08  9.89e-01  
  9  +1.6060e-01  +1.6060e-01  2.76e-09  1.88e-10  2.11e-09  1.83e-11  7.90e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 626µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:41 PM: Optimal value: 1.606e-01
(CVXPY) Oct 06 03:56:41 PM: Compilation took 5.105e-03 seconds
(CVXPY) Oct 06 03:56:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:56:41 PM: Your problem has 70 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:56:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:56:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:56:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:56:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:56:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:56:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:56:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:56:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:56:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:56:41 PM: Finished problem compilation (took 4.228e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 70
  constraints   = 95
  nnz(P)        = 0
  nnz(A)        = 409
  cones (total) = 1
    : Nonnegative = 1,  numel = 95

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5935e-01  +2.7013e+01  2.66e+01  8.56e-01  6.03e+00  1.00e+00  1.11e+00   ------   
  1  +4.1975e-01  +5.9335e+00  5.51e+00  3.70e-01  3.26e+00  4.00e-03  5.99e-01  6.00e-01  
  2  +2.7206e-01  +1.1471e+00  8.75e-01  6.37e-02  7.65e-01  2.24e-02  1.59e-01  9.78e-01  
  3  +2.0023e-01  +3.4911e-01  1.49e-01  1.08e-02  1.29e-01  2.82e-03  3.18e-02  8.65e-01  
  4  +1.6907e-01  +2.0756e-01  3.85e-02  2.62e-03  3.11e-02  5.63e-04  8.64e-03  8.37e-01  
  5  +1.6097e-01  +1.6238e-01  1.41e-03  9.56e-05  1.12e-03  1.46e-05  3.30e-04  9.68e-01  
  6  +1.6066e-01  +1.6089e-01  2.31e-04  1.60e-05  1.80e-04  1.76e-06  6.24e-05  8.46e-01  
  7  +1.6061e-01  +1.6063e-01  2.16e-05  1.52e-06  1.70e-05  1.44e-07  6.27e-06  9.90e-01  
  8  +1.6060e-01  +1.6060e-01  2.25e-07  1.58e-08  1.77e-07  1.48e-09  6.55e-08  9.90e-01  
  9  +1.6060e-01  +1.6060e-01  2.25e-09  1.58e-10  1.77e-09  1.48e-11  6.55e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 639.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:56:41 PM: Problem status: optimal
(CVXPY) Oct 06 03:56:41 PM: Optimal value: 1.606e-01
(CVXPY) Oct 06 03:56:41 PM: Compilation took 4.228e-03 seconds
(CVXPY) Oct 06 03:56:41 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.84
  Our objective: 0.6799999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0)            <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.2)
 OR (x1 = 0 AND x3 = 1 AND x4 = 0)                       <-- (term's our objective: 0.16)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.664953708648682
Best over terms:
  Our final objective: 0.19999999999999996
    Its accruacy: 0.6
    Its hamming distance: 2
  Shortest hamming distance: 1
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

