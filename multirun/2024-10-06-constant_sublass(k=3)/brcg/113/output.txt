Command:
python test_script.py -s constant_subclass -d 3 -n 10000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1488
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 3.

Computed total variation: 0.14880000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:03 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:03 PM: Finished problem compilation (took 7.365e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 30007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0009e+03  5.00e+03  9.84e-01  7.84e+01  1.00e+00  1.00e+00   ------   
  1  +6.2012e-01  +9.2711e+02  9.26e+02  3.06e-01  4.08e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5583e-01  +1.5889e+02  1.58e+02  1.36e-01  2.16e+01  6.67e-03  2.21e-01  6.63e-01  
  3  +5.0957e-01  +2.8070e+01  2.76e+01  1.04e-01  1.61e+01  1.17e-05  2.19e-01  5.23e-02  
  4  +5.0002e-01  +1.1283e+00  6.28e-01  4.20e-03  6.58e-01  3.25e-06  1.69e-01  7.02e-01  
  5  +4.9998e-01  +6.4029e-01  1.40e-01  9.36e-04  1.47e-01  1.12e-06  3.39e-02  8.23e-01  
  6  +4.9504e-01  +1.3051e+00  8.10e-01  8.37e-04  1.33e-01  7.33e-05  2.65e-03  9.72e-01  
  7  +4.7795e-01  +8.2268e-01  3.45e-01  9.62e-05  1.53e-02  1.96e-04  2.99e-04  8.89e-01  
  8  +4.6327e-01  +5.1338e-01  5.01e-02  1.30e-05  2.06e-03  1.94e-06  4.40e-05  9.04e-01  
  9  +4.5365e-01  +4.5752e-01  3.87e-03  9.39e-07  1.49e-04  1.27e-07  3.44e-06  9.29e-01  
 10  +4.5270e-01  +4.5324e-01  5.36e-04  1.19e-07  1.88e-05  1.87e-08  4.78e-07  8.83e-01  
 11  +4.5250e-01  +4.5251e-01  7.14e-06  1.49e-09  2.36e-07  2.59e-10  6.37e-09  9.89e-01  
 12  +4.5250e-01  +4.5250e-01  7.14e-08  1.49e-11  2.36e-09  2.59e-12  6.37e-11  9.90e-01  
 13  +4.5250e-01  +4.5250e-01  7.20e-10  1.51e-13  2.38e-11  3.81e-14  9.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.6907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:03 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:03 PM: Optimal value: 4.525e-01
(CVXPY) Oct 06 03:48:03 PM: Compilation took 7.365e-02 seconds
(CVXPY) Oct 06 03:48:03 PM: Solver (including time spent in interface) took 5.824e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4525
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:03 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:03 PM: Finished problem compilation (took 2.009e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 35778
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +5.0015e+03  5.00e+03  9.84e-01  8.36e+01  1.00e+00  1.00e+00   ------   
  1  +6.1996e-01  +9.2863e+02  9.28e+02  3.07e-01  4.35e+01  4.25e-03  4.38e-01  6.93e-01  
  2  +5.5561e-01  +1.5850e+02  1.58e+02  1.36e-01  2.30e+01  6.74e-03  2.22e-01  6.65e-01  
  3  +5.0944e-01  +2.7804e+01  2.73e+01  1.03e-01  1.70e+01  1.17e-05  2.20e-01  5.45e-02  
  4  +5.0087e-01  +3.5867e+00  3.09e+00  2.04e-02  3.32e+00  4.24e-06  2.07e-01  1.71e-01  
  5  +5.0002e-01  +8.0601e-01  3.06e-01  2.05e-03  3.42e-01  1.32e-06  7.67e-02  8.33e-01  
  6  +4.9996e-01  +7.5282e-01  2.53e-01  1.68e-03  2.81e-01  1.72e-06  3.13e-02  7.21e-01  
  7  +4.9896e-01  +7.1273e-01  2.14e-01  6.99e-04  1.18e-01  1.40e-05  2.47e-03  9.46e-01  
  8  +4.9539e-01  +6.9280e-01  1.97e-01  1.87e-04  3.17e-02  5.41e-05  5.51e-04  7.94e-01  
  9  +4.9465e-01  +6.8885e-01  1.94e-01  1.56e-04  2.64e-02  5.89e-05  4.54e-04  2.33e-01  
 10  +4.9732e-01  +6.8928e-01  1.92e-01  1.43e-04  2.42e-02  1.96e-05  4.02e-04  7.69e-01  
 11  +4.9740e-01  +6.8654e-01  1.89e-01  1.42e-04  2.40e-02  1.77e-05  3.98e-04  1.03e-01  
 12  +4.9091e-01  +6.5731e-01  1.66e-01  4.64e-05  7.86e-03  4.38e-05  1.28e-04  6.95e-01  
 13  +4.8651e-01  +6.3940e-01  1.53e-01  4.05e-05  6.86e-03  1.08e-05  1.16e-04  7.63e-01  
 14  +4.6962e-01  +5.7107e-01  1.01e-01  2.04e-05  3.44e-03  6.06e-06  5.88e-05  8.86e-01  
 15  +4.5572e-01  +5.2295e-01  6.72e-02  1.20e-05  2.02e-03  4.00e-06  3.56e-05  4.43e-01  
 16  +4.5119e-01  +5.0921e-01  5.80e-02  1.04e-05  1.76e-03  3.31e-06  3.38e-05  5.07e-01  
 17  +4.4005e-01  +4.6703e-01  2.70e-02  4.68e-06  7.87e-04  1.73e-06  1.54e-05  8.33e-01  
 18  +4.3875e-01  +4.6899e-01  3.02e-02  4.84e-06  8.15e-04  2.19e-06  1.49e-05  1.23e-01  
 19  +4.2627e-01  +4.2750e-01  1.23e-03  1.93e-07  3.26e-05  6.89e-08  6.18e-07  9.85e-01  
 20  +4.2571e-01  +4.2572e-01  1.23e-05  1.94e-09  3.26e-07  6.88e-10  6.19e-09  9.90e-01  
 21  +4.2570e-01  +4.2570e-01  1.23e-07  1.94e-11  3.26e-09  6.91e-12  6.22e-11  9.90e-01  
 22  +4.2570e-01  +4.2570e-01  1.23e-09  1.94e-13  3.26e-11  6.94e-14  6.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 105.8773ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:03 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:03 PM: Optimal value: 4.257e-01
(CVXPY) Oct 06 03:48:03 PM: Compilation took 2.009e-02 seconds
(CVXPY) Oct 06 03:48:03 PM: Solver (including time spent in interface) took 1.162e-01 seconds
FULL MODEL:
  Accruacy: 0.5744
  Our objective: 0.14880000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1488)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.8894662857055664
Best over terms:
  Our final objective: 0.14880000000000004
    Its accruacy: 0.5744
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14880000000000004
  Highest accruacy: 0.5744
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

