Command:
python test_script.py -s constant_subclass -d 9 -n 1000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.17600000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.558
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:07 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Finished problem compilation (took 6.276e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +5.0084e+02  5.00e+02  9.56e-01  3.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8060e-01  +1.0889e+02  1.08e+02  4.15e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3040e-01  +1.2460e+01  1.19e+01  1.44e-01  1.01e+01  1.65e-02  2.71e-01  9.49e-01  
  3  +5.0590e-01  +3.0931e+00  2.59e+00  5.41e-02  3.72e+00  4.15e-05  2.34e-01  4.74e-01  
  4  +5.0066e-01  +7.8411e-01  2.83e-01  6.33e-03  4.57e-01  1.08e-05  7.07e-02  8.19e-01  
  5  +5.0008e-01  +7.5934e-01  2.59e-01  5.09e-03  3.69e-01  2.12e-05  2.54e-02  7.02e-01  
  6  +4.9262e-01  +7.2858e-01  2.36e-01  8.32e-04  6.15e-02  1.55e-04  2.59e-03  9.13e-01  
  7  +4.7186e-01  +5.6494e-01  9.31e-02  2.31e-04  1.70e-02  4.70e-05  8.13e-04  8.50e-01  
  8  +4.5344e-01  +4.8912e-01  3.57e-02  7.84e-05  5.74e-03  1.21e-05  3.20e-04  7.74e-01  
  9  +4.4498e-01  +4.5386e-01  8.89e-03  1.89e-05  1.39e-03  3.69e-06  8.27e-05  9.90e-01  
 10  +4.4215e-01  +4.4231e-01  1.59e-04  3.36e-07  2.45e-05  5.94e-08  1.51e-06  9.83e-01  
 11  +4.4210e-01  +4.4210e-01  1.59e-06  3.35e-09  2.45e-07  5.94e-10  1.51e-08  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  1.59e-08  3.35e-11  2.45e-09  5.94e-12  1.51e-10  9.90e-01  
 13  +4.4210e-01  +4.4210e-01  1.59e-10  3.35e-13  2.45e-11  5.94e-14  1.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.6568ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:07 PM: Optimal value: 4.421e-01
(CVXPY) Oct 06 04:16:07 PM: Compilation took 6.276e-02 seconds
(CVXPY) Oct 06 04:16:07 PM: Solver (including time spent in interface) took 1.573e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:07 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 6942
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9984e-01  +5.0124e+02  5.01e+02  9.56e-01  3.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.7958e-01  +1.0900e+02  1.08e+02  4.17e-01  2.36e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2892e-01  +1.2167e+01  1.16e+01  1.40e-01  1.01e+01  1.68e-02  2.66e-01  9.68e-01  
  3  +5.0513e-01  +2.9270e+00  2.42e+00  5.09e-02  3.62e+00  4.28e-05  2.18e-01  5.76e-01  
  4  +5.0134e-01  +1.2000e+00  6.99e-01  1.55e-02  1.14e+00  1.77e-05  1.06e-01  5.62e-01  
  5  +4.9919e-01  +9.4360e-01  4.44e-01  7.25e-03  5.47e-01  3.37e-05  2.67e-02  8.47e-01  
  6  +4.8755e-01  +8.3482e-01  3.47e-01  1.45e-03  1.11e-01  1.35e-04  4.26e-03  8.45e-01  
  7  +4.8035e-01  +7.6962e-01  2.89e-01  1.02e-03  7.82e-02  1.21e-04  3.01e-03  3.47e-01  
  8  +4.7786e-01  +7.4428e-01  2.66e-01  9.26e-04  7.07e-02  9.50e-05  2.85e-03  3.75e-01  
  9  +4.5903e-01  +5.8790e-01  1.29e-01  3.52e-04  2.67e-02  4.70e-05  1.11e-03  8.96e-01  
 10  +4.5696e-01  +5.8113e-01  1.24e-01  2.98e-04  2.27e-02  5.12e-05  9.13e-04  2.93e-01  
 11  +4.5064e-01  +5.5589e-01  1.05e-01  1.92e-04  1.46e-02  5.79e-05  5.70e-04  7.01e-01  
 12  +4.4022e-01  +5.1861e-01  7.84e-02  1.70e-04  1.29e-02  3.05e-05  5.53e-04  2.12e-01  
 13  +4.2166e-01  +4.3915e-01  1.75e-02  2.82e-05  2.13e-03  1.42e-05  9.00e-05  9.18e-01  
 14  +4.1257e-01  +4.1347e-01  9.03e-04  1.45e-06  1.09e-04  5.11e-07  4.84e-06  9.83e-01  
 15  +4.1210e-01  +4.1211e-01  9.13e-06  1.46e-08  1.10e-06  5.10e-09  4.90e-08  9.90e-01  
 16  +4.1210e-01  +4.1210e-01  9.13e-08  1.46e-10  1.10e-08  5.10e-11  4.90e-10  9.90e-01  
 17  +4.1210e-01  +4.1210e-01  9.13e-10  1.46e-12  1.10e-10  5.11e-13  4.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.7474ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:07 PM: Optimal value: 4.121e-01
(CVXPY) Oct 06 04:16:07 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:07 PM: Solver (including time spent in interface) took 1.677e-02 seconds
Iteration: 2, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:07 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7448
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +5.0112e+02  5.01e+02  9.56e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.7892e-01  +1.0902e+02  1.08e+02  4.19e-01  2.36e+01  3.78e-03  5.79e-01  5.85e-01  
  2  +5.2808e-01  +1.2012e+01  1.15e+01  1.39e-01  9.94e+00  1.70e-02  2.63e-01  9.78e-01  
  3  +5.0473e-01  +2.8360e+00  2.33e+00  4.94e-02  3.52e+00  4.40e-05  2.08e-01  6.40e-01  
  4  +5.0098e-01  +1.1320e+00  6.31e-01  1.40e-02  1.04e+00  1.83e-05  8.56e-02  6.27e-01  
  5  +4.9268e-01  +1.3547e+00  8.62e-01  4.68e-03  3.62e-01  1.33e-04  1.30e-02  9.75e-01  
  6  +4.7547e-01  +9.6983e-01  4.94e-01  1.62e-03  1.25e-01  1.27e-04  4.60e-03  6.70e-01  
  7  +4.6313e-01  +8.4911e-01  3.86e-01  1.02e-03  7.82e-02  1.21e-04  2.92e-03  4.20e-01  
  8  +4.5561e-01  +8.0705e-01  3.51e-01  7.25e-04  5.57e-02  1.45e-04  2.07e-03  4.35e-01  
  9  +4.5508e-01  +7.7719e-01  3.22e-01  6.99e-04  5.36e-02  1.34e-04  2.00e-03  1.69e-01  
 10  +4.3598e-01  +6.5201e-01  2.16e-01  4.17e-04  3.18e-02  9.27e-05  1.25e-03  4.48e-01  
 11  +4.1305e-01  +5.1571e-01  1.03e-01  1.92e-04  1.46e-02  4.27e-05  6.18e-04  6.03e-01  
 12  +3.9501e-01  +4.2453e-01  2.95e-02  5.42e-05  4.09e-03  1.36e-05  1.87e-04  8.04e-01  
 13  +3.8659e-01  +3.8887e-01  2.28e-03  4.18e-06  3.15e-04  9.90e-07  1.53e-05  9.38e-01  
 14  +3.8576e-01  +3.8580e-01  3.93e-05  7.21e-08  5.43e-06  1.82e-08  2.66e-07  9.87e-01  
 15  +3.8575e-01  +3.8575e-01  3.93e-07  7.21e-10  5.43e-08  1.82e-10  2.66e-09  9.90e-01  
 16  +3.8575e-01  +3.8575e-01  3.93e-09  7.21e-12  5.43e-10  1.82e-12  2.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.3557ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:07 PM: Optimal value: 3.858e-01
(CVXPY) Oct 06 04:16:07 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:07 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 3, Objective: 0.3858
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:07 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7795
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0130e+02  5.01e+02  9.56e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.7777e-01  +1.0906e+02  1.08e+02  4.21e-01  2.36e+01  3.78e-03  5.79e-01  5.86e-01  
  2  +5.2709e-01  +1.1851e+01  1.13e+01  1.37e-01  9.73e+00  1.72e-02  2.59e-01  9.90e-01  
  3  +5.0459e-01  +2.7853e+00  2.28e+00  4.86e-02  3.49e+00  4.67e-05  1.92e-01  7.01e-01  
  4  +5.0092e-01  +1.2286e+00  7.28e-01  1.59e-02  1.18e+00  2.31e-05  8.00e-02  6.10e-01  
  5  +4.8991e-01  +1.3358e+00  8.46e-01  4.15e-03  3.24e-01  1.55e-04  1.10e-02  9.57e-01  
  6  +4.6715e-01  +1.0107e+00  5.44e-01  1.49e-03  1.16e-01  1.82e-04  4.03e-03  6.63e-01  
  7  +4.4725e-01  +8.6173e-01  4.14e-01  9.14e-04  7.07e-02  1.61e-04  2.56e-03  4.23e-01  
  8  +4.3013e-01  +7.3336e-01  3.03e-01  6.38e-04  4.91e-02  1.22e-04  1.86e-03  3.96e-01  
  9  +3.9881e-01  +5.3189e-01  1.33e-01  2.71e-04  2.06e-02  5.37e-05  8.68e-04  7.04e-01  
 10  +3.7366e-01  +4.0923e-01  3.56e-02  7.00e-05  5.30e-03  1.28e-05  2.48e-04  7.42e-01  
 11  +3.6415e-01  +3.6878e-01  4.63e-03  8.90e-06  6.72e-04  2.01e-06  3.41e-05  9.26e-01  
 12  +3.6292e-01  +3.6402e-01  1.10e-03  2.10e-06  1.59e-04  5.05e-07  8.21e-06  8.02e-01  
 13  +3.6253e-01  +3.6260e-01  7.18e-05  1.36e-07  1.02e-05  3.73e-08  5.36e-07  9.80e-01  
 14  +3.6250e-01  +3.6250e-01  7.19e-07  1.36e-09  1.02e-07  3.74e-10  5.37e-09  9.90e-01  
 15  +3.6250e-01  +3.6250e-01  7.19e-09  1.36e-11  1.02e-09  3.74e-12  5.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.1629ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:07 PM: Optimal value: 3.625e-01
(CVXPY) Oct 06 04:16:07 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:07 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 4, Objective: 0.3625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:07 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:07 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 7996
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0127e+02  5.01e+02  9.57e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.7679e-01  +1.0910e+02  1.09e+02  4.22e-01  2.34e+01  3.78e-03  5.80e-01  5.85e-01  
  2  +5.2646e-01  +1.1939e+01  1.14e+01  1.37e-01  9.64e+00  1.74e-02  2.59e-01  9.90e-01  
  3  +5.0501e-01  +2.6666e+00  2.16e+00  4.75e-02  3.44e+00  5.13e-05  1.66e-01  7.80e-01  
  4  +5.0053e-01  +1.1659e+00  6.65e-01  1.44e-02  1.08e+00  3.10e-05  5.89e-02  6.71e-01  
  5  +4.8851e-01  +1.2516e+00  7.63e-01  3.65e-03  2.86e-01  1.81e-04  9.57e-03  8.96e-01  
  6  +4.6970e-01  +1.0288e+00  5.59e-01  1.73e-03  1.35e-01  1.96e-04  4.63e-03  5.56e-01  
  7  +4.4828e-01  +8.8984e-01  4.42e-01  1.02e-03  7.94e-02  1.90e-04  2.82e-03  4.38e-01  
  8  +4.2766e-01  +7.3998e-01  3.12e-01  6.98e-04  5.37e-02  1.31e-04  2.03e-03  4.49e-01  
  9  +3.9236e-01  +5.2606e-01  1.34e-01  2.85e-04  2.17e-02  5.95e-05  9.21e-04  9.31e-01  
 10  +3.6320e-01  +3.9657e-01  3.34e-02  6.80e-05  5.17e-03  1.38e-05  2.47e-04  8.57e-01  
 11  +3.5251e-01  +3.5438e-01  1.87e-03  3.75e-06  2.87e-04  6.66e-07  1.49e-05  9.57e-01  
 12  +3.5181e-01  +3.5184e-01  2.64e-05  5.29e-08  4.04e-06  9.21e-09  2.13e-07  9.86e-01  
 13  +3.5180e-01  +3.5180e-01  2.64e-07  5.29e-10  4.04e-08  9.21e-11  2.13e-09  9.90e-01  
 14  +3.5180e-01  +3.5180e-01  2.64e-09  5.29e-12  4.04e-10  9.21e-13  2.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.4686ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:07 PM: Optimal value: 3.518e-01
(CVXPY) Oct 06 04:16:07 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:07 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 5, Objective: 0.3518
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:08 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Finished problem compilation (took 1.558e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 8196
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0154e+02  5.01e+02  9.57e-01  3.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.7506e-01  +1.0919e+02  1.09e+02  4.23e-01  2.33e+01  3.78e-03  5.80e-01  5.85e-01  
  2  +5.2540e-01  +1.2081e+01  1.16e+01  1.37e-01  9.58e+00  1.76e-02  2.58e-01  9.90e-01  
  3  +5.0534e-01  +2.3043e+00  1.80e+00  3.98e-02  2.96e+00  5.76e-05  1.23e-01  8.93e-01  
  4  +4.9974e-01  +1.2456e+00  7.46e-01  1.10e-02  8.54e-01  8.53e-05  3.11e-02  8.04e-01  
  5  +4.8423e-01  +1.1563e+00  6.72e-01  2.51e-03  1.99e-01  3.20e-04  6.32e-03  8.17e-01  
  6  +4.5813e-01  +9.7584e-01  5.18e-01  1.31e-03  1.03e-01  3.22e-04  3.43e-03  5.39e-01  
  7  +4.0812e-01  +6.5855e-01  2.50e-01  5.84e-04  4.49e-02  8.75e-05  1.73e-03  7.55e-01  
  8  +3.6704e-01  +4.5585e-01  8.88e-02  2.02e-04  1.53e-02  2.84e-05  6.93e-04  7.28e-01  
  9  +3.5062e-01  +3.8167e-01  3.10e-02  6.92e-05  5.24e-03  1.05e-05  2.61e-04  6.91e-01  
 10  +3.4219e-01  +3.4598e-01  3.79e-03  8.17e-06  6.18e-04  1.77e-06  3.39e-05  9.90e-01  
 11  +3.4092e-01  +3.4098e-01  5.62e-05  1.20e-07  9.11e-06  2.52e-08  5.10e-07  9.86e-01  
 12  +3.4090e-01  +3.4090e-01  5.62e-07  1.20e-09  9.11e-08  2.53e-10  5.11e-09  9.90e-01  
 13  +3.4090e-01  +3.4090e-01  5.62e-09  1.20e-11  9.11e-10  2.53e-12  5.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.1029ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:08 PM: Optimal value: 3.409e-01
(CVXPY) Oct 06 04:16:08 PM: Compilation took 1.558e-02 seconds
(CVXPY) Oct 06 04:16:08 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 6, Objective: 0.3409
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:08 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8290
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0186e+02  5.01e+02  9.57e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7341e-01  +1.0928e+02  1.09e+02  4.24e-01  2.31e+01  3.79e-03  5.80e-01  5.85e-01  
  2  +5.2470e-01  +1.2209e+01  1.17e+01  1.36e-01  9.48e+00  1.77e-02  2.57e-01  9.90e-01  
  3  +5.0556e-01  +2.0839e+00  1.58e+00  3.40e-02  2.55e+00  6.25e-05  9.86e-02  9.31e-01  
  4  +5.0407e-01  +2.0363e+00  1.53e+00  1.87e-02  1.46e+00  1.28e-04  4.68e-02  5.84e-01  
  5  +4.9237e-01  +1.6944e+00  1.20e+00  4.71e-03  3.74e-01  3.13e-04  1.14e-02  7.87e-01  
  6  +4.6488e-01  +1.1795e+00  7.15e-01  2.01e-03  1.58e-01  2.55e-04  5.11e-03  6.90e-01  
  7  +4.4217e-01  +1.0147e+00  5.72e-01  1.34e-03  1.04e-01  2.36e-04  3.52e-03  4.30e-01  
  8  +3.9202e-01  +6.3959e-01  2.48e-01  5.98e-04  4.54e-02  8.21e-05  1.83e-03  7.71e-01  
  9  +3.5779e-01  +4.6043e-01  1.03e-01  2.36e-04  1.78e-02  3.16e-05  8.17e-04  6.23e-01  
 10  +3.3756e-01  +3.6270e-01  2.51e-02  5.69e-05  4.25e-03  8.51e-06  2.20e-04  8.13e-01  
 11  +3.3109e-01  +3.3406e-01  2.98e-03  6.65e-06  4.95e-04  1.20e-06  2.77e-05  9.52e-01  
 12  +3.3032e-01  +3.3095e-01  6.36e-04  1.40e-06  1.04e-04  2.62e-07  6.00e-06  8.23e-01  
 13  +3.3011e-01  +3.3013e-01  1.97e-05  4.28e-08  3.19e-06  8.40e-09  1.86e-07  9.90e-01  
 14  +3.3010e-01  +3.3010e-01  1.97e-07  4.28e-10  3.19e-08  8.40e-11  1.86e-09  9.90e-01  
 15  +3.3010e-01  +3.3010e-01  1.97e-09  4.28e-12  3.19e-10  8.44e-13  1.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.5412ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:08 PM: Optimal value: 3.301e-01
(CVXPY) Oct 06 04:16:08 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:08 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 7, Objective: 0.3301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:08 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8408
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0185e+02  5.01e+02  9.57e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7200e-01  +1.0929e+02  1.09e+02  4.25e-01  2.29e+01  3.79e-03  5.80e-01  5.85e-01  
  2  +5.2389e-01  +1.2309e+01  1.18e+01  1.36e-01  9.39e+00  1.79e-02  2.56e-01  9.90e-01  
  3  +5.0656e-01  +2.3845e+00  1.88e+00  3.74e-02  2.82e+00  9.30e-04  9.95e-02  8.37e-01  
  4  +5.0604e-01  +2.3806e+00  1.87e+00  2.65e-02  2.05e+00  1.38e-03  6.53e-02  3.81e-01  
  5  +5.0275e-01  +2.1959e+00  1.69e+00  2.25e-02  1.72e+00  8.26e-04  6.09e-02  3.26e-01  
  6  +4.8882e-01  +1.6586e+00  1.17e+00  4.02e-03  3.20e-01  2.57e-03  9.59e-03  8.52e-01  
  7  +4.6532e-01  +1.2970e+00  8.32e-01  2.35e-03  1.84e-01  1.55e-03  5.87e-03  5.22e-01  
  8  +4.5466e-01  +1.1944e+00  7.40e-01  1.94e-03  1.52e-01  1.24e-03  4.95e-03  2.59e-01  
  9  +4.1838e-01  +8.2761e-01  4.09e-01  1.08e-03  8.31e-02  1.12e-05  3.04e-03  8.52e-01  
 10  +3.6717e-01  +5.2709e-01  1.60e-01  3.72e-04  2.81e-02  1.51e-05  1.18e-03  6.65e-01  
 11  +3.3561e-01  +3.8096e-01  4.54e-02  1.01e-04  7.65e-03  2.18e-05  3.73e-04  9.59e-01  
 12  +3.2525e-01  +3.3490e-01  9.65e-03  2.12e-05  1.60e-03  4.36e-06  8.53e-05  7.87e-01  
 13  +3.2246e-01  +3.2291e-01  4.52e-04  9.89e-07  7.44e-05  1.60e-07  4.24e-06  9.60e-01  
 14  +3.2230e-01  +3.2231e-01  4.81e-06  1.05e-08  7.91e-07  1.69e-09  4.56e-08  9.90e-01  
 15  +3.2230e-01  +3.2230e-01  4.82e-08  1.05e-10  7.92e-09  1.69e-11  4.56e-10  9.90e-01  
 16  +3.2230e-01  +3.2230e-01  4.82e-10  1.05e-12  7.92e-11  1.69e-13  4.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.0363ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:08 PM: Optimal value: 3.223e-01
(CVXPY) Oct 06 04:16:08 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:08 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 8, Objective: 0.3223
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:08 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8566
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +5.0180e+02  5.01e+02  9.57e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7076e-01  +1.0926e+02  1.09e+02  4.25e-01  2.28e+01  3.79e-03  5.79e-01  5.86e-01  
  2  +5.2320e-01  +1.2416e+01  1.19e+01  1.35e-01  9.27e+00  1.80e-02  2.54e-01  9.90e-01  
  3  +5.0793e-01  +3.1012e+00  2.59e+00  4.67e-02  3.49e+00  2.41e-03  1.15e-01  7.00e-01  
  4  +5.0493e-01  +2.5597e+00  2.05e+00  2.74e-02  2.10e+00  3.17e-03  6.66e-02  4.46e-01  
  5  +5.0205e-01  +2.3957e+00  1.89e+00  2.35e-02  1.78e+00  1.82e-03  6.15e-02  3.68e-01  
  6  +4.8507e-01  +1.7413e+00  1.26e+00  4.17e-03  3.32e-01  5.25e-03  9.89e-03  8.46e-01  
  7  +4.6122e-01  +1.3750e+00  9.14e-01  2.48e-03  1.95e-01  3.20e-03  6.13e-03  5.19e-01  
  8  +4.3714e-01  +1.0856e+00  6.48e-01  1.68e-03  1.30e-01  1.26e-03  4.36e-03  5.16e-01  
  9  +3.8308e-01  +6.6282e-01  2.80e-01  6.59e-04  5.01e-02  2.55e-04  1.94e-03  6.90e-01  
 10  +3.5340e-01  +4.9938e-01  1.46e-01  3.41e-04  2.57e-02  1.15e-04  1.11e-03  5.12e-01  
 11  +3.3756e-01  +4.1662e-01  7.91e-02  1.83e-04  1.37e-02  5.92e-05  6.35e-04  5.00e-01  
 12  +3.2580e-01  +3.5625e-01  3.04e-02  6.98e-05  5.23e-03  2.22e-05  2.54e-04  6.39e-01  
 13  +3.2117e-01  +3.3326e-01  1.21e-02  2.69e-05  2.04e-03  8.43e-06  9.80e-05  7.65e-01  
 14  +3.1908e-01  +3.2568e-01  6.60e-03  1.36e-05  1.06e-03  4.28e-06  5.02e-05  6.67e-01  
 15  +3.1699e-01  +3.1749e-01  4.99e-04  1.01e-06  7.85e-05  2.69e-07  3.82e-06  9.65e-01  
 16  +3.1680e-01  +3.1681e-01  5.70e-06  1.15e-08  8.95e-07  3.01e-09  4.39e-08  9.89e-01  
 17  +3.1680e-01  +3.1680e-01  5.71e-08  1.15e-10  8.97e-09  3.02e-11  4.40e-10  9.90e-01  
 18  +3.1680e-01  +3.1680e-01  5.71e-10  1.15e-12  8.97e-11  3.03e-13  4.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.4508ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:08 PM: Optimal value: 3.168e-01
(CVXPY) Oct 06 04:16:08 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:08 PM: Solver (including time spent in interface) took 3.114e-02 seconds
Iteration: 9, Objective: 0.3168
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:08 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:08 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 8673
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +5.0191e+02  5.01e+02  9.58e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.6898e-01  +1.0934e+02  1.09e+02  4.27e-01  2.26e+01  3.79e-03  5.80e-01  5.85e-01  
  2  +5.2222e-01  +1.2567e+01  1.20e+01  1.35e-01  9.22e+00  1.82e-02  2.54e-01  9.90e-01  
  3  +5.0855e-01  +3.4871e+00  2.98e+00  4.95e-02  3.69e+00  3.31e-03  1.17e-01  6.42e-01  
  4  +5.0535e-01  +2.8709e+00  2.37e+00  3.06e-02  2.34e+00  3.95e-03  7.29e-02  4.04e-01  
  5  +5.0203e-01  +2.6991e+00  2.20e+00  2.55e-02  1.94e+00  2.28e-03  6.45e-02  4.40e-01  
  6  +4.8429e-01  +1.8503e+00  1.37e+00  4.76e-03  3.78e-01  5.54e-03  1.12e-02  8.33e-01  
  7  +4.5901e-01  +1.4485e+00  9.90e-01  2.74e-03  2.15e-01  3.55e-03  6.75e-03  5.27e-01  
  8  +4.4365e-01  +1.2590e+00  8.15e-01  2.11e-03  1.65e-01  2.01e-03  5.36e-03  4.24e-01  
  9  +3.8783e-01  +7.0848e-01  3.21e-01  7.82e-04  5.94e-02  1.89e-05  2.25e-03  8.26e-01  
 10  +3.5875e-01  +5.5040e-01  1.92e-01  4.60e-04  3.46e-02  2.77e-05  1.44e-03  4.69e-01  
 11  +3.3343e-01  +4.1783e-01  8.44e-02  1.97e-04  1.48e-02  1.59e-05  6.73e-04  5.92e-01  
 12  +3.2042e-01  +3.5825e-01  3.78e-02  8.44e-05  6.44e-03  9.38e-06  2.99e-04  6.24e-01  
 13  +3.1252e-01  +3.2620e-01  1.37e-02  2.89e-05  2.24e-03  4.37e-06  1.08e-04  7.32e-01  
 14  +3.0859e-01  +3.1013e-01  1.55e-03  3.24e-06  2.51e-04  7.04e-07  1.25e-05  9.70e-01  
 15  +3.0802e-01  +3.0807e-01  4.92e-05  1.03e-07  7.97e-06  2.20e-08  4.01e-07  9.70e-01  
 16  +3.0800e-01  +3.0800e-01  4.93e-07  1.03e-09  7.98e-08  2.20e-10  4.02e-09  9.90e-01  
 17  +3.0800e-01  +3.0800e-01  4.93e-09  1.03e-11  7.99e-10  2.21e-12  4.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.5609ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:08 PM: Optimal value: 3.080e-01
(CVXPY) Oct 06 04:16:08 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:08 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.3080
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:09 PM: Your problem has 615 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 615
  constraints   = 1115
  nnz(P)        = 0
  nnz(A)        = 8755
  cones (total) = 1
    : Nonnegative = 1,  numel = 1115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0190e+02  5.01e+02  9.58e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.6799e-01  +1.0937e+02  1.09e+02  4.27e-01  2.25e+01  3.80e-03  5.80e-01  5.85e-01  
  2  +5.2173e-01  +1.2640e+01  1.21e+01  1.35e-01  9.14e+00  1.83e-02  2.53e-01  9.90e-01  
  3  +5.0851e-01  +3.5329e+00  3.02e+00  4.86e-02  3.62e+00  3.53e-03  1.14e-01  6.37e-01  
  4  +5.0600e-01  +3.0683e+00  2.56e+00  3.28e-02  2.50e+00  4.11e-03  7.71e-02  3.36e-01  
  5  +5.0215e-01  +2.8126e+00  2.31e+00  2.75e-02  2.07e+00  2.33e-03  6.98e-02  3.89e-01  
  6  +4.8103e-01  +1.7966e+00  1.32e+00  4.16e-03  3.30e-01  6.35e-03  9.75e-03  8.67e-01  
  7  +4.6273e-01  +1.5896e+00  1.13e+00  2.94e-03  2.32e-01  5.45e-03  7.08e-03  3.46e-01  
  8  +4.4554e-01  +1.3600e+00  9.14e-01  2.35e-03  1.83e-01  3.22e-03  5.86e-03  3.21e-01  
  9  +4.0293e-01  +9.0167e-01  4.99e-01  1.26e-03  9.62e-02  5.65e-04  3.48e-03  6.48e-01  
 10  +3.6142e-01  +6.1448e-01  2.53e-01  6.18e-04  4.63e-02  2.03e-04  1.91e-03  5.74e-01  
 11  +3.3028e-01  +4.3891e-01  1.09e-01  2.57e-04  1.91e-02  7.63e-05  8.82e-04  5.93e-01  
 12  +3.1627e-01  +3.6925e-01  5.30e-02  1.22e-04  9.09e-03  3.54e-05  4.40e-04  6.20e-01  
 13  +3.0896e-01  +3.3516e-01  2.62e-02  5.82e-05  4.41e-03  1.72e-05  2.14e-04  6.46e-01  
 14  +3.0577e-01  +3.2242e-01  1.67e-02  3.58e-05  2.76e-03  1.09e-05  1.33e-04  4.30e-01  
 15  +3.0129e-01  +3.0365e-01  2.36e-03  5.01e-06  3.86e-04  1.16e-06  1.92e-05  9.90e-01  
 16  +3.0044e-01  +3.0053e-01  9.24e-05  1.96e-07  1.51e-05  4.43e-08  7.60e-07  9.61e-01  
 17  +3.0040e-01  +3.0040e-01  9.31e-07  1.97e-09  1.52e-07  4.45e-10  7.66e-09  9.90e-01  
 18  +3.0040e-01  +3.0040e-01  9.32e-09  1.98e-11  1.52e-09  4.46e-12  7.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:09 PM: Optimal value: 3.004e-01
(CVXPY) Oct 06 04:16:09 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:09 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 11, Objective: 0.3004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:09 PM: Your problem has 625 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 625
  constraints   = 1125
  nnz(P)        = 0
  nnz(A)        = 8887
  cones (total) = 1
    : Nonnegative = 1,  numel = 1125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0197e+02  5.01e+02  9.58e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.6640e-01  +1.0940e+02  1.09e+02  4.28e-01  2.24e+01  3.80e-03  5.79e-01  5.86e-01  
  2  +5.2084e-01  +1.2750e+01  1.22e+01  1.34e-01  9.04e+00  1.85e-02  2.52e-01  9.90e-01  
  3  +5.0815e-01  +3.4782e+00  2.97e+00  4.55e-02  3.39e+00  3.67e-03  1.06e-01  6.45e-01  
  4  +5.0667e-01  +3.2611e+00  2.75e+00  3.46e-02  2.63e+00  4.20e-03  8.01e-02  2.53e-01  
  5  +5.0247e-01  +2.9870e+00  2.48e+00  2.93e-02  2.21e+00  2.51e-03  7.29e-02  3.58e-01  
  6  +4.8203e-01  +1.9091e+00  1.43e+00  4.81e-03  3.81e-01  6.28e-03  1.12e-02  8.54e-01  
  7  +4.6064e-01  +1.6144e+00  1.15e+00  3.19e-03  2.50e-01  4.96e-03  7.64e-03  3.97e-01  
  8  +4.4117e-01  +1.3833e+00  9.42e-01  2.40e-03  1.87e-01  3.28e-03  5.96e-03  3.47e-01  
  9  +4.0287e-01  +9.4219e-01  5.39e-01  1.46e-03  1.11e-01  2.78e-05  4.04e-03  7.65e-01  
 10  +3.4405e-01  +5.1806e-01  1.74e-01  4.24e-04  3.14e-02  2.25e-05  1.36e-03  7.29e-01  
 11  +3.2167e-01  +4.1167e-01  9.00e-02  2.12e-04  1.57e-02  1.86e-05  7.39e-04  5.61e-01  
 12  +3.1066e-01  +3.6165e-01  5.10e-02  1.16e-04  8.61e-03  1.40e-05  4.22e-04  5.50e-01  
 13  +3.0297e-01  +3.2603e-01  2.31e-02  5.18e-05  3.86e-03  7.58e-06  1.96e-04  6.47e-01  
 14  +2.9833e-01  +3.0525e-01  6.92e-03  1.53e-05  1.15e-03  2.88e-06  5.88e-05  8.39e-01  
 15  +2.9760e-01  +3.0282e-01  5.22e-03  1.11e-05  8.49e-04  2.28e-06  4.19e-05  3.65e-01  
 16  +2.9605e-01  +2.9693e-01  8.87e-04  1.87e-06  1.43e-04  4.24e-07  7.12e-06  9.90e-01  
 17  +2.9571e-01  +2.9572e-01  1.42e-05  2.98e-08  2.29e-06  6.63e-09  1.14e-07  9.84e-01  
 18  +2.9570e-01  +2.9570e-01  1.42e-07  2.98e-10  2.29e-08  6.64e-11  1.14e-09  9.90e-01  
 19  +2.9570e-01  +2.9570e-01  1.42e-09  2.98e-12  2.29e-10  6.65e-13  1.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.5303ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:09 PM: Optimal value: 2.957e-01
(CVXPY) Oct 06 04:16:09 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:09 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 12, Objective: 0.2957
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:09 PM: Your problem has 635 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 635
  constraints   = 1135
  nnz(P)        = 0
  nnz(A)        = 8974
  cones (total) = 1
    : Nonnegative = 1,  numel = 1135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0200e+02  5.02e+02  9.58e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.6467e-01  +1.0945e+02  1.09e+02  4.28e-01  2.22e+01  3.81e-03  5.79e-01  5.86e-01  
  2  +5.1995e-01  +1.2860e+01  1.23e+01  1.34e-01  8.96e+00  1.86e-02  2.50e-01  9.90e-01  
  3  +5.0758e-01  +3.3358e+00  2.83e+00  4.15e-02  3.11e+00  3.66e-03  9.61e-02  6.65e-01  
  4  +5.0661e-01  +3.2388e+00  2.73e+00  3.35e-02  2.55e+00  4.15e-03  7.69e-02  2.07e-01  
  5  +5.0244e-01  +3.0775e+00  2.58e+00  2.89e-02  2.18e+00  2.69e-03  7.01e-02  3.66e-01  
  6  +4.8253e-01  +2.0945e+00  1.61e+00  5.51e-03  4.37e-01  6.33e-03  1.27e-02  8.26e-01  
  7  +4.5988e-01  +1.7267e+00  1.27e+00  3.58e-03  2.81e-01  4.66e-03  8.53e-03  4.23e-01  
  8  +4.3939e-01  +1.4460e+00  1.01e+00  2.62e-03  2.03e-01  2.80e-03  6.48e-03  4.01e-01  
  9  +4.0451e-01  +1.0073e+00  6.03e-01  1.66e-03  1.26e-01  4.00e-04  4.48e-03  6.42e-01  
 10  +3.4877e-01  +5.8668e-01  2.38e-01  5.87e-04  4.36e-02  1.20e-04  1.80e-03  6.73e-01  
 11  +3.2145e-01  +4.3991e-01  1.18e-01  2.84e-04  2.10e-02  5.95e-05  9.58e-04  5.70e-01  
 12  +3.0786e-01  +3.7381e-01  6.60e-02  1.51e-04  1.13e-02  3.47e-05  5.30e-04  5.35e-01  
 13  +2.9795e-01  +3.2905e-01  3.11e-02  6.81e-05  5.18e-03  1.71e-05  2.45e-04  5.99e-01  
 14  +2.9135e-01  +3.0115e-01  9.80e-03  2.12e-05  1.62e-03  4.70e-06  7.89e-05  8.69e-01  
 15  +2.8819e-01  +2.8875e-01  5.58e-04  1.19e-06  9.15e-05  2.50e-07  4.54e-06  9.46e-01  
 16  +2.8800e-01  +2.8801e-01  8.14e-06  1.74e-08  1.34e-06  3.73e-09  6.65e-08  9.89e-01  
 17  +2.8800e-01  +2.8800e-01  8.15e-08  1.74e-10  1.34e-08  3.74e-11  6.65e-10  9.90e-01  
 18  +2.8800e-01  +2.8800e-01  8.15e-10  1.74e-12  1.34e-10  3.74e-13  6.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.5365ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:09 PM: Optimal value: 2.880e-01
(CVXPY) Oct 06 04:16:09 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:09 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 13, Objective: 0.2880
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:09 PM: Your problem has 645 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 645
  constraints   = 1145
  nnz(P)        = 0
  nnz(A)        = 9075
  cones (total) = 1
    : Nonnegative = 1,  numel = 1145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0191e+02  5.01e+02  9.58e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.6337e-01  +1.0942e+02  1.09e+02  4.27e-01  2.20e+01  3.81e-03  5.77e-01  5.86e-01  
  2  +5.1921e-01  +1.2923e+01  1.24e+01  1.33e-01  8.85e+00  1.87e-02  2.49e-01  9.90e-01  
  3  +5.0692e-01  +3.1454e+00  2.64e+00  3.74e-02  2.80e+00  3.55e-03  8.67e-02  6.89e-01  
  4  +5.0633e-01  +3.1611e+00  2.65e+00  3.17e-02  2.40e+00  4.03e-03  7.24e-02  1.90e-01  
  5  +5.0198e-01  +3.2610e+00  2.76e+00  2.65e-02  2.00e+00  3.08e-03  6.21e-02  4.78e-01  
  6  +4.8227e-01  +2.3541e+00  1.87e+00  6.28e-03  4.97e-01  6.24e-03  1.44e-02  7.74e-01  
  7  +4.5274e-01  +1.7176e+00  1.26e+00  3.61e-03  2.81e-01  3.37e-03  8.69e-03  5.29e-01  
  8  +4.3109e-01  +1.4137e+00  9.83e-01  2.60e-03  1.99e-01  1.63e-03  6.50e-03  5.09e-01  
  9  +3.9489e-01  +9.5881e-01  5.64e-01  1.59e-03  1.19e-01  1.39e-05  4.40e-03  8.83e-01  
 10  +3.3634e-01  +5.3210e-01  1.96e-01  4.85e-04  3.57e-02  1.84e-05  1.53e-03  7.05e-01  
 11  +3.1672e-01  +4.3947e-01  1.23e-01  2.92e-04  2.16e-02  2.30e-05  9.76e-04  4.96e-01  
 12  +3.0102e-01  +3.6386e-01  6.28e-02  1.45e-04  1.08e-02  1.41e-05  5.13e-04  5.30e-01  
 13  +2.9207e-01  +3.2324e-01  3.12e-02  6.93e-05  5.25e-03  8.49e-06  2.50e-04  5.76e-01  
 14  +2.8544e-01  +2.9476e-01  9.32e-03  2.05e-05  1.56e-03  3.99e-06  7.69e-05  9.25e-01  
 15  +2.8269e-01  +2.8406e-01  1.37e-03  2.99e-06  2.28e-04  5.78e-07  1.15e-05  8.67e-01  
 16  +2.8223e-01  +2.8231e-01  7.87e-05  1.71e-07  1.30e-05  3.46e-08  6.64e-07  9.64e-01  
 17  +2.8220e-01  +2.8220e-01  8.01e-07  1.74e-09  1.33e-07  3.52e-10  6.76e-09  9.90e-01  
 18  +2.8220e-01  +2.8220e-01  8.04e-09  1.74e-11  1.33e-09  3.53e-12  6.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.7036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:09 PM: Optimal value: 2.822e-01
(CVXPY) Oct 06 04:16:09 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:09 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 14, Objective: 0.2822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:09 PM: Your problem has 655 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:09 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 655
  constraints   = 1155
  nnz(P)        = 0
  nnz(A)        = 9188
  cones (total) = 1
    : Nonnegative = 1,  numel = 1155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0194e+02  5.01e+02  9.59e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.6184e-01  +1.0949e+02  1.09e+02  4.28e-01  2.19e+01  3.82e-03  5.77e-01  5.86e-01  
  2  +5.1834e-01  +1.2998e+01  1.25e+01  1.32e-01  8.75e+00  1.88e-02  2.48e-01  9.90e-01  
  3  +5.0601e-01  +2.8628e+00  2.36e+00  3.23e-02  2.42e+00  3.33e-03  7.50e-02  7.29e-01  
  4  +5.0566e-01  +2.9847e+00  2.48e+00  2.84e-02  2.15e+00  3.78e-03  6.49e-02  2.02e-01  
  5  +5.0008e-01  +3.4626e+00  2.96e+00  2.12e-02  1.62e+00  3.84e-03  4.79e-02  6.39e-01  
  6  +4.8005e-01  +2.5529e+00  2.07e+00  6.92e-03  5.44e-01  5.61e-03  1.58e-02  6.74e-01  
  7  +4.4879e-01  +1.9435e+00  1.49e+00  3.98e-03  3.08e-01  4.01e-03  9.49e-03  5.13e-01  
  8  +4.3024e-01  +1.5798e+00  1.15e+00  2.98e-03  2.29e-01  2.27e-03  7.39e-03  3.73e-01  
  9  +3.9028e-01  +9.8840e-01  5.98e-01  1.63e-03  1.22e-01  1.90e-04  4.48e-03  7.45e-01  
 10  +3.3070e-01  +5.2821e-01  1.98e-01  4.94e-04  3.61e-02  5.40e-05  1.57e-03  7.15e-01  
 11  +3.1273e-01  +4.4551e-01  1.33e-01  3.19e-04  2.33e-02  4.29e-05  1.08e-03  4.37e-01  
 12  +2.9932e-01  +3.8093e-01  8.16e-02  1.92e-04  1.40e-02  2.74e-05  6.93e-04  4.13e-01  
 13  +2.8445e-01  +3.0970e-01  2.53e-02  5.82e-05  4.24e-03  8.41e-06  2.31e-04  6.94e-01  
 14  +2.7955e-01  +2.8717e-01  7.62e-03  1.73e-05  1.26e-03  2.82e-06  7.28e-05  7.97e-01  
 15  +2.7731e-01  +2.7764e-01  3.29e-04  7.42e-07  5.41e-05  1.11e-07  3.26e-06  9.61e-01  
 16  +2.7720e-01  +2.7720e-01  3.36e-06  7.56e-09  5.51e-07  1.13e-09  3.34e-08  9.90e-01  
 17  +2.7720e-01  +2.7720e-01  3.36e-08  7.57e-11  5.52e-09  1.13e-11  3.34e-10  9.90e-01  
 18  +2.7720e-01  +2.7720e-01  3.36e-10  7.57e-13  5.52e-11  1.13e-13  3.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.3167ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:09 PM: Optimal value: 2.772e-01
(CVXPY) Oct 06 04:16:09 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:09 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 15, Objective: 0.2772
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:10 PM: Your problem has 665 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:10 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 665
  constraints   = 1165
  nnz(P)        = 0
  nnz(A)        = 9291
  cones (total) = 1
    : Nonnegative = 1,  numel = 1165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0196e+02  5.01e+02  9.59e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.6074e-01  +1.0952e+02  1.09e+02  4.28e-01  2.18e+01  3.82e-03  5.76e-01  5.86e-01  
  2  +5.1741e-01  +1.3063e+01  1.25e+01  1.31e-01  8.66e+00  1.89e-02  2.47e-01  9.90e-01  
  3  +5.0496e-01  +2.5281e+00  2.02e+00  2.67e-02  2.01e+00  3.03e-03  6.27e-02  7.76e-01  
  4  +5.0442e-01  +2.7328e+00  2.23e+00  2.34e-02  1.78e+00  3.52e-03  5.36e-02  2.71e-01  
  5  +4.9528e-01  +3.2809e+00  2.79e+00  1.40e-02  1.09e+00  4.89e-03  3.15e-02  7.30e-01  
  6  +4.7129e-01  +2.2065e+00  1.74e+00  5.91e-03  4.60e-01  3.81e-03  1.37e-02  6.11e-01  
  7  +4.4187e-01  +1.8644e+00  1.42e+00  3.60e-03  2.78e-01  3.66e-03  8.63e-03  4.17e-01  
  8  +4.2328e-01  +1.5289e+00  1.11e+00  2.80e-03  2.14e-01  2.12e-03  6.97e-03  3.30e-01  
  9  +3.7723e-01  +9.0234e-01  5.25e-01  1.43e-03  1.06e-01  1.73e-05  4.05e-03  8.43e-01  
 10  +3.2402e-01  +5.1766e-01  1.94e-01  4.93e-04  3.58e-02  2.45e-05  1.60e-03  6.85e-01  
 11  +3.0300e-01  +4.1718e-01  1.14e-01  2.77e-04  2.02e-02  2.15e-05  9.71e-04  4.93e-01  
 12  +2.8805e-01  +3.4672e-01  5.87e-02  1.38e-04  1.01e-02  1.32e-05  5.19e-04  5.34e-01  
 13  +2.8054e-01  +3.1232e-01  3.18e-02  7.27e-05  5.35e-03  7.86e-06  2.89e-04  4.96e-01  
 14  +2.7287e-01  +2.7714e-01  4.27e-03  9.66e-06  7.10e-04  1.75e-06  4.12e-05  9.80e-01  
 15  +2.7145e-01  +2.7161e-01  1.53e-04  3.46e-07  2.54e-05  5.85e-08  1.52e-06  9.68e-01  
 16  +2.7140e-01  +2.7140e-01  1.54e-06  3.48e-09  2.56e-07  5.88e-10  1.53e-08  9.90e-01  
 17  +2.7140e-01  +2.7140e-01  1.54e-08  3.48e-11  2.56e-09  5.88e-12  1.53e-10  9.90e-01  
 18  +2.7140e-01  +2.7140e-01  1.54e-10  3.48e-13  2.56e-11  5.89e-14  1.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.4586ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:10 PM: Optimal value: 2.714e-01
(CVXPY) Oct 06 04:16:10 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:10 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 16, Objective: 0.2714
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:10 PM: Your problem has 675 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:10 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 675
  constraints   = 1175
  nnz(P)        = 0
  nnz(A)        = 9390
  cones (total) = 1
    : Nonnegative = 1,  numel = 1175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0194e+02  5.01e+02  9.59e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.6024e-01  +1.0953e+02  1.09e+02  4.29e-01  2.16e+01  3.83e-03  5.76e-01  5.86e-01  
  2  +5.1694e-01  +1.3109e+01  1.26e+01  1.31e-01  8.59e+00  1.90e-02  2.46e-01  9.90e-01  
  3  +5.0442e-01  +2.3546e+00  1.85e+00  2.40e-02  1.81e+00  2.88e-03  5.64e-02  8.00e-01  
  4  +5.0337e-01  +2.6573e+00  2.15e+00  2.02e-02  1.54e+00  3.53e-03  4.61e-02  3.75e-01  
  5  +4.9009e-01  +2.9144e+00  2.42e+00  9.87e-03  7.70e-01  5.65e-03  2.22e-02  7.37e-01  
  6  +4.5086e-01  +1.5306e+00  1.08e+00  3.37e-03  2.60e-01  1.54e-03  8.11e-03  7.91e-01  
  7  +4.3344e-01  +1.4239e+00  9.90e-01  2.62e-03  2.01e-01  1.39e-03  6.41e-03  3.23e-01  
  8  +3.8098e-01  +8.7714e-01  4.96e-01  1.43e-03  1.06e-01  4.91e-05  4.02e-03  7.30e-01  
  9  +3.4173e-01  +6.4131e-01  3.00e-01  7.96e-04  5.81e-02  4.72e-05  2.45e-03  4.91e-01  
 10  +3.0487e-01  +4.4414e-01  1.39e-01  3.46e-04  2.52e-02  5.02e-05  1.19e-03  8.08e-01  
 11  +2.9400e-01  +3.9229e-01  9.83e-02  2.36e-04  1.73e-02  3.68e-05  8.54e-04  3.58e-01  
 12  +2.7750e-01  +3.1329e-01  3.58e-02  8.34e-05  6.14e-03  1.33e-05  3.30e-04  6.68e-01  
 13  +2.6914e-01  +2.7422e-01  5.08e-03  1.17e-05  8.57e-04  2.01e-06  5.00e-05  9.39e-01  
 14  +2.6757e-01  +2.6776e-01  1.96e-04  4.50e-07  3.30e-05  7.28e-08  1.99e-06  9.73e-01  
 15  +2.6750e-01  +2.6750e-01  1.98e-06  4.55e-09  3.33e-07  7.34e-10  2.01e-08  9.90e-01  
 16  +2.6750e-01  +2.6750e-01  1.98e-08  4.55e-11  3.33e-09  7.34e-12  2.02e-10  9.90e-01  
 17  +2.6750e-01  +2.6750e-01  1.98e-10  4.55e-13  3.33e-11  7.35e-14  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.0748ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:10 PM: Optimal value: 2.675e-01
(CVXPY) Oct 06 04:16:10 PM: Compilation took 1.571e-02 seconds
(CVXPY) Oct 06 04:16:10 PM: Solver (including time spent in interface) took 3.071e-02 seconds
Iteration: 17, Objective: 0.2675
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:10 PM: Your problem has 685 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:10 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 685
  constraints   = 1185
  nnz(P)        = 0
  nnz(A)        = 9466
  cones (total) = 1
    : Nonnegative = 1,  numel = 1185

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0196e+02  5.01e+02  9.59e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.5899e-01  +1.0951e+02  1.09e+02  4.29e-01  2.15e+01  3.83e-03  5.75e-01  5.87e-01  
  2  +5.1628e-01  +1.3192e+01  1.27e+01  1.31e-01  8.48e+00  1.91e-02  2.45e-01  9.90e-01  
  3  +5.0370e-01  +2.3029e+00  1.80e+00  2.24e-02  1.68e+00  3.00e-03  5.25e-02  8.12e-01  
  4  +4.9667e-01  +2.7557e+00  2.26e+00  1.37e-02  1.05e+00  4.81e-03  3.09e-02  6.66e-01  
  5  +4.7344e-01  +2.2189e+00  1.75e+00  5.31e-03  4.16e-01  6.92e-03  1.21e-02  6.32e-01  
  6  +4.4434e-01  +1.9367e+00  1.49e+00  3.56e-03  2.76e-01  6.26e-03  8.33e-03  3.83e-01  
  7  +4.0541e-01  +1.1917e+00  7.86e-01  2.31e-03  1.73e-01  4.58e-05  6.03e-03  5.83e-01  
  8  +3.6743e-01  +8.8831e-01  5.21e-01  1.42e-03  1.05e-01  5.97e-05  4.00e-03  4.22e-01  
  9  +3.1224e-01  +4.9935e-01  1.87e-01  4.83e-04  3.49e-02  3.69e-05  1.58e-03  7.08e-01  
 10  +2.9180e-01  +4.0112e-01  1.09e-01  2.69e-04  1.97e-02  2.80e-05  9.51e-04  5.12e-01  
 11  +2.7445e-01  +3.1938e-01  4.49e-02  1.07e-04  7.81e-03  1.62e-05  4.15e-04  7.81e-01  
 12  +2.6371e-01  +2.6952e-01  5.81e-03  1.36e-05  9.93e-04  2.43e-06  5.79e-05  9.90e-01  
 13  +2.6194e-01  +2.6235e-01  4.07e-04  9.51e-07  6.94e-05  1.59e-07  4.22e-06  9.42e-01  
 14  +2.6180e-01  +2.6181e-01  4.41e-06  1.03e-08  7.50e-07  1.71e-09  4.58e-08  9.89e-01  
 15  +2.6180e-01  +2.6180e-01  4.41e-08  1.03e-10  7.51e-09  1.71e-11  4.58e-10  9.90e-01  
 16  +2.6180e-01  +2.6180e-01  4.41e-10  1.03e-12  7.51e-11  1.71e-13  4.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.6672ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:10 PM: Optimal value: 2.618e-01
(CVXPY) Oct 06 04:16:10 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:10 PM: Solver (including time spent in interface) took 3.146e-02 seconds
Iteration: 18, Objective: 0.2618
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:10 PM: Your problem has 695 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 695
  constraints   = 1195
  nnz(P)        = 0
  nnz(A)        = 9593
  cones (total) = 1
    : Nonnegative = 1,  numel = 1195

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +5.0194e+02  5.01e+02  9.59e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.5750e-01  +1.0952e+02  1.09e+02  4.29e-01  2.13e+01  3.83e-03  5.75e-01  5.87e-01  
  2  +5.1540e-01  +1.3290e+01  1.28e+01  1.30e-01  8.39e+00  1.92e-02  2.43e-01  9.90e-01  
  3  +5.0299e-01  +2.4377e+00  1.93e+00  2.30e-02  1.71e+00  3.44e-03  5.33e-02  8.04e-01  
  4  +4.9097e-01  +2.7138e+00  2.22e+00  1.06e-02  8.24e-01  6.75e-03  2.39e-02  7.02e-01  
  5  +4.5893e-01  +2.0096e+00  1.55e+00  4.37e-03  3.39e-01  6.95e-03  1.01e-02  6.39e-01  
  6  +4.3370e-01  +1.7734e+00  1.34e+00  3.29e-03  2.53e-01  5.64e-03  7.78e-03  3.15e-01  
  7  +3.8500e-01  +1.0815e+00  6.96e-01  2.01e-03  1.48e-01  4.22e-05  5.43e-03  6.83e-01  
  8  +3.2060e-01  +5.4925e-01  2.29e-01  6.05e-04  4.35e-02  2.90e-05  1.91e-03  7.14e-01  
  9  +2.9615e-01  +4.3882e-01  1.43e-01  3.61e-04  2.61e-02  3.70e-05  1.24e-03  5.77e-01  
 10  +2.7849e-01  +3.5095e-01  7.25e-02  1.78e-04  1.30e-02  2.15e-05  6.71e-04  5.63e-01  
 11  +2.6394e-01  +2.7777e-01  1.38e-02  3.35e-05  2.44e-03  5.76e-06  1.40e-04  9.65e-01  
 12  +2.6106e-01  +2.6469e-01  3.63e-03  8.77e-06  6.38e-04  1.49e-06  3.81e-05  9.16e-01  
 13  +2.6001e-01  +2.6034e-01  3.28e-04  7.91e-07  5.75e-05  1.31e-07  3.51e-06  9.21e-01  
 14  +2.5990e-01  +2.5991e-01  9.71e-06  2.34e-08  1.70e-06  3.86e-09  1.04e-07  9.74e-01  
 15  +2.5990e-01  +2.5990e-01  9.72e-08  2.34e-10  1.70e-08  3.86e-11  1.04e-09  9.90e-01  
 16  +2.5990e-01  +2.5990e-01  9.72e-10  2.34e-12  1.70e-10  3.86e-13  1.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.8329ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:10 PM: Optimal value: 2.599e-01
(CVXPY) Oct 06 04:16:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:10 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 19, Objective: 0.2599
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:11 PM: Your problem has 705 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 705
  constraints   = 1205
  nnz(P)        = 0
  nnz(A)        = 9650
  cones (total) = 1
    : Nonnegative = 1,  numel = 1205

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0193e+02  5.01e+02  9.59e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.5618e-01  +1.0959e+02  1.09e+02  4.30e-01  2.12e+01  3.84e-03  5.75e-01  5.87e-01  
  2  +5.1459e-01  +1.3386e+01  1.29e+01  1.30e-01  8.32e+00  1.93e-02  2.43e-01  9.90e-01  
  3  +5.0228e-01  +2.4957e+00  1.99e+00  2.27e-02  1.69e+00  3.72e-03  5.25e-02  8.03e-01  
  4  +4.8643e-01  +2.6411e+00  2.15e+00  9.13e-03  7.07e-01  7.95e-03  2.05e-02  7.18e-01  
  5  +4.4211e-01  +1.7002e+00  1.26e+00  3.42e-03  2.63e-01  4.90e-03  8.06e-03  7.49e-01  
  6  +4.2018e-01  +1.4338e+00  1.01e+00  2.78e-03  2.10e-01  2.87e-03  6.83e-03  2.87e-01  
  7  +3.6832e-01  +9.2653e-01  5.58e-01  1.52e-03  1.12e-01  7.03e-04  4.20e-03  5.78e-01  
  8  +3.1347e-01  +5.3815e-01  2.25e-01  5.95e-04  4.27e-02  1.72e-04  1.93e-03  6.75e-01  
  9  +2.9071e-01  +4.2110e-01  1.30e-01  3.32e-04  2.40e-02  9.39e-05  1.17e-03  4.87e-01  
 10  +2.7265e-01  +3.2972e-01  5.71e-02  1.42e-04  1.02e-02  3.11e-05  5.51e-04  8.75e-01  
 11  +2.6121e-01  +2.7289e-01  1.17e-02  2.87e-05  2.07e-03  5.64e-06  1.22e-04  8.51e-01  
 12  +2.5897e-01  +2.6208e-01  3.11e-03  7.64e-06  5.49e-04  1.31e-06  3.35e-05  9.27e-01  
 13  +2.5809e-01  +2.5838e-01  2.86e-04  7.01e-07  5.03e-05  1.17e-07  3.13e-06  9.19e-01  
 14  +2.5800e-01  +2.5801e-01  3.83e-06  9.40e-09  6.75e-07  1.54e-09  4.20e-08  9.89e-01  
 15  +2.5800e-01  +2.5800e-01  3.84e-08  9.41e-11  6.75e-09  1.54e-11  4.21e-10  9.90e-01  
 16  +2.5800e-01  +2.5800e-01  3.84e-10  9.41e-13  6.76e-11  1.54e-13  4.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.4441ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:11 PM: Optimal value: 2.580e-01
(CVXPY) Oct 06 04:16:11 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:11 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 20, Objective: 0.2580
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:11 PM: Your problem has 709 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 709
  constraints   = 1209
  nnz(P)        = 0
  nnz(A)        = 9737
  cones (total) = 1
    : Nonnegative = 1,  numel = 1209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0195e+02  5.01e+02  9.59e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.5580e-01  +1.0960e+02  1.09e+02  4.30e-01  2.12e+01  3.84e-03  5.75e-01  5.87e-01  
  2  +5.1423e-01  +1.3412e+01  1.29e+01  1.29e-01  8.29e+00  1.94e-02  2.42e-01  9.90e-01  
  3  +5.0197e-01  +2.5624e+00  2.06e+00  2.31e-02  1.72e+00  3.90e-03  5.33e-02  7.99e-01  
  4  +4.8445e-01  +2.6090e+00  2.12e+00  8.72e-03  6.75e-01  8.40e-03  1.96e-02  7.19e-01  
  5  +4.4025e-01  +1.6688e+00  1.23e+00  3.51e-03  2.69e-01  4.19e-03  8.35e-03  7.35e-01  
  6  +4.1710e-01  +1.3737e+00  9.57e-01  2.76e-03  2.08e-01  2.18e-03  6.89e-03  3.37e-01  
  7  +3.6431e-01  +8.9192e-01  5.28e-01  1.43e-03  1.05e-01  6.88e-04  3.98e-03  5.69e-01  
  8  +3.1368e-01  +5.4594e-01  2.32e-01  6.14e-04  4.40e-02  2.11e-04  1.98e-03  6.10e-01  
  9  +2.8927e-01  +4.1758e-01  1.28e-01  3.26e-04  2.35e-02  1.08e-04  1.16e-03  5.00e-01  
 10  +2.7173e-01  +3.2862e-01  5.69e-02  1.41e-04  1.02e-02  3.57e-05  5.48e-04  7.98e-01  
 11  +2.6068e-01  +2.7374e-01  1.31e-02  3.21e-05  2.31e-03  7.15e-06  1.35e-04  8.25e-01  
 12  +2.5832e-01  +2.6228e-01  3.96e-03  9.70e-06  6.96e-04  1.79e-06  4.23e-05  8.95e-01  
 13  +2.5726e-01  +2.5779e-01  5.26e-04  1.29e-06  9.22e-05  2.29e-07  5.71e-06  8.83e-01  
 14  +2.5710e-01  +2.5712e-01  1.21e-05  2.97e-08  2.13e-06  4.88e-09  1.32e-07  9.90e-01  
 15  +2.5710e-01  +2.5710e-01  1.22e-07  2.97e-10  2.13e-08  4.89e-11  1.32e-09  9.90e-01  
 16  +2.5710e-01  +2.5710e-01  1.22e-09  2.97e-12  2.13e-10  4.89e-13  1.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.1347ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:11 PM: Optimal value: 2.571e-01
(CVXPY) Oct 06 04:16:11 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:11 PM: Solver (including time spent in interface) took 1.630e-02 seconds
Iteration: 21, Objective: 0.2571
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:11 PM: Your problem has 719 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 719
  constraints   = 1219
  nnz(P)        = 0
  nnz(A)        = 9776
  cones (total) = 1
    : Nonnegative = 1,  numel = 1219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0194e+02  5.01e+02  9.60e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5396e-01  +1.0974e+02  1.09e+02  4.30e-01  2.11e+01  3.84e-03  5.75e-01  5.86e-01  
  2  +5.1317e-01  +1.3537e+01  1.30e+01  1.29e-01  8.24e+00  1.96e-02  2.42e-01  9.90e-01  
  3  +5.0098e-01  +2.6222e+00  2.12e+00  2.27e-02  1.69e+00  4.23e-03  5.23e-02  8.00e-01  
  4  +4.8102e-01  +2.5481e+00  2.07e+00  8.24e-03  6.37e-01  9.00e-03  1.86e-02  7.06e-01  
  5  +4.3980e-01  +1.8001e+00  1.36e+00  3.89e-03  2.97e-01  5.66e-03  9.19e-03  6.32e-01  
  6  +3.9201e-01  +1.1747e+00  7.83e-01  2.28e-03  1.68e-01  4.48e-04  5.94e-03  6.83e-01  
  7  +3.4819e-01  +8.1547e-01  4.67e-01  1.29e-03  9.33e-02  2.35e-04  3.71e-03  4.27e-01  
  8  +3.1520e-01  +5.9754e-01  2.82e-01  7.61e-04  5.43e-02  1.34e-04  2.42e-03  4.40e-01  
  9  +2.8363e-01  +4.1195e-01  1.28e-01  3.33e-04  2.37e-02  6.01e-05  1.20e-03  7.08e-01  
 10  +2.6722e-01  +3.2432e-01  5.71e-02  1.44e-04  1.03e-02  2.61e-05  5.67e-04  7.01e-01  
 11  +2.5655e-01  +2.6918e-01  1.26e-02  3.17e-05  2.26e-03  5.39e-06  1.36e-04  7.88e-01  
 12  +2.5473e-01  +2.5961e-01  4.88e-03  1.22e-05  8.66e-04  1.97e-06  5.39e-05  8.50e-01  
 13  +2.5351e-01  +2.5421e-01  7.02e-04  1.75e-06  1.24e-04  2.76e-07  7.93e-06  8.66e-01  
 14  +2.5331e-01  +2.5334e-01  2.73e-05  6.79e-08  4.83e-06  1.01e-08  3.10e-07  9.90e-01  
 15  +2.5330e-01  +2.5330e-01  2.73e-07  6.80e-10  4.83e-08  1.01e-10  3.10e-09  9.90e-01  
 16  +2.5330e-01  +2.5330e-01  2.73e-09  6.80e-12  4.84e-10  1.01e-12  3.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.5077ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:11 PM: Optimal value: 2.533e-01
(CVXPY) Oct 06 04:16:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:11 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 22, Objective: 0.2533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:11 PM: Your problem has 729 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 729
  constraints   = 1229
  nnz(P)        = 0
  nnz(A)        = 9841
  cones (total) = 1
    : Nonnegative = 1,  numel = 1229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0191e+02  5.01e+02  9.60e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.5250e-01  +1.0980e+02  1.09e+02  4.31e-01  2.09e+01  3.85e-03  5.74e-01  5.86e-01  
  2  +5.1199e-01  +1.3649e+01  1.31e+01  1.28e-01  8.18e+00  1.97e-02  2.41e-01  9.90e-01  
  3  +4.9978e-01  +2.6851e+00  2.19e+00  2.24e-02  1.65e+00  4.58e-03  5.12e-02  8.02e-01  
  4  +4.7649e-01  +2.4860e+00  2.01e+00  7.64e-03  5.89e-01  9.68e-03  1.72e-02  7.06e-01  
  5  +4.3990e-01  +1.9147e+00  1.47e+00  4.23e-03  3.22e-01  6.99e-03  9.93e-03  5.26e-01  
  6  +3.8528e-01  +1.1406e+00  7.55e-01  2.13e-03  1.57e-01  3.99e-04  5.54e-03  7.33e-01  
  7  +3.4558e-01  +8.1700e-01  4.71e-01  1.30e-03  9.37e-02  2.24e-04  3.71e-03  3.98e-01  
  8  +2.9124e-01  +4.4714e-01  1.56e-01  4.14e-04  2.93e-02  6.41e-05  1.41e-03  7.85e-01  
  9  +2.8110e-01  +3.9849e-01  1.17e-01  3.04e-04  2.17e-02  5.02e-05  1.08e-03  3.66e-01  
 10  +2.6566e-01  +3.1818e-01  5.25e-02  1.34e-04  9.51e-03  2.34e-05  5.20e-04  7.88e-01  
 11  +2.5557e-01  +2.6760e-01  1.20e-02  3.03e-05  2.16e-03  5.02e-06  1.28e-04  7.68e-01  
 12  +2.5340e-01  +2.5674e-01  3.33e-03  8.35e-06  5.92e-04  1.31e-06  3.70e-05  9.12e-01  
 13  +2.5252e-01  +2.5291e-01  3.90e-04  9.76e-07  6.91e-05  1.49e-07  4.43e-06  8.97e-01  
 14  +2.5240e-01  +2.5241e-01  6.97e-06  1.74e-08  1.24e-06  2.59e-09  7.95e-08  9.90e-01  
 15  +2.5240e-01  +2.5240e-01  6.98e-08  1.74e-10  1.24e-08  2.59e-11  7.95e-10  9.90e-01  
 16  +2.5240e-01  +2.5240e-01  6.98e-10  1.75e-12  1.24e-10  2.59e-13  7.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.2469ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:11 PM: Optimal value: 2.524e-01
(CVXPY) Oct 06 04:16:11 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:11 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 23, Objective: 0.2524
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:11 PM: Your problem has 732 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:11 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 732
  constraints   = 1232
  nnz(P)        = 0
  nnz(A)        = 9869
  cones (total) = 1
    : Nonnegative = 1,  numel = 1232

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0191e+02  5.01e+02  9.60e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.5224e-01  +1.0981e+02  1.09e+02  4.31e-01  2.09e+01  3.85e-03  5.74e-01  5.86e-01  
  2  +5.1182e-01  +1.3664e+01  1.32e+01  1.28e-01  8.15e+00  1.98e-02  2.41e-01  9.90e-01  
  3  +4.9956e-01  +2.6938e+00  2.19e+00  2.23e-02  1.65e+00  4.64e-03  5.10e-02  8.03e-01  
  4  +4.7573e-01  +2.4753e+00  2.00e+00  7.56e-03  5.83e-01  9.74e-03  1.71e-02  7.06e-01  
  5  +4.3897e-01  +1.9135e+00  1.47e+00  4.22e-03  3.21e-01  7.06e-03  9.92e-03  5.21e-01  
  6  +3.8251e-01  +1.1008e+00  7.18e-01  2.04e-03  1.50e-01  6.41e-05  5.35e-03  7.64e-01  
  7  +3.4298e-01  +7.9219e-01  4.49e-01  1.24e-03  8.93e-02  5.72e-05  3.57e-03  4.01e-01  
  8  +3.0283e-01  +5.2664e-01  2.24e-01  6.02e-04  4.27e-02  4.43e-05  1.96e-03  5.66e-01  
  9  +2.7682e-01  +3.7922e-01  1.02e-01  2.65e-04  1.89e-02  2.50e-05  9.58e-04  5.98e-01  
 10  +2.6547e-01  +3.1716e-01  5.17e-02  1.32e-04  9.38e-03  2.13e-05  5.06e-04  8.97e-01  
 11  +2.5868e-01  +2.8415e-01  2.55e-02  6.36e-05  4.56e-03  1.07e-05  2.56e-04  5.74e-01  
 12  +2.5444e-01  +2.6460e-01  1.02e-02  2.49e-05  1.79e-03  4.16e-06  1.05e-04  6.84e-01  
 13  +2.5183e-01  +2.5283e-01  1.01e-03  2.45e-06  1.75e-04  3.76e-07  1.08e-05  9.44e-01  
 14  +2.5156e-01  +2.5174e-01  1.77e-04  4.30e-07  3.07e-05  6.61e-08  1.94e-06  9.24e-01  
 15  +2.5150e-01  +2.5150e-01  2.22e-06  5.38e-09  3.84e-07  8.15e-10  2.43e-08  9.88e-01  
 16  +2.5150e-01  +2.5150e-01  2.23e-08  5.40e-11  3.85e-09  8.18e-12  2.44e-10  9.90e-01  
 17  +2.5150e-01  +2.5150e-01  2.24e-10  5.44e-13  3.88e-11  8.26e-14  2.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.3181ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:12 PM: Optimal value: 2.515e-01
(CVXPY) Oct 06 04:16:12 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:12 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 24, Objective: 0.2515
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:12 PM: Your problem has 742 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 742
  constraints   = 1242
  nnz(P)        = 0
  nnz(A)        = 9951
  cones (total) = 1
    : Nonnegative = 1,  numel = 1242

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0186e+02  5.01e+02  9.60e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5092e-01  +1.0991e+02  1.09e+02  4.31e-01  2.08e+01  3.85e-03  5.74e-01  5.86e-01  
  2  +5.1081e-01  +1.3744e+01  1.32e+01  1.28e-01  8.08e+00  1.99e-02  2.41e-01  9.90e-01  
  3  +4.9851e-01  +2.7756e+00  2.28e+00  2.23e-02  1.64e+00  4.96e-03  5.09e-02  8.02e-01  
  4  +4.7335e-01  +2.4670e+00  1.99e+00  7.64e-03  5.86e-01  9.80e-03  1.73e-02  6.91e-01  
  5  +4.3625e-01  +1.9391e+00  1.50e+00  4.33e-03  3.28e-01  7.35e-03  1.02e-02  5.11e-01  
  6  +3.8347e-01  +1.1262e+00  7.43e-01  2.17e-03  1.59e-01  6.55e-05  5.69e-03  7.49e-01  
  7  +3.4475e-01  +8.1900e-01  4.74e-01  1.33e-03  9.55e-02  6.08e-05  3.81e-03  4.03e-01  
  8  +3.0177e-01  +5.3198e-01  2.30e-01  6.25e-04  4.42e-02  5.86e-05  2.04e-03  6.58e-01  
  9  +2.7588e-01  +3.8060e-01  1.05e-01  2.74e-04  1.95e-02  3.06e-05  9.88e-04  6.08e-01  
 10  +2.6394e-01  +3.1435e-01  5.04e-02  1.30e-04  9.21e-03  2.10e-05  4.98e-04  8.92e-01  
 11  +2.5737e-01  +2.8211e-01  2.47e-02  6.24e-05  4.46e-03  1.04e-05  2.51e-04  5.96e-01  
 12  +2.5280e-01  +2.6062e-01  7.82e-03  1.94e-05  1.39e-03  3.21e-06  8.20e-05  7.67e-01  
 13  +2.5105e-01  +2.5284e-01  1.79e-03  4.39e-06  3.13e-04  7.08e-07  1.93e-05  8.19e-01  
 14  +2.5058e-01  +2.5081e-01  2.36e-04  5.79e-07  4.11e-05  9.02e-08  2.61e-06  8.84e-01  
 15  +2.5050e-01  +2.5051e-01  4.42e-06  1.08e-08  7.68e-07  1.63e-09  4.92e-08  9.88e-01  
 16  +2.5050e-01  +2.5050e-01  4.44e-08  1.09e-10  7.71e-09  1.64e-11  4.95e-10  9.90e-01  
 17  +2.5050e-01  +2.5050e-01  4.47e-10  1.09e-12  7.76e-11  1.66e-13  5.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.2398ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:12 PM: Optimal value: 2.505e-01
(CVXPY) Oct 06 04:16:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:12 PM: Solver (including time spent in interface) took 4.717e-02 seconds
Iteration: 25, Objective: 0.2505
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:12 PM: Your problem has 752 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 752
  constraints   = 1252
  nnz(P)        = 0
  nnz(A)        = 10009
  cones (total) = 1
    : Nonnegative = 1,  numel = 1252

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0186e+02  5.01e+02  9.60e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.4999e-01  +1.0992e+02  1.09e+02  4.31e-01  2.07e+01  3.86e-03  5.74e-01  5.86e-01  
  2  +5.1004e-01  +1.3802e+01  1.33e+01  1.27e-01  8.00e+00  2.00e-02  2.40e-01  9.90e-01  
  3  +4.9756e-01  +2.8352e+00  2.34e+00  2.22e-02  1.63e+00  5.19e-03  5.07e-02  8.07e-01  
  4  +4.7051e-01  +2.4410e+00  1.97e+00  7.45e-03  5.68e-01  9.89e-03  1.70e-02  6.91e-01  
  5  +4.3222e-01  +1.9626e+00  1.53e+00  4.32e-03  3.26e-01  7.73e-03  1.02e-02  5.03e-01  
  6  +3.7887e-01  +1.0867e+00  7.08e-01  2.07e-03  1.51e-01  6.67e-05  5.51e-03  7.28e-01  
  7  +3.4160e-01  +8.0555e-01  4.64e-01  1.31e-03  9.34e-02  6.73e-05  3.78e-03  4.07e-01  
  8  +3.0416e-01  +5.5359e-01  2.49e-01  6.82e-04  4.80e-02  5.16e-05  2.20e-03  5.36e-01  
  9  +2.7603e-01  +3.8826e-01  1.12e-01  2.96e-04  2.09e-02  3.00e-05  1.06e-03  6.38e-01  
 10  +2.6086e-01  +3.0668e-01  4.58e-02  1.18e-04  8.36e-03  1.65e-05  4.61e-04  8.09e-01  
 11  +2.5570e-01  +2.8105e-01  2.54e-02  6.41e-05  4.56e-03  9.57e-06  2.60e-04  5.61e-01  
 12  +2.5088e-01  +2.5833e-01  7.45e-03  1.85e-05  1.32e-03  2.79e-06  7.95e-05  7.69e-01  
 13  +2.4932e-01  +2.5134e-01  2.02e-03  4.99e-06  3.54e-04  7.46e-07  2.23e-05  7.77e-01  
 14  +2.4877e-01  +2.4901e-01  2.36e-04  5.78e-07  4.09e-05  8.37e-08  2.66e-06  8.91e-01  
 15  +2.4870e-01  +2.4871e-01  4.38e-06  1.07e-08  7.58e-07  1.52e-09  4.97e-08  9.83e-01  
 16  +2.4870e-01  +2.4870e-01  4.40e-08  1.08e-10  7.63e-09  1.53e-11  5.00e-10  9.90e-01  
 17  +2.4870e-01  +2.4870e-01  4.41e-10  1.08e-12  7.63e-11  1.54e-13  5.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.0937ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:12 PM: Optimal value: 2.487e-01
(CVXPY) Oct 06 04:16:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:12 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 26, Objective: 0.2487
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:12 PM: Your problem has 761 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 761
  constraints   = 1261
  nnz(P)        = 0
  nnz(A)        = 10058
  cones (total) = 1
    : Nonnegative = 1,  numel = 1261

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0198e+02  5.01e+02  9.60e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.4713e-01  +1.1022e+02  1.10e+02  4.32e-01  2.06e+01  3.86e-03  5.75e-01  5.84e-01  
  2  +5.0800e-01  +1.4007e+01  1.35e+01  1.27e-01  7.98e+00  2.03e-02  2.40e-01  9.90e-01  
  3  +4.9511e-01  +2.7927e+00  2.30e+00  2.06e-02  1.51e+00  5.50e-03  4.69e-02  8.24e-01  
  4  +4.6492e-01  +2.3074e+00  1.84e+00  7.00e-03  5.33e-01  9.59e-03  1.60e-02  6.82e-01  
  5  +4.2711e-01  +1.9303e+00  1.50e+00  4.19e-03  3.15e-01  8.63e-03  9.86e-03  4.54e-01  
  6  +3.7195e-01  +1.0643e+00  6.92e-01  2.04e-03  1.48e-01  7.28e-05  5.42e-03  7.15e-01  
  7  +3.3706e-01  +8.0102e-01  4.64e-01  1.33e-03  9.46e-02  7.17e-05  3.83e-03  3.88e-01  
  8  +3.1023e-01  +6.1584e-01  3.06e-01  8.57e-04  6.04e-02  5.66e-05  2.68e-03  3.76e-01  
  9  +2.7673e-01  +4.0648e-01  1.30e-01  3.50e-04  2.46e-02  4.19e-05  1.24e-03  7.68e-01  
 10  +2.6339e-01  +3.3187e-01  6.85e-02  1.81e-04  1.27e-02  2.47e-05  6.86e-04  6.29e-01  
 11  +2.5284e-01  +2.7500e-01  2.22e-02  5.75e-05  4.07e-03  8.20e-06  2.35e-04  7.35e-01  
 12  +2.4952e-01  +2.5904e-01  9.51e-03  2.42e-05  1.71e-03  3.53e-06  1.03e-04  6.86e-01  
 13  +2.4738e-01  +2.4923e-01  1.85e-03  4.64e-06  3.28e-04  6.68e-07  2.08e-05  8.42e-01  
 14  +2.4691e-01  +2.4724e-01  3.38e-04  8.39e-07  5.92e-05  1.19e-07  3.88e-06  8.31e-01  
 15  +2.4680e-01  +2.4681e-01  9.19e-06  2.27e-08  1.60e-06  3.16e-09  1.06e-07  9.74e-01  
 16  +2.4680e-01  +2.4680e-01  9.21e-08  2.28e-10  1.60e-08  3.17e-11  1.07e-09  9.90e-01  
 17  +2.4680e-01  +2.4680e-01  9.21e-10  2.28e-12  1.60e-10  3.19e-13  1.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.4298ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:12 PM: Optimal value: 2.468e-01
(CVXPY) Oct 06 04:16:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:12 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 27, Objective: 0.2468
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:12 PM: Your problem has 763 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 763
  constraints   = 1263
  nnz(P)        = 0
  nnz(A)        = 10089
  cones (total) = 1
    : Nonnegative = 1,  numel = 1263

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0198e+02  5.01e+02  9.60e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.4714e-01  +1.1020e+02  1.10e+02  4.32e-01  2.06e+01  3.86e-03  5.75e-01  5.84e-01  
  2  +5.0797e-01  +1.4004e+01  1.35e+01  1.27e-01  7.96e+00  2.03e-02  2.40e-01  9.90e-01  
  3  +4.9503e-01  +2.8019e+00  2.31e+00  2.06e-02  1.51e+00  5.52e-03  4.70e-02  8.24e-01  
  4  +4.6467e-01  +2.3062e+00  1.84e+00  7.00e-03  5.32e-01  9.57e-03  1.60e-02  6.83e-01  
  5  +4.2691e-01  +1.9332e+00  1.51e+00  4.19e-03  3.16e-01  8.67e-03  9.89e-03  4.52e-01  
  6  +3.7211e-01  +1.0700e+00  6.98e-01  2.05e-03  1.49e-01  7.33e-05  5.45e-03  7.15e-01  
  7  +3.3689e-01  +8.0302e-01  4.66e-01  1.34e-03  9.50e-02  7.34e-05  3.85e-03  3.95e-01  
  8  +3.0802e-01  +6.0216e-01  2.94e-01  8.24e-04  5.80e-02  5.59e-05  2.60e-03  4.05e-01  
  9  +2.7564e-01  +4.0057e-01  1.25e-01  3.37e-04  2.37e-02  3.97e-05  1.20e-03  7.57e-01  
 10  +2.6234e-01  +3.2597e-01  6.36e-02  1.68e-04  1.18e-02  2.26e-05  6.41e-04  6.43e-01  
 11  +2.5250e-01  +2.7300e-01  2.05e-02  5.31e-05  3.76e-03  7.73e-06  2.17e-04  7.76e-01  
 12  +2.4912e-01  +2.5692e-01  7.81e-03  1.98e-05  1.41e-03  2.93e-06  8.49e-05  7.63e-01  
 13  +2.4726e-01  +2.4872e-01  1.46e-03  3.65e-06  2.58e-04  5.33e-07  1.64e-05  8.54e-01  
 14  +2.4687e-01  +2.4710e-01  2.30e-04  5.70e-07  4.02e-05  8.25e-08  2.63e-06  8.67e-01  
 15  +2.4680e-01  +2.4680e-01  3.39e-06  8.39e-09  5.91e-07  1.20e-09  3.90e-08  9.89e-01  
 16  +2.4680e-01  +2.4680e-01  3.41e-08  8.43e-11  5.94e-09  1.21e-11  3.92e-10  9.90e-01  
 17  +2.4680e-01  +2.4680e-01  3.41e-10  8.44e-13  5.94e-11  1.22e-13  3.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.2874ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:12 PM: Optimal value: 2.468e-01
(CVXPY) Oct 06 04:16:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:12 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 28, Objective: 0.2468
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:13 PM: Your problem has 773 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:13 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 773
  constraints   = 1273
  nnz(P)        = 0
  nnz(A)        = 10139
  cones (total) = 1
    : Nonnegative = 1,  numel = 1273

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0197e+02  5.01e+02  9.60e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.4675e-01  +1.1019e+02  1.10e+02  4.32e-01  2.04e+01  3.86e-03  5.74e-01  5.85e-01  
  2  +5.0754e-01  +1.4055e+01  1.35e+01  1.27e-01  7.87e+00  2.04e-02  2.39e-01  9.90e-01  
  3  +4.9417e-01  +2.7843e+00  2.29e+00  2.00e-02  1.46e+00  5.66e-03  4.56e-02  8.27e-01  
  4  +4.6139e-01  +2.2704e+00  1.81e+00  6.59e-03  4.99e-01  9.98e-03  1.51e-02  6.91e-01  
  5  +4.2662e-01  +1.9116e+00  1.48e+00  4.15e-03  3.12e-01  8.80e-03  9.79e-03  4.13e-01  
  6  +3.7073e-01  +1.0525e+00  6.82e-01  2.02e-03  1.45e-01  7.42e-05  5.37e-03  7.14e-01  
  7  +3.3598e-01  +7.9824e-01  4.62e-01  1.33e-03  9.41e-02  7.75e-05  3.83e-03  4.01e-01  
  8  +3.0601e-01  +5.9083e-01  2.85e-01  7.99e-04  5.60e-02  5.65e-05  2.52e-03  4.19e-01  
  9  +2.7448e-01  +3.9611e-01  1.22e-01  3.28e-04  2.30e-02  3.59e-05  1.17e-03  7.13e-01  
 10  +2.6149e-01  +3.2473e-01  6.32e-02  1.67e-04  1.17e-02  2.11e-05  6.33e-04  6.14e-01  
 11  +2.5166e-01  +2.7260e-01  2.09e-02  5.41e-05  3.81e-03  7.58e-06  2.19e-04  7.68e-01  
 12  +2.4824e-01  +2.5641e-01  8.17e-03  2.07e-05  1.46e-03  3.00e-06  8.79e-05  7.46e-01  
 13  +2.4650e-01  +2.4861e-01  2.11e-03  5.25e-06  3.70e-04  7.92e-07  2.34e-05  9.26e-01  
 14  +2.4594e-01  +2.4636e-01  4.19e-04  1.04e-06  7.29e-05  1.55e-07  4.74e-06  8.11e-01  
 15  +2.4580e-01  +2.4581e-01  9.38e-06  2.32e-08  1.63e-06  3.38e-09  1.07e-07  9.87e-01  
 16  +2.4580e-01  +2.4580e-01  9.40e-08  2.32e-10  1.63e-08  3.39e-11  1.07e-09  9.90e-01  
 17  +2.4580e-01  +2.4580e-01  9.40e-10  2.32e-12  1.63e-10  3.40e-13  1.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.4472ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:13 PM: Optimal value: 2.458e-01
(CVXPY) Oct 06 04:16:13 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:13 PM: Solver (including time spent in interface) took 3.125e-02 seconds
FULL MODEL:
  Accruacy: 0.708
  Our objective: 0.41600000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                        <-- (term's our objective: 0.176)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.022)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 11.090336322784424
Best over terms:
  Our final objective: 0.176
    Its accruacy: 0.588
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.176
  Highest accruacy: 0.588
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

