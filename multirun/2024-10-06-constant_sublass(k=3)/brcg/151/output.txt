Command:
python test_script.py -s constant_subclass -d 4 -n 10000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1514
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.15299999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:14 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:14 PM: Finished problem compilation (took 5.971e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.84e-01  8.58e+01  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +9.6886e+02  9.68e+02  3.38e-01  4.78e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5104e-01  +1.5090e+02  1.50e+02  1.40e-01  2.42e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1085e-01  +3.2701e+01  3.22e+01  1.11e-01  1.89e+01  1.78e-05  2.25e-01  6.48e-02  
  4  +5.0005e-01  +1.0501e+00  5.50e-01  3.69e-03  6.33e-01  3.79e-06  1.44e-01  9.90e-01  
  5  +4.9999e-01  +6.1828e-01  1.18e-01  7.90e-04  1.36e-01  1.23e-06  3.00e-02  8.19e-01  
  6  +4.9874e-01  +8.6038e-01  3.62e-01  9.16e-04  1.59e-01  3.08e-05  3.23e-03  9.50e-01  
  7  +4.9086e-01  +7.6167e-01  2.71e-01  1.22e-04  2.11e-02  1.75e-04  3.79e-04  8.83e-01  
  8  +4.7593e-01  +5.3593e-01  6.00e-02  1.49e-05  2.58e-03  7.45e-05  4.81e-05  9.60e-01  
  9  +4.6437e-01  +4.8026e-01  1.59e-02  3.84e-06  6.65e-04  6.91e-07  1.37e-05  9.65e-01  
 10  +4.6050e-01  +4.6236e-01  1.87e-03  4.35e-07  7.54e-05  7.80e-08  1.65e-06  8.85e-01  
 11  +4.5982e-01  +4.5990e-01  7.40e-05  1.55e-08  2.68e-06  3.21e-09  6.59e-08  9.81e-01  
 12  +4.5980e-01  +4.5980e-01  7.41e-07  1.55e-10  2.68e-08  3.22e-11  6.60e-10  9.90e-01  
 13  +4.5980e-01  +4.5980e-01  7.43e-09  1.55e-12  2.69e-10  3.53e-13  7.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 65.3866ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:14 PM: Optimal value: 4.598e-01
(CVXPY) Oct 06 03:51:14 PM: Compilation took 5.971e-02 seconds
(CVXPY) Oct 06 03:51:14 PM: Solver (including time spent in interface) took 7.495e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:14 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:14 PM: Finished problem compilation (took 2.981e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 44972
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0013e+03  5.00e+03  9.84e-01  9.22e+01  1.00e+00  1.00e+00   ------   
  1  +6.0801e-01  +9.6972e+02  9.69e+02  3.39e-01  5.13e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5075e-01  +1.5033e+02  1.50e+02  1.40e-01  2.59e+01  8.27e-03  2.28e-01  7.27e-01  
  3  +5.1068e-01  +3.2346e+01  3.18e+01  1.11e-01  2.02e+01  1.78e-05  2.25e-01  6.77e-02  
  4  +5.0049e-01  +2.4347e+00  1.93e+00  1.30e-02  2.35e+00  4.81e-06  1.92e-01  3.91e-01  
  5  +5.0003e-01  +7.6309e-01  2.63e-01  1.76e-03  3.25e-01  1.29e-06  5.95e-02  8.00e-01  
  6  +4.9999e-01  +8.4188e-01  3.42e-01  2.25e-03  4.15e-01  2.55e-06  3.09e-02  6.51e-01  
  7  +4.9865e-01  +7.3394e-01  2.35e-01  5.21e-04  9.73e-02  2.47e-05  1.66e-03  9.58e-01  
  8  +4.9767e-01  +7.2665e-01  2.29e-01  3.35e-04  6.25e-02  3.79e-05  1.02e-03  3.90e-01  
  9  +4.9710e-01  +7.0984e-01  2.13e-01  1.80e-04  3.36e-02  3.02e-05  5.17e-04  9.73e-01  
 10  +4.8965e-01  +6.5972e-01  1.70e-01  5.50e-05  1.03e-02  6.86e-05  1.56e-04  7.04e-01  
 11  +4.9021e-01  +6.6794e-01  1.78e-01  5.12e-05  9.59e-03  6.18e-05  1.42e-04  3.06e-01  
 12  +4.8481e-01  +6.4338e-01  1.59e-01  4.14e-05  7.74e-03  5.16e-06  1.17e-04  9.20e-01  
 13  +4.8287e-01  +6.3714e-01  1.54e-01  3.64e-05  6.80e-03  5.60e-06  1.02e-04  2.01e-01  
 14  +4.7738e-01  +6.1692e-01  1.40e-01  3.46e-05  6.46e-03  5.02e-06  1.01e-04  2.17e-01  
 15  +4.6304e-01  +5.5633e-01  9.33e-02  1.86e-05  3.46e-03  4.10e-06  5.44e-05  5.70e-01  
 16  +4.5934e-01  +5.4378e-01  8.44e-02  1.61e-05  3.00e-03  3.79e-06  4.75e-05  1.49e-01  
 17  +4.5930e-01  +5.4366e-01  8.44e-02  1.61e-05  3.00e-03  3.78e-06  4.75e-05  2.20e-03  
 18  +4.4984e-01  +5.1431e-01  6.45e-02  1.11e-05  2.06e-03  3.98e-06  3.33e-05  8.80e-01  
 19  +4.4252e-01  +4.8715e-01  4.46e-02  7.46e-06  1.39e-03  2.84e-06  2.28e-05  4.44e-01  
 20  +4.3177e-01  +4.4853e-01  1.68e-02  2.65e-06  4.91e-04  1.31e-06  8.27e-06  9.76e-01  
 21  +4.2462e-01  +4.2510e-01  4.79e-04  7.55e-08  1.40e-05  3.44e-08  2.42e-07  9.86e-01  
 22  +4.2440e-01  +4.2441e-01  4.80e-06  7.56e-10  1.40e-07  3.44e-10  2.42e-09  9.90e-01  
 23  +4.2440e-01  +4.2440e-01  4.80e-08  7.56e-12  1.40e-09  3.44e-12  2.42e-11  9.90e-01  
 24  +4.2440e-01  +4.2440e-01  4.80e-10  7.55e-14  1.40e-11  3.45e-14  2.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 151.7137ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:14 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 03:51:14 PM: Compilation took 2.981e-02 seconds
(CVXPY) Oct 06 03:51:14 PM: Solver (including time spent in interface) took 1.599e-01 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:14 PM: Your problem has 5020 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:14 PM: Finished problem compilation (took 3.017e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5020
  constraints   = 10020
  nnz(P)        = 0
  nnz(A)        = 45280
  cones (total) = 1
    : Nonnegative = 1,  numel = 10020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0013e+03  5.00e+03  9.84e-01  9.22e+01  1.00e+00  1.00e+00   ------   
  1  +6.0806e-01  +9.6967e+02  9.69e+02  3.39e-01  5.13e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5075e-01  +1.5033e+02  1.50e+02  1.40e-01  2.59e+01  8.28e-03  2.28e-01  7.27e-01  
  3  +5.1067e-01  +3.2322e+01  3.18e+01  1.11e-01  2.02e+01  1.78e-05  2.25e-01  6.78e-02  
  4  +5.0049e-01  +2.4398e+00  1.94e+00  1.30e-02  2.36e+00  4.81e-06  1.92e-01  3.90e-01  
  5  +5.0003e-01  +7.7695e-01  2.77e-01  1.85e-03  3.42e-01  1.32e-06  6.21e-02  7.89e-01  
  6  +5.0000e-01  +8.4245e-01  3.42e-01  2.26e-03  4.17e-01  2.41e-06  3.30e-02  6.36e-01  
  7  +4.9894e-01  +7.3770e-01  2.39e-01  6.31e-04  1.18e-01  1.99e-05  2.09e-03  9.50e-01  
  8  +4.9727e-01  +7.2490e-01  2.28e-01  2.87e-04  5.37e-02  4.34e-05  8.61e-04  5.97e-01  
  9  +4.9709e-01  +7.1345e-01  2.16e-01  1.91e-04  3.57e-02  3.19e-05  5.50e-04  7.92e-01  
 10  +4.9787e-01  +7.1699e-01  2.19e-01  1.73e-04  3.25e-02  2.06e-05  4.90e-04  5.53e-01  
 11  +4.9645e-01  +7.0686e-01  2.10e-01  1.04e-04  1.95e-02  2.50e-05  2.90e-04  6.41e-01  
 12  +4.9355e-01  +6.9009e-01  1.97e-01  6.30e-05  1.18e-02  2.34e-05  1.74e-04  7.78e-01  
 13  +4.8399e-01  +6.4234e-01  1.58e-01  3.40e-05  6.35e-03  2.14e-05  9.45e-05  6.82e-01  
 14  +4.7259e-01  +6.1447e-01  1.42e-01  2.77e-05  5.17e-03  7.42e-06  7.98e-05  8.89e-01  
 15  +4.6176e-01  +5.6298e-01  1.01e-01  1.91e-05  3.56e-03  5.85e-06  5.67e-05  7.86e-01  
 16  +4.5403e-01  +5.3419e-01  8.02e-02  1.45e-05  2.70e-03  4.59e-06  4.37e-05  2.47e-01  
 17  +4.5308e-01  +5.2985e-01  7.68e-02  1.38e-05  2.57e-03  4.59e-06  4.17e-05  2.75e-01  
 18  +4.5189e-01  +5.2506e-01  7.32e-02  1.30e-05  2.42e-03  4.51e-06  3.92e-05  2.19e-01  
 19  +4.3541e-01  +4.6521e-01  2.98e-02  5.01e-06  9.31e-04  1.71e-06  1.58e-05  6.82e-01  
 20  +4.2455e-01  +4.2653e-01  1.98e-03  3.25e-07  6.04e-05  9.06e-08  1.07e-06  9.40e-01  
 21  +4.2371e-01  +4.2374e-01  2.68e-05  4.40e-09  8.17e-07  1.25e-09  1.47e-08  9.89e-01  
 22  +4.2370e-01  +4.2370e-01  2.68e-07  4.40e-11  8.17e-09  1.25e-11  1.47e-10  9.90e-01  
 23  +4.2370e-01  +4.2370e-01  2.68e-09  4.40e-13  8.17e-11  1.25e-13  1.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 142.2609ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:14 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:14 PM: Optimal value: 4.237e-01
(CVXPY) Oct 06 03:51:14 PM: Compilation took 3.017e-02 seconds
(CVXPY) Oct 06 03:51:14 PM: Solver (including time spent in interface) took 1.524e-01 seconds
FULL MODEL:
  Accruacy: 0.5765
  Our objective: 0.15300000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.1514)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.0016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.560298919677734
Best over terms:
  Our final objective: 0.1514
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1514
  Highest accruacy: 0.5757
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

