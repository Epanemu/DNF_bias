Command:
python test_script.py -s constant_subclass -d 4 -n 50 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:13 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:13 PM: Finished problem compilation (took 4.514e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8995e-01  +2.6120e+01  2.56e+01  8.14e-01  5.46e+00  1.00e+00  1.09e+00   ------   
  1  +5.9289e-01  +5.2814e+00  4.69e+00  2.81e-01  2.78e+00  4.04e-03  5.11e-01  6.73e-01  
  2  +5.0761e-01  +1.1320e+00  6.24e-01  6.01e-02  6.86e-01  1.06e-02  1.64e-01  8.82e-01  
  3  +4.4715e-01  +9.3151e-01  4.84e-01  2.43e-02  2.87e-01  1.15e-02  7.89e-02  6.14e-01  
  4  +3.8364e-01  +4.5909e-01  7.55e-02  3.69e-03  4.26e-02  2.01e-04  1.72e-02  8.52e-01  
  5  +3.6132e-01  +3.6570e-01  4.39e-03  2.09e-04  2.41e-03  2.32e-05  1.19e-03  9.62e-01  
  6  +3.6011e-01  +3.6016e-01  4.40e-05  2.10e-06  2.41e-05  2.31e-07  1.20e-05  9.90e-01  
  7  +3.6010e-01  +3.6010e-01  4.40e-07  2.10e-08  2.41e-07  2.31e-09  1.20e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  4.40e-09  2.10e-10  2.41e-09  2.31e-11  1.20e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 368µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:13 PM: Optimal value: 3.601e-01
(CVXPY) Oct 06 03:49:13 PM: Compilation took 4.514e-02 seconds
(CVXPY) Oct 06 03:49:13 PM: Solver (including time spent in interface) took 5.096e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:13 PM: Your problem has 41 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:13 PM: Finished problem compilation (took 7.187e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 41
  constraints   = 66
  nnz(P)        = 0
  nnz(A)        = 243
  cones (total) = 1
    : Nonnegative = 1,  numel = 66

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8315e-01  +2.6296e+01  2.58e+01  8.26e-01  5.79e+00  1.00e+00  1.10e+00   ------   
  1  +5.6368e-01  +5.4084e+00  4.84e+00  3.03e-01  2.96e+00  4.00e-03  5.38e-01  6.58e-01  
  2  +4.8758e-01  +1.2444e+00  7.57e-01  6.81e-02  8.18e-01  1.24e-02  1.82e-01  8.63e-01  
  3  +4.0731e-01  +7.5909e-01  3.52e-01  1.77e-02  2.20e-01  9.29e-03  5.58e-02  7.64e-01  
  4  +3.5850e-01  +5.6465e-01  2.06e-01  8.28e-03  1.03e-01  5.09e-03  2.88e-02  5.73e-01  
  5  +3.1063e-01  +3.3692e-01  2.63e-02  1.08e-03  1.32e-02  5.41e-05  4.28e-03  9.66e-01  
  6  +3.0052e-01  +3.0129e-01  7.74e-04  3.14e-05  3.81e-04  2.07e-06  1.31e-04  9.73e-01  
  7  +3.0023e-01  +3.0030e-01  6.53e-05  2.70e-06  3.25e-05  1.23e-07  1.22e-05  9.09e-01  
  8  +3.0020e-01  +3.0020e-01  1.14e-06  4.72e-08  5.67e-07  5.84e-09  2.21e-07  9.89e-01  
  9  +3.0020e-01  +3.0020e-01  1.14e-08  4.72e-10  5.66e-09  5.83e-11  2.21e-09  9.90e-01  
 10  +3.0020e-01  +3.0020e-01  1.14e-10  4.72e-12  5.67e-11  5.83e-13  2.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 429.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:13 PM: Optimal value: 3.002e-01
(CVXPY) Oct 06 03:49:13 PM: Compilation took 7.187e-03 seconds
(CVXPY) Oct 06 03:49:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:13 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:13 PM: Finished problem compilation (took 7.899e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 269
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7710e-01  +2.6371e+01  2.59e+01  8.31e-01  5.75e+00  1.00e+00  1.10e+00   ------   
  1  +5.3384e-01  +5.5024e+00  4.97e+00  3.16e-01  2.99e+00  3.97e-03  5.53e-01  6.45e-01  
  2  +4.5463e-01  +1.3517e+00  8.97e-01  7.38e-02  8.76e-01  1.38e-02  1.92e-01  8.43e-01  
  3  +3.4664e-01  +7.4869e-01  4.02e-01  2.06e-02  2.49e-01  8.56e-03  6.41e-02  7.25e-01  
  4  +3.2401e-01  +6.4022e-01  3.16e-01  1.43e-02  1.74e-01  6.97e-03  4.75e-02  3.44e-01  
  5  +2.8871e-01  +4.5916e-01  1.70e-01  7.01e-03  8.44e-02  3.59e-03  2.55e-02  5.66e-01  
  6  +2.5228e-01  +2.9070e-01  3.84e-02  1.53e-03  1.82e-02  6.39e-04  6.14e-03  8.13e-01  
  7  +2.4065e-01  +2.4132e-01  6.72e-04  2.69e-05  3.19e-04  6.67e-06  1.13e-04  9.84e-01  
  8  +2.4042e-01  +2.4046e-01  4.21e-05  1.74e-06  2.04e-05  2.63e-07  7.70e-06  9.33e-01  
  9  +2.4040e-01  +2.4040e-01  5.34e-07  2.22e-08  2.60e-07  3.73e-09  1.00e-07  9.89e-01  
 10  +2.4040e-01  +2.4040e-01  5.34e-09  2.22e-10  2.60e-09  3.73e-11  1.00e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 448.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:13 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:13 PM: Optimal value: 2.404e-01
(CVXPY) Oct 06 03:49:13 PM: Compilation took 7.899e-03 seconds
(CVXPY) Oct 06 03:49:13 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.52

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.24)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.345657110214233
Best over terms:
  Our final objective: 0.24
    Its accruacy: 0.62
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.24
  Highest accruacy: 0.62
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

