Command:
python test_script.py -s constant_subclass -d 6 -n 10000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1514
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 6.

Computed total variation: 0.16699999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:26 PM: Your problem has 5013 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:26 PM: Finished problem compilation (took 6.907e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5013
  constraints   = 10013
  nnz(P)        = 0
  nnz(A)        = 45013
  cones (total) = 1
    : Nonnegative = 1,  numel = 10013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0011e+03  5.00e+03  9.85e-01  9.91e+01  1.00e+00  1.00e+00   ------   
  1  +5.9314e-01  +1.0289e+03  1.03e+03  3.86e-01  6.02e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4196e-01  +1.3638e+02  1.36e+02  1.50e-01  2.96e+01  1.15e-02  2.44e-01  8.24e-01  
  3  +5.1046e-01  +3.4045e+01  3.35e+01  1.18e-01  2.30e+01  2.90e-05  2.39e-01  1.21e-01  
  4  +5.0030e-01  +1.3583e+00  8.58e-01  5.81e-03  1.15e+00  4.61e-06  1.29e-01  9.90e-01  
  5  +5.0002e-01  +6.4579e-01  1.46e-01  9.72e-04  1.93e-01  3.92e-06  3.41e-02  8.52e-01  
  6  +4.9848e-01  +1.2358e+00  7.37e-01  8.40e-04  1.68e-01  2.04e-04  2.63e-03  9.89e-01  
  7  +4.9987e-01  +9.5894e-01  4.59e-01  7.28e-04  1.46e-01  3.48e-05  2.28e-03  3.37e-01  
  8  +4.9993e-01  +8.4024e-01  3.40e-01  5.21e-04  1.05e-01  2.16e-05  1.63e-03  4.32e-01  
  9  +4.9989e-01  +7.0344e-01  2.04e-01  2.25e-04  4.51e-02  1.42e-05  6.82e-04  8.38e-01  
 10  +4.9888e-01  +6.9387e-01  1.95e-01  5.08e-05  1.02e-02  6.09e-05  1.48e-04  7.92e-01  
 11  +4.8685e-01  +5.9653e-01  1.10e-01  4.15e-05  8.30e-03  3.79e-07  1.34e-04  3.48e-01  
 12  +4.7963e-01  +5.5149e-01  7.19e-02  2.05e-05  4.10e-03  2.31e-06  6.73e-05  9.90e-01  
 13  +4.6453e-01  +4.7976e-01  1.52e-02  3.75e-06  7.49e-04  4.01e-07  1.34e-05  9.90e-01  
 14  +4.6056e-01  +4.6253e-01  1.97e-03  4.60e-07  9.19e-05  5.10e-08  1.75e-06  8.76e-01  
 15  +4.5982e-01  +4.5989e-01  6.85e-05  1.43e-08  2.86e-06  2.45e-09  6.10e-08  9.83e-01  
 16  +4.5980e-01  +4.5980e-01  6.86e-07  1.43e-10  2.86e-08  2.45e-11  6.11e-10  9.90e-01  
 17  +4.5980e-01  +4.5980e-01  6.88e-09  1.44e-12  2.87e-10  2.70e-13  6.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 104.8751ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:26 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:26 PM: Optimal value: 4.598e-01
(CVXPY) Oct 06 03:59:26 PM: Compilation took 6.907e-02 seconds
(CVXPY) Oct 06 03:59:26 PM: Solver (including time spent in interface) took 1.217e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:26 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:26 PM: Finished problem compilation (took 3.141e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 53833
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9305e-01  +1.0290e+03  1.03e+03  3.86e-01  6.30e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4177e-01  +1.3597e+02  1.35e+02  1.50e-01  3.09e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.1034e-01  +3.3789e+01  3.33e+01  1.18e-01  2.40e+01  2.90e-05  2.39e-01  1.24e-01  
  4  +5.0029e-01  +1.3903e+00  8.90e-01  6.03e-03  1.25e+00  5.03e-06  1.26e-01  9.90e-01  
  5  +5.0004e-01  +7.0377e-01  2.04e-01  1.36e-03  2.84e-01  3.49e-06  3.60e-02  7.94e-01  
  6  +5.0001e-01  +7.5674e-01  2.57e-01  1.68e-03  3.51e-01  6.79e-06  2.01e-02  5.89e-01  
  7  +4.9672e-01  +8.2049e-01  3.24e-01  2.06e-04  4.35e-02  2.50e-04  5.87e-04  9.84e-01  
  8  +4.8887e-01  +7.3081e-01  2.42e-01  7.13e-05  1.51e-02  4.18e-04  2.03e-04  6.84e-01  
  9  +4.9308e-01  +7.1052e-01  2.17e-01  6.23e-05  1.32e-02  4.42e-06  1.73e-04  8.54e-01  
 10  +4.7858e-01  +6.1049e-01  1.32e-01  2.58e-05  5.43e-03  6.77e-06  7.25e-05  9.24e-01  
 11  +4.7793e-01  +6.1192e-01  1.34e-01  2.46e-05  5.19e-03  7.38e-06  6.88e-05  1.46e-01  
 12  +4.7237e-01  +5.9335e-01  1.21e-01  2.34e-05  4.93e-03  6.49e-06  6.64e-05  2.99e-01  
 13  +4.5028e-01  +5.1673e-01  6.65e-02  1.08e-05  2.27e-03  3.67e-06  3.21e-05  6.19e-01  
 14  +4.2628e-01  +4.3007e-01  3.80e-03  6.03e-07  1.26e-04  8.66e-08  1.92e-06  9.90e-01  
 15  +4.2442e-01  +4.2446e-01  3.95e-05  6.22e-09  1.30e-06  8.71e-10  1.99e-08  9.90e-01  
 16  +4.2440e-01  +4.2440e-01  3.95e-07  6.22e-11  1.30e-08  8.71e-12  1.99e-10  9.90e-01  
 17  +4.2440e-01  +4.2440e-01  3.95e-09  6.22e-13  1.30e-10  8.81e-14  2.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 111.4203ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:26 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:26 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 03:59:26 PM: Compilation took 3.141e-02 seconds
(CVXPY) Oct 06 03:59:26 PM: Solver (including time spent in interface) took 1.282e-01 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:27 PM: Your problem has 5029 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:27 PM: Finished problem compilation (took 3.843e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5029
  constraints   = 10029
  nnz(P)        = 0
  nnz(A)        = 55556
  cones (total) = 1
    : Nonnegative = 1,  numel = 10029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9309e-01  +1.0290e+03  1.03e+03  3.86e-01  6.32e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4175e-01  +1.3595e+02  1.35e+02  1.50e-01  3.10e+01  1.15e-02  2.45e-01  8.26e-01  
  3  +5.1032e-01  +3.3746e+01  3.32e+01  1.18e-01  2.40e+01  2.90e-05  2.39e-01  1.25e-01  
  4  +5.0029e-01  +1.3916e+00  8.91e-01  6.05e-03  1.25e+00  5.05e-06  1.26e-01  9.90e-01  
  5  +5.0007e-01  +8.0117e-01  3.01e-01  2.02e-03  4.21e-01  3.66e-06  5.10e-02  6.41e-01  
  6  +4.9988e-01  +8.2106e-01  3.21e-01  1.64e-03  3.45e-01  1.82e-05  7.46e-03  9.45e-01  
  7  +4.9586e-01  +7.8696e-01  2.91e-01  1.38e-04  2.91e-02  2.96e-04  3.84e-04  9.49e-01  
  8  +4.9150e-01  +7.2393e-01  2.32e-01  7.17e-05  1.52e-02  2.76e-04  1.99e-04  6.72e-01  
  9  +4.8694e-01  +6.9263e-01  2.06e-01  5.19e-05  1.10e-02  2.28e-04  1.44e-04  4.30e-01  
 10  +4.8539e-01  +6.8425e-01  1.99e-01  4.76e-05  1.01e-02  2.07e-04  1.32e-04  1.60e-01  
 11  +4.8468e-01  +6.7811e-01  1.93e-01  4.69e-05  9.91e-03  1.73e-04  1.31e-04  1.14e-01  
 12  +4.8175e-01  +6.5338e-01  1.72e-01  4.14e-05  8.74e-03  1.67e-06  1.20e-04  8.12e-01  
 13  +4.6030e-01  +5.5056e-01  9.03e-02  1.85e-05  3.90e-03  2.87e-06  5.63e-05  7.66e-01  
 14  +4.5344e-01  +5.3543e-01  8.20e-02  1.50e-05  3.15e-03  3.42e-06  4.52e-05  4.08e-01  
 15  +4.4959e-01  +5.2178e-01  7.22e-02  1.29e-05  2.70e-03  3.08e-06  3.92e-05  1.63e-01  
 16  +4.4742e-01  +5.1426e-01  6.68e-02  1.19e-05  2.50e-03  3.79e-06  3.67e-05  5.51e-01  
 17  +4.3285e-01  +4.6160e-01  2.88e-02  4.82e-06  1.01e-03  2.07e-06  1.54e-05  9.90e-01  
 18  +4.2751e-01  +4.4367e-01  1.62e-02  2.69e-06  5.65e-04  1.14e-06  8.76e-06  5.17e-01  
 19  +4.2092e-01  +4.2171e-01  7.86e-04  1.29e-07  2.71e-05  4.90e-08  4.30e-07  9.64e-01  
 20  +4.2060e-01  +4.2061e-01  7.94e-06  1.30e-09  2.73e-07  4.94e-10  4.35e-09  9.90e-01  
 21  +4.2060e-01  +4.2060e-01  7.94e-08  1.30e-11  2.73e-09  4.94e-12  4.35e-11  9.90e-01  
 22  +4.2060e-01  +4.2060e-01  7.94e-10  1.30e-13  2.73e-11  4.95e-14  4.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.4244ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:27 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:27 PM: Optimal value: 4.206e-01
(CVXPY) Oct 06 03:59:27 PM: Compilation took 3.843e-02 seconds
(CVXPY) Oct 06 03:59:27 PM: Solver (including time spent in interface) took 1.641e-01 seconds
Iteration: 3, Objective: 0.4206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:27 PM: Your problem has 5030 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:27 PM: Finished problem compilation (took 3.522e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5030
  constraints   = 10030
  nnz(P)        = 0
  nnz(A)        = 55724
  cones (total) = 1
    : Nonnegative = 1,  numel = 10030

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0012e+03  5.00e+03  9.85e-01  1.04e+02  1.00e+00  1.00e+00   ------   
  1  +5.9307e-01  +1.0290e+03  1.03e+03  3.86e-01  6.32e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4172e-01  +1.3589e+02  1.35e+02  1.50e-01  3.10e+01  1.15e-02  2.45e-01  8.26e-01  
  3  +5.1032e-01  +3.3732e+01  3.32e+01  1.18e-01  2.40e+01  2.90e-05  2.39e-01  1.25e-01  
  4  +5.0029e-01  +1.3925e+00  8.92e-01  6.06e-03  1.25e+00  5.05e-06  1.26e-01  9.90e-01  
  5  +5.0007e-01  +7.9439e-01  2.94e-01  1.97e-03  4.11e-01  3.92e-06  4.82e-02  7.19e-01  
  6  +4.9988e-01  +8.5502e-01  3.55e-01  1.83e-03  3.84e-01  1.92e-05  8.38e-03  9.22e-01  
  7  +4.9445e-01  +7.9902e-01  3.05e-01  1.15e-04  2.43e-02  3.94e-04  3.17e-04  9.62e-01  
  8  +4.9026e-01  +7.4082e-01  2.51e-01  7.01e-05  1.48e-02  3.21e-04  1.94e-04  5.74e-01  
  9  +4.8677e-01  +7.1761e-01  2.31e-01  5.52e-05  1.17e-02  2.88e-04  1.53e-04  3.15e-01  
 10  +4.8325e-01  +6.8906e-01  2.06e-01  5.25e-05  1.11e-02  1.90e-04  1.52e-04  1.27e-01  
 11  +4.7524e-01  +6.2394e-01  1.49e-01  3.90e-05  8.21e-03  6.64e-05  1.14e-04  4.93e-01  
 12  +4.4992e-01  +5.2749e-01  7.76e-02  1.42e-05  2.98e-03  4.17e-05  4.35e-05  6.52e-01  
 13  +4.4257e-01  +5.0092e-01  5.83e-02  1.02e-05  2.15e-03  2.91e-05  3.20e-05  3.27e-01  
 14  +4.4104e-01  +4.9518e-01  5.41e-02  9.86e-06  2.07e-03  2.45e-05  3.20e-05  1.62e-02  
 15  +4.3860e-01  +4.8598e-01  4.74e-02  8.40e-06  1.76e-03  1.39e-05  2.70e-05  5.44e-01  
 16  +4.2799e-01  +4.4801e-01  2.00e-02  3.43e-06  7.19e-04  5.27e-06  1.13e-05  6.55e-01  
 17  +4.2109e-01  +4.2467e-01  3.59e-03  6.07e-07  1.27e-04  4.73e-07  2.06e-06  9.16e-01  
 18  +4.1954e-01  +4.1963e-01  8.92e-05  1.50e-08  3.14e-06  1.12e-08  5.12e-08  9.77e-01  
 19  +4.1950e-01  +4.1950e-01  8.93e-07  1.50e-10  3.14e-08  1.12e-10  5.13e-10  9.90e-01  
 20  +4.1950e-01  +4.1950e-01  8.93e-09  1.50e-12  3.14e-10  1.13e-12  5.16e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 143.6609ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:27 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:27 PM: Optimal value: 4.195e-01
(CVXPY) Oct 06 03:59:27 PM: Compilation took 3.522e-02 seconds
(CVXPY) Oct 06 03:59:27 PM: Solver (including time spent in interface) took 1.548e-01 seconds
FULL MODEL:
  Accruacy: 0.5809
  Our objective: 0.16179999999999994

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.0744)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.077)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0038)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.0042)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.585870742797852
Best over terms:
  Our final objective: 0.07699999999999996
    Its accruacy: 0.5385
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.07440000000000005
  Highest accruacy: 0.5385
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

