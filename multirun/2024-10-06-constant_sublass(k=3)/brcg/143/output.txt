Command:
python test_script.py -s constant_subclass -d 4 -n 1000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.17600000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.192
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:31 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:31 PM: Finished problem compilation (took 3.552e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +5.0073e+02  5.00e+02  9.51e-01  2.65e+01  1.00e+00  1.00e+00   ------   
  1  +6.0776e-01  +9.7276e+01  9.67e+01  3.26e-01  1.46e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.4946e-01  +1.5203e+01  1.47e+01  1.23e-01  6.69e+00  8.34e-03  2.23e-01  7.39e-01  
  3  +5.0299e-01  +2.0174e+00  1.51e+00  3.13e-02  1.62e+00  9.12e-06  2.10e-01  2.83e-01  
  4  +5.0037e-01  +6.9456e-01  1.94e-01  4.13e-03  2.22e-01  2.66e-06  5.19e-02  8.13e-01  
  5  +4.9494e-01  +1.4356e+00  9.41e-01  3.27e-03  1.79e-01  6.31e-05  1.01e-02  9.16e-01  
  6  +4.8352e-01  +9.5038e-01  4.67e-01  1.08e-03  5.94e-02  5.18e-05  3.46e-03  6.75e-01  
  7  +4.6878e-01  +5.5930e-01  9.05e-02  2.11e-04  1.15e-02  4.29e-05  7.48e-04  9.90e-01  
  8  +4.5206e-01  +4.8528e-01  3.32e-02  7.19e-05  3.92e-03  1.26e-05  2.95e-04  7.76e-01  
  9  +4.4783e-01  +4.6578e-01  1.79e-02  3.82e-05  2.08e-03  8.27e-06  1.62e-04  9.90e-01  
 10  +4.4231e-01  +4.4298e-01  6.66e-04  1.40e-06  7.62e-05  2.72e-07  6.24e-06  9.66e-01  
 11  +4.4210e-01  +4.4211e-01  6.66e-06  1.40e-08  7.61e-07  2.72e-09  6.25e-08  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  6.66e-08  1.40e-10  7.61e-09  2.72e-11  6.25e-10  9.90e-01  
 13  +4.4210e-01  +4.4210e-01  6.66e-10  1.40e-12  7.61e-11  2.72e-13  6.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.1427ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:31 PM: Optimal value: 4.421e-01
(CVXPY) Oct 06 03:50:31 PM: Compilation took 3.552e-02 seconds
(CVXPY) Oct 06 03:50:31 PM: Solver (including time spent in interface) took 8.013e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:31 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4654
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0129e+02  5.01e+02  9.52e-01  2.89e+01  1.00e+00  1.01e+00   ------   
  1  +6.0564e-01  +9.7915e+01  9.73e+01  3.31e-01  1.59e+01  4.08e-03  4.84e-01  6.64e-01  
  2  +5.4680e-01  +1.4663e+01  1.41e+01  1.20e-01  6.99e+00  8.80e-03  2.19e-01  7.65e-01  
  3  +5.0244e-01  +2.0188e+00  1.52e+00  3.16e-02  1.77e+00  2.55e-04  2.02e-01  3.65e-01  
  4  +5.0062e-01  +1.0841e+00  5.83e-01  1.23e-02  7.08e-01  1.23e-04  9.07e-02  6.13e-01  
  5  +4.8954e-01  +1.7189e+00  1.23e+00  5.52e-03  3.29e-01  1.02e-03  1.67e-02  9.63e-01  
  6  +4.7475e-01  +8.9813e-01  4.23e-01  1.52e-03  9.03e-02  3.03e-04  4.95e-03  7.79e-01  
  7  +4.7248e-01  +7.9893e-01  3.26e-01  1.13e-03  6.71e-02  1.89e-04  3.59e-03  5.60e-01  
  8  +4.7678e-01  +7.7412e-01  2.97e-01  9.27e-04  5.51e-02  1.23e-04  2.80e-03  8.20e-01  
  9  +4.7350e-01  +7.5532e-01  2.82e-01  8.34e-04  4.96e-02  1.14e-04  2.55e-03  2.67e-01  
 10  +4.7161e-01  +6.7894e-01  2.07e-01  7.24e-04  4.29e-02  5.99e-05  2.30e-03  6.95e-01  
 11  +4.6783e-01  +6.6364e-01  1.96e-01  5.46e-04  3.23e-02  6.82e-05  1.70e-03  3.37e-01  
 12  +4.6384e-01  +6.2331e-01  1.59e-01  4.86e-04  2.88e-02  4.80e-05  1.61e-03  4.14e-01  
 13  +4.4822e-01  +5.3931e-01  9.11e-02  2.16e-04  1.27e-02  3.90e-05  6.79e-04  9.82e-01  
 14  +4.4315e-01  +5.2407e-01  8.09e-02  1.44e-04  8.53e-03  4.44e-05  4.41e-04  3.72e-01  
 15  +4.3658e-01  +4.9457e-01  5.80e-02  1.31e-04  7.74e-03  1.97e-05  4.40e-04  7.05e-02  
 16  +4.2083e-01  +4.4108e-01  2.03e-02  3.29e-05  1.94e-03  1.16e-05  1.06e-04  7.83e-01  
 17  +4.1245e-01  +4.1317e-01  7.22e-04  1.16e-06  6.81e-05  3.47e-07  3.89e-06  9.78e-01  
 18  +4.1210e-01  +4.1211e-01  7.25e-06  1.16e-08  6.83e-07  3.46e-09  3.92e-08  9.90e-01  
 19  +4.1210e-01  +4.1210e-01  7.25e-08  1.16e-10  6.83e-09  3.46e-11  3.92e-10  9.90e-01  
 20  +4.1210e-01  +4.1210e-01  7.25e-10  1.16e-12  6.83e-11  3.47e-13  3.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0052ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:31 PM: Optimal value: 4.121e-01
(CVXPY) Oct 06 03:50:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:50:31 PM: Solver (including time spent in interface) took 2.048e-02 seconds
Iteration: 2, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:31 PM: Your problem has 522 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:31 PM: Finished problem compilation (took 1.078e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 522
  constraints   = 1022
  nnz(P)        = 0
  nnz(A)        = 4883
  cones (total) = 1
    : Nonnegative = 1,  numel = 1022

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +5.0134e+02  5.01e+02  9.53e-01  2.92e+01  1.00e+00  1.03e+00   ------   
  1  +6.0605e-01  +9.8260e+01  9.77e+01  3.36e-01  1.60e+01  4.06e-03  4.97e-01  6.61e-01  
  2  +5.4673e-01  +1.4704e+01  1.42e+01  1.23e-01  7.04e+00  9.04e-03  2.27e-01  7.66e-01  
  3  +5.0214e-01  +1.9380e+00  1.44e+00  3.05e-02  1.70e+00  2.37e-04  2.07e-01  3.97e-01  
  4  +5.0051e-01  +1.0657e+00  5.65e-01  1.21e-02  6.91e-01  1.17e-04  9.11e-02  6.20e-01  
  5  +4.8870e-01  +1.8571e+00  1.37e+00  5.93e-03  3.50e-01  1.05e-03  1.83e-02  9.58e-01  
  6  +4.7824e-01  +1.2759e+00  7.98e-01  2.89e-03  1.70e-01  6.36e-04  9.28e-03  5.18e-01  
  7  +4.6972e-01  +8.7323e-01  4.04e-01  1.33e-03  7.86e-02  2.67e-04  4.35e-03  6.97e-01  
  8  +4.6702e-01  +8.2315e-01  3.56e-01  1.06e-03  6.24e-02  2.36e-04  3.33e-03  3.66e-01  
  9  +4.5992e-01  +7.4798e-01  2.88e-01  6.33e-04  3.73e-02  2.15e-04  1.94e-03  6.27e-01  
 10  +4.5326e-01  +6.5187e-01  1.99e-01  4.52e-04  2.66e-02  1.04e-04  1.43e-03  6.35e-01  
 11  +4.3748e-01  +5.3372e-01  9.62e-02  2.23e-04  1.30e-02  3.17e-05  7.52e-04  9.19e-01  
 12  +4.2638e-01  +4.7598e-01  4.96e-02  1.10e-04  6.41e-03  1.76e-05  3.81e-04  7.24e-01  
 13  +4.2260e-01  +4.6409e-01  4.15e-02  8.34e-05  4.87e-03  1.63e-05  2.88e-04  3.11e-01  
 14  +4.2028e-01  +4.5730e-01  3.70e-02  7.90e-05  4.61e-03  1.31e-05  2.87e-04  4.98e-02  
 15  +4.1616e-01  +4.4618e-01  3.00e-02  5.58e-05  3.26e-03  1.76e-05  1.93e-04  9.90e-01  
 16  +4.0823e-01  +4.1878e-01  1.06e-02  1.88e-05  1.09e-03  6.00e-06  6.70e-05  7.03e-01  
 17  +4.0428e-01  +4.0446e-01  1.82e-04  3.23e-07  1.88e-05  8.78e-08  1.18e-06  9.85e-01  
 18  +4.0420e-01  +4.0420e-01  1.82e-06  3.23e-09  1.88e-07  8.77e-10  1.18e-08  9.90e-01  
 19  +4.0420e-01  +4.0420e-01  1.82e-08  3.23e-11  1.88e-09  8.77e-12  1.18e-10  9.90e-01  
 20  +4.0420e-01  +4.0420e-01  1.82e-10  3.23e-13  1.88e-11  8.77e-14  1.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.0396ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:31 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:31 PM: Optimal value: 4.042e-01
(CVXPY) Oct 06 03:50:31 PM: Compilation took 1.078e-02 seconds
(CVXPY) Oct 06 03:50:31 PM: Solver (including time spent in interface) took 1.456e-02 seconds
FULL MODEL:
  Accruacy: 0.596
  Our objective: 0.19199999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.176)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1) <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.950033664703369
Best over terms:
  Our final objective: 0.176
    Its accruacy: 0.588
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.176
  Highest accruacy: 0.588
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

