Command:
python test_script.py -s constant_subclass -d 10 -n 500 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 10.

Computed total variation: 0.812
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:35 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 3271
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +2.5109e+02  2.51e+02  9.39e-01  2.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7740e-01  +5.5344e+01  5.48e+01  4.18e-01  1.68e+01  3.75e-03  5.89e-01  5.77e-01  
  2  +5.2578e-01  +6.3099e+00  5.78e+00  1.34e-01  6.84e+00  1.84e-02  2.78e-01  9.90e-01  
  3  +5.0383e-01  +1.4130e+00  9.09e-01  3.20e-02  1.65e+00  5.51e-05  1.46e-01  9.39e-01  
  4  +4.9958e-01  +7.7502e-01  2.75e-01  8.63e-03  4.57e-01  4.44e-05  3.67e-02  8.16e-01  
  5  +4.8690e-01  +7.3023e-01  2.43e-01  2.06e-03  1.12e-01  1.91e-04  6.30e-03  8.44e-01  
  6  +4.7007e-01  +5.9153e-01  1.21e-01  8.83e-04  4.74e-02  7.19e-05  2.95e-03  6.58e-01  
  7  +4.5861e-01  +5.3618e-01  7.76e-02  4.28e-04  2.29e-02  5.34e-05  1.53e-03  7.52e-01  
  8  +4.4613e-01  +4.7459e-01  2.85e-02  1.36e-04  7.25e-03  1.93e-05  5.40e-04  7.85e-01  
  9  +4.3888e-01  +4.4114e-01  2.26e-03  9.64e-06  5.15e-04  1.70e-06  4.33e-05  9.90e-01  
 10  +4.3811e-01  +4.3813e-01  2.39e-05  1.00e-07  5.37e-06  1.78e-08  4.60e-07  9.89e-01  
 11  +4.3810e-01  +4.3810e-01  2.39e-07  1.00e-09  5.37e-08  1.78e-10  4.60e-09  9.90e-01  
 12  +4.3810e-01  +4.3810e-01  2.39e-09  1.00e-11  5.37e-10  1.78e-12  4.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0495ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:35 PM: Optimal value: 4.381e-01
(CVXPY) Oct 06 04:23:35 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:23:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:35 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Finished problem compilation (took 2.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 3774
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +2.5134e+02  2.51e+02  9.39e-01  2.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7500e-01  +5.5377e+01  5.48e+01  4.20e-01  1.71e+01  3.75e-03  5.90e-01  5.77e-01  
  2  +5.2312e-01  +6.4557e+00  5.93e+00  1.35e-01  6.96e+00  1.89e-02  2.77e-01  9.90e-01  
  3  +5.0575e-01  +1.4299e+00  9.24e-01  3.17e-02  1.73e+00  1.62e-03  9.72e-02  8.46e-01  
  4  +5.0553e-01  +1.4775e+00  9.72e-01  2.60e-02  1.44e+00  2.17e-03  7.19e-02  2.93e-01  
  5  +5.0269e-01  +1.4399e+00  9.37e-01  2.22e-02  1.22e+00  1.59e-03  6.97e-02  2.22e-01  
  6  +4.9026e-01  +1.2840e+00  7.94e-01  6.46e-03  3.67e-01  4.03e-03  1.73e-02  7.75e-01  
  7  +4.6705e-01  +8.6251e-01  3.95e-01  3.09e-03  1.72e-01  6.51e-04  9.41e-03  6.25e-01  
  8  +4.5008e-01  +7.3885e-01  2.89e-01  1.81e-03  9.98e-02  2.14e-04  6.12e-03  8.41e-01  
  9  +4.3499e-01  +6.2483e-01  1.90e-01  1.05e-03  5.78e-02  1.31e-04  3.85e-03  6.93e-01  
 10  +4.2315e-01  +5.3154e-01  1.08e-01  6.14e-04  3.35e-02  7.41e-05  2.40e-03  9.90e-01  
 11  +4.0624e-01  +4.2634e-01  2.01e-02  1.06e-04  5.74e-03  1.03e-05  4.72e-04  8.44e-01  
 12  +4.0299e-01  +4.0655e-01  3.56e-03  1.89e-05  1.03e-03  1.45e-06  9.78e-05  8.14e-01  
 13  +4.0223e-01  +4.0233e-01  1.07e-04  5.68e-07  3.07e-05  3.49e-08  3.30e-06  9.72e-01  
 14  +4.0220e-01  +4.0220e-01  1.06e-06  5.66e-09  3.07e-07  3.48e-10  3.31e-08  9.90e-01  
 15  +4.0220e-01  +4.0220e-01  1.06e-08  5.66e-11  3.06e-09  3.48e-12  3.31e-10  9.90e-01  
 16  +4.0220e-01  +4.0220e-01  1.06e-10  5.66e-13  3.06e-11  3.48e-14  3.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7171ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:35 PM: Optimal value: 4.022e-01
(CVXPY) Oct 06 04:23:35 PM: Compilation took 2.570e-02 seconds
(CVXPY) Oct 06 04:23:35 PM: Solver (including time spent in interface) took 5.856e-03 seconds
Iteration: 2, Objective: 0.4022
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:35 PM: Your problem has 291 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 291
  constraints   = 541
  nnz(P)        = 0
  nnz(A)        = 4238
  cones (total) = 1
    : Nonnegative = 1,  numel = 541

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +2.5133e+02  2.51e+02  9.40e-01  2.73e+01  1.00e+00  1.01e+00   ------   
  1  +5.7330e-01  +5.5500e+01  5.49e+01  4.25e-01  1.73e+01  3.75e-03  5.94e-01  5.75e-01  
  2  +5.2157e-01  +6.5488e+00  6.03e+00  1.37e-01  7.10e+00  1.93e-02  2.80e-01  9.90e-01  
  3  +5.0770e-01  +1.9371e+00  1.43e+00  4.49e-02  2.49e+00  3.69e-03  1.22e-01  6.64e-01  
  4  +5.0609e-01  +1.8183e+00  1.31e+00  3.38e-02  1.90e+00  4.29e-03  8.93e-02  2.90e-01  
  5  +5.0250e-01  +1.7218e+00  1.22e+00  2.78e-02  1.55e+00  2.72e-03  8.33e-02  3.26e-01  
  6  +4.8424e-01  +1.2174e+00  7.33e-01  5.32e-03  3.10e-01  6.42e-03  1.39e-02  8.54e-01  
  7  +4.6672e-01  +9.9501e-01  5.28e-01  3.21e-03  1.85e-01  4.09e-03  8.77e-03  4.65e-01  
  8  +4.5620e-01  +9.2920e-01  4.73e-01  2.45e-03  1.41e-01  3.47e-03  6.90e-03  3.11e-01  
  9  +4.3538e-01  +7.5949e-01  3.24e-01  1.58e-03  9.03e-02  1.45e-03  4.69e-03  5.20e-01  
 10  +3.9413e-01  +4.8476e-01  9.06e-02  4.13e-04  2.32e-02  1.40e-05  1.36e-03  9.09e-01  
 11  +3.7922e-01  +4.1831e-01  3.91e-02  1.71e-04  9.61e-03  1.17e-05  5.89e-04  6.35e-01  
 12  +3.7418e-01  +3.9534e-01  2.12e-02  9.02e-05  5.07e-03  1.16e-05  3.14e-04  6.28e-01  
 13  +3.6958e-01  +3.7769e-01  8.11e-03  3.14e-05  1.80e-03  8.08e-06  1.12e-04  8.93e-01  
 14  +3.6666e-01  +3.6732e-01  6.64e-04  2.47e-06  1.42e-04  7.13e-07  9.07e-06  9.53e-01  
 15  +3.6640e-01  +3.6641e-01  6.81e-06  2.53e-08  1.46e-06  7.28e-09  9.32e-08  9.90e-01  
 16  +3.6640e-01  +3.6640e-01  6.81e-08  2.53e-10  1.46e-08  7.28e-11  9.32e-10  9.90e-01  
 17  +3.6640e-01  +3.6640e-01  6.81e-10  2.53e-12  1.46e-10  7.29e-13  9.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.5642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:35 PM: Optimal value: 3.664e-01
(CVXPY) Oct 06 04:23:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:35 PM: Solver (including time spent in interface) took 1.554e-02 seconds
Iteration: 3, Objective: 0.3664
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:35 PM: Your problem has 301 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 301
  constraints   = 551
  nnz(P)        = 0
  nnz(A)        = 4420
  cones (total) = 1
    : Nonnegative = 1,  numel = 551

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +2.5135e+02  2.51e+02  9.41e-01  2.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.7080e-01  +5.5507e+01  5.49e+01  4.26e-01  1.71e+01  3.76e-03  5.93e-01  5.75e-01  
  2  +5.1993e-01  +6.6489e+00  6.13e+00  1.36e-01  7.01e+00  1.96e-02  2.78e-01  9.90e-01  
  3  +5.0695e-01  +1.8819e+00  1.37e+00  4.00e-02  2.23e+00  3.99e-03  1.06e-01  6.75e-01  
  4  +5.0628e-01  +1.8846e+00  1.38e+00  3.41e-02  1.92e+00  4.56e-03  8.77e-02  1.90e-01  
  5  +5.0245e-01  +1.9177e+00  1.42e+00  2.91e-02  1.63e+00  3.44e-03  8.03e-02  3.79e-01  
  6  +4.8252e-01  +1.4776e+00  9.95e-01  7.00e-03  4.09e-01  7.58e-03  1.78e-02  7.93e-01  
  7  +4.5975e-01  +1.2163e+00  7.57e-01  4.07e-03  2.35e-01  5.93e-03  1.08e-02  4.70e-01  
  8  +4.4346e-01  +1.0368e+00  5.93e-01  3.02e-03  1.74e-01  3.41e-03  8.31e-03  3.86e-01  
  9  +3.9975e-01  +6.4579e-01  2.46e-01  1.22e-03  6.85e-02  3.13e-05  3.77e-03  8.14e-01  
 10  +3.6035e-01  +4.2254e-01  6.22e-02  2.89e-04  1.61e-02  1.70e-05  9.99e-04  7.85e-01  
 11  +3.5145e-01  +3.8024e-01  2.88e-02  1.32e-04  7.37e-03  1.08e-05  4.68e-04  5.94e-01  
 12  +3.4602e-01  +3.5407e-01  8.06e-03  3.67e-05  2.04e-03  3.93e-06  1.33e-04  7.66e-01  
 13  +3.4483e-01  +3.4876e-01  3.93e-03  1.76e-05  9.90e-04  2.55e-06  6.31e-05  6.59e-01  
 14  +3.4379e-01  +3.4451e-01  7.27e-04  3.17e-06  1.80e-04  5.84e-07  1.13e-05  8.78e-01  
 15  +3.4355e-01  +3.4357e-01  1.23e-05  5.33e-08  3.03e-06  9.82e-09  1.91e-07  9.83e-01  
 16  +3.4355e-01  +3.4355e-01  1.23e-07  5.33e-10  3.03e-08  9.82e-11  1.91e-09  9.90e-01  
 17  +3.4355e-01  +3.4355e-01  1.23e-09  5.34e-12  3.03e-10  9.82e-13  1.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.5531ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:35 PM: Optimal value: 3.436e-01
(CVXPY) Oct 06 04:23:35 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.3436
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:35 PM: Your problem has 311 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 311
  constraints   = 561
  nnz(P)        = 0
  nnz(A)        = 4606
  cones (total) = 1
    : Nonnegative = 1,  numel = 561

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9895e-01  +2.5145e+02  2.51e+02  9.41e-01  2.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.6692e-01  +5.5550e+01  5.50e+01  4.28e-01  1.70e+01  3.77e-03  5.92e-01  5.76e-01  
  2  +5.1714e-01  +6.8240e+00  6.31e+00  1.36e-01  6.94e+00  2.01e-02  2.75e-01  9.90e-01  
  3  +5.0414e-01  +1.6208e+00  1.12e+00  2.88e-02  1.64e+00  4.00e-03  7.44e-02  7.59e-01  
  4  +4.9389e-01  +1.8834e+00  1.39e+00  1.55e-02  9.09e-01  7.34e-03  3.76e-02  7.00e-01  
  5  +4.6377e-01  +1.5046e+00  1.04e+00  5.98e-03  3.52e-01  9.64e-03  1.48e-02  6.39e-01  
  6  +4.3978e-01  +1.2802e+00  8.40e-01  4.22e-03  2.46e-01  6.90e-03  1.09e-02  3.57e-01  
  7  +3.8544e-01  +7.1422e-01  3.29e-01  1.66e-03  9.38e-02  6.04e-05  4.91e-03  7.67e-01  
  8  +3.4235e-01  +4.5478e-01  1.12e-01  5.52e-04  3.10e-02  4.14e-05  1.86e-03  7.10e-01  
  9  +3.2635e-01  +3.7922e-01  5.29e-02  2.45e-04  1.40e-02  2.71e-05  8.65e-04  6.29e-01  
 10  +3.2022e-01  +3.5151e-01  3.13e-02  1.41e-04  8.19e-03  1.84e-05  5.06e-04  4.95e-01  
 11  +3.1653e-01  +3.3613e-01  1.96e-02  8.11e-05  5.00e-03  1.77e-05  2.82e-04  7.64e-01  
 12  +3.1093e-01  +3.1587e-01  4.94e-03  1.94e-05  1.23e-03  4.95e-06  6.93e-05  8.80e-01  
 13  +3.0905e-01  +3.0916e-01  1.13e-04  4.40e-07  2.81e-05  1.19e-07  1.59e-06  9.90e-01  
 14  +3.0900e-01  +3.0900e-01  1.13e-06  4.40e-09  2.81e-07  1.19e-09  1.59e-08  9.90e-01  
 15  +3.0900e-01  +3.0900e-01  1.13e-08  4.40e-11  2.81e-09  1.19e-11  1.59e-10  9.90e-01  
 16  +3.0900e-01  +3.0900e-01  1.13e-10  4.40e-13  2.81e-11  1.19e-13  1.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.5531ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:35 PM: Optimal value: 3.090e-01
(CVXPY) Oct 06 04:23:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:35 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 5, Objective: 0.3090
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:36 PM: Your problem has 321 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 321
  constraints   = 571
  nnz(P)        = 0
  nnz(A)        = 4740
  cones (total) = 1
    : Nonnegative = 1,  numel = 571

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9884e-01  +2.5183e+02  2.51e+02  9.42e-01  2.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.6356e-01  +5.5617e+01  5.51e+01  4.29e-01  1.68e+01  3.77e-03  5.92e-01  5.76e-01  
  2  +5.1492e-01  +6.9603e+00  6.45e+00  1.35e-01  6.83e+00  2.05e-02  2.72e-01  9.90e-01  
  3  +5.0192e-01  +1.6736e+00  1.17e+00  2.71e-02  1.55e+00  4.82e-03  6.86e-02  7.70e-01  
  4  +4.8506e-01  +1.7302e+00  1.25e+00  1.21e-02  7.12e-01  9.55e-03  2.91e-02  6.65e-01  
  5  +4.4723e-01  +1.3303e+00  8.83e-01  5.18e-03  3.03e-01  9.38e-03  1.29e-02  6.15e-01  
  6  +4.1793e-01  +1.0882e+00  6.70e-01  3.47e-03  2.01e-01  5.13e-03  9.14e-03  4.67e-01  
  7  +3.6634e-01  +6.7852e-01  3.12e-01  1.66e-03  9.40e-02  4.44e-05  4.95e-03  7.95e-01  
  8  +3.2228e-01  +4.3028e-01  1.08e-01  5.27e-04  3.00e-02  3.38e-05  1.72e-03  7.25e-01  
  9  +3.1399e-01  +3.9573e-01  8.17e-02  3.81e-04  2.22e-02  3.27e-05  1.25e-03  3.50e-01  
 10  +3.0232e-01  +3.4469e-01  4.24e-02  1.91e-04  1.12e-02  2.23e-05  6.46e-04  5.82e-01  
 11  +2.9315e-01  +3.0417e-01  1.10e-02  4.88e-05  2.89e-03  8.65e-06  1.71e-04  8.63e-01  
 12  +2.9088e-01  +2.9566e-01  4.78e-03  2.00e-05  1.20e-03  4.34e-06  7.15e-05  7.12e-01  
 13  +2.8933e-01  +2.8990e-01  5.68e-04  2.36e-06  1.41e-04  5.06e-07  8.71e-06  9.26e-01  
 14  +2.8911e-01  +2.8913e-01  2.43e-05  9.98e-08  5.89e-06  2.05e-08  3.86e-07  9.75e-01  
 15  +2.8910e-01  +2.8910e-01  2.43e-07  9.97e-10  5.88e-08  2.05e-10  3.87e-09  9.90e-01  
 16  +2.8910e-01  +2.8910e-01  2.43e-09  9.97e-12  5.88e-10  2.05e-12  3.87e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.2273ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:36 PM: Optimal value: 2.891e-01
(CVXPY) Oct 06 04:23:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:36 PM: Solver (including time spent in interface) took 1.555e-02 seconds
Iteration: 6, Objective: 0.2891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:36 PM: Your problem has 331 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Finished problem compilation (took 1.064e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 331
  constraints   = 581
  nnz(P)        = 0
  nnz(A)        = 4847
  cones (total) = 1
    : Nonnegative = 1,  numel = 581

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9873e-01  +2.5193e+02  2.51e+02  9.42e-01  2.67e+01  1.00e+00  1.02e+00   ------   
  1  +5.5961e-01  +5.5617e+01  5.51e+01  4.29e-01  1.65e+01  3.78e-03  5.90e-01  5.77e-01  
  2  +5.1256e-01  +7.1186e+00  6.61e+00  1.34e-01  6.69e+00  2.08e-02  2.68e-01  9.90e-01  
  3  +4.9880e-01  +1.6894e+00  1.19e+00  2.47e-02  1.41e+00  5.62e-03  6.10e-02  7.89e-01  
  4  +4.7011e-01  +1.6357e+00  1.17e+00  9.07e-03  5.35e-01  1.24e-02  2.16e-02  7.03e-01  
  5  +4.2501e-01  +1.2867e+00  8.62e-01  4.48e-03  2.61e-01  1.06e-02  1.12e-02  5.58e-01  
  6  +3.7720e-01  +8.5121e-01  4.74e-01  2.70e-03  1.52e-01  8.79e-05  7.57e-03  6.97e-01  
  7  +3.1725e-01  +4.8363e-01  1.66e-01  8.30e-04  4.66e-02  5.01e-05  2.59e-03  7.16e-01  
  8  +2.9629e-01  +3.9984e-01  1.04e-01  4.79e-04  2.74e-02  4.60e-05  1.56e-03  5.08e-01  
  9  +2.7657e-01  +3.1929e-01  4.27e-02  1.86e-04  1.09e-02  2.71e-05  6.37e-04  7.10e-01  
 10  +2.6705e-01  +2.8261e-01  1.56e-02  6.52e-05  3.85e-03  1.29e-05  2.35e-04  7.86e-01  
 11  +2.6189e-01  +2.6306e-01  1.17e-03  4.88e-06  2.87e-04  1.08e-06  1.83e-05  9.79e-01  
 12  +2.6141e-01  +2.6143e-01  2.03e-05  8.45e-08  4.94e-06  1.45e-08  3.27e-07  9.87e-01  
 13  +2.6140e-01  +2.6140e-01  2.03e-07  8.46e-10  4.94e-08  1.45e-10  3.28e-09  9.90e-01  
 14  +2.6140e-01  +2.6140e-01  2.03e-09  8.46e-12  4.94e-10  1.45e-12  3.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:36 PM: Optimal value: 2.614e-01
(CVXPY) Oct 06 04:23:36 PM: Compilation took 1.064e-02 seconds
(CVXPY) Oct 06 04:23:36 PM: Solver (including time spent in interface) took 2.085e-03 seconds
Iteration: 7, Objective: 0.2614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:36 PM: Your problem has 341 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Finished problem compilation (took 1.556e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 341
  constraints   = 591
  nnz(P)        = 0
  nnz(A)        = 4952
  cones (total) = 1
    : Nonnegative = 1,  numel = 591

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5187e+02  2.51e+02  9.43e-01  2.65e+01  1.00e+00  1.02e+00   ------   
  1  +5.5710e-01  +5.5627e+01  5.51e+01  4.31e-01  1.63e+01  3.79e-03  5.90e-01  5.77e-01  
  2  +5.1046e-01  +7.2282e+00  6.72e+00  1.34e-01  6.59e+00  2.12e-02  2.67e-01  9.90e-01  
  3  +4.9614e-01  +1.7904e+00  1.29e+00  2.48e-02  1.41e+00  6.47e-03  6.04e-02  7.91e-01  
  4  +4.5839e-01  +1.6193e+00  1.16e+00  8.19e-03  4.82e-01  1.40e-02  1.95e-02  7.13e-01  
  5  +4.1343e-01  +1.2807e+00  8.67e-01  4.42e-03  2.57e-01  1.15e-02  1.10e-02  4.96e-01  
  6  +3.6403e-01  +8.3394e-01  4.70e-01  2.67e-03  1.50e-01  9.32e-05  7.51e-03  7.14e-01  
  7  +3.0490e-01  +4.6282e-01  1.58e-01  7.94e-04  4.46e-02  5.36e-05  2.48e-03  7.39e-01  
  8  +2.8611e-01  +3.8758e-01  1.01e-01  4.80e-04  2.77e-02  4.68e-05  1.54e-03  4.79e-01  
  9  +2.7465e-01  +3.4164e-01  6.70e-02  3.02e-04  1.78e-02  3.80e-05  9.88e-04  4.57e-01  
 10  +2.6353e-01  +2.9986e-01  3.63e-02  1.53e-04  9.30e-03  2.66e-05  5.14e-04  6.27e-01  
 11  +2.5211e-01  +2.5826e-01  6.15e-03  2.49e-05  1.53e-03  4.77e-06  8.77e-05  8.82e-01  
 12  +2.4997e-01  +2.5038e-01  4.13e-04  1.67e-06  1.02e-04  2.98e-07  6.05e-06  9.35e-01  
 13  +2.4980e-01  +2.4981e-01  4.80e-06  1.94e-08  1.19e-06  3.47e-09  7.11e-08  9.90e-01  
 14  +2.4980e-01  +2.4980e-01  4.80e-08  1.94e-10  1.18e-08  3.47e-11  7.11e-10  9.90e-01  
 15  +2.4980e-01  +2.4980e-01  4.80e-10  1.94e-12  1.18e-10  3.47e-13  7.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.097ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:36 PM: Optimal value: 2.498e-01
(CVXPY) Oct 06 04:23:36 PM: Compilation took 1.556e-02 seconds
(CVXPY) Oct 06 04:23:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.2498
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:36 PM: Your problem has 351 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Finished problem compilation (took 1.508e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 351
  constraints   = 601
  nnz(P)        = 0
  nnz(A)        = 5077
  cones (total) = 1
    : Nonnegative = 1,  numel = 601

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9849e-01  +2.5200e+02  2.51e+02  9.43e-01  2.64e+01  1.00e+00  1.02e+00   ------   
  1  +5.5326e-01  +5.5718e+01  5.52e+01  4.32e-01  1.61e+01  3.80e-03  5.90e-01  5.77e-01  
  2  +5.0820e-01  +7.3772e+00  6.87e+00  1.33e-01  6.47e+00  2.16e-02  2.64e-01  9.90e-01  
  3  +4.9261e-01  +1.9132e+00  1.42e+00  2.50e-02  1.41e+00  7.48e-03  5.99e-02  7.92e-01  
  4  +4.4765e-01  +1.6079e+00  1.16e+00  7.95e-03  4.65e-01  1.44e-02  1.90e-02  7.09e-01  
  5  +4.0221e-01  +1.2952e+00  8.93e-01  4.51e-03  2.61e-01  1.23e-02  1.12e-02  4.66e-01  
  6  +3.3615e-01  +6.9943e-01  3.63e-01  2.00e-03  1.12e-01  9.94e-05  5.71e-03  7.33e-01  
  7  +2.9583e-01  +4.9423e-01  1.98e-01  1.00e-03  5.71e-02  8.95e-05  3.04e-03  5.90e-01  
  8  +2.6745e-01  +3.6670e-01  9.93e-02  4.63e-04  2.72e-02  5.19e-05  1.49e-03  5.62e-01  
  9  +2.5581e-01  +3.1895e-01  6.31e-02  2.79e-04  1.69e-02  3.94e-05  9.09e-04  4.73e-01  
 10  +2.4339e-01  +2.7396e-01  3.06e-02  1.25e-04  7.86e-03  2.39e-05  4.20e-04  6.70e-01  
 11  +2.3483e-01  +2.4090e-01  6.07e-03  2.46e-05  1.55e-03  6.95e-06  8.64e-05  9.90e-01  
 12  +2.3216e-01  +2.3228e-01  1.20e-04  4.88e-07  3.06e-05  9.36e-08  1.75e-06  9.81e-01  
 13  +2.3210e-01  +2.3210e-01  1.29e-06  5.27e-09  3.29e-07  1.00e-09  1.90e-08  9.89e-01  
 14  +2.3210e-01  +2.3210e-01  1.30e-08  5.27e-11  3.30e-09  1.00e-11  1.90e-10  9.90e-01  
 15  +2.3210e-01  +2.3210e-01  1.30e-10  5.29e-13  3.31e-11  1.00e-13  1.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.4596ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:36 PM: Optimal value: 2.321e-01
(CVXPY) Oct 06 04:23:36 PM: Compilation took 1.508e-02 seconds
(CVXPY) Oct 06 04:23:36 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.2321
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:36 PM: Your problem has 361 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 361
  constraints   = 611
  nnz(P)        = 0
  nnz(A)        = 5160
  cones (total) = 1
    : Nonnegative = 1,  numel = 611

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9846e-01  +2.5209e+02  2.52e+02  9.44e-01  2.62e+01  1.00e+00  1.02e+00   ------   
  1  +5.5028e-01  +5.5764e+01  5.52e+01  4.33e-01  1.59e+01  3.81e-03  5.88e-01  5.77e-01  
  2  +5.0597e-01  +7.4726e+00  6.97e+00  1.32e-01  6.38e+00  2.19e-02  2.62e-01  9.90e-01  
  3  +4.8924e-01  +2.0486e+00  1.56e+00  2.56e-02  1.44e+00  8.33e-03  6.08e-02  7.87e-01  
  4  +4.4116e-01  +1.6177e+00  1.18e+00  8.29e-03  4.81e-01  1.37e-02  1.98e-02  6.97e-01  
  5  +3.9360e-01  +1.3275e+00  9.34e-01  4.70e-03  2.70e-01  1.23e-02  1.17e-02  4.71e-01  
  6  +3.3122e-01  +7.3168e-01  4.00e-01  2.23e-03  1.24e-01  9.90e-05  6.33e-03  7.43e-01  
  7  +2.9266e-01  +5.2048e-01  2.28e-01  1.19e-03  6.69e-02  7.98e-05  3.56e-03  5.15e-01  
  8  +2.6174e-01  +3.7552e-01  1.14e-01  5.50e-04  3.18e-02  4.84e-05  1.75e-03  5.59e-01  
  9  +2.4646e-01  +3.1037e-01  6.39e-02  2.93e-04  1.75e-02  3.76e-05  9.63e-04  5.80e-01  
 10  +2.4114e-01  +2.8872e-01  4.76e-02  2.10e-04  1.28e-02  3.52e-05  6.96e-04  4.79e-01  
 11  +2.3199e-01  +2.5292e-01  2.09e-02  8.96e-05  5.53e-03  1.64e-05  3.06e-04  6.06e-01  
 12  +2.2746e-01  +2.3510e-01  7.64e-03  3.22e-05  2.00e-03  8.21e-06  1.13e-04  9.90e-01  
 13  +2.2458e-01  +2.2543e-01  8.49e-04  3.55e-06  2.19e-04  8.54e-07  1.28e-05  8.97e-01  
 14  +2.2421e-01  +2.2422e-01  1.64e-05  6.86e-08  4.23e-06  1.46e-08  2.53e-07  9.82e-01  
 15  +2.2420e-01  +2.2420e-01  1.64e-07  6.86e-10  4.23e-08  1.45e-10  2.53e-09  9.90e-01  
 16  +2.2420e-01  +2.2420e-01  1.64e-09  6.86e-12  4.23e-10  1.46e-12  2.53e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.5287ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:36 PM: Optimal value: 2.242e-01
(CVXPY) Oct 06 04:23:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:36 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 10, Objective: 0.2242
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:37 PM: Your problem has 371 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Finished problem compilation (took 7.500e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 371
  constraints   = 621
  nnz(P)        = 0
  nnz(A)        = 5213
  cones (total) = 1
    : Nonnegative = 1,  numel = 621

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9844e-01  +2.5212e+02  2.52e+02  9.44e-01  2.60e+01  1.00e+00  1.02e+00   ------   
  1  +5.4853e-01  +5.5793e+01  5.52e+01  4.34e-01  1.58e+01  3.81e-03  5.88e-01  5.77e-01  
  2  +5.0457e-01  +7.5338e+00  7.03e+00  1.31e-01  6.26e+00  2.20e-02  2.61e-01  9.90e-01  
  3  +4.8699e-01  +2.0807e+00  1.59e+00  2.51e-02  1.40e+00  8.70e-03  5.98e-02  7.89e-01  
  4  +4.3679e-01  +1.6038e+00  1.17e+00  8.20e-03  4.71e-01  1.32e-02  1.97e-02  6.97e-01  
  5  +3.9168e-01  +1.3404e+00  9.49e-01  4.85e-03  2.76e-01  1.18e-02  1.21e-02  4.63e-01  
  6  +3.2591e-01  +6.8689e-01  3.61e-01  2.00e-03  1.10e-01  9.71e-05  5.67e-03  7.47e-01  
  7  +2.9479e-01  +5.3228e-01  2.37e-01  1.23e-03  6.89e-02  8.51e-05  3.65e-03  4.29e-01  
  8  +2.6406e-01  +3.9173e-01  1.28e-01  6.14e-04  3.51e-02  5.92e-05  1.93e-03  5.49e-01  
  9  +2.4772e-01  +3.2232e-01  7.46e-02  3.40e-04  2.00e-02  4.41e-05  1.09e-03  5.33e-01  
 10  +2.4068e-01  +2.9578e-01  5.51e-02  2.37e-04  1.44e-02  3.93e-05  7.68e-04  4.28e-01  
 11  +2.2798e-01  +2.4726e-01  1.93e-02  8.02e-05  4.93e-03  1.82e-05  2.71e-04  8.44e-01  
 12  +2.2072e-01  +2.2145e-01  7.30e-04  3.01e-06  1.85e-04  5.03e-07  1.06e-05  9.73e-01  
 13  +2.2041e-01  +2.2043e-01  2.07e-05  8.60e-08  5.25e-06  1.84e-08  3.11e-07  9.87e-01  
 14  +2.2040e-01  +2.2040e-01  2.07e-07  8.60e-10  5.25e-08  1.84e-10  3.11e-09  9.90e-01  
 15  +2.2040e-01  +2.2040e-01  2.07e-09  8.61e-12  5.26e-10  1.84e-12  3.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.1901ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:37 PM: Optimal value: 2.204e-01
(CVXPY) Oct 06 04:23:37 PM: Compilation took 7.500e-03 seconds
(CVXPY) Oct 06 04:23:37 PM: Solver (including time spent in interface) took 7.537e-03 seconds
Iteration: 11, Objective: 0.2204
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:37 PM: Your problem has 381 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Finished problem compilation (took 1.553e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 381
  constraints   = 631
  nnz(P)        = 0
  nnz(A)        = 5287
  cones (total) = 1
    : Nonnegative = 1,  numel = 631

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9840e-01  +2.5217e+02  2.52e+02  9.45e-01  2.58e+01  1.00e+00  1.02e+00   ------   
  1  +5.4365e-01  +5.5908e+01  5.54e+01  4.32e-01  1.56e+01  3.84e-03  5.86e-01  5.78e-01  
  2  +5.0113e-01  +7.6630e+00  7.16e+00  1.29e-01  6.16e+00  2.24e-02  2.57e-01  9.90e-01  
  3  +4.8006e-01  +2.0442e+00  1.56e+00  2.25e-02  1.26e+00  9.28e-03  5.33e-02  8.12e-01  
  4  +4.2371e-01  +1.5065e+00  1.08e+00  7.68e-03  4.36e-01  1.17e-02  1.87e-02  6.91e-01  
  5  +3.8070e-01  +1.2596e+00  8.79e-01  4.66e-03  2.63e-01  1.00e-02  1.17e-02  4.58e-01  
  6  +3.1531e-01  +7.0807e-01  3.93e-01  2.21e-03  1.21e-01  8.53e-05  6.23e-03  7.87e-01  
  7  +2.6976e-01  +4.5254e-01  1.83e-01  9.41e-04  5.22e-02  5.83e-05  2.86e-03  6.02e-01  
  8  +2.4642e-01  +3.5034e-01  1.04e-01  4.95e-04  2.84e-02  5.13e-05  1.55e-03  5.77e-01  
  9  +2.3645e-01  +3.1093e-01  7.45e-02  3.36e-04  1.99e-02  4.36e-05  1.06e-03  3.99e-01  
 10  +2.2461e-01  +2.6459e-01  4.00e-02  1.72e-04  1.04e-02  2.82e-05  5.61e-04  5.85e-01  
 11  +2.1188e-01  +2.1493e-01  3.05e-03  1.29e-05  7.78e-04  2.91e-06  4.42e-05  9.90e-01  
 12  +2.1075e-01  +2.1110e-01  3.49e-04  1.49e-06  8.87e-05  3.13e-07  5.33e-06  9.01e-01  
 13  +2.1060e-01  +2.1061e-01  6.61e-06  2.83e-08  1.68e-06  6.22e-09  1.02e-07  9.87e-01  
 14  +2.1060e-01  +2.1060e-01  6.61e-08  2.83e-10  1.68e-08  6.22e-11  1.02e-09  9.90e-01  
 15  +2.1060e-01  +2.1060e-01  6.61e-10  2.83e-12  1.68e-10  6.22e-13  1.02e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.1559ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:37 PM: Optimal value: 2.106e-01
(CVXPY) Oct 06 04:23:37 PM: Compilation took 1.553e-02 seconds
(CVXPY) Oct 06 04:23:37 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 12, Objective: 0.2106
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:37 PM: Your problem has 391 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Finished problem compilation (took 1.595e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 391
  constraints   = 641
  nnz(P)        = 0
  nnz(A)        = 5360
  cones (total) = 1
    : Nonnegative = 1,  numel = 641

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9835e-01  +2.5202e+02  2.52e+02  9.45e-01  2.56e+01  1.00e+00  1.02e+00   ------   
  1  +5.4032e-01  +5.5896e+01  5.54e+01  4.33e-01  1.54e+01  3.85e-03  5.84e-01  5.78e-01  
  2  +4.9873e-01  +7.7937e+00  7.29e+00  1.28e-01  6.03e+00  2.27e-02  2.53e-01  9.90e-01  
  3  +4.7472e-01  +2.1188e+00  1.64e+00  2.19e-02  1.22e+00  1.02e-02  5.16e-02  8.15e-01  
  4  +4.0679e-01  +1.6048e+00  1.20e+00  7.56e-03  4.26e-01  1.36e-02  1.83e-02  6.99e-01  
  5  +3.5240e-01  +1.0875e+00  7.35e-01  4.04e-03  2.25e-01  6.08e-03  1.03e-02  5.48e-01  
  6  +2.8422e-01  +5.7111e-01  2.87e-01  1.55e-03  8.50e-02  1.47e-03  4.45e-03  6.52e-01  
  7  +2.4898e-01  +4.0894e-01  1.60e-01  7.90e-04  4.46e-02  7.27e-04  2.41e-03  5.65e-01  
  8  +2.3154e-01  +3.3338e-01  1.02e-01  4.75e-04  2.77e-02  4.17e-04  1.50e-03  4.90e-01  
  9  +2.1544e-01  +2.6927e-01  5.38e-02  2.35e-04  1.42e-02  2.08e-04  7.69e-04  5.45e-01  
 10  +1.9936e-01  +2.0598e-01  6.61e-03  2.83e-05  1.71e-03  1.46e-05  9.88e-05  9.13e-01  
 11  +1.9710e-01  +1.9759e-01  4.95e-04  2.13e-06  1.28e-04  9.01e-07  7.74e-06  9.25e-01  
 12  +1.9691e-01  +1.9693e-01  2.27e-05  9.81e-08  5.87e-06  3.20e-08  3.62e-07  9.77e-01  
 13  +1.9690e-01  +1.9690e-01  2.27e-07  9.82e-10  5.87e-08  3.20e-10  3.62e-09  9.90e-01  
 14  +1.9690e-01  +1.9690e-01  2.27e-09  9.83e-12  5.88e-10  3.20e-12  3.63e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.5922ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:37 PM: Optimal value: 1.969e-01
(CVXPY) Oct 06 04:23:37 PM: Compilation took 1.595e-02 seconds
(CVXPY) Oct 06 04:23:37 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 13, Objective: 0.1969
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:37 PM: Your problem has 401 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 401
  constraints   = 651
  nnz(P)        = 0
  nnz(A)        = 5452
  cones (total) = 1
    : Nonnegative = 1,  numel = 651

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9827e-01  +2.5204e+02  2.52e+02  9.45e-01  2.55e+01  1.00e+00  1.02e+00   ------   
  1  +5.3741e-01  +5.5990e+01  5.55e+01  4.34e-01  1.52e+01  3.85e-03  5.84e-01  5.77e-01  
  2  +4.9595e-01  +7.8964e+00  7.40e+00  1.28e-01  5.97e+00  2.31e-02  2.53e-01  9.90e-01  
  3  +4.6879e-01  +1.9837e+00  1.51e+00  1.90e-02  1.06e+00  1.03e-02  4.49e-02  8.49e-01  
  4  +3.9285e-01  +1.5222e+00  1.13e+00  6.76e-03  3.78e-01  1.32e-02  1.65e-02  7.07e-01  
  5  +3.2517e-01  +8.6869e-01  5.44e-01  3.05e-03  1.67e-01  1.57e-03  8.12e-03  7.37e-01  
  6  +2.7203e-01  +5.4992e-01  2.78e-01  1.49e-03  8.17e-02  6.72e-04  4.30e-03  5.66e-01  
  7  +2.3713e-01  +3.8508e-01  1.48e-01  7.30e-04  4.14e-02  3.34e-04  2.26e-03  5.63e-01  
  8  +2.2338e-01  +3.2655e-01  1.03e-01  4.89e-04  2.83e-02  2.14e-04  1.57e-03  4.26e-01  
  9  +2.0543e-01  +2.5031e-01  4.49e-02  2.05e-04  1.20e-02  8.44e-05  7.03e-04  6.14e-01  
 10  +1.9322e-01  +1.9976e-01  6.54e-03  2.96e-05  1.72e-03  1.00e-05  1.08e-04  8.69e-01  
 11  +1.9164e-01  +1.9342e-01  1.78e-03  8.07e-06  4.65e-04  1.97e-06  3.09e-05  9.12e-01  
 12  +1.9098e-01  +1.9118e-01  1.98e-04  8.96e-07  5.14e-05  2.07e-07  3.54e-06  8.99e-01  
 13  +1.9090e-01  +1.9090e-01  2.55e-06  1.15e-08  6.61e-07  2.63e-09  4.58e-08  9.87e-01  
 14  +1.9090e-01  +1.9090e-01  2.55e-08  1.15e-10  6.61e-09  2.63e-11  4.58e-10  9.90e-01  
 15  +1.9090e-01  +1.9090e-01  2.55e-10  1.15e-12  6.61e-11  2.63e-13  4.59e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.0586ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:37 PM: Optimal value: 1.909e-01
(CVXPY) Oct 06 04:23:37 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:37 PM: Solver (including time spent in interface) took 3.144e-02 seconds
Iteration: 14, Objective: 0.1909
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:37 PM: Your problem has 411 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:37 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 411
  constraints   = 661
  nnz(P)        = 0
  nnz(A)        = 5508
  cones (total) = 1
    : Nonnegative = 1,  numel = 661

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9809e-01  +2.5207e+02  2.52e+02  9.46e-01  2.53e+01  1.00e+00  1.02e+00   ------   
  1  +5.3132e-01  +5.6083e+01  5.56e+01  4.34e-01  1.51e+01  3.87e-03  5.83e-01  5.77e-01  
  2  +4.9002e-01  +8.1414e+00  7.65e+00  1.26e-01  5.87e+00  2.38e-02  2.49e-01  9.90e-01  
  3  +4.5681e-01  +2.2303e+00  1.77e+00  2.01e-02  1.11e+00  1.19e-02  4.69e-02  8.33e-01  
  4  +3.8319e-01  +1.6638e+00  1.28e+00  8.03e-03  4.45e-01  1.26e-02  1.95e-02  6.55e-01  
  5  +3.2253e-01  +9.3326e-01  6.11e-01  3.76e-03  2.03e-01  1.26e-03  9.95e-03  7.26e-01  
  6  +2.6646e-01  +5.7203e-01  3.06e-01  1.75e-03  9.46e-02  5.41e-04  5.04e-03  5.76e-01  
  7  +2.3167e-01  +4.0161e-01  1.70e-01  8.92e-04  4.97e-02  2.88e-04  2.76e-03  5.30e-01  
  8  +2.0897e-01  +2.9894e-01  9.00e-02  4.44e-04  2.55e-02  1.40e-04  1.46e-03  6.05e-01  
  9  +1.9087e-01  +2.2072e-01  2.98e-02  1.42e-04  8.24e-03  3.80e-05  5.00e-04  7.78e-01  
 10  +1.8294e-01  +1.8797e-01  5.03e-03  2.39e-05  1.38e-03  5.65e-06  8.89e-05  8.46e-01  
 11  +1.8170e-01  +1.8305e-01  1.35e-03  6.38e-06  3.68e-04  1.29e-06  2.49e-05  9.37e-01  
 12  +1.8119e-01  +1.8128e-01  9.02e-05  4.24e-07  2.44e-05  8.20e-08  1.70e-06  9.35e-01  
 13  +1.8115e-01  +1.8115e-01  9.52e-07  4.48e-09  2.58e-07  8.63e-10  1.80e-08  9.89e-01  
 14  +1.8115e-01  +1.8115e-01  9.52e-09  4.48e-11  2.58e-09  8.63e-12  1.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.8408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:37 PM: Optimal value: 1.812e-01
(CVXPY) Oct 06 04:23:37 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:37 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 15, Objective: 0.1812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:38 PM: Your problem has 421 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Finished problem compilation (took 1.651e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 421
  constraints   = 671
  nnz(P)        = 0
  nnz(A)        = 5601
  cones (total) = 1
    : Nonnegative = 1,  numel = 671

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9810e-01  +2.5207e+02  2.52e+02  9.46e-01  2.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.2918e-01  +5.6067e+01  5.55e+01  4.33e-01  1.49e+01  3.88e-03  5.80e-01  5.78e-01  
  2  +4.8824e-01  +8.1885e+00  7.70e+00  1.24e-01  5.71e+00  2.39e-02  2.45e-01  9.90e-01  
  3  +4.5093e-01  +2.2355e+00  1.78e+00  1.92e-02  1.05e+00  1.22e-02  4.49e-02  8.49e-01  
  4  +3.7520e-01  +1.7306e+00  1.36e+00  8.24e-03  4.52e-01  1.28e-02  2.02e-02  6.38e-01  
  5  +3.1732e-01  +9.4081e-01  6.23e-01  3.99e-03  2.13e-01  1.12e-04  1.07e-02  7.86e-01  
  6  +2.4954e-01  +4.9622e-01  2.47e-01  1.42e-03  7.57e-02  8.07e-05  4.20e-03  6.89e-01  
  7  +2.2437e-01  +3.8546e-01  1.61e-01  8.65e-04  4.78e-02  6.95e-05  2.70e-03  4.55e-01  
  8  +2.0581e-01  +3.0231e-01  9.65e-02  4.91e-04  2.78e-02  5.33e-05  1.61e-03  5.26e-01  
  9  +1.8546e-01  +2.1185e-01  2.64e-02  1.30e-04  7.38e-03  1.94e-05  4.57e-04  8.60e-01  
 10  +1.7859e-01  +1.8276e-01  4.17e-03  2.06e-05  1.16e-03  2.86e-06  7.60e-05  8.45e-01  
 11  +1.7807e-01  +1.8060e-01  2.53e-03  1.24e-05  7.03e-04  1.98e-06  4.75e-05  6.50e-01  
 12  +1.7725e-01  +1.7751e-01  2.64e-04  1.29e-06  7.28e-05  1.94e-07  5.13e-06  9.03e-01  
 13  +1.7715e-01  +1.7716e-01  3.98e-06  1.95e-08  1.10e-06  2.87e-09  7.81e-08  9.86e-01  
 14  +1.7715e-01  +1.7715e-01  3.99e-08  1.95e-10  1.10e-08  2.87e-11  7.83e-10  9.90e-01  
 15  +1.7715e-01  +1.7715e-01  3.99e-10  1.95e-12  1.10e-10  2.88e-13  7.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.3386ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:38 PM: Optimal value: 1.772e-01
(CVXPY) Oct 06 04:23:38 PM: Compilation took 1.651e-02 seconds
(CVXPY) Oct 06 04:23:38 PM: Solver (including time spent in interface) took 1.701e-02 seconds
Iteration: 16, Objective: 0.1772
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:38 PM: Your problem has 431 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 431
  constraints   = 681
  nnz(P)        = 0
  nnz(A)        = 5677
  cones (total) = 1
    : Nonnegative = 1,  numel = 681

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9802e-01  +2.5211e+02  2.52e+02  9.47e-01  2.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.2528e-01  +5.6184e+01  5.57e+01  4.34e-01  1.47e+01  3.90e-03  5.80e-01  5.78e-01  
  2  +4.8373e-01  +8.3303e+00  7.85e+00  1.24e-01  5.62e+00  2.44e-02  2.44e-01  9.90e-01  
  3  +4.4039e-01  +2.3021e+00  1.86e+00  1.88e-02  1.03e+00  1.28e-02  4.42e-02  8.54e-01  
  4  +3.6898e-01  +1.8510e+00  1.48e+00  9.01e-03  4.91e-01  1.31e-02  2.20e-02  5.93e-01  
  5  +2.9737e-01  +8.5633e-01  5.59e-01  3.40e-03  1.80e-01  1.20e-04  9.18e-03  8.58e-01  
  6  +2.3736e-01  +4.6971e-01  2.32e-01  1.33e-03  7.11e-02  9.05e-05  3.98e-03  6.69e-01  
  7  +2.1238e-01  +3.5380e-01  1.41e-01  7.62e-04  4.19e-02  6.65e-05  2.41e-03  4.74e-01  
  8  +1.9398e-01  +2.6771e-01  7.37e-02  3.81e-04  2.13e-02  3.72e-05  1.27e-03  5.09e-01  
  9  +1.7820e-01  +1.9332e-01  1.51e-02  7.69e-05  4.27e-03  1.36e-05  2.76e-04  9.90e-01  
 10  +1.7451e-01  +1.7831e-01  3.80e-03  1.94e-05  1.07e-03  3.22e-06  7.29e-05  7.59e-01  
 11  +1.7392e-01  +1.7604e-01  2.11e-03  1.07e-05  5.93e-04  1.80e-06  4.17e-05  7.10e-01  
 12  +1.7322e-01  +1.7340e-01  1.78e-04  9.00e-07  4.96e-05  1.39e-07  3.63e-06  9.21e-01  
 13  +1.7315e-01  +1.7315e-01  2.40e-06  1.21e-08  6.67e-07  1.86e-09  4.92e-08  9.89e-01  
 14  +1.7315e-01  +1.7315e-01  2.40e-08  1.21e-10  6.69e-09  1.86e-11  4.94e-10  9.90e-01  
 15  +1.7315e-01  +1.7315e-01  2.40e-10  1.21e-12  6.69e-11  1.87e-13  4.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.8723ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:38 PM: Optimal value: 1.732e-01
(CVXPY) Oct 06 04:23:38 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:38 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 17, Objective: 0.1732
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:38 PM: Your problem has 441 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 441
  constraints   = 691
  nnz(P)        = 0
  nnz(A)        = 5724
  cones (total) = 1
    : Nonnegative = 1,  numel = 691

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9800e-01  +2.5213e+02  2.52e+02  9.47e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.2124e-01  +5.6287e+01  5.58e+01  4.33e-01  1.45e+01  3.92e-03  5.78e-01  5.78e-01  
  2  +4.8026e-01  +8.3660e+00  7.89e+00  1.22e-01  5.54e+00  2.45e-02  2.42e-01  9.90e-01  
  3  +4.3806e-01  +2.4610e+00  2.02e+00  2.09e-02  1.13e+00  1.25e-02  4.90e-02  8.30e-01  
  4  +3.6514e-01  +2.0694e+00  1.70e+00  1.04e-02  5.62e-01  1.29e-02  2.55e-02  6.06e-01  
  5  +3.0957e-01  +9.8002e-01  6.70e-01  4.26e-03  2.25e-01  1.15e-04  1.13e-02  8.32e-01  
  6  +2.3589e-01  +4.5349e-01  2.18e-01  1.27e-03  6.68e-02  8.25e-05  3.77e-03  7.63e-01  
  7  +2.1612e-01  +3.7781e-01  1.62e-01  8.91e-04  4.85e-02  8.69e-05  2.75e-03  4.65e-01  
  8  +1.9097e-01  +2.6283e-01  7.19e-02  3.72e-04  2.07e-02  4.15e-05  1.23e-03  5.90e-01  
  9  +1.7547e-01  +1.9377e-01  1.83e-02  9.29e-05  5.15e-03  1.63e-05  3.31e-04  9.82e-01  
 10  +1.7099e-01  +1.7569e-01  4.70e-03  2.39e-05  1.32e-03  3.94e-06  8.90e-05  7.43e-01  
 11  +1.7035e-01  +1.7314e-01  2.79e-03  1.42e-05  7.84e-04  2.35e-06  5.43e-05  5.02e-01  
 12  +1.6956e-01  +1.7011e-01  5.58e-04  2.84e-06  1.56e-04  4.54e-07  1.12e-05  8.26e-01  
 13  +1.6936e-01  +1.6938e-01  1.95e-05  9.93e-08  5.44e-06  1.54e-08  3.98e-07  9.70e-01  
 14  +1.6935e-01  +1.6935e-01  1.96e-07  9.96e-10  5.45e-08  1.55e-10  4.00e-09  9.90e-01  
 15  +1.6935e-01  +1.6935e-01  1.97e-09  1.00e-11  5.49e-10  1.56e-12  4.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.1193ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:38 PM: Optimal value: 1.694e-01
(CVXPY) Oct 06 04:23:38 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:38 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 18, Objective: 0.1694
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:38 PM: Your problem has 451 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Finished problem compilation (took 1.554e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 451
  constraints   = 701
  nnz(P)        = 0
  nnz(A)        = 5781
  cones (total) = 1
    : Nonnegative = 1,  numel = 701

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9771e-01  +2.5247e+02  2.52e+02  9.47e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.1037e-01  +5.6389e+01  5.59e+01  4.30e-01  1.44e+01  3.94e-03  5.75e-01  5.79e-01  
  2  +4.6813e-01  +8.6577e+00  8.19e+00  1.18e-01  5.38e+00  2.52e-02  2.35e-01  9.90e-01  
  3  +4.1970e-01  +2.7352e+00  2.32e+00  2.29e-02  1.22e+00  1.28e-02  5.31e-02  7.99e-01  
  4  +3.4878e-01  +2.2414e+00  1.89e+00  1.19e-02  6.35e-01  1.27e-02  2.87e-02  5.62e-01  
  5  +2.9495e-01  +9.6025e-01  6.65e-01  4.41e-03  2.31e-01  1.11e-04  1.16e-02  8.41e-01  
  6  +2.3360e-01  +5.1232e-01  2.79e-01  1.73e-03  9.03e-02  8.10e-05  5.02e-03  6.43e-01  
  7  +2.0761e-01  +3.8784e-01  1.80e-01  1.04e-03  5.62e-02  7.26e-05  3.20e-03  4.69e-01  
  8  +1.8377e-01  +2.6932e-01  8.56e-02  4.66e-04  2.56e-02  4.00e-05  1.53e-03  5.79e-01  
  9  +1.6819e-01  +1.9724e-01  2.90e-02  1.52e-04  8.44e-03  1.84e-05  5.34e-04  8.02e-01  
 10  +1.6170e-01  +1.6770e-01  6.01e-03  3.14e-05  1.73e-03  4.50e-06  1.16e-04  9.08e-01  
 11  +1.6042e-01  +1.6254e-01  2.12e-03  1.11e-05  6.13e-04  1.67e-06  4.29e-05  8.15e-01  
 12  +1.5975e-01  +1.6003e-01  2.76e-04  1.45e-06  7.96e-05  2.09e-07  5.76e-06  8.77e-01  
 13  +1.5965e-01  +1.5966e-01  4.70e-06  2.48e-08  1.36e-06  3.53e-09  9.88e-08  9.87e-01  
 14  +1.5965e-01  +1.5965e-01  4.70e-08  2.48e-10  1.36e-08  3.53e-11  9.89e-10  9.90e-01  
 15  +1.5965e-01  +1.5965e-01  4.70e-10  2.48e-12  1.36e-10  3.53e-13  9.89e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.2247ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:38 PM: Optimal value: 1.597e-01
(CVXPY) Oct 06 04:23:38 PM: Compilation took 1.554e-02 seconds
(CVXPY) Oct 06 04:23:38 PM: Solver (including time spent in interface) took 1.569e-02 seconds
Iteration: 19, Objective: 0.1597
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:38 PM: Your problem has 461 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:38 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 461
  constraints   = 711
  nnz(P)        = 0
  nnz(A)        = 5847
  cones (total) = 1
    : Nonnegative = 1,  numel = 711

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9733e-01  +2.5251e+02  2.52e+02  9.48e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +4.9843e-01  +5.6653e+01  5.62e+01  4.29e-01  1.42e+01  3.97e-03  5.74e-01  5.78e-01  
  2  +4.5318e-01  +9.1307e+00  8.68e+00  1.14e-01  5.22e+00  2.67e-02  2.29e-01  9.90e-01  
  3  +3.8759e-01  +2.5792e+00  2.19e+00  1.91e-02  1.01e+00  1.34e-02  4.42e-02  8.27e-01  
  4  +3.2670e-01  +1.9566e+00  1.63e+00  1.08e-02  5.73e-01  1.08e-02  2.58e-02  4.72e-01  
  5  +2.5721e-01  +7.3367e-01  4.76e-01  3.25e-03  1.67e-01  1.65e-04  8.63e-03  8.82e-01  
  6  +2.0417e-01  +4.3270e-01  2.29e-01  1.43e-03  7.52e-02  1.13e-04  4.21e-03  6.32e-01  
  7  +1.7620e-01  +2.8236e-01  1.06e-01  6.24e-04  3.34e-02  5.64e-05  2.00e-03  5.71e-01  
  8  +1.6956e-01  +2.5063e-01  8.11e-02  4.58e-04  2.51e-02  5.07e-05  1.49e-03  4.23e-01  
  9  +1.5565e-01  +1.8113e-01  2.55e-02  1.41e-04  7.67e-03  2.18e-05  4.92e-04  9.88e-01  
 10  +1.4931e-01  +1.5373e-01  4.42e-03  2.43e-05  1.32e-03  3.40e-06  8.96e-05  8.32e-01  
 11  +1.4873e-01  +1.5126e-01  2.53e-03  1.39e-05  7.55e-04  2.01e-06  5.28e-05  6.93e-01  
 12  +1.4800e-01  +1.4842e-01  4.20e-04  2.29e-06  1.24e-04  3.20e-07  9.04e-06  8.60e-01  
 13  +1.4785e-01  +1.4787e-01  1.34e-05  7.32e-08  3.96e-06  9.87e-09  2.93e-07  9.69e-01  
 14  +1.4785e-01  +1.4785e-01  1.35e-07  7.37e-10  3.98e-08  9.93e-11  2.94e-09  9.90e-01  
 15  +1.4785e-01  +1.4785e-01  1.35e-09  7.38e-12  3.99e-10  9.96e-13  2.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.7557ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:38 PM: Optimal value: 1.479e-01
(CVXPY) Oct 06 04:23:38 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:38 PM: Solver (including time spent in interface) took 2.879e-02 seconds
Iteration: 20, Objective: 0.1479
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:39 PM: Your problem has 471 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 471
  constraints   = 721
  nnz(P)        = 0
  nnz(A)        = 5904
  cones (total) = 1
    : Nonnegative = 1,  numel = 721

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9730e-01  +2.5260e+02  2.52e+02  9.48e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +4.9470e-01  +5.6691e+01  5.62e+01  4.28e-01  1.41e+01  3.98e-03  5.72e-01  5.78e-01  
  2  +4.4802e-01  +9.1582e+00  8.71e+00  1.13e-01  5.13e+00  2.68e-02  2.27e-01  9.90e-01  
  3  +3.8128e-01  +2.4873e+00  2.11e+00  1.84e-02  9.70e-01  1.25e-02  4.30e-02  8.35e-01  
  4  +3.2145e-01  +1.9420e+00  1.62e+00  1.08e-02  5.68e-01  1.05e-02  2.59e-02  4.57e-01  
  5  +2.5318e-01  +7.3734e-01  4.84e-01  3.34e-03  1.71e-01  1.42e-04  8.89e-03  8.87e-01  
  6  +1.9684e-01  +4.1350e-01  2.17e-01  1.36e-03  7.17e-02  9.93e-05  4.03e-03  6.66e-01  
  7  +1.7169e-01  +2.8239e-01  1.11e-01  6.50e-04  3.51e-02  5.65e-05  2.06e-03  5.40e-01  
  8  +1.5814e-01  +2.1782e-01  5.97e-02  3.33e-04  1.83e-02  3.46e-05  1.11e-03  5.62e-01  
  9  +1.4648e-01  +1.6146e-01  1.50e-02  8.22e-05  4.48e-03  1.01e-05  2.91e-04  8.48e-01  
 10  +1.4340e-01  +1.4766e-01  4.26e-03  2.36e-05  1.27e-03  2.77e-06  8.77e-05  7.31e-01  
 11  +1.4270e-01  +1.4470e-01  2.00e-03  1.10e-05  5.90e-04  1.45e-06  4.28e-05  7.60e-01  
 12  +1.4210e-01  +1.4237e-01  2.73e-04  1.48e-06  7.90e-05  1.86e-07  6.09e-06  8.71e-01  
 13  +1.4201e-01  +1.4203e-01  2.03e-05  1.09e-07  5.80e-06  1.38e-08  4.58e-07  9.37e-01  
 14  +1.4200e-01  +1.4200e-01  2.05e-07  1.10e-09  5.86e-08  1.40e-10  4.64e-09  9.90e-01  
 15  +1.4200e-01  +1.4200e-01  2.06e-09  1.11e-11  5.88e-10  1.40e-12  4.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.058ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:39 PM: Optimal value: 1.420e-01
(CVXPY) Oct 06 04:23:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:39 PM: Solver (including time spent in interface) took 3.225e-02 seconds
Iteration: 21, Objective: 0.1420
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:39 PM: Your problem has 481 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 481
  constraints   = 731
  nnz(P)        = 0
  nnz(A)        = 5945
  cones (total) = 1
    : Nonnegative = 1,  numel = 731

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9724e-01  +2.5270e+02  2.52e+02  9.48e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +4.9092e-01  +5.6729e+01  5.62e+01  4.28e-01  1.39e+01  3.99e-03  5.73e-01  5.78e-01  
  2  +4.4154e-01  +9.2409e+00  8.80e+00  1.11e-01  5.06e+00  2.70e-02  2.26e-01  9.90e-01  
  3  +3.6978e-01  +2.2439e+00  1.87e+00  1.60e-02  8.36e-01  1.17e-02  3.77e-02  8.66e-01  
  4  +3.1154e-01  +1.6991e+00  1.39e+00  9.38e-03  4.90e-01  8.83e-03  2.28e-02  4.63e-01  
  5  +2.4080e-01  +6.6075e-01  4.20e-01  2.90e-03  1.47e-01  7.19e-04  7.85e-03  8.16e-01  
  6  +1.9912e-01  +4.4614e-01  2.47e-01  1.58e-03  8.19e-02  3.95e-04  4.62e-03  5.22e-01  
  7  +1.6861e-01  +2.8211e-01  1.13e-01  6.74e-04  3.57e-02  1.75e-04  2.15e-03  5.78e-01  
  8  +1.5451e-01  +2.1520e-01  6.07e-02  3.40e-04  1.84e-02  8.86e-05  1.14e-03  5.55e-01  
  9  +1.4245e-01  +1.5691e-01  1.45e-02  7.96e-05  4.29e-03  1.58e-05  2.84e-04  8.59e-01  
 10  +1.3905e-01  +1.4175e-01  2.70e-03  1.50e-05  8.01e-04  2.57e-06  5.68e-05  8.11e-01  
 11  +1.3852e-01  +1.3947e-01  9.50e-04  5.32e-06  2.81e-04  8.30e-07  2.10e-05  7.77e-01  
 12  +1.3824e-01  +1.3834e-01  1.05e-04  5.84e-07  3.06e-05  8.63e-08  2.38e-06  9.02e-01  
 13  +1.3820e-01  +1.3820e-01  2.07e-06  1.15e-08  6.03e-07  1.67e-09  4.74e-08  9.82e-01  
 14  +1.3820e-01  +1.3820e-01  2.08e-08  1.15e-10  6.04e-09  1.68e-11  4.74e-10  9.90e-01  
 15  +1.3820e-01  +1.3820e-01  2.10e-10  1.17e-12  6.11e-11  1.70e-13  4.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.2073ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:39 PM: Optimal value: 1.382e-01
(CVXPY) Oct 06 04:23:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:39 PM: Solver (including time spent in interface) took 3.134e-02 seconds
Iteration: 22, Objective: 0.1382
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:39 PM: Your problem has 491 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Finished problem compilation (took 1.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 491
  constraints   = 741
  nnz(P)        = 0
  nnz(A)        = 5997
  cones (total) = 1
    : Nonnegative = 1,  numel = 741

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9720e-01  +2.5274e+02  2.52e+02  9.49e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +4.8725e-01  +5.6798e+01  5.63e+01  4.28e-01  1.38e+01  4.00e-03  5.72e-01  5.78e-01  
  2  +4.3575e-01  +9.2978e+00  8.86e+00  1.10e-01  4.96e+00  2.72e-02  2.25e-01  9.90e-01  
  3  +3.6550e-01  +2.4304e+00  2.06e+00  1.79e-02  9.20e-01  1.17e-02  4.23e-02  8.46e-01  
  4  +3.0166e-01  +1.8226e+00  1.52e+00  1.02e-02  5.24e-01  8.66e-03  2.48e-02  5.05e-01  
  5  +2.3621e-01  +6.2803e-01  3.92e-01  2.72e-03  1.37e-01  7.23e-04  7.39e-03  8.28e-01  
  6  +2.0088e-01  +4.6546e-01  2.65e-01  1.71e-03  8.80e-02  4.54e-04  4.93e-03  4.61e-01  
  7  +1.7009e-01  +3.0184e-01  1.32e-01  7.91e-04  4.17e-02  2.16e-04  2.48e-03  5.53e-01  
  8  +1.5343e-01  +2.2108e-01  6.76e-02  3.82e-04  2.06e-02  1.05e-04  1.26e-03  5.66e-01  
  9  +1.4203e-01  +1.6755e-01  2.55e-02  1.39e-04  7.52e-03  3.43e-05  4.84e-04  7.19e-01  
 10  +1.3613e-01  +1.4131e-01  5.18e-03  2.81e-05  1.51e-03  5.83e-06  1.03e-04  8.31e-01  
 11  +1.3516e-01  +1.3718e-01  2.02e-03  1.10e-05  5.89e-04  1.90e-06  4.26e-05  8.08e-01  
 12  +1.3450e-01  +1.3464e-01  1.41e-04  7.73e-07  4.10e-05  1.17e-07  3.08e-06  9.38e-01  
 13  +1.3445e-01  +1.3445e-01  1.70e-06  9.33e-09  4.95e-07  1.40e-09  3.74e-08  9.89e-01  
 14  +1.3445e-01  +1.3445e-01  1.71e-08  9.35e-11  4.96e-09  1.40e-11  3.75e-10  9.90e-01  
 15  +1.3445e-01  +1.3445e-01  1.71e-10  9.36e-13  4.96e-11  1.40e-13  3.75e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.288ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:39 PM: Optimal value: 1.345e-01
(CVXPY) Oct 06 04:23:39 PM: Compilation took 1.570e-02 seconds
(CVXPY) Oct 06 04:23:39 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 23, Objective: 0.1345
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:39 PM: Your problem has 501 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Finished problem compilation (took 1.643e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 501
  constraints   = 751
  nnz(P)        = 0
  nnz(A)        = 6091
  cones (total) = 1
    : Nonnegative = 1,  numel = 751

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9710e-01  +2.5279e+02  2.52e+02  9.49e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +4.8178e-01  +5.7081e+01  5.66e+01  4.29e-01  1.37e+01  4.02e-03  5.72e-01  5.76e-01  
  2  +4.3067e-01  +9.4021e+00  8.97e+00  1.10e-01  4.93e+00  2.76e-02  2.25e-01  9.90e-01  
  3  +3.6143e-01  +2.5660e+00  2.20e+00  1.94e-02  9.94e-01  1.16e-02  4.59e-02  8.26e-01  
  4  +2.9917e-01  +1.9381e+00  1.64e+00  1.13e-02  5.79e-01  9.05e-03  2.75e-02  4.63e-01  
  5  +2.3904e-01  +7.3751e-01  4.98e-01  3.56e-03  1.78e-01  8.74e-04  9.55e-03  8.19e-01  
  6  +1.9491e-01  +4.8656e-01  2.92e-01  1.93e-03  9.84e-02  4.41e-04  5.66e-03  5.97e-01  
  7  +1.6175e-01  +2.8005e-01  1.18e-01  7.23e-04  3.74e-02  1.68e-04  2.34e-03  6.50e-01  
  8  +1.4768e-01  +2.0762e-01  5.99e-02  3.45e-04  1.82e-02  7.91e-05  1.16e-03  6.23e-01  
  9  +1.3949e-01  +1.6955e-01  3.01e-02  1.65e-04  8.85e-03  3.83e-05  5.75e-04  5.73e-01  
 10  +1.3357e-01  +1.4191e-01  8.34e-03  4.51e-05  2.41e-03  7.98e-06  1.65e-04  8.76e-01  
 11  +1.3137e-01  +1.3293e-01  1.55e-03  8.41e-06  4.47e-04  1.26e-06  3.24e-05  9.25e-01  
 12  +1.3084e-01  +1.3094e-01  1.05e-04  5.70e-07  3.02e-05  8.05e-08  2.26e-06  9.43e-01  
 13  +1.3080e-01  +1.3080e-01  1.10e-06  5.97e-09  3.16e-07  8.39e-10  2.37e-08  9.90e-01  
 14  +1.3080e-01  +1.3080e-01  1.10e-08  5.97e-11  3.16e-09  8.40e-12  2.37e-10  9.90e-01  
 15  +1.3080e-01  +1.3080e-01  1.10e-10  5.97e-13  3.16e-11  8.40e-14  2.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.6438ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:39 PM: Optimal value: 1.308e-01
(CVXPY) Oct 06 04:23:39 PM: Compilation took 1.643e-02 seconds
(CVXPY) Oct 06 04:23:39 PM: Solver (including time spent in interface) took 3.080e-02 seconds
Iteration: 24, Objective: 0.1308
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:39 PM: Your problem has 511 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:39 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 761
  nnz(P)        = 0
  nnz(A)        = 6149
  cones (total) = 1
    : Nonnegative = 1,  numel = 761

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9691e-01  +2.5307e+02  2.53e+02  9.49e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +4.7164e-01  +5.7324e+01  5.69e+01  4.27e-01  1.35e+01  4.05e-03  5.70e-01  5.76e-01  
  2  +4.1567e-01  +9.8531e+00  9.44e+00  1.09e-01  4.84e+00  2.83e-02  2.23e-01  9.80e-01  
  3  +3.3919e-01  +2.4924e+00  2.15e+00  1.80e-02  9.12e-01  1.14e-02  4.28e-02  8.37e-01  
  4  +2.8472e-01  +1.6543e+00  1.37e+00  9.91e-03  5.02e-01  6.10e-03  2.45e-02  5.12e-01  
  5  +2.2230e-01  +6.7132e-01  4.49e-01  3.24e-03  1.61e-01  1.24e-03  8.85e-03  7.24e-01  
  6  +1.9254e-01  +5.0170e-01  3.09e-01  2.10e-03  1.05e-01  7.80e-04  6.11e-03  4.17e-01  
  7  +1.5880e-01  +2.9715e-01  1.38e-01  8.70e-04  4.42e-02  2.93e-04  2.78e-03  6.62e-01  
  8  +1.4184e-01  +2.0307e-01  6.12e-02  3.62e-04  1.87e-02  1.20e-04  1.22e-03  6.41e-01  
  9  +1.3368e-01  +1.6445e-01  3.08e-02  1.72e-04  9.07e-03  5.49e-05  5.96e-04  6.06e-01  
 10  +1.2775e-01  +1.3629e-01  8.54e-03  4.69e-05  2.47e-03  8.74e-06  1.71e-04  9.06e-01  
 11  +1.2548e-01  +1.2706e-01  1.58e-03  8.64e-06  4.53e-04  1.29e-06  3.32e-05  9.32e-01  
 12  +1.2494e-01  +1.2504e-01  1.01e-04  5.54e-07  2.89e-05  7.73e-08  2.19e-06  9.46e-01  
 13  +1.2490e-01  +1.2490e-01  1.05e-06  5.78e-09  3.02e-07  8.03e-10  2.29e-08  9.90e-01  
 14  +1.2490e-01  +1.2490e-01  1.05e-08  5.79e-11  3.02e-09  8.04e-12  2.30e-10  9.90e-01  
 15  +1.2490e-01  +1.2490e-01  1.05e-10  5.79e-13  3.02e-11  8.04e-14  2.30e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.65ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:39 PM: Optimal value: 1.249e-01
(CVXPY) Oct 06 04:23:39 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:39 PM: Solver (including time spent in interface) took 3.133e-02 seconds
Iteration: 25, Objective: 0.1249
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:40 PM: Your problem has 521 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:40 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 771
  nnz(P)        = 0
  nnz(A)        = 6198
  cones (total) = 1
    : Nonnegative = 1,  numel = 771

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9687e-01  +2.5306e+02  2.53e+02  9.50e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +4.6908e-01  +5.7414e+01  5.69e+01  4.28e-01  1.34e+01  4.06e-03  5.70e-01  5.75e-01  
  2  +4.1082e-01  +9.7441e+00  9.33e+00  1.08e-01  4.75e+00  2.85e-02  2.21e-01  9.86e-01  
  3  +3.3765e-01  +2.6446e+00  2.31e+00  1.97e-02  9.88e-01  1.16e-02  4.69e-02  8.20e-01  
  4  +2.7748e-01  +1.7173e+00  1.44e+00  1.03e-02  5.18e-01  6.03e-03  2.56e-02  5.59e-01  
  5  +2.1654e-01  +6.3727e-01  4.21e-01  3.05e-03  1.50e-01  1.12e-03  8.40e-03  7.43e-01  
  6  +1.8867e-01  +4.8691e-01  2.98e-01  2.04e-03  1.02e-01  7.30e-04  5.95e-03  3.98e-01  
  7  +1.5487e-01  +2.8856e-01  1.34e-01  8.40e-04  4.25e-02  2.82e-04  2.71e-03  6.53e-01  
  8  +1.3693e-01  +1.8927e-01  5.23e-02  3.08e-04  1.58e-02  9.61e-05  1.06e-03  7.17e-01  
  9  +1.3036e-01  +1.5785e-01  2.75e-02  1.56e-04  8.13e-03  4.55e-05  5.51e-04  5.66e-01  
 10  +1.2479e-01  +1.3089e-01  6.10e-03  3.45e-05  1.78e-03  6.05e-06  1.29e-04  9.07e-01  
 11  +1.2369e-01  +1.2631e-01  2.62e-03  1.48e-05  7.61e-04  2.29e-06  5.83e-05  7.54e-01  
 12  +1.2287e-01  +1.2307e-01  2.03e-04  1.15e-06  5.86e-05  1.54e-07  4.71e-06  9.29e-01  
 13  +1.2280e-01  +1.2281e-01  3.88e-06  2.20e-08  1.12e-06  2.88e-09  9.09e-08  9.88e-01  
 14  +1.2280e-01  +1.2280e-01  3.89e-08  2.20e-10  1.12e-08  2.88e-11  9.10e-10  9.90e-01  
 15  +1.2280e-01  +1.2280e-01  3.89e-10  2.20e-12  1.12e-10  2.89e-13  9.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.6096ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:40 PM: Optimal value: 1.228e-01
(CVXPY) Oct 06 04:23:40 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:40 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 26, Objective: 0.1228
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:40 PM: Your problem has 531 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:40 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 781
  nnz(P)        = 0
  nnz(A)        = 6300
  cones (total) = 1
    : Nonnegative = 1,  numel = 781

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9683e-01  +2.5310e+02  2.53e+02  9.50e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +4.6336e-01  +5.7517e+01  5.71e+01  4.27e-01  1.33e+01  4.08e-03  5.68e-01  5.75e-01  
  2  +4.0263e-01  +9.7164e+00  9.31e+00  1.05e-01  4.61e+00  2.87e-02  2.17e-01  9.90e-01  
  3  +3.2910e-01  +2.9482e+00  2.62e+00  2.23e-02  1.10e+00  1.22e-02  5.33e-02  7.90e-01  
  4  +2.7148e-01  +1.8799e+00  1.61e+00  1.17e-02  5.79e-01  6.55e-03  2.90e-02  5.37e-01  
  5  +2.1626e-01  +6.5896e-01  4.43e-01  3.28e-03  1.59e-01  1.13e-03  9.03e-03  7.57e-01  
  6  +1.8647e-01  +5.0166e-01  3.15e-01  2.20e-03  1.08e-01  7.18e-04  6.41e-03  4.36e-01  
  7  +1.4985e-01  +2.7319e-01  1.23e-01  7.86e-04  3.94e-02  2.28e-04  2.57e-03  7.27e-01  
  8  +1.3363e-01  +1.8065e-01  4.70e-02  2.84e-04  1.44e-02  7.69e-05  9.90e-04  6.95e-01  
  9  +1.2588e-01  +1.3750e-01  1.16e-02  7.00e-05  3.52e-03  1.09e-05  2.57e-04  9.03e-01  
 10  +1.2360e-01  +1.2659e-01  2.98e-03  1.81e-05  9.07e-04  2.39e-06  7.08e-05  8.20e-01  
 11  +1.2298e-01  +1.2401e-01  1.03e-03  6.14e-06  3.07e-04  7.78e-07  2.55e-05  7.20e-01  
 12  +1.2272e-01  +1.2291e-01  1.95e-04  1.15e-06  5.74e-05  1.30e-07  5.01e-06  9.90e-01  
 13  +1.2265e-01  +1.2266e-01  6.70e-06  3.95e-08  1.96e-06  4.35e-09  1.74e-07  9.67e-01  
 14  +1.2265e-01  +1.2265e-01  6.72e-08  3.96e-10  1.97e-08  4.36e-11  1.74e-09  9.90e-01  
 15  +1.2265e-01  +1.2265e-01  6.73e-10  3.96e-12  1.97e-10  4.38e-13  1.75e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.7637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:40 PM: Optimal value: 1.227e-01
(CVXPY) Oct 06 04:23:40 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:40 PM: Solver (including time spent in interface) took 3.135e-02 seconds
Iteration: 27, Objective: 0.1227
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:40 PM: Your problem has 534 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:40 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 534
  constraints   = 784
  nnz(P)        = 0
  nnz(A)        = 6324
  cones (total) = 1
    : Nonnegative = 1,  numel = 784

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9680e-01  +2.5311e+02  2.53e+02  9.50e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +4.6327e-01  +5.7522e+01  5.71e+01  4.27e-01  1.33e+01  4.08e-03  5.68e-01  5.75e-01  
  2  +4.0258e-01  +9.7101e+00  9.31e+00  1.05e-01  4.59e+00  2.87e-02  2.17e-01  9.90e-01  
  3  +3.2905e-01  +2.9364e+00  2.61e+00  2.23e-02  1.10e+00  1.21e-02  5.32e-02  7.91e-01  
  4  +2.7380e-01  +1.9449e+00  1.67e+00  1.22e-02  6.04e-01  6.93e-03  3.02e-02  5.10e-01  
  5  +2.1932e-01  +6.9042e-01  4.71e-01  3.50e-03  1.70e-01  1.13e-03  9.61e-03  7.62e-01  
  6  +1.8602e-01  +5.0582e-01  3.20e-01  2.23e-03  1.10e-01  6.82e-04  6.53e-03  4.70e-01  
  7  +1.5118e-01  +2.8242e-01  1.31e-01  8.42e-04  4.20e-02  2.33e-04  2.74e-03  7.02e-01  
  8  +1.3471e-01  +1.8718e-01  5.25e-02  3.19e-04  1.61e-02  8.41e-05  1.10e-03  6.72e-01  
  9  +1.2840e-01  +1.5188e-01  2.35e-02  1.41e-04  7.12e-03  3.20e-05  5.08e-04  6.48e-01  
 10  +1.2420e-01  +1.2957e-01  5.37e-03  3.26e-05  1.63e-03  5.95e-06  1.24e-04  8.13e-01  
 11  +1.2341e-01  +1.2586e-01  2.45e-03  1.48e-05  7.40e-04  2.24e-06  5.96e-05  7.37e-01  
 12  +1.2287e-01  +1.2357e-01  7.00e-04  4.18e-06  2.08e-04  6.05e-07  1.77e-05  7.34e-01  
 13  +1.2269e-01  +1.2279e-01  1.06e-04  6.25e-07  3.10e-05  7.23e-08  2.74e-06  9.71e-01  
 14  +1.2265e-01  +1.2265e-01  2.15e-06  1.27e-08  6.30e-07  1.46e-09  5.61e-08  9.80e-01  
 15  +1.2265e-01  +1.2265e-01  2.16e-08  1.27e-10  6.31e-09  1.46e-11  5.62e-10  9.90e-01  
 16  +1.2265e-01  +1.2265e-01  2.18e-10  1.28e-12  6.37e-11  1.47e-13  5.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.539ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:40 PM: Optimal value: 1.227e-01
(CVXPY) Oct 06 04:23:40 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:40 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 28, Objective: 0.1227
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:40 PM: Your problem has 544 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:40 PM: Finished problem compilation (took 1.508e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 544
  constraints   = 794
  nnz(P)        = 0
  nnz(A)        = 6391
  cones (total) = 1
    : Nonnegative = 1,  numel = 794

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9682e-01  +2.5310e+02  2.53e+02  9.51e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +4.6171e-01  +5.7419e+01  5.70e+01  4.26e-01  1.31e+01  4.09e-03  5.66e-01  5.77e-01  
  2  +4.0041e-01  +9.6829e+00  9.28e+00  1.04e-01  4.46e+00  2.85e-02  2.14e-01  9.90e-01  
  3  +3.2416e-01  +3.0300e+00  2.71e+00  2.27e-02  1.11e+00  1.23e-02  5.43e-02  7.90e-01  
  4  +2.7432e-01  +1.9845e+00  1.71e+00  1.26e-02  6.21e-01  6.50e-03  3.16e-02  5.06e-01  
  5  +2.2037e-01  +7.1621e-01  4.96e-01  3.71e-03  1.79e-01  1.10e-03  1.02e-02  7.62e-01  
  6  +1.8252e-01  +4.9400e-01  3.11e-01  2.17e-03  1.06e-01  6.16e-04  6.45e-03  5.16e-01  
  7  +1.5220e-01  +2.9400e-01  1.42e-01  9.22e-04  4.58e-02  2.37e-04  2.99e-03  6.70e-01  
  8  +1.3588e-01  +1.9638e-01  6.05e-02  3.73e-04  1.88e-02  9.13e-05  1.28e-03  6.54e-01  
  9  +1.2777e-01  +1.5016e-01  2.24e-02  1.36e-04  6.84e-03  3.14e-05  4.90e-04  6.47e-01  
 10  +1.2403e-01  +1.2928e-01  5.25e-03  3.23e-05  1.61e-03  6.45e-06  1.22e-04  7.73e-01  
 11  +1.2336e-01  +1.2603e-01  2.68e-03  1.62e-05  8.15e-04  2.70e-06  6.47e-05  6.88e-01  
 12  +1.2280e-01  +1.2360e-01  8.00e-04  4.75e-06  2.40e-04  7.34e-07  2.01e-05  7.57e-01  
 13  +1.2258e-01  +1.2267e-01  8.97e-05  5.26e-07  2.64e-05  5.93e-08  2.31e-06  9.90e-01  
 14  +1.2255e-01  +1.2255e-01  1.59e-06  9.32e-09  4.67e-07  1.04e-09  4.12e-08  9.83e-01  
 15  +1.2255e-01  +1.2255e-01  1.59e-08  9.33e-11  4.68e-09  1.04e-11  4.13e-10  9.90e-01  
 16  +1.2255e-01  +1.2255e-01  1.60e-10  9.39e-13  4.71e-11  1.05e-13  4.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.3036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:40 PM: Optimal value: 1.226e-01
(CVXPY) Oct 06 04:23:40 PM: Compilation took 1.508e-02 seconds
(CVXPY) Oct 06 04:23:40 PM: Solver (including time spent in interface) took 3.134e-02 seconds
Iteration: 29, Objective: 0.1226
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:41 PM: Your problem has 554 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:41 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 554
  constraints   = 804
  nnz(P)        = 0
  nnz(A)        = 6445
  cones (total) = 1
    : Nonnegative = 1,  numel = 804

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9675e-01  +2.5307e+02  2.53e+02  9.51e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +4.5891e-01  +5.7533e+01  5.71e+01  4.27e-01  1.30e+01  4.09e-03  5.66e-01  5.76e-01  
  2  +3.9793e-01  +9.6751e+00  9.28e+00  1.04e-01  4.45e+00  2.86e-02  2.15e-01  9.90e-01  
  3  +3.2113e-01  +2.8378e+00  2.52e+00  2.14e-02  1.04e+00  1.17e-02  5.15e-02  8.02e-01  
  4  +2.7664e-01  +1.9426e+00  1.67e+00  1.27e-02  6.19e-01  6.49e-03  3.19e-02  4.64e-01  
  5  +2.1967e-01  +7.1887e-01  4.99e-01  3.79e-03  1.82e-01  9.69e-04  1.05e-02  7.88e-01  
  6  +1.8281e-01  +4.9708e-01  3.14e-01  2.23e-03  1.08e-01  5.48e-04  6.63e-03  5.11e-01  
  7  +1.5198e-01  +2.9356e-01  1.42e-01  9.36e-04  4.61e-02  2.07e-04  3.04e-03  6.88e-01  
  8  +1.3530e-01  +1.9297e-01  5.77e-02  3.63e-04  1.81e-02  7.70e-05  1.25e-03  6.68e-01  
  9  +1.2810e-01  +1.5101e-01  2.29e-02  1.41e-04  7.05e-03  2.86e-05  5.03e-04  6.65e-01  
 10  +1.2454e-01  +1.3058e-01  6.04e-03  3.76e-05  1.87e-03  4.41e-06  1.42e-04  9.64e-01  
 11  +1.2348e-01  +1.2629e-01  2.81e-03  1.71e-05  8.58e-04  2.00e-06  6.87e-05  6.96e-01  
 12  +1.2282e-01  +1.2361e-01  7.88e-04  4.70e-06  2.36e-04  5.37e-07  2.01e-05  8.08e-01  
 13  +1.2257e-01  +1.2264e-01  6.48e-05  3.82e-07  1.91e-05  4.07e-08  1.70e-06  9.90e-01  
 14  +1.2255e-01  +1.2255e-01  8.22e-07  4.85e-09  2.42e-07  5.12e-10  2.16e-08  9.88e-01  
 15  +1.2255e-01  +1.2255e-01  8.29e-09  4.89e-11  2.43e-09  5.16e-12  2.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.8079ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:41 PM: Optimal value: 1.226e-01
(CVXPY) Oct 06 04:23:41 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:23:41 PM: Solver (including time spent in interface) took 1.570e-02 seconds
Iteration: 30, Objective: 0.1226
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:41 PM: Your problem has 557 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:41 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 807
  nnz(P)        = 0
  nnz(A)        = 6484
  cones (total) = 1
    : Nonnegative = 1,  numel = 807

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9675e-01  +2.5307e+02  2.53e+02  9.51e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +4.5854e-01  +5.7532e+01  5.71e+01  4.28e-01  1.30e+01  4.10e-03  5.66e-01  5.76e-01  
  2  +3.9742e-01  +9.6551e+00  9.26e+00  1.04e-01  4.43e+00  2.85e-02  2.15e-01  9.90e-01  
  3  +3.2037e-01  +2.8430e+00  2.52e+00  2.15e-02  1.04e+00  1.17e-02  5.18e-02  8.04e-01  
  4  +2.7600e-01  +1.9578e+00  1.68e+00  1.28e-02  6.25e-01  6.51e-03  3.23e-02  4.62e-01  
  5  +2.1936e-01  +7.1943e-01  5.00e-01  3.80e-03  1.82e-01  9.38e-04  1.05e-02  7.94e-01  
  6  +1.8186e-01  +4.9587e-01  3.14e-01  2.23e-03  1.08e-01  5.24e-04  6.65e-03  5.26e-01  
  7  +1.5015e-01  +2.8333e-01  1.33e-01  8.82e-04  4.32e-02  1.87e-04  2.89e-03  7.03e-01  
  8  +1.3516e-01  +1.9281e-01  5.76e-02  3.65e-04  1.81e-02  7.34e-05  1.26e-03  6.56e-01  
  9  +1.2771e-01  +1.4901e-01  2.13e-02  1.32e-04  6.56e-03  2.55e-05  4.73e-04  6.90e-01  
 10  +1.2448e-01  +1.3040e-01  5.92e-03  3.71e-05  1.83e-03  4.30e-06  1.41e-04  9.64e-01  
 11  +1.2339e-01  +1.2593e-01  2.53e-03  1.55e-05  7.77e-04  1.79e-06  6.25e-05  6.96e-01  
 12  +1.2283e-01  +1.2365e-01  8.23e-04  4.94e-06  2.47e-04  5.61e-07  2.10e-05  7.54e-01  
 13  +1.2259e-01  +1.2271e-01  1.19e-04  7.02e-07  3.49e-05  7.62e-08  3.11e-06  9.90e-01  
 14  +1.2255e-01  +1.2255e-01  2.79e-06  1.65e-08  8.20e-07  1.77e-09  7.37e-08  9.77e-01  
 15  +1.2255e-01  +1.2255e-01  2.80e-08  1.65e-10  8.23e-09  1.77e-11  7.39e-10  9.90e-01  
 16  +1.2255e-01  +1.2255e-01  2.81e-10  1.66e-12  8.26e-11  1.79e-13  7.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.7611ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:41 PM: Optimal value: 1.226e-01
(CVXPY) Oct 06 04:23:41 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:41 PM: Solver (including time spent in interface) took 3.126e-02 seconds
FULL MODEL:
  Accruacy: 0.832
  Our objective: 0.664

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x6 = 1 AND x9 = 0)                                             <-- (term's our objective: 0.044)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.032)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1)                                             <-- (term's our objective: 0.036)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.02)
 OR (x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.016)
 OR (x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.036)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 11.325474262237549
Best over terms:
  Our final objective: 0.18
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.18
  Highest accruacy: 0.59
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

