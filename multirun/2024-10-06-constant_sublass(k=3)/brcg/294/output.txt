Command:
python test_script.py -s constant_subclass -d 8 -n 100 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 8.

Computed total variation: 0.78
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:46 PM: Your problem has 67 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Finished problem compilation (took 4.829e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 67
  constraints   = 117
  nnz(P)        = 0
  nnz(A)        = 567
  cones (total) = 1
    : Nonnegative = 1,  numel = 117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9747e-01  +5.1135e+01  5.06e+01  8.71e-01  9.94e+00  1.00e+00  1.04e+00   ------   
  1  +5.7858e-01  +1.1114e+01  1.05e+01  3.69e-01  5.93e+00  3.79e-03  5.81e-01  6.00e-01  
  2  +5.1547e-01  +1.7086e+00  1.19e+00  8.96e-02  1.78e+00  1.70e-02  2.30e-01  9.90e-01  
  3  +4.9331e-01  +7.7079e-01  2.77e-01  1.73e-02  3.61e-01  7.02e-03  5.36e-02  8.33e-01  
  4  +4.6932e-01  +6.7140e-01  2.02e-01  7.07e-03  1.50e-01  7.64e-03  2.31e-02  6.08e-01  
  5  +4.4877e-01  +5.4091e-01  9.21e-02  2.85e-03  5.96e-02  2.17e-03  1.02e-02  6.77e-01  
  6  +4.3603e-01  +4.9024e-01  5.42e-02  1.28e-03  2.67e-02  1.13e-03  5.26e-03  6.16e-01  
  7  +4.2341e-01  +4.3301e-01  9.60e-03  2.08e-04  4.35e-03  1.97e-05  9.68e-04  9.90e-01  
  8  +4.2015e-01  +4.2029e-01  1.40e-04  2.89e-06  6.06e-05  2.68e-07  1.40e-05  9.86e-01  
  9  +4.2010e-01  +4.2010e-01  1.40e-06  2.89e-08  6.05e-07  2.68e-09  1.40e-07  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  1.40e-08  2.89e-10  6.05e-09  2.68e-11  1.40e-09  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  1.40e-10  2.89e-12  6.05e-11  2.68e-13  1.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0996ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:46 PM: Optimal value: 4.201e-01
(CVXPY) Oct 06 04:07:46 PM: Compilation took 4.829e-02 seconds
(CVXPY) Oct 06 04:07:46 PM: Solver (including time spent in interface) took 4.012e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:46 PM: Your problem has 77 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Finished problem compilation (took 1.298e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 77
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 671
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9156e-01  +5.1806e+01  5.13e+01  8.77e-01  1.00e+01  1.00e+00  1.06e+00   ------   
  1  +5.4649e-01  +1.1195e+01  1.06e+01  3.75e-01  5.82e+00  3.81e-03  5.89e-01  6.02e-01  
  2  +4.8145e-01  +2.1808e+00  1.70e+00  1.02e-01  2.04e+00  1.94e-02  2.44e-01  9.11e-01  
  3  +4.2319e-01  +9.8807e-01  5.65e-01  2.36e-02  4.96e-01  1.02e-02  6.54e-02  7.65e-01  
  4  +3.8565e-01  +6.6018e-01  2.75e-01  9.17e-03  1.90e-01  4.99e-03  2.90e-02  6.24e-01  
  5  +3.6224e-01  +4.9846e-01  1.36e-01  3.59e-03  7.53e-02  2.49e-03  1.21e-02  7.08e-01  
  6  +3.4657e-01  +4.3780e-01  9.12e-02  1.92e-03  4.13e-02  1.62e-03  6.79e-03  5.43e-01  
  7  +3.2615e-01  +3.4151e-01  1.54e-02  3.20e-04  6.82e-03  3.27e-05  1.23e-03  9.90e-01  
  8  +3.2049e-01  +3.2098e-01  4.83e-04  9.79e-06  2.09e-04  8.96e-07  3.88e-05  9.70e-01  
  9  +3.2031e-01  +3.2032e-01  1.31e-05  2.68e-07  5.63e-06  2.08e-08  1.10e-06  9.75e-01  
 10  +3.2030e-01  +3.2030e-01  1.32e-07  2.71e-09  5.68e-08  2.10e-10  1.12e-08  9.90e-01  
 11  +3.2030e-01  +3.2030e-01  1.32e-09  2.71e-11  5.68e-10  2.10e-12  1.12e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0886ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:46 PM: Optimal value: 3.203e-01
(CVXPY) Oct 06 04:07:46 PM: Compilation took 1.298e-02 seconds
(CVXPY) Oct 06 04:07:46 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:46 PM: Your problem has 87 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 87
  constraints   = 137
  nnz(P)        = 0
  nnz(A)        = 725
  cones (total) = 1
    : Nonnegative = 1,  numel = 137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8702e-01  +5.1994e+01  5.15e+01  8.81e-01  9.78e+00  1.00e+00  1.07e+00   ------   
  1  +5.1553e-01  +1.1329e+01  1.08e+01  3.82e-01  5.63e+00  3.85e-03  5.92e-01  5.97e-01  
  2  +4.4249e-01  +2.3517e+00  1.91e+00  9.89e-02  1.92e+00  2.17e-02  2.33e-01  9.14e-01  
  3  +3.7300e-01  +1.0539e+00  6.81e-01  2.59e-02  5.24e-01  1.10e-02  7.04e-02  7.25e-01  
  4  +3.2421e-01  +7.8901e-01  4.65e-01  1.32e-02  2.69e-01  7.22e-03  3.90e-02  5.93e-01  
  5  +2.6886e-01  +4.2970e-01  1.61e-01  4.16e-03  8.56e-02  1.71e-03  1.43e-02  7.09e-01  
  6  +2.3871e-01  +2.6992e-01  3.12e-02  7.95e-04  1.64e-02  2.39e-04  3.14e-03  8.33e-01  
  7  +2.3131e-01  +2.3389e-01  2.58e-03  6.59e-05  1.35e-03  1.74e-05  2.75e-04  9.21e-01  
  8  +2.3066e-01  +2.3083e-01  1.78e-04  4.61e-06  9.29e-05  7.73e-07  2.04e-05  9.27e-01  
  9  +2.3060e-01  +2.3060e-01  2.58e-06  6.75e-08  1.34e-06  9.50e-09  3.14e-07  9.86e-01  
 10  +2.3060e-01  +2.3060e-01  2.57e-08  6.74e-10  1.34e-08  9.49e-11  3.14e-09  9.90e-01  
 11  +2.3060e-01  +2.3060e-01  2.57e-10  6.74e-12  1.34e-10  9.49e-13  3.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4836ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:46 PM: Optimal value: 2.306e-01
(CVXPY) Oct 06 04:07:46 PM: Compilation took 5.006e-03 seconds
(CVXPY) Oct 06 04:07:46 PM: Solver (including time spent in interface) took 5.044e-03 seconds
Iteration: 3, Objective: 0.2306
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:46 PM: Your problem has 97 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Finished problem compilation (took 6.178e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 147
  nnz(P)        = 0
  nnz(A)        = 777
  cones (total) = 1
    : Nonnegative = 1,  numel = 147

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8502e-01  +5.2263e+01  5.18e+01  8.86e-01  9.56e+00  1.00e+00  1.07e+00   ------   
  1  +4.8788e-01  +1.1292e+01  1.08e+01  3.79e-01  5.33e+00  3.91e-03  5.83e-01  6.05e-01  
  2  +3.8571e-01  +2.1904e+00  1.80e+00  7.77e-02  1.50e+00  2.31e-02  1.87e-01  9.66e-01  
  3  +2.9625e-01  +8.5256e-01  5.56e-01  1.82e-02  3.56e-01  8.68e-03  5.02e-02  8.09e-01  
  4  +2.2734e-01  +3.7951e-01  1.52e-01  4.66e-03  9.15e-02  1.02e-03  1.52e-02  8.09e-01  
  5  +1.9938e-01  +2.3513e-01  3.57e-02  1.06e-03  2.09e-02  1.55e-04  4.07e-03  9.28e-01  
  6  +1.9151e-01  +1.9471e-01  3.20e-03  9.38e-05  1.85e-03  1.22e-05  3.85e-04  9.15e-01  
  7  +1.9077e-01  +1.9100e-01  2.27e-04  6.79e-06  1.31e-04  4.54e-07  3.02e-05  9.23e-01  
  8  +1.9070e-01  +1.9071e-01  4.86e-06  1.47e-07  2.80e-06  1.04e-08  7.14e-07  9.80e-01  
  9  +1.9070e-01  +1.9070e-01  4.85e-08  1.47e-09  2.80e-08  1.04e-10  7.14e-09  9.90e-01  
 10  +1.9070e-01  +1.9070e-01  4.85e-10  1.47e-11  2.80e-10  1.04e-12  7.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3475ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:46 PM: Optimal value: 1.907e-01
(CVXPY) Oct 06 04:07:46 PM: Compilation took 6.178e-03 seconds
(CVXPY) Oct 06 04:07:46 PM: Solver (including time spent in interface) took 5.007e-03 seconds
Iteration: 4, Objective: 0.1907
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:46 PM: Your problem has 107 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:46 PM: Finished problem compilation (took 8.586e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 107
  constraints   = 157
  nnz(P)        = 0
  nnz(A)        = 833
  cones (total) = 1
    : Nonnegative = 1,  numel = 157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8326e-01  +5.2521e+01  5.20e+01  8.89e-01  9.39e+00  1.00e+00  1.08e+00   ------   
  1  +4.6153e-01  +1.1412e+01  1.10e+01  3.80e-01  5.15e+00  3.97e-03  5.82e-01  6.03e-01  
  2  +3.3648e-01  +2.3517e+00  2.02e+00  7.76e-02  1.44e+00  2.37e-02  1.87e-01  9.42e-01  
  3  +2.5709e-01  +8.1472e-01  5.58e-01  1.85e-02  3.52e-01  7.99e-03  5.04e-02  7.78e-01  
  4  +2.0288e-01  +3.7742e-01  1.75e-01  5.80e-03  1.11e-01  1.89e-03  1.79e-02  7.41e-01  
  5  +1.7456e-01  +2.1464e-01  4.01e-02  1.21e-03  2.38e-02  3.62e-04  4.15e-03  8.51e-01  
  6  +1.6760e-01  +1.7469e-01  7.09e-03  2.16e-04  4.19e-03  4.05e-05  7.67e-04  9.12e-01  
  7  +1.6608e-01  +1.6701e-01  9.25e-04  2.88e-05  5.51e-04  4.26e-06  1.07e-04  8.65e-01  
  8  +1.6588e-01  +1.6609e-01  2.03e-04  6.57e-06  1.23e-04  8.20e-07  2.61e-05  8.04e-01  
  9  +1.6583e-01  +1.6583e-01  6.45e-06  2.12e-07  3.94e-06  2.04e-08  8.73e-07  9.71e-01  
 10  +1.6583e-01  +1.6583e-01  6.56e-08  2.16e-09  4.02e-08  2.08e-10  8.92e-09  9.90e-01  
 11  +1.6583e-01  +1.6583e-01  6.57e-10  2.16e-11  4.02e-10  2.08e-12  8.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2802ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:46 PM: Optimal value: 1.658e-01
(CVXPY) Oct 06 04:07:46 PM: Compilation took 8.586e-03 seconds
(CVXPY) Oct 06 04:07:46 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1658
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:47 PM: Your problem has 117 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:47 PM: Finished problem compilation (took 1.186e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 167
  nnz(P)        = 0
  nnz(A)        = 883
  cones (total) = 1
    : Nonnegative = 1,  numel = 167

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8155e-01  +5.2620e+01  5.21e+01  8.92e-01  9.21e+00  1.00e+00  1.08e+00   ------   
  1  +4.3934e-01  +1.1514e+01  1.11e+01  3.82e-01  5.02e+00  4.02e-03  5.82e-01  5.99e-01  
  2  +3.0104e-01  +2.9821e+00  2.68e+00  9.53e-02  1.69e+00  2.35e-02  2.24e-01  8.45e-01  
  3  +2.3783e-01  +7.6638e-01  5.29e-01  1.86e-02  3.43e-01  6.42e-03  4.99e-02  8.02e-01  
  4  +1.7739e-01  +3.5906e-01  1.82e-01  5.90e-03  1.13e-01  1.84e-03  1.79e-02  8.06e-01  
  5  +1.4796e-01  +2.0934e-01  6.14e-02  1.67e-03  3.35e-02  5.67e-04  5.54e-03  7.93e-01  
  6  +1.3669e-01  +1.5568e-01  1.90e-02  5.01e-04  1.01e-02  1.39e-04  1.73e-03  7.92e-01  
  7  +1.3169e-01  +1.3338e-01  1.69e-03  4.45e-05  8.85e-04  1.01e-05  1.59e-04  9.10e-01  
  8  +1.3126e-01  +1.3155e-01  2.92e-04  8.07e-06  1.54e-04  1.20e-06  3.11e-05  9.38e-01  
  9  +1.3115e-01  +1.3116e-01  6.23e-06  1.75e-07  3.31e-06  2.03e-08  6.96e-07  9.78e-01  
 10  +1.3115e-01  +1.3115e-01  6.22e-08  1.75e-09  3.31e-08  2.03e-10  6.97e-09  9.90e-01  
 11  +1.3115e-01  +1.3115e-01  6.24e-10  1.76e-11  3.31e-10  2.03e-12  6.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5237ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:47 PM: Optimal value: 1.312e-01
(CVXPY) Oct 06 04:07:47 PM: Compilation took 1.186e-02 seconds
(CVXPY) Oct 06 04:07:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:47 PM: Your problem has 127 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:47 PM: Finished problem compilation (took 3.083e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 127
  constraints   = 177
  nnz(P)        = 0
  nnz(A)        = 916
  cones (total) = 1
    : Nonnegative = 1,  numel = 177

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8106e-01  +5.2591e+01  5.21e+01  8.95e-01  9.00e+00  1.00e+00  1.08e+00   ------   
  1  +4.3078e-01  +1.1584e+01  1.12e+01  3.87e-01  4.90e+00  4.03e-03  5.84e-01  5.95e-01  
  2  +2.8099e-01  +2.9167e+00  2.64e+00  9.15e-02  1.60e+00  2.46e-02  2.19e-01  8.64e-01  
  3  +2.2802e-01  +6.8570e-01  4.58e-01  1.70e-02  3.05e-01  5.41e-03  4.63e-02  7.96e-01  
  4  +1.8962e-01  +4.7138e-01  2.82e-01  9.54e-03  1.80e-01  3.09e-03  2.77e-02  5.81e-01  
  5  +1.5886e-01  +2.7294e-01  1.14e-01  3.47e-03  6.75e-02  1.24e-03  1.10e-02  6.45e-01  
  6  +1.4494e-01  +2.0128e-01  5.63e-02  1.54e-03  3.04e-02  5.69e-04  5.11e-03  6.32e-01  
  7  +1.3395e-01  +1.4301e-01  9.06e-03  2.44e-04  4.81e-03  5.36e-05  8.44e-04  9.48e-01  
  8  +1.3169e-01  +1.3325e-01  1.56e-03  4.29e-05  8.29e-04  7.72e-06  1.55e-04  8.22e-01  
  9  +1.3138e-01  +1.3200e-01  6.25e-04  1.78e-05  3.34e-04  2.83e-06  6.86e-05  8.11e-01  
 10  +1.3116e-01  +1.3120e-01  3.28e-05  9.52e-07  1.76e-05  1.19e-07  3.82e-06  9.47e-01  
 11  +1.3115e-01  +1.3115e-01  3.45e-07  1.00e-08  1.85e-07  1.25e-09  4.05e-08  9.89e-01  
 12  +1.3115e-01  +1.3115e-01  3.45e-09  1.01e-10  1.85e-09  1.25e-11  4.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6318ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:47 PM: Optimal value: 1.312e-01
(CVXPY) Oct 06 04:07:47 PM: Compilation took 3.083e-03 seconds
(CVXPY) Oct 06 04:07:47 PM: Solver (including time spent in interface) took 4.660e-03 seconds
Iteration: 7, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:47 PM: Your problem has 137 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:47 PM: Finished problem compilation (took 5.113e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 137
  constraints   = 187
  nnz(P)        = 0
  nnz(A)        = 962
  cones (total) = 1
    : Nonnegative = 1,  numel = 187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8075e-01  +5.2655e+01  5.22e+01  8.98e-01  8.84e+00  1.00e+00  1.08e+00   ------   
  1  +4.3011e-01  +1.1610e+01  1.12e+01  3.95e-01  4.77e+00  4.03e-03  5.85e-01  5.95e-01  
  2  +2.8022e-01  +3.0127e+00  2.73e+00  9.52e-02  1.62e+00  2.44e-02  2.27e-01  8.48e-01  
  3  +2.2613e-01  +7.3542e-01  5.09e-01  1.86e-02  3.31e-01  5.65e-03  5.15e-02  7.91e-01  
  4  +1.7776e-01  +4.2494e-01  2.47e-01  8.06e-03  1.51e-01  2.45e-03  2.43e-02  7.67e-01  
  5  +1.4730e-01  +2.2116e-01  7.39e-02  2.19e-03  4.21e-02  5.91e-04  7.20e-03  8.13e-01  
  6  +1.3581e-01  +1.5653e-01  2.07e-02  5.96e-04  1.15e-02  1.56e-04  2.03e-03  7.44e-01  
  7  +1.3193e-01  +1.3482e-01  2.89e-03  8.42e-05  1.61e-03  1.86e-05  2.95e-04  8.64e-01  
  8  +1.3150e-01  +1.3274e-01  1.24e-03  3.70e-05  6.87e-04  6.52e-06  1.39e-04  7.12e-01  
  9  +1.3127e-01  +1.3159e-01  3.27e-04  9.99e-06  1.82e-04  1.29e-06  3.90e-05  9.90e-01  
 10  +1.3116e-01  +1.3118e-01  1.87e-05  5.78e-07  1.05e-05  6.85e-08  2.31e-06  9.47e-01  
 11  +1.3115e-01  +1.3115e-01  1.89e-07  5.85e-09  1.06e-07  6.90e-10  2.34e-08  9.90e-01  
 12  +1.3115e-01  +1.3115e-01  1.89e-09  5.85e-11  1.06e-09  6.90e-12  2.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7078ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:47 PM: Optimal value: 1.312e-01
(CVXPY) Oct 06 04:07:47 PM: Compilation took 5.113e-03 seconds
(CVXPY) Oct 06 04:07:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.1312
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:07:47 PM: Your problem has 138 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:07:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:07:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:07:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:07:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:07:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:07:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:07:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:07:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:07:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:07:47 PM: Finished problem compilation (took 5.046e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 138
  constraints   = 188
  nnz(P)        = 0
  nnz(A)        = 970
  cones (total) = 1
    : Nonnegative = 1,  numel = 188

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7973e-01  +5.2569e+01  5.21e+01  8.98e-01  8.83e+00  1.00e+00  1.08e+00   ------   
  1  +4.2252e-01  +1.1714e+01  1.13e+01  3.98e-01  4.80e+00  4.05e-03  5.87e-01  5.89e-01  
  2  +2.7220e-01  +2.9074e+00  2.64e+00  9.31e-02  1.58e+00  2.57e-02  2.21e-01  8.72e-01  
  3  +2.2174e-01  +8.0457e-01  5.83e-01  2.18e-02  3.82e-01  6.46e-03  5.98e-02  7.46e-01  
  4  +1.7326e-01  +3.9359e-01  2.20e-01  7.62e-03  1.38e-01  2.16e-03  2.33e-02  8.03e-01  
  5  +1.5104e-01  +2.5430e-01  1.03e-01  3.22e-03  6.04e-02  9.78e-04  1.05e-02  6.03e-01  
  6  +1.3688e-01  +1.6600e-01  2.91e-02  8.66e-04  1.64e-02  2.66e-04  2.95e-03  7.42e-01  
  7  +1.3190e-01  +1.3451e-01  2.61e-03  7.85e-05  1.48e-03  1.59e-05  2.75e-04  9.42e-01  
  8  +1.3155e-01  +1.3297e-01  1.41e-03  4.32e-05  7.95e-04  6.96e-06  1.62e-04  7.10e-01  
  9  +1.3126e-01  +1.3158e-01  3.18e-04  9.80e-06  1.79e-04  1.21e-06  3.81e-05  9.90e-01  
 10  +1.3117e-01  +1.3121e-01  4.42e-05  1.37e-06  2.47e-05  1.63e-07  5.45e-06  8.77e-01  
 11  +1.3115e-01  +1.3115e-01  7.18e-07  2.22e-08  4.01e-07  2.58e-09  8.90e-08  9.90e-01  
 12  +1.3115e-01  +1.3115e-01  7.18e-09  2.22e-10  4.01e-09  2.58e-11  8.90e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7367ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:07:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:07:47 PM: Optimal value: 1.312e-01
(CVXPY) Oct 06 04:07:47 PM: Compilation took 5.046e-03 seconds
(CVXPY) Oct 06 04:07:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.85
  Our objective: 0.7000000000000001

IF 
    (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x5 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.1)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0) <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.1)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0) <-- (term's our objective: 0.08)
 OR (x2 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.12)
 OR (x4 = 0 AND x6 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.970344305038452
Best over terms:
  Our final objective: 0.19999999999999998
    Its accruacy: 0.6
    Its hamming distance: 6
  Shortest hamming distance: 4
    Its our objective: 0.09999999999999999
  Highest accruacy: 0.6
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

