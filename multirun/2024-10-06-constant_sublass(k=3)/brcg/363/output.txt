Command:
python test_script.py -s constant_subclass -d 10 -n 10 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 10.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:19 PM: Your problem has 26 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:19 PM: Finished problem compilation (took 6.994e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 26
  constraints   = 31
  nnz(P)        = 0
  nnz(A)        = 86
  cones (total) = 1
    : Nonnegative = 1,  numel = 31

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.8189e-01  +6.6169e+00  6.23e+00  7.81e-01  2.81e+00  1.00e+00  1.41e+00   ------   
  1  +2.8055e-01  +8.8168e-01  6.01e-01  2.29e-01  9.46e-01  3.06e-03  5.27e-01  8.93e-01  
  2  +1.4184e-01  +3.4030e-01  1.98e-01  6.47e-02  2.93e-01  8.40e-03  2.10e-01  7.68e-01  
  3  +1.0921e-01  +1.5006e-01  4.09e-02  1.08e-02  5.50e-02  2.66e-03  4.44e-02  8.92e-01  
  4  +1.0028e-01  +1.0107e-01  7.87e-04  2.08e-04  1.06e-03  5.18e-05  8.83e-04  9.80e-01  
  5  +1.0013e-01  +1.0020e-01  7.73e-05  2.08e-05  1.05e-04  4.14e-06  9.17e-05  8.98e-01  
  6  +1.0010e-01  +1.0011e-01  4.12e-06  1.14e-06  5.71e-06  1.48e-07  5.51e-06  9.49e-01  
  7  +1.0010e-01  +1.0010e-01  4.06e-08  1.14e-08  5.66e-08  1.45e-09  5.53e-08  9.90e-01  
  8  +1.0010e-01  +1.0010e-01  4.06e-10  1.14e-10  5.66e-10  1.45e-11  5.53e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 283.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:19 PM: Optimal value: 1.001e-01
(CVXPY) Oct 06 04:22:19 PM: Compilation took 6.994e-02 seconds
(CVXPY) Oct 06 04:22:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:19 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:19 PM: Finished problem compilation (took 3.123e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 132
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.9575e-01  +6.3641e+00  6.07e+00  8.14e-01  3.20e+00  1.00e+00  1.37e+00   ------   
  1  +1.0070e-01  +6.8870e-01  5.88e-01  2.49e-01  9.77e-01  3.38e-03  4.67e-01  8.86e-01  
  2  +5.3605e-02  +1.7543e-01  1.22e-01  5.12e-02  2.43e-01  5.53e-03  1.37e-01  8.04e-01  
  3  +3.1606e-02  +1.1829e-01  8.67e-02  2.56e-02  1.55e-01  4.92e-03  8.26e-02  5.12e-01  
  4  +1.3594e-03  +5.4729e-03  4.11e-03  1.17e-03  7.36e-03  2.02e-04  4.11e-03  9.70e-01  
  5  +1.9996e-04  +2.7106e-04  7.11e-05  2.10e-05  1.31e-04  2.00e-06  7.41e-05  9.82e-01  
  6  +1.9900e-04  +2.0433e-04  5.33e-06  1.77e-06  1.01e-05  1.72e-07  6.17e-06  9.18e-01  
  7  +1.9999e-04  +2.0004e-04  5.37e-08  1.79e-08  1.02e-07  1.74e-09  6.24e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  5.37e-10  1.79e-10  1.02e-09  1.74e-11  6.24e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:19 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:22:19 PM: Compilation took 3.123e-03 seconds
(CVXPY) Oct 06 04:22:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:19 PM: Your problem has 38 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:19 PM: Finished problem compilation (took 5.960e-05 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 38
  constraints   = 43
  nnz(P)        = 0
  nnz(A)        = 138
  cones (total) = 1
    : Nonnegative = 1,  numel = 43

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.6955e-01  +6.4015e+00  6.13e+00  8.17e-01  3.20e+00  1.00e+00  1.37e+00   ------   
  1  +4.7715e-02  +6.4819e-01  6.00e-01  2.52e-01  9.69e-01  3.45e-03  4.60e-01  8.82e-01  
  2  +1.1227e-02  +1.2254e-01  1.11e-01  4.98e-02  2.27e-01  4.39e-03  1.26e-01  7.97e-01  
  3  +6.7716e-04  +5.4064e-03  4.73e-03  2.11e-03  1.00e-02  2.18e-04  5.98e-03  9.58e-01  
  4  +1.6826e-04  +2.7886e-04  1.11e-04  5.11e-05  2.40e-04  3.50e-06  1.45e-04  9.76e-01  
  5  +1.5141e-04  +1.6372e-04  1.23e-05  6.76e-06  2.73e-05  3.21e-07  1.99e-05  8.80e-01  
  6  +1.5003e-04  +1.5023e-04  1.97e-07  1.13e-07  4.45e-07  4.46e-09  3.37e-07  9.85e-01  
  7  +1.5000e-04  +1.5000e-04  1.97e-09  1.13e-09  4.45e-09  4.46e-11  3.37e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 246.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:19 PM: Optimal value: 1.500e-04
(CVXPY) Oct 06 04:22:19 PM: Compilation took 5.960e-05 seconds
(CVXPY) Oct 06 04:22:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x1 = 0)                                  <-- (term's our objective: 0.8)
 OR (x2 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.8)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.181422710418701
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.8
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

