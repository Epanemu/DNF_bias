Command:
python test_script.py -s constant_subclass -d 6 -n 5000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15599999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.2048
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:49 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:49 PM: Finished problem compilation (took 5.995e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5008e+03  2.50e+03  9.79e-01  6.98e+01  1.00e+00  1.00e+00   ------   
  1  +5.9310e-01  +5.1464e+02  5.14e+02  3.83e-01  4.23e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4179e-01  +6.8257e+01  6.77e+01  1.46e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.0994e-01  +1.6755e+01  1.62e+01  1.03e-01  1.40e+01  2.83e-05  2.38e-01  1.33e-01  
  4  +5.0021e-01  +1.0150e+00  5.15e-01  4.95e-03  6.90e-01  6.99e-06  1.17e-01  9.90e-01  
  5  +5.0000e-01  +6.3255e-01  1.33e-01  1.26e-03  1.77e-01  3.69e-06  2.64e-02  8.28e-01  
  6  +4.9695e-01  +9.5603e-01  4.59e-01  8.23e-04  1.17e-01  1.15e-04  2.60e-03  9.64e-01  
  7  +4.8784e-01  +7.9643e-01  3.09e-01  1.93e-04  2.73e-02  2.64e-04  5.98e-04  7.77e-01  
  8  +4.7762e-01  +5.7909e-01  1.01e-01  5.81e-05  8.22e-03  2.70e-06  1.92e-04  8.46e-01  
  9  +4.6778e-01  +5.2473e-01  5.69e-02  2.80e-05  3.96e-03  2.17e-06  1.01e-04  5.95e-01  
 10  +4.5894e-01  +4.8143e-01  2.25e-02  9.80e-06  1.38e-03  1.38e-06  3.88e-05  8.06e-01  
 11  +4.5498e-01  +4.6312e-01  8.14e-03  3.41e-06  4.81e-04  7.59e-07  1.41e-05  9.90e-01  
 12  +4.5236e-01  +4.5255e-01  1.85e-04  7.65e-08  1.08e-05  1.63e-08  3.26e-07  9.81e-01  
 13  +4.5230e-01  +4.5230e-01  1.85e-06  7.66e-10  1.08e-07  1.63e-10  3.26e-09  9.90e-01  
 14  +4.5230e-01  +4.5230e-01  1.85e-08  7.66e-12  1.08e-09  1.63e-12  3.27e-11  9.90e-01  
 15  +4.5230e-01  +4.5230e-01  1.85e-10  7.65e-14  1.08e-11  1.64e-14  3.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.8377ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:49 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:49 PM: Optimal value: 4.523e-01
(CVXPY) Oct 06 03:58:49 PM: Compilation took 5.995e-02 seconds
(CVXPY) Oct 06 03:58:49 PM: Solver (including time spent in interface) took 5.488e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:49 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:49 PM: Finished problem compilation (took 2.280e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 26932
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.9291e-01  +5.1482e+02  5.14e+02  3.83e-01  4.42e+01  3.92e-03  5.26e-01  6.27e-01  
  2  +5.4142e-01  +6.7883e+01  6.73e+01  1.46e-01  2.12e+01  1.16e-02  2.43e-01  8.29e-01  
  3  +5.0971e-01  +1.6515e+01  1.60e+01  1.02e-01  1.45e+01  2.83e-05  2.37e-01  1.41e-01  
  4  +5.0051e-01  +1.5552e+00  1.05e+00  1.01e-02  1.47e+00  8.32e-06  1.52e-01  6.72e-01  
  5  +5.0010e-01  +8.2662e-01  3.27e-01  3.11e-03  4.56e-01  3.89e-06  5.98e-02  6.33e-01  
  6  +4.9976e-01  +8.5062e-01  3.51e-01  2.77e-03  4.09e-01  1.28e-05  1.40e-02  8.57e-01  
  7  +4.9106e-01  +7.5453e-01  2.63e-01  1.98e-04  2.96e-02  2.07e-04  5.65e-04  9.61e-01  
  8  +4.8976e-01  +7.1159e-01  2.22e-01  1.66e-04  2.47e-02  7.49e-05  4.83e-04  5.32e-01  
  9  +4.7944e-01  +6.2896e-01  1.50e-01  8.01e-05  1.19e-02  2.71e-05  2.33e-04  8.91e-01  
 10  +4.7825e-01  +6.2482e-01  1.47e-01  7.44e-05  1.11e-02  2.59e-05  2.15e-04  1.78e-01  
 11  +4.7557e-01  +6.1264e-01  1.37e-01  7.25e-05  1.08e-02  1.98e-05  2.12e-04  2.01e-01  
 12  +4.6903e-01  +5.8659e-01  1.18e-01  5.10e-05  7.57e-03  1.92e-05  1.48e-04  3.43e-01  
 13  +4.6689e-01  +5.7856e-01  1.12e-01  5.04e-05  7.47e-03  1.69e-05  1.48e-04  4.70e-02  
 14  +4.5290e-01  +5.3017e-01  7.73e-02  2.74e-05  4.06e-03  1.35e-05  8.15e-05  4.74e-01  
 15  +4.2936e-01  +4.4636e-01  1.70e-02  5.43e-06  8.03e-04  1.91e-06  1.71e-05  8.99e-01  
 16  +4.2221e-01  +4.2244e-01  2.35e-04  7.39e-08  1.09e-05  1.89e-08  2.38e-07  9.89e-01  
 17  +4.2210e-01  +4.2210e-01  2.35e-06  7.39e-10  1.09e-07  1.89e-10  2.38e-09  9.90e-01  
 18  +4.2210e-01  +4.2210e-01  2.35e-08  7.39e-12  1.09e-09  1.90e-12  2.38e-11  9.90e-01  
 19  +4.2210e-01  +4.2210e-01  2.35e-10  7.38e-14  1.09e-11  1.91e-14  2.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.4328ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:50 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 03:58:50 PM: Compilation took 2.280e-02 seconds
(CVXPY) Oct 06 03:58:50 PM: Solver (including time spent in interface) took 7.704e-02 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:50 PM: Your problem has 2533 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:50 PM: Finished problem compilation (took 1.619e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2533
  constraints   = 5033
  nnz(P)        = 0
  nnz(A)        = 27884
  cones (total) = 1
    : Nonnegative = 1,  numel = 5033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.9256e-01  +5.1529e+02  5.15e+02  3.84e-01  4.43e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4111e-01  +6.7587e+01  6.70e+01  1.46e-01  2.11e+01  1.16e-02  2.43e-01  8.33e-01  
  3  +5.0964e-01  +1.6452e+01  1.59e+01  1.02e-01  1.44e+01  2.85e-05  2.36e-01  1.45e-01  
  4  +5.0046e-01  +1.4831e+00  9.83e-01  9.46e-03  1.37e+00  8.33e-06  1.45e-01  7.15e-01  
  5  +5.0014e-01  +9.2894e-01  4.29e-01  4.10e-03  5.99e-01  5.11e-06  6.91e-02  5.73e-01  
  6  +4.9971e-01  +9.2271e-01  4.23e-01  3.14e-03  4.64e-01  1.60e-05  1.41e-02  9.33e-01  
  7  +4.9411e-01  +8.4480e-01  3.51e-01  4.00e-04  5.97e-02  1.43e-04  1.14e-03  9.22e-01  
  8  +4.8877e-01  +7.4912e-01  2.60e-01  1.83e-04  2.73e-02  1.17e-04  5.13e-04  7.97e-01  
  9  +4.8867e-01  +7.3833e-01  2.50e-01  1.69e-04  2.52e-02  7.96e-05  4.71e-04  3.82e-01  
 10  +4.8337e-01  +7.1319e-01  2.30e-01  1.20e-04  1.78e-02  8.62e-05  3.34e-04  3.39e-01  
 11  +4.8163e-01  +7.0398e-01  2.22e-01  1.08e-04  1.61e-02  6.89e-05  3.02e-04  3.11e-01  
 12  +4.6829e-01  +6.3401e-01  1.66e-01  7.33e-05  1.09e-02  2.07e-05  2.13e-04  7.65e-01  
 13  +4.3798e-01  +5.1223e-01  7.42e-02  2.65e-05  3.92e-03  8.44e-06  8.26e-05  7.25e-01  
 14  +4.1476e-01  +4.2655e-01  1.18e-02  4.08e-06  6.02e-04  1.01e-06  1.38e-05  8.78e-01  
 15  +4.1194e-01  +4.1664e-01  4.70e-03  1.60e-06  2.37e-04  6.47e-07  5.55e-06  9.90e-01  
 16  +4.0995e-01  +4.1008e-01  1.26e-04  4.31e-08  6.36e-06  1.72e-08  1.51e-07  9.74e-01  
 17  +4.0990e-01  +4.0990e-01  1.27e-06  4.33e-10  6.39e-08  1.73e-10  1.51e-09  9.90e-01  
 18  +4.0990e-01  +4.0990e-01  1.27e-08  4.33e-12  6.39e-10  1.73e-12  1.51e-11  9.90e-01  
 19  +4.0990e-01  +4.0990e-01  1.27e-10  4.33e-14  6.39e-12  1.73e-14  1.52e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.1826ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:50 PM: Optimal value: 4.099e-01
(CVXPY) Oct 06 03:58:50 PM: Compilation took 1.619e-02 seconds
(CVXPY) Oct 06 03:58:50 PM: Solver (including time spent in interface) took 8.002e-02 seconds
Iteration: 3, Objective: 0.4099
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:50 PM: Your problem has 2538 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:50 PM: Finished problem compilation (took 1.957e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2538
  constraints   = 5038
  nnz(P)        = 0
  nnz(A)        = 28305
  cones (total) = 1
    : Nonnegative = 1,  numel = 5038

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.79e-01  7.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.9235e-01  +5.1545e+02  5.15e+02  3.85e-01  4.43e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4096e-01  +6.7442e+01  6.69e+01  1.45e-01  2.11e+01  1.17e-02  2.43e-01  8.35e-01  
  3  +5.0960e-01  +1.6418e+01  1.59e+01  1.02e-01  1.44e+01  2.86e-05  2.36e-01  1.47e-01  
  4  +5.0041e-01  +1.3924e+00  8.92e-01  8.60e-03  1.25e+00  8.28e-06  1.38e-01  7.65e-01  
  5  +5.0011e-01  +9.0928e-01  4.09e-01  3.91e-03  5.72e-01  5.74e-06  6.04e-02  6.10e-01  
  6  +4.9874e-01  +1.1436e+00  6.45e-01  2.57e-03  3.82e-01  4.68e-05  8.27e-03  9.71e-01  
  7  +4.9153e-01  +9.7546e-01  4.84e-01  4.76e-04  7.12e-02  1.77e-04  1.37e-03  8.37e-01  
  8  +4.8834e-01  +9.1060e-01  4.22e-01  3.11e-04  4.65e-02  1.70e-04  8.79e-04  4.74e-01  
  9  +4.8935e-01  +8.7865e-01  3.89e-01  2.96e-04  4.42e-02  1.23e-04  8.29e-04  2.18e-01  
 10  +4.9238e-01  +8.4139e-01  3.49e-01  2.85e-04  4.27e-02  6.05e-05  7.93e-04  4.13e-01  
 11  +4.8705e-01  +8.0220e-01  3.15e-01  1.81e-04  2.71e-02  7.20e-05  5.03e-04  4.04e-01  
 12  +4.8554e-01  +7.8612e-01  3.01e-01  1.56e-04  2.32e-02  6.62e-05  4.31e-04  2.76e-01  
 13  +4.8451e-01  +7.7316e-01  2.89e-01  1.43e-04  2.13e-02  5.88e-05  3.97e-04  2.12e-01  
 14  +4.7642e-01  +6.8219e-01  2.06e-01  1.14e-04  1.70e-02  6.13e-06  3.30e-04  9.32e-01  
 15  +4.5718e-01  +6.0547e-01  1.48e-01  5.99e-05  8.90e-03  6.57e-06  1.79e-04  5.19e-01  
 16  +4.2945e-01  +4.9521e-01  6.58e-02  2.42e-05  3.59e-03  3.37e-06  7.85e-05  6.39e-01  
 17  +4.0958e-01  +4.2047e-01  1.09e-02  3.87e-06  5.71e-04  5.78e-07  1.35e-05  8.56e-01  
 18  +4.0701e-01  +4.1134e-01  4.33e-03  1.53e-06  2.25e-04  4.35e-07  5.43e-06  8.50e-01  
 19  +4.0548e-01  +4.0617e-01  6.90e-04  2.42e-07  3.56e-05  7.35e-08  8.65e-07  8.71e-01  
 20  +4.0520e-01  +4.0521e-01  7.23e-06  2.53e-09  3.74e-07  7.70e-10  9.08e-09  9.90e-01  
 21  +4.0520e-01  +4.0520e-01  7.23e-08  2.53e-11  3.74e-09  7.70e-12  9.09e-11  9.90e-01  
 22  +4.0520e-01  +4.0520e-01  7.23e-10  2.53e-13  3.74e-11  7.71e-14  9.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 78.4893ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:50 PM: Optimal value: 4.052e-01
(CVXPY) Oct 06 03:58:50 PM: Compilation took 1.957e-02 seconds
(CVXPY) Oct 06 03:58:50 PM: Solver (including time spent in interface) took 8.408e-02 seconds
Iteration: 4, Objective: 0.4052
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:50 PM: Your problem has 2543 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:50 PM: Finished problem compilation (took 1.666e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2543
  constraints   = 5043
  nnz(P)        = 0
  nnz(A)        = 28646
  cones (total) = 1
    : Nonnegative = 1,  numel = 5043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.79e-01  7.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.9230e-01  +5.1549e+02  5.15e+02  3.85e-01  4.42e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4091e-01  +6.7405e+01  6.69e+01  1.45e-01  2.10e+01  1.17e-02  2.43e-01  8.35e-01  
  3  +5.0958e-01  +1.6398e+01  1.59e+01  1.02e-01  1.44e+01  2.86e-05  2.35e-01  1.48e-01  
  4  +5.0039e-01  +1.3681e+00  8.68e-01  8.37e-03  1.22e+00  8.27e-06  1.35e-01  7.80e-01  
  5  +5.0009e-01  +8.8769e-01  3.88e-01  3.70e-03  5.42e-01  5.95e-06  5.48e-02  6.53e-01  
  6  +4.9925e-01  +1.1339e+00  6.35e-01  3.44e-03  5.10e-01  3.34e-05  1.23e-02  8.93e-01  
  7  +4.9347e-01  +1.0137e+00  5.20e-01  6.28e-04  9.39e-02  1.56e-04  1.84e-03  8.51e-01  
  8  +4.9241e-01  +9.2795e-01  4.36e-01  4.12e-04  6.16e-02  1.25e-04  1.17e-03  5.64e-01  
  9  +4.8444e-01  +7.3666e-01  2.52e-01  1.49e-04  2.22e-02  5.88e-05  4.17e-04  9.90e-01  
 10  +4.8254e-01  +7.3517e-01  2.53e-01  1.28e-04  1.91e-02  6.22e-05  3.57e-04  2.31e-01  
 11  +4.7766e-01  +7.0806e-01  2.30e-01  1.22e-04  1.83e-02  4.50e-05  3.52e-04  1.72e-01  
 12  +4.7055e-01  +6.8173e-01  2.11e-01  9.83e-05  1.46e-02  4.00e-05  2.86e-04  3.18e-01  
 13  +4.4862e-01  +5.8743e-01  1.39e-01  5.54e-05  8.21e-03  1.78e-05  1.70e-04  7.19e-01  
 14  +4.2930e-01  +5.0386e-01  7.46e-02  2.88e-05  4.25e-03  8.27e-06  9.48e-05  5.22e-01  
 15  +4.2582e-01  +4.8868e-01  6.29e-02  2.37e-05  3.50e-03  7.36e-06  7.87e-05  4.32e-01  
 16  +4.1677e-01  +4.5289e-01  3.61e-02  1.33e-05  1.97e-03  4.19e-06  4.61e-05  4.51e-01  
 17  +4.1169e-01  +4.3142e-01  1.97e-02  7.13e-06  1.05e-03  2.61e-06  2.51e-05  9.90e-01  
 18  +4.0813e-01  +4.1865e-01  1.05e-02  3.80e-06  5.61e-04  1.39e-06  1.36e-05  4.94e-01  
 19  +4.0522e-01  +4.0820e-01  2.97e-03  1.07e-06  1.58e-04  3.80e-07  3.91e-06  9.90e-01  
 20  +4.0402e-01  +4.0408e-01  5.68e-05  2.05e-08  3.02e-06  7.06e-09  7.55e-08  9.88e-01  
 21  +4.0400e-01  +4.0400e-01  5.69e-07  2.05e-10  3.02e-08  7.07e-11  7.56e-10  9.90e-01  
 22  +4.0400e-01  +4.0400e-01  5.69e-09  2.05e-12  3.02e-10  7.07e-13  7.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 87.1805ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:50 PM: Optimal value: 4.040e-01
(CVXPY) Oct 06 03:58:50 PM: Compilation took 1.666e-02 seconds
(CVXPY) Oct 06 03:58:50 PM: Solver (including time spent in interface) took 9.980e-02 seconds
Iteration: 5, Objective: 0.4040
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:50 PM: Your problem has 2546 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:50 PM: Finished problem compilation (took 2.604e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2546
  constraints   = 5046
  nnz(P)        = 0
  nnz(A)        = 28776
  cones (total) = 1
    : Nonnegative = 1,  numel = 5046

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.79e-01  7.32e+01  1.00e+00  1.00e+00   ------   
  1  +5.9218e-01  +5.1561e+02  5.15e+02  3.85e-01  4.42e+01  3.91e-03  5.28e-01  6.25e-01  
  2  +5.4084e-01  +6.7345e+01  6.68e+01  1.45e-01  2.10e+01  1.17e-02  2.42e-01  8.36e-01  
  3  +5.0957e-01  +1.6387e+01  1.59e+01  1.02e-01  1.43e+01  2.87e-05  2.35e-01  1.49e-01  
  4  +5.0048e-01  +1.5215e+00  1.02e+00  9.85e-03  1.43e+00  8.51e-06  1.44e-01  7.06e-01  
  5  +5.0010e-01  +8.7915e-01  3.79e-01  3.62e-03  5.30e-01  5.24e-06  5.62e-02  6.47e-01  
  6  +4.9890e-01  +1.3191e+00  8.20e-01  3.45e-03  5.13e-01  4.40e-05  1.13e-02  9.24e-01  
  7  +4.9234e-01  +1.1332e+00  6.41e-01  6.74e-04  1.01e-01  1.64e-04  1.96e-03  8.29e-01  
  8  +4.9209e-01  +9.9893e-01  5.07e-01  4.48e-04  6.71e-02  1.11e-04  1.27e-03  5.59e-01  
  9  +4.8000e-01  +7.8935e-01  3.09e-01  1.67e-04  2.50e-02  9.51e-05  4.74e-04  7.52e-01  
 10  +4.7977e-01  +7.8637e-01  3.07e-01  1.54e-04  2.30e-02  8.75e-05  4.34e-04  2.29e-01  
 11  +4.7886e-01  +7.7232e-01  2.93e-01  1.51e-04  2.26e-02  7.31e-05  4.28e-04  1.21e-01  
 12  +4.7148e-01  +7.2500e-01  2.54e-01  1.15e-04  1.72e-02  4.96e-05  3.32e-04  4.92e-01  
 13  +4.5351e-01  +6.1174e-01  1.58e-01  6.97e-05  1.03e-02  6.90e-06  2.14e-04  9.90e-01  
 14  +4.3068e-01  +5.1420e-01  8.35e-02  3.33e-05  4.92e-03  3.70e-06  1.10e-04  5.27e-01  
 15  +4.2758e-01  +5.0084e-01  7.33e-02  2.84e-05  4.20e-03  4.88e-06  9.46e-05  3.82e-01  
 16  +4.1122e-01  +4.3515e-01  2.39e-02  8.91e-06  1.31e-03  1.96e-06  3.17e-05  7.80e-01  
 17  +4.0874e-01  +4.2456e-01  1.58e-02  5.80e-06  8.55e-04  1.98e-06  2.07e-05  9.90e-01  
 18  +4.0720e-01  +4.1913e-01  1.19e-02  4.35e-06  6.42e-04  1.49e-06  1.57e-05  2.71e-01  
 19  +4.0415e-01  +4.0826e-01  4.11e-03  1.50e-06  2.21e-04  5.15e-07  5.51e-06  9.90e-01  
 20  +4.0256e-01  +4.0270e-01  1.44e-04  5.25e-08  7.74e-06  1.73e-08  1.95e-07  9.90e-01  
 21  +4.0250e-01  +4.0250e-01  1.45e-06  5.28e-10  7.78e-08  1.74e-10  1.96e-09  9.90e-01  
 22  +4.0250e-01  +4.0250e-01  1.45e-08  5.28e-12  7.78e-10  1.74e-12  1.96e-11  9.90e-01  
 23  +4.0250e-01  +4.0250e-01  1.45e-10  5.28e-14  7.78e-12  1.74e-14  1.97e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 85.9403ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:51 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:51 PM: Optimal value: 4.025e-01
(CVXPY) Oct 06 03:58:51 PM: Compilation took 2.604e-02 seconds
(CVXPY) Oct 06 03:58:51 PM: Solver (including time spent in interface) took 8.979e-02 seconds
FULL MODEL:
  Accruacy: 0.597
  Our objective: 0.19400000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0)                       <-- (term's our objective: 0.0748)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 1)                       <-- (term's our objective: 0.0812)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.0088)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1)            <-- (term's our objective: 0.0068)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0056)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.0016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.465104341506958
Best over terms:
  Our final objective: 0.08120000000000001
    Its accruacy: 0.5406
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.08120000000000001
  Highest accruacy: 0.5406
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

