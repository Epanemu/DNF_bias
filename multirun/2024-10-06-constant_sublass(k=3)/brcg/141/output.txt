Command:
python test_script.py -s constant_subclass -d 4 -n 1000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 4.

Computed total variation: 0.228
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:20 PM: Your problem has 509 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:20 PM: Finished problem compilation (took 5.164e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 1009
  nnz(P)        = 0
  nnz(A)        = 3509
  cones (total) = 1
    : Nonnegative = 1,  numel = 1009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +5.0086e+02  5.00e+02  9.51e-01  2.66e+01  1.00e+00  1.00e+00   ------   
  1  +6.0769e-01  +9.7285e+01  9.67e+01  3.26e-01  1.46e+01  4.10e-03  4.74e-01  6.68e-01  
  2  +5.4927e-01  +1.5162e+01  1.46e+01  1.23e-01  6.67e+00  8.35e-03  2.22e-01  7.41e-01  
  3  +5.0214e-01  +1.8591e+00  1.36e+00  2.80e-02  1.46e+00  7.21e-05  2.07e-01  3.40e-01  
  4  +5.0024e-01  +7.2853e-01  2.28e-01  4.80e-03  2.58e-01  1.70e-05  4.93e-02  8.35e-01  
  5  +4.8886e-01  +1.0105e+00  5.22e-01  1.70e-03  9.39e-02  3.19e-04  4.99e-03  9.57e-01  
  6  +4.6575e-01  +5.7631e-01  1.11e-01  2.80e-04  1.53e-02  2.88e-05  8.98e-04  9.20e-01  
  7  +4.4959e-01  +5.0203e-01  5.24e-02  1.24e-04  6.78e-03  1.63e-05  4.45e-04  6.71e-01  
  8  +4.3838e-01  +4.5199e-01  1.36e-02  2.92e-05  1.59e-03  6.44e-06  1.20e-04  9.90e-01  
  9  +4.3420e-01  +4.3451e-01  3.11e-04  6.40e-07  3.48e-05  1.37e-07  2.80e-06  9.90e-01  
 10  +4.3410e-01  +4.3410e-01  3.11e-06  6.39e-09  3.48e-07  1.37e-09  2.80e-08  9.90e-01  
 11  +4.3410e-01  +4.3410e-01  3.11e-08  6.39e-11  3.48e-09  1.37e-11  2.80e-10  9.90e-01  
 12  +4.3410e-01  +4.3410e-01  3.11e-10  6.39e-13  3.48e-11  1.37e-13  2.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.9255ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:20 PM: Optimal value: 4.341e-01
(CVXPY) Oct 06 03:50:20 PM: Compilation took 5.164e-02 seconds
(CVXPY) Oct 06 03:50:20 PM: Solver (including time spent in interface) took 4.547e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:20 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:20 PM: Finished problem compilation (took 7.013e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 4566
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9980e-01  +5.0157e+02  5.01e+02  9.52e-01  2.86e+01  1.00e+00  1.01e+00   ------   
  1  +6.0612e-01  +9.8005e+01  9.74e+01  3.32e-01  1.58e+01  4.07e-03  4.85e-01  6.63e-01  
  2  +5.4767e-01  +1.4870e+01  1.43e+01  1.22e-01  7.01e+00  8.75e-03  2.23e-01  7.57e-01  
  3  +5.0184e-01  +1.8351e+00  1.33e+00  2.79e-02  1.55e+00  1.10e-04  2.05e-01  3.96e-01  
  4  +5.0041e-01  +9.2098e-01  4.21e-01  8.88e-03  5.07e-01  4.19e-05  7.67e-02  6.87e-01  
  5  +4.9457e-01  +9.8689e-01  4.92e-01  3.47e-03  2.03e-01  2.41e-04  1.06e-02  9.90e-01  
  6  +4.8005e-01  +8.0383e-01  3.24e-01  9.93e-04  5.85e-02  3.97e-04  2.94e-03  7.49e-01  
  7  +4.6834e-01  +7.0606e-01  2.38e-01  5.95e-04  3.49e-02  3.08e-04  1.78e-03  4.46e-01  
  8  +4.6530e-01  +6.5216e-01  1.87e-01  3.84e-04  2.26e-02  1.13e-04  1.13e-03  9.23e-01  
  9  +4.5168e-01  +5.7846e-01  1.27e-01  2.70e-04  1.58e-02  5.49e-05  8.38e-04  9.29e-01  
 10  +4.2613e-01  +4.7891e-01  5.28e-02  8.87e-05  5.18e-03  2.83e-05  2.85e-04  7.04e-01  
 11  +4.0735e-01  +4.0972e-01  2.37e-03  3.94e-06  2.29e-04  7.53e-07  1.37e-05  9.77e-01  
 12  +4.0621e-01  +4.0624e-01  2.39e-05  3.98e-08  2.31e-06  7.55e-09  1.40e-07  9.90e-01  
 13  +4.0620e-01  +4.0620e-01  2.39e-07  3.98e-10  2.31e-08  7.55e-11  1.40e-09  9.90e-01  
 14  +4.0620e-01  +4.0620e-01  2.39e-09  3.98e-12  2.31e-10  7.55e-13  1.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.3633ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:20 PM: Optimal value: 4.062e-01
(CVXPY) Oct 06 03:50:20 PM: Compilation took 7.013e-03 seconds
(CVXPY) Oct 06 03:50:20 PM: Solver (including time spent in interface) took 1.493e-02 seconds
Iteration: 2, Objective: 0.4062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:20 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:20 PM: Finished problem compilation (took 7.751e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 4764
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0118e+02  5.01e+02  9.53e-01  2.87e+01  1.00e+00  1.03e+00   ------   
  1  +6.0214e-01  +9.8585e+01  9.80e+01  3.44e-01  1.60e+01  3.99e-03  5.07e-01  6.57e-01  
  2  +5.4670e-01  +1.4763e+01  1.42e+01  1.23e-01  6.98e+00  9.28e-03  2.28e-01  7.76e-01  
  3  +5.0244e-01  +2.0513e+00  1.55e+00  3.29e-02  1.79e+00  2.35e-04  2.09e-01  3.79e-01  
  4  +5.0042e-01  +9.2482e-01  4.24e-01  9.13e-03  5.15e-01  8.16e-05  7.27e-02  6.68e-01  
  5  +4.8909e-01  +1.1026e+00  6.13e-01  2.73e-03  1.59e-01  8.08e-04  7.84e-03  9.59e-01  
  6  +4.8149e-01  +1.0369e+00  5.55e-01  1.79e-03  1.04e-01  9.39e-04  5.15e-03  3.59e-01  
  7  +4.8199e-01  +9.6727e-01  4.85e-01  1.76e-03  1.02e-01  6.38e-04  5.11e-03  9.42e-02  
  8  +4.7530e-01  +9.1393e-01  4.39e-01  1.32e-03  7.65e-02  6.25e-04  3.87e-03  2.86e-01  
  9  +4.7663e-01  +9.0453e-01  4.28e-01  1.31e-03  7.60e-02  5.54e-04  3.82e-03  9.52e-02  
 10  +4.6335e-01  +8.1497e-01  3.52e-01  8.48e-04  4.92e-02  5.11e-04  2.55e-03  3.64e-01  
 11  +4.4414e-01  +6.3443e-01  1.90e-01  4.06e-04  2.35e-02  8.14e-05  1.28e-03  8.73e-01  
 12  +4.2643e-01  +5.5254e-01  1.26e-01  2.55e-04  1.47e-02  5.19e-05  8.52e-04  3.96e-01  
 13  +3.9286e-01  +4.0554e-01  1.27e-02  2.39e-05  1.37e-03  2.59e-06  9.07e-05  9.70e-01  
 14  +3.8748e-01  +3.8765e-01  1.75e-04  3.29e-07  1.88e-05  3.54e-08  1.31e-06  9.87e-01  
 15  +3.8740e-01  +3.8740e-01  1.75e-06  3.29e-09  1.88e-07  3.54e-10  1.31e-08  9.90e-01  
 16  +3.8740e-01  +3.8740e-01  1.75e-08  3.29e-11  1.88e-09  3.54e-12  1.31e-10  9.90e-01  
 17  +3.8740e-01  +3.8740e-01  1.75e-10  3.29e-13  1.88e-11  3.54e-14  1.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4533ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:20 PM: Optimal value: 3.874e-01
(CVXPY) Oct 06 03:50:20 PM: Compilation took 7.751e-03 seconds
(CVXPY) Oct 06 03:50:20 PM: Solver (including time spent in interface) took 9.797e-03 seconds
Iteration: 3, Objective: 0.3874
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:21 PM: Your problem has 524 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:21 PM: Finished problem compilation (took 1.001e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 524
  constraints   = 1024
  nnz(P)        = 0
  nnz(A)        = 4801
  cones (total) = 1
    : Nonnegative = 1,  numel = 1024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9950e-01  +5.0121e+02  5.01e+02  9.53e-01  2.87e+01  1.00e+00  1.03e+00   ------   
  1  +6.0101e-01  +9.8699e+01  9.81e+01  3.46e-01  1.61e+01  3.98e-03  5.11e-01  6.55e-01  
  2  +5.4643e-01  +1.4720e+01  1.42e+01  1.23e-01  6.95e+00  9.37e-03  2.28e-01  7.80e-01  
  3  +5.0203e-01  +1.9482e+00  1.45e+00  3.08e-02  1.68e+00  1.65e-04  2.07e-01  4.19e-01  
  4  +5.0032e-01  +9.8697e-01  4.87e-01  1.04e-02  5.85e-01  7.23e-05  7.82e-02  6.39e-01  
  5  +4.8858e-01  +2.1801e+00  1.69e+00  6.50e-03  3.78e-01  7.84e-04  1.86e-02  9.90e-01  
  6  +4.7643e-01  +1.1321e+00  6.56e-01  1.87e-03  1.09e-01  3.47e-04  5.46e-03  8.03e-01  
  7  +4.7013e-01  +1.0227e+00  5.53e-01  1.28e-03  7.46e-02  3.26e-04  3.70e-03  5.09e-01  
  8  +4.5676e-01  +8.1040e-01  3.54e-01  7.83e-04  4.54e-02  1.81e-04  2.36e-03  6.36e-01  
  9  +4.4053e-01  +6.9344e-01  2.53e-01  5.39e-04  3.11e-02  1.21e-04  1.71e-03  3.23e-01  
 10  +4.1663e-01  +5.3840e-01  1.22e-01  2.49e-04  1.43e-02  5.36e-05  8.68e-04  6.02e-01  
 11  +3.9377e-01  +4.1455e-01  2.08e-02  4.17e-05  2.38e-03  9.99e-06  1.64e-04  9.90e-01  
 12  +3.8690e-01  +3.8796e-01  1.06e-03  2.13e-06  1.22e-04  4.21e-07  8.97e-06  9.49e-01  
 13  +3.8650e-01  +3.8652e-01  1.14e-05  2.28e-08  1.30e-06  4.38e-09  9.73e-08  9.90e-01  
 14  +3.8650e-01  +3.8650e-01  1.14e-07  2.28e-10  1.30e-08  4.38e-11  9.73e-10  9.90e-01  
 15  +3.8650e-01  +3.8650e-01  1.14e-09  2.28e-12  1.30e-10  4.38e-13  9.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:21 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:21 PM: Optimal value: 3.865e-01
(CVXPY) Oct 06 03:50:21 PM: Compilation took 1.001e-02 seconds
(CVXPY) Oct 06 03:50:21 PM: Solver (including time spent in interface) took 9.665e-03 seconds
Iteration: 4, Objective: 0.3865
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:21 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:21 PM: Finished problem compilation (took 9.288e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 4837
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0116e+02  5.01e+02  9.53e-01  2.87e+01  1.00e+00  1.03e+00   ------   
  1  +5.9947e-01  +9.9246e+01  9.86e+01  3.49e-01  1.62e+01  3.97e-03  5.12e-01  6.52e-01  
  2  +5.4573e-01  +1.4606e+01  1.41e+01  1.22e-01  6.97e+00  9.61e-03  2.27e-01  7.89e-01  
  3  +5.0303e-01  +2.2400e+00  1.74e+00  3.66e-02  2.00e+00  2.87e-04  2.09e-01  3.60e-01  
  4  +5.0053e-01  +9.7152e-01  4.71e-01  1.01e-02  5.72e-01  1.02e-04  7.51e-02  6.62e-01  
  5  +4.9469e-01  +1.3375e+00  8.43e-01  5.97e-03  3.48e-01  6.20e-04  1.78e-02  8.68e-01  
  6  +4.8001e-01  +1.0680e+00  5.88e-01  1.88e-03  1.10e-01  9.72e-04  5.48e-03  7.18e-01  
  7  +4.7566e-01  +1.0025e+00  5.27e-01  1.46e-03  8.54e-02  8.31e-04  4.24e-03  3.48e-01  
  8  +4.7626e-01  +9.3708e-01  4.61e-01  1.38e-03  8.05e-02  4.81e-04  4.05e-03  2.90e-01  
  9  +4.5553e-01  +7.5640e-01  3.01e-01  7.16e-04  4.16e-02  3.00e-04  2.19e-03  5.58e-01  
 10  +4.4052e-01  +6.5982e-01  2.19e-01  4.88e-04  2.83e-02  1.86e-04  1.56e-03  4.09e-01  
 11  +4.2825e-01  +5.9319e-01  1.65e-01  3.50e-04  2.02e-02  1.34e-04  1.17e-03  2.90e-01  
 12  +4.0734e-01  +4.7282e-01  6.55e-02  1.34e-04  7.70e-03  2.95e-05  4.89e-04  9.90e-01  
 13  +3.8827e-01  +3.9313e-01  4.86e-03  9.74e-06  5.58e-04  1.22e-06  3.97e-05  9.44e-01  
 14  +3.8654e-01  +3.8665e-01  1.08e-04  2.16e-07  1.24e-05  2.68e-08  9.14e-07  9.80e-01  
 15  +3.8650e-01  +3.8650e-01  1.08e-06  2.16e-09  1.24e-07  2.68e-10  9.16e-09  9.90e-01  
 16  +3.8650e-01  +3.8650e-01  1.08e-08  2.16e-11  1.24e-09  2.68e-12  9.16e-11  9.90e-01  
 17  +3.8650e-01  +3.8650e-01  1.08e-10  2.16e-13  1.24e-11  2.68e-14  9.17e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8189ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:21 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:21 PM: Optimal value: 3.865e-01
(CVXPY) Oct 06 03:50:21 PM: Compilation took 9.288e-03 seconds
(CVXPY) Oct 06 03:50:21 PM: Solver (including time spent in interface) took 1.386e-02 seconds
FULL MODEL:
  Accruacy: 0.613
  Our objective: 0.22600000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.092)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.088)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.6751372814178467
Best over terms:
  Our final objective: 0.09199999999999998
    Its accruacy: 0.546
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.088
  Highest accruacy: 0.546
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

