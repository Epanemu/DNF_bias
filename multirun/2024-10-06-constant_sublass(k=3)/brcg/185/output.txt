Command:
python test_script.py -s constant_subclass -d 5 -n 5000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1372
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.14200000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:27 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:27 PM: Finished problem compilation (took 5.654e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5007e+03  2.50e+03  9.78e-01  6.52e+01  1.00e+00  1.00e+00   ------   
  1  +5.9955e-01  +5.0122e+02  5.01e+02  3.62e-01  3.81e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4611e-01  +7.1613e+01  7.11e+01  1.41e-01  1.85e+01  9.86e-03  2.35e-01  7.80e-01  
  3  +5.1028e-01  +1.6645e+01  1.61e+01  1.01e-01  1.28e+01  2.28e-05  2.31e-01  9.84e-02  
  4  +5.0008e-01  +9.5569e-01  4.56e-01  4.35e-03  5.68e-01  6.72e-06  1.25e-01  9.81e-01  
  5  +4.9997e-01  +6.0837e-01  1.08e-01  1.03e-03  1.35e-01  2.84e-06  2.50e-02  8.40e-01  
  6  +4.9508e-01  +8.3087e-01  3.36e-01  5.08e-04  6.73e-02  1.20e-04  1.61e-03  9.72e-01  
  7  +4.8419e-01  +6.6281e-01  1.79e-01  1.09e-04  1.44e-02  2.02e-04  3.42e-04  7.96e-01  
  8  +4.7168e-01  +5.0788e-01  3.62e-02  1.87e-05  2.46e-03  1.45e-05  6.23e-05  8.96e-01  
  9  +4.6579e-01  +4.7576e-01  9.97e-03  4.74e-06  6.26e-04  2.16e-06  1.69e-05  8.66e-01  
 10  +4.6280e-01  +4.6363e-01  8.36e-04  3.49e-07  4.61e-05  1.39e-07  1.43e-06  9.43e-01  
 11  +4.6250e-01  +4.6251e-01  8.80e-06  3.60e-09  4.75e-07  1.45e-09  1.51e-08  9.90e-01  
 12  +4.6250e-01  +4.6250e-01  8.80e-08  3.60e-11  4.75e-09  1.45e-11  1.51e-10  9.90e-01  
 13  +4.6250e-01  +4.6250e-01  8.81e-10  3.60e-13  4.75e-11  1.55e-13  1.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.5822ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:27 PM: Optimal value: 4.625e-01
(CVXPY) Oct 06 03:54:27 PM: Compilation took 5.654e-02 seconds
(CVXPY) Oct 06 03:54:27 PM: Solver (including time spent in interface) took 4.064e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:27 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:27 PM: Finished problem compilation (took 1.147e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24617
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.79e-01  6.88e+01  1.00e+00  1.00e+00   ------   
  1  +5.9933e-01  +5.0170e+02  5.01e+02  3.63e-01  4.01e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4570e-01  +7.1214e+01  7.07e+01  1.41e-01  1.94e+01  9.94e-03  2.35e-01  7.83e-01  
  3  +5.1005e-01  +1.6415e+01  1.59e+01  1.00e-01  1.34e+01  2.28e-05  2.31e-01  1.04e-01  
  4  +5.0057e-01  +1.7607e+00  1.26e+00  1.20e-02  1.64e+00  8.04e-06  1.73e-01  5.12e-01  
  5  +5.0005e-01  +6.8706e-01  1.87e-01  1.78e-03  2.46e-01  1.93e-06  4.30e-02  8.05e-01  
  6  +4.9998e-01  +7.3452e-01  2.35e-01  2.18e-03  3.01e-01  3.84e-06  2.28e-02  6.04e-01  
  7  +4.9742e-01  +6.8068e-01  1.83e-01  3.72e-04  5.21e-02  4.94e-05  1.11e-03  9.63e-01  
  8  +4.9525e-01  +6.6829e-01  1.73e-01  2.11e-04  2.96e-02  7.21e-05  6.09e-04  5.26e-01  
  9  +4.9191e-01  +6.4269e-01  1.51e-01  1.03e-04  1.44e-02  5.18e-05  2.90e-04  9.90e-01  
 10  +4.8927e-01  +6.3371e-01  1.44e-01  7.86e-05  1.10e-02  5.49e-05  2.21e-04  3.23e-01  
 11  +4.8823e-01  +6.2941e-01  1.41e-01  7.16e-05  1.00e-02  4.65e-05  2.01e-04  2.78e-01  
 12  +4.8042e-01  +6.0141e-01  1.21e-01  5.36e-05  7.49e-03  2.81e-05  1.53e-04  5.69e-01  
 13  +4.6031e-01  +5.2898e-01  6.87e-02  2.34e-05  3.26e-03  1.54e-05  6.90e-05  6.68e-01  
 14  +4.3979e-01  +4.5865e-01  1.89e-02  6.04e-06  8.40e-04  3.01e-06  1.88e-05  7.71e-01  
 15  +4.3173e-01  +4.3221e-01  4.78e-04  1.49e-07  2.07e-05  5.60e-08  4.74e-07  9.90e-01  
 16  +4.3150e-01  +4.3151e-01  4.78e-06  1.49e-09  2.07e-07  5.60e-10  4.75e-09  9.90e-01  
 17  +4.3150e-01  +4.3150e-01  4.78e-08  1.49e-11  2.07e-09  5.62e-12  4.75e-11  9.90e-01  
 18  +4.3150e-01  +4.3150e-01  4.78e-10  1.49e-13  2.07e-11  5.63e-14  4.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.1128ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:27 PM: Optimal value: 4.315e-01
(CVXPY) Oct 06 03:54:27 PM: Compilation took 1.147e-02 seconds
(CVXPY) Oct 06 03:54:27 PM: Solver (including time spent in interface) took 6.865e-02 seconds
Iteration: 2, Objective: 0.4315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:27 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:27 PM: Finished problem compilation (took 1.654e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 24879
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.79e-01  6.89e+01  1.00e+00  1.00e+00   ------   
  1  +5.9938e-01  +5.0166e+02  5.01e+02  3.63e-01  4.01e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4570e-01  +7.1219e+01  7.07e+01  1.41e-01  1.94e+01  9.94e-03  2.35e-01  7.83e-01  
  3  +5.1004e-01  +1.6400e+01  1.59e+01  1.00e-01  1.34e+01  2.28e-05  2.31e-01  1.05e-01  
  4  +5.0059e-01  +1.7842e+00  1.28e+00  1.23e-02  1.67e+00  8.07e-06  1.74e-01  5.04e-01  
  5  +5.0006e-01  +7.2733e-01  2.27e-01  2.16e-03  2.98e-01  2.18e-06  5.10e-02  7.69e-01  
  6  +5.0002e-01  +7.4031e-01  2.40e-01  2.27e-03  3.13e-01  3.14e-06  3.18e-02  4.55e-01  
  7  +4.9922e-01  +7.6990e-01  2.71e-01  1.24e-03  1.72e-01  1.84e-05  4.18e-03  9.90e-01  
  8  +4.9688e-01  +7.0864e-01  2.12e-01  3.04e-04  4.26e-02  5.29e-05  8.72e-04  9.19e-01  
  9  +4.9330e-01  +6.8541e-01  1.92e-01  1.53e-04  2.15e-02  8.26e-05  4.32e-04  5.62e-01  
 10  +4.9069e-01  +6.6055e-01  1.70e-01  1.03e-04  1.44e-02  5.84e-05  2.88e-04  6.67e-01  
 11  +4.8549e-01  +6.2583e-01  1.40e-01  6.86e-05  9.59e-03  1.38e-05  1.94e-04  9.90e-01  
 12  +4.8409e-01  +6.2115e-01  1.37e-01  6.65e-05  9.29e-03  1.34e-05  1.89e-04  1.27e-01  
 13  +4.6934e-01  +5.6628e-01  9.69e-02  3.70e-05  5.16e-03  1.08e-05  1.08e-04  5.11e-01  
 14  +4.6798e-01  +5.6144e-01  9.35e-02  3.54e-05  4.94e-03  1.04e-05  1.04e-04  9.56e-02  
 15  +4.5181e-01  +5.0389e-01  5.21e-02  1.83e-05  2.55e-03  5.39e-06  5.64e-05  5.67e-01  
 16  +4.3370e-01  +4.4161e-01  7.92e-03  2.57e-06  3.58e-04  9.27e-07  8.31e-06  9.90e-01  
 17  +4.3356e-01  +4.4126e-01  7.70e-03  2.47e-06  3.43e-04  9.25e-07  7.93e-06  8.24e-02  
 18  +4.3241e-01  +4.3755e-01  5.14e-03  1.65e-06  2.29e-04  8.01e-07  5.33e-06  9.90e-01  
 19  +4.3066e-01  +4.3209e-01  1.43e-03  4.56e-07  6.33e-05  2.23e-07  1.48e-06  7.52e-01  
 20  +4.3001e-01  +4.3002e-01  1.44e-05  4.58e-09  6.37e-07  2.24e-09  1.50e-08  9.90e-01  
 21  +4.3000e-01  +4.3000e-01  1.44e-07  4.58e-11  6.37e-09  2.24e-11  1.50e-10  9.90e-01  
 22  +4.3000e-01  +4.3000e-01  1.44e-09  4.59e-13  6.38e-11  2.24e-13  1.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 64.527ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:27 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:27 PM: Optimal value: 4.300e-01
(CVXPY) Oct 06 03:54:27 PM: Compilation took 1.654e-02 seconds
(CVXPY) Oct 06 03:54:27 PM: Solver (including time spent in interface) took 7.496e-02 seconds
FULL MODEL:
  Accruacy: 0.5702
  Our objective: 0.14039999999999997

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.1372)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.0032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.168994426727295
Best over terms:
  Our final objective: 0.13719999999999996
    Its accruacy: 0.5686
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.13719999999999996
  Highest accruacy: 0.5686
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

