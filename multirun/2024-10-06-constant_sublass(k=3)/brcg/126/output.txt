Command:
python test_script.py -s constant_subclass -d 4 -n 50 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.6000000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:01 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:01 PM: Finished problem compilation (took 4.770e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9119e-01  +2.5960e+01  2.55e+01  8.14e-01  5.44e+00  1.00e+00  1.08e+00   ------   
  1  +5.9564e-01  +5.2787e+00  4.68e+00  2.82e-01  2.78e+00  4.05e-03  5.09e-01  6.71e-01  
  2  +5.1354e-01  +1.0085e+00  4.95e-01  5.08e-02  5.79e-01  1.06e-02  1.42e-01  9.47e-01  
  3  +4.8224e-01  +8.6890e-01  3.87e-01  2.22e-02  2.63e-01  1.18e-02  6.91e-02  5.99e-01  
  4  +4.3636e-01  +5.6459e-01  1.28e-01  6.21e-03  7.32e-02  2.95e-03  2.31e-02  7.09e-01  
  5  +4.0516e-01  +4.1916e-01  1.40e-02  5.83e-04  6.85e-03  2.66e-04  2.87e-03  9.36e-01  
  6  +4.0017e-01  +4.0037e-01  1.95e-04  8.10e-06  9.50e-05  2.80e-06  4.14e-05  9.90e-01  
  7  +4.0010e-01  +4.0010e-01  1.95e-06  8.09e-08  9.49e-07  2.80e-08  4.14e-07  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  1.95e-08  8.09e-10  9.49e-09  2.80e-10  4.14e-09  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  1.95e-10  8.09e-12  9.49e-11  2.80e-12  4.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 413.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:01 PM: Optimal value: 4.001e-01
(CVXPY) Oct 06 03:49:01 PM: Compilation took 4.770e-02 seconds
(CVXPY) Oct 06 03:49:01 PM: Solver (including time spent in interface) took 1.008e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:02 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:02 PM: Finished problem compilation (took 5.092e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 258
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7363e-01  +2.6456e+01  2.60e+01  8.31e-01  5.76e+00  1.00e+00  1.12e+00   ------   
  1  +5.2514e-01  +5.3557e+00  4.83e+00  3.01e-01  2.87e+00  4.03e-03  5.37e-01  6.64e-01  
  2  +4.2997e-01  +1.3735e+00  9.44e-01  6.74e-02  7.97e-01  1.26e-02  1.78e-01  8.23e-01  
  3  +3.0226e-01  +7.6127e-01  4.59e-01  2.15e-02  2.58e-01  7.48e-03  6.60e-02  7.25e-01  
  4  +2.3379e-01  +3.5587e-01  1.22e-01  5.65e-03  6.67e-02  1.71e-03  2.04e-02  7.92e-01  
  5  +2.0470e-01  +2.2050e-01  1.58e-02  7.13e-04  8.39e-03  1.71e-04  2.92e-03  8.89e-01  
  6  +2.0044e-01  +2.0086e-01  4.12e-04  1.89e-05  2.21e-04  3.21e-06  8.02e-05  9.75e-01  
  7  +2.0031e-01  +2.0033e-01  2.34e-05  1.10e-06  1.26e-05  1.12e-07  5.35e-06  9.53e-01  
  8  +2.0030e-01  +2.0030e-01  2.42e-07  1.14e-08  1.30e-07  1.17e-09  5.67e-08  9.90e-01  
  9  +2.0030e-01  +2.0030e-01  2.43e-09  1.14e-10  1.31e-09  1.17e-11  5.68e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 452.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:02 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:02 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 03:49:02 PM: Compilation took 5.092e-03 seconds
(CVXPY) Oct 06 03:49:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:02 PM: Your problem has 45 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:02 PM: Finished problem compilation (took 4.739e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 45
  constraints   = 70
  nnz(P)        = 0
  nnz(A)        = 262
  cones (total) = 1
    : Nonnegative = 1,  numel = 70

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7300e-01  +2.6424e+01  2.60e+01  8.33e-01  5.74e+00  1.00e+00  1.12e+00   ------   
  1  +5.2114e-01  +5.3707e+00  4.85e+00  3.04e-01  2.86e+00  4.02e-03  5.41e-01  6.61e-01  
  2  +4.2532e-01  +1.3764e+00  9.51e-01  6.84e-02  8.01e-01  1.29e-02  1.81e-01  8.23e-01  
  3  +3.0863e-01  +8.3013e-01  5.21e-01  2.50e-02  2.99e-01  8.37e-03  7.61e-02  6.90e-01  
  4  +2.3066e-01  +3.4113e-01  1.10e-01  5.15e-03  6.05e-02  1.38e-03  1.86e-02  8.15e-01  
  5  +2.0347e-01  +2.1328e-01  9.81e-03  4.67e-04  5.42e-03  8.92e-05  1.89e-03  9.76e-01  
  6  +2.0065e-01  +2.0154e-01  8.99e-04  4.31e-05  4.97e-04  7.29e-06  1.79e-04  9.06e-01  
  7  +2.0040e-01  +2.0066e-01  2.62e-04  1.24e-05  1.41e-04  2.04e-06  5.72e-05  7.61e-01  
  8  +2.0030e-01  +2.0031e-01  8.51e-06  4.05e-07  4.59e-06  4.04e-08  2.01e-06  9.66e-01  
  9  +2.0030e-01  +2.0030e-01  8.50e-08  4.05e-09  4.59e-08  4.04e-10  2.03e-08  9.90e-01  
 10  +2.0030e-01  +2.0030e-01  8.51e-10  4.05e-11  4.59e-10  4.04e-12  2.03e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 428.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:02 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:02 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 03:49:02 PM: Compilation took 4.739e-03 seconds
(CVXPY) Oct 06 03:49:02 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6

IF 
    (x0 = 0 AND x3 = 0)                       <-- (term's our objective: 0.36)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.16)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0)            <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.429662704467773
Best over terms:
  Our final objective: 0.35999999999999993
    Its accruacy: 0.68
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.35999999999999993
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

