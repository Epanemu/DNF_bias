Command:
python test_script.py -s constant_subclass -d 7 -n 5000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.152
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.1996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:51 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:51 PM: Finished problem compilation (took 5.977e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.8810e-01  +5.2570e+02  5.25e+02  4.01e-01  4.61e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3798e-01  +6.5506e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.67e-01  
  3  +5.0941e-01  +1.6530e+01  1.60e+01  1.04e-01  1.49e+01  3.37e-05  2.44e-01  1.78e-01  
  4  +5.0033e-01  +1.0684e+00  5.68e-01  5.48e-03  8.10e-01  7.00e-06  1.09e-01  9.90e-01  
  5  +5.0003e-01  +6.6942e-01  1.69e-01  1.61e-03  2.39e-01  5.98e-06  2.50e-02  8.40e-01  
  6  +4.9704e-01  +8.6675e-01  3.70e-01  5.36e-04  8.08e-02  1.80e-04  1.61e-03  9.64e-01  
  7  +4.8813e-01  +7.5479e-01  2.67e-01  1.51e-04  2.27e-02  3.70e-04  4.48e-04  7.39e-01  
  8  +4.7568e-01  +6.1082e-01  1.35e-01  7.65e-05  1.15e-02  4.71e-05  2.46e-04  6.61e-01  
  9  +4.5867e-01  +5.0090e-01  4.22e-02  2.03e-05  3.04e-03  4.95e-07  7.33e-05  9.44e-01  
 10  +4.4645e-01  +4.4974e-01  3.29e-03  1.38e-06  2.06e-04  8.27e-08  5.76e-06  9.39e-01  
 11  +4.4532e-01  +4.4536e-01  4.49e-05  1.86e-08  2.77e-06  1.91e-09  7.89e-08  9.90e-01  
 12  +4.4530e-01  +4.4530e-01  4.49e-07  1.85e-10  2.77e-08  1.91e-11  7.89e-10  9.90e-01  
 13  +4.4530e-01  +4.4530e-01  4.49e-09  1.85e-12  2.77e-10  1.92e-13  7.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 49.6579ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:51 PM: Optimal value: 4.453e-01
(CVXPY) Oct 06 04:03:51 PM: Compilation took 5.977e-02 seconds
(CVXPY) Oct 06 04:03:51 PM: Solver (including time spent in interface) took 6.033e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:51 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:51 PM: Finished problem compilation (took 1.967e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 29410
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5010e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8798e-01  +5.2589e+02  5.25e+02  4.01e-01  4.80e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3769e-01  +6.5229e+01  6.47e+01  1.52e-01  2.31e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0927e-01  +1.6383e+01  1.59e+01  1.04e-01  1.54e+01  3.37e-05  2.44e-01  1.85e-01  
  4  +5.0033e-01  +1.0838e+00  5.83e-01  5.65e-03  8.69e-01  7.33e-06  1.06e-01  9.90e-01  
  5  +5.0011e-01  +7.7651e-01  2.76e-01  2.65e-03  4.09e-01  5.56e-06  4.44e-02  6.09e-01  
  6  +5.0002e-01  +7.9019e-01  2.90e-01  2.61e-03  4.04e-01  1.11e-05  1.84e-02  6.58e-01  
  7  +4.9744e-01  +7.5545e-01  2.58e-01  3.96e-04  6.23e-02  1.34e-04  1.14e-03  9.42e-01  
  8  +4.9311e-01  +7.1842e-01  2.25e-01  1.77e-04  2.78e-02  2.26e-04  4.99e-04  6.05e-01  
  9  +4.9343e-01  +7.1784e-01  2.24e-01  1.75e-04  2.76e-02  2.07e-04  4.92e-04  9.35e-02  
 10  +4.8839e-01  +6.8580e-01  1.97e-01  1.10e-04  1.73e-02  2.16e-04  3.08e-04  4.75e-01  
 11  +4.8376e-01  +6.5728e-01  1.74e-01  8.40e-05  1.32e-02  1.52e-04  2.36e-04  4.38e-01  
 12  +4.8073e-01  +6.4269e-01  1.62e-01  7.49e-05  1.17e-02  1.34e-04  2.11e-04  1.64e-01  
 13  +4.7184e-01  +6.0265e-01  1.31e-01  5.38e-05  8.42e-03  9.71e-05  1.54e-04  3.64e-01  
 14  +4.6122e-01  +5.5555e-01  9.43e-02  3.56e-05  5.56e-03  1.02e-06  1.06e-04  9.32e-01  
 15  +4.5758e-01  +5.4161e-01  8.40e-02  3.06e-05  4.79e-03  1.41e-06  9.18e-05  1.74e-01  
 16  +4.5133e-01  +5.1482e-01  6.35e-02  2.21e-05  3.45e-03  9.12e-06  6.62e-05  9.90e-01  
 17  +4.3680e-01  +4.6682e-01  3.00e-02  9.73e-06  1.52e-03  4.11e-06  3.01e-05  5.99e-01  
 18  +4.2469e-01  +4.2599e-01  1.30e-03  4.08e-07  6.35e-05  1.27e-07  1.31e-06  9.70e-01  
 19  +4.2411e-01  +4.2412e-01  1.46e-05  4.60e-09  7.16e-07  1.46e-09  1.48e-08  9.89e-01  
 20  +4.2410e-01  +4.2410e-01  1.46e-07  4.60e-11  7.16e-09  1.46e-11  1.48e-10  9.90e-01  
 21  +4.2410e-01  +4.2410e-01  1.46e-09  4.60e-13  7.16e-11  1.47e-13  1.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.5817ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:51 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 04:03:51 PM: Compilation took 1.967e-02 seconds
(CVXPY) Oct 06 04:03:51 PM: Solver (including time spent in interface) took 8.998e-02 seconds
Iteration: 2, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:51 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:51 PM: Finished problem compilation (took 1.929e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 30115
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8777e-01  +5.2600e+02  5.25e+02  4.02e-01  4.80e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3749e-01  +6.5022e+01  6.45e+01  1.52e-01  2.30e+01  1.32e-02  2.53e-01  8.72e-01  
  3  +5.0921e-01  +1.6318e+01  1.58e+01  1.03e-01  1.53e+01  3.38e-05  2.43e-01  1.89e-01  
  4  +5.0055e-01  +1.4743e+00  9.74e-01  9.42e-03  1.44e+00  8.11e-06  1.36e-01  7.62e-01  
  5  +5.0014e-01  +8.7038e-01  3.70e-01  3.53e-03  5.45e-01  5.52e-06  5.89e-02  6.58e-01  
  6  +5.0008e-01  +8.8613e-01  3.86e-01  3.60e-03  5.56e-01  8.23e-06  3.42e-02  4.95e-01  
  7  +4.9810e-01  +7.7420e-01  2.76e-01  6.93e-04  1.09e-01  7.19e-05  2.08e-03  9.61e-01  
  8  +4.9202e-01  +7.2425e-01  2.32e-01  2.02e-04  3.18e-02  1.94e-04  5.75e-04  7.31e-01  
  9  +4.8723e-01  +6.9199e-01  2.05e-01  1.40e-04  2.20e-02  1.60e-04  3.99e-04  4.78e-01  
 10  +4.8744e-01  +6.9342e-01  2.06e-01  1.40e-04  2.20e-02  1.60e-04  3.98e-04  1.30e-02  
 11  +4.8660e-01  +6.9197e-01  2.05e-01  1.24e-04  1.94e-02  1.41e-04  3.48e-04  3.12e-01  
 12  +4.8535e-01  +6.8365e-01  1.98e-01  1.05e-04  1.66e-02  6.03e-05  2.94e-04  6.72e-01  
 13  +4.8467e-01  +6.8066e-01  1.96e-01  1.03e-04  1.62e-02  5.74e-05  2.87e-04  7.25e-02  
 14  +4.6984e-01  +6.1735e-01  1.48e-01  5.90e-05  9.24e-03  2.86e-05  1.69e-04  7.87e-01  
 15  +4.6421e-01  +5.9519e-01  1.31e-01  4.98e-05  7.80e-03  2.48e-05  1.44e-04  1.95e-01  
 16  +4.5622e-01  +5.5974e-01  1.04e-01  4.01e-05  6.27e-03  9.71e-06  1.21e-04  9.90e-01  
 17  +4.3308e-01  +4.7087e-01  3.78e-02  1.31e-05  2.03e-03  3.43e-06  4.13e-05  7.13e-01  
 18  +4.2507e-01  +4.4369e-01  1.86e-02  6.23e-06  9.70e-04  1.78e-06  2.02e-05  5.81e-01  
 19  +4.2058e-01  +4.2831e-01  7.73e-03  2.52e-06  3.93e-04  1.15e-06  8.29e-06  9.90e-01  
 20  +4.1768e-01  +4.1895e-01  1.27e-03  4.16e-07  6.47e-05  1.90e-07  1.38e-06  8.85e-01  
 21  +4.1711e-01  +4.1712e-01  1.29e-05  4.21e-09  6.56e-07  1.92e-09  1.41e-08  9.90e-01  
 22  +4.1710e-01  +4.1710e-01  1.29e-07  4.21e-11  6.56e-09  1.92e-11  1.41e-10  9.90e-01  
 23  +4.1710e-01  +4.1710e-01  1.29e-09  4.22e-13  6.56e-11  1.92e-13  1.41e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 97.5221ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:51 PM: Optimal value: 4.171e-01
(CVXPY) Oct 06 04:03:51 PM: Compilation took 1.929e-02 seconds
(CVXPY) Oct 06 04:03:51 PM: Solver (including time spent in interface) took 1.061e-01 seconds
Iteration: 3, Objective: 0.4171
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:51 PM: Your problem has 2540 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:51 PM: Finished problem compilation (took 2.016e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2540
  constraints   = 5040
  nnz(P)        = 0
  nnz(A)        = 30418
  cones (total) = 1
    : Nonnegative = 1,  numel = 5040

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8756e-01  +5.2622e+02  5.26e+02  4.02e-01  4.80e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3734e-01  +6.4892e+01  6.44e+01  1.51e-01  2.29e+01  1.33e-02  2.53e-01  8.74e-01  
  3  +5.0918e-01  +1.6293e+01  1.58e+01  1.03e-01  1.53e+01  3.40e-05  2.43e-01  1.91e-01  
  4  +5.0050e-01  +1.3915e+00  8.91e-01  8.63e-03  1.32e+00  8.00e-06  1.29e-01  8.06e-01  
  5  +5.0013e-01  +8.5479e-01  3.55e-01  3.39e-03  5.23e-01  5.87e-06  5.23e-02  6.60e-01  
  6  +5.0004e-01  +8.6737e-01  3.67e-01  3.40e-03  5.25e-01  9.41e-06  2.91e-02  4.88e-01  
  7  +4.9557e-01  +8.1619e-01  3.21e-01  3.99e-04  6.28e-02  1.67e-04  1.14e-03  9.78e-01  
  8  +4.8775e-01  +7.4900e-01  2.61e-01  1.76e-04  2.77e-02  2.43e-04  5.02e-04  5.97e-01  
  9  +4.8322e-01  +7.2196e-01  2.39e-01  1.36e-04  2.14e-02  2.18e-04  3.89e-04  3.27e-01  
 10  +4.7506e-01  +6.7189e-01  1.97e-01  9.23e-05  1.45e-02  1.39e-04  2.67e-04  5.25e-01  
 11  +4.7316e-01  +6.6035e-01  1.87e-01  9.07e-05  1.42e-02  1.17e-04  2.64e-04  7.56e-02  
 12  +4.6031e-01  +5.9999e-01  1.40e-01  5.75e-05  8.99e-03  6.96e-05  1.71e-04  5.22e-01  
 13  +4.5528e-01  +5.7745e-01  1.22e-01  4.72e-05  7.38e-03  4.90e-05  1.41e-04  3.73e-01  
 14  +4.4924e-01  +5.4483e-01  9.56e-02  3.76e-05  5.86e-03  4.91e-06  1.20e-04  9.44e-01  
 15  +4.3422e-01  +4.8332e-01  4.91e-02  1.84e-05  2.86e-03  4.14e-06  6.00e-05  7.29e-01  
 16  +4.2461e-01  +4.5350e-01  2.89e-02  9.93e-06  1.55e-03  2.83e-06  3.27e-05  5.61e-01  
 17  +4.1967e-01  +4.3521e-01  1.55e-02  5.27e-06  8.20e-04  1.72e-06  1.77e-05  6.12e-01  
 18  +4.1405e-01  +4.1535e-01  1.30e-03  4.39e-07  6.83e-05  1.58e-07  1.51e-06  9.49e-01  
 19  +4.1351e-01  +4.1352e-01  1.35e-05  4.56e-09  7.09e-07  1.64e-09  1.57e-08  9.90e-01  
 20  +4.1350e-01  +4.1350e-01  1.35e-07  4.56e-11  7.09e-09  1.64e-11  1.57e-10  9.90e-01  
 21  +4.1350e-01  +4.1350e-01  1.35e-09  4.56e-13  7.09e-11  1.64e-13  1.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.5519ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:51 PM: Optimal value: 4.135e-01
(CVXPY) Oct 06 04:03:51 PM: Compilation took 2.016e-02 seconds
(CVXPY) Oct 06 04:03:51 PM: Solver (including time spent in interface) took 9.987e-02 seconds
Iteration: 4, Objective: 0.4135
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:52 PM: Your problem has 2550 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:52 PM: Finished problem compilation (took 3.032e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2550
  constraints   = 5050
  nnz(P)        = 0
  nnz(A)        = 30961
  cones (total) = 1
    : Nonnegative = 1,  numel = 5050

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8738e-01  +5.2631e+02  5.26e+02  4.03e-01  4.79e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3715e-01  +6.4681e+01  6.41e+01  1.51e-01  2.28e+01  1.33e-02  2.52e-01  8.76e-01  
  3  +5.0914e-01  +1.6244e+01  1.57e+01  1.03e-01  1.53e+01  3.41e-05  2.42e-01  1.94e-01  
  4  +5.0044e-01  +1.2738e+00  7.73e-01  7.50e-03  1.15e+00  7.83e-06  1.19e-01  8.74e-01  
  5  +5.0019e-01  +9.4645e-01  4.46e-01  4.28e-03  6.59e-01  7.20e-06  5.82e-02  5.78e-01  
  6  +4.9984e-01  +1.0193e+00  5.19e-01  3.49e-03  5.43e-01  2.42e-05  1.37e-02  9.06e-01  
  7  +4.9571e-01  +9.3875e-01  4.43e-01  5.10e-04  8.04e-02  1.68e-04  1.45e-03  8.96e-01  
  8  +4.9712e-01  +8.8126e-01  3.84e-01  4.51e-04  7.11e-02  8.37e-05  1.25e-03  4.73e-01  
  9  +4.8936e-01  +7.8162e-01  2.92e-01  1.70e-04  2.67e-02  1.28e-04  4.66e-04  6.96e-01  
 10  +4.8557e-01  +7.6417e-01  2.79e-01  1.31e-04  2.07e-02  1.36e-04  3.60e-04  2.85e-01  
 11  +4.8349e-01  +7.4469e-01  2.61e-01  1.29e-04  2.02e-02  1.08e-04  3.56e-04  1.05e-01  
 12  +4.7592e-01  +7.0391e-01  2.28e-01  9.77e-05  1.53e-02  7.67e-05  2.75e-04  4.43e-01  
 13  +4.6246e-01  +6.2111e-01  1.59e-01  7.05e-05  1.10e-02  6.75e-06  2.08e-04  8.56e-01  
 14  +4.4044e-01  +5.2811e-01  8.77e-02  3.33e-05  5.19e-03  7.56e-06  1.04e-04  8.15e-01  
 15  +4.2402e-01  +4.6223e-01  3.82e-02  1.37e-05  2.13e-03  4.55e-06  4.53e-05  9.39e-01  
 16  +4.2334e-01  +4.5940e-01  3.61e-02  1.28e-05  1.99e-03  4.45e-06  4.24e-05  2.40e-01  
 17  +4.1761e-01  +4.3830e-01  2.07e-02  7.28e-06  1.13e-03  2.57e-06  2.47e-05  4.82e-01  
 18  +4.1233e-01  +4.1864e-01  6.31e-03  2.20e-06  3.42e-04  8.70e-07  7.67e-06  9.90e-01  
 19  +4.1003e-01  +4.1081e-01  7.84e-04  2.73e-07  4.25e-05  1.07e-07  9.70e-07  8.84e-01  
 20  +4.0971e-01  +4.0972e-01  1.31e-05  4.55e-09  7.08e-07  1.71e-09  1.62e-08  9.90e-01  
 21  +4.0970e-01  +4.0970e-01  1.31e-07  4.56e-11  7.08e-09  1.71e-11  1.62e-10  9.90e-01  
 22  +4.0970e-01  +4.0970e-01  1.31e-09  4.56e-13  7.08e-11  1.71e-13  1.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 88.6866ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:52 PM: Optimal value: 4.097e-01
(CVXPY) Oct 06 04:03:52 PM: Compilation took 3.032e-02 seconds
(CVXPY) Oct 06 04:03:52 PM: Solver (including time spent in interface) took 9.239e-02 seconds
Iteration: 5, Objective: 0.4097
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:52 PM: Your problem has 2558 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:52 PM: Finished problem compilation (took 2.642e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2558
  constraints   = 5058
  nnz(P)        = 0
  nnz(A)        = 31364
  cones (total) = 1
    : Nonnegative = 1,  numel = 5058

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8734e-01  +5.2618e+02  5.26e+02  4.03e-01  4.78e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3705e-01  +6.4559e+01  6.40e+01  1.51e-01  2.27e+01  1.33e-02  2.52e-01  8.76e-01  
  3  +5.0911e-01  +1.6205e+01  1.57e+01  1.03e-01  1.52e+01  3.41e-05  2.41e-01  1.96e-01  
  4  +5.0046e-01  +1.3169e+00  8.16e-01  7.93e-03  1.21e+00  7.94e-06  1.21e-01  8.51e-01  
  5  +5.0017e-01  +9.4188e-01  4.42e-01  4.23e-03  6.51e-01  7.46e-06  5.45e-02  6.44e-01  
  6  +4.9933e-01  +1.1480e+00  6.49e-01  2.67e-03  4.18e-01  4.75e-05  8.42e-03  9.90e-01  
  7  +4.9197e-01  +1.0042e+00  5.12e-01  3.72e-04  5.86e-02  2.64e-04  1.03e-03  8.78e-01  
  8  +4.8764e-01  +8.8599e-01  3.98e-01  2.42e-04  3.82e-02  1.71e-04  6.72e-04  5.32e-01  
  9  +4.8586e-01  +8.5722e-01  3.71e-01  2.03e-04  3.20e-02  1.51e-04  5.65e-04  2.74e-01  
 10  +4.8565e-01  +8.3447e-01  3.49e-01  1.97e-04  3.10e-02  1.18e-04  5.48e-04  1.57e-01  
 11  +4.7294e-01  +7.2460e-01  2.52e-01  1.16e-04  1.82e-02  7.01e-05  3.33e-04  5.82e-01  
 12  +4.4865e-01  +5.7133e-01  1.23e-01  5.33e-05  8.31e-03  4.28e-06  1.66e-04  8.76e-01  
 13  +4.4400e-01  +5.5340e-01  1.09e-01  4.55e-05  7.10e-03  6.65e-06  1.44e-04  4.13e-01  
 14  +4.3701e-01  +5.2460e-01  8.76e-02  3.54e-05  5.51e-03  5.72e-06  1.15e-04  2.81e-01  
 15  +4.2115e-01  +4.5916e-01  3.80e-02  1.44e-05  2.23e-03  4.22e-06  4.92e-05  9.47e-01  
 16  +4.2065e-01  +4.5706e-01  3.64e-02  1.36e-05  2.12e-03  4.17e-06  4.66e-05  2.15e-01  
 17  +4.1587e-01  +4.3874e-01  2.29e-02  8.46e-06  1.31e-03  2.66e-06  2.96e-05  4.49e-01  
 18  +4.1363e-01  +4.2984e-01  1.62e-02  5.99e-06  9.30e-04  1.95e-06  2.12e-05  5.86e-01  
 19  +4.1064e-01  +4.1873e-01  8.09e-03  2.98e-06  4.63e-04  9.74e-07  1.08e-05  5.42e-01  
 20  +4.1064e-01  +4.1867e-01  8.02e-03  2.94e-06  4.57e-04  9.77e-07  1.06e-05  1.67e-01  
 21  +4.0803e-01  +4.0914e-01  1.11e-03  4.07e-07  6.32e-05  1.32e-07  1.50e-06  8.67e-01  
 22  +4.0761e-01  +4.0765e-01  3.71e-05  1.36e-08  2.11e-06  4.25e-09  5.07e-08  9.75e-01  
 23  +4.0760e-01  +4.0760e-01  3.71e-07  1.36e-10  2.11e-08  4.25e-11  5.08e-10  9.90e-01  
 24  +4.0760e-01  +4.0760e-01  3.71e-09  1.36e-12  2.11e-10  4.25e-13  5.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 98.6483ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:52 PM: Optimal value: 4.076e-01
(CVXPY) Oct 06 04:03:52 PM: Compilation took 2.642e-02 seconds
(CVXPY) Oct 06 04:03:52 PM: Solver (including time spent in interface) took 1.027e-01 seconds
Iteration: 6, Objective: 0.4076
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:52 PM: Your problem has 2566 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:52 PM: Finished problem compilation (took 2.723e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2566
  constraints   = 5066
  nnz(P)        = 0
  nnz(A)        = 31668
  cones (total) = 1
    : Nonnegative = 1,  numel = 5066

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8726e-01  +5.2619e+02  5.26e+02  4.03e-01  4.78e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3697e-01  +6.4467e+01  6.39e+01  1.51e-01  2.26e+01  1.33e-02  2.52e-01  8.77e-01  
  3  +5.0909e-01  +1.6183e+01  1.57e+01  1.03e-01  1.52e+01  3.41e-05  2.41e-01  1.97e-01  
  4  +5.0049e-01  +1.3676e+00  8.67e-01  8.42e-03  1.29e+00  8.04e-06  1.25e-01  8.25e-01  
  5  +5.0024e-01  +1.0334e+00  5.33e-01  5.12e-03  7.88e-01  7.46e-06  6.84e-02  5.18e-01  
  6  +4.9985e-01  +1.1542e+00  6.54e-01  4.11e-03  6.40e-01  2.61e-05  1.53e-02  9.69e-01  
  7  +4.9359e-01  +9.8989e-01  4.96e-01  3.98e-04  6.28e-02  2.26e-04  1.11e-03  9.31e-01  
  8  +4.8854e-01  +8.8803e-01  3.99e-01  2.66e-04  4.19e-02  1.75e-04  7.45e-04  4.51e-01  
  9  +4.8795e-01  +8.4454e-01  3.57e-01  1.99e-04  3.13e-02  1.12e-04  5.50e-04  5.82e-01  
 10  +4.8589e-01  +8.0275e-01  3.17e-01  1.85e-04  2.90e-02  6.82e-05  5.17e-04  3.17e-01  
 11  +4.7731e-01  +7.4919e-01  2.72e-01  1.34e-04  2.10e-02  6.05e-05  3.82e-04  3.30e-01  
 12  +4.5532e-01  +6.0322e-01  1.48e-01  6.68e-05  1.04e-02  3.08e-06  2.05e-04  9.90e-01  
 13  +4.5093e-01  +5.8581e-01  1.35e-01  5.88e-05  9.17e-03  3.93e-06  1.82e-04  1.88e-01  
 14  +4.3389e-01  +5.1637e-01  8.25e-02  3.30e-05  5.13e-03  6.07e-06  1.08e-04  7.26e-01  
 15  +4.2406e-01  +4.7598e-01  5.19e-02  1.99e-05  3.08e-03  5.54e-06  6.73e-05  8.29e-01  
 16  +4.1586e-01  +4.4369e-01  2.78e-02  1.03e-05  1.60e-03  3.08e-06  3.60e-05  5.34e-01  
 17  +4.1553e-01  +4.4222e-01  2.67e-02  9.88e-06  1.53e-03  3.05e-06  3.45e-05  2.61e-01  
 18  +4.1303e-01  +4.3298e-01  2.00e-02  7.27e-06  1.13e-03  2.38e-06  2.55e-05  5.14e-01  
 19  +4.0818e-01  +4.1522e-01  7.04e-03  2.54e-06  3.94e-04  8.52e-07  9.17e-06  7.16e-01  
 20  +4.0556e-01  +4.0572e-01  1.56e-04  5.62e-08  8.72e-06  1.86e-08  2.06e-07  9.87e-01  
 21  +4.0550e-01  +4.0550e-01  1.56e-06  5.62e-10  8.72e-08  1.86e-10  2.06e-09  9.90e-01  
 22  +4.0550e-01  +4.0550e-01  1.56e-08  5.62e-12  8.72e-10  1.86e-12  2.06e-11  9.90e-01  
 23  +4.0550e-01  +4.0550e-01  1.56e-10  5.62e-14  8.72e-12  1.86e-14  2.06e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 95.7663ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:52 PM: Optimal value: 4.055e-01
(CVXPY) Oct 06 04:03:52 PM: Compilation took 2.723e-02 seconds
(CVXPY) Oct 06 04:03:52 PM: Solver (including time spent in interface) took 1.022e-01 seconds
Iteration: 7, Objective: 0.4055
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:53 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:53 PM: Finished problem compilation (took 2.534e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 31711
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8726e-01  +5.2619e+02  5.26e+02  4.03e-01  4.78e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3696e-01  +6.4457e+01  6.39e+01  1.51e-01  2.26e+01  1.33e-02  2.52e-01  8.77e-01  
  3  +5.0909e-01  +1.6181e+01  1.57e+01  1.03e-01  1.52e+01  3.41e-05  2.41e-01  1.97e-01  
  4  +5.0049e-01  +1.3699e+00  8.69e-01  8.45e-03  1.29e+00  8.05e-06  1.25e-01  8.24e-01  
  5  +5.0024e-01  +1.0358e+00  5.36e-01  5.15e-03  7.91e-01  7.50e-06  6.83e-02  5.23e-01  
  6  +4.9983e-01  +1.1553e+00  6.55e-01  4.04e-03  6.30e-01  2.69e-05  1.48e-02  9.72e-01  
  7  +4.9343e-01  +9.9408e-01  5.01e-01  3.97e-04  6.26e-02  2.30e-04  1.11e-03  9.29e-01  
  8  +4.8901e-01  +9.0536e-01  4.16e-01  2.79e-04  4.39e-02  1.85e-04  7.79e-04  4.09e-01  
  9  +4.8847e-01  +8.5570e-01  3.67e-01  2.09e-04  3.28e-02  1.15e-04  5.78e-04  5.74e-01  
 10  +4.8549e-01  +8.0813e-01  3.23e-01  1.90e-04  2.99e-02  7.39e-05  5.35e-04  2.82e-01  
 11  +4.7859e-01  +7.6184e-01  2.83e-01  1.45e-04  2.28e-02  6.44e-05  4.15e-04  3.08e-01  
 12  +4.7607e-01  +7.3991e-01  2.64e-01  1.41e-04  2.21e-02  5.42e-05  4.15e-04  2.99e-02  
 13  +4.6527e-01  +6.7740e-01  2.12e-01  1.03e-04  1.61e-02  4.23e-05  3.10e-04  2.93e-01  
 14  +4.5526e-01  +6.2436e-01  1.69e-01  7.60e-05  1.19e-02  2.95e-05  2.34e-04  3.95e-01  
 15  +4.5201e-01  +6.0615e-01  1.54e-01  6.65e-05  1.04e-02  2.16e-05  2.06e-04  4.96e-01  
 16  +4.3562e-01  +5.3106e-01  9.54e-02  3.83e-05  5.96e-03  1.18e-05  1.25e-04  5.29e-01  
 17  +4.1749e-01  +4.5201e-01  3.45e-02  1.30e-05  2.02e-03  3.79e-06  4.51e-05  9.14e-01  
 18  +4.1519e-01  +4.4317e-01  2.80e-02  1.03e-05  1.60e-03  3.16e-06  3.59e-05  2.56e-01  
 19  +4.1482e-01  +4.4132e-01  2.65e-02  9.72e-06  1.51e-03  3.08e-06  3.39e-05  2.63e-01  
 20  +4.1227e-01  +4.3180e-01  1.95e-02  7.07e-06  1.10e-03  2.31e-06  2.50e-05  4.15e-01  
 21  +4.0582e-01  +4.0788e-01  2.06e-03  7.41e-07  1.15e-04  2.51e-07  2.71e-06  9.88e-01  
 22  +4.0501e-01  +4.0504e-01  2.56e-05  9.19e-09  1.43e-06  3.10e-09  3.39e-08  9.89e-01  
 23  +4.0500e-01  +4.0500e-01  2.56e-07  9.19e-11  1.43e-08  3.10e-11  3.39e-10  9.90e-01  
 24  +4.0500e-01  +4.0500e-01  2.56e-09  9.19e-13  1.43e-10  3.10e-13  3.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 100.631ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:53 PM: Optimal value: 4.050e-01
(CVXPY) Oct 06 04:03:53 PM: Compilation took 2.534e-02 seconds
(CVXPY) Oct 06 04:03:53 PM: Solver (including time spent in interface) took 1.050e-01 seconds
Iteration: 8, Objective: 0.4050
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:53 PM: Your problem has 2570 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:53 PM: Finished problem compilation (took 3.187e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2570
  constraints   = 5070
  nnz(P)        = 0
  nnz(A)        = 31828
  cones (total) = 1
    : Nonnegative = 1,  numel = 5070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.8715e-01  +5.2631e+02  5.26e+02  4.03e-01  4.78e+01  3.86e-03  5.46e-01  6.10e-01  
  2  +5.3689e-01  +6.4391e+01  6.39e+01  1.51e-01  2.26e+01  1.33e-02  2.52e-01  8.78e-01  
  3  +5.0908e-01  +1.6170e+01  1.57e+01  1.03e-01  1.51e+01  3.42e-05  2.41e-01  1.98e-01  
  4  +5.0049e-01  +1.3695e+00  8.69e-01  8.45e-03  1.29e+00  8.06e-06  1.24e-01  8.26e-01  
  5  +5.0025e-01  +1.0641e+00  5.64e-01  5.42e-03  8.33e-01  7.82e-06  7.00e-02  5.06e-01  
  6  +4.9979e-01  +1.2101e+00  7.10e-01  4.11e-03  6.42e-01  3.03e-05  1.46e-02  9.78e-01  
  7  +4.9352e-01  +1.0438e+00  5.50e-01  4.57e-04  7.21e-02  2.22e-04  1.29e-03  9.13e-01  
  8  +4.8537e-01  +8.5571e-01  3.70e-01  2.41e-04  3.79e-02  1.34e-04  6.84e-04  6.22e-01  
  9  +4.8332e-01  +8.4252e-01  3.59e-01  1.83e-04  2.88e-02  1.32e-04  5.14e-04  4.19e-01  
 10  +4.8165e-01  +8.2177e-01  3.40e-01  1.82e-04  2.85e-02  1.15e-04  5.13e-04  2.07e-02  
 11  +4.7264e-01  +7.5288e-01  2.80e-01  1.32e-04  2.06e-02  8.42e-05  3.80e-04  3.91e-01  
 12  +4.6604e-01  +6.6564e-01  2.00e-01  1.03e-04  1.61e-02  7.32e-07  3.12e-04  9.22e-01  
 13  +4.5382e-01  +6.0789e-01  1.54e-01  7.10e-05  1.11e-02  2.55e-06  2.21e-04  3.83e-01  
 14  +4.4824e-01  +5.8418e-01  1.36e-01  5.93e-05  9.23e-03  6.57e-06  1.87e-04  4.42e-01  
 15  +4.3295e-01  +5.1748e-01  8.45e-02  3.42e-05  5.32e-03  5.24e-06  1.13e-04  5.49e-01  
 16  +4.2175e-01  +4.6879e-01  4.70e-02  1.78e-05  2.77e-03  5.40e-06  6.10e-05  9.61e-01  
 17  +4.1870e-01  +4.5710e-01  3.84e-02  1.44e-05  2.23e-03  4.44e-06  4.97e-05  2.13e-01  
 18  +4.1719e-01  +4.5070e-01  3.35e-02  1.24e-05  1.93e-03  4.05e-06  4.31e-05  4.28e-01  
 19  +4.1432e-01  +4.3988e-01  2.56e-02  9.39e-06  1.46e-03  3.11e-06  3.31e-05  3.10e-01  
 20  +4.1087e-01  +4.2609e-01  1.52e-02  5.55e-06  8.61e-04  1.96e-06  1.99e-05  9.90e-01  
 21  +4.0568e-01  +4.0766e-01  1.98e-03  7.22e-07  1.12e-04  2.39e-07  2.67e-06  9.75e-01  
 22  +4.0492e-01  +4.0496e-01  4.17e-05  1.52e-08  2.36e-06  4.93e-09  5.67e-08  9.79e-01  
 23  +4.0490e-01  +4.0490e-01  4.17e-07  1.52e-10  2.36e-08  4.93e-11  5.67e-10  9.90e-01  
 24  +4.0490e-01  +4.0490e-01  4.17e-09  1.52e-12  2.36e-10  4.93e-13  5.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 102.6861ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:53 PM: Optimal value: 4.049e-01
(CVXPY) Oct 06 04:03:53 PM: Compilation took 3.187e-02 seconds
(CVXPY) Oct 06 04:03:53 PM: Solver (including time spent in interface) took 1.111e-01 seconds
FULL MODEL:
  Accruacy: 0.5918
  Our objective: 0.1836

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.152)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0036)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0012)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.0056)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.221598625183105
Best over terms:
  Our final objective: 0.15199999999999997
    Its accruacy: 0.576
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15199999999999997
  Highest accruacy: 0.576
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

