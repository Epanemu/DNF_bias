Command:
python test_script.py -s constant_subclass -d 5 -n 50 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:36 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Finished problem compilation (took 4.041e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9217e-01  +2.6148e+01  2.57e+01  8.19e-01  5.81e+00  1.00e+00  1.08e+00   ------   
  1  +5.8358e-01  +5.4187e+00  4.84e+00  3.02e-01  3.08e+00  3.94e-03  5.37e-01  6.54e-01  
  2  +5.0027e-01  +1.1245e+00  6.24e-01  6.19e-02  7.46e-01  1.26e-02  1.69e-01  9.20e-01  
  3  +4.3151e-01  +8.6382e-01  4.32e-01  2.14e-02  2.68e-01  1.28e-02  6.92e-02  6.85e-01  
  4  +3.7758e-01  +5.2080e-01  1.43e-01  6.39e-03  7.85e-02  3.21e-03  2.61e-02  6.73e-01  
  5  +3.4447e-01  +3.6039e-01  1.59e-02  6.90e-04  8.39e-03  2.36e-04  3.50e-03  8.95e-01  
  6  +3.4014e-01  +3.4031e-01  1.61e-04  6.99e-06  8.49e-05  2.28e-06  3.66e-05  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  1.61e-06  6.99e-08  8.49e-07  2.28e-08  3.66e-07  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  1.61e-08  6.99e-10  8.49e-09  2.28e-10  3.66e-09  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  1.61e-10  6.99e-12  8.49e-11  2.28e-12  3.66e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 607.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:37 PM: Optimal value: 3.401e-01
(CVXPY) Oct 06 03:52:37 PM: Compilation took 4.041e-02 seconds
(CVXPY) Oct 06 03:52:37 PM: Solver (including time spent in interface) took 3.510e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:37 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Finished problem compilation (took 1.431e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 270
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7969e-01  +2.6598e+01  2.61e+01  8.35e-01  5.83e+00  1.00e+00  1.12e+00   ------   
  1  +5.3281e-01  +5.5599e+00  5.03e+00  3.27e-01  3.08e+00  3.90e-03  5.73e-01  6.40e-01  
  2  +4.3600e-01  +1.3299e+00  8.94e-01  7.45e-02  8.69e-01  1.50e-02  2.06e-01  8.56e-01  
  3  +3.5438e-01  +6.8592e-01  3.32e-01  1.99e-02  2.34e-01  5.90e-03  6.93e-02  7.85e-01  
  4  +3.1709e-01  +4.1440e-01  9.73e-02  5.61e-03  6.52e-02  1.38e-03  2.32e-02  6.97e-01  
  5  +3.0329e-01  +3.2045e-01  1.72e-02  1.01e-03  1.16e-02  2.30e-04  4.62e-03  8.11e-01  
  6  +3.0029e-01  +3.0073e-01  4.40e-04  2.60e-05  2.99e-04  4.50e-06  1.23e-04  9.77e-01  
  7  +3.0021e-01  +3.0024e-01  3.03e-05  1.82e-06  2.08e-05  1.20e-07  9.51e-06  9.81e-01  
  8  +3.0020e-01  +3.0020e-01  3.79e-07  2.28e-08  2.60e-07  1.61e-09  1.22e-07  9.89e-01  
  9  +3.0020e-01  +3.0020e-01  3.79e-09  2.28e-10  2.60e-09  1.61e-11  1.22e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 468.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:37 PM: Optimal value: 3.002e-01
(CVXPY) Oct 06 03:52:37 PM: Compilation took 1.431e-02 seconds
(CVXPY) Oct 06 03:52:37 PM: Solver (including time spent in interface) took 9.394e-04 seconds
Iteration: 2, Objective: 0.3002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:37 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Finished problem compilation (took 8.570e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 324
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7874e-01  +2.6625e+01  2.61e+01  8.44e-01  5.82e+00  1.00e+00  1.11e+00   ------   
  1  +5.2264e-01  +5.6752e+00  5.15e+00  3.53e-01  3.13e+00  3.83e-03  5.95e-01  6.23e-01  
  2  +4.2752e-01  +1.4300e+00  1.00e+00  8.33e-02  9.57e-01  1.73e-02  2.25e-01  8.53e-01  
  3  +3.1820e-01  +6.8318e-01  3.65e-01  1.92e-02  2.28e-01  7.15e-03  6.62e-02  8.50e-01  
  4  +2.8171e-01  +3.9913e-01  1.17e-01  6.41e-03  7.47e-02  1.68e-03  2.57e-02  7.56e-01  
  5  +2.6333e-01  +2.7777e-01  1.44e-02  7.97e-04  9.18e-03  1.78e-04  3.59e-03  8.68e-01  
  6  +2.6044e-01  +2.6094e-01  5.02e-04  2.79e-05  3.20e-04  4.81e-06  1.30e-04  9.65e-01  
  7  +2.6032e-01  +2.6038e-01  6.16e-05  3.42e-06  3.89e-05  4.18e-07  1.80e-05  9.37e-01  
  8  +2.6030e-01  +2.6030e-01  8.28e-07  4.59e-08  5.22e-07  4.93e-09  2.49e-07  9.87e-01  
  9  +2.6030e-01  +2.6030e-01  8.28e-09  4.59e-10  5.22e-09  4.93e-11  2.49e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 512.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:37 PM: Optimal value: 2.603e-01
(CVXPY) Oct 06 03:52:37 PM: Compilation took 8.570e-03 seconds
(CVXPY) Oct 06 03:52:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:37 PM: Your problem has 66 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Finished problem compilation (took 5.112e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 66
  constraints   = 91
  nnz(P)        = 0
  nnz(A)        = 372
  cones (total) = 1
    : Nonnegative = 1,  numel = 91

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7523e-01  +2.6653e+01  2.62e+01  8.52e-01  5.76e+00  1.00e+00  1.11e+00   ------   
  1  +4.9885e-01  +5.8348e+00  5.34e+00  3.73e-01  3.17e+00  3.84e-03  6.15e-01  6.02e-01  
  2  +4.0165e-01  +1.5677e+00  1.17e+00  9.73e-02  1.07e+00  1.96e-02  2.56e-01  8.27e-01  
  3  +3.0667e-01  +8.2974e-01  5.23e-01  3.03e-02  3.46e-01  1.02e-02  1.01e-01  7.09e-01  
  4  +2.6361e-01  +3.6362e-01  1.00e-01  5.94e-03  6.69e-02  1.63e-03  2.33e-02  8.05e-01  
  5  +2.4478e-01  +2.6473e-01  1.99e-02  1.17e-03  1.31e-02  2.78e-04  5.01e-03  8.38e-01  
  6  +2.4089e-01  +2.4268e-01  1.79e-03  1.05e-04  1.17e-03  2.24e-05  4.67e-04  9.08e-01  
  7  +2.4050e-01  +2.4082e-01  3.11e-04  1.82e-05  2.02e-04  1.30e-06  9.49e-05  9.90e-01  
  8  +2.4041e-01  +2.4043e-01  1.97e-05  1.12e-06  1.25e-05  6.57e-08  6.60e-06  9.46e-01  
  9  +2.4040e-01  +2.4040e-01  2.25e-07  1.28e-08  1.42e-07  7.60e-10  7.66e-08  9.89e-01  
 10  +2.4040e-01  +2.4040e-01  2.26e-09  1.28e-10  1.43e-09  7.64e-12  7.70e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 751.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:37 PM: Optimal value: 2.404e-01
(CVXPY) Oct 06 03:52:37 PM: Compilation took 5.112e-03 seconds
(CVXPY) Oct 06 03:52:37 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:37 PM: Your problem has 68 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:37 PM: Finished problem compilation (took 5.007e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 68
  constraints   = 93
  nnz(P)        = 0
  nnz(A)        = 377
  cones (total) = 1
    : Nonnegative = 1,  numel = 93

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7188e-01  +2.6576e+01  2.61e+01  8.54e-01  5.72e+00  1.00e+00  1.11e+00   ------   
  1  +4.7852e-01  +5.8520e+00  5.37e+00  3.72e-01  3.13e+00  3.89e-03  6.11e-01  5.99e-01  
  2  +3.6222e-01  +1.4959e+00  1.13e+00  8.73e-02  9.48e-01  2.07e-02  2.31e-01  8.62e-01  
  3  +2.7318e-01  +6.0187e-01  3.29e-01  2.00e-02  2.23e-01  5.90e-03  6.84e-02  8.17e-01  
  4  +2.3867e-01  +3.4506e-01  1.06e-01  6.49e-03  7.10e-02  1.68e-03  2.52e-02  7.33e-01  
  5  +2.2220e-01  +2.3046e-01  8.27e-03  5.05e-04  5.48e-03  1.13e-04  2.14e-03  9.23e-01  
  6  +2.2089e-01  +2.2235e-01  1.46e-03  9.00e-05  9.74e-04  1.77e-05  3.96e-04  8.24e-01  
  7  +2.2061e-01  +2.2099e-01  3.73e-04  2.22e-05  2.40e-04  2.56e-06  1.16e-04  9.18e-01  
  8  +2.2051e-01  +2.2054e-01  2.66e-05  1.54e-06  1.68e-05  1.32e-07  8.99e-06  9.35e-01  
  9  +2.2050e-01  +2.2050e-01  3.15e-07  1.82e-08  1.98e-07  1.56e-09  1.08e-07  9.89e-01  
 10  +2.2050e-01  +2.2050e-01  3.16e-09  1.82e-10  1.98e-09  1.56e-11  1.09e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 677.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:37 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:37 PM: Optimal value: 2.205e-01
(CVXPY) Oct 06 03:52:37 PM: Compilation took 5.007e-03 seconds
(CVXPY) Oct 06 03:52:37 PM: Solver (including time spent in interface) took 5.006e-03 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.5199999999999999

IF 
    (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x3 = 0)                                  <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0)                       <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.177383661270142
Best over terms:
  Our final objective: 0.19999999999999998
    Its accruacy: 0.6
    Its hamming distance: 3
  Shortest hamming distance: 3
    Its our objective: 0.19999999999999998
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

