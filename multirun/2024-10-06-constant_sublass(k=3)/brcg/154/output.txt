Command:
python test_script.py -s constant_subclass -d 4 -n 10000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15139999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.15139999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:31 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:31 PM: Finished problem compilation (took 7.485e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.84e-01  8.58e+01  1.00e+00  1.00e+00   ------   
  1  +6.0818e-01  +9.6885e+02  9.68e+02  3.38e-01  4.78e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5103e-01  +1.5089e+02  1.50e+02  1.40e-01  2.42e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1082e-01  +3.2633e+01  3.21e+01  1.11e-01  1.89e+01  1.77e-05  2.25e-01  6.51e-02  
  4  +5.0004e-01  +1.0577e+00  5.58e-01  3.74e-03  6.42e-01  3.90e-06  1.44e-01  9.90e-01  
  5  +4.9998e-01  +6.3615e-01  1.36e-01  9.10e-04  1.57e-01  1.64e-06  3.02e-02  8.22e-01  
  6  +4.9745e-01  +9.6271e-01  4.65e-01  7.88e-04  1.37e-01  5.89e-05  2.59e-03  9.60e-01  
  7  +4.8591e-01  +7.9911e-01  3.13e-01  1.17e-04  2.03e-02  2.42e-04  3.61e-04  8.62e-01  
  8  +4.6753e-01  +5.3012e-01  6.26e-02  1.56e-05  2.70e-03  5.03e-05  5.11e-05  9.18e-01  
  9  +4.5338e-01  +4.6076e-01  7.38e-03  1.64e-06  2.84e-04  1.25e-06  6.39e-06  9.69e-01  
 10  +4.5066e-01  +4.5083e-01  1.75e-04  3.63e-08  6.29e-06  2.37e-08  1.54e-07  9.81e-01  
 11  +4.5060e-01  +4.5060e-01  1.75e-06  3.63e-10  6.29e-08  2.38e-10  1.54e-09  9.90e-01  
 12  +4.5060e-01  +4.5060e-01  1.75e-08  3.63e-12  6.29e-10  2.44e-12  1.58e-11  9.90e-01  
 13  +4.5060e-01  +4.5060e-01  1.75e-10  3.64e-14  6.30e-12  2.51e-14  1.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.8355ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:32 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:32 PM: Optimal value: 4.506e-01
(CVXPY) Oct 06 03:51:32 PM: Compilation took 7.485e-02 seconds
(CVXPY) Oct 06 03:51:32 PM: Solver (including time spent in interface) took 7.401e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:32 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:32 PM: Finished problem compilation (took 2.498e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 44893
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0014e+03  5.00e+03  9.84e-01  9.21e+01  1.00e+00  1.00e+00   ------   
  1  +6.0803e-01  +9.6974e+02  9.69e+02  3.39e-01  5.12e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5078e-01  +1.5039e+02  1.50e+02  1.40e-01  2.59e+01  8.27e-03  2.28e-01  7.27e-01  
  3  +5.1069e-01  +3.2366e+01  3.19e+01  1.11e-01  2.02e+01  1.78e-05  2.25e-01  6.75e-02  
  4  +5.0049e-01  +2.4378e+00  1.94e+00  1.30e-02  2.35e+00  4.80e-06  1.92e-01  3.89e-01  
  5  +5.0007e-01  +8.9172e-01  3.92e-01  2.62e-03  4.82e-01  1.54e-06  8.13e-02  6.67e-01  
  6  +5.0001e-01  +7.8778e-01  2.88e-01  1.90e-03  3.51e-01  1.75e-06  3.07e-02  8.02e-01  
  7  +4.9940e-01  +7.5566e-01  2.56e-01  8.34e-04  1.55e-01  1.22e-05  2.87e-03  9.56e-01  
  8  +4.9324e-01  +7.1067e-01  2.17e-01  9.33e-05  1.74e-02  1.07e-04  2.62e-04  9.09e-01  
  9  +4.9339e-01  +7.0444e-01  2.11e-01  8.25e-05  1.54e-02  8.86e-05  2.29e-04  3.26e-01  
 10  +4.9161e-01  +6.9437e-01  2.03e-01  6.41e-05  1.20e-02  9.15e-05  1.77e-04  3.29e-01  
 11  +4.9107e-01  +6.8765e-01  1.97e-01  6.34e-05  1.19e-02  7.89e-05  1.76e-04  8.51e-02  
 12  +4.8761e-01  +6.6060e-01  1.73e-01  4.67e-05  8.72e-03  3.18e-05  1.31e-04  7.41e-01  
 13  +4.8442e-01  +6.3341e-01  1.49e-01  4.14e-05  7.73e-03  1.60e-05  1.17e-04  4.35e-01  
 14  +4.5608e-01  +5.2773e-01  7.16e-02  1.18e-05  2.19e-03  1.26e-05  3.45e-05  7.61e-01  
 15  +4.5217e-01  +5.1493e-01  6.28e-02  1.01e-05  1.87e-03  1.10e-05  2.97e-05  1.68e-01  
 16  +4.5134e-01  +5.1253e-01  6.12e-02  9.98e-06  1.85e-03  1.01e-05  2.95e-05  6.57e-02  
 17  +4.4948e-01  +5.0725e-01  5.78e-02  9.27e-06  1.72e-03  8.87e-06  2.75e-05  2.20e-01  
 18  +4.4104e-01  +4.7974e-01  3.87e-02  6.11e-06  1.13e-03  5.60e-06  1.85e-05  3.91e-01  
 19  +4.3418e-01  +4.5677e-01  2.26e-02  3.56e-06  6.61e-04  2.93e-06  1.10e-05  5.46e-01  
 20  +4.2486e-01  +4.2586e-01  1.01e-03  1.58e-07  2.94e-05  7.93e-08  5.06e-07  9.90e-01  
 21  +4.2440e-01  +4.2441e-01  1.01e-05  1.60e-09  2.96e-07  7.98e-10  5.10e-09  9.90e-01  
 22  +4.2440e-01  +4.2440e-01  1.01e-07  1.60e-11  2.96e-09  7.99e-12  5.11e-11  9.90e-01  
 23  +4.2440e-01  +4.2440e-01  1.01e-09  1.60e-13  2.96e-11  8.00e-14  5.11e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.5688ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:32 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:32 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 03:51:32 PM: Compilation took 2.498e-02 seconds
(CVXPY) Oct 06 03:51:32 PM: Solver (including time spent in interface) took 1.584e-01 seconds
FULL MODEL:
  Accruacy: 0.5757
  Our objective: 0.15140000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1514)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.35479474067688
Best over terms:
  Our final objective: 0.15140000000000003
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15140000000000003
  Highest accruacy: 0.5757
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

