Command:
python test_script.py -s constant_subclass -d 7 -n 10000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15139999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 7.

Computed total variation: 0.16920000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:05 PM: Your problem has 5015 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:05 PM: Finished problem compilation (took 8.622e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5015
  constraints   = 10015
  nnz(P)        = 0
  nnz(A)        = 50015
  cones (total) = 1
    : Nonnegative = 1,  numel = 10015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.05e+02  1.00e+00  1.00e+00   ------   
  1  +5.8814e-01  +1.0510e+03  1.05e+03  4.04e-01  6.57e+01  3.86e-03  5.44e-01  6.11e-01  
  2  +5.3816e-01  +1.3088e+02  1.30e+02  1.56e-01  3.24e+01  1.31e-02  2.55e-01  8.65e-01  
  3  +5.0987e-01  +3.3455e+01  3.29e+01  1.21e-01  2.47e+01  3.43e-05  2.46e-01  1.63e-01  
  4  +5.0054e-01  +1.8696e+00  1.37e+00  9.30e-03  1.94e+00  5.03e-06  1.42e-01  8.21e-01  
  5  +5.0008e-01  +7.4897e-01  2.49e-01  1.67e-03  3.51e-01  1.48e-05  4.55e-02  9.90e-01  
  6  +5.0000e-01  +7.0701e-01  2.07e-01  1.23e-03  2.60e-01  5.15e-05  7.91e-03  8.50e-01  
  7  +4.9863e-01  +7.0875e-01  2.10e-01  1.41e-04  3.00e-02  9.22e-04  4.18e-04  9.48e-01  
  8  +4.9560e-01  +6.9258e-01  1.97e-01  5.65e-05  1.21e-02  1.92e-03  1.66e-04  6.71e-01  
  9  +4.8861e-01  +6.4023e-01  1.52e-01  4.52e-05  9.62e-03  9.03e-04  1.38e-04  3.53e-01  
 10  +4.7781e-01  +5.7416e-01  9.64e-02  2.89e-05  6.13e-03  1.08e-05  9.45e-05  7.34e-01  
 11  +4.5977e-01  +4.8744e-01  2.77e-02  6.58e-06  1.39e-03  2.00e-06  2.41e-05  8.10e-01  
 12  +4.5142e-01  +4.5378e-01  2.36e-03  4.97e-07  1.05e-04  1.28e-07  2.08e-06  9.26e-01  
 13  +4.5062e-01  +4.5066e-01  4.49e-05  9.33e-09  1.98e-06  2.23e-09  3.96e-08  9.90e-01  
 14  +4.5060e-01  +4.5060e-01  4.49e-07  9.33e-11  1.98e-08  2.23e-11  3.96e-10  9.90e-01  
 15  +4.5060e-01  +4.5060e-01  4.49e-09  9.33e-13  1.98e-10  2.28e-13  4.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 99.547ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:05 PM: Optimal value: 4.506e-01
(CVXPY) Oct 06 04:05:05 PM: Compilation took 8.622e-02 seconds
(CVXPY) Oct 06 04:05:05 PM: Solver (including time spent in interface) took 1.152e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:06 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:06 PM: Finished problem compilation (took 5.500e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 58756
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8807e-01  +1.0512e+03  1.05e+03  4.04e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3800e-01  +1.3057e+02  1.30e+02  1.56e-01  3.37e+01  1.31e-02  2.55e-01  8.66e-01  
  3  +5.0978e-01  +3.3273e+01  3.28e+01  1.20e-01  2.56e+01  3.43e-05  2.46e-01  1.67e-01  
  4  +5.0049e-01  +1.7323e+00  1.23e+00  8.38e-03  1.82e+00  5.16e-06  1.32e-01  8.86e-01  
  5  +5.0015e-01  +9.2056e-01  4.20e-01  2.83e-03  6.19e-01  9.27e-06  6.18e-02  6.90e-01  
  6  +5.0006e-01  +7.0108e-01  2.01e-01  1.28e-03  2.81e-01  1.65e-05  1.01e-02  9.27e-01  
  7  +4.9954e-01  +7.2102e-01  2.21e-01  1.71e-04  3.81e-02  3.60e-04  4.74e-04  9.58e-01  
  8  +4.9846e-01  +7.1319e-01  2.15e-01  7.79e-05  1.74e-02  6.83e-04  2.12e-04  6.54e-01  
  9  +4.9696e-01  +7.0319e-01  2.06e-01  5.92e-05  1.32e-02  7.70e-04  1.60e-04  3.05e-01  
 10  +4.9367e-01  +6.8259e-01  1.89e-01  4.58e-05  1.02e-02  6.50e-04  1.24e-04  3.98e-01  
 11  +4.9194e-01  +6.7453e-01  1.83e-01  4.40e-05  9.79e-03  4.71e-04  1.20e-04  2.42e-01  
 12  +4.8484e-01  +6.4476e-01  1.60e-01  3.58e-05  7.95e-03  1.53e-04  9.93e-05  6.37e-01  
 13  +4.6586e-01  +5.6842e-01  1.03e-01  1.91e-05  4.24e-03  6.75e-05  5.54e-05  6.08e-01  
 14  +4.3949e-01  +4.7135e-01  3.19e-02  5.29e-06  1.17e-03  1.23e-05  1.62e-05  7.66e-01  
 15  +4.3876e-01  +4.6653e-01  2.78e-02  4.89e-06  1.08e-03  8.91e-06  1.62e-05  2.15e-02  
 16  +4.3873e-01  +4.6787e-01  2.91e-02  5.07e-06  1.12e-03  9.28e-06  1.61e-05  7.64e-02  
 17  +4.3561e-01  +4.6072e-01  2.51e-02  4.05e-06  8.95e-04  7.89e-06  1.25e-05  3.17e-01  
 18  +4.2540e-01  +4.2755e-01  2.15e-03  3.38e-07  7.46e-05  1.58e-07  1.08e-06  9.90e-01  
 19  +4.2441e-01  +4.2443e-01  2.16e-05  3.39e-09  7.49e-07  1.58e-09  1.08e-08  9.90e-01  
 20  +4.2440e-01  +4.2440e-01  2.16e-07  3.39e-11  7.49e-09  1.58e-11  1.08e-10  9.90e-01  
 21  +4.2440e-01  +4.2440e-01  2.16e-09  3.39e-13  7.49e-11  1.58e-13  1.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.573ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:06 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 04:05:06 PM: Compilation took 5.500e-02 seconds
(CVXPY) Oct 06 04:05:06 PM: Solver (including time spent in interface) took 1.753e-01 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:06 PM: Your problem has 5026 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:06 PM: Finished problem compilation (took 4.654e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5026
  constraints   = 10026
  nnz(P)        = 0
  nnz(A)        = 59079
  cones (total) = 1
    : Nonnegative = 1,  numel = 10026

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8804e-01  +1.0513e+03  1.05e+03  4.04e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3796e-01  +1.3050e+02  1.30e+02  1.56e-01  3.37e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0978e-01  +3.3255e+01  3.27e+01  1.20e-01  2.56e+01  3.43e-05  2.46e-01  1.68e-01  
  4  +5.0048e-01  +1.7308e+00  1.23e+00  8.37e-03  1.82e+00  5.17e-06  1.32e-01  8.87e-01  
  5  +5.0013e-01  +8.5765e-01  3.58e-01  2.40e-03  5.27e-01  9.76e-06  5.25e-02  7.74e-01  
  6  +5.0006e-01  +7.8125e-01  2.81e-01  1.56e-03  3.45e-01  3.36e-05  7.84e-03  9.41e-01  
  7  +4.9942e-01  +7.8151e-01  2.82e-01  1.99e-04  4.44e-02  4.45e-04  5.52e-04  9.30e-01  
  8  +4.9825e-01  +7.5491e-01  2.57e-01  9.63e-05  2.15e-02  6.81e-04  2.64e-04  6.57e-01  
  9  +4.9545e-01  +7.2611e-01  2.31e-01  6.62e-05  1.48e-02  6.90e-04  1.81e-04  4.27e-01  
 10  +4.9330e-01  +7.0056e-01  2.07e-01  6.18e-05  1.38e-02  3.15e-04  1.69e-04  4.24e-01  
 11  +4.9178e-01  +6.8349e-01  1.92e-01  5.90e-05  1.31e-02  2.03e-04  1.64e-04  2.46e-01  
 12  +4.8989e-01  +6.7634e-01  1.86e-01  4.86e-05  1.08e-02  2.12e-04  1.35e-04  2.36e-01  
 13  +4.8779e-01  +6.6162e-01  1.74e-01  4.53e-05  1.01e-02  1.09e-04  1.26e-04  4.33e-01  
 14  +4.8642e-01  +6.5609e-01  1.70e-01  4.36e-05  9.69e-03  8.63e-05  1.21e-04  2.00e-01  
 15  +4.7130e-01  +5.9796e-01  1.27e-01  2.45e-05  5.44e-03  5.15e-05  7.00e-05  6.44e-01  
 16  +4.5983e-01  +5.5481e-01  9.50e-02  1.73e-05  3.84e-03  3.49e-05  5.11e-05  3.12e-01  
 17  +4.5663e-01  +5.4225e-01  8.56e-02  1.59e-05  3.52e-03  1.46e-05  4.84e-05  5.41e-01  
 18  +4.3523e-01  +4.6240e-01  2.72e-02  4.71e-06  1.04e-03  3.12e-06  1.51e-05  7.66e-01  
 19  +4.2408e-01  +4.2639e-01  2.31e-03  3.80e-07  8.38e-05  1.81e-07  1.26e-06  9.56e-01  
 20  +4.2311e-01  +4.2314e-01  2.52e-05  4.13e-09  9.12e-07  1.94e-09  1.38e-08  9.89e-01  
 21  +4.2310e-01  +4.2310e-01  2.52e-07  4.13e-11  9.12e-09  1.94e-11  1.38e-10  9.90e-01  
 22  +4.2310e-01  +4.2310e-01  2.52e-09  4.13e-13  9.12e-11  1.94e-13  1.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 172.0386ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:06 PM: Optimal value: 4.231e-01
(CVXPY) Oct 06 04:05:06 PM: Compilation took 4.654e-02 seconds
(CVXPY) Oct 06 04:05:06 PM: Solver (including time spent in interface) took 1.832e-01 seconds
Iteration: 3, Objective: 0.4231
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:06 PM: Your problem has 5032 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:06 PM: Finished problem compilation (took 4.199e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5032
  constraints   = 10032
  nnz(P)        = 0
  nnz(A)        = 59713
  cones (total) = 1
    : Nonnegative = 1,  numel = 10032

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8797e-01  +1.0515e+03  1.05e+03  4.04e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3791e-01  +1.3039e+02  1.30e+02  1.56e-01  3.37e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0976e-01  +3.3232e+01  3.27e+01  1.20e-01  2.56e+01  3.44e-05  2.46e-01  1.68e-01  
  4  +5.0049e-01  +1.7354e+00  1.23e+00  8.40e-03  1.83e+00  5.19e-06  1.32e-01  8.87e-01  
  5  +5.0009e-01  +7.7078e-01  2.71e-01  1.82e-03  3.99e-01  1.04e-05  4.03e-02  8.89e-01  
  6  +5.0006e-01  +8.8817e-01  3.88e-01  1.86e-03  4.11e-01  6.03e-05  7.61e-03  8.95e-01  
  7  +4.9922e-01  +8.7895e-01  3.80e-01  2.53e-04  5.65e-02  5.86e-04  7.03e-04  9.08e-01  
  8  +4.9774e-01  +7.9932e-01  3.02e-01  1.11e-04  2.47e-02  7.72e-04  3.03e-04  7.17e-01  
  9  +4.9362e-01  +7.3907e-01  2.45e-01  7.36e-05  1.64e-02  5.99e-04  2.03e-04  4.84e-01  
 10  +4.9271e-01  +7.2057e-01  2.28e-01  7.12e-05  1.59e-02  3.78e-04  1.97e-04  2.55e-01  
 11  +4.8992e-01  +6.9283e-01  2.03e-01  5.61e-05  1.25e-02  2.19e-04  1.54e-04  5.23e-01  
 12  +4.8832e-01  +6.8534e-01  1.97e-01  4.90e-05  1.09e-02  1.99e-04  1.35e-04  2.40e-01  
 13  +4.8556e-01  +6.7223e-01  1.87e-01  4.67e-05  1.04e-02  1.45e-04  1.30e-04  2.04e-01  
 14  +4.7991e-01  +6.4461e-01  1.65e-01  3.84e-05  8.53e-03  1.02e-04  1.08e-04  3.29e-01  
 15  +4.6010e-01  +5.6225e-01  1.02e-01  1.88e-05  4.17e-03  5.98e-05  5.54e-05  5.59e-01  
 16  +4.5739e-01  +5.5170e-01  9.43e-02  1.71e-05  3.78e-03  4.60e-05  5.07e-05  2.33e-01  
 17  +4.5517e-01  +5.4186e-01  8.67e-02  1.57e-05  3.47e-03  2.68e-05  4.69e-05  4.18e-01  
 18  +4.3991e-01  +4.8564e-01  4.57e-02  7.89e-06  1.74e-03  8.93e-06  2.47e-05  6.50e-01  
 19  +4.2731e-01  +4.4052e-01  1.32e-02  2.21e-06  4.87e-04  2.10e-06  7.19e-06  7.61e-01  
 20  +4.2721e-01  +4.4001e-01  1.28e-02  2.14e-06  4.73e-04  1.95e-06  7.02e-06  9.03e-02  
 21  +4.2719e-01  +4.3991e-01  1.27e-02  2.13e-06  4.70e-04  1.92e-06  6.98e-06  2.32e-02  
 22  +4.2701e-01  +4.3923e-01  1.22e-02  2.03e-06  4.48e-04  1.69e-06  6.62e-06  2.34e-01  
 23  +4.2317e-01  +4.2598e-01  2.82e-03  4.65e-07  1.03e-04  2.22e-07  1.55e-06  9.90e-01  
 24  +4.2192e-01  +4.2195e-01  3.56e-05  5.87e-09  1.30e-06  2.71e-09  1.97e-08  9.89e-01  
 25  +4.2190e-01  +4.2190e-01  3.56e-07  5.87e-11  1.30e-08  2.70e-11  1.97e-10  9.90e-01  
 26  +4.2190e-01  +4.2190e-01  3.56e-09  5.88e-13  1.30e-10  2.70e-13  1.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 202.4235ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:07 PM: Optimal value: 4.219e-01
(CVXPY) Oct 06 04:05:07 PM: Compilation took 4.199e-02 seconds
(CVXPY) Oct 06 04:05:07 PM: Solver (including time spent in interface) took 2.151e-01 seconds
Iteration: 4, Objective: 0.4219
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:07 PM: Your problem has 5042 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:07 PM: Finished problem compilation (took 4.326e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5042
  constraints   = 10042
  nnz(P)        = 0
  nnz(A)        = 60790
  cones (total) = 1
    : Nonnegative = 1,  numel = 10042

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8797e-01  +1.0514e+03  1.05e+03  4.04e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3789e-01  +1.3035e+02  1.30e+02  1.56e-01  3.36e+01  1.32e-02  2.54e-01  8.67e-01  
  3  +5.0975e-01  +3.3210e+01  3.27e+01  1.20e-01  2.55e+01  3.44e-05  2.45e-01  1.69e-01  
  4  +5.0048e-01  +1.7303e+00  1.23e+00  8.37e-03  1.82e+00  5.19e-06  1.31e-01  8.90e-01  
  5  +5.0013e-01  +8.6451e-01  3.64e-01  2.45e-03  5.37e-01  9.89e-06  5.14e-02  7.75e-01  
  6  +5.0008e-01  +8.2776e-01  3.28e-01  1.78e-03  3.93e-01  3.54e-05  8.51e-03  9.33e-01  
  7  +4.9947e-01  +8.2449e-01  3.25e-01  2.35e-04  5.25e-02  4.23e-04  6.50e-04  9.24e-01  
  8  +4.9841e-01  +7.8122e-01  2.83e-01  1.14e-04  2.55e-02  5.82e-04  3.12e-04  6.73e-01  
  9  +4.9403e-01  +7.2397e-01  2.30e-01  6.20e-05  1.38e-02  5.68e-04  1.69e-04  6.37e-01  
 10  +4.9185e-01  +7.0513e-01  2.13e-01  5.84e-05  1.30e-02  3.90e-04  1.61e-04  2.41e-01  
 11  +4.9099e-01  +6.9369e-01  2.03e-01  5.83e-05  1.30e-02  3.42e-04  1.60e-04  2.45e-02  
 12  +4.8664e-01  +6.7227e-01  1.86e-01  4.42e-05  9.84e-03  3.23e-04  1.22e-04  3.23e-01  
 13  +4.8638e-01  +6.7112e-01  1.85e-01  4.41e-05  9.82e-03  3.14e-04  1.22e-04  1.76e-02  
 14  +4.8372e-01  +6.6194e-01  1.78e-01  3.97e-05  8.83e-03  2.39e-04  1.10e-04  2.96e-01  
 15  +4.7186e-01  +6.1031e-01  1.38e-01  2.77e-05  6.15e-03  1.09e-04  7.90e-05  5.34e-01  
 16  +4.7034e-01  +6.0345e-01  1.33e-01  2.70e-05  6.00e-03  8.44e-05  7.76e-05  1.64e-01  
 17  +4.5138e-01  +5.2893e-01  7.75e-02  1.42e-05  3.14e-03  3.46e-05  4.27e-05  5.59e-01  
 18  +4.4560e-01  +5.0752e-01  6.19e-02  1.11e-05  2.45e-03  2.61e-05  3.40e-05  2.39e-01  
 19  +4.3920e-01  +4.8192e-01  4.27e-02  7.23e-06  1.60e-03  3.00e-06  2.24e-05  9.90e-01  
 20  +4.3019e-01  +4.5048e-01  2.03e-02  3.39e-06  7.48e-04  1.44e-06  1.08e-05  6.30e-01  
 21  +4.2847e-01  +4.4439e-01  1.59e-02  2.65e-06  5.84e-04  1.16e-06  8.45e-06  4.76e-01  
 22  +4.2662e-01  +4.3805e-01  1.14e-02  1.88e-06  4.14e-04  8.50e-07  6.03e-06  4.44e-01  
 23  +4.2630e-01  +4.3690e-01  1.06e-02  1.73e-06  3.82e-04  7.99e-07  5.56e-06  3.10e-01  
 24  +4.2544e-01  +4.3403e-01  8.59e-03  1.40e-06  3.09e-04  6.51e-07  4.50e-06  2.79e-01  
 25  +4.2387e-01  +4.2867e-01  4.80e-03  7.79e-07  1.72e-04  3.72e-07  2.52e-06  9.90e-01  
 26  +4.2216e-01  +4.2317e-01  1.01e-03  1.64e-07  3.63e-05  7.80e-08  5.37e-07  8.80e-01  
 27  +4.2179e-01  +4.2197e-01  1.86e-04  3.02e-08  6.67e-06  1.42e-08  9.88e-08  9.90e-01  
 28  +4.2170e-01  +4.2170e-01  2.30e-06  3.72e-10  8.22e-08  1.74e-10  1.22e-09  9.88e-01  
 29  +4.2170e-01  +4.2170e-01  2.30e-08  3.72e-12  8.22e-10  1.74e-12  1.22e-11  9.90e-01  
 30  +4.2170e-01  +4.2170e-01  2.30e-10  3.73e-14  8.22e-12  1.75e-14  1.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 238.8734ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:07 PM: Optimal value: 4.217e-01
(CVXPY) Oct 06 04:05:07 PM: Compilation took 4.326e-02 seconds
(CVXPY) Oct 06 04:05:07 PM: Solver (including time spent in interface) took 2.501e-01 seconds
Iteration: 5, Objective: 0.4217
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:05:07 PM: Your problem has 5052 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:05:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:05:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:05:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:05:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:05:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:05:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:05:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:05:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:05:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:05:07 PM: Finished problem compilation (took 4.528e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5052
  constraints   = 10052
  nnz(P)        = 0
  nnz(A)        = 61698
  cones (total) = 1
    : Nonnegative = 1,  numel = 10052

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0012e+03  5.00e+03  9.85e-01  1.10e+02  1.00e+00  1.00e+00   ------   
  1  +5.8797e-01  +1.0514e+03  1.05e+03  4.05e-01  6.84e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3785e-01  +1.3026e+02  1.30e+02  1.56e-01  3.35e+01  1.32e-02  2.54e-01  8.68e-01  
  3  +5.0974e-01  +3.3184e+01  3.27e+01  1.20e-01  2.55e+01  3.44e-05  2.45e-01  1.69e-01  
  4  +5.0049e-01  +1.7317e+00  1.23e+00  8.39e-03  1.82e+00  5.19e-06  1.31e-01  8.89e-01  
  5  +5.0015e-01  +9.2255e-01  4.22e-01  2.84e-03  6.23e-01  9.65e-06  5.78e-02  7.11e-01  
  6  +5.0012e-01  +8.8134e-01  3.81e-01  2.29e-03  5.03e-01  2.37e-05  1.35e-02  9.18e-01  
  7  +4.9962e-01  +8.4215e-01  3.43e-01  2.62e-04  5.85e-02  3.36e-04  7.27e-04  9.60e-01  
  8  +4.9887e-01  +7.9953e-01  3.01e-01  1.38e-04  3.08e-02  4.36e-04  3.77e-04  6.30e-01  
  9  +4.9571e-01  +7.5362e-01  2.58e-01  7.15e-05  1.60e-02  5.51e-04  1.95e-04  6.05e-01  
 10  +4.9455e-01  +7.4557e-01  2.51e-01  6.43e-05  1.44e-02  5.24e-04  1.75e-04  1.71e-01  
 11  +4.9127e-01  +7.1569e-01  2.24e-01  6.01e-05  1.34e-02  3.30e-04  1.65e-04  2.43e-01  
 12  +4.8649e-01  +6.8448e-01  1.98e-01  4.60e-05  1.02e-02  2.38e-04  1.27e-04  4.13e-01  
 13  +4.8618e-01  +6.8300e-01  1.97e-01  4.59e-05  1.02e-02  2.31e-04  1.27e-04  1.79e-02  
 14  +4.8118e-01  +6.6131e-01  1.80e-01  3.99e-05  8.87e-03  1.35e-04  1.11e-04  4.01e-01  
 15  +4.7930e-01  +6.5206e-01  1.73e-01  3.85e-05  8.56e-03  9.24e-05  1.09e-04  2.46e-01  
 16  +4.6524e-01  +5.9157e-01  1.26e-01  2.46e-05  5.46e-03  6.14e-05  7.17e-05  4.07e-01  
 17  +4.4621e-01  +5.1445e-01  6.82e-02  1.23e-05  2.71e-03  2.02e-05  3.75e-05  6.26e-01  
 18  +4.4319e-01  +5.0268e-01  5.95e-02  1.05e-05  2.33e-03  1.62e-05  3.24e-05  2.22e-01  
 19  +4.3918e-01  +4.8732e-01  4.81e-02  8.34e-06  1.84e-03  1.18e-05  2.59e-05  3.06e-01  
 20  +4.3696e-01  +4.7597e-01  3.90e-02  6.50e-06  1.43e-03  3.19e-06  2.02e-05  9.90e-01  
 21  +4.3316e-01  +4.6287e-01  2.97e-02  4.91e-06  1.09e-03  2.43e-06  1.55e-05  2.87e-01  
 22  +4.3105e-01  +4.5563e-01  2.46e-02  4.05e-06  8.93e-04  2.01e-06  1.28e-05  3.21e-01  
 23  +4.2475e-01  +4.3415e-01  9.41e-03  1.54e-06  3.39e-04  7.57e-07  4.97e-06  8.08e-01  
 24  +4.2153e-01  +4.2344e-01  1.91e-03  3.10e-07  6.84e-05  1.55e-07  1.02e-06  8.10e-01  
 25  +4.2096e-01  +4.2151e-01  5.51e-04  8.95e-08  1.97e-05  4.18e-08  2.94e-07  9.90e-01  
 26  +4.2070e-01  +4.2071e-01  7.36e-06  1.19e-09  2.63e-07  5.56e-10  3.93e-09  9.87e-01  
 27  +4.2070e-01  +4.2070e-01  7.36e-08  1.19e-11  2.63e-09  5.56e-12  3.93e-11  9.90e-01  
 28  +4.2070e-01  +4.2070e-01  7.36e-10  1.19e-13  2.63e-11  5.57e-14  3.94e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 211.8057ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:05:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:05:08 PM: Optimal value: 4.207e-01
(CVXPY) Oct 06 04:05:08 PM: Compilation took 4.528e-02 seconds
(CVXPY) Oct 06 04:05:08 PM: Solver (including time spent in interface) took 2.301e-01 seconds
FULL MODEL:
  Accruacy: 0.5798
  Our objective: 0.15960000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.074)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.0774)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0026)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0012)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1)            <-- (term's our objective: 0.0032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.277088165283203
Best over terms:
  Our final objective: 0.07739999999999998
    Its accruacy: 0.5387
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.07739999999999998
  Highest accruacy: 0.5387
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

