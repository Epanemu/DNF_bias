Command:
python test_script.py -s constant_subclass -d 5 -n 5000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.152
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 5.

Computed total variation: 0.16
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:38 PM: Your problem has 2511 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:38 PM: Finished problem compilation (took 4.506e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2511
  constraints   = 5011
  nnz(P)        = 0
  nnz(A)        = 20011
  cones (total) = 1
    : Nonnegative = 1,  numel = 5011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5008e+03  2.50e+03  9.78e-01  6.53e+01  1.00e+00  1.00e+00   ------   
  1  +5.9954e-01  +5.0122e+02  5.01e+02  3.62e-01  3.81e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4609e-01  +7.1591e+01  7.10e+01  1.41e-01  1.85e+01  9.86e-03  2.35e-01  7.80e-01  
  3  +5.1020e-01  +1.6564e+01  1.61e+01  1.00e-01  1.28e+01  2.27e-05  2.31e-01  9.98e-02  
  4  +5.0007e-01  +9.7918e-01  4.79e-01  4.58e-03  5.98e-01  7.02e-06  1.25e-01  9.68e-01  
  5  +4.9991e-01  +6.4830e-01  1.48e-01  1.40e-03  1.84e-01  4.70e-06  2.58e-02  8.42e-01  
  6  +4.9174e-01  +9.6058e-01  4.69e-01  5.83e-04  7.73e-02  1.92e-04  1.82e-03  9.78e-01  
  7  +4.7613e-01  +6.9628e-01  2.20e-01  1.23e-04  1.63e-02  2.49e-04  3.86e-04  8.05e-01  
  8  +4.6234e-01  +5.4404e-01  8.17e-02  4.10e-05  5.42e-03  6.15e-05  1.39e-04  7.11e-01  
  9  +4.4936e-01  +4.6124e-01  1.19e-02  5.27e-06  6.95e-04  4.22e-06  2.05e-05  9.15e-01  
 10  +4.4539e-01  +4.4567e-01  2.84e-04  1.17e-07  1.55e-05  7.75e-08  4.99e-07  9.80e-01  
 11  +4.4530e-01  +4.4530e-01  2.84e-06  1.17e-09  1.55e-07  7.76e-10  4.99e-09  9.90e-01  
 12  +4.4530e-01  +4.4530e-01  2.84e-08  1.17e-11  1.55e-09  7.82e-12  5.03e-11  9.90e-01  
 13  +4.4530e-01  +4.4530e-01  2.84e-10  1.17e-13  1.55e-11  7.87e-14  5.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.1292ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:38 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:38 PM: Optimal value: 4.453e-01
(CVXPY) Oct 06 03:54:38 PM: Compilation took 4.506e-02 seconds
(CVXPY) Oct 06 03:54:38 PM: Solver (including time spent in interface) took 3.533e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4453
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:38 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:38 PM: Finished problem compilation (took 1.578e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 24722
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5010e+03  2.50e+03  9.78e-01  6.91e+01  1.00e+00  1.00e+00   ------   
  1  +5.9935e-01  +5.0154e+02  5.01e+02  3.62e-01  4.03e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4571e-01  +7.1210e+01  7.07e+01  1.41e-01  1.95e+01  9.93e-03  2.35e-01  7.83e-01  
  3  +5.1001e-01  +1.6367e+01  1.59e+01  9.99e-02  1.34e+01  2.27e-05  2.30e-01  1.05e-01  
  4  +5.0048e-01  +1.6415e+00  1.14e+00  1.09e-02  1.49e+00  8.07e-06  1.67e-01  5.62e-01  
  5  +5.0012e-01  +8.5360e-01  3.53e-01  3.37e-03  4.66e-01  3.15e-06  6.96e-02  6.09e-01  
  6  +4.9998e-01  +7.8671e-01  2.87e-01  2.65e-03  3.67e-01  4.76e-06  2.56e-02  7.16e-01  
  7  +4.9692e-01  +7.3864e-01  2.42e-01  4.67e-04  6.57e-02  5.98e-05  1.38e-03  9.54e-01  
  8  +4.9082e-01  +6.9932e-01  2.08e-01  1.73e-04  2.43e-02  1.27e-04  4.94e-04  6.55e-01  
  9  +4.8862e-01  +6.8562e-01  1.97e-01  1.29e-04  1.82e-02  1.14e-04  3.64e-04  4.62e-01  
 10  +4.8755e-01  +6.7475e-01  1.87e-01  1.08e-04  1.53e-02  7.11e-05  3.03e-04  5.35e-01  
 11  +4.7857e-01  +6.3002e-01  1.51e-01  6.67e-05  9.38e-03  2.98e-05  1.89e-04  8.54e-01  
 12  +4.6161e-01  +5.6212e-01  1.01e-01  3.81e-05  5.34e-03  1.89e-05  1.12e-04  4.55e-01  
 13  +4.4307e-01  +4.9210e-01  4.90e-02  1.72e-05  2.41e-03  4.67e-06  5.35e-05  9.90e-01  
 14  +4.3532e-01  +4.6505e-01  2.97e-02  1.01e-05  1.41e-03  2.97e-06  3.20e-05  4.72e-01  
 15  +4.3489e-01  +4.6355e-01  2.87e-02  9.72e-06  1.36e-03  2.93e-06  3.09e-05  9.01e-02  
 16  +4.3362e-01  +4.5860e-01  2.50e-02  8.20e-06  1.15e-03  3.35e-06  2.61e-05  6.89e-01  
 17  +4.2400e-01  +4.2621e-01  2.21e-03  7.22e-07  1.01e-04  3.12e-07  2.39e-06  9.90e-01  
 18  +4.2301e-01  +4.2304e-01  2.66e-05  8.70e-09  1.21e-06  3.61e-09  2.91e-08  9.88e-01  
 19  +4.2300e-01  +4.2300e-01  2.66e-07  8.69e-11  1.21e-08  3.61e-11  2.91e-10  9.90e-01  
 20  +4.2300e-01  +4.2300e-01  2.66e-09  8.69e-13  1.21e-10  3.61e-13  2.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.2147ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:38 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:38 PM: Optimal value: 4.230e-01
(CVXPY) Oct 06 03:54:38 PM: Compilation took 1.578e-02 seconds
(CVXPY) Oct 06 03:54:38 PM: Solver (including time spent in interface) took 6.745e-02 seconds
Iteration: 2, Objective: 0.4230
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:39 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:39 PM: Finished problem compilation (took 1.708e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 24978
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.79e-01  6.92e+01  1.00e+00  1.00e+00   ------   
  1  +5.9927e-01  +5.0159e+02  5.01e+02  3.63e-01  4.03e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4563e-01  +7.1112e+01  7.06e+01  1.41e-01  1.95e+01  9.93e-03  2.35e-01  7.84e-01  
  3  +5.1000e-01  +1.6354e+01  1.58e+01  9.98e-02  1.34e+01  2.27e-05  2.30e-01  1.05e-01  
  4  +5.0053e-01  +1.7240e+00  1.22e+00  1.17e-02  1.60e+00  8.17e-06  1.70e-01  5.33e-01  
  5  +5.0012e-01  +8.6565e-01  3.66e-01  3.48e-03  4.82e-01  3.15e-06  7.11e-02  6.16e-01  
  6  +5.0001e-01  +8.1003e-01  3.10e-01  2.89e-03  4.00e-01  4.47e-06  3.06e-02  6.43e-01  
  7  +4.9687e-01  +7.3764e-01  2.41e-01  4.50e-04  6.35e-02  6.01e-05  1.33e-03  9.90e-01  
  8  +4.9032e-01  +6.9951e-01  2.09e-01  1.63e-04  2.29e-02  1.33e-04  4.63e-04  6.57e-01  
  9  +4.8663e-01  +6.7898e-01  1.92e-01  1.12e-04  1.58e-02  1.14e-04  3.15e-04  5.57e-01  
 10  +4.8263e-01  +6.5847e-01  1.76e-01  9.21e-05  1.30e-02  8.42e-05  2.62e-04  3.77e-01  
 11  +4.7813e-01  +6.3715e-01  1.59e-01  7.61e-05  1.07e-02  4.49e-05  2.18e-04  5.42e-01  
 12  +4.5171e-01  +5.2956e-01  7.79e-02  2.80e-05  3.92e-03  2.23e-05  8.50e-05  6.66e-01  
 13  +4.4089e-01  +4.8945e-01  4.86e-02  1.71e-05  2.39e-03  1.31e-05  5.37e-05  3.85e-01  
 14  +4.3331e-01  +4.6184e-01  2.85e-02  9.75e-06  1.36e-03  6.38e-06  3.15e-05  6.22e-01  
 15  +4.3306e-01  +4.6086e-01  2.78e-02  9.47e-06  1.32e-03  5.99e-06  3.07e-05  1.33e-01  
 16  +4.2637e-01  +4.3737e-01  1.10e-02  3.70e-06  5.16e-04  2.16e-06  1.23e-05  6.87e-01  
 17  +4.2206e-01  +4.2242e-01  3.64e-04  1.22e-07  1.71e-05  5.97e-08  4.18e-07  9.73e-01  
 18  +4.2190e-01  +4.2191e-01  3.65e-06  1.22e-09  1.71e-07  5.96e-10  4.19e-09  9.90e-01  
 19  +4.2190e-01  +4.2190e-01  3.65e-08  1.22e-11  1.71e-09  5.96e-12  4.19e-11  9.90e-01  
 20  +4.2190e-01  +4.2190e-01  3.65e-10  1.22e-13  1.71e-11  5.96e-14  4.20e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.1696ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:39 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:39 PM: Optimal value: 4.219e-01
(CVXPY) Oct 06 03:54:39 PM: Compilation took 1.708e-02 seconds
(CVXPY) Oct 06 03:54:39 PM: Solver (including time spent in interface) took 7.949e-02 seconds
Iteration: 3, Objective: 0.4219
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:39 PM: Your problem has 2524 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:39 PM: Finished problem compilation (took 2.416e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2524
  constraints   = 5024
  nnz(P)        = 0
  nnz(A)        = 25066
  cones (total) = 1
    : Nonnegative = 1,  numel = 5024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5010e+03  2.50e+03  9.79e-01  6.92e+01  1.00e+00  1.00e+00   ------   
  1  +5.9912e-01  +5.0183e+02  5.01e+02  3.63e-01  4.03e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4554e-01  +7.1037e+01  7.05e+01  1.41e-01  1.95e+01  9.96e-03  2.35e-01  7.85e-01  
  3  +5.0999e-01  +1.6351e+01  1.58e+01  9.98e-02  1.34e+01  2.28e-05  2.30e-01  1.06e-01  
  4  +5.0054e-01  +1.7373e+00  1.24e+00  1.18e-02  1.61e+00  8.21e-06  1.70e-01  5.31e-01  
  5  +5.0012e-01  +8.7017e-01  3.70e-01  3.52e-03  4.88e-01  3.24e-06  7.07e-02  6.26e-01  
  6  +4.9999e-01  +8.2774e-01  3.28e-01  3.03e-03  4.20e-01  5.02e-06  2.92e-02  6.69e-01  
  7  +4.9601e-01  +7.4978e-01  2.54e-01  3.94e-04  5.56e-02  7.55e-05  1.15e-03  9.90e-01  
  8  +4.9131e-01  +7.1802e-01  2.27e-01  1.92e-04  2.71e-02  1.16e-04  5.47e-04  5.91e-01  
  9  +4.9117e-01  +7.1618e-01  2.25e-01  1.89e-04  2.66e-02  1.13e-04  5.38e-04  4.64e-02  
 10  +4.8644e-01  +6.8266e-01  1.96e-01  1.23e-04  1.73e-02  9.62e-05  3.47e-04  5.69e-01  
 11  +4.8152e-01  +6.6224e-01  1.81e-01  9.41e-05  1.32e-02  9.50e-05  2.69e-04  2.80e-01  
 12  +4.7934e-01  +6.5032e-01  1.71e-01  8.68e-05  1.22e-02  6.96e-05  2.50e-04  2.74e-01  
 13  +4.6982e-01  +6.0596e-01  1.36e-01  6.14e-05  8.62e-03  2.08e-05  1.81e-04  7.60e-01  
 14  +4.4521e-01  +5.0764e-01  6.24e-02  2.29e-05  3.20e-03  8.07e-06  7.14e-05  7.49e-01  
 15  +4.4268e-01  +4.9819e-01  5.55e-02  2.01e-05  2.81e-03  7.19e-06  6.33e-05  1.45e-01  
 16  +4.3948e-01  +4.8506e-01  4.56e-02  1.59e-05  2.22e-03  6.45e-06  5.09e-05  9.58e-01  
 17  +4.3780e-01  +4.7896e-01  4.12e-02  1.43e-05  1.99e-03  5.91e-06  4.58e-05  2.73e-01  
 18  +4.2805e-01  +4.4390e-01  1.58e-02  5.43e-06  7.59e-04  2.26e-06  1.82e-05  7.05e-01  
 19  +4.2221e-01  +4.2315e-01  9.36e-04  3.21e-07  4.49e-05  1.20e-07  1.12e-06  9.78e-01  
 20  +4.2181e-01  +4.2182e-01  1.52e-05  5.24e-09  7.31e-07  1.78e-09  1.84e-08  9.88e-01  
 21  +4.2180e-01  +4.2180e-01  1.52e-07  5.23e-11  7.31e-09  1.78e-11  1.84e-10  9.90e-01  
 22  +4.2180e-01  +4.2180e-01  1.52e-09  5.23e-13  7.31e-11  1.78e-13  1.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.8723ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:39 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:39 PM: Optimal value: 4.218e-01
(CVXPY) Oct 06 03:54:39 PM: Compilation took 2.416e-02 seconds
(CVXPY) Oct 06 03:54:39 PM: Solver (including time spent in interface) took 8.601e-02 seconds
FULL MODEL:
  Accruacy: 0.5774
  Our objective: 0.1548

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.152)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.0004)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.218261957168579
Best over terms:
  Our final objective: 0.15199999999999997
    Its accruacy: 0.576
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15199999999999997
  Highest accruacy: 0.576
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

