Command:
python test_script.py -s constant_subclass -d 6 -n 1000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.17600000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 6.

Computed total variation: 0.26
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:25 PM: Your problem has 513 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:25 PM: Finished problem compilation (took 4.800e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 513
  constraints   = 1013
  nnz(P)        = 0
  nnz(A)        = 4513
  cones (total) = 1
    : Nonnegative = 1,  numel = 1013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9988e-01  +5.0074e+02  5.00e+02  9.53e-01  3.06e+01  1.00e+00  1.00e+00   ------   
  1  +5.9278e-01  +1.0326e+02  1.03e+02  3.71e-01  1.84e+01  3.92e-03  5.27e-01  6.27e-01  
  2  +5.4042e-01  +1.3770e+01  1.32e+01  1.30e-01  8.02e+00  1.16e-02  2.39e-01  8.40e-01  
  3  +5.0584e-01  +2.9321e+00  2.43e+00  4.94e-02  2.91e+00  2.28e-05  2.24e-01  2.81e-01  
  4  +5.0040e-01  +7.2554e-01  2.25e-01  4.90e-03  3.03e-01  8.38e-06  6.18e-02  8.64e-01  
  5  +4.9867e-01  +8.3428e-01  3.36e-01  3.93e-03  2.46e-01  4.43e-05  1.41e-02  8.55e-01  
  6  +4.8803e-01  +7.3637e-01  2.48e-01  7.29e-04  4.61e-02  1.60e-04  2.32e-03  8.37e-01  
  7  +4.7054e-01  +5.7942e-01  1.09e-01  2.70e-04  1.70e-02  3.97e-05  9.62e-04  7.47e-01  
  8  +4.5348e-01  +4.9204e-01  3.86e-02  8.48e-05  5.32e-03  1.19e-05  3.45e-04  8.44e-01  
  9  +4.4629e-01  +4.5945e-01  1.32e-02  2.79e-05  1.75e-03  5.80e-06  1.20e-04  9.90e-01  
 10  +4.4219e-01  +4.4245e-01  2.65e-04  5.58e-07  3.50e-05  9.93e-08  2.50e-06  9.83e-01  
 11  +4.4210e-01  +4.4210e-01  2.65e-06  5.57e-09  3.49e-07  9.92e-10  2.50e-08  9.90e-01  
 12  +4.4210e-01  +4.4210e-01  2.65e-08  5.57e-11  3.49e-09  9.92e-12  2.50e-10  9.90e-01  
 13  +4.4210e-01  +4.4210e-01  2.65e-10  5.57e-13  3.49e-11  9.93e-14  2.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.59ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:25 PM: Optimal value: 4.421e-01
(CVXPY) Oct 06 03:58:25 PM: Compilation took 4.800e-02 seconds
(CVXPY) Oct 06 03:58:25 PM: Solver (including time spent in interface) took 9.780e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:25 PM: Your problem has 523 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:25 PM: Finished problem compilation (took 9.759e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 523
  constraints   = 1023
  nnz(P)        = 0
  nnz(A)        = 5552
  cones (total) = 1
    : Nonnegative = 1,  numel = 1023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0117e+02  5.01e+02  9.54e-01  3.24e+01  1.00e+00  1.01e+00   ------   
  1  +5.9143e-01  +1.0352e+02  1.03e+02  3.75e-01  1.93e+01  3.91e-03  5.33e-01  6.25e-01  
  2  +5.3839e-01  +1.3359e+01  1.28e+01  1.27e-01  8.17e+00  1.20e-02  2.35e-01  8.61e-01  
  3  +5.0451e-01  +2.6654e+00  2.16e+00  4.45e-02  2.77e+00  2.24e-05  2.13e-01  3.88e-01  
  4  +5.0099e-01  +1.0609e+00  5.60e-01  1.21e-02  7.79e-01  9.71e-06  9.20e-02  6.16e-01  
  5  +4.9698e-01  +1.2519e+00  7.55e-01  6.09e-03  4.05e-01  6.00e-05  1.84e-02  9.83e-01  
  6  +4.8351e-01  +9.6966e-01  4.86e-01  1.67e-03  1.12e-01  9.89e-05  4.96e-03  7.33e-01  
  7  +4.7395e-01  +8.1868e-01  3.45e-01  1.04e-03  6.92e-02  8.32e-05  3.13e-03  4.83e-01  
  8  +4.6551e-01  +7.2824e-01  2.63e-01  7.13e-04  4.74e-02  7.10e-05  2.19e-03  3.80e-01  
  9  +4.5457e-01  +6.1271e-01  1.58e-01  3.66e-04  2.43e-02  5.95e-05  1.15e-03  6.87e-01  
 10  +4.5229e-01  +5.7804e-01  1.26e-01  3.45e-04  2.28e-02  3.91e-05  1.13e-03  2.33e-01  
 11  +4.5285e-01  +5.5867e-01  1.06e-01  3.10e-04  2.05e-02  2.72e-05  1.12e-03  6.10e-02  
 12  +4.4839e-01  +5.3978e-01  9.14e-02  2.35e-04  1.55e-02  2.92e-05  7.97e-04  4.38e-01  
 13  +4.4405e-01  +5.3075e-01  8.67e-02  1.74e-04  1.15e-02  3.78e-05  5.40e-04  4.49e-01  
 14  +4.3990e-01  +5.1243e-01  7.25e-02  1.66e-04  1.09e-02  2.63e-05  5.37e-04  7.97e-02  
 15  +4.2550e-01  +4.6107e-01  3.56e-02  5.95e-05  3.92e-03  1.86e-05  1.89e-04  6.69e-01  
 16  +4.1314e-01  +4.1544e-01  2.30e-03  3.68e-06  2.42e-04  1.09e-06  1.23e-05  9.73e-01  
 17  +4.1211e-01  +4.1214e-01  2.40e-05  3.84e-08  2.52e-06  1.10e-08  1.29e-07  9.90e-01  
 18  +4.1210e-01  +4.1210e-01  2.40e-07  3.83e-10  2.52e-08  1.10e-10  1.29e-09  9.90e-01  
 19  +4.1210e-01  +4.1210e-01  2.40e-09  3.83e-12  2.52e-10  1.10e-12  1.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7446ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:25 PM: Optimal value: 4.121e-01
(CVXPY) Oct 06 03:58:25 PM: Compilation took 9.759e-03 seconds
(CVXPY) Oct 06 03:58:25 PM: Solver (including time spent in interface) took 1.010e-02 seconds
Iteration: 2, Objective: 0.4121
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:25 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:25 PM: Finished problem compilation (took 9.097e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 5977
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0128e+02  5.01e+02  9.55e-01  3.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.9094e-01  +1.0375e+02  1.03e+02  3.78e-01  1.93e+01  3.90e-03  5.39e-01  6.24e-01  
  2  +5.3787e-01  +1.3295e+01  1.28e+01  1.28e-01  8.07e+00  1.23e-02  2.38e-01  8.67e-01  
  3  +5.0426e-01  +2.6140e+00  2.11e+00  4.40e-02  2.72e+00  2.28e-05  2.12e-01  4.21e-01  
  4  +5.0080e-01  +1.0019e+00  5.01e-01  1.09e-02  7.01e-01  9.29e-06  8.09e-02  6.62e-01  
  5  +4.9682e-01  +1.0827e+00  5.86e-01  5.36e-03  3.55e-01  4.51e-05  1.64e-02  8.73e-01  
  6  +4.8561e-01  +9.3686e-01  4.51e-01  1.73e-03  1.16e-01  8.97e-05  5.02e-03  7.02e-01  
  7  +4.7356e-01  +8.2799e-01  3.54e-01  9.83e-04  6.55e-02  9.50e-05  2.84e-03  4.71e-01  
  8  +4.7047e-01  +7.9730e-01  3.27e-01  8.31e-04  5.53e-02  1.06e-04  2.40e-03  3.49e-01  
  9  +4.5818e-01  +7.1936e-01  2.61e-01  5.83e-04  3.87e-02  9.77e-05  1.73e-03  4.41e-01  
 10  +4.2602e-01  +5.4453e-01  1.19e-01  2.28e-04  1.50e-02  4.70e-05  7.34e-04  7.50e-01  
 11  +4.0165e-01  +4.3876e-01  3.71e-02  6.91e-05  4.52e-03  1.78e-05  2.45e-04  8.78e-01  
 12  +3.9091e-01  +3.9755e-01  6.64e-03  1.22e-05  7.95e-04  3.36e-06  4.59e-05  8.79e-01  
 13  +3.8843e-01  +3.8851e-01  8.11e-05  1.48e-07  9.69e-06  3.63e-08  5.74e-07  9.89e-01  
 14  +3.8840e-01  +3.8840e-01  8.11e-07  1.48e-09  9.69e-08  3.63e-10  5.74e-09  9.90e-01  
 15  +3.8840e-01  +3.8840e-01  8.11e-09  1.48e-11  9.69e-10  3.63e-12  5.74e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9321ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:25 PM: Optimal value: 3.884e-01
(CVXPY) Oct 06 03:58:25 PM: Compilation took 9.097e-03 seconds
(CVXPY) Oct 06 03:58:25 PM: Solver (including time spent in interface) took 1.013e-02 seconds
Iteration: 3, Objective: 0.3884
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:25 PM: Your problem has 543 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:26 PM: Finished problem compilation (took 9.080e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 543
  constraints   = 1043
  nnz(P)        = 0
  nnz(A)        = 6228
  cones (total) = 1
    : Nonnegative = 1,  numel = 1043

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0129e+02  5.01e+02  9.55e-01  3.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8995e-01  +1.0383e+02  1.03e+02  3.80e-01  1.92e+01  3.90e-03  5.39e-01  6.23e-01  
  2  +5.3717e-01  +1.3148e+01  1.26e+01  1.26e-01  7.93e+00  1.24e-02  2.35e-01  8.75e-01  
  3  +5.0411e-01  +2.5899e+00  2.09e+00  4.36e-02  2.69e+00  2.32e-05  2.07e-01  4.44e-01  
  4  +5.0085e-01  +1.0707e+00  5.70e-01  1.24e-02  7.92e-01  1.02e-05  8.37e-02  6.31e-01  
  5  +4.9297e-01  +1.3755e+00  8.82e-01  4.63e-03  3.09e-01  9.05e-05  1.30e-02  9.85e-01  
  6  +4.8170e-01  +1.0981e+00  6.16e-01  2.05e-03  1.37e-01  1.09e-04  5.82e-03  6.16e-01  
  7  +4.7269e-01  +9.2547e-01  4.53e-01  1.17e-03  7.80e-02  1.33e-04  3.33e-03  6.43e-01  
  8  +4.6635e-01  +8.5819e-01  3.92e-01  9.23e-04  6.15e-02  1.32e-04  2.66e-03  3.38e-01  
  9  +4.5130e-01  +6.9395e-01  2.43e-01  5.56e-04  3.68e-02  1.04e-04  1.67e-03  8.39e-01  
 10  +4.1199e-01  +4.9803e-01  8.60e-02  1.66e-04  1.09e-02  3.23e-05  5.49e-04  7.43e-01  
 11  +4.0196e-01  +4.5704e-01  5.51e-02  1.05e-04  6.86e-03  2.19e-05  3.61e-04  4.18e-01  
 12  +3.8630e-01  +3.9390e-01  7.60e-03  1.43e-05  9.30e-04  3.15e-06  5.31e-05  9.06e-01  
 13  +3.8359e-01  +3.8383e-01  2.37e-04  4.43e-07  2.89e-05  9.61e-08  1.70e-06  9.75e-01  
 14  +3.8350e-01  +3.8350e-01  2.37e-06  4.44e-09  2.90e-07  9.63e-10  1.71e-08  9.90e-01  
 15  +3.8350e-01  +3.8350e-01  2.37e-08  4.44e-11  2.90e-09  9.63e-12  1.71e-10  9.90e-01  
 16  +3.8350e-01  +3.8350e-01  2.37e-10  4.44e-13  2.90e-11  9.63e-14  1.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.8233ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:26 PM: Optimal value: 3.835e-01
(CVXPY) Oct 06 03:58:26 PM: Compilation took 9.080e-03 seconds
(CVXPY) Oct 06 03:58:26 PM: Solver (including time spent in interface) took 1.054e-02 seconds
Iteration: 4, Objective: 0.3835
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:26 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:26 PM: Finished problem compilation (took 2.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6263
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0121e+02  5.01e+02  9.55e-01  3.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.8940e-01  +1.0382e+02  1.03e+02  3.80e-01  1.92e+01  3.90e-03  5.39e-01  6.23e-01  
  2  +5.3699e-01  +1.3110e+01  1.26e+01  1.25e-01  7.87e+00  1.24e-02  2.33e-01  8.77e-01  
  3  +5.0399e-01  +2.5679e+00  2.06e+00  4.31e-02  2.66e+00  2.32e-05  2.05e-01  4.58e-01  
  4  +5.0069e-01  +1.0317e+00  5.31e-01  1.15e-02  7.37e-01  1.00e-05  7.55e-02  6.63e-01  
  5  +4.9361e-01  +1.4358e+00  9.42e-01  5.55e-03  3.70e-01  7.96e-05  1.57e-02  9.07e-01  
  6  +4.7827e-01  +1.1276e+00  6.49e-01  1.99e-03  1.33e-01  1.11e-04  5.63e-03  6.61e-01  
  7  +4.6781e-01  +9.8518e-01  5.17e-01  1.28e-03  8.56e-02  1.24e-04  3.65e-03  4.55e-01  
  8  +4.6579e-01  +9.1231e-01  4.47e-01  1.23e-03  8.18e-02  1.10e-04  3.60e-03  1.53e-01  
  9  +4.4662e-01  +7.5961e-01  3.13e-01  7.10e-04  4.71e-02  9.33e-05  2.13e-03  4.83e-01  
 10  +4.4187e-01  +6.7584e-01  2.34e-01  5.42e-04  3.58e-02  1.13e-04  1.71e-03  8.66e-01  
 11  +4.0567e-01  +4.8767e-01  8.20e-02  1.68e-04  1.10e-02  3.40e-05  5.75e-04  7.40e-01  
 12  +3.9555e-01  +4.4766e-01  5.21e-02  1.04e-04  6.81e-03  2.30e-05  3.74e-04  5.44e-01  
 13  +3.8718e-01  +4.1620e-01  2.90e-02  5.63e-05  3.67e-03  1.45e-05  2.10e-04  6.53e-01  
 14  +3.7826e-01  +3.8244e-01  4.17e-03  8.00e-06  5.21e-04  1.92e-06  3.17e-05  8.59e-01  
 15  +3.7672e-01  +3.7678e-01  5.57e-05  1.06e-07  6.93e-06  2.40e-08  4.30e-07  9.88e-01  
 16  +3.7670e-01  +3.7670e-01  5.57e-07  1.06e-09  6.92e-08  2.39e-10  4.30e-09  9.90e-01  
 17  +3.7670e-01  +3.7670e-01  5.57e-09  1.06e-11  6.92e-10  2.40e-12  4.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.8052ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:26 PM: Optimal value: 3.767e-01
(CVXPY) Oct 06 03:58:26 PM: Compilation took 2.513e-03 seconds
(CVXPY) Oct 06 03:58:26 PM: Solver (including time spent in interface) took 1.741e-02 seconds
Iteration: 5, Objective: 0.3767
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:26 PM: Your problem has 554 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:26 PM: Finished problem compilation (took 5.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 554
  constraints   = 1054
  nnz(P)        = 0
  nnz(A)        = 6451
  cones (total) = 1
    : Nonnegative = 1,  numel = 1054

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0122e+02  5.01e+02  9.55e-01  3.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.8903e-01  +1.0383e+02  1.03e+02  3.81e-01  1.91e+01  3.90e-03  5.39e-01  6.23e-01  
  2  +5.3671e-01  +1.3046e+01  1.25e+01  1.25e-01  7.76e+00  1.24e-02  2.32e-01  8.80e-01  
  3  +5.0391e-01  +2.5522e+00  2.05e+00  4.29e-02  2.64e+00  2.34e-05  2.02e-01  4.70e-01  
  4  +5.0063e-01  +1.0261e+00  5.26e-01  1.13e-02  7.27e-01  1.01e-05  7.25e-02  6.71e-01  
  5  +4.8945e-01  +1.6938e+00  1.20e+00  4.79e-03  3.20e-01  1.20e-04  1.33e-02  9.46e-01  
  6  +4.7473e-01  +1.2625e+00  7.88e-01  2.21e-03  1.48e-01  1.17e-04  6.27e-03  5.62e-01  
  7  +4.6349e-01  +1.0718e+00  6.08e-01  1.43e-03  9.50e-02  1.28e-04  4.08e-03  4.32e-01  
  8  +4.6651e-01  +9.8789e-01  5.21e-01  1.36e-03  9.03e-02  1.44e-04  3.92e-03  2.86e-01  
  9  +4.4997e-01  +8.2437e-01  3.74e-01  8.62e-04  5.71e-02  1.15e-04  2.57e-03  4.21e-01  
 10  +4.1988e-01  +5.8952e-01  1.70e-01  3.47e-04  2.29e-02  6.31e-05  1.11e-03  7.31e-01  
 11  +4.0770e-01  +5.2706e-01  1.19e-01  2.35e-04  1.54e-02  4.64e-05  7.82e-04  3.45e-01  
 12  +3.9319e-01  +4.5129e-01  5.81e-02  1.11e-04  7.27e-03  2.77e-05  3.92e-04  6.87e-01  
 13  +3.8405e-01  +4.1053e-01  2.65e-02  5.03e-05  3.28e-03  1.30e-05  1.85e-04  6.06e-01  
 14  +3.7691e-01  +3.8042e-01  3.51e-03  6.64e-06  4.32e-04  1.67e-06  2.58e-05  8.82e-01  
 15  +3.7573e-01  +3.7581e-01  8.13e-05  1.54e-07  9.99e-06  3.93e-08  6.08e-07  9.87e-01  
 16  +3.7570e-01  +3.7570e-01  8.15e-07  1.54e-09  1.00e-07  3.94e-10  6.10e-09  9.90e-01  
 17  +3.7570e-01  +3.7570e-01  8.16e-09  1.54e-11  1.00e-09  3.94e-12  6.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.399ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:26 PM: Optimal value: 3.757e-01
(CVXPY) Oct 06 03:58:26 PM: Compilation took 5.005e-03 seconds
(CVXPY) Oct 06 03:58:26 PM: Solver (including time spent in interface) took 1.984e-02 seconds
Iteration: 6, Objective: 0.3757
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:58:26 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:58:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:58:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:58:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:58:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:58:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:58:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:58:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:58:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:58:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:58:26 PM: Finished problem compilation (took 1.016e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 6566
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0122e+02  5.01e+02  9.55e-01  3.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.8904e-01  +1.0380e+02  1.03e+02  3.81e-01  1.90e+01  3.91e-03  5.38e-01  6.23e-01  
  2  +5.3652e-01  +1.2999e+01  1.25e+01  1.24e-01  7.69e+00  1.24e-02  2.31e-01  8.82e-01  
  3  +5.0387e-01  +2.5409e+00  2.04e+00  4.27e-02  2.63e+00  2.34e-05  2.01e-01  4.77e-01  
  4  +5.0060e-01  +1.0282e+00  5.28e-01  1.14e-02  7.29e-01  1.02e-05  7.15e-02  6.72e-01  
  5  +4.8970e-01  +1.7315e+00  1.24e+00  4.95e-03  3.30e-01  1.21e-04  1.37e-02  9.54e-01  
  6  +4.7463e-01  +1.2761e+00  8.01e-01  2.26e-03  1.51e-01  1.15e-04  6.42e-03  5.62e-01  
  7  +4.6358e-01  +1.0767e+00  6.13e-01  1.45e-03  9.64e-02  1.29e-04  4.15e-03  4.46e-01  
  8  +4.6911e-01  +9.9057e-01  5.21e-01  1.30e-03  8.67e-02  1.80e-04  3.71e-03  4.87e-01  
  9  +4.4365e-01  +7.3361e-01  2.90e-01  6.33e-04  4.18e-02  1.09e-04  1.91e-03  6.47e-01  
 10  +4.0584e-01  +5.0051e-01  9.47e-02  1.92e-04  1.25e-02  3.02e-05  6.45e-04  7.46e-01  
 11  +3.9634e-01  +4.5891e-01  6.26e-02  1.24e-04  8.11e-03  2.37e-05  4.36e-04  5.17e-01  
 12  +3.8843e-01  +4.2700e-01  3.86e-02  7.45e-05  4.85e-03  1.60e-05  2.69e-04  4.83e-01  
 13  +3.7871e-01  +3.8751e-01  8.80e-03  1.67e-05  1.09e-03  3.59e-06  6.40e-05  7.83e-01  
 14  +3.7595e-01  +3.7659e-01  6.37e-04  1.21e-06  7.84e-05  3.26e-07  4.76e-06  9.82e-01  
 15  +3.7570e-01  +3.7571e-01  7.06e-06  1.34e-08  8.69e-07  3.59e-09  5.31e-08  9.89e-01  
 16  +3.7570e-01  +3.7570e-01  7.07e-08  1.34e-10  8.69e-09  3.60e-11  5.31e-10  9.90e-01  
 17  +3.7570e-01  +3.7570e-01  7.07e-10  1.34e-12  8.69e-11  3.60e-13  5.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.2139ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:58:26 PM: Problem status: optimal
(CVXPY) Oct 06 03:58:26 PM: Optimal value: 3.757e-01
(CVXPY) Oct 06 03:58:26 PM: Compilation took 1.016e-02 seconds
(CVXPY) Oct 06 03:58:26 PM: Solver (including time spent in interface) took 1.012e-02 seconds
FULL MODEL:
  Accruacy: 0.623
  Our objective: 0.24600000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)                       <-- (term's our objective: 0.116)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0)                       <-- (term's our objective: 0.094)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0) <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1)            <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.008)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 7.240342378616333
Best over terms:
  Our final objective: 0.11599999999999999
    Its accruacy: 0.558
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.11599999999999999
  Highest accruacy: 0.558
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

