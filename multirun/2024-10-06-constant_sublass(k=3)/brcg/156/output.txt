Command:
python test_script.py -s constant_subclass -d 4 -n 50000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.156
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.15600000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:45 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:45 PM: Finished problem compilation (took 2.051e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5398e+02  7.53e+02  1.44e-01  5.59e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1147e-01  +1.6830e+02  1.68e+02  1.31e-01  5.07e+01  1.84e-05  2.26e-01  5.78e-02  
  4  +5.0019e-01  +2.8833e+00  2.38e+00  7.12e-03  2.73e+00  1.59e-06  1.63e-01  8.87e-01  
  5  +5.0002e-01  +9.3465e-01  4.35e-01  1.31e-03  5.07e-01  8.76e-06  7.97e-02  9.90e-01  
  6  +5.0000e-01  +6.2817e-01  1.28e-01  3.86e-04  1.49e-01  9.62e-06  1.16e-02  8.72e-01  
  7  +4.9963e-01  +6.6377e-01  1.64e-01  1.40e-04  5.46e-02  3.02e-04  4.54e-04  9.68e-01  
  8  +4.9755e-01  +6.7462e-01  1.77e-01  3.12e-05  1.21e-02  1.43e-03  9.25e-05  9.07e-01  
  9  +4.9023e-01  +6.5268e-01  1.62e-01  8.28e-06  3.23e-03  4.46e-03  2.43e-05  7.69e-01  
 10  +4.7743e-01  +5.6337e-01  8.59e-02  5.78e-06  2.24e-03  3.18e-05  1.86e-05  4.74e-01  
 11  +4.5901e-01  +4.7613e-01  1.71e-02  8.56e-07  3.32e-04  6.28e-06  2.95e-06  8.55e-01  
 12  +4.5373e-01  +4.5585e-01  2.12e-03  9.22e-08  3.58e-05  4.75e-07  3.70e-07  9.19e-01  
 13  +4.5297e-01  +4.5300e-01  2.78e-05  1.16e-09  4.49e-07  5.80e-09  4.87e-09  9.88e-01  
 14  +4.5296e-01  +4.5296e-01  2.78e-07  1.16e-11  4.49e-09  5.80e-11  4.87e-11  9.90e-01  
 15  +4.5296e-01  +4.5296e-01  2.80e-09  1.17e-13  4.53e-11  8.40e-13  6.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 515.5189ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:45 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:45 PM: Optimal value: 4.530e-01
(CVXPY) Oct 06 03:51:45 PM: Compilation took 2.051e-01 seconds
(CVXPY) Oct 06 03:51:45 PM: Solver (including time spent in interface) took 5.601e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:46 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:46 PM: Finished problem compilation (took 1.852e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 224924
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  2.07e+02  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +4.8435e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5112e-01  +7.5338e+02  7.53e+02  1.44e-01  6.00e+01  8.22e-03  2.28e-01  7.24e-01  
  3  +5.1144e-01  +1.6798e+02  1.67e+02  1.31e-01  5.44e+01  1.84e-05  2.26e-01  5.83e-02  
  4  +5.0016e-01  +2.5703e+00  2.07e+00  6.19e-03  2.55e+00  1.64e-06  1.55e-01  9.90e-01  
  5  +5.0008e-01  +1.5555e+00  1.06e+00  3.17e-03  1.31e+00  3.97e-06  1.19e-01  3.74e-01  
  6  +5.0002e-01  +8.0476e-01  3.05e-01  9.12e-04  3.79e-01  3.58e-06  4.52e-02  6.99e-01  
  7  +5.0000e-01  +7.4920e-01  2.49e-01  7.33e-04  3.05e-01  8.85e-06  9.94e-03  8.54e-01  
  8  +4.9934e-01  +7.3780e-01  2.38e-01  8.40e-05  3.53e-02  3.26e-04  2.31e-04  9.81e-01  
  9  +4.9453e-01  +7.1647e-01  2.22e-01  1.21e-05  5.08e-03  2.08e-03  3.23e-05  8.77e-01  
 10  +4.9238e-01  +6.8925e-01  1.97e-01  9.60e-06  4.03e-03  1.29e-03  2.56e-05  5.02e-01  
 11  +4.9155e-01  +6.8009e-01  1.89e-01  9.35e-06  3.92e-03  8.93e-04  2.51e-05  2.38e-01  
 12  +4.8976e-01  +6.6944e-01  1.80e-01  8.63e-06  3.62e-03  6.55e-04  2.32e-05  2.72e-01  
 13  +4.8889e-01  +6.6426e-01  1.75e-01  8.40e-06  3.53e-03  5.30e-04  2.27e-05  1.60e-01  
 14  +4.8498e-01  +6.4560e-01  1.61e-01  7.30e-06  3.06e-03  2.74e-04  1.99e-05  4.56e-01  
 15  +4.8163e-01  +6.3098e-01  1.49e-01  6.68e-06  2.80e-03  1.43e-04  1.84e-05  3.98e-01  
 16  +4.6803e-01  +5.8042e-01  1.12e-01  4.27e-06  1.79e-03  1.04e-04  1.21e-05  3.93e-01  
 17  +4.6220e-01  +5.5931e-01  9.71e-02  3.59e-06  1.50e-03  5.85e-05  1.03e-05  3.81e-01  
 18  +4.3065e-01  +4.4864e-01  1.80e-02  5.79e-07  2.41e-04  6.25e-07  1.79e-06  9.01e-01  
 19  +4.2226e-01  +4.2257e-01  3.12e-04  9.85e-09  4.10e-06  6.20e-09  3.13e-08  9.84e-01  
 20  +4.2210e-01  +4.2210e-01  3.12e-06  9.85e-11  4.10e-08  6.20e-11  3.13e-10  9.90e-01  
 21  +4.2210e-01  +4.2210e-01  3.12e-08  9.86e-13  4.10e-10  6.44e-13  3.25e-12  9.90e-01  
 22  +4.2210e-01  +4.2210e-01  3.12e-10  9.91e-15  4.11e-12  6.68e-15  3.37e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 844.6917ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:47 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 03:51:47 PM: Compilation took 1.852e-01 seconds
(CVXPY) Oct 06 03:51:47 PM: Solver (including time spent in interface) took 9.000e-01 seconds
FULL MODEL:
  Accruacy: 0.578
  Our objective: 0.15600000000000006

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.156)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.509640216827393
Best over terms:
  Our final objective: 0.15600000000000006
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15600000000000006
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

