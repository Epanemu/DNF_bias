Command:
python test_script.py -s constant_subclass -d 5 -n 100 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.19999999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.38
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:14 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:15 PM: Finished problem compilation (took 4.123e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9645e-01  +5.0996e+01  5.05e+01  8.62e-01  8.49e+00  1.00e+00  1.04e+00   ------   
  1  +5.9341e-01  +1.0444e+01  9.85e+00  3.18e-01  4.67e+00  3.97e-03  5.21e-01  6.47e-01  
  2  +5.2416e-01  +1.4446e+00  9.20e-01  6.09e-02  1.08e+00  1.17e-02  1.56e-01  9.90e-01  
  3  +5.1773e-01  +1.3512e+00  8.33e-01  4.41e-02  7.91e-01  1.30e-02  1.15e-01  2.93e-01  
  4  +4.9119e-01  +1.1342e+00  6.43e-01  2.05e-02  3.75e-01  1.18e-02  5.97e-02  6.85e-01  
  5  +4.5355e-01  +7.9201e-01  3.38e-01  7.54e-03  1.38e-01  7.32e-03  2.44e-02  6.12e-01  
  6  +4.1680e-01  +5.2915e-01  1.12e-01  2.60e-03  4.67e-02  1.32e-03  1.04e-02  7.05e-01  
  7  +3.9237e-01  +3.9900e-01  6.63e-03  1.45e-04  2.58e-03  1.15e-05  7.13e-04  9.74e-01  
  8  +3.9012e-01  +3.9020e-01  7.18e-05  1.55e-06  2.76e-05  1.23e-07  7.83e-06  9.89e-01  
  9  +3.9010e-01  +3.9010e-01  7.18e-07  1.55e-08  2.76e-07  1.23e-09  7.83e-08  9.90e-01  
 10  +3.9010e-01  +3.9010e-01  7.18e-09  1.55e-10  2.76e-09  1.23e-11  7.83e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 705.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:15 PM: Optimal value: 3.901e-01
(CVXPY) Oct 06 03:53:15 PM: Compilation took 4.123e-02 seconds
(CVXPY) Oct 06 03:53:15 PM: Solver (including time spent in interface) took 5.252e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:15 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:15 PM: Finished problem compilation (took 9.802e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 530
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9399e-01  +5.1018e+01  5.05e+01  8.69e-01  8.80e+00  1.00e+00  1.04e+00   ------   
  1  +5.8180e-01  +1.0555e+01  9.97e+00  3.34e-01  4.76e+00  3.95e-03  5.32e-01  6.40e-01  
  2  +5.1638e-01  +1.5088e+00  9.92e-01  6.38e-02  1.17e+00  1.29e-02  1.62e-01  9.90e-01  
  3  +4.9350e-01  +1.1629e+00  6.69e-01  2.77e-02  5.24e-01  1.30e-02  7.59e-02  5.84e-01  
  4  +4.5565e-01  +8.4061e-01  3.85e-01  1.06e-02  2.03e-01  9.25e-03  3.16e-02  6.34e-01  
  5  +4.2493e-01  +6.6701e-01  2.42e-01  5.09e-03  9.83e-02  6.46e-03  1.57e-02  5.68e-01  
  6  +4.0389e-01  +5.7768e-01  1.74e-01  3.22e-03  6.20e-02  4.38e-03  1.04e-02  4.01e-01  
  7  +3.6880e-01  +4.1796e-01  4.92e-02  9.10e-04  1.74e-02  4.40e-04  3.19e-03  8.33e-01  
  8  +3.5111e-01  +3.5318e-01  2.07e-03  3.77e-05  7.13e-04  8.42e-06  1.40e-04  9.62e-01  
  9  +3.5023e-01  +3.5029e-01  6.63e-05  1.21e-06  2.28e-05  2.46e-07  4.56e-06  9.68e-01  
 10  +3.5020e-01  +3.5020e-01  7.57e-07  1.38e-08  2.60e-07  2.81e-09  5.22e-08  9.89e-01  
 11  +3.5020e-01  +3.5020e-01  7.57e-09  1.38e-10  2.60e-09  2.81e-11  5.22e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 941.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:15 PM: Optimal value: 3.502e-01
(CVXPY) Oct 06 03:53:15 PM: Compilation took 9.802e-03 seconds
(CVXPY) Oct 06 03:53:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:15 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:15 PM: Finished problem compilation (took 5.087e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 594
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9163e-01  +5.1561e+01  5.11e+01  8.73e-01  8.68e+00  1.00e+00  1.06e+00   ------   
  1  +5.6376e-01  +1.0695e+01  1.01e+01  3.43e-01  4.65e+00  3.95e-03  5.41e-01  6.37e-01  
  2  +5.0392e-01  +1.5798e+00  1.08e+00  6.22e-02  1.14e+00  1.39e-02  1.56e-01  9.90e-01  
  3  +4.5458e-01  +1.2687e+00  8.14e-01  2.54e-02  4.86e-01  1.58e-02  6.87e-02  6.42e-01  
  4  +3.9512e-01  +7.2436e-01  3.29e-01  7.75e-03  1.46e-01  6.89e-03  2.42e-02  7.06e-01  
  5  +3.5711e-01  +5.0416e-01  1.47e-01  3.44e-03  6.42e-02  1.98e-03  1.20e-02  6.36e-01  
  6  +3.3069e-01  +3.9199e-01  6.13e-02  1.30e-03  2.44e-02  7.30e-04  4.98e-03  6.67e-01  
  7  +3.1285e-01  +3.1913e-01  6.27e-03  1.32e-04  2.44e-03  4.25e-05  5.51e-04  9.37e-01  
  8  +3.1055e-01  +3.1067e-01  1.25e-04  2.62e-06  4.84e-05  7.51e-07  1.12e-05  9.80e-01  
  9  +3.1050e-01  +3.1050e-01  1.31e-06  2.75e-08  5.07e-07  7.64e-09  1.18e-07  9.90e-01  
 10  +3.1050e-01  +3.1050e-01  1.31e-08  2.75e-10  5.07e-09  7.64e-11  1.18e-09  9.90e-01  
 11  +3.1050e-01  +3.1050e-01  1.31e-10  2.75e-12  5.07e-11  7.64e-13  1.18e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 884µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:15 PM: Optimal value: 3.105e-01
(CVXPY) Oct 06 03:53:15 PM: Compilation took 5.087e-03 seconds
(CVXPY) Oct 06 03:53:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3105
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:15 PM: Your problem has 86 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:15 PM: Finished problem compilation (took 1.504e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 86
  constraints   = 136
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 136

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9138e-01  +5.1567e+01  5.11e+01  8.76e-01  8.59e+00  1.00e+00  1.06e+00   ------   
  1  +5.5868e-01  +1.0776e+01  1.02e+01  3.49e-01  4.62e+00  3.94e-03  5.46e-01  6.32e-01  
  2  +5.0075e-01  +1.6093e+00  1.11e+00  6.41e-02  1.16e+00  1.44e-02  1.61e-01  9.90e-01  
  3  +4.4765e-01  +1.1946e+00  7.47e-01  2.36e-02  4.47e-01  1.52e-02  6.43e-02  6.62e-01  
  4  +3.8815e-01  +7.0362e-01  3.15e-01  7.51e-03  1.39e-01  6.51e-03  2.36e-02  7.02e-01  
  5  +3.5571e-01  +5.2966e-01  1.74e-01  4.06e-03  7.45e-02  2.81e-03  1.41e-02  5.19e-01  
  6  +3.2506e-01  +3.7608e-01  5.10e-02  1.15e-03  2.11e-02  7.12e-04  4.40e-03  7.16e-01  
  7  +3.1180e-01  +3.1529e-01  3.49e-03  7.93e-05  1.45e-03  1.53e-05  3.23e-04  9.90e-01  
  8  +3.1085e-01  +3.1164e-01  7.93e-04  1.80e-05  3.26e-04  3.61e-06  7.38e-05  8.47e-01  
  9  +3.1063e-01  +3.1093e-01  3.05e-04  6.60e-06  1.20e-04  1.42e-06  2.77e-05  7.32e-01  
 10  +3.1050e-01  +3.1051e-01  6.74e-06  1.45e-07  2.64e-06  3.10e-08  6.14e-07  9.86e-01  
 11  +3.1050e-01  +3.1050e-01  6.75e-08  1.45e-09  2.64e-08  3.10e-10  6.15e-09  9.90e-01  
 12  +3.1050e-01  +3.1050e-01  6.75e-10  1.45e-11  2.64e-10  3.11e-12  6.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0593ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:15 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:15 PM: Optimal value: 3.105e-01
(CVXPY) Oct 06 03:53:15 PM: Compilation took 1.504e-02 seconds
(CVXPY) Oct 06 03:53:15 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.69
  Our objective: 0.38000000000000006

IF 
    (x0 = 0 AND x1 = 0)                                  <-- (term's our objective: 0.28)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.9707300662994385
Best over terms:
  Our final objective: 0.28
    Its accruacy: 0.64
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.28
  Highest accruacy: 0.64
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

