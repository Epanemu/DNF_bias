Command:
python test_script.py -s constant_subclass -d 5 -n 10000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 5.

Computed total variation: 0.1492
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:06 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:06 PM: Finished problem compilation (took 7.487e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 40011
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +5.0011e+03  5.00e+03  9.85e-01  9.27e+01  1.00e+00  1.00e+00   ------   
  1  +5.9959e-01  +1.0020e+03  1.00e+03  3.64e-01  5.42e+01  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4628e-01  +1.4308e+02  1.43e+02  1.45e-01  2.69e+01  9.84e-03  2.35e-01  7.78e-01  
  3  +5.1088e-01  +3.4043e+01  3.35e+01  1.16e-01  2.11e+01  2.35e-05  2.32e-01  8.81e-02  
  4  +5.0017e-01  +1.2169e+00  7.17e-01  4.83e-03  8.93e-01  4.38e-06  1.37e-01  9.90e-01  
  5  +5.0001e-01  +6.2835e-01  1.28e-01  8.57e-04  1.60e-01  1.60e-06  3.09e-02  8.05e-01  
  6  +4.9961e-01  +7.2802e-01  2.28e-01  9.89e-04  1.85e-01  1.82e-05  4.23e-03  9.11e-01  
  7  +4.9033e-01  +6.5986e-01  1.70e-01  5.23e-05  9.82e-03  3.38e-04  1.58e-04  9.63e-01  
  8  +4.7376e-01  +5.3331e-01  5.96e-02  1.63e-05  3.04e-03  3.50e-06  5.38e-05  8.22e-01  
  9  +4.5982e-01  +4.6917e-01  9.35e-03  2.16e-06  4.03e-04  2.89e-07  8.14e-06  9.22e-01  
 10  +4.5629e-01  +4.5657e-01  2.78e-04  5.78e-08  1.08e-05  9.36e-09  2.45e-07  9.82e-01  
 11  +4.5620e-01  +4.5620e-01  2.78e-06  5.78e-10  1.08e-07  9.37e-11  2.45e-09  9.90e-01  
 12  +4.5620e-01  +4.5620e-01  2.78e-08  5.78e-12  1.08e-09  9.60e-13  2.51e-11  9.90e-01  
 13  +4.5620e-01  +4.5620e-01  2.78e-10  5.78e-14  1.08e-11  9.84e-15  2.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.8196ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:06 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:06 PM: Optimal value: 4.562e-01
(CVXPY) Oct 06 03:55:06 PM: Compilation took 7.487e-02 seconds
(CVXPY) Oct 06 03:55:06 PM: Solver (including time spent in interface) took 7.180e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:06 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:06 PM: Finished problem compilation (took 4.222e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 49109
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0012e+03  5.00e+03  9.85e-01  9.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.9950e-01  +1.0024e+03  1.00e+03  3.65e-01  5.72e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4608e-01  +1.4267e+02  1.42e+02  1.45e-01  2.83e+01  9.88e-03  2.35e-01  7.80e-01  
  3  +5.1077e-01  +3.3803e+01  3.33e+01  1.15e-01  2.22e+01  2.35e-05  2.32e-01  9.07e-02  
  4  +5.0028e-01  +1.6172e+00  1.12e+00  7.53e-03  1.46e+00  4.92e-06  1.57e-01  7.60e-01  
  5  +5.0004e-01  +7.6750e-01  2.67e-01  1.79e-03  3.51e-01  2.00e-06  5.64e-02  7.58e-01  
  6  +4.9998e-01  +7.6823e-01  2.68e-01  1.75e-03  3.44e-01  3.70e-06  2.11e-02  7.56e-01  
  7  +4.9731e-01  +6.7503e-01  1.78e-01  1.73e-04  3.44e-02  8.16e-05  5.06e-04  9.90e-01  
  8  +4.9558e-01  +6.6544e-01  1.70e-01  1.07e-04  2.13e-02  1.06e-04  3.07e-04  5.00e-01  
  9  +4.9348e-01  +6.5543e-01  1.62e-01  7.17e-05  1.42e-02  1.22e-04  2.01e-04  4.75e-01  
 10  +4.9388e-01  +6.5973e-01  1.66e-01  5.91e-05  1.17e-02  4.71e-05  1.63e-04  8.15e-01  
 11  +4.9199e-01  +6.5207e-01  1.60e-01  4.58e-05  9.10e-03  4.02e-05  1.26e-04  4.84e-01  
 12  +4.9013e-01  +6.4554e-01  1.55e-01  4.36e-05  8.66e-03  2.74e-05  1.21e-04  3.38e-01  
 13  +4.8702e-01  +6.3317e-01  1.46e-01  3.67e-05  7.29e-03  2.70e-05  1.02e-04  1.89e-01  
 14  +4.8685e-01  +6.3252e-01  1.46e-01  3.67e-05  7.28e-03  2.66e-05  1.02e-04  1.25e-02  
 15  +4.7391e-01  +5.8392e-01  1.10e-01  2.09e-05  4.14e-03  2.29e-05  5.94e-05  4.75e-01  
 16  +4.4027e-01  +4.6414e-01  2.39e-02  3.83e-06  7.57e-04  4.18e-07  1.18e-05  9.06e-01  
 17  +4.2921e-01  +4.2982e-01  6.17e-04  9.68e-08  1.91e-05  1.88e-08  3.08e-07  9.83e-01  
 18  +4.2890e-01  +4.2891e-01  6.18e-06  9.68e-10  1.91e-07  1.88e-10  3.08e-09  9.90e-01  
 19  +4.2890e-01  +4.2890e-01  6.18e-08  9.69e-12  1.91e-09  1.90e-12  3.11e-11  9.90e-01  
 20  +4.2890e-01  +4.2890e-01  6.18e-10  9.69e-14  1.91e-11  1.91e-14  3.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 165.9527ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:06 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:06 PM: Optimal value: 4.289e-01
(CVXPY) Oct 06 03:55:06 PM: Compilation took 4.222e-02 seconds
(CVXPY) Oct 06 03:55:06 PM: Solver (including time spent in interface) took 1.780e-01 seconds
Iteration: 2, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:06 PM: Your problem has 5023 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:07 PM: Finished problem compilation (took 4.101e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5023
  constraints   = 10023
  nnz(P)        = 0
  nnz(A)        = 49809
  cones (total) = 1
    : Nonnegative = 1,  numel = 10023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0012e+03  5.00e+03  9.85e-01  9.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.9940e-01  +1.0028e+03  1.00e+03  3.65e-01  5.73e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4599e-01  +1.4251e+02  1.42e+02  1.45e-01  2.83e+01  9.90e-03  2.35e-01  7.80e-01  
  3  +5.1075e-01  +3.3771e+01  3.33e+01  1.15e-01  2.22e+01  2.36e-05  2.32e-01  9.14e-02  
  4  +5.0031e-01  +1.6911e+00  1.19e+00  8.03e-03  1.56e+00  4.99e-06  1.60e-01  7.30e-01  
  5  +5.0006e-01  +8.4615e-01  3.46e-01  2.32e-03  4.55e-01  2.20e-06  6.92e-02  6.14e-01  
  6  +4.9996e-01  +7.4161e-01  2.42e-01  1.56e-03  3.06e-01  4.06e-06  1.52e-02  9.20e-01  
  7  +4.9525e-01  +7.3366e-01  2.38e-01  1.35e-04  2.68e-02  1.38e-04  3.85e-04  9.84e-01  
  8  +4.9454e-01  +7.1927e-01  2.25e-01  9.73e-05  1.94e-02  1.25e-04  2.73e-04  5.10e-01  
  9  +4.9185e-01  +6.8997e-01  1.98e-01  6.29e-05  1.25e-02  1.05e-04  1.75e-04  5.93e-01  
 10  +4.9001e-01  +6.8099e-01  1.91e-01  5.16e-05  1.03e-02  1.04e-04  1.43e-04  2.65e-01  
 11  +4.8761e-01  +6.6529e-01  1.78e-01  4.81e-05  9.56e-03  7.14e-05  1.36e-04  2.59e-01  
 12  +4.8450e-01  +6.4884e-01  1.64e-01  4.18e-05  8.29e-03  5.87e-05  1.18e-04  2.45e-01  
 13  +4.7902e-01  +6.2518e-01  1.46e-01  3.32e-05  6.59e-03  4.85e-05  9.49e-05  2.94e-01  
 14  +4.7863e-01  +6.2307e-01  1.44e-01  3.31e-05  6.57e-03  4.56e-05  9.47e-05  3.73e-02  
 15  +4.5683e-01  +5.3569e-01  7.89e-02  1.41e-05  2.79e-03  1.99e-05  4.23e-05  6.82e-01  
 16  +4.3300e-01  +4.4784e-01  1.48e-02  2.49e-06  4.92e-04  1.97e-07  8.04e-06  9.45e-01  
 17  +4.2666e-01  +4.2699e-01  3.33e-04  5.47e-08  1.08e-05  1.46e-08  1.82e-07  9.90e-01  
 18  +4.2650e-01  +4.2651e-01  3.41e-06  5.60e-10  1.11e-07  1.50e-10  1.87e-09  9.90e-01  
 19  +4.2650e-01  +4.2650e-01  3.41e-08  5.60e-12  1.11e-09  1.50e-12  1.87e-11  9.90e-01  
 20  +4.2650e-01  +4.2650e-01  3.41e-10  5.60e-14  1.11e-11  1.51e-14  1.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.9814ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:07 PM: Optimal value: 4.265e-01
(CVXPY) Oct 06 03:55:07 PM: Compilation took 4.101e-02 seconds
(CVXPY) Oct 06 03:55:07 PM: Solver (including time spent in interface) took 1.649e-01 seconds
Iteration: 3, Objective: 0.4265
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:07 PM: Your problem has 5024 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:07 PM: Finished problem compilation (took 3.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5024
  constraints   = 10024
  nnz(P)        = 0
  nnz(A)        = 49986
  cones (total) = 1
    : Nonnegative = 1,  numel = 10024

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0012e+03  5.00e+03  9.85e-01  9.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.9938e-01  +1.0028e+03  1.00e+03  3.65e-01  5.73e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4597e-01  +1.4247e+02  1.42e+02  1.45e-01  2.83e+01  9.90e-03  2.35e-01  7.81e-01  
  3  +5.1074e-01  +3.3763e+01  3.33e+01  1.15e-01  2.22e+01  2.36e-05  2.32e-01  9.16e-02  
  4  +5.0029e-01  +1.6266e+00  1.13e+00  7.60e-03  1.48e+00  4.96e-06  1.57e-01  7.60e-01  
  5  +5.0006e-01  +8.3737e-01  3.37e-01  2.26e-03  4.43e-01  2.37e-06  6.56e-02  7.04e-01  
  6  +4.9998e-01  +8.3603e-01  3.36e-01  2.19e-03  4.29e-01  4.51e-06  2.38e-02  7.71e-01  
  7  +4.9642e-01  +7.2052e-01  2.24e-01  1.79e-04  3.56e-02  1.08e-04  5.31e-04  9.88e-01  
  8  +4.9394e-01  +7.0128e-01  2.07e-01  1.14e-04  2.27e-02  1.40e-04  3.30e-04  3.98e-01  
  9  +4.9382e-01  +6.9849e-01  2.05e-01  1.06e-04  2.10e-02  1.26e-04  3.02e-04  2.15e-01  
 10  +4.9667e-01  +7.1159e-01  2.15e-01  9.60e-05  1.91e-02  3.30e-05  2.67e-04  8.48e-01  
 11  +4.9620e-01  +7.0598e-01  2.10e-01  8.93e-05  1.78e-02  2.39e-05  2.48e-04  3.82e-01  
 12  +4.9272e-01  +6.8484e-01  1.92e-01  5.72e-05  1.14e-02  2.97e-05  1.58e-04  3.96e-01  
 13  +4.9095e-01  +6.7712e-01  1.86e-01  4.93e-05  9.80e-03  2.88e-05  1.37e-04  2.39e-01  
 14  +4.8907e-01  +6.6776e-01  1.79e-01  4.77e-05  9.49e-03  2.21e-05  1.33e-04  2.31e-01  
 15  +4.8329e-01  +6.4443e-01  1.61e-01  3.66e-05  7.27e-03  1.49e-05  1.03e-04  5.97e-01  
 16  +4.7795e-01  +6.2055e-01  1.43e-01  3.26e-05  6.46e-03  8.19e-06  9.39e-05  6.06e-01  
 17  +4.5543e-01  +5.3292e-01  7.75e-02  1.39e-05  2.76e-03  4.67e-06  4.23e-05  6.18e-01  
 18  +4.3050e-01  +4.4135e-01  1.09e-02  1.85e-06  3.65e-04  3.50e-07  6.10e-06  9.90e-01  
 19  +4.2583e-01  +4.2611e-01  2.81e-04  4.72e-08  9.32e-06  8.44e-09  1.61e-07  9.77e-01  
 20  +4.2570e-01  +4.2570e-01  2.81e-06  4.72e-10  9.32e-08  8.44e-11  1.61e-09  9.90e-01  
 21  +4.2570e-01  +4.2570e-01  2.81e-08  4.72e-12  9.32e-10  8.44e-13  1.61e-11  9.90e-01  
 22  +4.2570e-01  +4.2570e-01  2.81e-10  4.72e-14  9.32e-12  8.49e-15  1.62e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 165.3151ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:07 PM: Optimal value: 4.257e-01
(CVXPY) Oct 06 03:55:07 PM: Compilation took 3.501e-02 seconds
(CVXPY) Oct 06 03:55:07 PM: Solver (including time spent in interface) took 1.747e-01 seconds
Iteration: 4, Objective: 0.4257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:07 PM: Your problem has 5025 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:07 PM: Finished problem compilation (took 3.714e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5025
  constraints   = 10025
  nnz(P)        = 0
  nnz(A)        = 50145
  cones (total) = 1
    : Nonnegative = 1,  numel = 10025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0012e+03  5.00e+03  9.85e-01  9.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.9938e-01  +1.0028e+03  1.00e+03  3.65e-01  5.73e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4596e-01  +1.4244e+02  1.42e+02  1.45e-01  2.83e+01  9.90e-03  2.35e-01  7.81e-01  
  3  +5.1074e-01  +3.3757e+01  3.32e+01  1.15e-01  2.22e+01  2.36e-05  2.32e-01  9.16e-02  
  4  +5.0028e-01  +1.6199e+00  1.12e+00  7.55e-03  1.47e+00  4.96e-06  1.56e-01  7.64e-01  
  5  +5.0006e-01  +8.4309e-01  3.43e-01  2.30e-03  4.50e-01  2.39e-06  6.64e-02  6.97e-01  
  6  +4.9998e-01  +8.3039e-01  3.30e-01  2.15e-03  4.22e-01  4.48e-06  2.34e-02  7.76e-01  
  7  +4.9604e-01  +7.2022e-01  2.24e-01  1.63e-04  3.23e-02  1.19e-04  4.80e-04  9.90e-01  
  8  +4.9372e-01  +7.0304e-01  2.09e-01  1.10e-04  2.18e-02  1.48e-04  3.17e-04  3.63e-01  
  9  +4.9351e-01  +6.9936e-01  2.06e-01  1.00e-04  2.00e-02  1.33e-04  2.87e-04  2.21e-01  
 10  +4.9656e-01  +7.1204e-01  2.15e-01  9.12e-05  1.82e-02  3.40e-05  2.53e-04  8.50e-01  
 11  +4.9590e-01  +7.0423e-01  2.08e-01  8.31e-05  1.65e-02  2.31e-05  2.30e-04  4.48e-01  
 12  +4.9072e-01  +6.7412e-01  1.83e-01  4.63e-05  9.22e-03  3.04e-05  1.28e-04  4.80e-01  
 13  +4.8649e-01  +6.5931e-01  1.73e-01  3.91e-05  7.77e-03  1.93e-05  1.09e-04  5.63e-01  
 14  +4.8292e-01  +6.4304e-01  1.60e-01  3.70e-05  7.34e-03  1.38e-05  1.08e-04  2.45e-01  
 15  +4.7623e-01  +6.1087e-01  1.35e-01  3.07e-05  6.09e-03  9.51e-06  9.07e-05  3.56e-01  
 16  +4.5959e-01  +5.4582e-01  8.62e-02  1.70e-05  3.35e-03  3.81e-06  5.14e-05  9.90e-01  
 17  +4.3695e-01  +4.6205e-01  2.51e-02  4.41e-06  8.71e-04  1.14e-06  1.44e-05  9.84e-01  
 18  +4.2693e-01  +4.2986e-01  2.93e-03  4.92e-07  9.71e-05  1.45e-07  1.66e-06  9.03e-01  
 19  +4.2571e-01  +4.2575e-01  3.37e-05  5.66e-09  1.12e-06  1.62e-09  1.93e-08  9.89e-01  
 20  +4.2570e-01  +4.2570e-01  3.38e-07  5.67e-11  1.12e-08  1.62e-11  1.93e-10  9.90e-01  
 21  +4.2570e-01  +4.2570e-01  3.38e-09  5.67e-13  1.12e-10  1.62e-13  1.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 147.6801ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:07 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:07 PM: Optimal value: 4.257e-01
(CVXPY) Oct 06 03:55:07 PM: Compilation took 3.714e-02 seconds
(CVXPY) Oct 06 03:55:07 PM: Solver (including time spent in interface) took 1.599e-01 seconds
FULL MODEL:
  Accruacy: 0.5746
  Our objective: 0.14919999999999994

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.1424)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.0018)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1)            <-- (term's our objective: 0.005)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.207188367843628
Best over terms:
  Our final objective: 0.1424
    Its accruacy: 0.5712
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1424
  Highest accruacy: 0.5712
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

