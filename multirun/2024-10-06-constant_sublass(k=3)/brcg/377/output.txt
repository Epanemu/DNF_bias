Command:
python test_script.py -s constant_subclass -d 10 -n 500 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.176
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 10.

Computed total variation: 0.8280000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:47 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:47 PM: Finished problem compilation (took 4.637e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 3271
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +2.5104e+02  2.51e+02  9.39e-01  2.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7743e-01  +5.5337e+01  5.48e+01  4.18e-01  1.68e+01  3.75e-03  5.89e-01  5.76e-01  
  2  +5.2584e-01  +6.3050e+00  5.78e+00  1.34e-01  6.85e+00  1.84e-02  2.78e-01  9.90e-01  
  3  +5.0388e-01  +1.4340e+00  9.30e-01  3.26e-02  1.68e+00  5.47e-05  1.51e-01  9.25e-01  
  4  +4.9958e-01  +7.5309e-01  2.54e-01  8.06e-03  4.27e-01  4.05e-05  3.61e-02  8.27e-01  
  5  +4.8651e-01  +7.2176e-01  2.35e-01  1.92e-03  1.05e-01  1.96e-04  5.94e-03  8.55e-01  
  6  +4.6996e-01  +6.0409e-01  1.34e-01  9.05e-04  4.87e-02  9.87e-05  3.02e-03  5.96e-01  
  7  +4.5526e-01  +5.3895e-01  8.37e-02  4.33e-04  2.32e-02  6.48e-05  1.59e-03  6.47e-01  
  8  +4.3723e-01  +4.5341e-01  1.62e-02  7.09e-05  3.79e-03  1.02e-05  3.03e-04  8.84e-01  
  9  +4.3228e-01  +4.3283e-01  5.52e-04  2.31e-06  1.23e-04  4.06e-07  1.05e-05  9.89e-01  
 10  +4.3210e-01  +4.3211e-01  5.53e-06  2.31e-08  1.24e-06  4.07e-09  1.05e-07  9.90e-01  
 11  +4.3210e-01  +4.3210e-01  5.53e-08  2.31e-10  1.24e-08  4.07e-11  1.05e-09  9.90e-01  
 12  +4.3210e-01  +4.3210e-01  5.53e-10  2.31e-12  1.24e-10  4.07e-13  1.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3632ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:47 PM: Optimal value: 4.321e-01
(CVXPY) Oct 06 04:23:47 PM: Compilation took 4.637e-02 seconds
(CVXPY) Oct 06 04:23:47 PM: Solver (including time spent in interface) took 1.569e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4321
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:47 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:47 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 3770
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +2.5125e+02  2.51e+02  9.39e-01  2.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7483e-01  +5.5421e+01  5.48e+01  4.21e-01  1.71e+01  3.75e-03  5.91e-01  5.76e-01  
  2  +5.2344e-01  +6.4433e+00  5.92e+00  1.35e-01  7.02e+00  1.89e-02  2.78e-01  9.90e-01  
  3  +5.0547e-01  +1.2895e+00  7.84e-01  2.82e-02  1.54e+00  7.91e-04  9.20e-02  9.16e-01  
  4  +5.0534e-01  +1.3188e+00  8.13e-01  2.23e-02  1.24e+00  1.10e-03  6.29e-02  3.69e-01  
  5  +5.0267e-01  +1.2777e+00  7.75e-01  1.85e-02  1.03e+00  7.52e-04  5.97e-02  2.94e-01  
  6  +4.9147e-01  +1.0648e+00  5.73e-01  4.19e-03  2.43e-01  2.13e-03  1.11e-02  8.35e-01  
  7  +4.7613e-01  +8.8954e-01  4.13e-01  2.61e-03  1.50e-01  1.32e-03  7.19e-03  4.51e-01  
  8  +4.6117e-01  +7.7213e-01  3.11e-01  1.60e-03  9.10e-02  8.28e-04  4.55e-03  5.49e-01  
  9  +4.4786e-01  +6.7640e-01  2.29e-01  1.05e-03  6.00e-02  2.44e-04  3.08e-03  8.29e-01  
 10  +4.2867e-01  +5.7940e-01  1.51e-01  6.87e-04  3.90e-02  1.25e-04  2.12e-03  9.80e-01  
 11  +3.9828e-01  +4.4864e-01  5.04e-02  1.91e-04  1.08e-02  4.51e-05  6.25e-04  7.35e-01  
 12  +3.8481e-01  +3.9456e-01  9.74e-03  3.66e-05  2.08e-03  8.64e-06  1.27e-04  8.35e-01  
 13  +3.8142e-01  +3.8181e-01  3.96e-04  1.49e-06  8.44e-05  2.91e-07  5.41e-06  9.65e-01  
 14  +3.8125e-01  +3.8126e-01  4.02e-06  1.51e-08  8.57e-07  2.93e-09  5.55e-08  9.90e-01  
 15  +3.8125e-01  +3.8125e-01  4.02e-08  1.51e-10  8.57e-09  2.93e-11  5.55e-10  9.90e-01  
 16  +3.8125e-01  +3.8125e-01  4.02e-10  1.51e-12  8.57e-11  2.93e-13  5.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.4868ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:47 PM: Optimal value: 3.813e-01
(CVXPY) Oct 06 04:23:47 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:47 PM: Solver (including time spent in interface) took 1.627e-02 seconds
Iteration: 2, Objective: 0.3813
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:47 PM: Your problem has 291 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:47 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 291
  constraints   = 541
  nnz(P)        = 0
  nnz(A)        = 3982
  cones (total) = 1
    : Nonnegative = 1,  numel = 541

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9924e-01  +2.5139e+02  2.51e+02  9.40e-01  2.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7136e-01  +5.5463e+01  5.49e+01  4.23e-01  1.70e+01  3.76e-03  5.91e-01  5.76e-01  
  2  +5.2083e-01  +6.6061e+00  6.09e+00  1.35e-01  6.97e+00  1.94e-02  2.76e-01  9.90e-01  
  3  +5.0757e-01  +1.9504e+00  1.44e+00  4.33e-02  2.39e+00  3.91e-03  1.15e-01  6.59e-01  
  4  +5.0636e-01  +1.8726e+00  1.37e+00  3.45e-02  1.93e+00  4.43e-03  8.93e-02  2.42e-01  
  5  +5.0291e-01  +1.7917e+00  1.29e+00  2.94e-02  1.63e+00  3.00e-03  8.35e-02  3.06e-01  
  6  +4.8757e-01  +1.2981e+00  8.10e-01  6.99e-03  4.06e-01  5.89e-03  1.78e-02  8.05e-01  
  7  +4.6382e-01  +9.3874e-01  4.75e-01  3.34e-03  1.92e-01  2.57e-03  9.01e-03  6.19e-01  
  8  +4.5122e-01  +8.5802e-01  4.07e-01  2.23e-03  1.27e-01  1.65e-03  6.15e-03  5.94e-01  
  9  +4.3789e-01  +7.8547e-01  3.48e-01  1.60e-03  9.08e-02  1.40e-03  4.55e-03  3.38e-01  
 10  +4.1270e-01  +6.1679e-01  2.04e-01  9.19e-04  5.18e-02  1.31e-04  2.77e-03  8.62e-01  
 11  +3.7494e-01  +4.2901e-01  5.41e-02  2.24e-04  1.25e-02  3.45e-05  7.39e-04  8.33e-01  
 12  +3.6463e-01  +3.8595e-01  2.13e-02  8.55e-05  4.78e-03  1.56e-05  2.92e-04  6.68e-01  
 13  +3.5864e-01  +3.6182e-01  3.18e-03  1.26e-05  7.04e-04  3.59e-06  4.49e-05  9.86e-01  
 14  +3.5752e-01  +3.5771e-01  1.92e-04  7.62e-07  4.23e-05  2.07e-07  2.76e-06  9.49e-01  
 15  +3.5745e-01  +3.5745e-01  2.99e-06  1.19e-08  6.61e-07  3.24e-09  4.32e-08  9.85e-01  
 16  +3.5745e-01  +3.5745e-01  2.99e-08  1.19e-10  6.61e-09  3.24e-11  4.32e-10  9.90e-01  
 17  +3.5745e-01  +3.5745e-01  2.99e-10  1.19e-12  6.61e-11  3.24e-13  4.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.7346ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:47 PM: Optimal value: 3.575e-01
(CVXPY) Oct 06 04:23:47 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3575
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:48 PM: Your problem has 301 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Finished problem compilation (took 1.654e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 301
  constraints   = 551
  nnz(P)        = 0
  nnz(A)        = 4210
  cones (total) = 1
    : Nonnegative = 1,  numel = 551

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +2.5153e+02  2.51e+02  9.41e-01  2.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.6856e-01  +5.5501e+01  5.49e+01  4.25e-01  1.69e+01  3.76e-03  5.91e-01  5.76e-01  
  2  +5.1891e-01  +6.7295e+00  6.21e+00  1.35e-01  6.91e+00  1.97e-02  2.75e-01  9.90e-01  
  3  +5.0628e-01  +1.7849e+00  1.28e+00  3.57e-02  1.99e+00  3.87e-03  9.30e-02  6.99e-01  
  4  +5.0590e-01  +1.8309e+00  1.33e+00  3.18e-02  1.79e+00  4.35e-03  8.04e-02  1.87e-01  
  5  +5.0170e-01  +2.0068e+00  1.51e+00  2.63e-02  1.49e+00  3.88e-03  6.67e-02  5.28e-01  
  6  +4.8394e-01  +1.5357e+00  1.05e+00  8.18e-03  4.78e-01  6.19e-03  2.00e-02  7.07e-01  
  7  +4.5445e-01  +1.0564e+00  6.02e-01  3.67e-03  2.12e-01  3.02e-03  9.52e-03  6.53e-01  
  8  +4.3969e-01  +9.7863e-01  5.39e-01  2.55e-03  1.47e-01  2.40e-03  6.71e-03  5.05e-01  
  9  +4.1021e-01  +7.6701e-01  3.57e-01  1.56e-03  8.91e-02  1.02e-03  4.32e-03  5.48e-01  
 10  +3.5454e-01  +4.3684e-01  8.23e-02  3.53e-04  2.01e-02  1.45e-05  1.12e-03  8.85e-01  
 11  +3.3820e-01  +3.7594e-01  3.77e-02  1.55e-04  9.00e-03  2.03e-05  5.30e-04  6.94e-01  
 12  +3.2742e-01  +3.3440e-01  6.98e-03  2.81e-05  1.63e-03  7.81e-06  1.04e-04  9.90e-01  
 13  +3.2494e-01  +3.2554e-01  5.98e-04  2.40e-06  1.39e-04  6.29e-07  9.19e-06  9.14e-01  
 14  +3.2471e-01  +3.2473e-01  2.28e-05  9.14e-08  5.31e-06  2.10e-08  3.59e-07  9.81e-01  
 15  +3.2470e-01  +3.2470e-01  2.29e-07  9.18e-10  5.33e-08  2.11e-10  3.62e-09  9.90e-01  
 16  +3.2470e-01  +3.2470e-01  2.29e-09  9.18e-12  5.33e-10  2.11e-12  3.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.1962ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:48 PM: Optimal value: 3.247e-01
(CVXPY) Oct 06 04:23:48 PM: Compilation took 1.654e-02 seconds
(CVXPY) Oct 06 04:23:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.3247
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:48 PM: Your problem has 311 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 311
  constraints   = 561
  nnz(P)        = 0
  nnz(A)        = 4328
  cones (total) = 1
    : Nonnegative = 1,  numel = 561

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9895e-01  +2.5168e+02  2.51e+02  9.41e-01  2.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.6586e-01  +5.5551e+01  5.50e+01  4.27e-01  1.66e+01  3.77e-03  5.91e-01  5.76e-01  
  2  +5.1705e-01  +6.8602e+00  6.34e+00  1.35e-01  6.80e+00  2.01e-02  2.72e-01  9.90e-01  
  3  +5.0437e-01  +1.5678e+00  1.06e+00  2.74e-02  1.54e+00  3.66e-03  7.09e-02  7.70e-01  
  4  +4.9631e-01  +1.8699e+00  1.37e+00  1.63e-02  9.39e-01  6.17e-03  3.89e-02  7.09e-01  
  5  +4.7390e-01  +1.4534e+00  9.80e-01  6.90e-03  4.01e-01  6.54e-03  1.68e-02  6.06e-01  
  6  +4.4256e-01  +1.1960e+00  7.53e-01  3.55e-03  2.05e-01  6.03e-03  8.95e-03  5.48e-01  
  7  +4.2353e-01  +1.0020e+00  5.78e-01  2.75e-03  1.57e-01  3.03e-03  7.19e-03  3.73e-01  
  8  +3.7753e-01  +6.5938e-01  2.82e-01  1.32e-03  7.41e-02  2.79e-05  3.82e-03  8.70e-01  
  9  +3.2586e-01  +3.9552e-01  6.97e-02  3.03e-04  1.70e-02  2.11e-05  9.97e-04  7.95e-01  
 10  +3.1321e-01  +3.4700e-01  3.38e-02  1.43e-04  8.00e-03  1.44e-05  5.02e-04  5.73e-01  
 11  +3.0270e-01  +3.0718e-01  4.48e-03  1.84e-05  1.03e-03  2.66e-06  7.10e-05  9.02e-01  
 12  +3.0103e-01  +3.0110e-01  7.14e-05  2.92e-07  1.63e-05  4.45e-08  1.15e-06  9.87e-01  
 13  +3.0100e-01  +3.0100e-01  7.14e-07  2.92e-09  1.63e-07  4.45e-10  1.16e-08  9.90e-01  
 14  +3.0100e-01  +3.0100e-01  7.14e-09  2.92e-11  1.63e-09  4.45e-12  1.16e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.0464ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:48 PM: Optimal value: 3.010e-01
(CVXPY) Oct 06 04:23:48 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:23:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.3010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:48 PM: Your problem has 321 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 321
  constraints   = 571
  nnz(P)        = 0
  nnz(A)        = 4453
  cones (total) = 1
    : Nonnegative = 1,  numel = 571

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9880e-01  +2.5172e+02  2.51e+02  9.42e-01  2.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.6207e-01  +5.5581e+01  5.50e+01  4.28e-01  1.64e+01  3.78e-03  5.90e-01  5.77e-01  
  2  +5.1457e-01  +7.0137e+00  6.50e+00  1.34e-01  6.70e+00  2.05e-02  2.70e-01  9.90e-01  
  3  +5.0221e-01  +1.6530e+00  1.15e+00  2.66e-02  1.50e+00  4.58e-03  6.66e-02  7.74e-01  
  4  +4.8607e-01  +1.6655e+00  1.18e+00  1.15e-02  6.68e-01  8.81e-03  2.71e-02  6.82e-01  
  5  +4.5369e-01  +1.2153e+00  7.62e-01  5.05e-03  2.91e-01  6.20e-03  1.25e-02  6.37e-01  
  6  +4.2686e-01  +1.0988e+00  6.72e-01  3.10e-03  1.78e-01  6.53e-03  7.80e-03  4.47e-01  
  7  +3.8183e-01  +7.3686e-01  3.55e-01  1.82e-03  1.02e-01  5.35e-05  5.07e-03  7.02e-01  
  8  +3.2609e-01  +4.3735e-01  1.11e-01  5.07e-04  2.82e-02  3.30e-05  1.57e-03  7.47e-01  
  9  +3.0808e-01  +3.6444e-01  5.64e-02  2.47e-04  1.40e-02  2.26e-05  7.88e-04  5.56e-01  
 10  +2.9685e-01  +3.1859e-01  2.17e-02  9.35e-05  5.32e-03  1.17e-05  3.10e-04  6.79e-01  
 11  +2.9285e-01  +3.0272e-01  9.87e-03  4.21e-05  2.40e-03  5.82e-06  1.43e-04  5.80e-01  
 12  +2.9054e-01  +2.9328e-01  2.74e-03  1.17e-05  6.64e-04  2.49e-06  4.05e-05  8.85e-01  
 13  +2.8970e-01  +2.9008e-01  3.83e-04  1.64e-06  9.24e-05  4.10e-07  5.76e-06  9.90e-01  
 14  +2.8955e-01  +2.8956e-01  9.34e-06  4.01e-08  2.25e-06  9.75e-09  1.42e-07  9.88e-01  
 15  +2.8955e-01  +2.8955e-01  9.36e-08  4.02e-10  2.26e-08  9.77e-11  1.42e-09  9.90e-01  
 16  +2.8955e-01  +2.8955e-01  9.37e-10  4.02e-12  2.26e-10  9.79e-13  1.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.7057ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:48 PM: Optimal value: 2.896e-01
(CVXPY) Oct 06 04:23:48 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:48 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 6, Objective: 0.2896
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:48 PM: Your problem has 331 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 331
  constraints   = 581
  nnz(P)        = 0
  nnz(A)        = 4545
  cones (total) = 1
    : Nonnegative = 1,  numel = 581

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9862e-01  +2.5230e+02  2.52e+02  9.42e-01  2.62e+01  1.00e+00  1.02e+00   ------   
  1  +5.5785e-01  +5.5716e+01  5.52e+01  4.29e-01  1.62e+01  3.78e-03  5.91e-01  5.77e-01  
  2  +5.1127e-01  +7.1874e+00  6.68e+00  1.33e-01  6.62e+00  2.10e-02  2.68e-01  9.90e-01  
  3  +4.9805e-01  +1.7611e+00  1.26e+00  2.55e-02  1.44e+00  5.84e-03  6.23e-02  7.87e-01  
  4  +4.7228e-01  +1.5624e+00  1.09e+00  9.68e-03  5.63e-01  1.03e-02  2.29e-02  6.74e-01  
  5  +4.3909e-01  +1.2498e+00  8.11e-01  4.96e-03  2.85e-01  8.71e-03  1.22e-02  5.45e-01  
  6  +4.1166e-01  +1.1035e+00  6.92e-01  3.22e-03  1.84e-01  8.29e-03  8.10e-03  3.87e-01  
  7  +3.5815e-01  +6.8502e-01  3.27e-01  1.64e-03  9.15e-02  6.95e-05  4.62e-03  7.40e-01  
  8  +3.2215e-01  +4.9297e-01  1.71e-01  8.15e-04  4.54e-02  4.40e-05  2.45e-03  5.05e-01  
  9  +2.9892e-01  +3.8368e-01  8.48e-02  3.88e-04  2.19e-02  3.07e-05  1.23e-03  5.60e-01  
 10  +2.8205e-01  +3.1064e-01  2.86e-02  1.24e-04  7.05e-03  1.91e-05  4.16e-04  7.93e-01  
 11  +2.7427e-01  +2.8172e-01  7.44e-03  3.05e-05  1.75e-03  5.72e-06  1.10e-04  8.01e-01  
 12  +2.7164e-01  +2.7199e-01  3.50e-04  1.42e-06  8.08e-05  2.42e-07  5.31e-06  9.58e-01  
 13  +2.7150e-01  +2.7151e-01  4.29e-06  1.75e-08  9.90e-07  2.90e-09  6.62e-08  9.89e-01  
 14  +2.7150e-01  +2.7150e-01  4.29e-08  1.75e-10  9.90e-09  2.90e-11  6.62e-10  9.90e-01  
 15  +2.7150e-01  +2.7150e-01  4.29e-10  1.75e-12  9.90e-11  2.91e-13  6.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8291ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:48 PM: Optimal value: 2.715e-01
(CVXPY) Oct 06 04:23:48 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:48 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 7, Objective: 0.2715
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:48 PM: Your problem has 341 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:48 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 341
  constraints   = 591
  nnz(P)        = 0
  nnz(A)        = 4640
  cones (total) = 1
    : Nonnegative = 1,  numel = 591

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9846e-01  +2.5253e+02  2.52e+02  9.43e-01  2.60e+01  1.00e+00  1.02e+00   ------   
  1  +5.5334e-01  +5.5803e+01  5.53e+01  4.30e-01  1.60e+01  3.79e-03  5.90e-01  5.77e-01  
  2  +5.0774e-01  +7.3667e+00  6.86e+00  1.32e-01  6.52e+00  2.15e-02  2.64e-01  9.90e-01  
  3  +4.9302e-01  +1.8972e+00  1.40e+00  2.51e-02  1.42e+00  7.11e-03  6.01e-02  7.92e-01  
  4  +4.5813e-01  +1.5430e+00  1.08e+00  9.00e-03  5.22e-01  1.08e-02  2.13e-02  6.86e-01  
  5  +4.1748e-01  +1.2622e+00  8.45e-01  4.45e-03  2.55e-01  1.03e-02  1.09e-02  5.73e-01  
  6  +3.9332e-01  +1.0872e+00  6.94e-01  3.39e-03  1.93e-01  6.19e-03  8.60e-03  3.94e-01  
  7  +3.3333e-01  +6.1533e-01  2.82e-01  1.40e-03  7.80e-02  5.50e-05  3.97e-03  8.17e-01  
  8  +2.9601e-01  +4.2955e-01  1.34e-01  6.26e-04  3.54e-02  3.87e-05  1.91e-03  5.72e-01  
  9  +2.7801e-01  +3.5553e-01  7.75e-02  3.43e-04  1.99e-02  2.86e-05  1.09e-03  4.79e-01  
 10  +2.6085e-01  +2.8648e-01  2.56e-02  1.09e-04  6.37e-03  1.15e-05  3.69e-04  7.00e-01  
 11  +2.5332e-01  +2.5714e-01  3.83e-03  1.59e-05  9.36e-04  2.29e-06  5.69e-05  8.84e-01  
 12  +2.5199e-01  +2.5221e-01  2.27e-04  9.48e-07  5.52e-05  1.26e-07  3.46e-06  9.42e-01  
 13  +2.5190e-01  +2.5190e-01  2.58e-06  1.08e-08  6.28e-07  1.50e-09  3.98e-08  9.89e-01  
 14  +2.5190e-01  +2.5190e-01  2.59e-08  1.08e-10  6.30e-09  1.50e-11  3.99e-10  9.90e-01  
 15  +2.5190e-01  +2.5190e-01  2.59e-10  1.08e-12  6.30e-11  1.50e-13  3.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.4507ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:48 PM: Optimal value: 2.519e-01
(CVXPY) Oct 06 04:23:48 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:23:48 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 8, Objective: 0.2519
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:49 PM: Your problem has 351 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 351
  constraints   = 601
  nnz(P)        = 0
  nnz(A)        = 4745
  cones (total) = 1
    : Nonnegative = 1,  numel = 601

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9813e-01  +2.5323e+02  2.53e+02  9.43e-01  2.58e+01  1.00e+00  1.02e+00   ------   
  1  +5.4600e-01  +5.6025e+01  5.55e+01  4.30e-01  1.59e+01  3.81e-03  5.90e-01  5.77e-01  
  2  +5.0230e-01  +7.6691e+00  7.17e+00  1.30e-01  6.42e+00  2.23e-02  2.60e-01  9.90e-01  
  3  +4.8337e-01  +2.0155e+00  1.53e+00  2.32e-02  1.32e+00  8.71e-03  5.45e-02  8.11e-01  
  4  +4.3820e-01  +1.5282e+00  1.09e+00  8.60e-03  4.96e-01  1.03e-02  2.03e-02  6.93e-01  
  5  +3.9260e-01  +1.2505e+00  8.58e-01  4.34e-03  2.47e-01  9.56e-03  1.07e-02  5.71e-01  
  6  +3.5099e-01  +8.5651e-01  5.06e-01  2.99e-03  1.66e-01  7.60e-05  8.03e-03  6.77e-01  
  7  +2.9162e-01  +4.8802e-01  1.96e-01  9.99e-04  5.55e-02  4.51e-05  2.95e-03  6.71e-01  
  8  +2.6030e-01  +3.4198e-01  8.17e-02  3.91e-04  2.25e-02  3.69e-05  1.23e-03  6.86e-01  
  9  +2.4263e-01  +2.6713e-01  2.45e-02  1.12e-04  6.56e-03  1.68e-05  3.79e-04  8.18e-01  
 10  +2.3599e-01  +2.4129e-01  5.30e-03  2.33e-05  1.38e-03  3.89e-06  8.35e-05  8.14e-01  
 11  +2.3422e-01  +2.3453e-01  3.09e-04  1.36e-06  8.00e-05  2.23e-07  5.05e-06  9.64e-01  
 12  +2.3410e-01  +2.3411e-01  4.10e-06  1.81e-08  1.06e-06  2.78e-09  6.86e-08  9.89e-01  
 13  +2.3410e-01  +2.3410e-01  4.11e-08  1.81e-10  1.06e-08  2.78e-11  6.87e-10  9.90e-01  
 14  +2.3410e-01  +2.3410e-01  4.11e-10  1.81e-12  1.06e-10  2.80e-13  6.90e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.1297ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:49 PM: Optimal value: 2.341e-01
(CVXPY) Oct 06 04:23:49 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.2341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:49 PM: Your problem has 361 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 361
  constraints   = 611
  nnz(P)        = 0
  nnz(A)        = 4835
  cones (total) = 1
    : Nonnegative = 1,  numel = 611

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9812e-01  +2.5312e+02  2.53e+02  9.44e-01  2.57e+01  1.00e+00  1.02e+00   ------   
  1  +5.4361e-01  +5.5924e+01  5.54e+01  4.31e-01  1.56e+01  3.81e-03  5.88e-01  5.78e-01  
  2  +4.9965e-01  +7.8155e+00  7.32e+00  1.28e-01  6.29e+00  2.26e-02  2.55e-01  9.90e-01  
  3  +4.7798e-01  +2.1301e+00  1.65e+00  2.28e-02  1.30e+00  9.79e-03  5.31e-02  8.13e-01  
  4  +4.1939e-01  +1.5699e+00  1.15e+00  7.55e-03  4.34e-01  1.29e-02  1.78e-02  7.16e-01  
  5  +3.8559e-01  +1.3320e+00  9.46e-01  5.09e-03  2.90e-01  1.06e-02  1.23e-02  3.72e-01  
  6  +3.2269e-01  +7.4705e-01  4.24e-01  2.39e-03  1.32e-01  9.23e-05  6.44e-03  7.78e-01  
  7  +2.8001e-01  +4.8846e-01  2.08e-01  1.12e-03  6.24e-02  6.60e-05  3.25e-03  5.61e-01  
  8  +2.4832e-01  +3.3386e-01  8.55e-02  4.23e-04  2.46e-02  3.68e-05  1.32e-03  6.52e-01  
  9  +2.3080e-01  +2.6196e-01  3.12e-02  1.45e-04  8.63e-03  2.55e-05  4.85e-04  8.67e-01  
 10  +2.2238e-01  +2.2835e-01  5.97e-03  2.71e-05  1.61e-03  4.76e-06  9.63e-05  8.17e-01  
 11  +2.2049e-01  +2.2098e-01  4.92e-04  2.22e-06  1.31e-04  3.60e-07  8.23e-06  9.26e-01  
 12  +2.2030e-01  +2.2031e-01  7.10e-06  3.18e-08  1.86e-06  5.19e-09  1.21e-07  9.88e-01  
 13  +2.2030e-01  +2.2030e-01  7.09e-08  3.18e-10  1.86e-08  5.19e-11  1.21e-09  9.90e-01  
 14  +2.2030e-01  +2.2030e-01  7.09e-10  3.18e-12  1.86e-10  5.22e-13  1.21e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7167ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:49 PM: Optimal value: 2.203e-01
(CVXPY) Oct 06 04:23:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:49 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 10, Objective: 0.2203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:49 PM: Your problem has 371 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 371
  constraints   = 621
  nnz(P)        = 0
  nnz(A)        = 4928
  cones (total) = 1
    : Nonnegative = 1,  numel = 621

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9805e-01  +2.5322e+02  2.53e+02  9.44e-01  2.55e+01  1.00e+00  1.02e+00   ------   
  1  +5.4012e-01  +5.5997e+01  5.55e+01  4.31e-01  1.55e+01  3.82e-03  5.87e-01  5.78e-01  
  2  +4.9641e-01  +7.9283e+00  7.43e+00  1.27e-01  6.18e+00  2.29e-02  2.53e-01  9.90e-01  
  3  +4.7133e-01  +2.0385e+00  1.57e+00  2.02e-02  1.14e+00  1.01e-02  4.72e-02  8.34e-01  
  4  +4.1031e-01  +1.5788e+00  1.17e+00  7.55e-03  4.29e-01  1.22e-02  1.80e-02  7.02e-01  
  5  +3.7189e-01  +1.2744e+00  9.03e-01  4.91e-03  2.76e-01  8.90e-03  1.20e-02  4.09e-01  
  6  +2.9619e-01  +6.0497e-01  3.09e-01  1.69e-03  9.29e-02  7.91e-05  4.68e-03  8.17e-01  
  7  +2.5627e-01  +4.1056e-01  1.54e-01  8.03e-04  4.56e-02  6.35e-05  2.40e-03  5.85e-01  
  8  +2.4046e-01  +3.4096e-01  1.01e-01  5.00e-04  2.92e-02  4.71e-05  1.55e-03  4.03e-01  
  9  +2.2023e-01  +2.5116e-01  3.09e-02  1.49e-04  8.81e-03  2.19e-05  4.99e-04  8.19e-01  
 10  +2.1221e-01  +2.1717e-01  4.95e-03  2.35e-05  1.40e-03  4.10e-06  8.29e-05  9.10e-01  
 11  +2.1081e-01  +2.1168e-01  8.62e-04  4.10e-06  2.42e-04  6.74e-07  1.50e-05  8.29e-01  
 12  +2.1053e-01  +2.1062e-01  8.87e-05  4.18e-07  2.45e-05  7.99e-08  1.59e-06  9.90e-01  
 13  +2.1050e-01  +2.1050e-01  9.65e-07  4.55e-09  2.67e-07  8.62e-10  1.73e-08  9.89e-01  
 14  +2.1050e-01  +2.1050e-01  9.65e-09  4.56e-11  2.67e-09  8.63e-12  1.73e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.9768ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:49 PM: Optimal value: 2.105e-01
(CVXPY) Oct 06 04:23:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:49 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 11, Objective: 0.2105
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:49 PM: Your problem has 381 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 381
  constraints   = 631
  nnz(P)        = 0
  nnz(A)        = 5049
  cones (total) = 1
    : Nonnegative = 1,  numel = 631

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9789e-01  +2.5334e+02  2.53e+02  9.44e-01  2.54e+01  1.00e+00  1.02e+00   ------   
  1  +5.3389e-01  +5.6157e+01  5.56e+01  4.31e-01  1.53e+01  3.84e-03  5.87e-01  5.78e-01  
  2  +4.9056e-01  +8.0793e+00  7.59e+00  1.25e-01  6.08e+00  2.34e-02  2.51e-01  9.90e-01  
  3  +4.6061e-01  +2.2196e+00  1.76e+00  2.13e-02  1.19e+00  1.08e-02  4.98e-02  8.24e-01  
  4  +3.9260e-01  +1.5991e+00  1.21e+00  7.76e-03  4.32e-01  1.12e-02  1.87e-02  7.11e-01  
  5  +3.5704e-01  +1.3205e+00  9.63e-01  5.30e-03  2.94e-01  7.62e-03  1.32e-02  4.29e-01  
  6  +2.8666e-01  +6.1679e-01  3.30e-01  1.86e-03  1.00e-01  6.64e-05  5.23e-03  8.22e-01  
  7  +2.5124e-01  +4.3422e-01  1.83e-01  9.84e-04  5.42e-02  6.26e-05  2.98e-03  5.28e-01  
  8  +2.2644e-01  +3.1388e-01  8.74e-02  4.44e-04  2.52e-02  3.75e-05  1.43e-03  5.77e-01  
  9  +2.1084e-01  +2.4423e-01  3.34e-02  1.63e-04  9.36e-03  1.82e-05  5.54e-04  6.94e-01  
 10  +2.0541e-01  +2.2122e-01  1.58e-02  7.57e-05  4.36e-03  1.02e-05  2.66e-04  6.36e-01  
 11  +2.0081e-01  +2.0228e-01  1.47e-03  6.99e-06  4.00e-04  9.35e-07  2.56e-05  9.27e-01  
 12  +2.0035e-01  +2.0054e-01  1.90e-04  8.98e-07  5.07e-05  1.30e-07  3.43e-06  8.98e-01  
 13  +2.0028e-01  +2.0029e-01  2.31e-06  1.09e-08  6.16e-07  1.58e-09  4.20e-08  9.88e-01  
 14  +2.0028e-01  +2.0028e-01  2.32e-08  1.10e-10  6.19e-09  1.58e-11  4.22e-10  9.90e-01  
 15  +2.0028e-01  +2.0028e-01  2.32e-10  1.10e-12  6.19e-11  1.59e-13  4.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.1075ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:49 PM: Optimal value: 2.003e-01
(CVXPY) Oct 06 04:23:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:49 PM: Solver (including time spent in interface) took 1.508e-02 seconds
Iteration: 12, Objective: 0.2003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:49 PM: Your problem has 391 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 391
  constraints   = 641
  nnz(P)        = 0
  nnz(A)        = 5138
  cones (total) = 1
    : Nonnegative = 1,  numel = 641

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9765e-01  +2.5341e+02  2.53e+02  9.45e-01  2.52e+01  1.00e+00  1.02e+00   ------   
  1  +5.2797e-01  +5.6273e+01  5.57e+01  4.32e-01  1.52e+01  3.85e-03  5.87e-01  5.77e-01  
  2  +4.8413e-01  +8.3046e+00  7.82e+00  1.24e-01  6.00e+00  2.41e-02  2.49e-01  9.90e-01  
  3  +4.4970e-01  +2.3570e+00  1.91e+00  2.18e-02  1.21e+00  1.14e-02  5.06e-02  8.16e-01  
  4  +3.9182e-01  +1.8377e+00  1.45e+00  9.92e-03  5.51e-01  1.19e-02  2.37e-02  5.95e-01  
  5  +3.5601e-01  +1.4792e+00  1.12e+00  6.57e-03  3.63e-01  8.99e-03  1.62e-02  3.74e-01  
  6  +2.8960e-01  +7.4032e-01  4.51e-01  2.65e-03  1.43e-01  8.06e-05  7.29e-03  8.41e-01  
  7  +2.3796e-01  +4.0373e-01  1.66e-01  9.25e-04  5.03e-02  5.68e-05  2.87e-03  6.91e-01  
  8  +2.1396e-01  +2.9159e-01  7.76e-02  4.02e-04  2.26e-02  3.70e-05  1.34e-03  6.27e-01  
  9  +2.0098e-01  +2.3314e-01  3.22e-02  1.61e-04  9.15e-03  1.93e-05  5.70e-04  6.94e-01  
 10  +1.9489e-01  +2.0635e-01  1.15e-02  5.69e-05  3.23e-03  7.05e-06  2.09e-04  6.63e-01  
 11  +1.9377e-01  +2.0156e-01  7.80e-03  3.64e-05  2.14e-03  6.12e-06  1.34e-04  6.36e-01  
 12  +1.9133e-01  +1.9214e-01  8.11e-04  3.80e-06  2.23e-04  6.87e-07  1.44e-05  9.90e-01  
 13  +1.9101e-01  +1.9103e-01  2.33e-05  1.10e-07  6.40e-06  1.86e-08  4.22e-07  9.76e-01  
 14  +1.9100e-01  +1.9100e-01  2.34e-07  1.10e-09  6.42e-08  1.87e-10  4.24e-09  9.90e-01  
 15  +1.9100e-01  +1.9100e-01  2.34e-09  1.10e-11  6.43e-10  1.87e-12  4.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.0225ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:49 PM: Optimal value: 1.910e-01
(CVXPY) Oct 06 04:23:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:49 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 13, Objective: 0.1910
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:50 PM: Your problem has 401 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 401
  constraints   = 651
  nnz(P)        = 0
  nnz(A)        = 5217
  cones (total) = 1
    : Nonnegative = 1,  numel = 651

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9759e-01  +2.5352e+02  2.53e+02  9.45e-01  2.50e+01  1.00e+00  1.02e+00   ------   
  1  +5.2588e-01  +5.6357e+01  5.58e+01  4.33e-01  1.50e+01  3.86e-03  5.86e-01  5.77e-01  
  2  +4.8215e-01  +8.3249e+00  7.84e+00  1.24e-01  5.91e+00  2.42e-02  2.48e-01  9.90e-01  
  3  +4.4716e-01  +2.3792e+00  1.93e+00  2.21e-02  1.22e+00  1.13e-02  5.15e-02  8.12e-01  
  4  +3.8894e-01  +1.9167e+00  1.53e+00  1.06e-02  5.83e-01  1.17e-02  2.53e-02  5.91e-01  
  5  +3.5364e-01  +1.5505e+00  1.20e+00  7.05e-03  3.87e-01  8.53e-03  1.74e-02  4.02e-01  
  6  +2.9639e-01  +8.5023e-01  5.54e-01  3.34e-03  1.79e-01  7.64e-05  9.05e-03  8.55e-01  
  7  +2.4353e-01  +4.5065e-01  2.07e-01  1.18e-03  6.38e-02  4.89e-05  3.58e-03  6.58e-01  
  8  +2.1493e-01  +3.1313e-01  9.82e-02  5.19e-04  2.90e-02  4.19e-05  1.67e-03  6.52e-01  
  9  +1.9905e-01  +2.4250e-01  4.34e-02  2.18e-04  1.25e-02  2.47e-05  7.34e-04  6.76e-01  
 10  +1.9242e-01  +2.1339e-01  2.10e-02  1.02e-04  5.94e-03  1.43e-05  3.57e-04  6.50e-01  
 11  +1.8887e-01  +1.9961e-01  1.07e-02  4.90e-05  2.94e-03  8.36e-06  1.79e-04  6.36e-01  
 12  +1.8536e-01  +1.8629e-01  9.27e-04  4.16e-06  2.51e-04  7.00e-07  1.59e-05  9.54e-01  
 13  +1.8502e-01  +1.8507e-01  4.97e-05  2.24e-07  1.35e-05  4.09e-08  8.71e-07  9.70e-01  
 14  +1.8500e-01  +1.8500e-01  4.99e-07  2.25e-09  1.35e-07  4.10e-10  8.76e-09  9.90e-01  
 15  +1.8500e-01  +1.8500e-01  4.99e-09  2.26e-11  1.35e-09  4.11e-12  8.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.6104ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:50 PM: Optimal value: 1.850e-01
(CVXPY) Oct 06 04:23:50 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:23:50 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 14, Objective: 0.1850
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:50 PM: Your problem has 411 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 411
  constraints   = 661
  nnz(P)        = 0
  nnz(A)        = 5270
  cones (total) = 1
    : Nonnegative = 1,  numel = 661

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9739e-01  +2.5358e+02  2.53e+02  9.46e-01  2.49e+01  1.00e+00  1.02e+00   ------   
  1  +5.1825e-01  +5.6542e+01  5.60e+01  4.32e-01  1.49e+01  3.88e-03  5.85e-01  5.76e-01  
  2  +4.7467e-01  +8.5946e+00  8.12e+00  1.22e-01  5.79e+00  2.50e-02  2.44e-01  9.90e-01  
  3  +4.3372e-01  +2.2701e+00  1.84e+00  1.97e-02  1.08e+00  1.11e-02  4.57e-02  8.28e-01  
  4  +3.7054e-01  +1.9646e+00  1.59e+00  1.01e-02  5.51e-01  1.26e-02  2.41e-02  5.75e-01  
  5  +3.1449e-01  +1.1033e+00  7.89e-01  4.75e-03  2.55e-01  1.74e-03  1.21e-02  7.25e-01  
  6  +2.4390e-01  +4.9473e-01  2.51e-01  1.46e-03  7.74e-02  3.39e-04  4.24e-03  7.37e-01  
  7  +2.1582e-01  +3.6638e-01  1.51e-01  8.26e-04  4.51e-02  1.90e-04  2.56e-03  5.91e-01  
  8  +1.9826e-01  +2.7790e-01  7.96e-02  4.19e-04  2.33e-02  1.00e-04  1.37e-03  5.12e-01  
  9  +1.8950e-01  +2.3596e-01  4.65e-02  2.36e-04  1.34e-02  5.72e-05  7.91e-04  5.39e-01  
 10  +1.8190e-01  +2.0174e-01  1.98e-02  9.33e-05  5.51e-03  2.26e-05  3.32e-04  8.19e-01  
 11  +1.7709e-01  +1.8198e-01  4.89e-03  2.29e-05  1.35e-03  4.44e-06  8.50e-05  9.90e-01  
 12  +1.7536e-01  +1.7577e-01  4.07e-04  1.90e-06  1.12e-04  3.17e-07  7.34e-06  9.16e-01  
 13  +1.7520e-01  +1.7521e-01  7.13e-06  3.34e-08  1.96e-06  5.72e-09  1.30e-07  9.88e-01  
 14  +1.7520e-01  +1.7520e-01  7.13e-08  3.35e-10  1.96e-08  5.72e-11  1.30e-09  9.90e-01  
 15  +1.7520e-01  +1.7520e-01  7.13e-10  3.35e-12  1.96e-10  5.73e-13  1.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.5615ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:50 PM: Optimal value: 1.752e-01
(CVXPY) Oct 06 04:23:50 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:50 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 15, Objective: 0.1752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:50 PM: Your problem has 421 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 421
  constraints   = 671
  nnz(P)        = 0
  nnz(A)        = 5305
  cones (total) = 1
    : Nonnegative = 1,  numel = 671

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9733e-01  +2.5358e+02  2.53e+02  9.46e-01  2.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.1562e-01  +5.6642e+01  5.61e+01  4.34e-01  1.47e+01  3.89e-03  5.85e-01  5.76e-01  
  2  +4.7138e-01  +8.6928e+00  8.22e+00  1.21e-01  5.74e+00  2.53e-02  2.44e-01  9.90e-01  
  3  +4.2684e-01  +2.0036e+00  1.58e+00  1.64e-02  8.97e-01  1.06e-02  3.84e-02  8.58e-01  
  4  +3.6256e-01  +1.8727e+00  1.51e+00  9.01e-03  4.91e-01  1.28e-02  2.17e-02  5.66e-01  
  5  +3.1206e-01  +1.1066e+00  7.95e-01  5.15e-03  2.73e-01  1.09e-04  1.34e-02  7.66e-01  
  6  +2.4061e-01  +4.8560e-01  2.45e-01  1.45e-03  7.56e-02  5.94e-05  4.23e-03  7.35e-01  
  7  +2.1118e-01  +3.5754e-01  1.46e-01  8.05e-04  4.36e-02  7.30e-05  2.53e-03  6.13e-01  
  8  +1.9365e-01  +2.6999e-01  7.63e-02  4.03e-04  2.22e-02  4.21e-05  1.33e-03  5.25e-01  
  9  +1.8543e-01  +2.3107e-01  4.56e-02  2.32e-04  1.31e-02  2.97e-05  7.92e-04  5.34e-01  
 10  +1.7835e-01  +1.9951e-01  2.12e-02  1.00e-04  5.86e-03  1.75e-05  3.62e-04  7.76e-01  
 11  +1.7276e-01  +1.7666e-01  3.90e-03  1.83e-05  1.07e-03  3.33e-06  6.93e-05  9.69e-01  
 12  +1.7144e-01  +1.7179e-01  3.54e-04  1.67e-06  9.72e-05  2.69e-07  6.56e-06  9.09e-01  
 13  +1.7130e-01  +1.7131e-01  5.17e-06  2.45e-08  1.42e-06  4.00e-09  9.68e-08  9.90e-01  
 14  +1.7130e-01  +1.7130e-01  5.17e-08  2.45e-10  1.42e-08  4.00e-11  9.68e-10  9.90e-01  
 15  +1.7130e-01  +1.7130e-01  5.18e-10  2.45e-12  1.42e-10  4.00e-13  9.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.7443ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:50 PM: Optimal value: 1.713e-01
(CVXPY) Oct 06 04:23:50 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:50 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 16, Objective: 0.1713
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:50 PM: Your problem has 431 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 431
  constraints   = 681
  nnz(P)        = 0
  nnz(A)        = 5359
  cones (total) = 1
    : Nonnegative = 1,  numel = 681

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9710e-01  +2.5378e+02  2.53e+02  9.47e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.0796e-01  +5.6858e+01  5.64e+01  4.33e-01  1.46e+01  3.91e-03  5.85e-01  5.75e-01  
  2  +4.6298e-01  +8.9548e+00  8.49e+00  1.20e-01  5.65e+00  2.61e-02  2.41e-01  9.90e-01  
  3  +4.1536e-01  +2.2141e+00  1.80e+00  1.82e-02  9.83e-01  1.10e-02  4.23e-02  8.38e-01  
  4  +3.5716e-01  +2.0363e+00  1.68e+00  1.07e-02  5.76e-01  1.26e-02  2.54e-02  5.06e-01  
  5  +3.0101e-01  +1.1013e+00  8.00e-01  5.27e-03  2.77e-01  1.13e-04  1.36e-02  8.03e-01  
  6  +2.3011e-01  +4.5892e-01  2.29e-01  1.42e-03  7.35e-02  6.81e-05  4.17e-03  7.65e-01  
  7  +2.0420e-01  +3.4067e-01  1.36e-01  7.91e-04  4.22e-02  6.63e-05  2.47e-03  5.78e-01  
  8  +1.8893e-01  +2.6336e-01  7.44e-02  4.15e-04  2.26e-02  4.05e-05  1.36e-03  5.14e-01  
  9  +1.8098e-01  +2.2562e-01  4.46e-02  2.38e-04  1.33e-02  2.84e-05  8.06e-04  5.32e-01  
 10  +1.7519e-01  +1.9983e-01  2.46e-02  1.23e-04  7.11e-03  1.88e-05  4.38e-04  6.75e-01  
 11  +1.6897e-01  +1.7369e-01  4.72e-03  2.30e-05  1.34e-03  3.55e-06  8.64e-05  8.77e-01  
 12  +1.6755e-01  +1.6794e-01  3.92e-04  1.92e-06  1.11e-04  3.03e-07  7.57e-06  9.90e-01  
 13  +1.6740e-01  +1.6741e-01  5.65e-06  2.78e-08  1.60e-06  4.32e-09  1.11e-07  9.90e-01  
 14  +1.6740e-01  +1.6740e-01  5.66e-08  2.79e-10  1.60e-08  4.33e-11  1.11e-09  9.90e-01  
 15  +1.6740e-01  +1.6740e-01  5.66e-10  2.79e-12  1.60e-10  4.33e-13  1.11e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.1192ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:50 PM: Optimal value: 1.674e-01
(CVXPY) Oct 06 04:23:50 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:50 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 17, Objective: 0.1674
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:50 PM: Your problem has 441 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:50 PM: Finished problem compilation (took 1.576e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 441
  constraints   = 691
  nnz(P)        = 0
  nnz(A)        = 5404
  cones (total) = 1
    : Nonnegative = 1,  numel = 691

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9682e-01  +2.5381e+02  2.53e+02  9.47e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +4.9864e-01  +5.7291e+01  5.68e+01  4.34e-01  1.45e+01  3.93e-03  5.86e-01  5.71e-01  
  2  +4.5398e-01  +9.2301e+00  8.78e+00  1.20e-01  5.63e+00  2.71e-02  2.41e-01  9.90e-01  
  3  +4.0280e-01  +2.2261e+00  1.82e+00  1.81e-02  9.69e-01  1.09e-02  4.19e-02  8.40e-01  
  4  +3.4610e-01  +2.0441e+00  1.70e+00  1.11e-02  5.95e-01  1.17e-02  2.64e-02  4.89e-01  
  5  +2.8618e-01  +1.0704e+00  7.84e-01  5.23e-03  2.72e-01  1.06e-04  1.35e-02  8.27e-01  
  6  +2.1655e-01  +4.2631e-01  2.10e-01  1.33e-03  6.85e-02  6.35e-05  3.94e-03  7.80e-01  
  7  +1.9356e-01  +3.2684e-01  1.33e-01  7.79e-04  4.16e-02  6.59e-05  2.41e-03  5.69e-01  
  8  +1.8129e-01  +2.6618e-01  8.49e-02  4.79e-04  2.60e-02  5.01e-05  1.54e-03  4.97e-01  
  9  +1.7093e-01  +2.1526e-01  4.43e-02  2.42e-04  1.33e-02  2.84e-05  8.11e-04  5.50e-01  
 10  +1.6559e-01  +1.9050e-01  2.49e-02  1.27e-04  7.27e-03  1.90e-05  4.44e-04  6.54e-01  
 11  +1.5990e-01  +1.6645e-01  6.55e-03  3.25e-05  1.88e-03  5.17e-06  1.19e-04  8.63e-01  
 12  +1.5803e-01  +1.5890e-01  8.67e-04  4.32e-06  2.49e-04  6.23e-07  1.66e-05  8.89e-01  
 13  +1.5775e-01  +1.5788e-01  1.31e-04  6.40e-07  3.71e-05  1.07e-07  2.59e-06  9.60e-01  
 14  +1.5770e-01  +1.5770e-01  1.89e-06  9.20e-09  5.33e-07  1.54e-09  3.74e-08  9.90e-01  
 15  +1.5770e-01  +1.5770e-01  1.89e-08  9.21e-11  5.34e-09  1.54e-11  3.75e-10  9.90e-01  
 16  +1.5770e-01  +1.5770e-01  1.89e-10  9.22e-13  5.34e-11  1.55e-13  3.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.074ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:50 PM: Optimal value: 1.577e-01
(CVXPY) Oct 06 04:23:50 PM: Compilation took 1.576e-02 seconds
(CVXPY) Oct 06 04:23:50 PM: Solver (including time spent in interface) took 1.549e-02 seconds
Iteration: 18, Objective: 0.1577
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:51 PM: Your problem has 451 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 451
  constraints   = 701
  nnz(P)        = 0
  nnz(A)        = 5481
  cones (total) = 1
    : Nonnegative = 1,  numel = 701

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9668e-01  +2.5397e+02  2.53e+02  9.47e-01  2.42e+01  1.00e+00  1.02e+00   ------   
  1  +4.9315e-01  +5.7372e+01  5.69e+01  4.34e-01  1.43e+01  3.94e-03  5.85e-01  5.71e-01  
  2  +4.4586e-01  +9.3322e+00  8.89e+00  1.17e-01  5.50e+00  2.74e-02  2.38e-01  9.90e-01  
  3  +3.9448e-01  +2.2108e+00  1.82e+00  1.81e-02  9.59e-01  1.01e-02  4.24e-02  8.37e-01  
  4  +3.3322e-01  +2.0295e+00  1.70e+00  1.08e-02  5.74e-01  1.13e-02  2.59e-02  5.04e-01  
  5  +2.8089e-01  +1.0927e+00  8.12e-01  5.61e-03  2.89e-01  9.62e-05  1.46e-02  8.10e-01  
  6  +2.1210e-01  +4.2570e-01  2.14e-01  1.38e-03  7.02e-02  5.30e-05  4.10e-03  7.77e-01  
  7  +1.9266e-01  +3.4575e-01  1.53e-01  9.17e-04  4.84e-02  6.23e-05  2.81e-03  4.77e-01  
  8  +1.7344e-01  +2.5549e-01  8.20e-02  4.54e-04  2.48e-02  4.08e-05  1.48e-03  5.57e-01  
  9  +1.5931e-01  +1.9114e-01  3.18e-02  1.67e-04  9.26e-03  2.13e-05  5.79e-04  7.77e-01  
 10  +1.5111e-01  +1.5463e-01  3.51e-03  1.84e-05  1.01e-03  2.63e-06  6.76e-05  9.90e-01  
 11  +1.5007e-01  +1.5052e-01  4.59e-04  2.43e-06  1.33e-04  3.19e-07  9.38e-06  8.80e-01  
 12  +1.4991e-01  +1.4992e-01  1.58e-05  8.37e-08  4.55e-06  1.15e-08  3.27e-07  9.78e-01  
 13  +1.4990e-01  +1.4990e-01  1.58e-07  8.39e-10  4.56e-08  1.15e-10  3.28e-09  9.90e-01  
 14  +1.4990e-01  +1.4990e-01  1.58e-09  8.41e-12  4.57e-10  1.15e-12  3.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.2903ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:51 PM: Optimal value: 1.499e-01
(CVXPY) Oct 06 04:23:51 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:51 PM: Solver (including time spent in interface) took 2.816e-02 seconds
Iteration: 19, Objective: 0.1499
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:51 PM: Your problem has 461 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 461
  constraints   = 711
  nnz(P)        = 0
  nnz(A)        = 5543
  cones (total) = 1
    : Nonnegative = 1,  numel = 711

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9662e-01  +2.5307e+02  2.53e+02  9.48e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +4.8808e-01  +5.7251e+01  5.68e+01  4.32e-01  1.41e+01  3.97e-03  5.80e-01  5.72e-01  
  2  +4.4109e-01  +9.9364e+00  9.50e+00  1.22e-01  5.63e+00  2.72e-02  2.45e-01  9.59e-01  
  3  +3.9215e-01  +2.2155e+00  1.82e+00  1.85e-02  9.69e-01  9.38e-03  4.32e-02  8.38e-01  
  4  +3.2672e-01  +2.0533e+00  1.73e+00  1.09e-02  5.69e-01  1.08e-02  2.59e-02  5.20e-01  
  5  +2.7743e-01  +1.1031e+00  8.26e-01  5.73e-03  2.92e-01  9.11e-05  1.48e-02  8.19e-01  
  6  +2.1049e-01  +4.4281e-01  2.32e-01  1.49e-03  7.52e-02  4.91e-05  4.30e-03  7.54e-01  
  7  +1.8528e-01  +3.3366e-01  1.48e-01  8.76e-04  4.60e-02  6.35e-05  2.64e-03  5.72e-01  
  8  +1.6603e-01  +2.4360e-01  7.76e-02  4.24e-04  2.30e-02  4.37e-05  1.34e-03  6.17e-01  
  9  +1.5305e-01  +1.8428e-01  3.12e-02  1.63e-04  8.99e-03  2.02e-05  5.47e-04  6.95e-01  
 10  +1.4507e-01  +1.4811e-01  3.05e-03  1.59e-05  8.69e-04  2.05e-06  5.65e-05  9.57e-01  
 11  +1.4481e-01  +1.4711e-01  2.30e-03  1.19e-05  6.54e-04  1.73e-06  4.35e-05  4.93e-01  
 12  +1.4410e-01  +1.4439e-01  2.85e-04  1.48e-06  8.08e-05  2.08e-07  5.61e-06  8.83e-01  
 13  +1.4400e-01  +1.4401e-01  6.87e-06  3.56e-08  1.95e-06  5.36e-09  1.36e-07  9.90e-01  
 14  +1.4400e-01  +1.4400e-01  6.88e-08  3.57e-10  1.95e-08  5.36e-11  1.37e-09  9.90e-01  
 15  +1.4400e-01  +1.4400e-01  6.88e-10  3.57e-12  1.95e-10  5.37e-13  1.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.3166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:51 PM: Optimal value: 1.440e-01
(CVXPY) Oct 06 04:23:51 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:51 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 20, Objective: 0.1440
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:51 PM: Your problem has 471 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 471
  constraints   = 721
  nnz(P)        = 0
  nnz(A)        = 5612
  cones (total) = 1
    : Nonnegative = 1,  numel = 721

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9656e-01  +2.5311e+02  2.53e+02  9.48e-01  2.39e+01  1.00e+00  1.02e+00   ------   
  1  +4.8445e-01  +5.7327e+01  5.68e+01  4.32e-01  1.40e+01  3.98e-03  5.79e-01  5.72e-01  
  2  +4.3704e-01  +1.0232e+01  9.79e+00  1.24e-01  5.64e+00  2.71e-02  2.48e-01  9.45e-01  
  3  +3.8940e-01  +2.2328e+00  1.84e+00  1.90e-02  9.85e-01  8.89e-03  4.45e-02  8.35e-01  
  4  +3.2155e-01  +2.1374e+00  1.82e+00  1.15e-02  5.94e-01  1.05e-02  2.75e-02  5.23e-01  
  5  +2.8163e-01  +1.1543e+00  8.73e-01  6.31e-03  3.19e-01  8.52e-05  1.63e-02  7.76e-01  
  6  +2.1282e-01  +4.8182e-01  2.69e-01  1.75e-03  8.74e-02  4.78e-05  5.01e-03  7.30e-01  
  7  +1.8694e-01  +3.5830e-01  1.71e-01  1.05e-03  5.40e-02  6.54e-05  3.16e-03  5.47e-01  
  8  +1.7085e-01  +2.7583e-01  1.05e-01  6.09e-04  3.20e-02  4.84e-05  1.89e-03  4.80e-01  
  9  +1.5803e-01  +2.1352e-01  5.55e-02  3.02e-04  1.64e-02  3.15e-05  9.71e-04  5.89e-01  
 10  +1.4977e-01  +1.7419e-01  2.44e-02  1.30e-04  7.08e-03  1.93e-05  4.33e-04  8.40e-01  
 11  +1.4353e-01  +1.4771e-01  4.18e-03  2.21e-05  1.20e-03  3.03e-06  7.72e-05  8.75e-01  
 12  +1.4244e-01  +1.4337e-01  9.33e-04  4.95e-06  2.65e-04  6.95e-07  1.84e-05  8.49e-01  
 13  +1.4213e-01  +1.4222e-01  8.55e-05  4.55e-07  2.42e-05  6.20e-08  1.73e-06  9.11e-01  
 14  +1.4210e-01  +1.4210e-01  9.58e-07  5.10e-09  2.71e-07  6.95e-10  1.95e-08  9.89e-01  
 15  +1.4210e-01  +1.4210e-01  9.61e-09  5.12e-11  2.72e-09  6.97e-12  1.95e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.6708ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:51 PM: Optimal value: 1.421e-01
(CVXPY) Oct 06 04:23:51 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:51 PM: Solver (including time spent in interface) took 3.090e-02 seconds
Iteration: 21, Objective: 0.1421
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:51 PM: Your problem has 481 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 481
  constraints   = 731
  nnz(P)        = 0
  nnz(A)        = 5670
  cones (total) = 1
    : Nonnegative = 1,  numel = 731

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9654e-01  +2.5311e+02  2.53e+02  9.48e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +4.8248e-01  +5.7439e+01  5.70e+01  4.33e-01  1.38e+01  3.99e-03  5.79e-01  5.71e-01  
  2  +4.3482e-01  +1.0367e+01  9.93e+00  1.25e-01  5.62e+00  2.72e-02  2.50e-01  9.40e-01  
  3  +3.8762e-01  +2.2477e+00  1.86e+00  1.94e-02  9.92e-01  8.71e-03  4.54e-02  8.35e-01  
  4  +3.1825e-01  +2.1392e+00  1.82e+00  1.16e-02  5.95e-01  1.03e-02  2.78e-02  5.27e-01  
  5  +2.7378e-01  +1.1537e+00  8.80e-01  6.25e-03  3.13e-01  8.54e-05  1.62e-02  8.23e-01  
  6  +2.1009e-01  +4.8792e-01  2.78e-01  1.82e-03  9.04e-02  4.55e-05  5.24e-03  7.11e-01  
  7  +1.8353e-01  +3.5993e-01  1.76e-01  1.09e-03  5.55e-02  6.24e-05  3.31e-03  5.34e-01  
  8  +1.6344e-01  +2.5322e-01  8.98e-02  5.26e-04  2.73e-02  3.63e-05  1.67e-03  5.36e-01  
  9  +1.5433e-01  +2.1047e-01  5.61e-02  3.11e-04  1.66e-02  2.66e-05  1.00e-03  4.63e-01  
 10  +1.4612e-01  +1.7253e-01  2.64e-02  1.42e-04  7.66e-03  1.80e-05  4.72e-04  7.61e-01  
 11  +1.3966e-01  +1.4437e-01  4.72e-03  2.51e-05  1.35e-03  3.03e-06  8.85e-05  8.56e-01  
 12  +1.3832e-01  +1.3893e-01  6.10e-04  3.29e-06  1.74e-04  3.46e-07  1.25e-05  8.77e-01  
 13  +1.3811e-01  +1.3815e-01  3.78e-05  2.04e-07  1.07e-05  2.61e-08  7.96e-07  9.71e-01  
 14  +1.3810e-01  +1.3810e-01  3.80e-07  2.06e-09  1.08e-07  2.62e-10  8.03e-09  9.90e-01  
 15  +1.3810e-01  +1.3810e-01  3.81e-09  2.06e-11  1.08e-09  2.63e-12  8.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.5267ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:51 PM: Optimal value: 1.381e-01
(CVXPY) Oct 06 04:23:51 PM: Compilation took 1.572e-02 seconds
(CVXPY) Oct 06 04:23:51 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 22, Objective: 0.1381
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:51 PM: Your problem has 491 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:51 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 491
  constraints   = 741
  nnz(P)        = 0
  nnz(A)        = 5721
  cones (total) = 1
    : Nonnegative = 1,  numel = 741

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9639e-01  +2.5328e+02  2.53e+02  9.49e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +4.7587e-01  +5.7533e+01  5.71e+01  4.32e-01  1.37e+01  4.01e-03  5.77e-01  5.72e-01  
  2  +4.2512e-01  +1.0520e+01  1.01e+01  1.22e-01  5.44e+00  2.78e-02  2.44e-01  9.44e-01  
  3  +3.7416e-01  +2.4412e+00  2.07e+00  2.05e-02  1.04e+00  9.46e-03  4.79e-02  8.19e-01  
  4  +3.1309e-01  +2.2422e+00  1.93e+00  1.32e-02  6.73e-01  9.84e-03  3.13e-02  4.75e-01  
  5  +2.6046e-01  +1.0189e+00  7.58e-01  5.47e-03  2.73e-01  8.64e-05  1.41e-02  8.27e-01  
  6  +2.0403e-01  +5.1623e-01  3.12e-01  2.13e-03  1.05e-01  6.73e-05  6.03e-03  6.33e-01  
  7  +1.7225e-01  +3.3474e-01  1.62e-01  1.03e-03  5.23e-02  6.65e-05  3.13e-03  6.31e-01  
  8  +1.5419e-01  +2.3469e-01  8.05e-02  4.81e-04  2.51e-02  4.29e-05  1.51e-03  6.28e-01  
  9  +1.4769e-01  +2.0377e-01  5.61e-02  3.18e-04  1.71e-02  3.35e-05  1.00e-03  4.20e-01  
 10  +1.3933e-01  +1.6283e-01  2.35e-02  1.29e-04  7.03e-03  1.75e-05  4.25e-04  8.07e-01  
 11  +1.3412e-01  +1.3993e-01  5.81e-03  3.19e-05  1.72e-03  4.03e-06  1.10e-04  7.80e-01  
 12  +1.3275e-01  +1.3427e-01  1.53e-03  8.38e-06  4.45e-04  1.07e-06  3.14e-05  8.20e-01  
 13  +1.3224e-01  +1.3236e-01  1.18e-04  6.47e-07  3.41e-05  7.83e-08  2.56e-06  9.36e-01  
 14  +1.3220e-01  +1.3220e-01  1.71e-06  9.34e-09  4.91e-07  1.15e-09  3.72e-08  9.88e-01  
 15  +1.3220e-01  +1.3220e-01  1.71e-08  9.37e-11  4.93e-09  1.15e-11  3.73e-10  9.90e-01  
 16  +1.3220e-01  +1.3220e-01  1.71e-10  9.38e-13  4.94e-11  1.15e-13  3.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.6211ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:51 PM: Optimal value: 1.322e-01
(CVXPY) Oct 06 04:23:51 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:51 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 23, Objective: 0.1322
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:52 PM: Your problem has 501 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 501
  constraints   = 751
  nnz(P)        = 0
  nnz(A)        = 5766
  cones (total) = 1
    : Nonnegative = 1,  numel = 751

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9618e-01  +2.5339e+02  2.53e+02  9.49e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +4.6467e-01  +5.7870e+01  5.74e+01  4.29e-01  1.36e+01  4.05e-03  5.76e-01  5.70e-01  
  2  +4.1325e-01  +1.1428e+01  1.10e+01  1.29e-01  5.68e+00  2.76e-02  2.56e-01  9.05e-01  
  3  +3.6825e-01  +2.7932e+00  2.42e+00  2.49e-02  1.24e+00  9.65e-03  5.80e-02  7.88e-01  
  4  +2.9381e-01  +2.3245e+00  2.03e+00  1.38e-02  6.91e-01  9.81e-03  3.28e-02  5.22e-01  
  5  +2.5865e-01  +1.1165e+00  8.58e-01  6.61e-03  3.24e-01  8.02e-05  1.71e-02  8.20e-01  
  6  +1.9868e-01  +4.9660e-01  2.98e-01  2.11e-03  1.03e-01  5.25e-05  6.00e-03  6.92e-01  
  7  +1.7116e-01  +3.5306e-01  1.82e-01  1.20e-03  6.02e-02  7.43e-05  3.60e-03  6.11e-01  
  8  +1.5108e-01  +2.3853e-01  8.75e-02  5.39e-04  2.77e-02  4.31e-05  1.69e-03  6.06e-01  
  9  +1.4032e-01  +1.8338e-01  4.31e-02  2.50e-04  1.32e-02  2.60e-05  8.04e-04  6.44e-01  
 10  +1.3554e-01  +1.5902e-01  2.35e-02  1.35e-04  7.13e-03  1.73e-05  4.47e-04  7.63e-01  
 11  +1.2998e-01  +1.3474e-01  4.76e-03  2.69e-05  1.42e-03  3.32e-06  9.39e-05  8.54e-01  
 12  +1.2881e-01  +1.2997e-01  1.16e-03  6.53e-06  3.41e-04  8.30e-07  2.45e-05  8.60e-01  
 13  +1.2844e-01  +1.2855e-01  1.10e-04  6.18e-07  3.21e-05  7.69e-08  2.40e-06  9.19e-01  
 14  +1.2840e-01  +1.2840e-01  1.26e-06  7.09e-09  3.68e-07  8.77e-10  2.77e-08  9.89e-01  
 15  +1.2840e-01  +1.2840e-01  1.27e-08  7.11e-11  3.69e-09  8.80e-12  2.78e-10  9.90e-01  
 16  +1.2840e-01  +1.2840e-01  1.27e-10  7.12e-13  3.70e-11  8.82e-14  2.79e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.0752ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:52 PM: Optimal value: 1.284e-01
(CVXPY) Oct 06 04:23:52 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:52 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 24, Objective: 0.1284
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:52 PM: Your problem has 511 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 761
  nnz(P)        = 0
  nnz(A)        = 5805
  cones (total) = 1
    : Nonnegative = 1,  numel = 761

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9616e-01  +2.5337e+02  2.53e+02  9.49e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +4.6324e-01  +5.8002e+01  5.75e+01  4.31e-01  1.35e+01  4.05e-03  5.76e-01  5.69e-01  
  2  +4.1256e-01  +1.1607e+01  1.12e+01  1.31e-01  5.72e+00  2.75e-02  2.61e-01  8.96e-01  
  3  +3.6945e-01  +2.9042e+00  2.53e+00  2.65e-02  1.31e+00  9.77e-03  6.17e-02  7.79e-01  
  4  +2.8992e-01  +2.3837e+00  2.09e+00  1.41e-02  7.03e-01  1.00e-02  3.37e-02  5.42e-01  
  5  +2.5798e-01  +1.1314e+00  8.73e-01  6.74e-03  3.29e-01  8.12e-05  1.74e-02  8.28e-01  
  6  +1.9869e-01  +5.0177e-01  3.03e-01  2.16e-03  1.04e-01  5.06e-05  6.13e-03  6.88e-01  
  7  +1.6990e-01  +3.5057e-01  1.81e-01  1.20e-03  5.96e-02  7.23e-05  3.58e-03  6.21e-01  
  8  +1.4964e-01  +2.3981e-01  9.02e-02  5.47e-04  2.81e-02  4.70e-05  1.71e-03  6.31e-01  
  9  +1.3714e-01  +1.7844e-01  4.13e-02  2.29e-04  1.22e-02  2.69e-05  7.41e-04  6.84e-01  
 10  +1.3129e-01  +1.5137e-01  2.01e-02  1.09e-04  5.84e-03  1.52e-05  3.65e-04  7.77e-01  
 11  +1.2564e-01  +1.2796e-01  2.33e-03  1.25e-05  6.66e-04  1.51e-06  4.41e-05  9.30e-01  
 12  +1.2491e-01  +1.2520e-01  2.87e-04  1.56e-06  8.21e-05  2.13e-07  5.83e-06  9.50e-01  
 13  +1.2480e-01  +1.2481e-01  4.07e-06  2.22e-08  1.17e-06  2.99e-09  8.37e-08  9.88e-01  
 14  +1.2480e-01  +1.2480e-01  4.08e-08  2.23e-10  1.17e-08  2.99e-11  8.37e-10  9.90e-01  
 15  +1.2480e-01  +1.2480e-01  4.08e-10  2.23e-12  1.17e-10  2.99e-13  8.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.0259ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:52 PM: Optimal value: 1.248e-01
(CVXPY) Oct 06 04:23:52 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:23:52 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 25, Objective: 0.1248
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:52 PM: Your problem has 521 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 771
  nnz(P)        = 0
  nnz(A)        = 5836
  cones (total) = 1
    : Nonnegative = 1,  numel = 771

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9614e-01  +2.5339e+02  2.53e+02  9.50e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +4.5862e-01  +5.8007e+01  5.75e+01  4.29e-01  1.33e+01  4.07e-03  5.74e-01  5.70e-01  
  2  +4.0613e-01  +1.1443e+01  1.10e+01  1.27e-01  5.54e+00  2.76e-02  2.55e-01  9.04e-01  
  3  +3.6234e-01  +2.8290e+00  2.47e+00  2.54e-02  1.24e+00  9.78e-03  5.94e-02  7.83e-01  
  4  +2.9024e-01  +2.4478e+00  2.16e+00  1.49e-02  7.37e-01  9.98e-03  3.57e-02  5.06e-01  
  5  +2.4482e-01  +9.3803e-01  6.93e-01  5.19e-03  2.51e-01  8.48e-05  1.35e-02  8.46e-01  
  6  +2.0213e-01  +5.7824e-01  3.76e-01  2.69e-03  1.30e-01  7.99e-05  7.51e-03  5.17e-01  
  7  +1.6398e-01  +3.3747e-01  1.73e-01  1.14e-03  5.64e-02  8.64e-05  3.42e-03  7.48e-01  
  8  +1.4641e-01  +2.4248e-01  9.61e-02  5.83e-04  2.96e-02  5.74e-05  1.81e-03  5.92e-01  
  9  +1.3209e-01  +1.6724e-01  3.51e-02  1.99e-04  1.03e-02  2.51e-05  6.53e-04  7.75e-01  
 10  +1.2895e-01  +1.5398e-01  2.50e-02  1.36e-04  7.26e-03  1.89e-05  4.50e-04  4.35e-01  
 11  +1.2353e-01  +1.3063e-01  7.10e-03  3.79e-05  2.02e-03  5.36e-06  1.32e-04  8.39e-01  
 12  +1.2144e-01  +1.2240e-01  9.52e-04  5.12e-06  2.71e-04  6.34e-07  1.86e-05  8.73e-01  
 13  +1.2113e-01  +1.2121e-01  8.37e-05  4.53e-07  2.38e-05  5.78e-08  1.68e-06  9.31e-01  
 14  +1.2110e-01  +1.2110e-01  8.61e-07  4.67e-09  2.46e-07  5.97e-10  1.74e-08  9.90e-01  
 15  +1.2110e-01  +1.2110e-01  8.63e-09  4.67e-11  2.46e-09  5.98e-12  1.74e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.1613ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:52 PM: Optimal value: 1.211e-01
(CVXPY) Oct 06 04:23:52 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:52 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 26, Objective: 0.1211
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:52 PM: Your problem has 531 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 781
  nnz(P)        = 0
  nnz(A)        = 5872
  cones (total) = 1
    : Nonnegative = 1,  numel = 781

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9609e-01  +2.5341e+02  2.53e+02  9.50e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +4.5537e-01  +5.8153e+01  5.77e+01  4.30e-01  1.32e+01  4.08e-03  5.74e-01  5.69e-01  
  2  +4.0364e-01  +1.1772e+01  1.14e+01  1.31e-01  5.62e+00  2.75e-02  2.61e-01  8.89e-01  
  3  +3.6221e-01  +3.0057e+00  2.64e+00  2.76e-02  1.34e+00  9.97e-03  6.47e-02  7.69e-01  
  4  +2.8450e-01  +2.5483e+00  2.26e+00  1.55e-02  7.59e-01  1.04e-02  3.72e-02  5.20e-01  
  5  +2.4724e-01  +1.0503e+00  8.03e-01  6.12e-03  2.94e-01  8.60e-05  1.59e-02  8.65e-01  
  6  +1.9130e-01  +4.8013e-01  2.89e-01  2.07e-03  9.86e-02  6.22e-05  5.92e-03  6.89e-01  
  7  +1.6463e-01  +3.4544e-01  1.81e-01  1.19e-03  5.86e-02  7.18e-05  3.53e-03  5.72e-01  
  8  +1.4195e-01  +2.2427e-01  8.23e-02  4.94e-04  2.51e-02  4.17e-05  1.56e-03  6.51e-01  
  9  +1.3110e-01  +1.7128e-01  4.02e-02  2.27e-04  1.17e-02  2.44e-05  7.43e-04  6.39e-01  
 10  +1.2617e-01  +1.4925e-01  2.31e-02  1.26e-04  6.64e-03  1.55e-05  4.22e-04  5.59e-01  
 11  +1.2058e-01  +1.2465e-01  4.07e-03  2.21e-05  1.16e-03  3.02e-06  7.83e-05  9.53e-01  
 12  +1.1930e-01  +1.1982e-01  5.18e-04  2.85e-06  1.47e-04  3.52e-07  1.07e-05  8.97e-01  
 13  +1.1913e-01  +1.1922e-01  8.29e-05  4.56e-07  2.36e-05  6.52e-08  1.73e-06  9.74e-01  
 14  +1.1910e-01  +1.1910e-01  9.21e-07  5.06e-09  2.62e-07  7.23e-10  1.93e-08  9.89e-01  
 15  +1.1910e-01  +1.1910e-01  9.23e-09  5.08e-11  2.62e-09  7.24e-12  1.93e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.1166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:52 PM: Optimal value: 1.191e-01
(CVXPY) Oct 06 04:23:52 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:52 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 27, Objective: 0.1191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:52 PM: Your problem has 541 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 791
  nnz(P)        = 0
  nnz(A)        = 5907
  cones (total) = 1
    : Nonnegative = 1,  numel = 791

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9598e-01  +2.5374e+02  2.53e+02  9.50e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +4.4821e-01  +5.8378e+01  5.79e+01  4.29e-01  1.31e+01  4.10e-03  5.73e-01  5.68e-01  
  2  +3.9442e-01  +1.0448e+01  1.01e+01  1.15e-01  5.04e+00  2.83e-02  2.37e-01  9.52e-01  
  3  +3.4961e-01  +3.0318e+00  2.68e+00  2.73e-02  1.32e+00  1.09e-02  6.41e-02  7.53e-01  
  4  +2.7529e-01  +2.4127e+00  2.14e+00  1.48e-02  7.23e-01  1.05e-02  3.59e-02  5.08e-01  
  5  +2.3997e-01  +1.0450e+00  8.05e-01  6.27e-03  2.99e-01  8.67e-05  1.64e-02  8.88e-01  
  6  +1.8788e-01  +4.7714e-01  2.89e-01  2.11e-03  1.00e-01  5.44e-05  6.04e-03  6.78e-01  
  7  +1.6214e-01  +3.4204e-01  1.80e-01  1.20e-03  5.92e-02  6.36e-05  3.58e-03  5.58e-01  
  8  +1.4045e-01  +2.2583e-01  8.54e-02  5.21e-04  2.64e-02  3.92e-05  1.64e-03  6.30e-01  
  9  +1.2854e-01  +1.6655e-01  3.80e-02  2.18e-04  1.12e-02  2.21e-05  7.14e-04  6.85e-01  
 10  +1.2446e-01  +1.4856e-01  2.41e-02  1.33e-04  7.01e-03  1.55e-05  4.46e-04  4.97e-01  
 11  +1.1886e-01  +1.2369e-01  4.83e-03  2.66e-05  1.39e-03  3.38e-06  9.38e-05  9.10e-01  
 12  +1.1779e-01  +1.1949e-01  1.70e-03  9.39e-06  4.87e-04  1.19e-06  3.46e-05  6.86e-01  
 13  +1.1743e-01  +1.1801e-01  5.87e-04  3.27e-06  1.69e-04  4.78e-07  1.22e-05  9.90e-01  
 14  +1.1721e-01  +1.1722e-01  1.74e-05  9.70e-08  5.00e-06  1.39e-08  3.67e-07  9.71e-01  
 15  +1.1720e-01  +1.1720e-01  1.74e-07  9.71e-10  5.01e-08  1.39e-10  3.67e-09  9.90e-01  
 16  +1.1720e-01  +1.1720e-01  1.74e-09  9.72e-12  5.01e-10  1.39e-12  3.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.9797ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:53 PM: Optimal value: 1.172e-01
(CVXPY) Oct 06 04:23:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:53 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 28, Objective: 0.1172
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:53 PM: Your problem has 551 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 801
  nnz(P)        = 0
  nnz(A)        = 5953
  cones (total) = 1
    : Nonnegative = 1,  numel = 801

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9591e-01  +2.5383e+02  2.53e+02  9.51e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +4.4083e-01  +5.8108e+01  5.77e+01  4.25e-01  1.29e+01  4.11e-03  5.69e-01  5.72e-01  
  2  +3.7242e-01  +1.0698e+01  1.03e+01  1.07e-01  4.68e+00  2.91e-02  2.23e-01  9.59e-01  
  3  +3.1636e-01  +3.1357e+00  2.82e+00  2.52e-02  1.21e+00  1.21e-02  5.93e-02  7.52e-01  
  4  +2.6310e-01  +2.1856e+00  1.92e+00  1.45e-02  7.00e-01  7.48e-03  3.50e-02  5.02e-01  
  5  +2.1113e-01  +6.6766e-01  4.57e-01  3.60e-03  1.69e-01  5.41e-04  9.55e-03  8.45e-01  
  6  +1.9639e-01  +5.9170e-01  3.95e-01  3.02e-03  1.43e-01  4.60e-04  8.18e-03  2.39e-01  
  7  +1.6196e-01  +3.7473e-01  2.13e-01  1.52e-03  7.34e-02  2.36e-04  4.44e-03  6.13e-01  
  8  +1.4398e-01  +2.7073e-01  1.27e-01  8.35e-04  4.16e-02  1.40e-04  2.55e-03  5.13e-01  
  9  +1.2997e-01  +1.9396e-01  6.40e-02  3.93e-04  1.99e-02  6.92e-05  1.26e-03  5.76e-01  
 10  +1.2354e-01  +1.6123e-01  3.77e-02  2.21e-04  1.14e-02  4.05e-05  7.30e-04  4.85e-01  
 11  +1.1962e-01  +1.4175e-01  2.21e-02  1.26e-04  6.63e-03  2.22e-05  4.27e-04  5.88e-01  
 12  +1.1435e-01  +1.1749e-01  3.14e-03  1.78e-05  9.31e-04  2.33e-06  6.40e-05  9.28e-01  
 13  +1.1390e-01  +1.1566e-01  1.77e-03  1.01e-05  5.23e-04  1.33e-06  3.72e-05  5.38e-01  
 14  +1.1347e-01  +1.1392e-01  4.49e-04  2.58e-06  1.33e-04  3.52e-07  9.78e-06  9.90e-01  
 15  +1.1330e-01  +1.1331e-01  9.67e-06  5.57e-08  2.87e-06  7.43e-09  2.12e-07  9.79e-01  
 16  +1.1330e-01  +1.1330e-01  9.68e-08  5.57e-10  2.87e-08  7.43e-11  2.13e-09  9.90e-01  
 17  +1.1330e-01  +1.1330e-01  9.68e-10  5.58e-12  2.87e-10  7.43e-13  2.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.892ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:53 PM: Optimal value: 1.133e-01
(CVXPY) Oct 06 04:23:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:53 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 29, Objective: 0.1133
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:53 PM: Your problem has 561 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 811
  nnz(P)        = 0
  nnz(A)        = 6011
  cones (total) = 1
    : Nonnegative = 1,  numel = 811

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9585e-01  +2.5414e+02  2.54e+02  9.51e-01  2.26e+01  1.00e+00  1.03e+00   ------   
  1  +4.3468e-01  +5.8414e+01  5.80e+01  4.24e-01  1.28e+01  4.14e-03  5.69e-01  5.71e-01  
  2  +3.6451e-01  +9.9879e+00  9.62e+00  1.00e-01  4.36e+00  2.94e-02  2.11e-01  9.90e-01  
  3  +3.0766e-01  +3.0438e+00  2.74e+00  2.45e-02  1.16e+00  1.26e-02  5.80e-02  7.48e-01  
  4  +2.5703e-01  +2.0805e+00  1.82e+00  1.40e-02  6.68e-01  7.38e-03  3.41e-02  5.05e-01  
  5  +2.0677e-01  +6.5658e-01  4.50e-01  3.59e-03  1.68e-01  6.81e-04  9.61e-03  8.24e-01  
  6  +1.8818e-01  +5.6787e-01  3.80e-01  2.89e-03  1.36e-01  5.33e-04  7.97e-03  3.37e-01  
  7  +1.5280e-01  +3.2753e-01  1.75e-01  1.22e-03  5.89e-02  2.34e-04  3.66e-03  6.41e-01  
  8  +1.3812e-01  +2.4879e-01  1.11e-01  7.17e-04  3.56e-02  1.42e-04  2.22e-03  5.10e-01  
  9  +1.2383e-01  +1.7022e-01  4.64e-02  2.80e-04  1.41e-02  5.20e-05  9.19e-04  7.34e-01  
 10  +1.1905e-01  +1.4530e-01  2.62e-02  1.56e-04  7.91e-03  2.20e-05  5.25e-04  8.23e-01  
 11  +1.1249e-01  +1.1595e-01  3.46e-03  2.03e-05  1.02e-03  2.40e-06  7.23e-05  8.72e-01  
 12  +1.1188e-01  +1.1337e-01  1.49e-03  8.86e-06  4.40e-04  1.06e-06  3.28e-05  6.63e-01  
 13  +1.1147e-01  +1.1165e-01  1.84e-04  1.10e-06  5.46e-05  1.37e-07  4.20e-06  9.90e-01  
 14  +1.1140e-01  +1.1140e-01  2.06e-06  1.23e-08  6.09e-07  1.51e-09  4.70e-08  9.89e-01  
 15  +1.1140e-01  +1.1140e-01  2.06e-08  1.23e-10  6.09e-09  1.51e-11  4.71e-10  9.90e-01  
 16  +1.1140e-01  +1.1140e-01  2.06e-10  1.24e-12  6.10e-11  1.51e-13  4.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.8003ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:53 PM: Optimal value: 1.114e-01
(CVXPY) Oct 06 04:23:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:53 PM: Solver (including time spent in interface) took 3.022e-02 seconds
Iteration: 30, Objective: 0.1114
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:53 PM: Your problem has 563 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:53 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 563
  constraints   = 813
  nnz(P)        = 0
  nnz(A)        = 6030
  cones (total) = 1
    : Nonnegative = 1,  numel = 813

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9584e-01  +2.5413e+02  2.54e+02  9.51e-01  2.26e+01  1.00e+00  1.03e+00   ------   
  1  +4.3401e-01  +5.8403e+01  5.80e+01  4.24e-01  1.27e+01  4.14e-03  5.68e-01  5.71e-01  
  2  +3.6306e-01  +1.0004e+01  9.64e+00  9.99e-02  4.34e+00  2.95e-02  2.11e-01  9.90e-01  
  3  +3.0597e-01  +3.0495e+00  2.74e+00  2.44e-02  1.15e+00  1.26e-02  5.79e-02  7.48e-01  
  4  +2.5708e-01  +2.0999e+00  1.84e+00  1.42e-02  6.78e-01  7.42e-03  3.46e-02  4.94e-01  
  5  +2.0643e-01  +6.5837e-01  4.52e-01  3.61e-03  1.69e-01  6.34e-04  9.65e-03  8.34e-01  
  6  +1.8709e-01  +5.6631e-01  3.79e-01  2.88e-03  1.36e-01  4.97e-04  7.93e-03  3.45e-01  
  7  +1.5267e-01  +3.3242e-01  1.80e-01  1.26e-03  6.05e-02  2.30e-04  3.75e-03  6.14e-01  
  8  +1.3612e-01  +2.3949e-01  1.03e-01  6.70e-04  3.32e-02  1.28e-04  2.08e-03  5.45e-01  
  9  +1.2251e-01  +1.6492e-01  4.24e-02  2.55e-04  1.29e-02  4.61e-05  8.33e-04  7.68e-01  
 10  +1.1801e-01  +1.4092e-01  2.29e-02  1.39e-04  6.97e-03  1.94e-05  4.71e-04  7.20e-01  
 11  +1.1561e-01  +1.2968e-01  1.41e-02  8.46e-05  4.24e-03  1.17e-05  2.91e-04  6.68e-01  
 12  +1.1205e-01  +1.1427e-01  2.22e-03  1.33e-05  6.63e-04  1.59e-06  4.83e-05  8.48e-01  
 13  +1.1160e-01  +1.1249e-01  8.88e-04  5.28e-06  2.63e-04  6.40e-07  2.00e-05  6.86e-01  
 14  +1.1138e-01  +1.1159e-01  2.14e-04  1.26e-06  6.28e-05  1.56e-07  4.96e-06  9.80e-01  
 15  +1.1130e-01  +1.1131e-01  9.86e-06  5.79e-08  2.88e-06  7.09e-09  2.30e-07  9.73e-01  
 16  +1.1130e-01  +1.1130e-01  9.96e-08  5.85e-10  2.91e-08  7.16e-11  2.33e-09  9.90e-01  
 17  +1.1130e-01  +1.1130e-01  9.98e-10  5.86e-12  2.92e-10  7.19e-13  2.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.5456ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:53 PM: Optimal value: 1.113e-01
(CVXPY) Oct 06 04:23:53 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:23:53 PM: Solver (including time spent in interface) took 3.132e-02 seconds
Iteration: 31, Objective: 0.1113
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:53 PM: Your problem has 564 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 564
  constraints   = 814
  nnz(P)        = 0
  nnz(A)        = 6040
  cones (total) = 1
    : Nonnegative = 1,  numel = 814

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9579e-01  +2.5403e+02  2.54e+02  9.51e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +4.3328e-01  +5.8392e+01  5.80e+01  4.24e-01  1.27e+01  4.14e-03  5.68e-01  5.71e-01  
  2  +3.6204e-01  +1.0010e+01  9.65e+00  9.99e-02  4.34e+00  2.95e-02  2.11e-01  9.90e-01  
  3  +3.0379e-01  +3.0404e+00  2.74e+00  2.42e-02  1.14e+00  1.27e-02  5.75e-02  7.50e-01  
  4  +2.5838e-01  +2.0874e+00  1.83e+00  1.43e-02  6.82e-01  7.15e-03  3.48e-02  4.90e-01  
  5  +2.0606e-01  +6.5612e-01  4.50e-01  3.61e-03  1.69e-01  5.99e-04  9.64e-03  8.38e-01  
  6  +1.8760e-01  +5.6823e-01  3.81e-01  2.90e-03  1.37e-01  4.79e-04  7.99e-03  3.28e-01  
  7  +1.5323e-01  +3.3737e-01  1.84e-01  1.29e-03  6.22e-02  2.26e-04  3.85e-03  6.14e-01  
  8  +1.3669e-01  +2.4327e-01  1.07e-01  6.96e-04  3.43e-02  1.28e-04  2.16e-03  5.32e-01  
  9  +1.2309e-01  +1.6881e-01  4.57e-02  2.78e-04  1.39e-02  5.16e-05  9.02e-04  6.90e-01  
 10  +1.1762e-01  +1.3981e-01  2.22e-02  1.34e-04  6.71e-03  1.86e-05  4.50e-04  7.91e-01  
 11  +1.1271e-01  +1.1702e-01  4.31e-03  2.58e-05  1.29e-03  3.24e-06  9.12e-05  9.03e-01  
 12  +1.1174e-01  +1.1304e-01  1.30e-03  7.78e-06  3.86e-04  9.49e-07  2.91e-05  7.40e-01  
 13  +1.1145e-01  +1.1189e-01  4.40e-04  2.61e-06  1.30e-04  3.20e-07  1.01e-05  7.56e-01  
 14  +1.1133e-01  +1.1141e-01  7.88e-05  4.64e-07  2.31e-05  5.71e-08  1.82e-06  8.45e-01  
 15  +1.1130e-01  +1.1130e-01  1.68e-06  9.90e-09  4.92e-07  1.21e-09  3.91e-08  9.89e-01  
 16  +1.1130e-01  +1.1130e-01  1.69e-08  9.93e-11  4.94e-09  1.22e-11  3.92e-10  9.90e-01  
 17  +1.1130e-01  +1.1130e-01  1.70e-10  9.98e-13  4.96e-11  1.22e-13  3.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.9812ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:53 PM: Optimal value: 1.113e-01
(CVXPY) Oct 06 04:23:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:53 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 32, Objective: 0.1113
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:54 PM: Your problem has 565 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 565
  constraints   = 815
  nnz(P)        = 0
  nnz(A)        = 6051
  cones (total) = 1
    : Nonnegative = 1,  numel = 815

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9578e-01  +2.5404e+02  2.54e+02  9.51e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +4.3329e-01  +5.8354e+01  5.79e+01  4.24e-01  1.27e+01  4.14e-03  5.68e-01  5.71e-01  
  2  +3.6190e-01  +9.9810e+00  9.62e+00  9.96e-02  4.32e+00  2.94e-02  2.10e-01  9.90e-01  
  3  +3.0424e-01  +3.0581e+00  2.75e+00  2.45e-02  1.15e+00  1.27e-02  5.81e-02  7.47e-01  
  4  +2.5920e-01  +2.1434e+00  1.88e+00  1.47e-02  7.02e-01  7.49e-03  3.59e-02  4.76e-01  
  5  +2.0709e-01  +6.6050e-01  4.53e-01  3.64e-03  1.70e-01  4.83e-04  9.73e-03  8.56e-01  
  6  +1.8870e-01  +5.7335e-01  3.85e-01  2.94e-03  1.38e-01  4.00e-04  8.08e-03  3.16e-01  
  7  +1.5378e-01  +3.4060e-01  1.87e-01  1.32e-03  6.33e-02  1.93e-04  3.92e-03  6.20e-01  
  8  +1.3528e-01  +2.3470e-01  9.94e-02  6.48e-04  3.19e-02  1.02e-04  2.01e-03  5.87e-01  
  9  +1.2268e-01  +1.6680e-01  4.41e-02  2.67e-04  1.34e-02  4.42e-05  8.69e-04  6.89e-01  
 10  +1.1783e-01  +1.4049e-01  2.27e-02  1.38e-04  6.90e-03  1.82e-05  4.66e-04  7.56e-01  
 11  +1.1358e-01  +1.2089e-01  7.31e-03  4.39e-05  2.20e-03  5.72e-06  1.54e-04  8.47e-01  
 12  +1.1212e-01  +1.1478e-01  2.66e-03  1.59e-05  7.95e-04  2.03e-06  5.86e-05  7.33e-01  
 13  +1.1143e-01  +1.1207e-01  6.45e-04  3.75e-06  1.90e-04  4.71e-07  1.48e-05  8.11e-01  
 14  +1.1122e-01  +1.1128e-01  5.99e-05  3.44e-07  1.74e-05  4.25e-08  1.41e-06  9.87e-01  
 15  +1.1120e-01  +1.1120e-01  8.75e-07  5.01e-09  2.54e-07  6.18e-10  2.06e-08  9.88e-01  
 16  +1.1120e-01  +1.1120e-01  8.78e-09  5.03e-11  2.55e-09  6.20e-12  2.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.4889ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:54 PM: Optimal value: 1.112e-01
(CVXPY) Oct 06 04:23:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:54 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 33, Objective: 0.1112
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:54 PM: Your problem has 566 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 566
  constraints   = 816
  nnz(P)        = 0
  nnz(A)        = 6059
  cones (total) = 1
    : Nonnegative = 1,  numel = 816

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9578e-01  +2.5402e+02  2.54e+02  9.51e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +4.3304e-01  +5.8351e+01  5.79e+01  4.24e-01  1.27e+01  4.14e-03  5.68e-01  5.71e-01  
  2  +3.6192e-01  +9.9704e+00  9.61e+00  9.96e-02  4.32e+00  2.94e-02  2.10e-01  9.90e-01  
  3  +3.0426e-01  +3.0596e+00  2.76e+00  2.45e-02  1.16e+00  1.27e-02  5.82e-02  7.47e-01  
  4  +2.5987e-01  +2.1671e+00  1.91e+00  1.49e-02  7.11e-01  7.66e-03  3.64e-02  4.66e-01  
  5  +2.0776e-01  +6.6756e-01  4.60e-01  3.70e-03  1.73e-01  4.27e-04  9.87e-03  8.65e-01  
  6  +1.8940e-01  +5.7837e-01  3.89e-01  2.98e-03  1.40e-01  3.60e-04  8.18e-03  3.08e-01  
  7  +1.5404e-01  +3.4279e-01  1.89e-01  1.33e-03  6.40e-02  1.77e-04  3.97e-03  6.29e-01  
  8  +1.3553e-01  +2.3698e-01  1.01e-01  6.62e-04  3.27e-02  9.60e-05  2.06e-03  5.87e-01  
  9  +1.2211e-01  +1.6400e-01  4.19e-02  2.54e-04  1.27e-02  3.89e-05  8.28e-04  7.21e-01  
 10  +1.1794e-01  +1.4105e-01  2.31e-02  1.42e-04  7.05e-03  1.82e-05  4.79e-04  7.08e-01  
 11  +1.1556e-01  +1.2973e-01  1.42e-02  8.59e-05  4.28e-03  1.13e-05  2.95e-04  6.74e-01  
 12  +1.1258e-01  +1.1666e-01  4.09e-03  2.48e-05  1.23e-03  3.07e-06  8.87e-05  7.25e-01  
 13  +1.1188e-01  +1.1389e-01  2.01e-03  1.18e-05  5.97e-04  1.51e-06  4.47e-05  6.38e-01  
 14  +1.1134e-01  +1.1172e-01  3.82e-04  2.22e-06  1.12e-04  2.77e-07  8.85e-06  9.90e-01  
 15  +1.1121e-01  +1.1124e-01  3.21e-05  1.84e-07  9.35e-06  2.28e-08  7.57e-07  9.22e-01  
 16  +1.1120e-01  +1.1120e-01  5.00e-07  2.86e-09  1.45e-07  3.53e-10  1.18e-08  9.89e-01  
 17  +1.1120e-01  +1.1120e-01  5.02e-09  2.88e-11  1.46e-09  3.55e-12  1.18e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.0784ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:54 PM: Optimal value: 1.112e-01
(CVXPY) Oct 06 04:23:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:54 PM: Solver (including time spent in interface) took 3.126e-02 seconds
Iteration: 34, Objective: 0.1112
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:23:54 PM: Your problem has 568 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:23:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:23:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:23:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:23:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:23:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:23:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:23:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:23:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:23:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:23:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 568
  constraints   = 818
  nnz(P)        = 0
  nnz(A)        = 6080
  cones (total) = 1
    : Nonnegative = 1,  numel = 818

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9578e-01  +2.5402e+02  2.54e+02  9.51e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +4.3301e-01  +5.8332e+01  5.79e+01  4.24e-01  1.27e+01  4.14e-03  5.67e-01  5.72e-01  
  2  +3.6115e-01  +9.9592e+00  9.60e+00  9.93e-02  4.30e+00  2.93e-02  2.10e-01  9.90e-01  
  3  +3.0435e-01  +3.0691e+00  2.76e+00  2.47e-02  1.16e+00  1.27e-02  5.88e-02  7.44e-01  
  4  +2.6014e-01  +2.2150e+00  1.95e+00  1.53e-02  7.28e-01  7.96e-03  3.73e-02  4.53e-01  
  5  +2.0882e-01  +6.8301e-01  4.74e-01  3.83e-03  1.78e-01  3.39e-04  1.02e-02  8.77e-01  
  6  +1.8996e-01  +5.8625e-01  3.96e-01  3.04e-03  1.43e-01  2.94e-04  8.35e-03  3.05e-01  
  7  +1.5337e-01  +3.4261e-01  1.89e-01  1.34e-03  6.42e-02  1.49e-04  3.99e-03  6.63e-01  
  8  +1.3544e-01  +2.3928e-01  1.04e-01  6.81e-04  3.35e-02  8.49e-05  2.12e-03  5.82e-01  
  9  +1.2280e-01  +1.6929e-01  4.65e-02  2.85e-04  1.42e-02  3.85e-05  9.34e-04  6.89e-01  
 10  +1.1640e-01  +1.3505e-01  1.86e-02  1.13e-04  5.63e-03  1.43e-05  3.85e-04  8.16e-01  
 11  +1.1274e-01  +1.1778e-01  5.05e-03  3.07e-05  1.52e-03  3.57e-06  1.10e-04  7.48e-01  
 12  +1.1188e-01  +1.1405e-01  2.16e-03  1.31e-05  6.43e-04  1.53e-06  4.96e-05  6.89e-01  
 13  +1.1135e-01  +1.1181e-01  4.54e-04  2.73e-06  1.34e-04  3.14e-07  1.09e-05  8.24e-01  
 14  +1.1127e-01  +1.1147e-01  2.03e-04  1.21e-06  5.98e-05  1.42e-07  4.86e-06  8.41e-01  
 15  +1.1120e-01  +1.1122e-01  1.14e-05  6.79e-08  3.36e-06  8.00e-09  2.75e-07  9.48e-01  
 16  +1.1120e-01  +1.1120e-01  1.16e-07  6.86e-10  3.40e-08  8.07e-11  2.78e-09  9.90e-01  
 17  +1.1120e-01  +1.1120e-01  1.16e-09  6.87e-12  3.40e-10  8.09e-13  2.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.8106ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:23:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:23:54 PM: Optimal value: 1.112e-01
(CVXPY) Oct 06 04:23:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:23:54 PM: Solver (including time spent in interface) took 3.118e-02 seconds
FULL MODEL:
  Accruacy: 0.874
  Our objective: 0.748

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1)                                                        <-- (term's our objective: 0.104)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x9 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x8 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.052)
 OR (x0 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 0 AND x2 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.048)
 OR (x0 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x9 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.032)
 OR (x1 = 0 AND x2 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.048)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.032)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x3 = 0 AND x4 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.024)
 OR (x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.012)
 OR (x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.028)
 OR (x3 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.04)
 OR (x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.028)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 11.964639902114868
Best over terms:
  Our final objective: 0.104
    Its accruacy: 0.552
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.104
  Highest accruacy: 0.552
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

