Command:
python test_script.py -s constant_subclass -d 4 -n 10000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 4.

Computed total variation: 0.14600000000000002
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:20 PM: Your problem has 5009 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:20 PM: Finished problem compilation (took 5.471e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5009
  constraints   = 10009
  nnz(P)        = 0
  nnz(A)        = 35009
  cones (total) = 1
    : Nonnegative = 1,  numel = 10009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +5.0010e+03  5.00e+03  9.84e-01  8.58e+01  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +9.6886e+02  9.68e+02  3.38e-01  4.78e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5104e-01  +1.5090e+02  1.50e+02  1.40e-01  2.42e+01  8.22e-03  2.27e-01  7.25e-01  
  3  +5.1084e-01  +3.2679e+01  3.22e+01  1.11e-01  1.89e+01  1.78e-05  2.25e-01  6.49e-02  
  4  +5.0005e-01  +1.0525e+00  5.52e-01  3.71e-03  6.36e-01  3.83e-06  1.44e-01  9.90e-01  
  5  +4.9999e-01  +6.2248e-01  1.22e-01  8.18e-04  1.41e-01  1.35e-06  2.97e-02  8.21e-01  
  6  +4.9900e-01  +7.7873e-01  2.80e-01  8.99e-04  1.56e-01  2.43e-05  3.38e-03  9.34e-01  
  7  +4.9122e-01  +7.1003e-01  2.19e-01  1.09e-04  1.89e-02  1.73e-04  3.38e-04  9.00e-01  
  8  +4.7422e-01  +5.5404e-01  7.98e-02  1.96e-05  3.40e-03  1.55e-04  6.31e-05  8.46e-01  
  9  +4.6121e-01  +4.7551e-01  1.43e-02  3.36e-06  5.81e-04  9.80e-06  1.22e-05  9.20e-01  
 10  +4.5640e-01  +4.5709e-01  6.82e-04  1.42e-07  2.46e-05  1.98e-07  6.00e-07  9.77e-01  
 11  +4.5620e-01  +4.5621e-01  6.87e-06  1.43e-09  2.47e-07  2.00e-09  6.05e-09  9.90e-01  
 12  +4.5620e-01  +4.5620e-01  6.87e-08  1.43e-11  2.47e-09  2.00e-11  6.05e-11  9.90e-01  
 13  +4.5620e-01  +4.5620e-01  6.87e-10  1.43e-13  2.47e-11  2.02e-13  6.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.5229ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:20 PM: Optimal value: 4.562e-01
(CVXPY) Oct 06 03:51:20 PM: Compilation took 5.471e-02 seconds
(CVXPY) Oct 06 03:51:20 PM: Solver (including time spent in interface) took 7.261e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:20 PM: Your problem has 5019 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:20 PM: Finished problem compilation (took 2.165e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5019
  constraints   = 10019
  nnz(P)        = 0
  nnz(A)        = 44720
  cones (total) = 1
    : Nonnegative = 1,  numel = 10019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +5.0013e+03  5.00e+03  9.84e-01  9.18e+01  1.00e+00  1.00e+00   ------   
  1  +6.0802e-01  +9.6971e+02  9.69e+02  3.39e-01  5.11e+01  4.10e-03  4.74e-01  6.67e-01  
  2  +5.5077e-01  +1.5037e+02  1.50e+02  1.40e-01  2.58e+01  8.27e-03  2.28e-01  7.27e-01  
  3  +5.1070e-01  +3.2401e+01  3.19e+01  1.11e-01  2.01e+01  1.78e-05  2.25e-01  6.74e-02  
  4  +5.0044e-01  +2.2575e+00  1.76e+00  1.18e-02  2.13e+00  4.66e-06  1.90e-01  4.21e-01  
  5  +5.0008e-01  +9.4043e-01  4.40e-01  2.95e-03  5.41e-01  1.62e-06  8.95e-02  6.00e-01  
  6  +5.0002e-01  +7.6247e-01  2.62e-01  1.75e-03  3.22e-01  1.44e-06  3.70e-02  6.61e-01  
  7  +4.9976e-01  +8.6931e-01  3.70e-01  1.68e-03  3.11e-01  6.95e-06  7.05e-03  9.90e-01  
  8  +4.9312e-01  +7.5584e-01  2.63e-01  9.47e-05  1.77e-02  1.14e-04  2.72e-04  9.62e-01  
  9  +4.9386e-01  +7.3610e-01  2.42e-01  7.73e-05  1.44e-02  7.86e-05  2.14e-04  4.70e-01  
 10  +4.9359e-01  +7.2457e-01  2.31e-01  6.69e-05  1.25e-02  7.02e-05  1.84e-04  2.65e-01  
 11  +4.9361e-01  +6.7042e-01  1.77e-01  5.61e-05  1.05e-02  6.41e-07  1.55e-04  8.48e-01  
 12  +4.9055e-01  +6.5548e-01  1.65e-01  3.83e-05  7.14e-03  3.43e-06  1.06e-04  5.77e-01  
 13  +4.8871e-01  +6.4674e-01  1.58e-01  3.76e-05  7.00e-03  3.91e-06  1.04e-04  1.37e-01  
 14  +4.7607e-01  +5.9563e-01  1.20e-01  2.21e-05  4.11e-03  4.18e-06  6.25e-05  5.07e-01  
 15  +4.7540e-01  +5.9283e-01  1.17e-01  2.20e-05  4.09e-03  4.19e-06  6.24e-05  3.87e-02  
 16  +4.6432e-01  +5.5179e-01  8.75e-02  1.58e-05  2.94e-03  3.63e-06  4.61e-05  4.52e-01  
 17  +4.5790e-01  +5.2906e-01  7.12e-02  1.25e-05  2.32e-03  2.94e-06  3.70e-05  2.19e-01  
 18  +4.3696e-01  +4.5578e-01  1.88e-02  3.03e-06  5.61e-04  7.22e-07  9.44e-06  7.89e-01  
 19  +4.2903e-01  +4.2931e-01  2.83e-04  4.44e-08  8.21e-06  7.26e-09  1.41e-07  9.87e-01  
 20  +4.2890e-01  +4.2890e-01  2.83e-06  4.43e-10  8.21e-08  7.26e-11  1.41e-09  9.90e-01  
 21  +4.2890e-01  +4.2890e-01  2.83e-08  4.44e-12  8.21e-10  7.32e-13  1.42e-11  9.90e-01  
 22  +4.2890e-01  +4.2890e-01  2.83e-10  4.43e-14  8.21e-12  7.38e-15  1.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.7249ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:20 PM: Optimal value: 4.289e-01
(CVXPY) Oct 06 03:51:20 PM: Compilation took 2.165e-02 seconds
(CVXPY) Oct 06 03:51:20 PM: Solver (including time spent in interface) took 1.421e-01 seconds
Iteration: 2, Objective: 0.4289
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:20 PM: Your problem has 5020 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:20 PM: Finished problem compilation (took 3.040e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5020
  constraints   = 10020
  nnz(P)        = 0
  nnz(A)        = 45061
  cones (total) = 1
    : Nonnegative = 1,  numel = 10020

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0012e+03  5.00e+03  9.84e-01  9.19e+01  1.00e+00  1.00e+00   ------   
  1  +6.0791e-01  +9.7032e+02  9.70e+02  3.39e-01  5.12e+01  4.09e-03  4.75e-01  6.67e-01  
  2  +5.5070e-01  +1.5026e+02  1.50e+02  1.40e-01  2.59e+01  8.30e-03  2.28e-01  7.28e-01  
  3  +5.1069e-01  +3.2400e+01  3.19e+01  1.11e-01  2.01e+01  1.79e-05  2.25e-01  6.79e-02  
  4  +5.0042e-01  +2.2209e+00  1.72e+00  1.15e-02  2.09e+00  4.67e-06  1.89e-01  4.32e-01  
  5  +5.0009e-01  +9.4895e-01  4.49e-01  3.00e-03  5.52e-01  1.66e-06  9.00e-02  5.91e-01  
  6  +5.0005e-01  +8.3719e-01  3.37e-01  2.25e-03  4.14e-01  1.60e-06  4.91e-02  5.42e-01  
  7  +5.0009e-01  +9.3952e-01  4.39e-01  2.87e-03  5.28e-01  1.68e-06  3.26e-02  7.87e-01  
  8  +4.9971e-01  +7.3410e-01  2.34e-01  8.01e-04  1.49e-01  7.07e-06  2.81e-03  9.30e-01  
  9  +4.9528e-01  +6.9483e-01  2.00e-01  7.39e-05  1.38e-02  7.77e-05  2.07e-04  9.26e-01  
 10  +4.9614e-01  +7.0393e-01  2.08e-01  6.21e-05  1.16e-02  7.90e-05  1.70e-04  3.91e-01  
 11  +4.9404e-01  +6.9231e-01  1.98e-01  4.84e-05  9.04e-03  8.42e-05  1.32e-04  2.83e-01  
 12  +4.9265e-01  +6.8401e-01  1.91e-01  4.78e-05  8.92e-03  7.35e-05  1.32e-04  6.47e-02  
 13  +4.9187e-01  +6.7938e-01  1.88e-01  4.68e-05  8.73e-03  6.62e-05  1.29e-04  9.45e-02  
 14  +4.8094e-01  +6.2710e-01  1.46e-01  2.91e-05  5.41e-03  3.39e-05  8.19e-05  6.80e-01  
 15  +4.7655e-01  +6.0958e-01  1.33e-01  2.58e-05  4.79e-03  2.90e-05  7.34e-05  1.49e-01  
 16  +4.7542e-01  +6.0491e-01  1.29e-01  2.53e-05  4.70e-03  2.59e-05  7.24e-05  8.63e-02  
 17  +4.6266e-01  +5.5516e-01  9.25e-02  1.73e-05  3.22e-03  1.03e-05  5.15e-05  5.86e-01  
 18  +4.4476e-01  +4.8815e-01  4.34e-02  7.50e-06  1.39e-03  3.04e-06  2.34e-05  7.85e-01  
 19  +4.2856e-01  +4.3151e-01  2.95e-03  4.86e-07  8.99e-05  1.09e-07  1.60e-06  9.49e-01  
 20  +4.2722e-01  +4.2725e-01  3.53e-05  5.78e-09  1.07e-06  1.31e-09  1.93e-08  9.89e-01  
 21  +4.2720e-01  +4.2720e-01  3.53e-07  5.78e-11  1.07e-08  1.31e-11  1.93e-10  9.90e-01  
 22  +4.2720e-01  +4.2720e-01  3.53e-09  5.78e-13  1.07e-10  1.32e-13  1.94e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 138.2457ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:20 PM: Optimal value: 4.272e-01
(CVXPY) Oct 06 03:51:20 PM: Compilation took 3.040e-02 seconds
(CVXPY) Oct 06 03:51:20 PM: Solver (including time spent in interface) took 1.496e-01 seconds
FULL MODEL:
  Accruacy: 0.573
  Our objective: 0.14599999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)            <-- (term's our objective: 0.1424)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1) <-- (term's our objective: 0.0036)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.819993019104004
Best over terms:
  Our final objective: 0.1424
    Its accruacy: 0.5712
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1424
  Highest accruacy: 0.5712
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

