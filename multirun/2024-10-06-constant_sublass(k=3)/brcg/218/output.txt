Command:
python test_script.py -s constant_subclass -d 6 -n 500 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.184
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 6.

Computed total variation: 0.376
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:51 PM: Your problem has 263 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:51 PM: Finished problem compilation (took 5.006e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 263
  constraints   = 513
  nnz(P)        = 0
  nnz(A)        = 2263
  cones (total) = 1
    : Nonnegative = 1,  numel = 513

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +2.5082e+02  2.50e+02  9.35e-01  2.14e+01  1.00e+00  1.01e+00   ------   
  1  +5.9229e-01  +5.1842e+01  5.13e+01  3.64e-01  1.27e+01  3.91e-03  5.29e-01  6.27e-01  
  2  +5.3850e-01  +6.9344e+00  6.40e+00  1.17e-01  5.08e+00  1.18e-02  2.32e-01  8.60e-01  
  3  +5.0140e-01  +1.3560e+00  8.55e-01  2.56e-02  1.08e+00  5.10e-04  1.92e-01  6.27e-01  
  4  +4.9966e-01  +6.9461e-01  1.95e-01  5.81e-03  2.52e-01  1.79e-04  4.28e-02  8.31e-01  
  5  +4.7912e-01  +8.5339e-01  3.74e-01  2.05e-03  9.09e-02  1.99e-03  6.60e-03  9.51e-01  
  6  +4.5527e-01  +5.8498e-01  1.30e-01  6.04e-04  2.67e-02  3.00e-04  2.20e-03  7.62e-01  
  7  +4.3845e-01  +4.9204e-01  5.36e-02  2.33e-04  1.03e-02  7.13e-05  9.60e-04  7.60e-01  
  8  +4.2756e-01  +4.3868e-01  1.11e-02  4.69e-05  2.06e-03  9.53e-06  2.09e-04  9.90e-01  
  9  +4.2417e-01  +4.2437e-01  2.05e-04  8.65e-07  3.80e-05  1.67e-07  3.96e-06  9.90e-01  
 10  +4.2410e-01  +4.2410e-01  2.05e-06  8.64e-09  3.79e-07  1.67e-09  3.96e-08  9.90e-01  
 11  +4.2410e-01  +4.2410e-01  2.05e-08  8.64e-11  3.79e-09  1.67e-11  3.96e-10  9.90e-01  
 12  +4.2410e-01  +4.2410e-01  2.05e-10  8.64e-13  3.79e-11  1.67e-13  3.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.5206ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:51 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 03:57:51 PM: Compilation took 5.006e-02 seconds
(CVXPY) Oct 06 03:57:51 PM: Solver (including time spent in interface) took 5.024e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:51 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:51 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2790
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9871e-01  +2.5208e+02  2.52e+02  9.36e-01  2.24e+01  1.00e+00  1.02e+00   ------   
  1  +5.8745e-01  +5.2194e+01  5.16e+01  3.69e-01  1.33e+01  3.90e-03  5.36e-01  6.25e-01  
  2  +5.3359e-01  +6.4266e+00  5.89e+00  1.08e-01  4.87e+00  1.26e-02  2.16e-01  9.13e-01  
  3  +5.0240e-01  +1.8116e+00  1.31e+00  3.91e-02  1.73e+00  2.72e-03  1.66e-01  6.36e-01  
  4  +4.9287e-01  +1.0431e+00  5.50e-01  1.02e-02  4.75e-01  3.44e-03  3.14e-02  8.91e-01  
  5  +4.7189e-01  +8.7869e-01  4.07e-01  3.55e-03  1.67e-01  5.42e-03  1.07e-02  6.83e-01  
  6  +4.5289e-01  +7.0424e-01  2.51e-01  1.80e-03  8.35e-02  1.85e-03  6.42e-03  5.89e-01  
  7  +4.4427e-01  +6.3635e-01  1.92e-01  1.23e-03  5.69e-02  1.30e-03  4.54e-03  3.76e-01  
  8  +4.3545e-01  +5.6076e-01  1.25e-01  7.16e-04  3.30e-02  2.14e-04  2.51e-03  9.90e-01  
  9  +4.2535e-01  +4.9481e-01  6.95e-02  2.73e-04  1.26e-02  1.44e-04  8.94e-04  8.56e-01  
 10  +4.1954e-01  +4.7122e-01  5.17e-02  2.50e-04  1.15e-02  6.58e-05  8.83e-04  1.01e-01  
 11  +4.0840e-01  +4.3156e-01  2.32e-02  8.30e-05  3.83e-03  3.92e-05  2.89e-04  7.05e-01  
 12  +4.0077e-01  +4.0220e-01  1.42e-03  4.89e-06  2.26e-04  2.11e-06  1.81e-05  9.57e-01  
 13  +4.0021e-01  +4.0022e-01  1.48e-05  5.09e-08  2.34e-06  2.19e-08  1.89e-07  9.90e-01  
 14  +4.0020e-01  +4.0020e-01  1.48e-07  5.08e-10  2.34e-08  2.19e-10  1.89e-09  9.90e-01  
 15  +4.0020e-01  +4.0020e-01  1.48e-09  5.08e-12  2.34e-10  2.19e-12  1.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4809ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:51 PM: Optimal value: 4.002e-01
(CVXPY) Oct 06 03:57:51 PM: Compilation took 5.006e-03 seconds
(CVXPY) Oct 06 03:57:51 PM: Solver (including time spent in interface) took 1.506e-03 seconds
Iteration: 2, Objective: 0.4002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:51 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:51 PM: Finished problem compilation (took 5.113e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 3157
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9835e-01  +2.5156e+02  2.51e+02  9.37e-01  2.29e+01  1.00e+00  1.03e+00   ------   
  1  +5.8395e-01  +5.2424e+01  5.18e+01  3.76e-01  1.35e+01  3.89e-03  5.48e-01  6.20e-01  
  2  +5.3029e-01  +6.1116e+00  5.58e+00  1.04e-01  4.67e+00  1.34e-02  2.11e-01  9.50e-01  
  3  +5.0117e-01  +1.7457e+00  1.24e+00  3.68e-02  1.65e+00  3.25e-03  1.37e-01  8.00e-01  
  4  +4.8088e-01  +1.4647e+00  9.84e-01  9.86e-03  4.69e-01  8.20e-03  2.71e-02  9.14e-01  
  5  +4.5798e-01  +9.8650e-01  5.29e-01  4.11e-03  1.93e-01  4.02e-03  1.22e-02  6.26e-01  
  6  +4.5156e-01  +9.4228e-01  4.91e-01  3.08e-03  1.45e-01  3.55e-03  9.03e-03  4.13e-01  
  7  +4.3871e-01  +8.6058e-01  4.22e-01  2.08e-03  9.82e-02  3.35e-03  6.22e-03  3.59e-01  
  8  +4.1764e-01  +6.6827e-01  2.51e-01  1.25e-03  5.84e-02  1.64e-04  4.03e-03  7.75e-01  
  9  +3.8082e-01  +4.6089e-01  8.01e-02  3.58e-04  1.65e-02  4.14e-05  1.32e-03  7.21e-01  
 10  +3.6748e-01  +3.9483e-01  2.73e-02  1.22e-04  5.60e-03  1.39e-05  4.87e-04  6.43e-01  
 11  +3.6058e-01  +3.6148e-01  8.98e-04  3.99e-06  1.83e-04  4.23e-07  1.70e-05  9.72e-01  
 12  +3.6033e-01  +3.6043e-01  9.59e-05  4.19e-07  1.92e-05  7.64e-08  1.90e-06  9.90e-01  
 13  +3.6030e-01  +3.6030e-01  1.68e-06  7.26e-09  3.33e-07  1.29e-09  3.37e-08  9.83e-01  
 14  +3.6030e-01  +3.6030e-01  1.68e-08  7.27e-11  3.33e-09  1.29e-11  3.37e-10  9.90e-01  
 15  +3.6030e-01  +3.6030e-01  1.68e-10  7.27e-13  3.34e-11  1.33e-13  3.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0471ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:51 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:51 PM: Optimal value: 3.603e-01
(CVXPY) Oct 06 03:57:51 PM: Compilation took 5.113e-03 seconds
(CVXPY) Oct 06 03:57:51 PM: Solver (including time spent in interface) took 5.006e-03 seconds
Iteration: 3, Objective: 0.3603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:52 PM: Your problem has 293 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Finished problem compilation (took 9.999e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 293
  constraints   = 543
  nnz(P)        = 0
  nnz(A)        = 3349
  cones (total) = 1
    : Nonnegative = 1,  numel = 543

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9828e-01  +2.5152e+02  2.51e+02  9.38e-01  2.28e+01  1.00e+00  1.03e+00   ------   
  1  +5.8182e-01  +5.2481e+01  5.19e+01  3.79e-01  1.34e+01  3.89e-03  5.48e-01  6.19e-01  
  2  +5.2766e-01  +5.8184e+00  5.29e+00  9.79e-02  4.43e+00  1.37e-02  2.01e-01  9.77e-01  
  3  +5.0184e-01  +1.9101e+00  1.41e+00  3.87e-02  1.77e+00  4.24e-03  1.21e-01  7.87e-01  
  4  +4.8623e-01  +1.9121e+00  1.43e+00  1.46e-02  6.93e-01  9.08e-03  3.84e-02  8.26e-01  
  5  +4.5488e-01  +1.2670e+00  8.12e-01  4.95e-03  2.36e-01  7.44e-03  1.38e-02  6.89e-01  
  6  +4.3615e-01  +1.0957e+00  6.60e-01  3.34e-03  1.59e-01  5.82e-03  9.52e-03  3.92e-01  
  7  +3.9973e-01  +7.1867e-01  3.19e-01  1.60e-03  7.46e-02  9.75e-04  5.19e-03  6.24e-01  
  8  +3.6949e-01  +5.3216e-01  1.63e-01  7.88e-04  3.62e-02  3.71e-04  2.89e-03  5.32e-01  
  9  +3.4252e-01  +3.8232e-01  3.98e-02  1.88e-04  8.57e-03  6.56e-05  8.00e-04  7.69e-01  
 10  +3.3801e-01  +3.6353e-01  2.55e-02  1.14e-04  5.19e-03  4.00e-05  5.06e-04  4.57e-01  
 11  +3.3148e-01  +3.3392e-01  2.44e-03  1.07e-05  4.89e-04  2.25e-06  5.08e-05  9.90e-01  
 12  +3.3071e-01  +3.3073e-01  2.53e-05  1.11e-07  5.06e-06  2.31e-08  5.30e-07  9.90e-01  
 13  +3.3070e-01  +3.3070e-01  2.53e-07  1.11e-09  5.06e-08  2.31e-10  5.30e-09  9.90e-01  
 14  +3.3070e-01  +3.3070e-01  2.53e-09  1.11e-11  5.06e-10  2.31e-12  5.30e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.1917ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:52 PM: Optimal value: 3.307e-01
(CVXPY) Oct 06 03:57:52 PM: Compilation took 9.999e-03 seconds
(CVXPY) Oct 06 03:57:52 PM: Solver (including time spent in interface) took 5.020e-03 seconds
Iteration: 4, Objective: 0.3307
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:52 PM: Your problem has 298 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Finished problem compilation (took 5.076e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 298
  constraints   = 548
  nnz(P)        = 0
  nnz(A)        = 3403
  cones (total) = 1
    : Nonnegative = 1,  numel = 548

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9821e-01  +2.5154e+02  2.51e+02  9.38e-01  2.28e+01  1.00e+00  1.03e+00   ------   
  1  +5.8007e-01  +5.2567e+01  5.20e+01  3.80e-01  1.33e+01  3.89e-03  5.48e-01  6.18e-01  
  2  +5.2632e-01  +5.6983e+00  5.17e+00  9.55e-02  4.31e+00  1.39e-02  1.97e-01  9.90e-01  
  3  +5.0184e-01  +1.9278e+00  1.43e+00  3.69e-02  1.70e+00  4.53e-03  1.08e-01  7.97e-01  
  4  +4.8879e-01  +2.0639e+00  1.58e+00  1.67e-02  7.94e-01  8.64e-03  4.33e-02  7.64e-01  
  5  +4.5975e-01  +1.3467e+00  8.87e-01  5.92e-03  2.81e-01  6.68e-03  1.62e-02  6.65e-01  
  6  +4.3380e-01  +1.1495e+00  7.16e-01  3.39e-03  1.61e-01  5.99e-03  9.55e-03  5.05e-01  
  7  +3.9392e-01  +7.0000e-01  3.06e-01  1.58e-03  7.32e-02  2.35e-04  5.25e-03  6.94e-01  
  8  +3.6599e-01  +5.3292e-01  1.67e-01  8.19e-04  3.75e-02  1.20e-04  3.04e-03  5.07e-01  
  9  +3.3804e-01  +3.7947e-01  4.14e-02  1.96e-04  8.92e-03  2.52e-05  8.66e-04  7.72e-01  
 10  +3.2804e-01  +3.3239e-01  4.35e-03  2.00e-05  9.09e-04  3.06e-06  9.86e-05  9.56e-01  
 11  +3.2682e-01  +3.2687e-01  5.30e-05  2.44e-07  1.11e-05  3.69e-08  1.22e-06  9.90e-01  
 12  +3.2680e-01  +3.2680e-01  5.30e-07  2.44e-09  1.11e-07  3.69e-10  1.22e-08  9.90e-01  
 13  +3.2680e-01  +3.2680e-01  5.30e-09  2.44e-11  1.11e-09  3.69e-12  1.22e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.6458ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:52 PM: Optimal value: 3.268e-01
(CVXPY) Oct 06 03:57:52 PM: Compilation took 5.076e-03 seconds
(CVXPY) Oct 06 03:57:52 PM: Solver (including time spent in interface) took 6.549e-03 seconds
Iteration: 5, Objective: 0.3268
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:52 PM: Your problem has 308 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 308
  constraints   = 558
  nnz(P)        = 0
  nnz(A)        = 3537
  cones (total) = 1
    : Nonnegative = 1,  numel = 558

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9813e-01  +2.5159e+02  2.51e+02  9.39e-01  2.27e+01  1.00e+00  1.03e+00   ------   
  1  +5.7802e-01  +5.2532e+01  5.20e+01  3.81e-01  1.31e+01  3.89e-03  5.48e-01  6.19e-01  
  2  +5.2506e-01  +5.7587e+00  5.23e+00  9.44e-02  4.21e+00  1.40e-02  1.94e-01  9.90e-01  
  3  +5.0178e-01  +1.7068e+00  1.21e+00  2.82e-02  1.32e+00  4.05e-03  7.67e-02  8.14e-01  
  4  +4.8714e-01  +1.7869e+00  1.30e+00  1.22e-02  5.86e-01  8.20e-03  3.11e-02  7.00e-01  
  5  +4.5758e-01  +1.3497e+00  8.92e-01  5.32e-03  2.54e-01  7.17e-03  1.42e-02  6.10e-01  
  6  +4.3674e-01  +1.1415e+00  7.05e-01  3.75e-03  1.77e-01  4.63e-03  1.05e-02  3.80e-01  
  7  +3.8860e-01  +6.8935e-01  3.01e-01  1.54e-03  7.10e-02  5.08e-04  5.04e-03  7.12e-01  
  8  +3.6315e-01  +5.3917e-01  1.76e-01  8.80e-04  4.01e-02  2.58e-04  3.22e-03  4.38e-01  
  9  +3.3601e-01  +3.8599e-01  5.00e-02  2.45e-04  1.10e-02  5.75e-05  1.05e-03  7.39e-01  
 10  +3.3062e-01  +3.5959e-01  2.90e-02  1.38e-04  6.22e-03  3.26e-05  6.19e-04  4.97e-01  
 11  +3.2480e-01  +3.3090e-01  6.10e-03  2.88e-05  1.30e-03  5.22e-06  1.37e-04  9.90e-01  
 12  +3.2426e-01  +3.2862e-01  4.36e-03  2.00e-05  9.03e-04  3.78e-06  9.54e-05  3.92e-01  
 13  +3.2324e-01  +3.2428e-01  1.04e-03  4.76e-06  2.14e-04  8.01e-07  2.29e-05  9.90e-01  
 14  +3.2290e-01  +3.2292e-01  1.25e-05  5.73e-08  2.58e-06  9.33e-09  2.77e-07  9.90e-01  
 15  +3.2290e-01  +3.2290e-01  1.25e-07  5.73e-10  2.58e-08  9.34e-11  2.77e-09  9.90e-01  
 16  +3.2290e-01  +3.2290e-01  1.25e-09  5.73e-12  2.58e-10  9.35e-13  2.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.8938ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:52 PM: Optimal value: 3.229e-01
(CVXPY) Oct 06 03:57:52 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:57:52 PM: Solver (including time spent in interface) took 1.524e-02 seconds
Iteration: 6, Objective: 0.3229
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:52 PM: Your problem has 313 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Finished problem compilation (took 5.033e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 313
  constraints   = 563
  nnz(P)        = 0
  nnz(A)        = 3597
  cones (total) = 1
    : Nonnegative = 1,  numel = 563

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9812e-01  +2.5160e+02  2.51e+02  9.39e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +5.7717e-01  +5.2580e+01  5.20e+01  3.83e-01  1.31e+01  3.89e-03  5.47e-01  6.19e-01  
  2  +5.2450e-01  +5.7831e+00  5.26e+00  9.44e-02  4.19e+00  1.41e-02  1.94e-01  9.90e-01  
  3  +5.0218e-01  +1.7084e+00  1.21e+00  2.73e-02  1.28e+00  4.06e-03  7.29e-02  7.92e-01  
  4  +4.8721e-01  +1.6621e+00  1.17e+00  1.10e-02  5.27e-01  8.13e-03  2.79e-02  6.64e-01  
  5  +4.6220e-01  +1.3774e+00  9.15e-01  5.57e-03  2.66e-01  7.75e-03  1.47e-02  5.50e-01  
  6  +4.3985e-01  +1.1562e+00  7.16e-01  3.87e-03  1.83e-01  4.90e-03  1.08e-02  3.92e-01  
  7  +3.9686e-01  +7.6569e-01  3.69e-01  1.90e-03  8.78e-02  1.19e-03  6.04e-03  5.98e-01  
  8  +3.6155e-01  +5.3789e-01  1.76e-01  8.82e-04  4.01e-02  4.20e-04  3.25e-03  5.31e-01  
  9  +3.4075e-01  +4.2427e-01  8.35e-02  4.10e-04  1.85e-02  1.64e-04  1.72e-03  5.71e-01  
 10  +3.2368e-01  +3.3398e-01  1.03e-02  4.99e-05  2.24e-03  1.49e-05  2.41e-04  8.79e-01  
 11  +3.2197e-01  +3.2568e-01  3.71e-03  1.78e-05  8.00e-04  5.13e-06  8.75e-05  6.89e-01  
 12  +3.2149e-01  +3.2340e-01  1.92e-03  9.21e-06  4.13e-04  1.69e-06  4.68e-05  7.15e-01  
 13  +3.2147e-01  +3.2333e-01  1.86e-03  8.92e-06  4.00e-04  1.63e-06  4.52e-05  7.07e-02  
 14  +3.2141e-01  +3.2301e-01  1.60e-03  7.71e-06  3.46e-04  1.36e-06  3.86e-05  3.28e-01  
 15  +3.2122e-01  +3.2232e-01  1.10e-03  5.15e-06  2.31e-04  9.09e-07  2.56e-05  5.42e-01  
 16  +3.2090e-01  +3.2092e-01  1.19e-05  5.55e-08  2.49e-06  9.83e-09  2.77e-07  9.89e-01  
 17  +3.2090e-01  +3.2090e-01  1.19e-07  5.55e-10  2.49e-08  9.83e-11  2.77e-09  9.90e-01  
 18  +3.2090e-01  +3.2090e-01  1.19e-09  5.55e-12  2.49e-10  9.84e-13  2.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.9195ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:52 PM: Optimal value: 3.209e-01
(CVXPY) Oct 06 03:57:52 PM: Compilation took 5.033e-03 seconds
(CVXPY) Oct 06 03:57:52 PM: Solver (including time spent in interface) took 1.022e-02 seconds
Iteration: 7, Objective: 0.3209
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:52 PM: Your problem has 323 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 323
  constraints   = 573
  nnz(P)        = 0
  nnz(A)        = 3721
  cones (total) = 1
    : Nonnegative = 1,  numel = 573

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9804e-01  +2.5165e+02  2.51e+02  9.39e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.7491e-01  +5.2689e+01  5.21e+01  3.85e-01  1.30e+01  3.89e-03  5.48e-01  6.17e-01  
  2  +5.2270e-01  +5.8287e+00  5.31e+00  9.45e-02  4.15e+00  1.43e-02  1.95e-01  9.90e-01  
  3  +5.0159e-01  +1.5702e+00  1.07e+00  2.20e-02  1.04e+00  4.07e-03  5.77e-02  7.87e-01  
  4  +4.8792e-01  +1.5258e+00  1.04e+00  1.00e-02  4.81e-01  7.24e-03  2.55e-02  6.14e-01  
  5  +4.6630e-01  +1.3339e+00  8.68e-01  5.76e-03  2.74e-01  7.13e-03  1.51e-02  4.83e-01  
  6  +4.4585e-01  +1.1704e+00  7.25e-01  4.12e-03  1.94e-01  5.27e-03  1.13e-02  3.62e-01  
  7  +3.9195e-01  +7.1351e-01  3.22e-01  1.71e-03  7.85e-02  4.80e-05  5.57e-03  7.78e-01  
  8  +3.6361e-01  +5.5211e-01  1.88e-01  9.70e-04  4.39e-02  4.00e-05  3.55e-03  4.24e-01  
  9  +3.3483e-01  +3.9583e-01  6.10e-02  3.05e-04  1.37e-02  1.62e-05  1.31e-03  6.77e-01  
 10  +3.2193e-01  +3.3265e-01  1.07e-02  5.28e-05  2.36e-03  3.90e-06  2.52e-04  8.52e-01  
 11  +3.2003e-01  +3.2354e-01  3.51e-03  1.72e-05  7.67e-04  1.52e-06  8.33e-05  7.29e-01  
 12  +3.1966e-01  +3.2189e-01  2.23e-03  1.08e-05  4.84e-04  1.09e-06  5.30e-05  5.17e-01  
 13  +3.1921e-01  +3.1991e-01  7.09e-04  3.37e-06  1.51e-04  3.84e-07  1.66e-05  7.56e-01  
 14  +3.1900e-01  +3.1901e-01  8.73e-06  4.14e-08  1.85e-06  4.73e-09  2.04e-07  9.88e-01  
 15  +3.1900e-01  +3.1900e-01  8.73e-08  4.14e-10  1.85e-08  4.73e-11  2.04e-09  9.90e-01  
 16  +3.1900e-01  +3.1900e-01  8.73e-10  4.14e-12  1.85e-10  4.73e-13  2.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.5154ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:52 PM: Optimal value: 3.190e-01
(CVXPY) Oct 06 03:57:52 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:57:52 PM: Solver (including time spent in interface) took 1.247e-02 seconds
Iteration: 8, Objective: 0.3190
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:57:52 PM: Your problem has 324 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:57:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:57:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:57:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:57:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:57:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:57:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:57:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:57:52 PM: Finished problem compilation (took 6.614e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 324
  constraints   = 574
  nnz(P)        = 0
  nnz(A)        = 3740
  cones (total) = 1
    : Nonnegative = 1,  numel = 574

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9804e-01  +2.5165e+02  2.51e+02  9.39e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +5.7478e-01  +5.2703e+01  5.21e+01  3.85e-01  1.30e+01  3.89e-03  5.48e-01  6.17e-01  
  2  +5.2250e-01  +5.8322e+00  5.31e+00  9.46e-02  4.15e+00  1.43e-02  1.95e-01  9.90e-01  
  3  +5.0173e-01  +1.6022e+00  1.10e+00  2.24e-02  1.06e+00  4.17e-03  5.87e-02  7.75e-01  
  4  +4.8828e-01  +1.5527e+00  1.06e+00  1.04e-02  4.98e-01  7.20e-03  2.65e-02  6.07e-01  
  5  +4.6798e-01  +1.3598e+00  8.92e-01  6.13e-03  2.92e-01  6.94e-03  1.61e-02  4.66e-01  
  6  +4.4672e-01  +1.1850e+00  7.38e-01  4.21e-03  1.98e-01  5.37e-03  1.16e-02  3.81e-01  
  7  +3.9474e-01  +7.3844e-01  3.44e-01  1.84e-03  8.45e-02  4.89e-05  5.95e-03  7.79e-01  
  8  +3.6660e-01  +5.7199e-01  2.05e-01  1.06e-03  4.81e-02  3.96e-05  3.84e-03  4.06e-01  
  9  +3.3754e-01  +4.1059e-01  7.31e-02  3.67e-04  1.65e-02  1.91e-05  1.55e-03  6.52e-01  
 10  +3.2435e-01  +3.4486e-01  2.05e-02  1.01e-04  4.52e-03  7.81e-06  4.73e-04  7.70e-01  
 11  +3.2011e-01  +3.2394e-01  3.83e-03  1.88e-05  8.41e-04  1.65e-06  9.16e-05  8.33e-01  
 12  +3.1987e-01  +3.2293e-01  3.06e-03  1.48e-05  6.59e-04  1.51e-06  7.18e-05  3.98e-01  
 13  +3.1915e-01  +3.1970e-01  5.43e-04  2.58e-06  1.15e-04  2.77e-07  1.27e-05  8.35e-01  
 14  +3.1900e-01  +3.1901e-01  5.85e-06  2.78e-08  1.24e-06  2.99e-09  1.37e-07  9.89e-01  
 15  +3.1900e-01  +3.1900e-01  5.86e-08  2.78e-10  1.24e-08  2.99e-11  1.37e-09  9.90e-01  
 16  +3.1900e-01  +3.1900e-01  5.86e-10  2.78e-12  1.24e-10  2.99e-13  1.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.3311ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:57:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:57:52 PM: Optimal value: 3.190e-01
(CVXPY) Oct 06 03:57:52 PM: Compilation took 6.614e-03 seconds
(CVXPY) Oct 06 03:57:52 PM: Solver (including time spent in interface) took 1.002e-02 seconds
FULL MODEL:
  Accruacy: 0.672
  Our objective: 0.3440000000000001

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                  <-- (term's our objective: 0.184)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0)            <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1)                       <-- (term's our objective: 0.072)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1)            <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0)                       <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.80517315864563
Best over terms:
  Our final objective: 0.184
    Its accruacy: 0.592
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.184
  Highest accruacy: 0.592
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

