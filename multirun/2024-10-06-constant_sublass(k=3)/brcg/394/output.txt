Command:
python test_script.py -s constant_subclass -d 10 -n 10000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15139999999999998
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 10.

Computed total variation: 0.3086
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:54 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:54 PM: Finished problem compilation (took 9.410e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 65021
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +1.0987e+03  1.10e+03  4.43e-01  8.03e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2940e-01  +1.2045e+02  1.20e+02  1.78e-01  4.15e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0838e-01  +3.1284e+01  3.08e+01  1.24e-01  2.90e+01  5.02e-05  2.63e-01  3.42e-01  
  4  +5.0115e-01  +3.4086e+00  2.91e+00  1.98e-02  4.70e+00  6.13e-06  1.69e-01  5.90e-01  
  5  +5.0012e-01  +1.0486e+00  5.48e-01  3.68e-03  8.91e-01  4.58e-05  9.82e-02  9.90e-01  
  6  +4.9999e-01  +6.2634e-01  1.26e-01  8.39e-04  2.04e-01  3.09e-05  1.63e-02  8.48e-01  
  7  +4.9697e-01  +8.0178e-01  3.05e-01  2.50e-04  6.15e-02  1.47e-03  7.73e-04  9.88e-01  
  8  +4.8926e-01  +7.4375e-01  2.54e-01  7.36e-05  1.81e-02  3.71e-03  2.24e-04  7.22e-01  
  9  +4.8249e-01  +6.4107e-01  1.59e-01  4.81e-05  1.18e-02  1.02e-03  1.52e-04  4.96e-01  
 10  +4.6960e-01  +5.3733e-01  6.77e-02  1.81e-05  4.42e-03  1.10e-05  6.11e-05  8.63e-01  
 11  +4.5407e-01  +4.6330e-01  9.23e-03  2.08e-06  5.08e-04  5.63e-07  8.08e-06  9.06e-01  
 12  +4.5068e-01  +4.5092e-01  2.41e-04  5.02e-08  1.23e-05  1.24e-08  2.13e-07  9.79e-01  
 13  +4.5060e-01  +4.5060e-01  2.42e-06  5.03e-10  1.23e-07  1.25e-10  2.14e-09  9.90e-01  
 14  +4.5060e-01  +4.5060e-01  2.42e-08  5.04e-12  1.23e-09  1.28e-12  2.19e-11  9.90e-01  
 15  +4.5060e-01  +4.5060e-01  2.42e-10  5.05e-14  1.23e-11  1.31e-14  2.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.971ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:54 PM: Optimal value: 4.506e-01
(CVXPY) Oct 06 04:30:54 PM: Compilation took 9.410e-02 seconds
(CVXPY) Oct 06 04:30:54 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:54 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:54 PM: Finished problem compilation (took 4.727e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 73802
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +1.0990e+03  1.10e+03  4.43e-01  8.28e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2927e-01  +1.2024e+02  1.20e+02  1.78e-01  4.28e+01  1.78e-02  2.90e-01  9.55e-01  
  3  +5.0832e-01  +3.1153e+01  3.06e+01  1.24e-01  2.98e+01  5.03e-05  2.63e-01  3.48e-01  
  4  +5.0112e-01  +3.3239e+00  2.82e+00  1.93e-02  4.72e+00  6.21e-06  1.65e-01  6.10e-01  
  5  +5.0033e-01  +1.5122e+00  1.01e+00  6.82e-03  1.70e+00  3.53e-05  1.16e-01  6.25e-01  
  6  +5.0004e-01  +7.3013e-01  2.30e-01  1.54e-03  3.85e-01  2.54e-05  3.32e-02  8.25e-01  
  7  +4.9990e-01  +7.7002e-01  2.70e-01  1.50e-03  3.78e-01  9.89e-05  7.94e-03  8.27e-01  
  8  +4.9499e-01  +7.4653e-01  2.52e-01  1.04e-04  2.64e-02  2.31e-03  2.89e-04  9.64e-01  
  9  +4.9178e-01  +7.2194e-01  2.30e-01  7.03e-05  1.79e-02  2.62e-03  1.95e-04  3.87e-01  
 10  +4.8958e-01  +7.0669e-01  2.17e-01  5.65e-05  1.44e-02  2.54e-03  1.56e-04  2.83e-01  
 11  +4.8880e-01  +6.9802e-01  2.09e-01  5.60e-05  1.42e-02  2.24e-03  1.55e-04  4.40e-02  
 12  +4.8771e-01  +6.8981e-01  2.02e-01  5.07e-05  1.29e-02  2.00e-03  1.41e-04  1.91e-01  
 13  +4.8372e-01  +6.4325e-01  1.60e-01  3.85e-05  9.77e-03  2.08e-05  1.08e-04  8.50e-01  
 14  +4.6086e-01  +5.4799e-01  8.71e-02  1.58e-05  4.00e-03  9.33e-06  4.62e-05  7.64e-01  
 15  +4.5121e-01  +5.1500e-01  6.38e-02  1.07e-05  2.71e-03  5.33e-06  3.19e-05  7.12e-01  
 16  +4.4741e-01  +5.0271e-01  5.53e-02  9.79e-06  2.47e-03  3.87e-06  3.17e-05  1.17e-01  
 17  +4.4052e-01  +4.7523e-01  3.47e-02  6.00e-06  1.51e-03  2.49e-06  1.94e-05  7.41e-01  
 18  +4.3534e-01  +4.5807e-01  2.27e-02  3.82e-06  9.62e-04  1.74e-06  1.20e-05  4.83e-01  
 19  +4.2982e-01  +4.4256e-01  1.27e-02  2.01e-06  5.06e-04  1.00e-06  6.32e-06  5.68e-01  
 20  +4.2447e-01  +4.2462e-01  1.55e-04  2.43e-08  6.13e-06  1.04e-08  7.78e-08  9.90e-01  
 21  +4.2440e-01  +4.2440e-01  1.55e-06  2.43e-10  6.13e-08  1.04e-10  7.78e-10  9.90e-01  
 22  +4.2440e-01  +4.2440e-01  1.55e-08  2.43e-12  6.13e-10  1.04e-12  7.80e-12  9.90e-01  
 23  +4.2440e-01  +4.2440e-01  1.55e-10  2.43e-14  6.13e-12  1.04e-14  7.82e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.3093ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:54 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 04:30:54 PM: Compilation took 4.727e-02 seconds
(CVXPY) Oct 06 04:30:54 PM: Solver (including time spent in interface) took 2.190e-01 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:55 PM: Your problem has 5041 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:55 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5041
  constraints   = 10041
  nnz(P)        = 0
  nnz(A)        = 75195
  cones (total) = 1
    : Nonnegative = 1,  numel = 10041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7811e-01  +1.0991e+03  1.10e+03  4.43e-01  8.28e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2918e-01  +1.2008e+02  1.20e+02  1.78e-01  4.27e+01  1.78e-02  2.90e-01  9.56e-01  
  3  +5.0830e-01  +3.1104e+01  3.06e+01  1.24e-01  2.97e+01  5.04e-05  2.63e-01  3.50e-01  
  4  +5.0111e-01  +3.3154e+00  2.81e+00  1.92e-02  4.70e+00  6.23e-06  1.64e-01  6.14e-01  
  5  +5.0023e-01  +1.2866e+00  7.86e-01  5.29e-03  1.32e+00  4.00e-05  9.85e-02  8.29e-01  
  6  +5.0004e-01  +7.7112e-01  2.71e-01  1.80e-03  4.52e-01  3.08e-05  2.86e-02  7.64e-01  
  7  +4.9950e-01  +8.0036e-01  3.01e-01  8.29e-04  2.10e-01  2.92e-04  2.65e-03  9.43e-01  
  8  +4.9347e-01  +7.6671e-01  2.73e-01  8.68e-05  2.21e-02  2.80e-03  2.38e-04  9.10e-01  
  9  +4.9101e-01  +7.4793e-01  2.57e-01  6.86e-05  1.75e-02  2.75e-03  1.87e-04  2.88e-01  
 10  +4.9055e-01  +7.3747e-01  2.47e-01  6.81e-05  1.73e-02  2.37e-03  1.86e-04  6.43e-02  
 11  +4.8701e-01  +7.1397e-01  2.27e-01  5.33e-05  1.36e-02  2.18e-03  1.46e-04  3.07e-01  
 12  +4.8500e-01  +7.0241e-01  2.17e-01  4.69e-05  1.19e-02  2.00e-03  1.29e-04  1.95e-01  
 13  +4.8471e-01  +6.9967e-01  2.15e-01  4.68e-05  1.19e-02  1.91e-03  1.29e-04  2.53e-02  
 14  +4.7573e-01  +6.4229e-01  1.67e-01  3.50e-05  8.89e-03  6.83e-04  9.88e-05  5.38e-01  
 15  +4.6986e-01  +6.0982e-01  1.40e-01  2.86e-05  7.23e-03  6.97e-06  8.17e-05  8.22e-01  
 16  +4.3624e-01  +4.7718e-01  4.09e-02  6.83e-06  1.72e-03  1.74e-06  2.11e-05  8.19e-01  
 17  +4.2342e-01  +4.3374e-01  1.03e-02  1.69e-06  4.27e-04  4.60e-07  5.50e-06  7.74e-01  
 18  +4.1906e-01  +4.1920e-01  1.40e-04  2.28e-08  5.74e-06  6.11e-09  7.54e-08  9.88e-01  
 19  +4.1900e-01  +4.1900e-01  1.40e-06  2.28e-10  5.74e-08  6.11e-11  7.54e-10  9.90e-01  
 20  +4.1900e-01  +4.1900e-01  1.40e-08  2.28e-12  5.74e-10  6.13e-13  7.57e-12  9.90e-01  
 21  +4.1900e-01  +4.1900e-01  1.40e-10  2.28e-14  5.74e-12  6.16e-15  7.60e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 189.8735ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:55 PM: Optimal value: 4.190e-01
(CVXPY) Oct 06 04:30:55 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:30:55 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 3, Objective: 0.4190
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:55 PM: Your problem has 5051 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:55 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5051
  constraints   = 10051
  nnz(P)        = 0
  nnz(A)        = 76253
  cones (total) = 1
    : Nonnegative = 1,  numel = 10051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7806e-01  +1.0991e+03  1.10e+03  4.44e-01  8.28e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2914e-01  +1.1999e+02  1.19e+02  1.78e-01  4.26e+01  1.79e-02  2.90e-01  9.57e-01  
  3  +5.0829e-01  +3.1070e+01  3.06e+01  1.24e-01  2.97e+01  5.05e-05  2.62e-01  3.52e-01  
  4  +5.0111e-01  +3.3064e+00  2.81e+00  1.92e-02  4.69e+00  6.24e-06  1.63e-01  6.16e-01  
  5  +5.0022e-01  +1.2589e+00  7.59e-01  5.10e-03  1.27e+00  4.12e-05  9.33e-02  8.75e-01  
  6  +5.0004e-01  +7.8766e-01  2.88e-01  1.90e-03  4.77e-01  3.63e-05  2.49e-02  8.24e-01  
  7  +4.9945e-01  +8.9403e-01  3.95e-01  9.32e-04  2.37e-01  3.29e-04  2.87e-03  9.90e-01  
  8  +4.9330e-01  +8.5251e-01  3.59e-01  1.05e-04  2.67e-02  2.83e-03  2.87e-04  9.01e-01  
  9  +4.9010e-01  +7.8979e-01  3.00e-01  8.33e-05  2.12e-02  1.86e-03  2.28e-04  3.54e-01  
 10  +4.8706e-01  +7.5329e-01  2.66e-01  6.50e-05  1.66e-02  1.44e-03  1.78e-04  3.67e-01  
 11  +4.8583e-01  +7.1148e-01  2.26e-01  5.64e-05  1.44e-02  4.12e-04  1.55e-04  5.63e-01  
 12  +4.8335e-01  +6.9406e-01  2.11e-01  5.24e-05  1.33e-02  2.71e-04  1.45e-04  2.81e-01  
 13  +4.6639e-01  +6.0385e-01  1.37e-01  2.72e-05  6.90e-03  3.71e-05  7.84e-05  8.68e-01  
 14  +4.4979e-01  +5.3768e-01  8.79e-02  1.69e-05  4.27e-03  2.17e-06  5.12e-05  8.83e-01  
 15  +4.3559e-01  +4.8499e-01  4.94e-02  8.89e-06  2.24e-03  1.29e-06  2.80e-05  4.88e-01  
 16  +4.2966e-01  +4.6287e-01  3.32e-02  5.60e-06  1.41e-03  2.34e-06  1.78e-05  9.90e-01  
 17  +4.2055e-01  +4.3140e-01  1.09e-02  1.82e-06  4.57e-04  7.72e-07  5.96e-06  7.56e-01  
 18  +4.1712e-01  +4.1965e-01  2.54e-03  4.22e-07  1.06e-04  1.85e-07  1.41e-06  8.74e-01  
 19  +4.1611e-01  +4.1637e-01  2.53e-04  4.20e-08  1.06e-05  1.84e-08  1.41e-07  9.72e-01  
 20  +4.1600e-01  +4.1600e-01  2.76e-06  4.56e-10  1.15e-07  2.00e-10  1.53e-09  9.89e-01  
 21  +4.1600e-01  +4.1600e-01  2.76e-08  4.56e-12  1.15e-09  2.00e-12  1.53e-11  9.90e-01  
 22  +4.1600e-01  +4.1600e-01  2.76e-10  4.57e-14  1.15e-11  2.00e-14  1.53e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 202.2539ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:55 PM: Optimal value: 4.160e-01
(CVXPY) Oct 06 04:30:55 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:30:55 PM: Solver (including time spent in interface) took 2.191e-01 seconds
Iteration: 4, Objective: 0.4160
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:56 PM: Your problem has 5061 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:56 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5061
  constraints   = 10061
  nnz(P)        = 0
  nnz(A)        = 77405
  cones (total) = 1
    : Nonnegative = 1,  numel = 10061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7796e-01  +1.0992e+03  1.10e+03  4.44e-01  8.27e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2905e-01  +1.1982e+02  1.19e+02  1.78e-01  4.25e+01  1.79e-02  2.89e-01  9.58e-01  
  3  +5.0827e-01  +3.1020e+01  3.05e+01  1.24e-01  2.96e+01  5.06e-05  2.62e-01  3.55e-01  
  4  +5.0111e-01  +3.2956e+00  2.79e+00  1.91e-02  4.67e+00  6.26e-06  1.61e-01  6.20e-01  
  5  +5.0024e-01  +1.3144e+00  8.14e-01  5.48e-03  1.37e+00  4.16e-05  9.22e-02  8.61e-01  
  6  +5.0009e-01  +9.4798e-01  4.48e-01  2.97e-03  7.42e-01  4.09e-05  3.59e-02  7.14e-01  
  7  +4.9956e-01  +8.5296e-01  3.53e-01  9.24e-04  2.35e-01  2.73e-04  2.87e-03  9.90e-01  
  8  +4.9645e-01  +8.3709e-01  3.41e-01  1.72e-04  4.39e-02  1.55e-03  4.69e-04  8.37e-01  
  9  +4.9424e-01  +8.1833e-01  3.24e-01  1.19e-04  3.05e-02  1.91e-03  3.24e-04  3.56e-01  
 10  +4.9094e-01  +7.7725e-01  2.86e-01  8.16e-05  2.08e-02  1.64e-03  2.22e-04  5.06e-01  
 11  +4.8997e-01  +7.5880e-01  2.69e-01  7.47e-05  1.90e-02  1.09e-03  2.03e-04  3.29e-01  
 12  +4.8537e-01  +7.1992e-01  2.35e-01  6.00e-05  1.53e-02  4.60e-04  1.65e-04  5.78e-01  
 13  +4.7676e-01  +6.7128e-01  1.95e-01  4.73e-05  1.20e-02  6.50e-05  1.34e-04  7.38e-01  
 14  +4.5561e-01  +5.8186e-01  1.26e-01  2.53e-05  6.40e-03  2.42e-05  7.53e-05  6.83e-01  
 15  +4.3177e-01  +4.8817e-01  5.64e-02  1.05e-05  2.65e-03  6.30e-07  3.36e-05  9.90e-01  
 16  +4.2871e-01  +4.7692e-01  4.82e-02  8.84e-06  2.23e-03  7.27e-07  2.86e-05  2.09e-01  
 17  +4.2123e-01  +4.4894e-01  2.77e-02  4.84e-06  1.22e-03  1.86e-06  1.60e-05  9.90e-01  
 18  +4.2011e-01  +4.4497e-01  2.49e-02  4.33e-06  1.09e-03  1.69e-06  1.43e-05  1.89e-01  
 19  +4.1503e-01  +4.2666e-01  1.16e-02  2.02e-06  5.08e-04  8.46e-07  6.82e-06  9.90e-01  
 20  +4.1109e-01  +4.1316e-01  2.07e-03  3.58e-07  9.02e-05  1.47e-07  1.24e-06  9.14e-01  
 21  +4.1024e-01  +4.1032e-01  8.12e-05  1.40e-08  3.53e-06  5.32e-09  4.91e-08  9.90e-01  
 22  +4.1020e-01  +4.1020e-01  8.21e-07  1.42e-10  3.57e-08  5.37e-11  4.97e-10  9.90e-01  
 23  +4.1020e-01  +4.1020e-01  8.21e-09  1.42e-12  3.57e-10  5.37e-13  4.97e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.4503ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:56 PM: Optimal value: 4.102e-01
(CVXPY) Oct 06 04:30:56 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:30:56 PM: Solver (including time spent in interface) took 2.196e-01 seconds
Iteration: 5, Objective: 0.4102
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:56 PM: Your problem has 5071 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:56 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5071
  constraints   = 10071
  nnz(P)        = 0
  nnz(A)        = 78454
  cones (total) = 1
    : Nonnegative = 1,  numel = 10071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7786e-01  +1.0993e+03  1.10e+03  4.44e-01  8.27e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2898e-01  +1.1969e+02  1.19e+02  1.78e-01  4.24e+01  1.79e-02  2.89e-01  9.59e-01  
  3  +5.0825e-01  +3.0976e+01  3.05e+01  1.23e-01  2.95e+01  5.07e-05  2.61e-01  3.58e-01  
  4  +5.0110e-01  +3.2856e+00  2.78e+00  1.90e-02  4.66e+00  6.28e-06  1.60e-01  6.24e-01  
  5  +5.0028e-01  +1.4122e+00  9.12e-01  6.14e-03  1.53e+00  4.10e-05  9.39e-02  8.13e-01  
  6  +5.0011e-01  +9.8379e-01  4.84e-01  3.21e-03  8.03e-01  4.13e-05  3.80e-02  6.22e-01  
  7  +4.9953e-01  +8.7595e-01  3.76e-01  9.42e-04  2.40e-01  2.88e-04  2.87e-03  9.90e-01  
  8  +4.9373e-01  +8.4654e-01  3.53e-01  1.04e-04  2.67e-02  2.65e-03  2.80e-04  9.03e-01  
  9  +4.9088e-01  +8.2117e-01  3.30e-01  8.40e-05  2.15e-02  2.52e-03  2.26e-04  2.85e-01  
 10  +4.8598e-01  +7.7818e-01  2.92e-01  6.81e-05  1.74e-02  1.83e-03  1.85e-04  3.44e-01  
 11  +4.8055e-01  +7.3557e-01  2.55e-01  6.01e-05  1.53e-02  1.04e-03  1.66e-04  3.15e-01  
 12  +4.6302e-01  +6.4278e-01  1.80e-01  3.76e-05  9.54e-03  5.72e-04  1.09e-04  4.53e-01  
 13  +4.4649e-01  +5.6624e-01  1.20e-01  2.40e-05  6.06e-03  2.76e-04  7.28e-05  4.34e-01  
 14  +4.3650e-01  +5.2270e-01  8.62e-02  1.66e-05  4.20e-03  1.39e-04  5.21e-05  4.70e-01  
 15  +4.2999e-01  +4.9592e-01  6.59e-02  1.24e-05  3.14e-03  9.38e-05  3.98e-05  3.18e-01  
 16  +4.2319e-01  +4.6667e-01  4.35e-02  7.92e-06  2.00e-03  2.38e-05  2.58e-05  7.77e-01  
 17  +4.1548e-01  +4.3700e-01  2.15e-02  3.84e-06  9.68e-04  7.14e-06  1.29e-05  7.35e-01  
 18  +4.1434e-01  +4.3172e-01  1.74e-02  3.11e-06  7.83e-04  1.35e-06  1.06e-05  9.90e-01  
 19  +4.1067e-01  +4.1877e-01  8.10e-03  1.45e-06  3.65e-04  6.14e-07  5.03e-06  6.46e-01  
 20  +4.0857e-01  +4.1167e-01  3.10e-03  5.50e-07  1.39e-04  1.95e-07  1.94e-06  9.90e-01  
 21  +4.0735e-01  +4.0745e-01  1.04e-04  1.84e-08  4.64e-06  6.47e-09  6.59e-08  9.69e-01  
 22  +4.0730e-01  +4.0730e-01  1.05e-06  1.85e-10  4.66e-08  6.49e-11  6.62e-10  9.90e-01  
 23  +4.0730e-01  +4.0730e-01  1.05e-08  1.85e-12  4.66e-10  6.49e-13  6.62e-12  9.90e-01  
 24  +4.0730e-01  +4.0730e-01  1.05e-10  1.86e-14  4.66e-12  6.55e-15  6.68e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 225.4876ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:56 PM: Optimal value: 4.073e-01
(CVXPY) Oct 06 04:30:56 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:30:56 PM: Solver (including time spent in interface) took 2.347e-01 seconds
Iteration: 6, Objective: 0.4073
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:57 PM: Your problem has 5081 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:57 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5081
  constraints   = 10081
  nnz(P)        = 0
  nnz(A)        = 78963
  cones (total) = 1
    : Nonnegative = 1,  numel = 10081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7777e-01  +1.0993e+03  1.10e+03  4.44e-01  8.26e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2891e-01  +1.1957e+02  1.19e+02  1.78e-01  4.23e+01  1.79e-02  2.89e-01  9.60e-01  
  3  +5.0824e-01  +3.0945e+01  3.04e+01  1.23e-01  2.94e+01  5.08e-05  2.60e-01  3.60e-01  
  4  +5.0110e-01  +3.2820e+00  2.78e+00  1.90e-02  4.65e+00  6.29e-06  1.60e-01  6.26e-01  
  5  +5.0028e-01  +1.4217e+00  9.21e-01  6.21e-03  1.54e+00  4.19e-05  9.17e-02  8.26e-01  
  6  +5.0010e-01  +9.7391e-01  4.74e-01  3.13e-03  7.82e-01  4.46e-05  3.33e-02  6.66e-01  
  7  +4.9911e-01  +8.9597e-01  3.97e-01  6.48e-04  1.66e-01  4.87e-04  1.86e-03  9.90e-01  
  8  +4.9325e-01  +8.5979e-01  3.67e-01  1.11e-04  2.84e-02  2.66e-03  2.98e-04  8.44e-01  
  9  +4.9000e-01  +8.2560e-01  3.36e-01  8.82e-05  2.26e-02  2.29e-03  2.38e-04  3.34e-01  
 10  +4.8832e-01  +7.9144e-01  3.03e-01  8.44e-05  2.16e-02  1.32e-03  2.29e-04  2.75e-01  
 11  +4.8309e-01  +7.5519e-01  2.72e-01  6.85e-05  1.75e-02  8.87e-04  1.88e-04  3.96e-01  
 12  +4.7518e-01  +6.9446e-01  2.19e-01  5.72e-05  1.45e-02  8.30e-06  1.62e-04  7.52e-01  
 13  +4.5089e-01  +5.7954e-01  1.29e-01  2.71e-05  6.86e-03  5.23e-06  8.14e-05  5.81e-01  
 14  +4.3544e-01  +5.1856e-01  8.31e-02  1.65e-05  4.15e-03  3.68e-06  5.16e-05  5.80e-01  
 15  +4.2991e-01  +4.9711e-01  6.72e-02  1.30e-05  3.27e-03  3.13e-06  4.13e-05  3.04e-01  
 16  +4.2207e-01  +4.6621e-01  4.41e-02  8.04e-06  2.03e-03  2.90e-06  2.61e-05  9.86e-01  
 17  +4.1667e-01  +4.4575e-01  2.91e-02  5.17e-06  1.30e-03  2.00e-06  1.71e-05  6.55e-01  
 18  +4.1446e-01  +4.3726e-01  2.28e-02  4.06e-06  1.02e-03  1.57e-06  1.36e-05  8.18e-01  
 19  +4.1029e-01  +4.2224e-01  1.19e-02  2.10e-06  5.29e-04  8.33e-07  7.16e-06  5.95e-01  
 20  +4.0678e-01  +4.0994e-01  3.16e-03  5.48e-07  1.38e-04  2.22e-07  1.91e-06  7.80e-01  
 21  +4.0552e-01  +4.0557e-01  4.90e-05  8.47e-09  2.13e-06  3.38e-09  2.97e-08  9.87e-01  
 22  +4.0550e-01  +4.0550e-01  4.90e-07  8.47e-11  2.13e-08  3.38e-11  2.98e-10  9.90e-01  
 23  +4.0550e-01  +4.0550e-01  4.90e-09  8.47e-13  2.13e-10  3.40e-13  2.99e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 209.1144ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:57 PM: Optimal value: 4.055e-01
(CVXPY) Oct 06 04:30:57 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:30:57 PM: Solver (including time spent in interface) took 2.336e-01 seconds
Iteration: 7, Objective: 0.4055
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:57 PM: Your problem has 5091 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:57 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5091
  constraints   = 10091
  nnz(P)        = 0
  nnz(A)        = 79446
  cones (total) = 1
    : Nonnegative = 1,  numel = 10091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7769e-01  +1.0994e+03  1.10e+03  4.44e-01  8.25e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2885e-01  +1.1946e+02  1.19e+02  1.78e-01  4.22e+01  1.79e-02  2.88e-01  9.61e-01  
  3  +5.0823e-01  +3.0914e+01  3.04e+01  1.23e-01  2.94e+01  5.09e-05  2.60e-01  3.62e-01  
  4  +5.0110e-01  +3.2786e+00  2.78e+00  1.90e-02  4.65e+00  6.31e-06  1.59e-01  6.27e-01  
  5  +5.0021e-01  +1.2713e+00  7.71e-01  5.19e-03  1.29e+00  4.61e-05  7.86e-02  9.71e-01  
  6  +5.0005e-01  +9.7151e-01  4.71e-01  3.02e-03  7.57e-01  6.41e-05  2.40e-02  7.27e-01  
  7  +4.9727e-01  +9.1451e-01  4.17e-01  3.00e-04  7.68e-02  1.34e-03  8.23e-04  9.86e-01  
  8  +4.9114e-01  +8.6193e-01  3.71e-01  1.14e-04  2.91e-02  2.81e-03  3.08e-04  6.54e-01  
  9  +4.8741e-01  +8.3413e-01  3.47e-01  9.08e-05  2.32e-02  2.72e-03  2.47e-04  2.66e-01  
 10  +4.8584e-01  +7.8905e-01  3.03e-01  8.30e-05  2.12e-02  1.06e-03  2.26e-04  4.57e-01  
 11  +4.8437e-01  +7.7799e-01  2.94e-01  7.97e-05  2.03e-02  9.01e-04  2.18e-04  1.31e-01  
 12  +4.7862e-01  +7.4591e-01  2.67e-01  6.58e-05  1.67e-02  7.64e-04  1.83e-04  2.46e-01  
 13  +4.6032e-01  +6.3785e-01  1.78e-01  3.99e-05  1.01e-02  7.98e-06  1.17e-04  8.33e-01  
 14  +4.4608e-01  +5.7524e-01  1.29e-01  2.70e-05  6.83e-03  5.68e-06  8.23e-05  3.82e-01  
 15  +4.3722e-01  +5.3822e-01  1.01e-01  2.03e-05  5.12e-03  4.50e-06  6.36e-05  3.11e-01  
 16  +4.2334e-01  +4.7986e-01  5.65e-02  1.06e-05  2.67e-03  3.40e-06  3.44e-05  9.90e-01  
 17  +4.0950e-01  +4.2634e-01  1.68e-02  3.04e-06  7.65e-04  1.05e-06  1.04e-05  8.47e-01  
 18  +4.0933e-01  +4.2585e-01  1.65e-02  2.97e-06  7.46e-04  1.03e-06  1.02e-05  9.80e-02  
 19  +4.0766e-01  +4.1974e-01  1.21e-02  2.14e-06  5.39e-04  7.75e-07  7.39e-06  5.14e-01  
 20  +4.0380e-01  +4.0594e-01  2.15e-03  3.77e-07  9.49e-05  1.42e-07  1.33e-06  9.90e-01  
 21  +4.0291e-01  +4.0294e-01  2.57e-05  4.51e-09  1.13e-06  1.68e-09  1.60e-08  9.89e-01  
 22  +4.0290e-01  +4.0290e-01  2.57e-07  4.52e-11  1.14e-08  1.68e-11  1.60e-10  9.90e-01  
 23  +4.0290e-01  +4.0290e-01  2.57e-09  4.52e-13  1.14e-10  1.68e-13  1.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 220.2587ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:57 PM: Optimal value: 4.029e-01
(CVXPY) Oct 06 04:30:57 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:30:57 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 8, Objective: 0.4029
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:58 PM: Your problem has 5101 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:58 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5101
  constraints   = 10101
  nnz(P)        = 0
  nnz(A)        = 79823
  cones (total) = 1
    : Nonnegative = 1,  numel = 10101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7760e-01  +1.0995e+03  1.10e+03  4.45e-01  8.25e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2880e-01  +1.1936e+02  1.19e+02  1.77e-01  4.21e+01  1.79e-02  2.88e-01  9.62e-01  
  3  +5.0822e-01  +3.0891e+01  3.04e+01  1.23e-01  2.93e+01  5.10e-05  2.60e-01  3.64e-01  
  4  +5.0110e-01  +3.2782e+00  2.78e+00  1.90e-02  4.65e+00  6.32e-06  1.58e-01  6.29e-01  
  5  +5.0021e-01  +1.2665e+00  7.66e-01  5.15e-03  1.28e+00  4.71e-05  7.61e-02  9.90e-01  
  6  +5.0004e-01  +9.7088e-01  4.71e-01  2.97e-03  7.44e-01  7.14e-05  2.13e-02  7.50e-01  
  7  +4.9707e-01  +9.3146e-01  4.34e-01  3.01e-04  7.69e-02  1.42e-03  8.22e-04  9.76e-01  
  8  +4.8974e-01  +8.6382e-01  3.74e-01  1.05e-04  2.68e-02  3.08e-03  2.83e-04  6.88e-01  
  9  +4.8795e-01  +8.3811e-01  3.50e-01  8.81e-05  2.25e-02  2.13e-03  2.38e-04  4.09e-01  
 10  +4.8412e-01  +7.9901e-01  3.15e-01  7.67e-05  1.96e-02  1.38e-03  2.09e-04  3.25e-01  
 11  +4.7877e-01  +7.5712e-01  2.78e-01  6.78e-05  1.72e-02  8.18e-04  1.87e-04  3.13e-01  
 12  +4.6323e-01  +6.6389e-01  2.01e-01  4.58e-05  1.16e-02  2.05e-04  1.33e-04  6.26e-01  
 13  +4.4084e-01  +5.6097e-01  1.20e-01  2.45e-05  6.18e-03  9.40e-05  7.56e-05  5.08e-01  
 14  +4.3552e-01  +5.3902e-01  1.04e-01  2.06e-05  5.19e-03  7.23e-05  6.45e-05  2.32e-01  
 15  +4.2153e-01  +4.8043e-01  5.89e-02  1.11e-05  2.80e-03  1.24e-05  3.64e-05  8.25e-01  
 16  +4.0954e-01  +4.3315e-01  2.36e-02  4.33e-06  1.09e-03  3.45e-06  1.49e-05  7.63e-01  
 17  +4.0903e-01  +4.3116e-01  2.21e-02  4.03e-06  1.01e-03  3.11e-06  1.39e-05  1.36e-01  
 18  +4.0514e-01  +4.1570e-01  1.06e-02  1.90e-06  4.79e-04  7.59e-07  6.65e-06  9.90e-01  
 19  +4.0176e-01  +4.0381e-01  2.05e-03  3.68e-07  9.25e-05  1.46e-07  1.31e-06  8.54e-01  
 20  +4.0097e-01  +4.0114e-01  1.69e-04  3.02e-08  7.58e-06  1.04e-08  1.08e-07  9.83e-01  
 21  +4.0090e-01  +4.0090e-01  2.20e-06  3.91e-10  9.82e-08  1.35e-10  1.40e-09  9.87e-01  
 22  +4.0090e-01  +4.0090e-01  2.20e-08  3.91e-12  9.82e-10  1.35e-12  1.40e-11  9.90e-01  
 23  +4.0090e-01  +4.0090e-01  2.20e-10  3.91e-14  9.83e-12  1.42e-14  1.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 222.6452ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:58 PM: Optimal value: 4.009e-01
(CVXPY) Oct 06 04:30:58 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:30:58 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 9, Objective: 0.4009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:58 PM: Your problem has 5111 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:58 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5111
  constraints   = 10111
  nnz(P)        = 0
  nnz(A)        = 80327
  cones (total) = 1
    : Nonnegative = 1,  numel = 10111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7753e-01  +1.0995e+03  1.10e+03  4.45e-01  8.24e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2874e-01  +1.1926e+02  1.19e+02  1.77e-01  4.20e+01  1.80e-02  2.88e-01  9.63e-01  
  3  +5.0821e-01  +3.0866e+01  3.04e+01  1.23e-01  2.92e+01  5.10e-05  2.59e-01  3.66e-01  
  4  +5.0110e-01  +3.2765e+00  2.78e+00  1.90e-02  4.64e+00  6.33e-06  1.58e-01  6.30e-01  
  5  +5.0021e-01  +1.2789e+00  7.79e-01  5.24e-03  1.30e+00  4.73e-05  7.52e-02  9.90e-01  
  6  +5.0001e-01  +9.4214e-01  4.42e-01  2.73e-03  6.85e-01  7.71e-05  1.77e-02  7.94e-01  
  7  +4.9686e-01  +9.2993e-01  4.33e-01  2.83e-04  7.24e-02  1.52e-03  7.70e-04  9.65e-01  
  8  +4.9016e-01  +8.7339e-01  3.83e-01  1.11e-04  2.83e-02  3.03e-03  2.98e-04  6.45e-01  
  9  +4.8810e-01  +8.4111e-01  3.53e-01  8.87e-05  2.27e-02  2.01e-03  2.38e-04  4.80e-01  
 10  +4.8107e-01  +7.7516e-01  2.94e-01  7.52e-05  1.92e-02  8.64e-04  2.06e-04  4.34e-01  
 11  +4.5489e-01  +6.3283e-01  1.78e-01  3.62e-05  9.17e-03  4.25e-04  1.06e-04  5.95e-01  
 12  +4.4140e-01  +5.7199e-01  1.31e-01  2.61e-05  6.59e-03  2.49e-04  7.96e-05  3.42e-01  
 13  +4.3580e-01  +5.4826e-01  1.12e-01  2.21e-05  5.58e-03  1.99e-04  6.87e-05  1.88e-01  
 14  +4.2600e-01  +5.0651e-01  8.05e-02  1.55e-05  3.90e-03  9.99e-05  4.98e-05  4.73e-01  
 15  +4.1224e-01  +4.4989e-01  3.77e-02  7.06e-06  1.78e-03  3.89e-05  2.39e-05  5.81e-01  
 16  +4.0738e-01  +4.3017e-01  2.28e-02  4.19e-06  1.05e-03  1.82e-05  1.45e-05  5.53e-01  
 17  +4.0639e-01  +4.2463e-01  1.82e-02  3.33e-06  8.37e-04  1.72e-06  1.16e-05  9.90e-01  
 18  +4.0275e-01  +4.1158e-01  8.84e-03  1.60e-06  4.03e-04  7.51e-07  5.68e-06  7.01e-01  
 19  +3.9968e-01  +4.0088e-01  1.21e-03  2.17e-07  5.45e-05  8.42e-08  7.85e-07  9.46e-01  
 20  +3.9921e-01  +3.9922e-01  1.66e-05  3.00e-09  7.52e-07  1.16e-09  1.09e-08  9.86e-01  
 21  +3.9920e-01  +3.9920e-01  1.67e-07  3.00e-11  7.54e-09  1.16e-11  1.09e-10  9.90e-01  
 22  +3.9920e-01  +3.9920e-01  1.68e-09  3.03e-13  7.62e-11  1.18e-13  1.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 202.7961ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:58 PM: Optimal value: 3.992e-01
(CVXPY) Oct 06 04:30:58 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:30:58 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 10, Objective: 0.3992
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:59 PM: Your problem has 5121 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:59 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5121
  constraints   = 10121
  nnz(P)        = 0
  nnz(A)        = 80816
  cones (total) = 1
    : Nonnegative = 1,  numel = 10121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7743e-01  +1.0996e+03  1.10e+03  4.45e-01  8.24e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2867e-01  +1.1913e+02  1.19e+02  1.77e-01  4.19e+01  1.80e-02  2.88e-01  9.64e-01  
  3  +5.0819e-01  +3.0827e+01  3.03e+01  1.23e-01  2.92e+01  5.12e-05  2.59e-01  3.68e-01  
  4  +5.0110e-01  +3.2707e+00  2.77e+00  1.90e-02  4.63e+00  6.34e-06  1.57e-01  6.32e-01  
  5  +5.0022e-01  +1.3146e+00  8.14e-01  5.48e-03  1.36e+00  4.86e-05  7.34e-02  9.90e-01  
  6  +5.0002e-01  +1.0026e+00  5.03e-01  3.05e-03  7.64e-01  8.45e-05  1.81e-02  7.81e-01  
  7  +4.9694e-01  +9.7769e-01  4.81e-01  3.17e-04  8.12e-02  1.48e-03  8.59e-04  9.59e-01  
  8  +4.9108e-01  +9.1842e-01  4.27e-01  1.35e-04  3.46e-02  2.71e-03  3.63e-04  6.11e-01  
  9  +4.8754e-01  +8.5965e-01  3.72e-01  1.01e-04  2.58e-02  1.69e-03  2.72e-04  5.22e-01  
 10  +4.8313e-01  +8.2344e-01  3.40e-01  8.47e-05  2.16e-02  1.33e-03  2.30e-04  2.92e-01  
 11  +4.7828e-01  +7.8000e-01  3.02e-01  7.76e-05  1.98e-02  7.32e-04  2.15e-04  3.03e-01  
 12  +4.4960e-01  +6.1864e-01  1.69e-01  3.51e-05  8.87e-03  2.44e-04  1.04e-04  6.82e-01  
 13  +4.2880e-01  +5.2565e-01  9.69e-02  1.93e-05  4.86e-03  9.61e-05  6.14e-05  5.27e-01  
 14  +4.2409e-01  +5.0572e-01  8.16e-02  1.61e-05  4.05e-03  5.98e-05  5.21e-05  3.71e-01  
 15  +4.1299e-01  +4.6010e-01  4.71e-02  8.98e-06  2.26e-03  2.54e-05  3.03e-05  5.80e-01  
 16  +4.0344e-01  +4.2142e-01  1.80e-02  3.35e-06  8.41e-04  6.40e-06  1.18e-05  7.65e-01  
 17  +4.0327e-01  +4.2064e-01  1.74e-02  3.26e-06  8.18e-04  5.68e-06  1.15e-05  9.66e-02  
 18  +4.0294e-01  +4.1905e-01  1.61e-02  3.00e-06  7.53e-04  4.06e-06  1.06e-05  3.65e-01  
 19  +4.0077e-01  +4.1101e-01  1.02e-02  1.88e-06  4.73e-04  2.31e-06  6.74e-06  4.64e-01  
 20  +3.9722e-01  +3.9800e-01  7.84e-04  1.43e-07  3.60e-05  6.58e-08  5.26e-07  9.90e-01  
 21  +3.9690e-01  +3.9691e-01  8.19e-06  1.50e-09  3.76e-07  6.85e-10  5.51e-09  9.90e-01  
 22  +3.9690e-01  +3.9690e-01  8.21e-08  1.50e-11  3.76e-09  6.86e-12  5.52e-11  9.90e-01  
 23  +3.9690e-01  +3.9690e-01  8.34e-10  1.52e-13  3.82e-11  6.99e-14  5.63e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 227.7255ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:59 PM: Optimal value: 3.969e-01
(CVXPY) Oct 06 04:30:59 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:30:59 PM: Solver (including time spent in interface) took 2.504e-01 seconds
Iteration: 11, Objective: 0.3969
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:59 PM: Your problem has 5131 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:59 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5131
  constraints   = 10131
  nnz(P)        = 0
  nnz(A)        = 81246
  cones (total) = 1
    : Nonnegative = 1,  numel = 10131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7737e-01  +1.0995e+03  1.10e+03  4.45e-01  8.23e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2863e-01  +1.1905e+02  1.19e+02  1.77e-01  4.18e+01  1.80e-02  2.87e-01  9.64e-01  
  3  +5.0819e-01  +3.0804e+01  3.03e+01  1.22e-01  2.91e+01  5.12e-05  2.58e-01  3.70e-01  
  4  +5.0109e-01  +3.2655e+00  2.76e+00  1.89e-02  4.62e+00  6.35e-06  1.56e-01  6.34e-01  
  5  +5.0023e-01  +1.3313e+00  8.31e-01  5.59e-03  1.39e+00  4.91e-05  7.25e-02  9.90e-01  
  6  +4.9997e-01  +9.3945e-01  4.39e-01  2.52e-03  6.33e-01  9.82e-05  1.29e-02  8.52e-01  
  7  +4.9657e-01  +9.3067e-01  4.34e-01  2.62e-04  6.70e-02  1.62e-03  7.05e-04  9.48e-01  
  8  +4.8985e-01  +8.7542e-01  3.86e-01  1.12e-04  2.85e-02  2.92e-03  2.99e-04  6.16e-01  
  9  +4.8690e-01  +8.3980e-01  3.53e-01  9.81e-05  2.51e-02  2.01e-03  2.64e-04  3.22e-01  
 10  +4.8328e-01  +8.1280e-01  3.30e-01  8.25e-05  2.11e-02  1.25e-03  2.24e-04  4.50e-01  
 11  +4.7018e-01  +7.2486e-01  2.55e-01  6.33e-05  1.61e-02  3.75e-04  1.79e-04  5.33e-01  
 12  +4.3751e-01  +5.5947e-01  1.22e-01  2.56e-05  6.44e-03  8.17e-05  7.90e-05  7.15e-01  
 13  +4.3475e-01  +5.4957e-01  1.15e-01  2.36e-05  5.96e-03  6.68e-05  7.37e-05  1.96e-01  
 14  +4.2137e-01  +4.9808e-01  7.67e-02  1.51e-05  3.80e-03  1.66e-05  4.94e-05  7.49e-01  
 15  +4.0854e-01  +4.4635e-01  3.78e-02  7.26e-06  1.82e-03  7.18e-06  2.50e-05  5.56e-01  
 16  +4.0327e-01  +4.2526e-01  2.20e-02  4.13e-06  1.04e-03  3.36e-06  1.45e-05  6.06e-01  
 17  +4.0255e-01  +4.2148e-01  1.89e-02  3.55e-06  8.90e-04  1.61e-06  1.26e-05  7.89e-01  
 18  +4.0226e-01  +4.2038e-01  1.81e-02  3.39e-06  8.51e-04  1.51e-06  1.21e-05  1.44e-01  
 19  +3.9948e-01  +4.1013e-01  1.06e-02  1.98e-06  4.98e-04  8.22e-07  7.15e-06  6.15e-01  
 20  +3.9815e-01  +4.0547e-01  7.32e-03  1.35e-06  3.39e-04  5.50e-07  4.90e-06  4.31e-01  
 21  +3.9557e-01  +3.9624e-01  6.73e-04  1.24e-07  3.10e-05  4.89e-08  4.59e-07  9.17e-01  
 22  +3.9530e-01  +3.9531e-01  7.99e-06  1.47e-09  3.68e-07  5.60e-10  5.47e-09  9.90e-01  
 23  +3.9530e-01  +3.9530e-01  7.99e-08  1.47e-11  3.68e-09  5.60e-12  5.47e-11  9.90e-01  
 24  +3.9530e-01  +3.9530e-01  7.99e-10  1.46e-13  3.68e-11  5.68e-14  5.53e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 236.7123ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:00 PM: Optimal value: 3.953e-01
(CVXPY) Oct 06 04:31:00 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:31:00 PM: Solver (including time spent in interface) took 2.502e-01 seconds
Iteration: 12, Objective: 0.3953
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:00 PM: Your problem has 5141 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:00 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5141
  constraints   = 10141
  nnz(P)        = 0
  nnz(A)        = 81725
  cones (total) = 1
    : Nonnegative = 1,  numel = 10141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7732e-01  +1.0994e+03  1.10e+03  4.45e-01  8.22e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2861e-01  +1.1901e+02  1.18e+02  1.77e-01  4.17e+01  1.80e-02  2.87e-01  9.65e-01  
  3  +5.0818e-01  +3.0786e+01  3.03e+01  1.22e-01  2.90e+01  5.12e-05  2.58e-01  3.71e-01  
  4  +5.0109e-01  +3.2613e+00  2.76e+00  1.89e-02  4.62e+00  6.36e-06  1.55e-01  6.35e-01  
  5  +5.0023e-01  +1.3467e+00  8.47e-01  5.69e-03  1.41e+00  4.96e-05  7.16e-02  9.90e-01  
  6  +4.9996e-01  +9.5018e-01  4.50e-01  2.51e-03  6.30e-01  1.05e-04  1.20e-02  8.63e-01  
  7  +4.9634e-01  +9.4237e-01  4.46e-01  2.50e-04  6.41e-02  1.72e-03  6.72e-04  9.48e-01  
  8  +4.9210e-01  +9.1301e-01  4.21e-01  1.42e-04  3.64e-02  2.62e-03  3.80e-04  4.60e-01  
  9  +4.8468e-01  +8.3704e-01  3.52e-01  9.06e-05  2.31e-02  1.99e-03  2.45e-04  5.76e-01  
 10  +4.8236e-01  +8.2012e-01  3.38e-01  8.67e-05  2.21e-02  1.69e-03  2.36e-04  1.18e-01  
 11  +4.7765e-01  +7.9219e-01  3.15e-01  7.75e-05  1.97e-02  1.42e-03  2.14e-04  1.70e-01  
 12  +4.5664e-01  +6.6425e-01  2.08e-01  4.91e-05  1.24e-02  1.39e-05  1.45e-04  7.79e-01  
 13  +4.3616e-01  +5.7092e-01  1.35e-01  2.90e-05  7.31e-03  8.21e-06  9.08e-05  4.19e-01  
 14  +4.2704e-01  +5.3227e-01  1.05e-01  2.19e-05  5.50e-03  6.25e-06  7.06e-05  2.57e-01  
 15  +4.2067e-01  +5.0552e-01  8.49e-02  1.71e-05  4.31e-03  4.95e-06  5.66e-05  5.10e-01  
 16  +4.1715e-01  +4.9084e-01  7.37e-02  1.46e-05  3.68e-03  4.36e-06  4.90e-05  3.64e-01  
 17  +4.0650e-01  +4.4764e-01  4.11e-02  8.00e-06  2.01e-03  2.37e-06  2.80e-05  4.72e-01  
 18  +3.9673e-01  +4.0785e-01  1.11e-02  2.11e-06  5.31e-04  6.70e-07  7.79e-06  9.90e-01  
 19  +3.9315e-01  +3.9462e-01  1.46e-03  2.78e-07  6.99e-05  8.63e-08  1.06e-06  8.77e-01  
 20  +3.9261e-01  +3.9262e-01  1.71e-05  3.24e-09  8.16e-07  9.87e-10  1.24e-08  9.89e-01  
 21  +3.9260e-01  +3.9260e-01  1.71e-07  3.24e-11  8.16e-09  9.86e-12  1.24e-10  9.90e-01  
 22  +3.9260e-01  +3.9260e-01  1.71e-09  3.24e-13  8.16e-11  9.92e-14  1.25e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.5894ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:00 PM: Optimal value: 3.926e-01
(CVXPY) Oct 06 04:31:00 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:31:00 PM: Solver (including time spent in interface) took 2.348e-01 seconds
Iteration: 13, Objective: 0.3926
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:00 PM: Your problem has 5151 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:00 PM: Finished problem compilation (took 6.242e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5151
  constraints   = 10151
  nnz(P)        = 0
  nnz(A)        = 82004
  cones (total) = 1
    : Nonnegative = 1,  numel = 10151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7724e-01  +1.0994e+03  1.10e+03  4.45e-01  8.21e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2856e-01  +1.1892e+02  1.18e+02  1.77e-01  4.16e+01  1.80e-02  2.87e-01  9.65e-01  
  3  +5.0817e-01  +3.0762e+01  3.03e+01  1.22e-01  2.90e+01  5.13e-05  2.57e-01  3.73e-01  
  4  +5.0109e-01  +3.2602e+00  2.76e+00  1.89e-02  4.61e+00  6.38e-06  1.55e-01  6.37e-01  
  5  +5.0024e-01  +1.3622e+00  8.62e-01  5.80e-03  1.44e+00  5.00e-05  7.07e-02  9.90e-01  
  6  +4.9998e-01  +9.9982e-01  5.00e-01  2.81e-03  7.06e-01  1.03e-04  1.37e-02  8.36e-01  
  7  +4.9655e-01  +9.8443e-01  4.88e-01  2.82e-04  7.21e-02  1.64e-03  7.54e-04  9.52e-01  
  8  +4.9100e-01  +9.3917e-01  4.48e-01  1.36e-04  3.47e-02  2.81e-03  3.61e-04  5.51e-01  
  9  +4.8332e-01  +8.5464e-01  3.71e-01  9.45e-05  2.41e-02  1.96e-03  2.55e-04  4.75e-01  
 10  +4.8155e-01  +8.3910e-01  3.58e-01  9.14e-05  2.33e-02  1.70e-03  2.48e-04  9.54e-02  
 11  +4.7591e-01  +8.0361e-01  3.28e-01  7.94e-05  2.02e-02  1.44e-03  2.19e-04  1.80e-01  
 12  +4.5801e-01  +6.8049e-01  2.22e-01  5.35e-05  1.35e-02  1.37e-05  1.56e-04  7.59e-01  
 13  +4.3775e-01  +5.8510e-01  1.47e-01  3.19e-05  8.04e-03  8.45e-06  9.88e-05  4.13e-01  
 14  +4.2587e-01  +5.3320e-01  1.07e-01  2.22e-05  5.59e-03  5.95e-06  7.15e-05  3.15e-01  
 15  +4.1919e-01  +5.0421e-01  8.50e-02  1.71e-05  4.29e-03  4.78e-06  5.61e-05  5.25e-01  
 16  +4.1347e-01  +4.8007e-01  6.66e-02  1.31e-05  3.28e-03  3.86e-06  4.38e-05  4.65e-01  
 17  +3.9774e-01  +4.1627e-01  1.85e-02  3.52e-06  8.82e-04  1.02e-06  1.26e-05  7.70e-01  
 18  +3.9500e-01  +4.0585e-01  1.08e-02  2.03e-06  5.10e-04  6.00e-07  7.43e-06  4.55e-01  
 19  +3.9252e-01  +3.9606e-01  3.54e-03  6.57e-07  1.65e-04  2.12e-07  2.44e-06  9.90e-01  
 20  +3.9113e-01  +3.9119e-01  6.71e-05  1.24e-08  3.11e-06  3.97e-09  4.67e-08  9.83e-01  
 21  +3.9110e-01  +3.9110e-01  6.71e-07  1.24e-10  3.11e-08  3.97e-11  4.67e-10  9.90e-01  
 22  +3.9110e-01  +3.9110e-01  6.71e-09  1.24e-12  3.11e-10  3.98e-13  4.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 235.9912ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:01 PM: Optimal value: 3.911e-01
(CVXPY) Oct 06 04:31:01 PM: Compilation took 6.242e-02 seconds
(CVXPY) Oct 06 04:31:01 PM: Solver (including time spent in interface) took 2.504e-01 seconds
Iteration: 14, Objective: 0.3911
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:01 PM: Your problem has 5161 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:01 PM: Finished problem compilation (took 6.258e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5161
  constraints   = 10161
  nnz(P)        = 0
  nnz(A)        = 82467
  cones (total) = 1
    : Nonnegative = 1,  numel = 10161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7722e-01  +1.0993e+03  1.10e+03  4.45e-01  8.20e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2853e-01  +1.1886e+02  1.18e+02  1.77e-01  4.15e+01  1.80e-02  2.87e-01  9.66e-01  
  3  +5.0816e-01  +3.0740e+01  3.02e+01  1.22e-01  2.89e+01  5.13e-05  2.57e-01  3.74e-01  
  4  +5.0109e-01  +3.2562e+00  2.76e+00  1.89e-02  4.61e+00  6.38e-06  1.54e-01  6.38e-01  
  5  +5.0025e-01  +1.3782e+00  8.78e-01  5.90e-03  1.46e+00  5.06e-05  7.00e-02  9.90e-01  
  6  +4.9997e-01  +1.0037e+00  5.04e-01  2.72e-03  6.84e-01  1.11e-04  1.23e-02  8.64e-01  
  7  +4.9645e-01  +9.8901e-01  4.93e-01  2.74e-04  7.01e-02  1.67e-03  7.32e-04  9.44e-01  
  8  +4.9043e-01  +9.3656e-01  4.46e-01  1.30e-04  3.32e-02  2.82e-03  3.45e-04  5.65e-01  
  9  +4.8271e-01  +8.6092e-01  3.78e-01  9.41e-05  2.40e-02  2.09e-03  2.54e-04  4.13e-01  
 10  +4.7983e-01  +8.3608e-01  3.56e-01  8.95e-05  2.28e-02  1.67e-03  2.44e-04  1.36e-01  
 11  +4.7307e-01  +7.9328e-01  3.20e-01  7.64e-05  1.94e-02  1.33e-03  2.12e-04  2.15e-01  
 12  +4.4678e-01  +6.3009e-01  1.83e-01  4.10e-05  1.03e-02  1.31e-05  1.23e-04  7.90e-01  
 13  +4.2766e-01  +5.4342e-01  1.16e-01  2.42e-05  6.09e-03  7.18e-06  7.74e-05  4.96e-01  
 14  +4.1703e-01  +4.9831e-01  8.13e-02  1.63e-05  4.10e-03  4.82e-06  5.41e-05  5.42e-01  
 15  +3.9875e-01  +4.2169e-01  2.29e-02  4.40e-06  1.10e-03  1.29e-06  1.57e-05  9.21e-01  
 16  +3.9559e-01  +4.0977e-01  1.42e-02  2.68e-06  6.71e-04  8.09e-07  9.73e-06  4.77e-01  
 17  +3.9340e-01  +4.0104e-01  7.64e-03  1.43e-06  3.58e-04  4.59e-07  5.27e-06  9.90e-01  
 18  +3.9065e-01  +3.9130e-01  6.45e-04  1.20e-07  3.01e-05  3.86e-08  4.53e-07  9.19e-01  
 19  +3.9040e-01  +3.9041e-01  6.72e-06  1.25e-09  3.13e-07  4.01e-10  4.72e-09  9.90e-01  
 20  +3.9040e-01  +3.9040e-01  6.72e-08  1.25e-11  3.13e-09  4.01e-12  4.72e-11  9.90e-01  
 21  +3.9040e-01  +3.9040e-01  6.72e-10  1.25e-13  3.13e-11  4.03e-14  4.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 211.9204ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:01 PM: Optimal value: 3.904e-01
(CVXPY) Oct 06 04:31:01 PM: Compilation took 6.258e-02 seconds
(CVXPY) Oct 06 04:31:01 PM: Solver (including time spent in interface) took 2.343e-01 seconds
Iteration: 15, Objective: 0.3904
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:01 PM: Your problem has 5171 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:01 PM: Finished problem compilation (took 6.242e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5171
  constraints   = 10171
  nnz(P)        = 0
  nnz(A)        = 82788
  cones (total) = 1
    : Nonnegative = 1,  numel = 10171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7715e-01  +1.0994e+03  1.10e+03  4.45e-01  8.20e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2848e-01  +1.1877e+02  1.18e+02  1.76e-01  4.14e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0815e-01  +3.0717e+01  3.02e+01  1.22e-01  2.89e+01  5.14e-05  2.56e-01  3.75e-01  
  4  +5.0109e-01  +3.2556e+00  2.75e+00  1.89e-02  4.61e+00  6.39e-06  1.54e-01  6.39e-01  
  5  +5.0025e-01  +1.3935e+00  8.93e-01  6.01e-03  1.49e+00  5.09e-05  6.94e-02  9.88e-01  
  6  +4.9996e-01  +1.0036e+00  5.04e-01  2.67e-03  6.72e-01  1.15e-04  1.17e-02  8.65e-01  
  7  +4.9641e-01  +9.8875e-01  4.92e-01  2.70e-04  6.90e-02  1.68e-03  7.19e-04  9.43e-01  
  8  +4.8983e-01  +9.3384e-01  4.44e-01  1.22e-04  3.12e-02  2.95e-03  3.24e-04  5.88e-01  
  9  +4.8333e-01  +8.7340e-01  3.90e-01  9.54e-05  2.43e-02  2.18e-03  2.57e-04  3.64e-01  
 10  +4.7444e-01  +7.9579e-01  3.21e-01  8.14e-05  2.07e-02  8.65e-04  2.25e-04  4.22e-01  
 11  +4.5084e-01  +6.6349e-01  2.13e-01  4.65e-05  1.18e-02  4.59e-04  1.37e-04  4.75e-01  
 12  +4.3514e-01  +5.8758e-01  1.52e-01  3.22e-05  8.12e-03  2.77e-04  1.00e-04  3.28e-01  
 13  +4.2444e-01  +5.3888e-01  1.14e-01  2.35e-05  5.91e-03  1.87e-04  7.57e-05  2.95e-01  
 14  +4.1807e-01  +5.0945e-01  9.14e-02  1.84e-05  4.62e-03  9.82e-05  6.05e-05  4.75e-01  
 15  +4.0767e-01  +4.6396e-01  5.63e-02  1.10e-05  2.76e-03  3.54e-05  3.77e-05  6.49e-01  
 16  +3.9479e-01  +4.1099e-01  1.62e-02  3.10e-06  7.75e-04  8.26e-06  1.13e-05  7.53e-01  
 17  +3.9143e-01  +3.9754e-01  6.11e-03  1.15e-06  2.88e-04  9.00e-07  4.29e-06  9.32e-01  
 18  +3.8923e-01  +3.8956e-01  3.31e-04  6.19e-08  1.55e-05  4.54e-08  2.36e-07  9.51e-01  
 19  +3.8910e-01  +3.8910e-01  3.34e-06  6.25e-10  1.56e-07  4.58e-10  2.38e-09  9.90e-01  
 20  +3.8910e-01  +3.8910e-01  3.34e-08  6.25e-12  1.56e-09  4.58e-12  2.38e-11  9.90e-01  
 21  +3.8910e-01  +3.8910e-01  3.34e-10  6.25e-14  1.56e-11  4.60e-14  2.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 220.3385ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:02 PM: Optimal value: 3.891e-01
(CVXPY) Oct 06 04:31:02 PM: Compilation took 6.242e-02 seconds
(CVXPY) Oct 06 04:31:02 PM: Solver (including time spent in interface) took 2.347e-01 seconds
Iteration: 16, Objective: 0.3891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:02 PM: Your problem has 5181 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:02 PM: Finished problem compilation (took 6.257e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5181
  constraints   = 10181
  nnz(P)        = 0
  nnz(A)        = 83266
  cones (total) = 1
    : Nonnegative = 1,  numel = 10181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7708e-01  +1.0994e+03  1.10e+03  4.46e-01  8.19e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2844e-01  +1.1869e+02  1.18e+02  1.76e-01  4.13e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0815e-01  +3.0697e+01  3.02e+01  1.22e-01  2.88e+01  5.15e-05  2.56e-01  3.77e-01  
  4  +5.0109e-01  +3.2539e+00  2.75e+00  1.89e-02  4.60e+00  6.40e-06  1.53e-01  6.40e-01  
  5  +5.0026e-01  +1.4267e+00  9.26e-01  6.23e-03  1.54e+00  5.09e-05  7.00e-02  9.74e-01  
  6  +4.9993e-01  +9.6690e-01  4.67e-01  2.36e-03  5.94e-01  1.22e-04  9.73e-03  9.07e-01  
  7  +4.9630e-01  +9.5525e-01  4.59e-01  2.40e-04  6.15e-02  1.71e-03  6.38e-04  9.36e-01  
  8  +4.9169e-01  +9.2198e-01  4.30e-01  1.36e-04  3.49e-02  2.54e-03  3.61e-04  4.69e-01  
  9  +4.8554e-01  +8.7280e-01  3.87e-01  9.97e-05  2.55e-02  2.26e-03  2.67e-04  3.97e-01  
 10  +4.8042e-01  +8.3835e-01  3.58e-01  8.81e-05  2.24e-02  1.85e-03  2.39e-04  1.98e-01  
 11  +4.6792e-01  +7.4902e-01  2.81e-01  7.16e-05  1.82e-02  3.96e-04  2.03e-04  5.62e-01  
 12  +4.3445e-01  +5.8124e-01  1.47e-01  3.05e-05  7.68e-03  1.53e-04  9.42e-05  6.19e-01  
 13  +4.2570e-01  +5.4515e-01  1.19e-01  2.43e-05  6.12e-03  8.87e-05  7.77e-05  3.99e-01  
 14  +4.1959e-01  +5.1962e-01  1.00e-01  2.01e-05  5.05e-03  4.73e-05  6.57e-05  4.80e-01  
 15  +4.0249e-01  +4.4840e-01  4.59e-02  8.98e-06  2.25e-03  1.61e-05  3.16e-05  6.28e-01  
 16  +3.9050e-01  +4.0006e-01  9.57e-03  1.83e-06  4.59e-04  2.37e-06  6.89e-06  8.47e-01  
 17  +3.8736e-01  +3.8803e-01  6.69e-04  1.27e-07  3.19e-05  5.51e-08  4.91e-07  9.90e-01  
 18  +3.8710e-01  +3.8711e-01  6.78e-06  1.29e-09  3.23e-07  5.58e-10  4.99e-09  9.90e-01  
 19  +3.8710e-01  +3.8710e-01  6.78e-08  1.29e-11  3.23e-09  5.58e-12  4.99e-11  9.90e-01  
 20  +3.8710e-01  +3.8710e-01  6.78e-10  1.29e-13  3.23e-11  5.60e-14  5.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 206.5203ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:02 PM: Optimal value: 3.871e-01
(CVXPY) Oct 06 04:31:02 PM: Compilation took 6.257e-02 seconds
(CVXPY) Oct 06 04:31:02 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 17, Objective: 0.3871
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:02 PM: Your problem has 5191 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:03 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5191
  constraints   = 10191
  nnz(P)        = 0
  nnz(A)        = 83530
  cones (total) = 1
    : Nonnegative = 1,  numel = 10191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7691e-01  +1.0996e+03  1.10e+03  4.46e-01  8.18e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2835e-01  +1.1855e+02  1.18e+02  1.76e-01  4.12e+01  1.81e-02  2.86e-01  9.68e-01  
  3  +5.0814e-01  +3.0670e+01  3.02e+01  1.21e-01  2.87e+01  5.17e-05  2.56e-01  3.80e-01  
  4  +5.0109e-01  +3.2563e+00  2.76e+00  1.89e-02  4.61e+00  6.42e-06  1.53e-01  6.41e-01  
  5  +5.0027e-01  +1.4466e+00  9.46e-01  6.36e-03  1.57e+00  5.24e-05  6.80e-02  9.83e-01  
  6  +4.9989e-01  +9.6769e-01  4.68e-01  2.16e-03  5.45e-01  1.41e-04  8.15e-03  9.29e-01  
  7  +4.9607e-01  +9.5268e-01  4.57e-01  2.26e-04  5.78e-02  1.78e-03  5.97e-04  9.28e-01  
  8  +4.9133e-01  +9.1952e-01  4.28e-01  1.32e-04  3.37e-02  2.55e-03  3.48e-04  4.57e-01  
  9  +4.8565e-01  +8.7546e-01  3.90e-01  1.01e-04  2.58e-02  2.09e-03  2.70e-04  3.98e-01  
 10  +4.8033e-01  +8.3733e-01  3.57e-01  9.13e-05  2.33e-02  1.49e-03  2.47e-04  2.39e-01  
 11  +4.6437e-01  +7.3219e-01  2.68e-01  6.91e-05  1.75e-02  1.40e-05  1.98e-04  7.56e-01  
 12  +4.3895e-01  +6.1109e-01  1.72e-01  3.77e-05  9.50e-03  8.73e-06  1.16e-04  4.64e-01  
 13  +4.2172e-01  +5.3680e-01  1.15e-01  2.42e-05  6.07e-03  5.69e-06  7.88e-05  7.08e-01  
 14  +4.1196e-01  +4.9519e-01  8.32e-02  1.70e-05  4.26e-03  4.22e-06  5.74e-05  4.59e-01  
 15  +4.0278e-01  +4.5684e-01  5.41e-02  1.08e-05  2.71e-03  2.73e-06  3.80e-05  4.05e-01  
 16  +3.9814e-01  +4.3772e-01  3.96e-02  7.83e-06  1.96e-03  2.01e-06  2.82e-05  3.07e-01  
 17  +3.8890e-01  +3.9997e-01  1.11e-02  2.14e-06  5.36e-04  5.95e-07  8.11e-06  8.57e-01  
 18  +3.8575e-01  +3.8771e-01  1.95e-03  3.76e-07  9.41e-05  1.10e-07  1.46e-06  9.90e-01  
 19  +3.8501e-01  +3.8503e-01  2.15e-05  4.14e-09  1.04e-06  1.20e-09  1.62e-08  9.89e-01  
 20  +3.8500e-01  +3.8500e-01  2.15e-07  4.14e-11  1.04e-08  1.20e-11  1.62e-10  9.90e-01  
 21  +3.8500e-01  +3.8500e-01  2.15e-09  4.14e-13  1.04e-10  1.20e-13  1.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 217.0485ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:03 PM: Optimal value: 3.850e-01
(CVXPY) Oct 06 04:31:03 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:31:03 PM: Solver (including time spent in interface) took 2.348e-01 seconds
Iteration: 18, Objective: 0.3850
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:03 PM: Your problem has 5201 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:03 PM: Finished problem compilation (took 6.139e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5201
  constraints   = 10201
  nnz(P)        = 0
  nnz(A)        = 83914
  cones (total) = 1
    : Nonnegative = 1,  numel = 10201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7684e-01  +1.0996e+03  1.10e+03  4.46e-01  8.18e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2830e-01  +1.1847e+02  1.18e+02  1.76e-01  4.11e+01  1.81e-02  2.86e-01  9.69e-01  
  3  +5.0813e-01  +3.0646e+01  3.01e+01  1.21e-01  2.87e+01  5.17e-05  2.55e-01  3.81e-01  
  4  +5.0109e-01  +3.2542e+00  2.75e+00  1.89e-02  4.60e+00  6.42e-06  1.52e-01  6.42e-01  
  5  +5.0027e-01  +1.4554e+00  9.55e-01  6.41e-03  1.59e+00  5.32e-05  6.66e-02  9.90e-01  
  6  +4.9989e-01  +1.0014e+00  5.02e-01  2.30e-03  5.82e-01  1.44e-04  8.63e-03  9.06e-01  
  7  +4.9610e-01  +9.8416e-01  4.88e-01  2.44e-04  6.23e-02  1.78e-03  6.42e-04  9.28e-01  
  8  +4.9065e-01  +9.4216e-01  4.52e-01  1.32e-04  3.38e-02  2.67e-03  3.47e-04  5.02e-01  
  9  +4.8559e-01  +8.9027e-01  4.05e-01  1.08e-04  2.75e-02  1.76e-03  2.87e-04  4.11e-01  
 10  +4.7860e-01  +8.3682e-01  3.58e-01  9.29e-05  2.36e-02  1.10e-03  2.52e-04  3.22e-01  
 11  +4.5087e-01  +6.7102e-01  2.20e-01  4.92e-05  1.24e-02  2.06e-04  1.44e-04  7.26e-01  
 12  +4.3633e-01  +6.0415e-01  1.68e-01  3.63e-05  9.14e-03  1.32e-04  1.12e-04  2.98e-01  
 13  +4.1626e-01  +5.1523e-01  9.90e-02  2.05e-05  5.14e-03  4.71e-05  6.76e-05  5.78e-01  
 14  +4.0969e-01  +4.8731e-01  7.76e-02  1.57e-05  3.94e-03  2.92e-05  5.31e-05  3.98e-01  
 15  +4.0160e-01  +4.5366e-01  5.21e-02  1.04e-05  2.60e-03  1.83e-05  3.63e-05  3.57e-01  
 16  +3.9285e-01  +4.1762e-01  2.48e-02  4.86e-06  1.21e-03  7.29e-06  1.77e-05  6.02e-01  
 17  +3.8706e-01  +3.9448e-01  7.42e-03  1.44e-06  3.59e-04  1.92e-06  5.44e-06  7.35e-01  
 18  +3.8464e-01  +3.8500e-01  3.59e-04  6.90e-08  1.72e-05  3.42e-08  2.67e-07  9.90e-01  
 19  +3.8450e-01  +3.8451e-01  3.62e-06  6.96e-10  1.74e-07  3.45e-10  2.70e-09  9.90e-01  
 20  +3.8450e-01  +3.8450e-01  3.62e-08  6.96e-12  1.74e-09  3.45e-12  2.70e-11  9.90e-01  
 21  +3.8450e-01  +3.8450e-01  3.62e-10  6.97e-14  1.74e-11  3.47e-14  2.71e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 218.6907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:03 PM: Optimal value: 3.845e-01
(CVXPY) Oct 06 04:31:03 PM: Compilation took 6.139e-02 seconds
(CVXPY) Oct 06 04:31:03 PM: Solver (including time spent in interface) took 2.347e-01 seconds
Iteration: 19, Objective: 0.3845
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:04 PM: Your problem has 5211 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:04 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5211
  constraints   = 10211
  nnz(P)        = 0
  nnz(A)        = 84291
  cones (total) = 1
    : Nonnegative = 1,  numel = 10211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7672e-01  +1.0997e+03  1.10e+03  4.46e-01  8.17e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2823e-01  +1.1833e+02  1.18e+02  1.76e-01  4.10e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0811e-01  +3.0614e+01  3.01e+01  1.21e-01  2.86e+01  5.19e-05  2.54e-01  3.84e-01  
  4  +5.0109e-01  +3.2524e+00  2.75e+00  1.89e-02  4.60e+00  6.44e-06  1.51e-01  6.44e-01  
  5  +5.0029e-01  +1.4983e+00  9.98e-01  6.69e-03  1.66e+00  5.37e-05  6.63e-02  9.80e-01  
  6  +4.9990e-01  +1.0197e+00  5.20e-01  2.37e-03  5.97e-01  1.44e-04  8.74e-03  8.95e-01  
  7  +4.9620e-01  +1.0027e+00  5.06e-01  2.55e-04  6.53e-02  1.73e-03  6.70e-04  9.25e-01  
  8  +4.9039e-01  +9.5629e-01  4.66e-01  1.32e-04  3.37e-02  2.68e-03  3.46e-04  5.33e-01  
  9  +4.8511e-01  +9.0537e-01  4.20e-01  1.09e-04  2.78e-02  1.91e-03  2.89e-04  3.59e-01  
 10  +4.7398e-01  +8.2003e-01  3.46e-01  8.72e-05  2.22e-02  9.76e-04  2.39e-04  4.00e-01  
 11  +4.4665e-01  +6.6475e-01  2.18e-01  4.79e-05  1.21e-02  4.63e-04  1.42e-04  4.94e-01  
 12  +4.2839e-01  +5.7804e-01  1.50e-01  3.19e-05  8.02e-03  2.18e-04  1.01e-04  4.35e-01  
 13  +4.1386e-01  +5.1223e-01  9.84e-02  2.04e-05  5.12e-03  1.20e-04  6.78e-05  3.97e-01  
 14  +4.0641e-01  +4.7933e-01  7.29e-02  1.48e-05  3.72e-03  7.19e-05  5.08e-05  4.00e-01  
 15  +3.9821e-01  +4.4419e-01  4.60e-02  9.22e-06  2.31e-03  4.09e-05  3.28e-05  4.15e-01  
 16  +3.9461e-01  +4.2906e-01  3.44e-02  6.85e-06  1.71e-03  2.93e-05  2.48e-05  2.80e-01  
 17  +3.8953e-01  +4.0619e-01  1.67e-02  3.26e-06  8.14e-04  2.04e-06  1.21e-05  9.90e-01  
 18  +3.8466e-01  +3.8770e-01  3.04e-03  5.93e-07  1.48e-04  3.19e-07  2.28e-06  8.60e-01  
 19  +3.8364e-01  +3.8386e-01  2.26e-04  4.40e-08  1.10e-05  1.38e-08  1.70e-07  9.90e-01  
 20  +3.8355e-01  +3.8355e-01  2.30e-06  4.49e-10  1.12e-07  1.41e-10  1.74e-09  9.90e-01  
 21  +3.8355e-01  +3.8355e-01  2.31e-08  4.49e-12  1.12e-09  1.41e-12  1.74e-11  9.90e-01  
 22  +3.8355e-01  +3.8355e-01  2.31e-10  4.50e-14  1.12e-11  1.42e-14  1.75e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 230.994ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:04 PM: Optimal value: 3.836e-01
(CVXPY) Oct 06 04:31:04 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:31:04 PM: Solver (including time spent in interface) took 2.505e-01 seconds
Iteration: 20, Objective: 0.3836
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:04 PM: Your problem has 5221 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:04 PM: Finished problem compilation (took 6.423e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5221
  constraints   = 10221
  nnz(P)        = 0
  nnz(A)        = 84625
  cones (total) = 1
    : Nonnegative = 1,  numel = 10221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7664e-01  +1.0998e+03  1.10e+03  4.46e-01  8.16e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2817e-01  +1.1822e+02  1.18e+02  1.76e-01  4.09e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0810e-01  +3.0585e+01  3.01e+01  1.21e-01  2.85e+01  5.19e-05  2.54e-01  3.86e-01  
  4  +5.0109e-01  +3.2522e+00  2.75e+00  1.89e-02  4.60e+00  6.44e-06  1.51e-01  6.45e-01  
  5  +5.0029e-01  +1.5108e+00  1.01e+00  6.77e-03  1.67e+00  5.47e-05  6.51e-02  9.86e-01  
  6  +4.9992e-01  +1.0790e+00  5.79e-01  2.63e-03  6.64e-01  1.46e-04  9.67e-03  8.76e-01  
  7  +4.9636e-01  +1.0588e+00  5.62e-01  2.91e-04  7.45e-02  1.67e-03  7.64e-04  9.22e-01  
  8  +4.8953e-01  +9.9103e-01  5.02e-01  1.34e-04  3.42e-02  2.77e-03  3.50e-04  5.95e-01  
  9  +4.8479e-01  +9.3152e-01  4.47e-01  1.17e-04  2.99e-02  1.81e-03  3.11e-04  3.00e-01  
 10  +4.8075e-01  +8.9592e-01  4.15e-01  1.07e-04  2.74e-02  1.42e-03  2.89e-04  1.79e-01  
 11  +4.6393e-01  +7.5708e-01  2.93e-01  7.60e-05  1.92e-02  1.35e-05  2.16e-04  7.59e-01  
 12  +4.3715e-01  +6.2022e-01  1.83e-01  4.07e-05  1.03e-02  8.01e-06  1.25e-04  4.70e-01  
 13  +4.2096e-01  +5.4708e-01  1.26e-01  2.70e-05  6.77e-03  5.85e-06  8.76e-05  6.35e-01  
 14  +4.1083e-01  +5.0239e-01  9.16e-02  1.91e-05  4.79e-03  4.21e-06  6.45e-05  3.20e-01  
 15  +3.9882e-01  +4.5053e-01  5.17e-02  1.05e-05  2.63e-03  2.38e-06  3.73e-05  4.96e-01  
 16  +3.9290e-01  +4.2519e-01  3.23e-02  6.42e-06  1.61e-03  1.60e-06  2.35e-05  5.62e-01  
 17  +3.8879e-01  +4.0704e-01  1.83e-02  3.57e-06  8.91e-04  1.06e-06  1.33e-05  9.90e-01  
 18  +3.8278e-01  +3.8436e-01  1.58e-03  3.08e-07  7.69e-05  8.87e-08  1.20e-06  9.55e-01  
 19  +3.8221e-01  +3.8222e-01  1.69e-05  3.28e-09  8.20e-07  9.42e-10  1.29e-08  9.89e-01  
 20  +3.8220e-01  +3.8220e-01  1.69e-07  3.28e-11  8.20e-09  9.43e-12  1.29e-10  9.90e-01  
 21  +3.8220e-01  +3.8220e-01  1.69e-09  3.29e-13  8.21e-11  9.45e-14  1.29e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.2246ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:04 PM: Optimal value: 3.822e-01
(CVXPY) Oct 06 04:31:04 PM: Compilation took 6.423e-02 seconds
(CVXPY) Oct 06 04:31:04 PM: Solver (including time spent in interface) took 2.177e-01 seconds
Iteration: 21, Objective: 0.3822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:05 PM: Your problem has 5231 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:05 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5231
  constraints   = 10231
  nnz(P)        = 0
  nnz(A)        = 84873
  cones (total) = 1
    : Nonnegative = 1,  numel = 10231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7659e-01  +1.0998e+03  1.10e+03  4.46e-01  8.16e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2814e-01  +1.1814e+02  1.18e+02  1.76e-01  4.09e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0810e-01  +3.0565e+01  3.01e+01  1.21e-01  2.85e+01  5.20e-05  2.54e-01  3.87e-01  
  4  +5.0109e-01  +3.2521e+00  2.75e+00  1.89e-02  4.60e+00  6.45e-06  1.50e-01  6.45e-01  
  5  +5.0032e-01  +1.5774e+00  1.08e+00  7.22e-03  1.78e+00  5.34e-05  6.79e-02  9.48e-01  
  6  +4.9997e-01  +1.0952e+00  5.95e-01  2.90e-03  7.30e-01  1.25e-04  1.12e-02  8.57e-01  
  7  +4.9687e-01  +1.0768e+00  5.80e-01  3.30e-04  8.45e-02  1.46e-03  8.67e-04  9.24e-01  
  8  +4.8976e-01  +9.9970e-01  5.10e-01  1.34e-04  3.42e-02  2.71e-03  3.49e-04  6.50e-01  
  9  +4.8540e-01  +9.4468e-01  4.59e-01  1.19e-04  3.04e-02  1.89e-03  3.15e-04  2.53e-01  
 10  +4.8365e-01  +9.1983e-01  4.36e-01  1.15e-04  2.94e-02  1.40e-03  3.07e-04  1.79e-01  
 11  +4.7651e-01  +8.3861e-01  3.62e-01  1.03e-04  2.61e-02  2.08e-04  2.82e-04  6.05e-01  
 12  +4.4699e-01  +6.6823e-01  2.21e-01  4.89e-05  1.23e-02  1.11e-04  1.44e-04  5.83e-01  
 13  +4.2594e-01  +5.7055e-01  1.45e-01  3.11e-05  7.80e-03  4.40e-05  9.83e-05  5.09e-01  
 14  +4.1305e-01  +5.1345e-01  1.00e-01  2.10e-05  5.26e-03  2.69e-05  6.97e-05  3.56e-01  
 15  +4.0478e-01  +4.7755e-01  7.28e-02  1.49e-05  3.71e-03  1.53e-05  5.10e-05  4.69e-01  
 16  +3.9306e-01  +4.2802e-01  3.50e-02  6.98e-06  1.74e-03  6.19e-06  2.53e-05  5.96e-01  
 17  +3.9152e-01  +4.2160e-01  3.01e-02  5.97e-06  1.49e-03  5.11e-06  2.18e-05  1.93e-01  
 18  +3.8536e-01  +3.9567e-01  1.03e-02  2.01e-06  5.03e-04  6.90e-07  7.64e-06  9.90e-01  
 19  +3.8174e-01  +3.8211e-01  3.68e-04  7.16e-08  1.79e-05  2.15e-08  2.80e-07  9.86e-01  
 20  +3.8160e-01  +3.8161e-01  3.69e-06  7.19e-10  1.79e-07  2.15e-10  2.82e-09  9.90e-01  
 21  +3.8160e-01  +3.8160e-01  3.69e-08  7.19e-12  1.79e-09  2.15e-12  2.82e-11  9.90e-01  
 22  +3.8160e-01  +3.8160e-01  3.71e-10  7.22e-14  1.80e-11  2.17e-14  2.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 226.6121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:05 PM: Optimal value: 3.816e-01
(CVXPY) Oct 06 04:31:05 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:31:05 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 22, Objective: 0.3816
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:05 PM: Your problem has 5241 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:05 PM: Finished problem compilation (took 6.291e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:05 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5241
  constraints   = 10241
  nnz(P)        = 0
  nnz(A)        = 85134
  cones (total) = 1
    : Nonnegative = 1,  numel = 10241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7648e-01  +1.0998e+03  1.10e+03  4.47e-01  8.15e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2806e-01  +1.1800e+02  1.17e+02  1.75e-01  4.08e+01  1.81e-02  2.85e-01  9.73e-01  
  3  +5.0809e-01  +3.0534e+01  3.00e+01  1.21e-01  2.84e+01  5.21e-05  2.53e-01  3.89e-01  
  4  +5.0109e-01  +3.2502e+00  2.75e+00  1.89e-02  4.60e+00  6.46e-06  1.50e-01  6.47e-01  
  5  +5.0033e-01  +1.6147e+00  1.11e+00  7.46e-03  1.84e+00  5.42e-05  6.70e-02  9.45e-01  
  6  +4.9993e-01  +1.0657e+00  5.66e-01  2.54e-03  6.41e-01  1.40e-04  9.17e-03  8.86e-01  
  7  +4.9667e-01  +1.0481e+00  5.51e-01  2.97e-04  7.60e-02  1.51e-03  7.76e-04  9.16e-01  
  8  +4.9200e-01  +1.0021e+00  5.10e-01  1.62e-04  4.14e-02  2.25e-03  4.22e-04  5.07e-01  
  9  +4.8857e-01  +9.6292e-01  4.74e-01  1.35e-04  3.44e-02  1.91e-03  3.53e-04  3.01e-01  
 10  +4.8477e-01  +9.3376e-01  4.49e-01  1.19e-04  3.03e-02  1.76e-03  3.15e-04  1.63e-01  
 11  +4.8278e-01  +9.0984e-01  4.27e-01  1.17e-04  2.98e-02  1.33e-03  3.13e-04  1.36e-01  
 12  +4.5729e-01  +7.3284e-01  2.76e-01  6.28e-05  1.59e-02  5.26e-04  1.79e-04  6.25e-01  
 13  +4.4054e-01  +6.4889e-01  2.08e-01  4.60e-05  1.16e-02  3.32e-04  1.38e-04  2.88e-01  
 14  +4.1968e-01  +5.5055e-01  1.31e-01  2.79e-05  6.99e-03  1.13e-04  9.00e-05  5.67e-01  
 15  +4.0262e-01  +4.7409e-01  7.15e-02  1.47e-05  3.67e-03  4.66e-05  5.07e-05  5.47e-01  
 16  +3.9400e-01  +4.3660e-01  4.26e-02  8.54e-06  2.13e-03  1.97e-05  3.06e-05  5.94e-01  
 17  +3.9126e-01  +4.2522e-01  3.40e-02  6.76e-06  1.69e-03  1.51e-05  2.46e-05  2.33e-01  
 18  +3.8648e-01  +4.0397e-01  1.75e-02  3.43e-06  8.56e-04  1.56e-06  1.28e-05  9.90e-01  
 19  +3.8113e-01  +3.8365e-01  2.52e-03  4.92e-07  1.23e-04  1.92e-07  1.91e-06  9.07e-01  
 20  +3.8023e-01  +3.8029e-01  6.75e-05  1.32e-08  3.28e-06  4.56e-09  5.16e-08  9.82e-01  
 21  +3.8020e-01  +3.8020e-01  6.77e-07  1.32e-10  3.29e-08  4.58e-11  5.18e-10  9.90e-01  
 22  +3.8020e-01  +3.8020e-01  6.77e-09  1.32e-12  3.29e-10  4.58e-13  5.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 253.8733ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:06 PM: Optimal value: 3.802e-01
(CVXPY) Oct 06 04:31:06 PM: Compilation took 6.291e-02 seconds
(CVXPY) Oct 06 04:31:06 PM: Solver (including time spent in interface) took 2.660e-01 seconds
Iteration: 23, Objective: 0.3802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:06 PM: Your problem has 5251 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:06 PM: Finished problem compilation (took 6.264e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5251
  constraints   = 10251
  nnz(P)        = 0
  nnz(A)        = 85465
  cones (total) = 1
    : Nonnegative = 1,  numel = 10251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7648e-01  +1.0997e+03  1.10e+03  4.47e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2806e-01  +1.1798e+02  1.17e+02  1.75e-01  4.07e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0808e-01  +3.0523e+01  3.00e+01  1.21e-01  2.84e+01  5.21e-05  2.53e-01  3.89e-01  
  4  +5.0109e-01  +3.2474e+00  2.75e+00  1.89e-02  4.59e+00  6.46e-06  1.50e-01  6.47e-01  
  5  +5.0032e-01  +1.5919e+00  1.09e+00  7.31e-03  1.80e+00  5.50e-05  6.53e-02  9.62e-01  
  6  +4.9992e-01  +1.0970e+00  5.97e-01  2.61e-03  6.58e-01  1.48e-04  9.25e-03  8.81e-01  
  7  +4.9658e-01  +1.0761e+00  5.80e-01  3.06e-04  7.82e-02  1.55e-03  8.00e-04  9.15e-01  
  8  +4.9151e-01  +1.0200e+00  5.28e-01  1.62e-04  4.14e-02  2.30e-03  4.23e-04  5.26e-01  
  9  +4.8684e-01  +9.6509e-01  4.78e-01  1.29e-04  3.29e-02  1.86e-03  3.39e-04  3.53e-01  
 10  +4.8344e-01  +9.3672e-01  4.53e-01  1.18e-04  3.01e-02  1.66e-03  3.13e-04  1.29e-01  
 11  +4.8176e-01  +9.1670e-01  4.35e-01  1.16e-04  2.97e-02  1.37e-03  3.12e-04  8.56e-02  
 12  +4.5492e-01  +7.2389e-01  2.69e-01  6.16e-05  1.56e-02  4.64e-04  1.77e-04  6.29e-01  
 13  +4.3844e-01  +6.4165e-01  2.03e-01  4.49e-05  1.13e-02  2.93e-04  1.36e-04  2.94e-01  
 14  +4.1735e-01  +5.4186e-01  1.25e-01  2.65e-05  6.63e-03  1.01e-04  8.64e-05  5.67e-01  
 15  +4.0222e-01  +4.7399e-01  7.18e-02  1.48e-05  3.70e-03  4.83e-05  5.13e-05  4.84e-01  
 16  +3.9327e-01  +4.3474e-01  4.15e-02  8.36e-06  2.08e-03  2.03e-05  3.01e-05  5.92e-01  
 17  +3.9077e-01  +4.2425e-01  3.35e-02  6.70e-06  1.67e-03  1.57e-05  2.45e-05  2.24e-01  
 18  +3.8606e-01  +4.0306e-01  1.70e-02  3.36e-06  8.37e-04  1.55e-06  1.25e-05  9.90e-01  
 19  +3.8089e-01  +3.8331e-01  2.43e-03  4.78e-07  1.19e-04  1.87e-07  1.86e-06  9.08e-01  
 20  +3.8002e-01  +3.8008e-01  5.64e-05  1.11e-08  2.76e-06  3.80e-09  4.35e-08  9.85e-01  
 21  +3.8000e-01  +3.8000e-01  5.66e-07  1.11e-10  2.77e-08  3.81e-11  4.37e-10  9.90e-01  
 22  +3.8000e-01  +3.8000e-01  5.66e-09  1.11e-12  2.77e-10  3.81e-13  4.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 230.3944ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:06 PM: Optimal value: 3.800e-01
(CVXPY) Oct 06 04:31:06 PM: Compilation took 6.264e-02 seconds
(CVXPY) Oct 06 04:31:06 PM: Solver (including time spent in interface) took 2.516e-01 seconds
Iteration: 24, Objective: 0.3800
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:06 PM: Your problem has 5261 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:06 PM: Finished problem compilation (took 9.375e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5261
  constraints   = 10261
  nnz(P)        = 0
  nnz(A)        = 85692
  cones (total) = 1
    : Nonnegative = 1,  numel = 10261

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7644e-01  +1.0997e+03  1.10e+03  4.47e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2803e-01  +1.1793e+02  1.17e+02  1.75e-01  4.06e+01  1.81e-02  2.84e-01  9.73e-01  
  3  +5.0808e-01  +3.0512e+01  3.00e+01  1.21e-01  2.83e+01  5.21e-05  2.53e-01  3.90e-01  
  4  +5.0109e-01  +3.2473e+00  2.75e+00  1.89e-02  4.59e+00  6.46e-06  1.49e-01  6.47e-01  
  5  +5.0034e-01  +1.6383e+00  1.14e+00  7.62e-03  1.88e+00  5.41e-05  6.73e-02  9.37e-01  
  6  +4.9993e-01  +1.0665e+00  5.67e-01  2.51e-03  6.34e-01  1.40e-04  9.01e-03  8.90e-01  
  7  +4.9673e-01  +1.0485e+00  5.52e-01  2.97e-04  7.61e-02  1.48e-03  7.78e-04  9.15e-01  
  8  +4.9240e-01  +1.0061e+00  5.14e-01  1.67e-04  4.28e-02  2.16e-03  4.36e-04  4.91e-01  
  9  +4.8852e-01  +9.6558e-01  4.77e-01  1.34e-04  3.43e-02  1.91e-03  3.53e-04  3.22e-01  
 10  +4.8463e-01  +9.3265e-01  4.48e-01  1.19e-04  3.05e-02  1.64e-03  3.16e-04  1.91e-01  
 11  +4.8209e-01  +9.0374e-01  4.22e-01  1.17e-04  2.97e-02  1.14e-03  3.13e-04  1.86e-01  
 12  +4.5326e-01  +7.1075e-01  2.57e-01  5.73e-05  1.45e-02  4.56e-04  1.65e-04  6.46e-01  
 13  +4.3753e-01  +6.3471e-01  1.97e-01  4.31e-05  1.08e-02  2.90e-04  1.30e-04  2.76e-01  
 14  +4.1670e-01  +5.3906e-01  1.22e-01  2.59e-05  6.49e-03  1.04e-04  8.46e-05  5.53e-01  
 15  +4.0338e-01  +4.8026e-01  7.69e-02  1.59e-05  3.96e-03  5.70e-05  5.47e-05  4.14e-01  
 16  +3.9350e-01  +4.3740e-01  4.39e-02  8.83e-06  2.20e-03  2.28e-05  3.18e-05  6.08e-01  
 17  +3.9075e-01  +4.2581e-01  3.51e-02  7.00e-06  1.74e-03  1.67e-05  2.55e-05  2.80e-01  
 18  +3.8601e-01  +4.0482e-01  1.88e-02  3.70e-06  9.22e-04  1.74e-06  1.38e-05  9.90e-01  
 19  +3.8010e-01  +3.8228e-01  2.19e-03  4.29e-07  1.07e-04  1.63e-07  1.67e-06  9.37e-01  
 20  +3.7932e-01  +3.7936e-01  4.32e-05  8.44e-09  2.10e-06  2.86e-09  3.31e-08  9.87e-01  
 21  +3.7930e-01  +3.7930e-01  4.32e-07  8.46e-11  2.11e-08  2.87e-11  3.32e-10  9.90e-01  
 22  +3.7930e-01  +3.7930e-01  4.32e-09  8.46e-13  2.11e-10  2.87e-13  3.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 237.9599ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:07 PM: Optimal value: 3.793e-01
(CVXPY) Oct 06 04:31:07 PM: Compilation took 9.375e-02 seconds
(CVXPY) Oct 06 04:31:07 PM: Solver (including time spent in interface) took 2.503e-01 seconds
Iteration: 25, Objective: 0.3793
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:07 PM: Your problem has 5271 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:07 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5271
  constraints   = 10271
  nnz(P)        = 0
  nnz(A)        = 85939
  cones (total) = 1
    : Nonnegative = 1,  numel = 10271

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7642e-01  +1.0996e+03  1.10e+03  4.47e-01  8.13e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2802e-01  +1.1788e+02  1.17e+02  1.75e-01  4.05e+01  1.81e-02  2.84e-01  9.73e-01  
  3  +5.0808e-01  +3.0496e+01  3.00e+01  1.20e-01  2.83e+01  5.21e-05  2.52e-01  3.91e-01  
  4  +5.0108e-01  +3.2443e+00  2.74e+00  1.89e-02  4.58e+00  6.47e-06  1.49e-01  6.48e-01  
  5  +5.0035e-01  +1.6625e+00  1.16e+00  7.78e-03  1.92e+00  5.40e-05  6.75e-02  9.29e-01  
  6  +4.9993e-01  +1.0785e+00  5.79e-01  2.57e-03  6.48e-01  1.38e-04  9.20e-03  8.86e-01  
  7  +4.9675e-01  +1.0616e+00  5.65e-01  3.02e-04  7.73e-02  1.48e-03  7.90e-04  9.16e-01  
  8  +4.9095e-01  +1.0069e+00  5.16e-01  1.46e-04  3.74e-02  2.44e-03  3.81e-04  5.68e-01  
  9  +4.8458e-01  +9.4578e-01  4.61e-01  1.15e-04  2.93e-02  1.90e-03  3.04e-04  3.61e-01  
 10  +4.7014e-01  +8.2204e-01  3.52e-01  9.06e-05  2.30e-02  5.17e-04  2.51e-04  5.15e-01  
 11  +4.4070e-01  +6.5602e-01  2.15e-01  4.79e-05  1.20e-02  2.23e-04  1.44e-04  5.31e-01  
 12  +4.2294e-01  +5.7231e-01  1.49e-01  3.24e-05  8.11e-03  9.97e-05  1.04e-04  4.68e-01  
 13  +4.0634e-01  +4.9710e-01  9.08e-02  1.90e-05  4.75e-03  4.85e-05  6.49e-05  4.67e-01  
 14  +3.9568e-01  +4.5056e-01  5.49e-02  1.12e-05  2.79e-03  2.26e-05  4.00e-05  5.33e-01  
 15  +3.8747e-01  +4.1550e-01  2.80e-02  5.60e-06  1.39e-03  8.77e-06  2.09e-05  6.30e-01  
 16  +3.8494e-01  +4.0333e-01  1.84e-02  3.64e-06  9.06e-04  1.40e-06  1.37e-05  9.90e-01  
 17  +3.8048e-01  +3.8649e-01  6.02e-03  1.19e-06  2.96e-04  4.38e-07  4.63e-06  7.16e-01  
 18  +3.7843e-01  +3.7880e-01  3.67e-04  7.23e-08  1.80e-05  2.58e-08  2.87e-07  9.44e-01  
 19  +3.7830e-01  +3.7831e-01  3.71e-06  7.30e-10  1.82e-07  2.60e-10  2.90e-09  9.90e-01  
 20  +3.7830e-01  +3.7830e-01  3.71e-08  7.30e-12  1.82e-09  2.61e-12  2.90e-11  9.90e-01  
 21  +3.7830e-01  +3.7830e-01  3.72e-10  7.33e-14  1.83e-11  2.63e-14  2.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 227.8072ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:07 PM: Optimal value: 3.783e-01
(CVXPY) Oct 06 04:31:07 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:31:07 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 26, Objective: 0.3783
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:08 PM: Your problem has 5281 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:08 PM: Finished problem compilation (took 6.244e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5281
  constraints   = 10281
  nnz(P)        = 0
  nnz(A)        = 86187
  cones (total) = 1
    : Nonnegative = 1,  numel = 10281

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7636e-01  +1.0997e+03  1.10e+03  4.47e-01  8.12e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2797e-01  +1.1779e+02  1.17e+02  1.75e-01  4.05e+01  1.81e-02  2.84e-01  9.74e-01  
  3  +5.0807e-01  +3.0478e+01  3.00e+01  1.20e-01  2.82e+01  5.22e-05  2.52e-01  3.92e-01  
  4  +5.0108e-01  +3.2430e+00  2.74e+00  1.89e-02  4.58e+00  6.47e-06  1.49e-01  6.49e-01  
  5  +5.0041e-01  +1.7896e+00  1.29e+00  8.65e-03  2.13e+00  5.11e-05  7.30e-02  8.61e-01  
  6  +5.0000e-01  +1.0865e+00  5.86e-01  2.90e-03  7.28e-01  1.10e-04  1.12e-02  8.77e-01  
  7  +4.9734e-01  +1.0745e+00  5.77e-01  3.49e-04  8.93e-02  1.24e-03  9.12e-04  9.23e-01  
  8  +4.9321e-01  +1.0354e+00  5.42e-01  1.82e-04  4.65e-02  2.04e-03  4.72e-04  5.18e-01  
  9  +4.8777e-01  +9.6204e-01  4.74e-01  1.30e-04  3.32e-02  1.47e-03  3.41e-04  5.21e-01  
 10  +4.8340e-01  +9.2520e-01  4.42e-01  1.18e-04  3.01e-02  1.17e-03  3.13e-04  1.96e-01  
 11  +4.6652e-01  +7.9768e-01  3.31e-01  8.43e-05  2.13e-02  2.92e-04  2.35e-04  6.17e-01  
 12  +4.3817e-01  +6.4405e-01  2.06e-01  4.61e-05  1.16e-02  1.45e-04  1.39e-04  4.65e-01  
 13  +4.1940e-01  +5.5674e-01  1.37e-01  2.98e-05  7.44e-03  6.41e-05  9.64e-05  4.82e-01  
 14  +4.0367e-01  +4.8636e-01  8.27e-02  1.73e-05  4.33e-03  3.27e-05  5.98e-05  4.49e-01  
 15  +3.9529e-01  +4.5026e-01  5.50e-02  1.13e-05  2.81e-03  1.94e-05  4.05e-05  3.99e-01  
 16  +3.8872e-01  +4.2151e-01  3.28e-02  6.58e-06  1.64e-03  7.20e-06  2.43e-05  6.90e-01  
 17  +3.8511e-01  +4.0537e-01  2.03e-02  4.02e-06  1.00e-03  1.44e-06  1.51e-05  9.90e-01  
 18  +3.8007e-01  +3.8617e-01  6.09e-03  1.21e-06  3.00e-04  4.19e-07  4.71e-06  7.28e-01  
 19  +3.7805e-01  +3.7845e-01  4.07e-04  8.05e-08  2.00e-05  2.71e-08  3.20e-07  9.40e-01  
 20  +3.7790e-01  +3.7791e-01  4.12e-06  8.14e-10  2.03e-07  2.74e-10  3.25e-09  9.90e-01  
 21  +3.7790e-01  +3.7790e-01  4.12e-08  8.15e-12  2.03e-09  2.74e-12  3.25e-11  9.90e-01  
 22  +3.7790e-01  +3.7790e-01  4.14e-10  8.18e-14  2.04e-11  2.76e-14  3.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.5685ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:08 PM: Optimal value: 3.779e-01
(CVXPY) Oct 06 04:31:08 PM: Compilation took 6.244e-02 seconds
(CVXPY) Oct 06 04:31:08 PM: Solver (including time spent in interface) took 2.660e-01 seconds
Iteration: 27, Objective: 0.3779
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:08 PM: Your problem has 5291 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:08 PM: Finished problem compilation (took 7.813e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5291
  constraints   = 10291
  nnz(P)        = 0
  nnz(A)        = 86518
  cones (total) = 1
    : Nonnegative = 1,  numel = 10291

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7626e-01  +1.0998e+03  1.10e+03  4.47e-01  8.12e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2790e-01  +1.1766e+02  1.17e+02  1.75e-01  4.04e+01  1.82e-02  2.84e-01  9.75e-01  
  3  +5.0806e-01  +3.0452e+01  2.99e+01  1.20e-01  2.82e+01  5.23e-05  2.52e-01  3.94e-01  
  4  +5.0108e-01  +3.2440e+00  2.74e+00  1.89e-02  4.58e+00  6.48e-06  1.48e-01  6.50e-01  
  5  +5.0042e-01  +1.8287e+00  1.33e+00  8.90e-03  2.19e+00  5.17e-05  7.25e-02  8.58e-01  
  6  +5.0000e-01  +1.1130e+00  6.13e-01  2.98e-03  7.49e-01  1.12e-04  1.13e-02  8.74e-01  
  7  +4.9743e-01  +1.0995e+00  6.02e-01  3.71e-04  9.49e-02  1.20e-03  9.69e-04  9.17e-01  
  8  +4.9324e-01  +1.0544e+00  5.61e-01  1.90e-04  4.86e-02  1.97e-03  4.93e-04  5.31e-01  
  9  +4.8985e-01  +9.8863e-01  4.99e-01  1.51e-04  3.84e-02  1.23e-03  3.93e-04  4.84e-01  
 10  +4.8468e-01  +9.4018e-01  4.55e-01  1.27e-04  3.23e-02  9.37e-04  3.35e-04  3.10e-01  
 11  +4.7319e-01  +8.4633e-01  3.73e-01  9.99e-05  2.53e-02  3.55e-04  2.73e-04  5.23e-01  
 12  +4.4171e-01  +6.6310e-01  2.21e-01  4.96e-05  1.25e-02  1.42e-04  1.48e-04  5.87e-01  
 13  +4.2672e-01  +5.9251e-01  1.66e-01  3.63e-05  9.10e-03  8.74e-05  1.14e-04  3.14e-01  
 14  +4.0455e-01  +4.9152e-01  8.70e-02  1.83e-05  4.56e-03  2.90e-05  6.27e-05  6.09e-01  
 15  +3.9586e-01  +4.5406e-01  5.82e-02  1.19e-05  2.97e-03  1.50e-05  4.25e-05  5.11e-01  
 16  +3.8847e-01  +4.2193e-01  3.35e-02  6.68e-06  1.66e-03  4.41e-06  2.47e-05  8.17e-01  
 17  +3.8492e-01  +4.0635e-01  2.14e-02  4.25e-06  1.06e-03  1.38e-06  1.60e-05  9.90e-01  
 18  +3.8035e-01  +3.8891e-01  8.56e-03  1.69e-06  4.21e-04  5.44e-07  6.58e-06  6.33e-01  
 19  +3.7750e-01  +3.7806e-01  5.58e-04  1.10e-07  2.74e-05  3.51e-08  4.38e-07  9.35e-01  
 20  +3.7730e-01  +3.7731e-01  5.61e-06  1.11e-09  2.75e-07  3.52e-10  4.40e-09  9.90e-01  
 21  +3.7730e-01  +3.7730e-01  5.61e-08  1.11e-11  2.75e-09  3.53e-12  4.41e-11  9.90e-01  
 22  +3.7730e-01  +3.7730e-01  5.62e-10  1.11e-13  2.76e-11  3.53e-14  4.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.6298ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:09 PM: Optimal value: 3.773e-01
(CVXPY) Oct 06 04:31:09 PM: Compilation took 7.813e-02 seconds
(CVXPY) Oct 06 04:31:09 PM: Solver (including time spent in interface) took 2.504e-01 seconds
Iteration: 28, Objective: 0.3773
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:09 PM: Your problem has 5301 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:09 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5301
  constraints   = 10301
  nnz(P)        = 0
  nnz(A)        = 86739
  cones (total) = 1
    : Nonnegative = 1,  numel = 10301

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7625e-01  +1.0998e+03  1.10e+03  4.47e-01  8.11e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2788e-01  +1.1763e+02  1.17e+02  1.75e-01  4.03e+01  1.82e-02  2.84e-01  9.75e-01  
  3  +5.0806e-01  +3.0438e+01  2.99e+01  1.20e-01  2.81e+01  5.23e-05  2.52e-01  3.95e-01  
  4  +5.0108e-01  +3.2423e+00  2.74e+00  1.89e-02  4.58e+00  6.48e-06  1.48e-01  6.50e-01  
  5  +5.0042e-01  +1.8280e+00  1.33e+00  8.89e-03  2.18e+00  5.20e-05  7.19e-02  8.62e-01  
  6  +5.0000e-01  +1.1088e+00  6.09e-01  2.90e-03  7.31e-01  1.15e-04  1.09e-02  8.79e-01  
  7  +4.9740e-01  +1.0951e+00  5.98e-01  3.65e-04  9.32e-02  1.21e-03  9.52e-04  9.14e-01  
  8  +4.9304e-01  +1.0484e+00  5.55e-01  1.85e-04  4.72e-02  1.98e-03  4.79e-04  5.39e-01  
  9  +4.8930e-01  +9.7994e-01  4.91e-01  1.45e-04  3.71e-02  1.17e-03  3.80e-04  5.14e-01  
 10  +4.8391e-01  +9.3548e-01  4.52e-01  1.23e-04  3.13e-02  9.66e-04  3.25e-04  2.59e-01  
 11  +4.7286e-01  +8.4871e-01  3.76e-01  9.93e-05  2.52e-02  4.26e-04  2.72e-04  4.58e-01  
 12  +4.4074e-01  +6.5998e-01  2.19e-01  4.89e-05  1.23e-02  1.67e-04  1.46e-04  5.81e-01  
 13  +4.2421e-01  +5.8224e-01  1.58e-01  3.44e-05  8.62e-03  9.62e-05  1.09e-04  3.46e-01  
 14  +4.0173e-01  +4.8038e-01  7.87e-02  1.65e-05  4.10e-03  3.25e-05  5.70e-05  6.00e-01  
 15  +3.9582e-01  +4.5504e-01  5.92e-02  1.21e-05  3.02e-03  1.96e-05  4.32e-05  4.26e-01  
 16  +3.8776e-01  +4.2046e-01  3.27e-02  6.52e-06  1.62e-03  5.26e-06  2.41e-05  8.17e-01  
 17  +3.8435e-01  +4.0543e-01  2.11e-02  4.17e-06  1.04e-03  1.40e-06  1.57e-05  9.90e-01  
 18  +3.7977e-01  +3.8808e-01  8.31e-03  1.64e-06  4.07e-04  5.42e-07  6.38e-06  6.40e-01  
 19  +3.7699e-01  +3.7750e-01  5.18e-04  1.02e-07  2.54e-05  3.35e-08  4.06e-07  9.38e-01  
 20  +3.7680e-01  +3.7681e-01  5.20e-06  1.02e-09  2.55e-07  3.36e-10  4.08e-09  9.90e-01  
 21  +3.7680e-01  +3.7680e-01  5.21e-08  1.03e-11  2.55e-09  3.36e-12  4.08e-11  9.90e-01  
 22  +3.7680e-01  +3.7680e-01  5.21e-10  1.03e-13  2.55e-11  3.36e-14  4.09e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 238.8907ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:09 PM: Optimal value: 3.768e-01
(CVXPY) Oct 06 04:31:09 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:31:09 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 29, Objective: 0.3768
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:09 PM: Your problem has 5311 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:09 PM: Finished problem compilation (took 7.811e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5311
  constraints   = 10311
  nnz(P)        = 0
  nnz(A)        = 86994
  cones (total) = 1
    : Nonnegative = 1,  numel = 10311

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7620e-01  +1.0998e+03  1.10e+03  4.47e-01  8.10e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2784e-01  +1.1754e+02  1.17e+02  1.75e-01  4.02e+01  1.82e-02  2.83e-01  9.75e-01  
  3  +5.0805e-01  +3.0417e+01  2.99e+01  1.20e-01  2.81e+01  5.24e-05  2.51e-01  3.96e-01  
  4  +5.0108e-01  +3.2430e+00  2.74e+00  1.89e-02  4.58e+00  6.48e-06  1.48e-01  6.51e-01  
  5  +5.0042e-01  +1.8363e+00  1.34e+00  8.94e-03  2.20e+00  5.28e-05  7.09e-02  8.68e-01  
  6  +4.9998e-01  +1.1013e+00  6.01e-01  2.76e-03  6.96e-01  1.22e-04  1.01e-02  8.89e-01  
  7  +4.9729e-01  +1.0874e+00  5.90e-01  3.48e-04  8.90e-02  1.24e-03  9.08e-04  9.11e-01  
  8  +4.9363e-01  +1.0499e+00  5.56e-01  1.96e-04  5.01e-02  1.88e-03  5.08e-04  4.82e-01  
  9  +4.8962e-01  +9.8706e-01  4.97e-01  1.48e-04  3.79e-02  1.33e-03  3.88e-04  4.93e-01  
 10  +4.8364e-01  +9.3672e-01  4.53e-01  1.23e-04  3.12e-02  1.06e-03  3.25e-04  2.97e-01  
 11  +4.7513e-01  +8.7248e-01  3.97e-01  1.04e-04  2.64e-02  6.76e-04  2.83e-04  3.09e-01  
 12  +4.4647e-01  +6.9223e-01  2.46e-01  5.75e-05  1.45e-02  1.42e-04  1.70e-04  6.69e-01  
 13  +4.2980e-01  +6.1058e-01  1.81e-01  4.07e-05  1.02e-02  8.92e-05  1.27e-04  3.04e-01  
 14  +4.0843e-01  +5.1197e-01  1.04e-01  2.22e-05  5.54e-03  2.61e-05  7.52e-05  6.58e-01  
 15  +4.0166e-01  +4.8213e-01  8.05e-02  1.70e-05  4.22e-03  1.86e-05  5.90e-05  2.94e-01  
 16  +3.9485e-01  +4.5256e-01  5.77e-02  1.20e-05  2.97e-03  1.25e-05  4.29e-05  3.28e-01  
 17  +3.8682e-01  +4.1752e-01  3.07e-02  6.18e-06  1.54e-03  4.48e-06  2.31e-05  7.16e-01  
 18  +3.8368e-01  +4.0322e-01  1.95e-02  3.89e-06  9.66e-04  1.24e-06  1.47e-05  9.90e-01  
 19  +3.7883e-01  +3.8477e-01  5.95e-03  1.18e-06  2.93e-04  3.70e-07  4.62e-06  7.30e-01  
 20  +3.7679e-01  +3.7705e-01  2.61e-04  5.16e-08  1.28e-05  1.60e-08  2.06e-07  9.58e-01  
 21  +3.7670e-01  +3.7670e-01  2.62e-06  5.17e-10  1.28e-07  1.61e-10  2.06e-09  9.90e-01  
 22  +3.7670e-01  +3.7670e-01  2.62e-08  5.17e-12  1.28e-09  1.61e-12  2.06e-11  9.90e-01  
 23  +3.7670e-01  +3.7670e-01  2.62e-10  5.17e-14  1.28e-11  1.61e-14  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 255.4513ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:10 PM: Optimal value: 3.767e-01
(CVXPY) Oct 06 04:31:10 PM: Compilation took 7.811e-02 seconds
(CVXPY) Oct 06 04:31:10 PM: Solver (including time spent in interface) took 2.678e-01 seconds
Iteration: 30, Objective: 0.3767
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:10 PM: Your problem has 5321 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:10 PM: Finished problem compilation (took 7.814e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5321
  constraints   = 10321
  nnz(P)        = 0
  nnz(A)        = 87302
  cones (total) = 1
    : Nonnegative = 1,  numel = 10321

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7611e-01  +1.1000e+03  1.10e+03  4.48e-01  8.10e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2781e-01  +1.1751e+02  1.17e+02  1.75e-01  4.01e+01  1.82e-02  2.83e-01  9.76e-01  
  3  +5.0805e-01  +3.0414e+01  2.99e+01  1.20e-01  2.80e+01  5.25e-05  2.51e-01  3.97e-01  
  4  +5.0109e-01  +3.2457e+00  2.74e+00  1.90e-02  4.58e+00  6.49e-06  1.47e-01  6.51e-01  
  5  +5.0043e-01  +1.8670e+00  1.37e+00  9.14e-03  2.24e+00  5.31e-05  7.11e-02  8.62e-01  
  6  +4.9998e-01  +1.1043e+00  6.04e-01  2.76e-03  6.95e-01  1.23e-04  9.97e-03  8.91e-01  
  7  +4.9731e-01  +1.0902e+00  5.93e-01  3.52e-04  8.99e-02  1.23e-03  9.16e-04  9.09e-01  
  8  +4.9335e-01  +1.0497e+00  5.56e-01  1.90e-04  4.84e-02  1.92e-03  4.91e-04  5.10e-01  
  9  +4.8842e-01  +9.7426e-01  4.86e-01  1.40e-04  3.56e-02  1.17e-03  3.65e-04  5.68e-01  
 10  +4.8094e-01  +9.1738e-01  4.36e-01  1.14e-04  2.90e-02  9.06e-04  3.04e-04  3.05e-01  
 11  +4.6273e-01  +7.9258e-01  3.30e-01  8.20e-05  2.07e-02  3.30e-04  2.31e-04  5.13e-01  
 12  +4.3297e-01  +6.2823e-01  1.95e-01  4.40e-05  1.10e-02  1.40e-04  1.36e-04  4.83e-01  
 13  +4.1757e-01  +5.5688e-01  1.39e-01  3.05e-05  7.62e-03  6.69e-05  9.97e-05  4.67e-01  
 14  +3.9929e-01  +4.7365e-01  7.44e-02  1.57e-05  3.91e-03  2.77e-05  5.53e-05  5.43e-01  
 15  +3.9404e-01  +4.5055e-01  5.65e-02  1.17e-05  2.91e-03  1.75e-05  4.22e-05  3.99e-01  
 16  +3.8668e-01  +4.1876e-01  3.21e-02  6.49e-06  1.61e-03  7.02e-06  2.43e-05  6.44e-01  
 17  +3.8349e-01  +4.0407e-01  2.06e-02  4.11e-06  1.02e-03  1.42e-06  1.56e-05  9.90e-01  
 18  +3.7877e-01  +3.8602e-01  7.25e-03  1.44e-06  3.58e-04  4.87e-07  5.67e-06  6.87e-01  
 19  +3.7634e-01  +3.7674e-01  3.98e-04  7.89e-08  1.96e-05  2.62e-08  3.17e-07  9.47e-01  
 20  +3.7620e-01  +3.7621e-01  4.00e-06  7.92e-10  1.97e-07  2.64e-10  3.19e-09  9.90e-01  
 21  +3.7620e-01  +3.7620e-01  4.00e-08  7.93e-12  1.97e-09  2.64e-12  3.19e-11  9.90e-01  
 22  +3.7620e-01  +3.7620e-01  4.00e-10  7.93e-14  1.97e-11  2.64e-14  3.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 243.5902ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:10 PM: Optimal value: 3.762e-01
(CVXPY) Oct 06 04:31:10 PM: Compilation took 7.814e-02 seconds
(CVXPY) Oct 06 04:31:10 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 31, Objective: 0.3762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:11 PM: Your problem has 5329 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:11 PM: Finished problem compilation (took 7.813e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5329
  constraints   = 10329
  nnz(P)        = 0
  nnz(A)        = 87584
  cones (total) = 1
    : Nonnegative = 1,  numel = 10329

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7609e-01  +1.1000e+03  1.10e+03  4.48e-01  8.09e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2779e-01  +1.1749e+02  1.17e+02  1.75e-01  4.01e+01  1.82e-02  2.83e-01  9.76e-01  
  3  +5.0804e-01  +3.0412e+01  2.99e+01  1.20e-01  2.80e+01  5.25e-05  2.51e-01  3.98e-01  
  4  +5.0109e-01  +3.2460e+00  2.74e+00  1.90e-02  4.58e+00  6.50e-06  1.47e-01  6.51e-01  
  5  +5.0044e-01  +1.8790e+00  1.38e+00  9.22e-03  2.26e+00  5.31e-05  7.13e-02  8.58e-01  
  6  +4.9998e-01  +1.1065e+00  6.06e-01  2.77e-03  6.98e-01  1.22e-04  1.00e-02  8.90e-01  
  7  +4.9732e-01  +1.0928e+00  5.95e-01  3.53e-04  9.02e-02  1.23e-03  9.19e-04  9.09e-01  
  8  +4.9300e-01  +1.0491e+00  5.56e-01  1.82e-04  4.65e-02  1.98e-03  4.72e-04  5.33e-01  
  9  +4.8751e-01  +9.7395e-01  4.86e-01  1.36e-04  3.47e-02  1.29e-03  3.56e-04  5.17e-01  
 10  +4.7881e-01  +9.0845e-01  4.30e-01  1.09e-04  2.77e-02  9.77e-04  2.93e-04  3.08e-01  
 11  +4.6261e-01  +7.9411e-01  3.31e-01  8.53e-05  2.15e-02  2.96e-04  2.41e-04  4.93e-01  
 12  +4.3820e-01  +6.5896e-01  2.21e-01  5.13e-05  1.29e-02  1.49e-04  1.56e-04  4.46e-01  
 13  +4.2159e-01  +5.7876e-01  1.57e-01  3.51e-05  8.77e-03  5.87e-05  1.13e-04  5.44e-01  
 14  +4.0044e-01  +4.7981e-01  7.94e-02  1.69e-05  4.20e-03  2.04e-05  5.92e-05  6.08e-01  
 15  +3.9448e-01  +4.5297e-01  5.85e-02  1.22e-05  3.03e-03  1.20e-05  4.39e-05  4.58e-01  
 16  +3.8825e-01  +4.2550e-01  3.73e-02  7.59e-06  1.89e-03  5.64e-06  2.81e-05  6.15e-01  
 17  +3.8268e-01  +4.0134e-01  1.87e-02  3.75e-06  9.31e-04  1.17e-06  1.43e-05  9.90e-01  
 18  +3.7815e-01  +3.8361e-01  5.46e-03  1.09e-06  2.71e-04  3.35e-07  4.32e-06  7.53e-01  
 19  +3.7643e-01  +3.7703e-01  6.06e-04  1.21e-07  2.99e-05  3.16e-08  4.83e-07  9.90e-01  
 20  +3.7620e-01  +3.7621e-01  6.29e-06  1.25e-09  3.10e-07  3.27e-10  5.02e-09  9.90e-01  
 21  +3.7620e-01  +3.7620e-01  6.30e-08  1.25e-11  3.11e-09  3.28e-12  5.03e-11  9.90e-01  
 22  +3.7620e-01  +3.7620e-01  6.34e-10  1.26e-13  3.13e-11  3.31e-14  5.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 243.0805ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:11 PM: Optimal value: 3.762e-01
(CVXPY) Oct 06 04:31:11 PM: Compilation took 7.813e-02 seconds
(CVXPY) Oct 06 04:31:11 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 32, Objective: 0.3762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:11 PM: Your problem has 5339 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:11 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5339
  constraints   = 10339
  nnz(P)        = 0
  nnz(A)        = 87836
  cones (total) = 1
    : Nonnegative = 1,  numel = 10339

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7607e-01  +1.0999e+03  1.10e+03  4.48e-01  8.08e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2777e-01  +1.1744e+02  1.17e+02  1.75e-01  4.00e+01  1.82e-02  2.83e-01  9.76e-01  
  3  +5.0804e-01  +3.0396e+01  2.99e+01  1.20e-01  2.79e+01  5.26e-05  2.51e-01  3.98e-01  
  4  +5.0109e-01  +3.2448e+00  2.74e+00  1.90e-02  4.58e+00  6.50e-06  1.47e-01  6.52e-01  
  5  +5.0044e-01  +1.8919e+00  1.39e+00  9.30e-03  2.28e+00  5.34e-05  7.10e-02  8.58e-01  
  6  +4.9999e-01  +1.1278e+00  6.28e-01  2.85e-03  7.16e-01  1.23e-04  1.02e-02  8.88e-01  
  7  +4.9736e-01  +1.1130e+00  6.16e-01  3.66e-04  9.35e-02  1.21e-03  9.54e-04  9.08e-01  
  8  +4.9331e-01  +1.0687e+00  5.75e-01  1.95e-04  4.97e-02  1.91e-03  5.05e-04  5.15e-01  
  9  +4.8868e-01  +1.0011e+00  5.12e-01  1.48e-04  3.78e-02  1.41e-03  3.88e-04  4.51e-01  
 10  +4.8247e-01  +9.4815e-01  4.66e-01  1.24e-04  3.15e-02  1.13e-03  3.30e-04  2.63e-01  
 11  +4.7551e-01  +8.9162e-01  4.16e-01  1.10e-04  2.79e-02  7.40e-04  2.98e-04  2.67e-01  
 12  +4.5033e-01  +7.2262e-01  2.72e-01  6.62e-05  1.66e-02  1.23e-04  1.94e-04  6.82e-01  
 13  +4.2560e-01  +5.9628e-01  1.71e-01  3.86e-05  9.64e-03  6.06e-05  1.23e-04  4.30e-01  
 14  +4.0463e-01  +4.9905e-01  9.44e-02  2.04e-05  5.07e-03  2.47e-05  7.02e-05  5.39e-01  
 15  +3.9966e-01  +4.7700e-01  7.73e-02  1.64e-05  4.09e-03  1.85e-05  5.79e-05  2.62e-01  
 16  +3.9363e-01  +4.5066e-01  5.70e-02  1.19e-05  2.97e-03  1.28e-05  4.32e-05  3.10e-01  
 17  +3.8677e-01  +4.2023e-01  3.35e-02  6.81e-06  1.69e-03  4.65e-06  2.54e-05  7.37e-01  
 18  +3.8326e-01  +4.0454e-01  2.13e-02  4.28e-06  1.06e-03  1.34e-06  1.63e-05  9.90e-01  
 19  +3.7861e-01  +3.8661e-01  8.00e-03  1.60e-06  3.97e-04  4.95e-07  6.31e-06  6.61e-01  
 20  +3.7592e-01  +3.7625e-01  3.31e-04  6.61e-08  1.64e-05  2.00e-08  2.67e-07  9.61e-01  
 21  +3.7580e-01  +3.7580e-01  3.34e-06  6.66e-10  1.65e-07  2.02e-10  2.69e-09  9.90e-01  
 22  +3.7580e-01  +3.7580e-01  3.34e-08  6.66e-12  1.65e-09  2.02e-12  2.69e-11  9.90e-01  
 23  +3.7580e-01  +3.7580e-01  3.34e-10  6.66e-14  1.65e-11  2.02e-14  2.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 260.3737ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:12 PM: Optimal value: 3.758e-01
(CVXPY) Oct 06 04:31:12 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:31:12 PM: Solver (including time spent in interface) took 2.813e-01 seconds
Iteration: 33, Objective: 0.3758
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:12 PM: Your problem has 5349 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:12 PM: Finished problem compilation (took 9.375e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5349
  constraints   = 10349
  nnz(P)        = 0
  nnz(A)        = 88078
  cones (total) = 1
    : Nonnegative = 1,  numel = 10349

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7599e-01  +1.1000e+03  1.10e+03  4.48e-01  8.08e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2775e-01  +1.1741e+02  1.17e+02  1.75e-01  3.99e+01  1.82e-02  2.83e-01  9.77e-01  
  3  +5.0804e-01  +3.0390e+01  2.99e+01  1.20e-01  2.79e+01  5.26e-05  2.50e-01  3.99e-01  
  4  +5.0109e-01  +3.2453e+00  2.74e+00  1.90e-02  4.58e+00  6.51e-06  1.47e-01  6.52e-01  
  5  +5.0045e-01  +1.9126e+00  1.41e+00  9.43e-03  2.31e+00  5.38e-05  7.08e-02  8.57e-01  
  6  +4.9997e-01  +1.1168e+00  6.17e-01  2.73e-03  6.87e-01  1.27e-04  9.64e-03  8.96e-01  
  7  +4.9732e-01  +1.1015e+00  6.04e-01  3.55e-04  9.07e-02  1.22e-03  9.26e-04  9.06e-01  
  8  +4.9373e-01  +1.0631e+00  5.69e-01  2.03e-04  5.19e-02  1.80e-03  5.27e-04  4.75e-01  
  9  +4.8953e-01  +1.0016e+00  5.12e-01  1.53e-04  3.90e-02  1.35e-03  4.00e-04  4.77e-01  
 10  +4.8395e-01  +9.4915e-01  4.65e-01  1.30e-04  3.30e-02  9.49e-04  3.45e-04  3.28e-01  
 11  +4.7771e-01  +8.9818e-01  4.20e-01  1.16e-04  2.94e-02  6.01e-04  3.14e-04  2.97e-01  
 12  +4.5848e-01  +7.6786e-01  3.09e-01  7.99e-05  2.01e-02  9.51e-05  2.29e-04  6.96e-01  
 13  +4.2841e-01  +6.0913e-01  1.81e-01  4.09e-05  1.02e-02  4.54e-05  1.28e-04  4.83e-01  
 14  +4.1227e-01  +5.3478e-01  1.23e-01  2.69e-05  6.69e-03  2.51e-05  8.98e-05  4.05e-01  
 15  +3.9769e-01  +4.6956e-01  7.19e-02  1.53e-05  3.79e-03  1.25e-05  5.43e-05  4.84e-01  
 16  +3.9460e-01  +4.5576e-01  6.12e-02  1.28e-05  3.18e-03  9.30e-06  4.62e-05  3.27e-01  
 17  +3.8531e-01  +4.1512e-01  2.98e-02  6.06e-06  1.50e-03  2.30e-06  2.29e-05  9.24e-01  
 18  +3.8224e-01  +4.0171e-01  1.95e-02  3.93e-06  9.76e-04  1.12e-06  1.51e-05  9.90e-01  
 19  +3.7798e-01  +3.8531e-01  7.33e-03  1.47e-06  3.66e-04  4.18e-07  5.85e-06  6.69e-01  
 20  +3.7548e-01  +3.7570e-01  2.24e-04  4.50e-08  1.11e-05  1.25e-08  1.82e-07  9.72e-01  
 21  +3.7540e-01  +3.7540e-01  2.24e-06  4.50e-10  1.12e-07  1.25e-10  1.83e-09  9.90e-01  
 22  +3.7540e-01  +3.7540e-01  2.24e-08  4.50e-12  1.12e-09  1.25e-12  1.83e-11  9.90e-01  
 23  +3.7540e-01  +3.7540e-01  2.25e-10  4.51e-14  1.12e-11  1.26e-14  1.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 254.7621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:12 PM: Optimal value: 3.754e-01
(CVXPY) Oct 06 04:31:12 PM: Compilation took 9.375e-02 seconds
(CVXPY) Oct 06 04:31:12 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 34, Objective: 0.3754
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:12 PM: Your problem has 5359 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:12 PM: Finished problem compilation (took 7.805e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5359
  constraints   = 10359
  nnz(P)        = 0
  nnz(A)        = 88365
  cones (total) = 1
    : Nonnegative = 1,  numel = 10359

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7595e-01  +1.1000e+03  1.10e+03  4.48e-01  8.07e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2772e-01  +1.1735e+02  1.17e+02  1.75e-01  3.99e+01  1.82e-02  2.83e-01  9.77e-01  
  3  +5.0803e-01  +3.0377e+01  2.99e+01  1.20e-01  2.79e+01  5.27e-05  2.50e-01  4.00e-01  
  4  +5.0108e-01  +3.2445e+00  2.74e+00  1.90e-02  4.57e+00  6.51e-06  1.46e-01  6.53e-01  
  5  +5.0046e-01  +1.9278e+00  1.43e+00  9.53e-03  2.33e+00  5.42e-05  7.02e-02  8.58e-01  
  6  +4.9998e-01  +1.1345e+00  6.34e-01  2.78e-03  6.98e-01  1.29e-04  9.70e-03  8.93e-01  
  7  +4.9735e-01  +1.1182e+00  6.21e-01  3.66e-04  9.35e-02  1.20e-03  9.54e-04  9.03e-01  
  8  +4.9335e-01  +1.0728e+00  5.79e-01  1.98e-04  5.06e-02  1.85e-03  5.14e-04  5.09e-01  
  9  +4.8914e-01  +1.0054e+00  5.16e-01  1.54e-04  3.91e-02  1.25e-03  4.01e-04  4.80e-01  
 10  +4.8408e-01  +9.5505e-01  4.71e-01  1.33e-04  3.39e-02  8.41e-04  3.53e-04  3.28e-01  
 11  +4.7780e-01  +9.0371e-01  4.26e-01  1.18e-04  2.99e-02  5.47e-04  3.19e-04  2.96e-01  
 12  +4.5221e-01  +7.3087e-01  2.79e-01  6.94e-05  1.74e-02  6.13e-06  2.02e-04  8.35e-01  
 13  +4.2563e-01  +5.9706e-01  1.71e-01  3.90e-05  9.74e-03  3.79e-06  1.24e-04  4.41e-01  
 14  +4.0813e-01  +5.1711e-01  1.09e-01  2.39e-05  5.94e-03  2.81e-06  8.11e-05  4.49e-01  
 15  +4.0121e-01  +4.8656e-01  8.53e-02  1.84e-05  4.56e-03  2.45e-06  6.42e-05  2.96e-01  
 16  +3.9495e-01  +4.5896e-01  6.40e-02  1.35e-05  3.34e-03  2.30e-06  4.84e-05  4.55e-01  
 17  +3.8730e-01  +4.2507e-01  3.78e-02  7.74e-06  1.92e-03  1.95e-06  2.88e-05  8.74e-01  
 18  +3.7933e-01  +3.9189e-01  1.26e-02  2.55e-06  6.31e-04  7.02e-07  9.99e-06  9.90e-01  
 19  +3.7523e-01  +3.7586e-01  6.37e-04  1.29e-07  3.19e-05  3.38e-08  5.23e-07  9.73e-01  
 20  +3.7500e-01  +3.7501e-01  6.47e-06  1.31e-09  3.24e-07  3.44e-10  5.33e-09  9.90e-01  
 21  +3.7500e-01  +3.7500e-01  6.48e-08  1.31e-11  3.24e-09  3.44e-12  5.33e-11  9.90e-01  
 22  +3.7500e-01  +3.7500e-01  6.49e-10  1.31e-13  3.25e-11  3.45e-14  5.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 233.1171ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:13 PM: Optimal value: 3.750e-01
(CVXPY) Oct 06 04:31:13 PM: Compilation took 7.805e-02 seconds
(CVXPY) Oct 06 04:31:13 PM: Solver (including time spent in interface) took 2.501e-01 seconds
Iteration: 35, Objective: 0.3750
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:13 PM: Your problem has 5367 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:13 PM: Finished problem compilation (took 9.376e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5367
  constraints   = 10367
  nnz(P)        = 0
  nnz(A)        = 88585
  cones (total) = 1
    : Nonnegative = 1,  numel = 10367

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0014e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7585e-01  +1.1001e+03  1.10e+03  4.48e-01  8.07e+01  3.76e-03  5.86e-01  5.75e-01  
  2  +5.2764e-01  +1.1722e+02  1.17e+02  1.74e-01  3.98e+01  1.82e-02  2.83e-01  9.78e-01  
  3  +5.0802e-01  +3.0347e+01  2.98e+01  1.20e-01  2.78e+01  5.28e-05  2.50e-01  4.03e-01  
  4  +5.0108e-01  +3.2439e+00  2.74e+00  1.90e-02  4.57e+00  6.52e-06  1.46e-01  6.54e-01  
  5  +5.0047e-01  +1.9577e+00  1.46e+00  9.69e-03  2.37e+00  5.55e-05  6.88e-02  8.64e-01  
  6  +4.9997e-01  +1.1572e+00  6.57e-01  2.74e-03  6.91e-01  1.36e-04  9.29e-03  8.94e-01  
  7  +4.9732e-01  +1.1395e+00  6.42e-01  3.71e-04  9.47e-02  1.21e-03  9.62e-04  8.98e-01  
  8  +4.9367e-01  +1.0977e+00  6.04e-01  2.11e-04  5.39e-02  1.79e-03  5.45e-04  4.77e-01  
  9  +4.8924e-01  +1.0318e+00  5.43e-01  1.61e-04  4.09e-02  1.42e-03  4.18e-04  4.24e-01  
 10  +4.8064e-01  +9.4314e-01  4.62e-01  1.26e-04  3.20e-02  7.96e-04  3.36e-04  4.52e-01  
 11  +4.7433e-01  +8.9537e-01  4.21e-01  1.13e-04  2.85e-02  5.50e-04  3.06e-04  2.53e-01  
 12  +4.5091e-01  +7.3465e-01  2.84e-01  7.27e-05  1.82e-02  5.33e-06  2.13e-04  7.82e-01  
 13  +4.2225e-01  +5.8649e-01  1.64e-01  3.76e-05  9.38e-03  3.27e-06  1.21e-04  4.93e-01  
 14  +4.0367e-01  +5.0097e-01  9.73e-02  2.14e-05  5.31e-03  2.32e-06  7.39e-05  4.85e-01  
 15  +4.0002e-01  +4.8485e-01  8.48e-02  1.84e-05  4.56e-03  2.28e-06  6.45e-05  2.18e-01  
 16  +3.9402e-01  +4.5843e-01  6.44e-02  1.37e-05  3.39e-03  2.06e-06  4.93e-05  3.78e-01  
 17  +3.8489e-01  +4.1838e-01  3.35e-02  6.93e-06  1.72e-03  1.49e-06  2.62e-05  7.73e-01  
 18  +3.7845e-01  +3.9108e-01  1.26e-02  2.57e-06  6.37e-04  6.72e-07  1.01e-05  9.56e-01  
 19  +3.7480e-01  +3.7682e-01  2.02e-03  4.08e-07  1.01e-04  1.06e-07  1.66e-06  8.65e-01  
 20  +3.7412e-01  +3.7416e-01  4.60e-05  9.31e-09  2.31e-06  2.33e-09  3.80e-08  9.90e-01  
 21  +3.7410e-01  +3.7410e-01  4.60e-07  9.31e-11  2.31e-08  2.33e-11  3.81e-10  9.90e-01  
 22  +3.7410e-01  +3.7410e-01  4.61e-09  9.33e-13  2.31e-10  2.34e-13  3.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.1114ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:13 PM: Optimal value: 3.741e-01
(CVXPY) Oct 06 04:31:13 PM: Compilation took 9.376e-02 seconds
(CVXPY) Oct 06 04:31:13 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 36, Objective: 0.3741
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:14 PM: Your problem has 5377 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:14 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5377
  constraints   = 10377
  nnz(P)        = 0
  nnz(A)        = 88759
  cones (total) = 1
    : Nonnegative = 1,  numel = 10377

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7578e-01  +1.1001e+03  1.10e+03  4.49e-01  8.06e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2758e-01  +1.1710e+02  1.17e+02  1.74e-01  3.97e+01  1.83e-02  2.82e-01  9.79e-01  
  3  +5.0801e-01  +3.0323e+01  2.98e+01  1.19e-01  2.77e+01  5.29e-05  2.49e-01  4.05e-01  
  4  +5.0108e-01  +3.2415e+00  2.74e+00  1.90e-02  4.57e+00  6.53e-06  1.45e-01  6.55e-01  
  5  +5.0047e-01  +1.9722e+00  1.47e+00  9.76e-03  2.39e+00  5.69e-05  6.69e-02  8.75e-01  
  6  +4.9997e-01  +1.2014e+00  7.01e-01  2.80e-03  7.06e-01  1.45e-04  9.23e-03  8.87e-01  
  7  +4.9729e-01  +1.1813e+00  6.84e-01  3.88e-04  9.91e-02  1.22e-03  1.00e-03  8.92e-01  
  8  +4.9285e-01  +1.1227e+00  6.30e-01  2.02e-04  5.15e-02  1.89e-03  5.20e-04  5.35e-01  
  9  +4.8557e-01  +1.0094e+00  5.24e-01  1.43e-04  3.63e-02  1.16e-03  3.74e-04  5.39e-01  
 10  +4.8072e-01  +9.6832e-01  4.88e-01  1.30e-04  3.29e-02  9.63e-04  3.44e-04  1.57e-01  
 11  +4.7519e-01  +9.2621e-01  4.51e-01  1.17e-04  2.97e-02  7.88e-04  3.16e-04  1.56e-01  
 12  +4.4547e-01  +7.1416e-01  2.69e-01  6.52e-05  1.63e-02  6.42e-05  1.93e-04  7.25e-01  
 13  +4.2295e-01  +5.9830e-01  1.75e-01  4.03e-05  1.00e-02  3.30e-05  1.29e-04  4.11e-01  
 14  +4.0520e-01  +5.1384e-01  1.09e-01  2.40e-05  5.97e-03  1.65e-05  8.25e-05  4.70e-01  
 15  +3.9871e-01  +4.8414e-01  8.54e-02  1.85e-05  4.60e-03  1.20e-05  6.55e-05  2.97e-01  
 16  +3.9345e-01  +4.6003e-01  6.66e-02  1.42e-05  3.52e-03  8.18e-06  5.13e-05  3.85e-01  
 17  +3.8307e-01  +4.1334e-01  3.03e-02  6.29e-06  1.56e-03  2.38e-06  2.40e-05  8.50e-01  
 18  +3.7684e-01  +3.8718e-01  1.03e-02  2.12e-06  5.26e-04  7.12e-07  8.46e-06  7.96e-01  
 19  +3.7385e-01  +3.7514e-01  1.29e-03  2.62e-07  6.49e-05  7.31e-08  1.07e-06  9.55e-01  
 20  +3.7341e-01  +3.7342e-01  1.78e-05  3.63e-09  8.99e-07  9.69e-10  1.49e-08  9.90e-01  
 21  +3.7340e-01  +3.7340e-01  1.79e-07  3.64e-11  9.01e-09  9.71e-12  1.50e-10  9.90e-01  
 22  +3.7340e-01  +3.7340e-01  1.79e-09  3.65e-13  9.03e-11  9.76e-14  1.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.9217ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:14 PM: Optimal value: 3.734e-01
(CVXPY) Oct 06 04:31:14 PM: Compilation took 1.094e-01 seconds
(CVXPY) Oct 06 04:31:14 PM: Solver (including time spent in interface) took 2.506e-01 seconds
Iteration: 37, Objective: 0.3734
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:14 PM: Your problem has 5387 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:14 PM: Finished problem compilation (took 9.367e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5387
  constraints   = 10387
  nnz(P)        = 0
  nnz(A)        = 88919
  cones (total) = 1
    : Nonnegative = 1,  numel = 10387

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7574e-01  +1.1001e+03  1.10e+03  4.49e-01  8.05e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2756e-01  +1.1705e+02  1.17e+02  1.74e-01  3.96e+01  1.83e-02  2.82e-01  9.80e-01  
  3  +5.0801e-01  +3.0311e+01  2.98e+01  1.19e-01  2.77e+01  5.29e-05  2.49e-01  4.05e-01  
  4  +5.0108e-01  +3.2403e+00  2.74e+00  1.90e-02  4.57e+00  6.54e-06  1.45e-01  6.55e-01  
  5  +5.0048e-01  +1.9890e+00  1.49e+00  9.86e-03  2.41e+00  5.69e-05  6.69e-02  8.72e-01  
  6  +4.9998e-01  +1.2219e+00  7.22e-01  2.89e-03  7.29e-01  1.43e-04  9.53e-03  8.83e-01  
  7  +4.9736e-01  +1.2012e+00  7.04e-01  4.03e-04  1.03e-01  1.19e-03  1.04e-03  8.92e-01  
  8  +4.9256e-01  +1.1352e+00  6.43e-01  1.99e-04  5.07e-02  1.93e-03  5.12e-04  5.62e-01  
  9  +4.8358e-01  +9.8787e-01  5.04e-01  1.34e-04  3.41e-02  8.96e-04  3.54e-04  6.29e-01  
 10  +4.7976e-01  +9.5674e-01  4.77e-01  1.26e-04  3.20e-02  7.54e-04  3.36e-04  1.24e-01  
 11  +4.5561e-01  +7.7991e-01  3.24e-01  8.00e-05  2.01e-02  1.71e-04  2.29e-04  6.30e-01  
 12  +4.3275e-01  +6.5357e-01  2.21e-01  5.14e-05  1.29e-02  9.43e-05  1.59e-04  3.60e-01  
 13  +4.1313e-01  +5.5578e-01  1.43e-01  3.21e-05  7.97e-03  4.22e-05  1.07e-04  4.85e-01  
 14  +3.9691e-01  +4.7894e-01  8.20e-02  1.78e-05  4.43e-03  1.99e-05  6.36e-05  4.96e-01  
 15  +3.9197e-01  +4.5619e-01  6.42e-02  1.37e-05  3.40e-03  1.34e-05  5.01e-05  3.67e-01  
 16  +3.8239e-01  +4.1273e-01  3.03e-02  6.33e-06  1.57e-03  3.76e-06  2.42e-05  7.95e-01  
 17  +3.7613e-01  +3.8612e-01  9.99e-03  2.05e-06  5.08e-04  9.17e-07  8.23e-06  8.25e-01  
 18  +3.7322e-01  +3.7442e-01  1.20e-03  2.44e-07  6.05e-05  7.70e-08  1.00e-06  9.58e-01  
 19  +3.7281e-01  +3.7282e-01  1.78e-05  3.64e-09  9.02e-07  1.05e-09  1.50e-08  9.90e-01  
 20  +3.7280e-01  +3.7280e-01  1.79e-07  3.65e-11  9.02e-09  1.05e-11  1.51e-10  9.90e-01  
 21  +3.7280e-01  +3.7280e-01  1.79e-09  3.65e-13  9.02e-11  1.05e-13  1.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 232.2843ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:15 PM: Optimal value: 3.728e-01
(CVXPY) Oct 06 04:31:15 PM: Compilation took 9.367e-02 seconds
(CVXPY) Oct 06 04:31:15 PM: Solver (including time spent in interface) took 2.501e-01 seconds
Iteration: 38, Objective: 0.3728
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:15 PM: Your problem has 5397 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:15 PM: Finished problem compilation (took 9.374e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5397
  constraints   = 10397
  nnz(P)        = 0
  nnz(A)        = 89078
  cones (total) = 1
    : Nonnegative = 1,  numel = 10397

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7563e-01  +1.1002e+03  1.10e+03  4.49e-01  8.05e+01  3.76e-03  5.86e-01  5.75e-01  
  2  +5.2749e-01  +1.1692e+02  1.16e+02  1.74e-01  3.96e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0800e-01  +3.0288e+01  2.98e+01  1.19e-01  2.76e+01  5.31e-05  2.48e-01  4.08e-01  
  4  +5.0108e-01  +3.2402e+00  2.74e+00  1.90e-02  4.57e+00  6.55e-06  1.44e-01  6.56e-01  
  5  +5.0049e-01  +2.0210e+00  1.52e+00  1.00e-02  2.46e+00  5.80e-05  6.59e-02  8.74e-01  
  6  +4.9994e-01  +1.1878e+00  6.88e-01  2.56e-03  6.46e-01  1.55e-04  8.15e-03  9.01e-01  
  7  +4.9715e-01  +1.1675e+00  6.70e-01  3.62e-04  9.25e-02  1.25e-03  9.34e-04  8.86e-01  
  8  +4.9316e-01  +1.1215e+00  6.28e-01  2.05e-04  5.22e-02  1.85e-03  5.26e-04  4.86e-01  
  9  +4.8449e-01  +9.9790e-01  5.13e-01  1.35e-04  3.42e-02  1.12e-03  3.52e-04  6.14e-01  
 10  +4.7915e-01  +9.5645e-01  4.77e-01  1.23e-04  3.13e-02  9.29e-04  3.28e-04  1.41e-01  
 11  +4.5311e-01  +7.6488e-01  3.12e-01  7.90e-05  1.98e-02  1.12e-04  2.28e-04  6.54e-01  
 12  +4.3230e-01  +6.5354e-01  2.21e-01  5.25e-05  1.31e-02  6.69e-05  1.63e-04  3.41e-01  
 13  +4.1321e-01  +5.5953e-01  1.46e-01  3.33e-05  8.29e-03  3.11e-05  1.11e-04  4.82e-01  
 14  +3.9725e-01  +4.8414e-01  8.69e-02  1.91e-05  4.74e-03  1.55e-05  6.82e-05  4.75e-01  
 15  +3.9191e-01  +4.5975e-01  6.78e-02  1.46e-05  3.63e-03  1.08e-05  5.35e-05  3.42e-01  
 16  +3.8753e-01  +4.3990e-01  5.24e-02  1.12e-05  2.77e-03  7.63e-06  4.18e-05  3.24e-01  
 17  +3.7777e-01  +3.9670e-01  1.89e-02  3.96e-06  9.79e-04  2.18e-06  1.57e-05  7.45e-01  
 18  +3.7438e-01  +3.8238e-01  8.00e-03  1.66e-06  4.10e-04  8.29e-07  6.75e-06  6.49e-01  
 19  +3.7212e-01  +3.7301e-01  8.92e-04  1.84e-07  4.55e-05  4.80e-08  7.64e-07  9.90e-01  
 20  +3.7180e-01  +3.7181e-01  9.59e-06  1.98e-09  4.89e-07  5.14e-10  8.24e-09  9.89e-01  
 21  +3.7180e-01  +3.7180e-01  9.60e-08  1.98e-11  4.89e-09  5.14e-12  8.24e-11  9.90e-01  
 22  +3.7180e-01  +3.7180e-01  9.60e-10  1.98e-13  4.89e-11  5.16e-14  8.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 246.2089ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:15 PM: Optimal value: 3.718e-01
(CVXPY) Oct 06 04:31:15 PM: Compilation took 9.374e-02 seconds
(CVXPY) Oct 06 04:31:15 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 39, Objective: 0.3718
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:15 PM: Your problem has 5407 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:16 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5407
  constraints   = 10407
  nnz(P)        = 0
  nnz(A)        = 89301
  cones (total) = 1
    : Nonnegative = 1,  numel = 10407

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.86e-01  1.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.7559e-01  +1.1002e+03  1.10e+03  4.49e-01  8.04e+01  3.76e-03  5.86e-01  5.75e-01  
  2  +5.2747e-01  +1.1689e+02  1.16e+02  1.74e-01  3.95e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0800e-01  +3.0280e+01  2.98e+01  1.19e-01  2.76e+01  5.31e-05  2.48e-01  4.08e-01  
  4  +5.0108e-01  +3.2409e+00  2.74e+00  1.90e-02  4.57e+00  6.55e-06  1.44e-01  6.57e-01  
  5  +5.0052e-01  +2.0854e+00  1.58e+00  1.05e-02  2.56e+00  5.63e-05  6.82e-02  8.45e-01  
  6  +4.9998e-01  +1.2142e+00  7.14e-01  2.87e-03  7.23e-01  1.39e-04  9.45e-03  8.85e-01  
  7  +4.9743e-01  +1.1955e+00  6.98e-01  4.05e-04  1.03e-01  1.15e-03  1.05e-03  8.90e-01  
  8  +4.9197e-01  +1.1289e+00  6.37e-01  1.83e-04  4.68e-02  2.05e-03  4.71e-04  5.98e-01  
  9  +4.8461e-01  +1.0287e+00  5.44e-01  1.46e-04  3.72e-02  1.32e-03  3.83e-04  3.81e-01  
 10  +4.7648e-01  +9.6237e-01  4.86e-01  1.24e-04  3.14e-02  1.06e-03  3.32e-04  2.02e-01  
 11  +4.6033e-01  +8.1721e-01  3.57e-01  9.97e-05  2.51e-02  9.11e-06  2.86e-04  6.69e-01  
 12  +4.3473e-01  +6.7141e-01  2.37e-01  5.72e-05  1.43e-02  6.12e-06  1.76e-04  4.24e-01  
 13  +4.0932e-01  +5.4240e-01  1.33e-01  3.02e-05  7.51e-03  3.57e-06  1.02e-04  5.17e-01  
 14  +3.9855e-01  +4.9230e-01  9.37e-02  2.07e-05  5.14e-03  2.81e-06  7.35e-05  3.86e-01  
 15  +3.9376e-01  +4.6986e-01  7.61e-02  1.65e-05  4.08e-03  2.78e-06  5.97e-05  4.18e-01  
 16  +3.8871e-01  +4.4714e-01  5.84e-02  1.25e-05  3.10e-03  2.25e-06  4.66e-05  3.15e-01  
 17  +3.7838e-01  +4.0102e-01  2.26e-02  4.75e-06  1.17e-03  1.05e-06  1.87e-05  8.25e-01  
 18  +3.7430e-01  +3.8395e-01  9.64e-03  2.01e-06  4.97e-04  4.51e-07  8.18e-06  6.27e-01  
 19  +3.7160e-01  +3.7273e-01  1.13e-03  2.34e-07  5.79e-05  5.41e-08  9.76e-07  9.86e-01  
 20  +3.7120e-01  +3.7122e-01  1.26e-05  2.61e-09  6.45e-07  6.00e-10  1.09e-08  9.90e-01  
 21  +3.7120e-01  +3.7120e-01  1.26e-07  2.61e-11  6.47e-09  6.02e-12  1.09e-10  9.90e-01  
 22  +3.7120e-01  +3.7120e-01  1.31e-09  2.71e-13  6.69e-11  6.24e-14  1.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 252.4406ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:16 PM: Optimal value: 3.712e-01
(CVXPY) Oct 06 04:31:16 PM: Compilation took 1.094e-01 seconds
(CVXPY) Oct 06 04:31:16 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 40, Objective: 0.3712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:16 PM: Your problem has 5417 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:16 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5417
  constraints   = 10417
  nnz(P)        = 0
  nnz(A)        = 89442
  cones (total) = 1
    : Nonnegative = 1,  numel = 10417

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.86e-01  1.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.7553e-01  +1.1003e+03  1.10e+03  4.49e-01  8.03e+01  3.76e-03  5.87e-01  5.75e-01  
  2  +5.2744e-01  +1.1684e+02  1.16e+02  1.74e-01  3.94e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0800e-01  +3.0269e+01  2.98e+01  1.19e-01  2.76e+01  5.32e-05  2.48e-01  4.09e-01  
  4  +5.0108e-01  +3.2404e+00  2.74e+00  1.90e-02  4.57e+00  6.55e-06  1.44e-01  6.57e-01  
  5  +5.0052e-01  +2.0965e+00  1.60e+00  1.05e-02  2.57e+00  5.66e-05  6.78e-02  8.47e-01  
  6  +4.9995e-01  +1.1642e+00  6.64e-01  2.55e-03  6.43e-01  1.47e-04  8.23e-03  9.01e-01  
  7  +4.9726e-01  +1.1466e+00  6.49e-01  3.61e-04  9.20e-02  1.21e-03  9.30e-04  8.88e-01  
  8  +4.9393e-01  +1.1117e+00  6.18e-01  2.18e-04  5.56e-02  1.72e-03  5.60e-04  4.42e-01  
  9  +4.8910e-01  +1.0433e+00  5.54e-01  1.63e-04  4.15e-02  1.34e-03  4.23e-04  4.59e-01  
 10  +4.8081e-01  +9.6835e-01  4.88e-01  1.32e-04  3.35e-02  9.23e-04  3.50e-04  3.52e-01  
 11  +4.5764e-01  +7.8876e-01  3.31e-01  8.81e-05  2.21e-02  8.70e-06  2.53e-04  7.61e-01  
 12  +4.3784e-01  +6.8181e-01  2.44e-01  5.98e-05  1.49e-02  6.41e-06  1.83e-04  3.28e-01  
 13  +4.1294e-01  +5.6007e-01  1.47e-01  3.38e-05  8.40e-03  5.07e-06  1.13e-04  6.65e-01  
 14  +3.9818e-01  +4.9086e-01  9.27e-02  2.05e-05  5.08e-03  3.38e-06  7.31e-05  4.78e-01  
 15  +3.9276e-01  +4.6598e-01  7.32e-02  1.59e-05  3.93e-03  2.96e-06  5.79e-05  4.00e-01  
 16  +3.8867e-01  +4.4770e-01  5.90e-02  1.27e-05  3.13e-03  2.47e-06  4.71e-05  2.76e-01  
 17  +3.7855e-01  +4.0263e-01  2.41e-02  5.05e-06  1.25e-03  1.15e-06  1.98e-05  8.21e-01  
 18  +3.7409e-01  +3.8403e-01  9.94e-03  2.07e-06  5.11e-04  4.77e-07  8.41e-06  6.18e-01  
 19  +3.7178e-01  +3.7425e-01  2.46e-03  5.11e-07  1.26e-04  1.20e-07  2.12e-06  9.90e-01  
 20  +3.7093e-01  +3.7100e-01  7.25e-05  1.50e-08  3.71e-06  3.51e-09  6.28e-08  9.73e-01  
 21  +3.7090e-01  +3.7090e-01  7.26e-07  1.50e-10  3.72e-08  3.52e-11  6.29e-10  9.90e-01  
 22  +3.7090e-01  +3.7090e-01  7.31e-09  1.52e-12  3.75e-10  3.55e-13  6.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 250.0331ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:16 PM: Optimal value: 3.709e-01
(CVXPY) Oct 06 04:31:16 PM: Compilation took 1.094e-01 seconds
(CVXPY) Oct 06 04:31:16 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 41, Objective: 0.3709
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:17 PM: Your problem has 5425 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:17 PM: Finished problem compilation (took 9.373e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5425
  constraints   = 10425
  nnz(P)        = 0
  nnz(A)        = 89607
  cones (total) = 1
    : Nonnegative = 1,  numel = 10425

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.86e-01  1.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.7554e-01  +1.1002e+03  1.10e+03  4.49e-01  8.03e+01  3.76e-03  5.86e-01  5.75e-01  
  2  +5.2741e-01  +1.1676e+02  1.16e+02  1.74e-01  3.94e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0799e-01  +3.0253e+01  2.97e+01  1.19e-01  2.75e+01  5.32e-05  2.48e-01  4.10e-01  
  4  +5.0108e-01  +3.2394e+00  2.74e+00  1.90e-02  4.56e+00  6.55e-06  1.44e-01  6.57e-01  
  5  +5.0053e-01  +2.1100e+00  1.61e+00  1.06e-02  2.60e+00  5.62e-05  6.81e-02  8.41e-01  
  6  +4.9995e-01  +1.1616e+00  6.62e-01  2.56e-03  6.45e-01  1.45e-04  8.28e-03  9.02e-01  
  7  +4.9730e-01  +1.1444e+00  6.47e-01  3.63e-04  9.25e-02  1.19e-03  9.36e-04  8.88e-01  
  8  +4.9409e-01  +1.1110e+00  6.17e-01  2.21e-04  5.64e-02  1.69e-03  5.69e-04  4.36e-01  
  9  +4.8932e-01  +1.0403e+00  5.51e-01  1.64e-04  4.16e-02  1.26e-03  4.25e-04  4.95e-01  
 10  +4.8059e-01  +9.6325e-01  4.83e-01  1.30e-04  3.30e-02  8.65e-04  3.45e-04  3.72e-01  
 11  +4.5834e-01  +7.9285e-01  3.35e-01  9.01e-05  2.26e-02  8.02e-06  2.59e-04  7.46e-01  
 12  +4.3841e-01  +6.8469e-01  2.46e-01  6.08e-05  1.52e-02  6.00e-06  1.85e-04  3.34e-01  
 13  +4.1659e-01  +5.7932e-01  1.63e-01  3.78e-05  9.39e-03  5.95e-06  1.25e-04  6.98e-01  
 14  +3.9931e-01  +4.9670e-01  9.74e-02  2.17e-05  5.37e-03  3.61e-06  7.69e-05  4.94e-01  
 15  +3.9148e-01  +4.6070e-01  6.92e-02  1.50e-05  3.71e-03  2.81e-06  5.51e-05  4.53e-01  
 16  +3.8816e-01  +4.4563e-01  5.75e-02  1.23e-05  3.05e-03  2.42e-06  4.60e-05  2.67e-01  
 17  +3.7878e-01  +4.0368e-01  2.49e-02  5.23e-06  1.29e-03  1.18e-06  2.05e-05  7.87e-01  
 18  +3.7407e-01  +3.8400e-01  9.93e-03  2.07e-06  5.11e-04  4.72e-07  8.41e-06  6.30e-01  
 19  +3.7179e-01  +3.7430e-01  2.50e-03  5.19e-07  1.28e-04  1.22e-07  2.15e-06  9.90e-01  
 20  +3.7093e-01  +3.7100e-01  7.44e-05  1.54e-08  3.81e-06  3.60e-09  6.45e-08  9.73e-01  
 21  +3.7090e-01  +3.7090e-01  7.46e-07  1.55e-10  3.82e-08  3.61e-11  6.47e-10  9.90e-01  
 22  +3.7090e-01  +3.7090e-01  7.51e-09  1.56e-12  3.85e-10  3.63e-13  6.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 260.9506ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:17 PM: Optimal value: 3.709e-01
(CVXPY) Oct 06 04:31:17 PM: Compilation took 9.373e-02 seconds
(CVXPY) Oct 06 04:31:17 PM: Solver (including time spent in interface) took 2.813e-01 seconds
Iteration: 42, Objective: 0.3709
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:31:17 PM: Your problem has 5430 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:31:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:31:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:31:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:31:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:31:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:31:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:31:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:31:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:31:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:31:17 PM: Finished problem compilation (took 1.094e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5430
  constraints   = 10430
  nnz(P)        = 0
  nnz(A)        = 89678
  cones (total) = 1
    : Nonnegative = 1,  numel = 10430

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +5.0015e+03  5.00e+03  9.86e-01  1.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.7554e-01  +1.1001e+03  1.10e+03  4.49e-01  8.03e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2742e-01  +1.1676e+02  1.16e+02  1.74e-01  3.93e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0799e-01  +3.0250e+01  2.97e+01  1.19e-01  2.75e+01  5.32e-05  2.48e-01  4.09e-01  
  4  +5.0108e-01  +3.2373e+00  2.74e+00  1.90e-02  4.56e+00  6.55e-06  1.44e-01  6.58e-01  
  5  +5.0053e-01  +2.1145e+00  1.61e+00  1.07e-02  2.60e+00  5.63e-05  6.81e-02  8.40e-01  
  6  +4.9995e-01  +1.1652e+00  6.65e-01  2.57e-03  6.47e-01  1.45e-04  8.31e-03  9.02e-01  
  7  +4.9731e-01  +1.1479e+00  6.51e-01  3.65e-04  9.31e-02  1.18e-03  9.42e-04  8.87e-01  
  8  +4.9422e-01  +1.1152e+00  6.21e-01  2.26e-04  5.76e-02  1.66e-03  5.81e-04  4.26e-01  
  9  +4.8949e-01  +1.0450e+00  5.56e-01  1.66e-04  4.22e-02  1.28e-03  4.30e-04  4.90e-01  
 10  +4.8026e-01  +9.6070e-01  4.80e-01  1.30e-04  3.28e-02  8.14e-04  3.44e-04  4.17e-01  
 11  +4.5878e-01  +7.9579e-01  3.37e-01  9.19e-05  2.31e-02  7.47e-06  2.64e-04  7.37e-01  
 12  +4.3819e-01  +6.8400e-01  2.46e-01  6.08e-05  1.52e-02  5.65e-06  1.86e-04  3.49e-01  
 13  +4.2334e-01  +6.1512e-01  1.92e-01  4.54e-05  1.13e-02  7.44e-06  1.47e-04  6.97e-01  
 14  +3.9653e-01  +4.8309e-01  8.66e-02  1.92e-05  4.75e-03  3.02e-06  6.88e-05  5.99e-01  
 15  +3.9225e-01  +4.6368e-01  7.14e-02  1.55e-05  3.84e-03  2.73e-06  5.68e-05  3.32e-01  
 16  +3.8899e-01  +4.4903e-01  6.00e-02  1.29e-05  3.20e-03  2.42e-06  4.80e-05  2.70e-01  
 17  +3.7850e-01  +4.0211e-01  2.36e-02  4.94e-06  1.22e-03  1.22e-06  1.94e-05  9.58e-01  
 18  +3.7430e-01  +3.8476e-01  1.05e-02  2.18e-06  5.39e-04  5.37e-07  8.86e-06  5.90e-01  
 19  +3.7201e-01  +3.7512e-01  3.11e-03  6.47e-07  1.60e-04  1.53e-07  2.68e-06  9.90e-01  
 20  +3.7094e-01  +3.7106e-01  1.18e-04  2.45e-08  6.06e-06  5.75e-09  1.03e-07  9.65e-01  
 21  +3.7090e-01  +3.7090e-01  1.18e-06  2.46e-10  6.08e-08  5.77e-11  1.03e-09  9.90e-01  
 22  +3.7090e-01  +3.7090e-01  1.18e-08  2.46e-12  6.09e-10  5.77e-13  1.03e-11  9.90e-01  
 23  +3.7090e-01  +3.7090e-01  1.20e-10  2.50e-14  6.18e-12  5.87e-15  1.05e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 264.3752ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:31:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:31:18 PM: Optimal value: 3.709e-01
(CVXPY) Oct 06 04:31:18 PM: Compilation took 1.094e-01 seconds
(CVXPY) Oct 06 04:31:18 PM: Solver (including time spent in interface) took 2.812e-01 seconds
FULL MODEL:
  Accruacy: 0.6002
  Our objective: 0.20040000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1514)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 1)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0004)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.0058)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0014)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0006)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 36.91512966156006
Best over terms:
  Our final objective: 0.15140000000000003
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15140000000000003
  Highest accruacy: 0.5757
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

