Command:
python test_script.py -s constant_subclass -d 4 -n 50000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15380000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.1538
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:59 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:59 PM: Finished problem compilation (took 1.600e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5398e+02  7.53e+02  1.44e-01  5.59e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1147e-01  +1.6830e+02  1.68e+02  1.31e-01  5.07e+01  1.84e-05  2.26e-01  5.78e-02  
  4  +5.0019e-01  +2.8842e+00  2.38e+00  7.13e-03  2.73e+00  1.59e-06  1.63e-01  8.87e-01  
  5  +5.0002e-01  +9.3501e-01  4.35e-01  1.31e-03  5.08e-01  8.77e-06  7.98e-02  9.90e-01  
  6  +5.0000e-01  +6.3006e-01  1.30e-01  3.91e-04  1.51e-01  9.60e-06  1.18e-02  8.69e-01  
  7  +4.9963e-01  +6.7196e-01  1.72e-01  1.47e-04  5.74e-02  3.01e-04  4.77e-04  9.69e-01  
  8  +4.9760e-01  +6.7924e-01  1.82e-01  3.24e-05  1.26e-02  1.40e-03  9.62e-05  9.09e-01  
  9  +4.9125e-01  +6.5916e-01  1.68e-01  9.46e-06  3.69e-03  4.04e-03  2.78e-05  7.40e-01  
 10  +4.8472e-01  +6.1310e-01  1.28e-01  7.71e-06  3.00e-03  2.00e-03  2.35e-05  2.94e-01  
 11  +4.6823e-01  +5.1924e-01  5.10e-02  2.82e-06  1.09e-03  9.40e-05  9.29e-06  7.89e-01  
 12  +4.5671e-01  +4.6612e-01  9.40e-03  4.55e-07  1.77e-04  1.23e-05  1.66e-06  8.35e-01  
 13  +4.5336e-01  +4.5371e-01  3.42e-04  1.44e-08  5.57e-06  1.23e-07  6.07e-08  9.88e-01  
 14  +4.5326e-01  +4.5326e-01  3.42e-06  1.44e-10  5.57e-08  1.23e-09  6.08e-10  9.90e-01  
 15  +4.5326e-01  +4.5326e-01  3.42e-08  1.44e-12  5.57e-10  1.23e-11  6.08e-12  9.90e-01  
 16  +4.5326e-01  +4.5326e-01  3.44e-10  1.44e-14  5.58e-12  1.41e-13  6.93e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 493.9962ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:00 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:00 PM: Optimal value: 4.533e-01
(CVXPY) Oct 06 03:52:00 PM: Compilation took 1.600e-01 seconds
(CVXPY) Oct 06 03:52:00 PM: Solver (including time spent in interface) took 5.454e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:00 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:00 PM: Finished problem compilation (took 1.726e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 224833
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  2.07e+02  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +4.8437e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5111e-01  +7.5329e+02  7.53e+02  1.44e-01  6.00e+01  8.22e-03  2.28e-01  7.24e-01  
  3  +5.1144e-01  +1.6798e+02  1.67e+02  1.31e-01  5.44e+01  1.85e-05  2.26e-01  5.83e-02  
  4  +5.0016e-01  +2.5705e+00  2.07e+00  6.20e-03  2.55e+00  1.63e-06  1.55e-01  9.90e-01  
  5  +5.0006e-01  +1.3154e+00  8.15e-01  2.45e-03  1.01e+00  4.65e-06  1.05e-01  5.30e-01  
  6  +5.0002e-01  +8.4311e-01  3.43e-01  1.03e-03  4.27e-01  3.72e-06  4.60e-02  5.90e-01  
  7  +5.0001e-01  +7.9821e-01  2.98e-01  8.78e-04  3.65e-01  7.59e-06  1.19e-02  8.80e-01  
  8  +4.9971e-01  +7.6212e-01  2.62e-01  1.47e-04  6.16e-02  1.65e-04  4.17e-04  9.70e-01  
  9  +4.9720e-01  +7.4428e-01  2.47e-01  1.95e-05  8.21e-03  1.20e-03  5.25e-05  8.86e-01  
 10  +4.9686e-01  +7.3231e-01  2.35e-01  1.70e-05  7.15e-03  1.07e-03  4.56e-05  2.56e-01  
 11  +4.9541e-01  +7.0832e-01  2.13e-01  1.24e-05  5.20e-03  8.87e-04  3.30e-05  4.96e-01  
 12  +4.9326e-01  +6.9323e-01  2.00e-01  9.87e-06  4.15e-03  8.14e-04  2.64e-05  3.36e-01  
 13  +4.8814e-01  +6.6902e-01  1.81e-01  7.37e-06  3.09e-03  7.82e-04  1.99e-05  3.17e-01  
 14  +4.8707e-01  +6.6376e-01  1.77e-01  7.22e-06  3.03e-03  7.18e-04  1.95e-05  6.01e-02  
 15  +4.8359e-01  +6.4460e-01  1.61e-01  6.81e-06  2.85e-03  4.04e-04  1.86e-05  2.98e-01  
 16  +4.6686e-01  +5.7745e-01  1.11e-01  3.99e-06  1.67e-03  2.01e-04  1.13e-05  5.42e-01  
 17  +4.5759e-01  +5.4298e-01  8.54e-02  3.00e-06  1.25e-03  1.16e-04  8.73e-06  3.62e-01  
 18  +4.3236e-01  +4.5292e-01  2.06e-02  6.65e-07  2.77e-04  1.19e-06  2.06e-06  9.04e-01  
 19  +4.2339e-01  +4.2379e-01  3.99e-04  1.26e-08  5.24e-06  1.19e-08  4.00e-08  9.83e-01  
 20  +4.2320e-01  +4.2321e-01  3.99e-06  1.26e-10  5.24e-08  1.19e-10  4.00e-10  9.90e-01  
 21  +4.2320e-01  +4.2320e-01  3.99e-08  1.26e-12  5.25e-10  1.23e-12  4.15e-12  9.90e-01  
 22  +4.2320e-01  +4.2320e-01  3.99e-10  1.26e-14  5.25e-12  1.28e-14  4.30e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 772.8793ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:01 PM: Optimal value: 4.232e-01
(CVXPY) Oct 06 03:52:01 PM: Compilation took 1.726e-01 seconds
(CVXPY) Oct 06 03:52:01 PM: Solver (including time spent in interface) took 8.208e-01 seconds
FULL MODEL:
  Accruacy: 0.5769
  Our objective: 0.15380000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1538)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.011589527130127
Best over terms:
  Our final objective: 0.15380000000000002
    Its accruacy: 0.5769
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15380000000000002
  Highest accruacy: 0.5769
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

