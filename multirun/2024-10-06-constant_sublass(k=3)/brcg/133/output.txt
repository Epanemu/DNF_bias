Command:
python test_script.py -s constant_subclass -d 4 -n 100 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 4.

Computed total variation: 0.45999999999999996
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:42 PM: Your problem has 59 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:42 PM: Finished problem compilation (took 3.988e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 59
  constraints   = 109
  nnz(P)        = 0
  nnz(A)        = 359
  cones (total) = 1
    : Nonnegative = 1,  numel = 109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9644e-01  +5.0883e+01  5.04e+01  8.58e-01  7.86e+00  1.00e+00  1.04e+00   ------   
  1  +6.0311e-01  +1.0131e+01  9.53e+00  2.96e-01  4.14e+00  4.08e-03  4.91e-01  6.68e-01  
  2  +5.3349e-01  +1.6235e+00  1.09e+00  6.87e-02  1.13e+00  9.52e-03  1.71e-01  8.86e-01  
  3  +4.9752e-01  +7.1424e-01  2.17e-01  1.40e-02  2.30e-01  6.34e-03  4.93e-02  9.90e-01  
  4  +4.7718e-01  +6.6056e-01  1.83e-01  4.79e-03  8.14e-02  1.16e-02  1.64e-02  6.97e-01  
  5  +4.5728e-01  +5.5744e-01  1.00e-01  2.10e-03  3.57e-02  4.75e-03  8.41e-03  6.23e-01  
  6  +4.3827e-01  +4.6217e-01  2.39e-02  4.85e-04  8.21e-03  4.64e-05  2.15e-03  9.21e-01  
  7  +4.3028e-01  +4.3075e-01  4.78e-04  9.43e-06  1.59e-04  1.14e-06  4.38e-05  9.90e-01  
  8  +4.3010e-01  +4.3011e-01  4.78e-06  9.42e-08  1.59e-06  1.14e-08  4.38e-07  9.90e-01  
  9  +4.3010e-01  +4.3010e-01  4.78e-08  9.42e-10  1.59e-08  1.14e-10  4.39e-09  9.90e-01  
 10  +4.3010e-01  +4.3010e-01  4.78e-10  9.42e-12  1.59e-10  1.14e-12  4.39e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 625.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:42 PM: Optimal value: 4.301e-01
(CVXPY) Oct 06 03:49:42 PM: Compilation took 3.988e-02 seconds
(CVXPY) Oct 06 03:49:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:42 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:42 PM: Finished problem compilation (took 1.606e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 465
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8987e-01  +5.1657e+01  5.12e+01  8.66e-01  8.14e+00  1.00e+00  1.06e+00   ------   
  1  +5.6626e-01  +1.0345e+01  9.78e+00  3.09e-01  4.24e+00  4.04e-03  5.13e-01  6.61e-01  
  2  +5.0495e-01  +1.8339e+00  1.33e+00  6.75e-02  1.16e+00  1.13e-02  1.64e-01  8.85e-01  
  3  +4.6409e-01  +1.6511e+00  1.19e+00  3.93e-02  6.86e-01  1.24e-02  1.02e-01  4.92e-01  
  4  +3.9010e-01  +8.6752e-01  4.77e-01  1.15e-02  2.00e-01  5.66e-03  3.51e-02  6.98e-01  
  5  +3.3805e-01  +5.7268e-01  2.35e-01  5.42e-03  9.17e-02  1.68e-03  2.02e-02  5.33e-01  
  6  +2.9761e-01  +3.6231e-01  6.47e-02  1.48e-03  2.46e-02  3.00e-04  6.92e-03  7.55e-01  
  7  +2.8124e-01  +2.8376e-01  2.51e-03  5.73e-05  9.49e-04  7.43e-06  3.05e-04  9.69e-01  
  8  +2.8051e-01  +2.8053e-01  2.52e-05  5.76e-07  9.53e-06  7.44e-08  3.09e-06  9.90e-01  
  9  +2.8050e-01  +2.8050e-01  2.52e-07  5.76e-09  9.53e-08  7.44e-10  3.09e-08  9.90e-01  
 10  +2.8050e-01  +2.8050e-01  2.52e-09  5.76e-11  9.53e-10  7.44e-12  3.09e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 658.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:42 PM: Optimal value: 2.805e-01
(CVXPY) Oct 06 03:49:42 PM: Compilation took 1.606e-03 seconds
(CVXPY) Oct 06 03:49:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:42 PM: Your problem has 72 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:42 PM: Finished problem compilation (took 1.021e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 72
  constraints   = 122
  nnz(P)        = 0
  nnz(A)        = 493
  cones (total) = 1
    : Nonnegative = 1,  numel = 122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8788e-01  +5.1850e+01  5.14e+01  8.68e-01  8.18e+00  1.00e+00  1.07e+00   ------   
  1  +5.5452e-01  +1.0375e+01  9.82e+00  3.12e-01  4.24e+00  4.04e-03  5.18e-01  6.61e-01  
  2  +4.9036e-01  +2.1512e+00  1.66e+00  7.58e-02  1.29e+00  1.16e-02  1.83e-01  8.28e-01  
  3  +3.9832e-01  +1.5050e+00  1.11e+00  2.92e-02  5.07e-01  1.05e-02  8.10e-02  7.07e-01  
  4  +3.3215e-01  +6.4757e-01  3.15e-01  8.11e-03  1.37e-01  2.70e-03  2.75e-02  7.06e-01  
  5  +2.9433e-01  +3.9610e-01  1.02e-01  2.95e-03  4.84e-02  1.59e-04  1.34e-02  7.87e-01  
  6  +2.7288e-01  +2.8445e-01  1.16e-02  3.13e-04  5.13e-03  1.83e-05  1.61e-03  9.06e-01  
  7  +2.7061e-01  +2.7114e-01  5.28e-04  1.44e-05  2.35e-04  8.22e-07  7.61e-05  9.53e-01  
  8  +2.7050e-01  +2.7051e-01  7.41e-06  2.02e-07  3.30e-06  1.32e-08  1.07e-06  9.88e-01  
  9  +2.7050e-01  +2.7050e-01  7.41e-08  2.02e-09  3.30e-08  1.32e-10  1.07e-08  9.90e-01  
 10  +2.7050e-01  +2.7050e-01  7.41e-10  2.02e-11  3.30e-10  1.32e-12  1.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 734.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:42 PM: Optimal value: 2.705e-01
(CVXPY) Oct 06 03:49:42 PM: Compilation took 1.021e-02 seconds
(CVXPY) Oct 06 03:49:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:42 PM: Your problem has 73 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:42 PM: Finished problem compilation (took 9.778e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 73
  constraints   = 123
  nnz(P)        = 0
  nnz(A)        = 498
  cones (total) = 1
    : Nonnegative = 1,  numel = 123

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8769e-01  +5.1839e+01  5.14e+01  8.68e-01  8.17e+00  1.00e+00  1.07e+00   ------   
  1  +5.5194e-01  +1.0398e+01  9.85e+00  3.13e-01  4.24e+00  4.04e-03  5.20e-01  6.59e-01  
  2  +4.8637e-01  +2.1670e+00  1.68e+00  7.58e-02  1.29e+00  1.17e-02  1.84e-01  8.28e-01  
  3  +3.9222e-01  +1.4640e+00  1.07e+00  2.85e-02  4.91e-01  1.00e-02  7.97e-02  7.27e-01  
  4  +3.3138e-01  +6.7968e-01  3.48e-01  8.92e-03  1.51e-01  3.09e-03  3.01e-02  6.64e-01  
  5  +2.8813e-01  +3.7188e-01  8.37e-02  2.35e-03  3.85e-02  1.62e-04  1.07e-02  8.82e-01  
  6  +2.7176e-01  +2.7774e-01  5.98e-03  1.64e-04  2.67e-03  8.82e-06  8.39e-04  9.31e-01  
  7  +2.7061e-01  +2.7108e-01  4.73e-04  1.30e-05  2.11e-04  6.89e-07  6.81e-05  9.21e-01  
  8  +2.7050e-01  +2.7052e-01  1.80e-05  4.93e-07  8.04e-06  3.46e-08  2.62e-06  9.72e-01  
  9  +2.7050e-01  +2.7050e-01  1.81e-07  4.94e-09  8.05e-08  3.46e-10  2.62e-08  9.90e-01  
 10  +2.7050e-01  +2.7050e-01  1.81e-09  4.94e-11  8.05e-10  3.46e-12  2.62e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 709.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:42 PM: Optimal value: 2.705e-01
(CVXPY) Oct 06 03:49:42 PM: Compilation took 9.778e-03 seconds
(CVXPY) Oct 06 03:49:42 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.73
  Our objective: 0.46

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1)            <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x3 = 1)                       <-- (term's our objective: 0.12)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1)            <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0)            <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.012070894241333
Best over terms:
  Our final objective: 0.15999999999999998
    Its accruacy: 0.58
    Its hamming distance: 6
  Shortest hamming distance: 1
    Its our objective: 0.07999999999999997
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

