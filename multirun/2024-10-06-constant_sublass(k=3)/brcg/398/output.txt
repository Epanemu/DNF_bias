Command:
python test_script.py -s constant_subclass -d 10 -n 50000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15380000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 10.

Computed total variation: 0.19128
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:31 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:31 PM: Finished problem compilation (took 2.685e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 325021
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.7827e-01  +5.4921e+03  5.49e+03  4.48e-01  1.81e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2954e-01  +6.0158e+02  6.01e+02  1.86e-01  9.71e+01  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0862e-01  +1.5670e+02  1.56e+02  1.52e-01  8.05e+01  5.04e-05  2.66e-01  3.26e-01  
  4  +5.0144e-01  +1.8688e+01  1.82e+01  4.95e-02  2.61e+01  5.56e-06  1.96e-01  4.51e-01  
  5  +5.0002e-01  +1.4142e+00  9.14e-01  2.73e-03  1.48e+00  2.45e-05  1.93e-01  1.66e-01  
  6  +5.0001e-01  +8.5533e-01  3.55e-01  1.06e-03  5.79e-01  9.70e-06  8.07e-02  6.78e-01  
  7  +4.9998e-01  +6.4606e-01  1.46e-01  4.34e-04  2.37e-01  1.25e-05  1.41e-02  8.62e-01  
  8  +4.9771e-01  +7.6353e-01  2.66e-01  9.61e-05  5.28e-02  1.00e-03  2.98e-04  9.86e-01  
  9  +4.8446e-01  +6.9298e-01  2.09e-01  1.21e-05  6.67e-03  5.79e-03  3.65e-05  8.78e-01  
 10  +4.8350e-01  +6.6723e-01  1.84e-01  1.09e-05  6.01e-03  4.11e-03  3.32e-05  1.99e-01  
 11  +4.8523e-01  +6.4654e-01  1.61e-01  1.06e-05  5.80e-03  1.67e-03  3.21e-05  3.81e-01  
 12  +4.8471e-01  +6.3541e-01  1.51e-01  1.04e-05  5.73e-03  1.36e-03  3.20e-05  4.66e-02  
 13  +4.7258e-01  +5.5536e-01  8.28e-02  4.55e-06  2.49e-03  6.35e-04  1.46e-05  6.30e-01  
 14  +4.7171e-01  +5.4452e-01  7.28e-02  4.27e-06  2.34e-03  3.23e-04  1.40e-05  3.25e-01  
 15  +4.5815e-01  +4.7214e-01  1.40e-02  6.90e-07  3.78e-04  3.59e-06  2.44e-06  9.43e-01  
 16  +4.5347e-01  +4.5417e-01  7.03e-04  2.96e-08  1.62e-05  3.53e-08  1.25e-07  9.88e-01  
 17  +4.5326e-01  +4.5327e-01  7.09e-06  2.98e-10  1.63e-07  3.55e-10  1.26e-09  9.90e-01  
 18  +4.5326e-01  +4.5326e-01  7.09e-08  2.98e-12  1.63e-09  3.55e-12  1.26e-11  9.90e-01  
 19  +4.5326e-01  +4.5326e-01  7.11e-10  2.96e-14  1.63e-11  4.07e-14  1.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 753.1246ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:32 PM: Optimal value: 4.533e-01
(CVXPY) Oct 06 04:33:32 PM: Compilation took 2.685e-01 seconds
(CVXPY) Oct 06 04:33:32 PM: Solver (including time spent in interface) took 8.151e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:32 PM: Your problem has 25031 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:32 PM: Finished problem compilation (took 2.822e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25031
  constraints   = 50031
  nnz(P)        = 0
  nnz(A)        = 373542
  cones (total) = 1
    : Nonnegative = 1,  numel = 50031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7826e-01  +5.4924e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2951e-01  +6.0131e+02  6.01e+02  1.87e-01  1.01e+02  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0861e-01  +1.5654e+02  1.56e+02  1.52e-01  8.34e+01  5.04e-05  2.66e-01  3.27e-01  
  4  +5.0143e-01  +1.8582e+01  1.81e+01  4.93e-02  2.69e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0003e-01  +1.5923e+00  1.09e+00  3.26e-03  1.84e+00  2.72e-05  1.92e-01  1.79e-01  
  6  +5.0001e-01  +8.5225e-01  3.52e-01  1.05e-03  5.95e-01  9.16e-06  7.33e-02  6.39e-01  
  7  +5.0000e-01  +8.2803e-01  3.28e-01  9.77e-04  5.53e-01  1.07e-05  3.88e-02  6.40e-01  
  8  +4.9994e-01  +7.4487e-01  2.45e-01  6.92e-04  3.93e-01  3.25e-05  6.65e-03  8.62e-01  
  9  +4.9569e-01  +7.2187e-01  2.26e-01  3.54e-05  2.03e-02  1.87e-03  9.90e-05  9.86e-01  
 10  +4.9578e-01  +7.1983e-01  2.24e-01  3.32e-05  1.90e-02  1.80e-03  9.20e-05  1.49e-01  
 11  +4.9924e-01  +7.0098e-01  2.02e-01  2.86e-05  1.64e-02  6.15e-05  7.64e-05  9.89e-01  
 12  +4.9925e-01  +7.0053e-01  2.01e-01  2.79e-05  1.60e-02  5.60e-05  7.45e-05  1.31e-01  
 13  +4.9797e-01  +6.9360e-01  1.96e-01  1.34e-05  7.68e-03  1.10e-04  3.55e-05  5.31e-01  
 14  +4.9747e-01  +6.8993e-01  1.92e-01  1.26e-05  7.20e-03  8.77e-05  3.33e-05  2.76e-01  
 15  +4.9579e-01  +6.8085e-01  1.85e-01  1.01e-05  5.79e-03  8.03e-05  2.68e-05  3.70e-01  
 16  +4.9475e-01  +6.7648e-01  1.82e-01  9.43e-06  5.40e-03  6.23e-05  2.50e-05  2.85e-01  
 17  +4.9291e-01  +6.6896e-01  1.76e-01  8.61e-06  4.93e-03  4.59e-05  2.30e-05  3.21e-01  
 18  +4.8693e-01  +6.4616e-01  1.59e-01  6.72e-06  3.84e-03  3.28e-05  1.82e-05  4.41e-01  
 19  +4.8288e-01  +6.3060e-01  1.48e-01  6.43e-06  3.67e-03  1.85e-05  1.77e-05  3.01e-01  
 20  +4.5998e-01  +5.4428e-01  8.43e-02  2.98e-06  1.70e-03  7.70e-06  8.59e-06  6.51e-01  
 21  +4.3156e-01  +4.5054e-01  1.90e-02  6.10e-07  3.46e-04  7.88e-08  1.89e-06  9.11e-01  
 22  +4.2340e-01  +4.2381e-01  4.15e-04  1.31e-08  7.44e-06  1.77e-09  4.17e-08  9.80e-01  
 23  +4.2320e-01  +4.2321e-01  4.15e-06  1.31e-10  7.44e-08  1.77e-11  4.17e-10  9.90e-01  
 24  +4.2320e-01  +4.2320e-01  4.16e-08  1.31e-12  7.45e-10  1.83e-13  4.30e-12  9.90e-01  
 25  +4.2320e-01  +4.2320e-01  4.16e-10  1.30e-14  7.45e-12  1.89e-15  4.43e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1991208s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:33 PM: Optimal value: 4.232e-01
(CVXPY) Oct 06 04:33:33 PM: Compilation took 2.822e-01 seconds
(CVXPY) Oct 06 04:33:33 PM: Solver (including time spent in interface) took 1.259e+00 seconds
Iteration: 2, Objective: 0.4232
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:34 PM: Your problem has 25041 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:34 PM: Finished problem compilation (took 2.505e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25041
  constraints   = 50041
  nnz(P)        = 0
  nnz(A)        = 375826
  cones (total) = 1
    : Nonnegative = 1,  numel = 50041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7825e-01  +5.4925e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2950e-01  +6.0121e+02  6.01e+02  1.87e-01  1.01e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5651e+02  1.56e+02  1.52e-01  8.33e+01  5.05e-05  2.65e-01  3.27e-01  
  4  +5.0143e-01  +1.8581e+01  1.81e+01  4.93e-02  2.69e+01  5.58e-06  1.96e-01  4.55e-01  
  5  +5.0003e-01  +1.6947e+00  1.19e+00  3.57e-03  2.01e+00  2.71e-05  1.92e-01  1.64e-01  
  6  +5.0001e-01  +8.3149e-01  3.31e-01  9.89e-04  5.60e-01  7.89e-06  6.83e-02  6.62e-01  
  7  +5.0000e-01  +8.0156e-01  3.02e-01  8.98e-04  5.09e-01  1.00e-05  3.44e-02  6.14e-01  
  8  +4.9993e-01  +7.5251e-01  2.53e-01  6.95e-04  3.94e-01  3.78e-05  5.57e-03  8.72e-01  
  9  +4.9769e-01  +7.4082e-01  2.43e-01  6.75e-05  3.86e-02  1.01e-03  1.90e-04  9.66e-01  
 10  +4.9732e-01  +7.2543e-01  2.28e-01  4.43e-05  2.54e-02  1.08e-03  1.22e-04  5.59e-01  
 11  +4.9715e-01  +7.1973e-01  2.23e-01  3.59e-05  2.06e-02  1.09e-03  9.81e-05  3.33e-01  
 12  +4.9796e-01  +7.0496e-01  2.07e-01  2.70e-05  1.55e-02  5.96e-04  7.24e-05  7.46e-01  
 13  +4.9760e-01  +6.9667e-01  1.99e-01  1.79e-05  1.02e-02  4.75e-04  4.75e-05  7.51e-01  
 14  +4.9710e-01  +6.9325e-01  1.96e-01  1.48e-05  8.50e-03  3.87e-04  3.94e-05  4.54e-01  
 15  +4.9419e-01  +6.7952e-01  1.85e-01  9.36e-06  5.36e-03  3.55e-04  2.49e-05  6.75e-01  
 16  +4.8921e-01  +6.5889e-01  1.70e-01  7.38e-06  4.22e-03  2.74e-04  1.98e-05  4.02e-01  
 17  +4.8818e-01  +6.5507e-01  1.67e-01  7.33e-06  4.19e-03  2.51e-04  1.98e-05  4.67e-02  
 18  +4.8421e-01  +6.3984e-01  1.56e-01  6.49e-06  3.71e-03  2.22e-04  1.77e-05  1.60e-01  
 19  +4.8291e-01  +6.3485e-01  1.52e-01  6.44e-06  3.68e-03  1.97e-04  1.77e-05  5.61e-02  
 20  +4.6317e-01  +5.6065e-01  9.75e-02  3.50e-06  1.99e-03  1.03e-04  1.00e-05  5.22e-01  
 21  +4.5878e-01  +5.4591e-01  8.71e-02  3.10e-06  1.76e-03  7.00e-05  8.98e-06  2.81e-01  
 22  +4.4694e-01  +5.0550e-01  5.86e-02  2.01e-06  1.14e-03  3.14e-05  6.00e-06  5.00e-01  
 23  +4.2663e-01  +4.3680e-01  1.02e-02  3.27e-07  1.86e-04  3.17e-07  1.03e-06  9.47e-01  
 24  +4.2272e-01  +4.2420e-01  1.48e-03  4.72e-08  2.68e-05  4.07e-08  1.51e-07  8.85e-01  
 25  +4.2206e-01  +4.2210e-01  4.30e-05  1.37e-09  7.79e-07  8.39e-10  4.41e-09  9.90e-01  
 26  +4.2204e-01  +4.2204e-01  4.30e-07  1.37e-11  7.79e-09  8.39e-12  4.41e-11  9.90e-01  
 27  +4.2204e-01  +4.2204e-01  4.30e-09  1.37e-13  7.79e-11  8.39e-14  4.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3465964s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:35 PM: Optimal value: 4.220e-01
(CVXPY) Oct 06 04:33:35 PM: Compilation took 2.505e-01 seconds
(CVXPY) Oct 06 04:33:35 PM: Solver (including time spent in interface) took 1.413e+00 seconds
Iteration: 3, Objective: 0.4220
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:36 PM: Your problem has 25051 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:36 PM: Finished problem compilation (took 2.816e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25051
  constraints   = 50051
  nnz(P)        = 0
  nnz(A)        = 376922
  cones (total) = 1
    : Nonnegative = 1,  numel = 50051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +5.4925e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2949e-01  +6.0114e+02  6.01e+02  1.87e-01  1.01e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5649e+02  1.56e+02  1.52e-01  8.33e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8581e+01  1.81e+01  4.93e-02  2.69e+01  5.58e-06  1.96e-01  4.55e-01  
  5  +5.0003e-01  +1.6888e+00  1.19e+00  3.55e-03  2.00e+00  2.72e-05  1.92e-01  1.66e-01  
  6  +5.0001e-01  +8.6558e-01  3.66e-01  1.09e-03  6.17e-01  8.74e-06  7.40e-02  6.37e-01  
  7  +5.0000e-01  +8.1601e-01  3.16e-01  9.41e-04  5.33e-01  1.05e-05  3.51e-02  6.62e-01  
  8  +4.9992e-01  +7.5411e-01  2.54e-01  6.85e-04  3.89e-01  4.31e-05  4.98e-03  8.93e-01  
  9  +4.9748e-01  +7.4289e-01  2.45e-01  6.37e-05  3.64e-02  1.10e-03  1.79e-04  9.65e-01  
 10  +4.9709e-01  +7.3561e-01  2.39e-01  4.90e-05  2.80e-02  1.21e-03  1.36e-04  3.47e-01  
 11  +4.9714e-01  +7.3501e-01  2.38e-01  4.89e-05  2.79e-02  1.18e-03  1.36e-04  2.07e-02  
 12  +4.9833e-01  +7.2243e-01  2.24e-01  4.67e-05  2.67e-02  6.18e-04  1.28e-04  4.65e-01  
 13  +4.9720e-01  +7.1484e-01  2.18e-01  2.77e-05  1.59e-02  9.10e-04  7.48e-05  4.90e-01  
 14  +4.9730e-01  +7.1072e-01  2.13e-01  2.37e-05  1.36e-02  7.77e-04  6.36e-05  3.79e-01  
 15  +4.9830e-01  +6.9960e-01  2.01e-01  1.92e-05  1.10e-02  1.09e-04  5.11e-05  9.90e-01  
 16  +4.9610e-01  +6.8964e-01  1.94e-01  1.11e-05  6.36e-03  1.67e-04  2.94e-05  4.62e-01  
 17  +4.9264e-01  +6.7529e-01  1.83e-01  8.66e-06  4.96e-03  1.33e-04  2.31e-05  4.60e-01  
 18  +4.8901e-01  +6.6081e-01  1.72e-01  7.47e-06  4.27e-03  1.24e-04  2.01e-05  1.85e-01  
 19  +4.8815e-01  +6.5767e-01  1.70e-01  7.43e-06  4.25e-03  1.15e-04  2.01e-05  4.03e-02  
 20  +4.8347e-01  +6.3972e-01  1.56e-01  6.44e-06  3.68e-03  1.02e-04  1.76e-05  1.72e-01  
 21  +4.8229e-01  +6.3534e-01  1.53e-01  6.40e-06  3.66e-03  9.28e-05  1.76e-05  4.14e-02  
 22  +4.6253e-01  +5.6136e-01  9.88e-02  3.57e-06  2.03e-03  4.56e-05  1.02e-05  5.23e-01  
 23  +4.5603e-01  +5.3898e-01  8.30e-02  2.94e-06  1.67e-03  2.97e-05  8.61e-06  3.09e-01  
 24  +4.5048e-01  +5.1993e-01  6.95e-02  2.42e-06  1.37e-03  2.09e-05  7.17e-06  2.79e-01  
 25  +4.4183e-01  +4.9033e-01  4.85e-02  1.61e-06  9.12e-04  2.15e-07  4.86e-06  9.80e-01  
 26  +4.3543e-01  +4.6865e-01  3.32e-02  1.09e-06  6.18e-04  1.63e-07  3.35e-06  3.42e-01  
 27  +4.3265e-01  +4.5835e-01  2.57e-02  8.20e-07  4.65e-04  4.09e-07  2.53e-06  9.90e-01  
 28  +4.2651e-01  +4.3824e-01  1.17e-02  3.75e-07  2.13e-04  1.87e-07  1.18e-06  5.73e-01  
 29  +4.2196e-01  +4.2337e-01  1.41e-03  4.54e-08  2.57e-05  2.24e-08  1.46e-07  9.10e-01  
 30  +4.2134e-01  +4.2137e-01  3.23e-05  1.03e-09  5.87e-07  5.02e-10  3.34e-09  9.90e-01  
 31  +4.2132e-01  +4.2132e-01  3.23e-07  1.03e-11  5.87e-09  5.02e-12  3.34e-11  9.90e-01  
 32  +4.2132e-01  +4.2132e-01  3.23e-09  1.03e-13  5.87e-11  5.02e-14  3.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6073149s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:38 PM: Optimal value: 4.213e-01
(CVXPY) Oct 06 04:33:38 PM: Compilation took 2.816e-01 seconds
(CVXPY) Oct 06 04:33:38 PM: Solver (including time spent in interface) took 1.677e+00 seconds
Iteration: 4, Objective: 0.4213
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:38 PM: Your problem has 25061 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:38 PM: Finished problem compilation (took 2.828e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25061
  constraints   = 50061
  nnz(P)        = 0
  nnz(A)        = 378584
  cones (total) = 1
    : Nonnegative = 1,  numel = 50061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +5.4925e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2949e-01  +6.0110e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5647e+02  1.56e+02  1.52e-01  8.32e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8580e+01  1.81e+01  4.93e-02  2.69e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.5605e+00  1.06e+00  3.17e-03  1.78e+00  2.74e-05  1.91e-01  1.88e-01  
  6  +5.0000e-01  +7.7016e-01  2.70e-01  8.06e-04  4.56e-01  7.75e-06  5.70e-02  7.07e-01  
  7  +5.0000e-01  +7.8244e-01  2.82e-01  8.41e-04  4.76e-01  1.17e-05  3.10e-02  5.58e-01  
  8  +4.9987e-01  +7.5733e-01  2.57e-01  6.45e-04  3.66e-01  6.68e-05  3.75e-03  9.13e-01  
  9  +4.9763e-01  +7.4765e-01  2.50e-01  7.97e-05  4.56e-02  1.03e-03  2.28e-04  9.39e-01  
 10  +4.9473e-01  +7.3279e-01  2.38e-01  3.49e-05  2.00e-02  2.09e-03  9.72e-05  6.11e-01  
 11  +4.9493e-01  +7.2933e-01  2.34e-01  3.48e-05  1.99e-02  1.93e-03  9.70e-05  4.96e-02  
 12  +4.9628e-01  +7.1775e-01  2.21e-01  2.83e-05  1.62e-02  1.20e-03  7.70e-05  6.02e-01  
 13  +4.9635e-01  +7.1639e-01  2.20e-01  2.82e-05  1.61e-02  1.12e-03  7.68e-05  5.98e-02  
 14  +4.9258e-01  +6.9972e-01  2.07e-01  1.47e-05  8.44e-03  1.79e-03  4.00e-05  5.28e-01  
 15  +4.8032e-01  +6.4218e-01  1.62e-01  6.03e-06  3.44e-03  2.12e-03  1.65e-05  7.54e-01  
 16  +4.7997e-01  +6.4099e-01  1.61e-01  5.97e-06  3.41e-03  2.01e-03  1.64e-05  4.73e-02  
 17  +4.7864e-01  +6.3440e-01  1.56e-01  5.89e-06  3.37e-03  1.62e-03  1.62e-05  1.18e-01  
 18  +4.7407e-01  +6.1321e-01  1.39e-01  5.62e-06  3.20e-03  8.07e-04  1.59e-05  2.95e-01  
 19  +4.5387e-01  +5.3399e-01  8.01e-02  2.91e-06  1.65e-03  3.40e-04  8.58e-06  5.45e-01  
 20  +4.5040e-01  +5.2219e-01  7.18e-02  2.53e-06  1.44e-03  2.05e-04  7.53e-06  3.86e-01  
 21  +4.4286e-01  +4.9576e-01  5.29e-02  1.77e-06  1.01e-03  2.13e-06  5.36e-06  9.50e-01  
 22  +4.3360e-01  +4.6377e-01  3.02e-02  9.93e-07  5.64e-04  1.11e-06  3.08e-06  4.80e-01  
 23  +4.3203e-01  +4.5707e-01  2.50e-02  8.04e-07  4.56e-04  4.35e-07  2.50e-06  9.90e-01  
 24  +4.2450e-01  +4.3230e-01  7.80e-03  2.51e-07  1.43e-04  1.34e-07  8.02e-07  7.80e-01  
 25  +4.2238e-01  +4.2532e-01  2.94e-03  9.48e-08  5.38e-05  4.81e-08  3.05e-07  8.38e-01  
 26  +4.2118e-01  +4.2148e-01  2.99e-04  9.66e-09  5.48e-06  4.84e-09  3.13e-08  9.11e-01  
 27  +4.2104e-01  +4.2105e-01  3.59e-06  1.16e-10  6.58e-08  5.76e-11  3.76e-10  9.90e-01  
 28  +4.2104e-01  +4.2104e-01  3.60e-08  1.16e-12  6.58e-10  5.76e-13  3.76e-12  9.90e-01  
 29  +4.2104e-01  +4.2104e-01  3.60e-10  1.16e-14  6.58e-12  5.95e-15  3.88e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4517751s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:40 PM: Optimal value: 4.210e-01
(CVXPY) Oct 06 04:33:40 PM: Compilation took 2.828e-01 seconds
(CVXPY) Oct 06 04:33:40 PM: Solver (including time spent in interface) took 1.522e+00 seconds
Iteration: 5, Objective: 0.4210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:40 PM: Your problem has 25070 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:40 PM: Finished problem compilation (took 2.667e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25070
  constraints   = 50070
  nnz(P)        = 0
  nnz(A)        = 379491
  cones (total) = 1
    : Nonnegative = 1,  numel = 50070

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7823e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2948e-01  +6.0103e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5645e+02  1.56e+02  1.52e-01  8.32e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8581e+01  1.81e+01  4.93e-02  2.69e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.5924e+00  1.09e+00  3.26e-03  1.84e+00  2.74e-05  1.91e-01  1.82e-01  
  6  +5.0000e-01  +7.5616e-01  2.56e-01  7.64e-04  4.33e-01  7.14e-06  5.39e-02  7.25e-01  
  7  +5.0000e-01  +7.7956e-01  2.80e-01  8.32e-04  4.71e-01  1.14e-05  2.93e-02  5.65e-01  
  8  +4.9982e-01  +7.5604e-01  2.56e-01  5.71e-04  3.25e-01  8.71e-05  2.70e-03  9.39e-01  
  9  +4.9841e-01  +7.5038e-01  2.52e-01  1.13e-04  6.44e-02  6.90e-04  3.26e-04  8.79e-01  
 10  +4.9730e-01  +7.4196e-01  2.45e-01  6.37e-05  3.64e-02  1.11e-03  1.79e-04  5.05e-01  
 11  +4.9790e-01  +7.3514e-01  2.37e-01  6.25e-05  3.58e-02  8.37e-04  1.74e-04  2.38e-01  
 12  +4.9714e-01  +7.2997e-01  2.33e-01  4.44e-05  2.54e-02  1.07e-03  1.22e-04  3.54e-01  
 13  +4.9818e-01  +7.1663e-01  2.18e-01  3.51e-05  2.01e-02  5.57e-04  9.50e-05  7.21e-01  
 14  +4.9903e-01  +7.0804e-01  2.09e-01  2.74e-05  1.57e-02  1.27e-04  7.30e-05  9.90e-01  
 15  +4.9751e-01  +7.0116e-01  2.04e-01  1.35e-05  7.75e-03  2.39e-04  3.58e-05  5.38e-01  
 16  +4.9337e-01  +6.8352e-01  1.90e-01  8.08e-06  4.63e-03  3.00e-04  2.15e-05  5.17e-01  
 17  +4.8544e-01  +6.5014e-01  1.65e-01  6.43e-06  3.68e-03  2.37e-04  1.74e-05  2.75e-01  
 18  +4.8494e-01  +6.4826e-01  1.63e-01  6.42e-06  3.67e-03  2.32e-04  1.74e-05  4.54e-03  
 19  +4.8145e-01  +6.3544e-01  1.54e-01  5.92e-06  3.39e-03  2.04e-04  1.62e-05  1.14e-01  
 20  +4.8027e-01  +6.3119e-01  1.51e-01  5.89e-06  3.37e-03  1.91e-04  1.62e-05  2.34e-02  
 21  +4.6337e-01  +5.6854e-01  1.05e-01  3.84e-06  2.19e-03  9.74e-05  1.10e-05  4.24e-01  
 22  +4.3764e-01  +4.7726e-01  3.96e-02  1.35e-06  7.69e-04  1.09e-05  4.17e-06  7.71e-01  
 23  +4.3747e-01  +4.7667e-01  3.92e-02  1.33e-06  7.57e-04  1.00e-05  4.11e-06  9.49e-02  
 24  +4.3614e-01  +4.7222e-01  3.61e-02  1.21e-06  6.90e-04  7.88e-06  3.76e-06  2.26e-01  
 25  +4.3422e-01  +4.6588e-01  3.17e-02  1.05e-06  5.99e-04  6.21e-06  3.28e-06  2.27e-01  
 26  +4.3173e-01  +4.5754e-01  2.58e-02  8.42e-07  4.78e-04  2.87e-06  2.63e-06  5.90e-01  
 27  +4.2688e-01  +4.4135e-01  1.45e-02  4.65e-07  2.64e-04  3.08e-07  1.47e-06  9.90e-01  
 28  +4.2187e-01  +4.2503e-01  3.16e-03  1.02e-07  5.78e-05  6.35e-08  3.29e-07  8.28e-01  
 29  +4.2088e-01  +4.2181e-01  9.29e-04  3.00e-08  1.70e-05  1.86e-08  9.73e-08  7.11e-01  
 30  +4.2052e-01  +4.2065e-01  1.31e-04  4.23e-09  2.40e-06  2.05e-09  1.37e-08  9.90e-01  
 31  +4.2046e-01  +4.2046e-01  1.36e-06  4.39e-11  2.49e-08  2.13e-11  1.42e-10  9.90e-01  
 32  +4.2046e-01  +4.2046e-01  1.36e-08  4.39e-13  2.49e-10  2.13e-13  1.42e-12  9.90e-01  
 33  +4.2046e-01  +4.2046e-01  1.39e-10  4.49e-15  2.54e-12  2.14e-15  1.44e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6275614s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:42 PM: Optimal value: 4.205e-01
(CVXPY) Oct 06 04:33:42 PM: Compilation took 2.667e-01 seconds
(CVXPY) Oct 06 04:33:42 PM: Solver (including time spent in interface) took 1.691e+00 seconds
Iteration: 6, Objective: 0.4205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:42 PM: Your problem has 25080 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:43 PM: Finished problem compilation (took 2.969e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25080
  constraints   = 50080
  nnz(P)        = 0
  nnz(A)        = 380322
  cones (total) = 1
    : Nonnegative = 1,  numel = 50080

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0098e+02  6.00e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5644e+02  1.56e+02  1.52e-01  8.32e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8583e+01  1.81e+01  4.93e-02  2.69e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.5818e+00  1.08e+00  3.23e-03  1.82e+00  2.75e-05  1.91e-01  1.85e-01  
  6  +5.0000e-01  +7.6665e-01  2.67e-01  7.96e-04  4.50e-01  7.52e-06  5.59e-02  7.14e-01  
  7  +5.0000e-01  +7.8421e-01  2.84e-01  8.46e-04  4.79e-01  1.18e-05  2.98e-02  5.71e-01  
  8  +4.9985e-01  +7.5790e-01  2.58e-01  6.18e-04  3.51e-01  7.54e-05  3.27e-03  9.18e-01  
  9  +4.9865e-01  +7.5302e-01  2.54e-01  1.36e-04  7.78e-02  5.90e-04  3.99e-04  8.78e-01  
 10  +4.9767e-01  +7.4647e-01  2.49e-01  7.79e-05  4.46e-02  9.75e-04  2.21e-04  4.85e-01  
 11  +4.9837e-01  +7.1991e-01  2.22e-01  5.10e-05  2.92e-02  5.76e-04  1.40e-04  8.49e-01  
 12  +4.9745e-01  +7.1642e-01  2.19e-01  3.37e-05  1.93e-02  8.39e-04  9.15e-05  3.61e-01  
 13  +4.9814e-01  +7.1322e-01  2.15e-01  3.16e-05  1.81e-02  5.11e-04  8.50e-05  4.65e-01  
 14  +4.9484e-01  +7.0002e-01  2.05e-01  1.31e-05  7.50e-03  1.11e-03  3.50e-05  6.10e-01  
 15  +4.8483e-01  +6.5489e-01  1.70e-01  6.21e-06  3.55e-03  1.23e-03  1.68e-05  7.06e-01  
 16  +4.8319e-01  +6.4883e-01  1.66e-01  6.02e-06  3.44e-03  1.12e-03  1.63e-05  7.26e-02  
 17  +4.7891e-01  +6.3117e-01  1.52e-01  5.84e-06  3.33e-03  7.45e-04  1.62e-05  1.69e-01  
 18  +4.7721e-01  +6.2445e-01  1.47e-01  5.77e-06  3.30e-03  6.55e-04  1.61e-05  5.63e-02  
 19  +4.5886e-01  +5.5391e-01  9.50e-02  3.46e-06  1.97e-03  3.07e-04  1.01e-05  4.74e-01  
 20  +4.5302e-01  +5.3329e-01  8.03e-02  2.86e-06  1.63e-03  2.07e-04  8.46e-06  2.92e-01  
 21  +4.4388e-01  +5.0111e-01  5.72e-02  1.95e-06  1.11e-03  1.34e-05  5.90e-06  8.81e-01  
 22  +4.4235e-01  +4.9553e-01  5.32e-02  1.78e-06  1.01e-03  8.23e-06  5.41e-06  4.17e-01  
 23  +4.3786e-01  +4.8004e-01  4.22e-02  1.40e-06  7.95e-04  5.54e-06  4.30e-06  3.34e-01  
 24  +4.3726e-01  +4.7757e-01  4.03e-02  1.32e-06  7.51e-04  3.67e-06  4.06e-06  4.03e-01  
 25  +4.2987e-01  +4.5252e-01  2.27e-02  7.40e-07  4.20e-04  1.93e-06  2.33e-06  4.62e-01  
 26  +4.2326e-01  +4.2994e-01  6.68e-03  2.16e-07  1.23e-04  1.36e-07  6.94e-07  9.90e-01  
 27  +4.2066e-01  +4.2149e-01  8.33e-04  2.70e-08  1.53e-05  1.55e-08  8.78e-08  9.21e-01  
 28  +4.2038e-01  +4.2061e-01  2.21e-04  7.17e-09  4.07e-06  3.40e-09  2.33e-08  9.90e-01  
 29  +4.2028e-01  +4.2028e-01  2.49e-06  8.06e-11  4.57e-08  3.82e-11  2.63e-10  9.89e-01  
 30  +4.2028e-01  +4.2028e-01  2.49e-08  8.06e-13  4.57e-10  3.82e-13  2.63e-12  9.90e-01  
 31  +4.2028e-01  +4.2028e-01  2.53e-10  8.10e-15  4.65e-12  3.85e-15  2.64e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4958366s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:44 PM: Optimal value: 4.203e-01
(CVXPY) Oct 06 04:33:44 PM: Compilation took 2.969e-01 seconds
(CVXPY) Oct 06 04:33:44 PM: Solver (including time spent in interface) took 1.563e+00 seconds
Iteration: 7, Objective: 0.4203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:45 PM: Your problem has 25090 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:45 PM: Finished problem compilation (took 2.819e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25090
  constraints   = 50090
  nnz(P)        = 0
  nnz(A)        = 381791
  cones (total) = 1
    : Nonnegative = 1,  numel = 50090

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4927e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2946e-01  +6.0089e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5641e+02  1.56e+02  1.52e-01  8.31e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8582e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.5876e+00  1.09e+00  3.25e-03  1.83e+00  2.75e-05  1.91e-01  1.85e-01  
  6  +5.0000e-01  +7.6589e-01  2.66e-01  7.93e-04  4.49e-01  7.54e-06  5.53e-02  7.19e-01  
  7  +5.0000e-01  +8.0656e-01  3.07e-01  9.13e-04  5.17e-01  1.22e-05  3.02e-02  6.04e-01  
  8  +4.9981e-01  +7.4702e-01  2.47e-01  5.41e-04  3.07e-01  9.09e-05  2.49e-03  9.40e-01  
  9  +4.9883e-01  +7.4311e-01  2.44e-01  1.45e-04  8.27e-02  5.12e-04  4.27e-04  8.30e-01  
 10  +4.9834e-01  +7.3701e-01  2.39e-01  9.36e-05  5.35e-02  7.00e-04  2.67e-04  4.76e-01  
 11  +4.9846e-01  +7.3050e-01  2.32e-01  7.75e-05  4.44e-02  6.21e-04  2.17e-04  4.11e-01  
 12  +4.9533e-01  +7.1494e-01  2.20e-01  2.45e-05  1.40e-02  1.68e-03  6.67e-05  7.75e-01  
 13  +4.9547e-01  +7.1408e-01  2.19e-01  2.44e-05  1.40e-02  1.57e-03  6.63e-05  6.52e-02  
 14  +4.9401e-01  +7.0502e-01  2.11e-01  1.68e-05  9.63e-03  1.62e-03  4.55e-05  5.25e-01  
 15  +4.8695e-01  +6.6506e-01  1.78e-01  7.60e-06  4.35e-03  1.17e-03  2.06e-05  9.90e-01  
 16  +4.8556e-01  +6.5941e-01  1.74e-01  7.43e-06  4.25e-03  1.02e-03  2.02e-05  9.68e-02  
 17  +4.7820e-01  +6.3017e-01  1.52e-01  6.05e-06  3.46e-03  8.13e-04  1.67e-05  2.36e-01  
 18  +4.7750e-01  +6.2743e-01  1.50e-01  6.04e-06  3.45e-03  7.80e-04  1.67e-05  1.20e-02  
 19  +4.6308e-01  +5.7274e-01  1.10e-01  4.08e-06  2.32e-03  4.77e-04  1.17e-05  3.67e-01  
 20  +4.5047e-01  +5.2678e-01  7.63e-02  2.73e-06  1.55e-03  2.40e-04  8.15e-06  4.33e-01  
 21  +4.4117e-01  +4.9372e-01  5.25e-02  1.80e-06  1.02e-03  7.19e-05  5.50e-06  6.70e-01  
 22  +4.4082e-01  +4.9242e-01  5.16e-02  1.76e-06  1.00e-03  6.55e-05  5.39e-06  9.32e-02  
 23  +4.3953e-01  +4.8754e-01  4.80e-02  1.61e-06  9.13e-04  3.80e-05  4.92e-06  4.43e-01  
 24  +4.3015e-01  +4.5525e-01  2.51e-02  8.25e-07  4.68e-04  1.07e-05  2.60e-06  7.15e-01  
 25  +4.2333e-01  +4.3183e-01  8.51e-03  2.76e-07  1.57e-04  3.43e-07  8.89e-07  9.90e-01  
 26  +4.2022e-01  +4.2170e-01  1.48e-03  4.83e-08  2.74e-05  5.74e-08  1.58e-07  8.34e-01  
 27  +4.1976e-01  +4.2019e-01  4.30e-04  1.40e-08  7.94e-06  6.91e-09  4.58e-08  9.90e-01  
 28  +4.1956e-01  +4.1957e-01  5.91e-06  1.92e-10  1.09e-07  9.49e-11  6.30e-10  9.86e-01  
 29  +4.1956e-01  +4.1956e-01  5.91e-08  1.93e-12  1.09e-09  9.49e-13  6.30e-12  9.90e-01  
 30  +4.1956e-01  +4.1956e-01  6.02e-10  1.96e-14  1.11e-11  9.55e-15  6.34e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4697303s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:46 PM: Optimal value: 4.196e-01
(CVXPY) Oct 06 04:33:46 PM: Compilation took 2.819e-01 seconds
(CVXPY) Oct 06 04:33:46 PM: Solver (including time spent in interface) took 1.548e+00 seconds
Iteration: 8, Objective: 0.4196
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:47 PM: Your problem has 25100 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:47 PM: Finished problem compilation (took 2.817e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25100
  constraints   = 50100
  nnz(P)        = 0
  nnz(A)        = 382740
  cones (total) = 1
    : Nonnegative = 1,  numel = 50100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2946e-01  +6.0084e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5639e+02  1.56e+02  1.52e-01  8.31e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8582e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.4865e+00  9.86e-01  2.95e-03  1.66e+00  2.77e-05  1.91e-01  2.05e-01  
  6  +5.0000e-01  +7.5419e-01  2.54e-01  7.59e-04  4.29e-01  8.35e-06  5.33e-02  7.30e-01  
  7  +4.9999e-01  +7.9963e-01  3.00e-01  8.92e-04  5.05e-01  1.44e-05  2.81e-02  6.24e-01  
  8  +4.9974e-01  +7.4981e-01  2.50e-01  5.05e-04  2.87e-01  1.23e-04  2.16e-03  9.42e-01  
  9  +4.9807e-01  +7.4328e-01  2.45e-01  1.05e-04  5.98e-02  8.33e-04  3.03e-04  8.61e-01  
 10  +4.9775e-01  +7.3280e-01  2.35e-01  7.01e-05  4.01e-02  9.19e-04  1.97e-04  5.58e-01  
 11  +4.9653e-01  +7.2531e-01  2.29e-01  4.21e-05  2.41e-02  1.32e-03  1.16e-04  5.08e-01  
 12  +4.9638e-01  +7.2228e-01  2.26e-01  3.60e-05  2.06e-02  1.30e-03  9.88e-05  2.77e-01  
 13  +4.9732e-01  +7.1497e-01  2.18e-01  2.91e-05  1.67e-02  7.40e-04  7.85e-05  6.82e-01  
 14  +4.9410e-01  +7.0032e-01  2.06e-01  1.32e-05  7.58e-03  1.17e-03  3.54e-05  7.42e-01  
 15  +4.8875e-01  +6.7325e-01  1.84e-01  8.53e-06  4.88e-03  6.53e-04  2.30e-05  7.87e-01  
 16  +4.8794e-01  +6.6993e-01  1.82e-01  8.47e-06  4.85e-03  5.97e-04  2.30e-05  5.50e-02  
 17  +4.8398e-01  +6.5417e-01  1.70e-01  7.59e-06  4.34e-03  4.64e-04  2.08e-05  2.29e-01  
 18  +4.6925e-01  +5.9591e-01  1.27e-01  5.07e-06  2.89e-03  1.66e-04  1.44e-05  5.92e-01  
 19  +4.5642e-01  +5.4858e-01  9.22e-02  3.47e-06  1.97e-03  1.00e-04  1.02e-05  3.61e-01  
 20  +4.5102e-01  +5.2938e-01  7.84e-02  2.88e-06  1.63e-03  7.21e-05  8.60e-06  2.66e-01  
 21  +4.4275e-01  +5.0012e-01  5.74e-02  1.99e-06  1.13e-03  1.01e-05  6.06e-06  8.28e-01  
 22  +4.4125e-01  +4.9469e-01  5.34e-02  1.82e-06  1.03e-03  6.32e-06  5.57e-06  4.14e-01  
 23  +4.3784e-01  +4.8285e-01  4.50e-02  1.52e-06  8.62e-04  4.43e-06  4.68e-06  3.19e-01  
 24  +4.3518e-01  +4.7318e-01  3.80e-02  1.25e-06  7.11e-04  1.48e-06  3.88e-06  7.94e-01  
 25  +4.2864e-01  +4.5095e-01  2.23e-02  7.34e-07  4.17e-04  8.35e-07  2.33e-06  4.32e-01  
 26  +4.2134e-01  +4.2605e-01  4.71e-03  1.54e-07  8.76e-05  8.15e-08  5.04e-07  9.90e-01  
 27  +4.1977e-01  +4.2091e-01  1.14e-03  3.73e-08  2.12e-05  1.91e-08  1.23e-07  8.11e-01  
 28  +4.1936e-01  +4.1956e-01  2.07e-04  6.79e-09  3.85e-06  3.10e-09  2.24e-08  9.90e-01  
 29  +4.1926e-01  +4.1926e-01  2.43e-06  7.96e-11  4.52e-08  3.64e-11  2.63e-10  9.88e-01  
 30  +4.1926e-01  +4.1926e-01  2.43e-08  7.96e-13  4.52e-10  3.64e-13  2.63e-12  9.90e-01  
 31  +4.1926e-01  +4.1926e-01  2.46e-10  8.13e-15  4.58e-12  3.65e-15  2.64e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5574877s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:49 PM: Optimal value: 4.193e-01
(CVXPY) Oct 06 04:33:49 PM: Compilation took 2.817e-01 seconds
(CVXPY) Oct 06 04:33:49 PM: Solver (including time spent in interface) took 1.626e+00 seconds
Iteration: 9, Objective: 0.4193
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:49 PM: Your problem has 25103 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:49 PM: Finished problem compilation (took 2.968e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25103
  constraints   = 50103
  nnz(P)        = 0
  nnz(A)        = 382976
  cones (total) = 1
    : Nonnegative = 1,  numel = 50103

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2946e-01  +6.0083e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5639e+02  1.56e+02  1.52e-01  8.31e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8581e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.4889e+00  9.89e-01  2.95e-03  1.67e+00  2.77e-05  1.91e-01  2.05e-01  
  6  +5.0000e-01  +7.5411e-01  2.54e-01  7.58e-04  4.29e-01  8.32e-06  5.32e-02  7.30e-01  
  7  +4.9999e-01  +7.9134e-01  2.91e-01  8.67e-04  4.91e-01  1.44e-05  2.75e-02  6.15e-01  
  8  +4.9973e-01  +7.5289e-01  2.53e-01  5.04e-04  2.87e-01  1.28e-04  2.13e-03  9.42e-01  
  9  +4.9797e-01  +7.4596e-01  2.48e-01  1.02e-04  5.84e-02  8.77e-04  2.95e-04  8.62e-01  
 10  +4.9752e-01  +7.3403e-01  2.37e-01  6.57e-05  3.76e-02  1.01e-03  1.84e-04  5.77e-01  
 11  +4.9611e-01  +7.2532e-01  2.29e-01  3.85e-05  2.20e-02  1.46e-03  1.06e-04  5.28e-01  
 12  +4.9720e-01  +7.1710e-01  2.20e-01  3.07e-05  1.76e-02  8.27e-04  8.31e-05  6.95e-01  
 13  +4.9772e-01  +7.1334e-01  2.16e-01  2.88e-05  1.65e-02  5.66e-04  7.74e-05  3.89e-01  
 14  +4.9681e-01  +7.1001e-01  2.13e-01  2.06e-05  1.18e-02  7.00e-04  5.52e-05  3.74e-01  
 15  +4.9682e-01  +7.0955e-01  2.13e-01  2.05e-05  1.17e-02  6.70e-04  5.49e-05  4.73e-02  
 16  +4.9592e-01  +7.0438e-01  2.08e-01  1.64e-05  9.41e-03  6.51e-04  4.39e-05  3.73e-01  
 17  +4.8602e-01  +6.6239e-01  1.76e-01  6.10e-06  3.49e-03  9.19e-04  1.64e-05  8.70e-01  
 18  +4.8407e-01  +6.5487e-01  1.71e-01  6.04e-06  3.46e-03  8.11e-04  1.63e-05  5.17e-02  
 19  +4.7531e-01  +6.2045e-01  1.45e-01  5.61e-06  3.20e-03  3.92e-04  1.56e-05  2.72e-01  
 20  +4.5719e-01  +5.5192e-01  9.47e-02  3.50e-06  1.99e-03  1.74e-04  1.02e-05  4.50e-01  
 21  +4.5066e-01  +5.2867e-01  7.80e-02  2.81e-06  1.60e-03  1.09e-04  8.40e-06  3.39e-01  
 22  +4.4749e-01  +5.1741e-01  6.99e-02  2.47e-06  1.41e-03  6.84e-05  7.45e-06  3.65e-01  
 23  +4.3848e-01  +4.8566e-01  4.72e-02  1.63e-06  9.24e-04  4.10e-05  5.03e-06  3.77e-01  
 24  +4.3511e-01  +4.7377e-01  3.87e-02  1.31e-06  7.46e-04  2.87e-05  4.10e-06  3.05e-01  
 25  +4.2880e-01  +4.5179e-01  2.30e-02  7.68e-07  4.36e-04  1.32e-05  2.44e-06  5.37e-01  
 26  +4.2308e-01  +4.3177e-01  8.70e-03  2.85e-07  1.62e-04  4.05e-07  9.25e-07  9.90e-01  
 27  +4.2017e-01  +4.2225e-01  2.08e-03  6.84e-08  3.88e-05  8.17e-08  2.25e-07  8.14e-01  
 28  +4.1948e-01  +4.2001e-01  5.34e-04  1.75e-08  9.95e-06  1.97e-08  5.79e-08  7.67e-01  
 29  +4.1925e-01  +4.1927e-01  2.12e-05  6.96e-10  3.95e-07  4.32e-10  2.30e-09  9.90e-01  
 30  +4.1924e-01  +4.1924e-01  2.12e-07  6.97e-12  3.95e-09  4.32e-12  2.30e-11  9.90e-01  
 31  +4.1924e-01  +4.1924e-01  2.15e-09  7.05e-14  4.00e-11  4.34e-14  2.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5720195s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:51 PM: Optimal value: 4.192e-01
(CVXPY) Oct 06 04:33:51 PM: Compilation took 2.968e-01 seconds
(CVXPY) Oct 06 04:33:51 PM: Solver (including time spent in interface) took 1.641e+00 seconds
Iteration: 10, Objective: 0.4192
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:51 PM: Your problem has 25106 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:51 PM: Finished problem compilation (took 2.817e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25106
  constraints   = 50106
  nnz(P)        = 0
  nnz(A)        = 383181
  cones (total) = 1
    : Nonnegative = 1,  numel = 50106

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4925e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2946e-01  +6.0084e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5639e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8580e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4825e+00  9.82e-01  2.93e-03  1.65e+00  2.77e-05  1.91e-01  2.06e-01  
  6  +5.0000e-01  +7.5298e-01  2.53e-01  7.55e-04  4.27e-01  8.37e-06  5.30e-02  7.31e-01  
  7  +4.9999e-01  +7.8570e-01  2.86e-01  8.50e-04  4.81e-01  1.47e-05  2.68e-02  6.14e-01  
  8  +4.9970e-01  +7.5444e-01  2.55e-01  4.93e-04  2.80e-01  1.38e-04  2.03e-03  9.43e-01  
  9  +4.9767e-01  +7.4664e-01  2.49e-01  9.20e-05  5.26e-02  1.00e-03  2.65e-04  8.71e-01  
 10  +4.9626e-01  +7.3139e-01  2.35e-01  4.77e-05  2.73e-02  1.49e-03  1.33e-04  6.56e-01  
 11  +4.9548e-01  +7.2750e-01  2.32e-01  3.79e-05  2.17e-02  1.72e-03  1.05e-04  2.64e-01  
 12  +4.9676e-01  +7.2257e-01  2.26e-01  3.68e-05  2.11e-02  1.09e-03  1.01e-04  3.75e-01  
 13  +4.9378e-01  +7.0658e-01  2.13e-01  1.80e-05  1.03e-02  1.66e-03  4.88e-05  6.71e-01  
 14  +4.8815e-01  +6.8037e-01  1.92e-01  9.80e-06  5.61e-03  1.85e-03  2.66e-05  6.63e-01  
 15  +4.8699e-01  +6.7501e-01  1.88e-01  9.29e-06  5.31e-03  1.70e-03  2.53e-05  1.13e-01  
 16  +4.8552e-01  +6.6500e-01  1.79e-01  8.95e-06  5.12e-03  9.20e-04  2.46e-05  3.61e-01  
 17  +4.7611e-01  +6.2393e-01  1.48e-01  6.55e-06  3.73e-03  3.82e-04  1.84e-05  5.87e-01  
 18  +4.5424e-01  +5.4093e-01  8.67e-02  3.18e-06  1.81e-03  1.88e-04  9.40e-06  5.62e-01  
 19  +4.5048e-01  +5.2768e-01  7.72e-02  2.78e-06  1.58e-03  1.39e-04  8.32e-06  2.44e-01  
 20  +4.4691e-01  +5.1513e-01  6.82e-02  2.41e-06  1.37e-03  7.99e-05  7.26e-06  4.14e-01  
 21  +4.3782e-01  +4.8322e-01  4.54e-02  1.56e-06  8.86e-04  4.40e-05  4.83e-06  4.28e-01  
 22  +4.3177e-01  +4.6181e-01  3.00e-02  1.00e-06  5.69e-04  1.20e-05  3.15e-06  7.40e-01  
 23  +4.2304e-01  +4.3180e-01  8.76e-03  2.88e-07  1.63e-04  3.21e-07  9.34e-07  9.90e-01  
 24  +4.2027e-01  +4.2263e-01  2.37e-03  7.78e-08  4.41e-05  6.95e-08  2.56e-07  8.21e-01  
 25  +4.1947e-01  +4.2005e-01  5.71e-04  1.88e-08  1.06e-05  1.50e-08  6.20e-08  8.09e-01  
 26  +4.1923e-01  +4.1924e-01  1.28e-05  4.20e-10  2.38e-07  2.54e-10  1.39e-09  9.90e-01  
 27  +4.1922e-01  +4.1922e-01  1.28e-07  4.21e-12  2.39e-09  2.55e-12  1.39e-11  9.90e-01  
 28  +4.1922e-01  +4.1922e-01  1.29e-09  4.26e-14  2.41e-11  2.56e-14  1.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.436335s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:53 PM: Optimal value: 4.192e-01
(CVXPY) Oct 06 04:33:53 PM: Compilation took 2.817e-01 seconds
(CVXPY) Oct 06 04:33:53 PM: Solver (including time spent in interface) took 1.516e+00 seconds
Iteration: 11, Objective: 0.4192
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:53 PM: Your problem has 25109 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:54 PM: Finished problem compilation (took 3.127e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25109
  constraints   = 50109
  nnz(P)        = 0
  nnz(A)        = 383322
  cones (total) = 1
    : Nonnegative = 1,  numel = 50109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2945e-01  +6.0079e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5638e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8582e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.4984e+00  9.98e-01  2.98e-03  1.68e+00  2.77e-05  1.91e-01  2.03e-01  
  6  +5.0000e-01  +8.0765e-01  3.08e-01  9.18e-04  5.20e-01  9.64e-06  6.38e-02  6.74e-01  
  7  +4.9999e-01  +7.9032e-01  2.90e-01  8.65e-04  4.89e-01  1.45e-05  2.99e-02  6.07e-01  
  8  +4.9979e-01  +7.6287e-01  2.63e-01  6.11e-04  3.47e-01  9.91e-05  3.09e-03  9.23e-01  
  9  +4.9795e-01  +7.5534e-01  2.57e-01  1.12e-04  6.39e-02  8.89e-04  3.26e-04  8.95e-01  
 10  +4.9682e-01  +7.4489e-01  2.48e-01  6.57e-05  3.76e-02  1.31e-03  1.86e-04  5.21e-01  
 11  +4.9527e-01  +7.2943e-01  2.34e-01  3.65e-05  2.09e-02  1.75e-03  1.01e-04  6.24e-01  
 12  +4.9551e-01  +7.2803e-01  2.33e-01  3.64e-05  2.08e-02  1.61e-03  1.01e-04  7.33e-02  
 13  +4.9215e-01  +7.1293e-01  2.21e-01  2.01e-05  1.15e-02  2.39e-03  5.51e-05  5.34e-01  
 14  +4.8873e-01  +6.9547e-01  2.07e-01  1.37e-05  7.84e-03  2.57e-03  3.76e-05  4.42e-01  
 15  +4.8534e-01  +6.7989e-01  1.95e-01  1.09e-05  6.25e-03  2.52e-03  3.02e-05  2.68e-01  
 16  +4.8579e-01  +6.7465e-01  1.89e-01  1.06e-05  6.06e-03  1.58e-03  2.93e-05  3.21e-01  
 17  +4.7667e-01  +6.3218e-01  1.56e-01  7.01e-06  4.00e-03  9.46e-04  1.97e-05  5.78e-01  
 18  +4.5729e-01  +5.5547e-01  9.82e-02  3.68e-06  2.09e-03  4.93e-04  1.08e-05  5.44e-01  
 19  +4.4974e-01  +5.2751e-01  7.78e-02  2.83e-06  1.61e-03  3.02e-04  8.48e-06  3.56e-01  
 20  +4.4541e-01  +5.1154e-01  6.61e-02  2.34e-06  1.33e-03  1.82e-04  7.11e-06  3.87e-01  
 21  +4.3685e-01  +4.8090e-01  4.40e-02  1.52e-06  8.60e-04  9.61e-05  4.71e-06  4.55e-01  
 22  +4.3088e-01  +4.5941e-01  2.85e-02  9.53e-07  5.41e-04  3.10e-05  3.01e-06  6.86e-01  
 23  +4.2255e-01  +4.3055e-01  8.00e-03  2.63e-07  1.49e-04  5.78e-07  8.56e-07  9.90e-01  
 24  +4.1982e-01  +4.2154e-01  1.72e-03  5.67e-08  3.21e-05  9.21e-08  1.87e-07  8.54e-01  
 25  +4.1928e-01  +4.1977e-01  4.87e-04  1.60e-08  9.09e-06  1.28e-08  5.31e-08  9.18e-01  
 26  +4.1906e-01  +4.1907e-01  7.22e-06  2.38e-10  1.35e-07  1.89e-10  7.89e-10  9.85e-01  
 27  +4.1906e-01  +4.1906e-01  7.23e-08  2.38e-12  1.35e-09  1.89e-12  7.89e-12  9.90e-01  
 28  +4.1906e-01  +4.1906e-01  7.30e-10  2.40e-14  1.36e-11  1.89e-14  7.92e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4254633s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:55 PM: Optimal value: 4.191e-01
(CVXPY) Oct 06 04:33:55 PM: Compilation took 3.127e-01 seconds
(CVXPY) Oct 06 04:33:55 PM: Solver (including time spent in interface) took 1.501e+00 seconds
Iteration: 12, Objective: 0.4191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:55 PM: Your problem has 25110 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:56 PM: Finished problem compilation (took 2.968e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25110
  constraints   = 50110
  nnz(P)        = 0
  nnz(A)        = 383547
  cones (total) = 1
    : Nonnegative = 1,  numel = 50110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2945e-01  +6.0079e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5638e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8582e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.4977e+00  9.98e-01  2.98e-03  1.68e+00  2.77e-05  1.91e-01  2.03e-01  
  6  +5.0000e-01  +8.0834e-01  3.08e-01  9.20e-04  5.21e-01  9.68e-06  6.40e-02  6.71e-01  
  7  +4.9999e-01  +7.9019e-01  2.90e-01  8.64e-04  4.89e-01  1.46e-05  2.99e-02  6.08e-01  
  8  +4.9979e-01  +7.6270e-01  2.63e-01  6.08e-04  3.45e-01  1.00e-04  3.06e-03  9.24e-01  
  9  +4.9790e-01  +7.5502e-01  2.57e-01  1.10e-04  6.27e-02  9.10e-04  3.20e-04  8.96e-01  
 10  +4.9670e-01  +7.4419e-01  2.47e-01  6.35e-05  3.63e-02  1.35e-03  1.80e-04  5.31e-01  
 11  +4.9511e-01  +7.3087e-01  2.36e-01  3.69e-05  2.11e-02  1.83e-03  1.02e-04  5.69e-01  
 12  +4.9537e-01  +7.2931e-01  2.34e-01  3.67e-05  2.10e-02  1.67e-03  1.02e-04  7.57e-02  
 13  +4.9218e-01  +7.1398e-01  2.22e-01  2.06e-05  1.18e-02  2.39e-03  5.66e-05  5.41e-01  
 14  +4.8903e-01  +6.9845e-01  2.09e-01  1.45e-05  8.30e-03  2.61e-03  3.99e-05  3.96e-01  
 15  +4.8556e-01  +6.8129e-01  1.96e-01  1.12e-05  6.40e-03  2.50e-03  3.09e-05  3.30e-01  
 16  +4.8599e-01  +6.7720e-01  1.91e-01  1.09e-05  6.24e-03  1.74e-03  3.02e-05  2.60e-01  
 17  +4.7718e-01  +6.3515e-01  1.58e-01  7.14e-06  4.07e-03  1.02e-03  2.00e-05  6.07e-01  
 18  +4.5733e-01  +5.5625e-01  9.89e-02  3.69e-06  2.10e-03  5.66e-04  1.08e-05  5.28e-01  
 19  +4.4932e-01  +5.2645e-01  7.71e-02  2.79e-06  1.59e-03  3.40e-04  8.38e-06  3.63e-01  
 20  +4.4220e-01  +5.0000e-01  5.78e-02  2.01e-06  1.14e-03  1.21e-04  6.16e-06  6.22e-01  
 21  +4.3571e-01  +4.7692e-01  4.12e-02  1.41e-06  8.00e-04  7.45e-05  4.40e-06  3.72e-01  
 22  +4.3179e-01  +4.6199e-01  3.02e-02  9.99e-07  5.67e-04  7.23e-06  3.14e-06  9.33e-01  
 23  +4.2460e-01  +4.3768e-01  1.31e-02  4.32e-07  2.45e-04  2.70e-06  1.39e-06  6.19e-01  
 24  +4.1973e-01  +4.2129e-01  1.56e-03  5.15e-08  2.92e-05  2.52e-07  1.70e-07  9.05e-01  
 25  +4.1917e-01  +4.1942e-01  2.47e-04  8.16e-09  4.63e-06  1.78e-08  2.70e-08  9.38e-01  
 26  +4.1906e-01  +4.1906e-01  2.85e-06  9.41e-11  5.34e-08  2.06e-10  3.12e-10  9.88e-01  
 27  +4.1906e-01  +4.1906e-01  2.85e-08  9.41e-13  5.34e-10  2.06e-12  3.12e-12  9.90e-01  
 28  +4.1906e-01  +4.1906e-01  2.90e-10  9.56e-15  5.44e-12  2.08e-14  3.15e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4159412s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:57 PM: Optimal value: 4.191e-01
(CVXPY) Oct 06 04:33:57 PM: Compilation took 2.968e-01 seconds
(CVXPY) Oct 06 04:33:57 PM: Solver (including time spent in interface) took 1.485e+00 seconds
Iteration: 13, Objective: 0.4191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:33:57 PM: Your problem has 25111 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:33:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:33:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:33:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:33:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:33:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:33:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:33:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:33:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:33:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:33:58 PM: Finished problem compilation (took 3.130e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25111
  constraints   = 50111
  nnz(P)        = 0
  nnz(A)        = 383746
  cones (total) = 1
    : Nonnegative = 1,  numel = 50111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2945e-01  +6.0077e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5637e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8582e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4728e+00  9.73e-01  2.91e-03  1.64e+00  2.78e-05  1.90e-01  2.09e-01  
  6  +5.0000e-01  +8.0271e-01  3.03e-01  9.04e-04  5.11e-01  9.89e-06  6.31e-02  6.76e-01  
  7  +4.9999e-01  +7.8933e-01  2.89e-01  8.62e-04  4.88e-01  1.52e-05  2.94e-02  6.09e-01  
  8  +4.9975e-01  +7.6022e-01  2.60e-01  5.68e-04  3.23e-01  1.19e-04  2.64e-03  9.35e-01  
  9  +4.9757e-01  +7.5158e-01  2.54e-01  9.78e-05  5.58e-02  1.05e-03  2.84e-04  8.94e-01  
 10  +4.9627e-01  +7.3970e-01  2.43e-01  5.63e-05  3.22e-02  1.51e-03  1.59e-04  5.56e-01  
 11  +4.9479e-01  +7.3219e-01  2.37e-01  3.81e-05  2.18e-02  1.98e-03  1.06e-04  3.99e-01  
 12  +4.9520e-01  +7.3020e-01  2.35e-01  3.79e-05  2.17e-02  1.76e-03  1.05e-04  1.01e-01  
 13  +4.9076e-01  +7.1183e-01  2.21e-01  1.91e-05  1.09e-02  2.86e-03  5.27e-05  5.67e-01  
 14  +4.8806e-01  +6.9814e-01  2.10e-01  1.44e-05  8.25e-03  2.95e-03  3.99e-05  3.41e-01  
 15  +4.8829e-01  +6.9661e-01  2.08e-01  1.44e-05  8.21e-03  2.68e-03  3.97e-05  7.36e-02  
 16  +4.8322e-01  +6.6868e-01  1.85e-01  9.90e-06  5.66e-03  2.20e-03  2.75e-05  5.07e-01  
 17  +4.8081e-01  +6.5133e-01  1.71e-01  8.42e-06  4.81e-03  9.25e-04  2.35e-05  5.67e-01  
 18  +4.5784e-01  +5.5823e-01  1.00e-01  3.66e-06  2.09e-03  5.22e-04  1.07e-05  6.35e-01  
 19  +4.4524e-01  +5.1169e-01  6.64e-02  2.36e-06  1.34e-03  2.18e-04  7.16e-06  5.14e-01  
 20  +4.4180e-01  +4.9848e-01  5.67e-02  1.95e-06  1.11e-03  6.07e-05  5.96e-06  7.22e-01  
 21  +4.3808e-01  +4.8540e-01  4.73e-02  1.61e-06  9.15e-04  4.47e-05  4.99e-06  2.60e-01  
 22  +4.3132e-01  +4.6121e-01  2.99e-02  9.94e-07  5.64e-04  6.19e-06  3.14e-06  8.84e-01  
 23  +4.2172e-01  +4.2824e-01  6.52e-03  2.16e-07  1.23e-04  5.48e-07  7.09e-07  9.19e-01  
 24  +4.1969e-01  +4.2144e-01  1.74e-03  5.80e-08  3.29e-05  1.25e-07  1.92e-07  7.77e-01  
 25  +4.1909e-01  +4.1942e-01  3.32e-04  1.10e-08  6.26e-06  5.95e-09  3.67e-08  9.90e-01  
 26  +4.1894e-01  +4.1895e-01  4.08e-06  1.36e-10  7.70e-08  7.31e-11  4.52e-10  9.88e-01  
 27  +4.1894e-01  +4.1894e-01  4.09e-08  1.36e-12  7.70e-10  7.31e-13  4.52e-12  9.90e-01  
 28  +4.1894e-01  +4.1894e-01  4.22e-10  1.41e-14  7.96e-12  7.46e-15  4.61e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4135909s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:33:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:33:59 PM: Optimal value: 4.189e-01
(CVXPY) Oct 06 04:33:59 PM: Compilation took 3.130e-01 seconds
(CVXPY) Oct 06 04:33:59 PM: Solver (including time spent in interface) took 1.485e+00 seconds
Iteration: 14, Objective: 0.4189
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:00 PM: Your problem has 25118 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:00 PM: Finished problem compilation (took 3.125e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25118
  constraints   = 50118
  nnz(P)        = 0
  nnz(A)        = 384292
  cones (total) = 1
    : Nonnegative = 1,  numel = 50118

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +5.4925e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2945e-01  +6.0076e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5637e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8581e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4644e+00  9.64e-01  2.88e-03  1.62e+00  2.78e-05  1.90e-01  2.11e-01  
  6  +5.0000e-01  +8.0298e-01  3.03e-01  9.04e-04  5.12e-01  1.00e-05  6.33e-02  6.73e-01  
  7  +4.9999e-01  +7.8917e-01  2.89e-01  8.61e-04  4.87e-01  1.55e-05  2.93e-02  6.12e-01  
  8  +4.9974e-01  +7.6090e-01  2.61e-01  5.66e-04  3.22e-01  1.23e-04  2.62e-03  9.35e-01  
  9  +4.9741e-01  +7.5167e-01  2.54e-01  9.37e-05  5.35e-02  1.12e-03  2.72e-04  8.97e-01  
 10  +4.9623e-01  +7.4139e-01  2.45e-01  5.76e-05  3.29e-02  1.54e-03  1.63e-04  5.07e-01  
 11  +4.9526e-01  +7.3282e-01  2.38e-01  4.01e-05  2.29e-02  1.80e-03  1.12e-04  4.44e-01  
 12  +4.9573e-01  +7.3058e-01  2.35e-01  3.98e-05  2.28e-02  1.56e-03  1.11e-04  1.28e-01  
 13  +4.9127e-01  +7.0734e-01  2.16e-01  1.73e-05  9.90e-03  2.56e-03  4.75e-05  7.24e-01  
 14  +4.8884e-01  +6.9575e-01  2.07e-01  1.37e-05  7.81e-03  2.61e-03  3.75e-05  2.98e-01  
 15  +4.8948e-01  +6.8972e-01  2.00e-01  1.27e-05  7.24e-03  1.50e-03  3.46e-05  4.40e-01  
 16  +4.8556e-01  +6.7109e-01  1.86e-01  9.92e-06  5.67e-03  1.27e-03  2.73e-05  3.68e-01  
 17  +4.8423e-01  +6.6105e-01  1.77e-01  9.38e-06  5.36e-03  5.87e-04  2.61e-05  4.48e-01  
 18  +4.6404e-01  +5.7825e-01  1.14e-01  4.36e-06  2.48e-03  4.02e-04  1.26e-05  6.05e-01  
 19  +4.5207e-01  +5.3517e-01  8.31e-02  3.04e-06  1.73e-03  2.42e-04  9.08e-06  3.51e-01  
 20  +4.4926e-01  +5.2525e-01  7.60e-02  2.75e-06  1.56e-03  1.97e-04  8.27e-06  1.76e-01  
 21  +4.4412e-01  +5.0704e-01  6.29e-02  2.22e-06  1.26e-03  1.07e-04  6.77e-06  4.44e-01  
 22  +4.3919e-01  +4.8944e-01  5.02e-02  1.72e-06  9.78e-04  4.12e-05  5.32e-06  6.16e-01  
 23  +4.3385e-01  +4.7028e-01  3.64e-02  1.22e-06  6.90e-04  5.13e-06  3.81e-06  9.04e-01  
 24  +4.2666e-01  +4.4551e-01  1.88e-02  6.26e-07  3.55e-04  2.01e-06  2.02e-06  6.17e-01  
 25  +4.2108e-01  +4.2639e-01  5.31e-03  1.76e-07  1.00e-04  3.64e-07  5.81e-07  8.34e-01  
 26  +4.1914e-01  +4.1992e-01  7.76e-04  2.58e-08  1.46e-05  3.47e-08  8.58e-08  9.18e-01  
 27  +4.1881e-01  +4.1883e-01  1.93e-05  6.41e-10  3.64e-07  5.14e-10  2.14e-09  9.90e-01  
 28  +4.1880e-01  +4.1880e-01  1.93e-07  6.42e-12  3.64e-09  5.15e-12  2.14e-11  9.90e-01  
 29  +4.1880e-01  +4.1880e-01  1.96e-09  6.52e-14  3.69e-11  5.18e-14  2.16e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5230415s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:02 PM: Optimal value: 4.188e-01
(CVXPY) Oct 06 04:34:02 PM: Compilation took 3.125e-01 seconds
(CVXPY) Oct 06 04:34:02 PM: Solver (including time spent in interface) took 1.610e+00 seconds
Iteration: 15, Objective: 0.4188
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:02 PM: Your problem has 25119 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:02 PM: Finished problem compilation (took 3.126e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25119
  constraints   = 50119
  nnz(P)        = 0
  nnz(A)        = 384407
  cones (total) = 1
    : Nonnegative = 1,  numel = 50119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +5.4925e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2945e-01  +6.0075e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5636e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8581e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4597e+00  9.60e-01  2.87e-03  1.62e+00  2.78e-05  1.90e-01  2.12e-01  
  6  +5.0000e-01  +8.0130e-01  3.01e-01  8.99e-04  5.09e-01  1.01e-05  6.29e-02  6.75e-01  
  7  +4.9999e-01  +7.8962e-01  2.90e-01  8.63e-04  4.88e-01  1.57e-05  2.92e-02  6.12e-01  
  8  +4.9972e-01  +7.5908e-01  2.59e-01  5.44e-04  3.09e-01  1.33e-04  2.43e-03  9.41e-01  
  9  +4.9727e-01  +7.4950e-01  2.52e-01  8.91e-05  5.09e-02  1.18e-03  2.58e-04  8.95e-01  
 10  +4.9609e-01  +7.3947e-01  2.43e-01  5.53e-05  3.16e-02  1.59e-03  1.56e-04  5.05e-01  
 11  +4.9507e-01  +7.3244e-01  2.37e-01  3.98e-05  2.27e-02  1.88e-03  1.11e-04  3.91e-01  
 12  +4.9555e-01  +7.3035e-01  2.35e-01  3.95e-05  2.26e-02  1.64e-03  1.10e-04  1.25e-01  
 13  +4.9174e-01  +7.1230e-01  2.21e-01  1.97e-05  1.13e-02  2.54e-03  5.42e-05  6.22e-01  
 14  +4.8914e-01  +7.0029e-01  2.11e-01  1.50e-05  8.58e-03  2.73e-03  4.13e-05  3.13e-01  
 15  +4.8951e-01  +6.9872e-01  2.09e-01  1.49e-05  8.50e-03  2.36e-03  4.11e-05  1.15e-01  
 16  +4.8206e-01  +6.5129e-01  1.69e-01  7.91e-06  4.52e-03  1.05e-03  2.19e-05  9.19e-01  
 17  +4.8111e-01  +6.4676e-01  1.66e-01  7.84e-06  4.48e-03  9.63e-04  2.18e-05  4.05e-02  
 18  +4.6614e-01  +5.8818e-01  1.22e-01  4.83e-06  2.75e-03  6.90e-04  1.39e-05  4.17e-01  
 19  +4.5241e-01  +5.3743e-01  8.50e-02  3.16e-06  1.79e-03  4.01e-04  9.42e-06  3.85e-01  
 20  +4.4972e-01  +5.2772e-01  7.80e-02  2.85e-06  1.62e-03  3.18e-04  8.58e-06  1.99e-01  
 21  +4.4161e-01  +4.9834e-01  5.67e-02  1.98e-06  1.13e-03  7.01e-05  6.09e-06  7.48e-01  
 22  +4.3761e-01  +4.8415e-01  4.65e-02  1.60e-06  9.09e-04  4.77e-05  4.98e-06  3.19e-01  
 23  +4.3208e-01  +4.6414e-01  3.21e-02  1.07e-06  6.08e-04  8.61e-06  3.38e-06  8.42e-01  
 24  +4.2364e-01  +4.3516e-01  1.15e-02  3.83e-07  2.17e-04  2.01e-06  1.25e-06  7.67e-01  
 25  +4.1998e-01  +4.2264e-01  2.65e-03  8.81e-08  5.00e-05  6.79e-08  2.91e-07  9.90e-01  
 26  +4.1896e-01  +4.1931e-01  3.50e-04  1.16e-08  6.60e-06  8.82e-09  3.87e-08  8.72e-01  
 27  +4.1880e-01  +4.1881e-01  3.95e-06  1.31e-10  7.45e-08  9.47e-11  4.38e-10  9.90e-01  
 28  +4.1880e-01  +4.1880e-01  3.96e-08  1.31e-12  7.45e-10  9.47e-13  4.38e-12  9.90e-01  
 29  +4.1880e-01  +4.1880e-01  4.02e-10  1.34e-14  7.57e-12  9.52e-15  4.40e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4743121s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:04 PM: Optimal value: 4.188e-01
(CVXPY) Oct 06 04:34:04 PM: Compilation took 3.126e-01 seconds
(CVXPY) Oct 06 04:34:04 PM: Solver (including time spent in interface) took 1.547e+00 seconds
Iteration: 16, Objective: 0.4188
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:04 PM: Your problem has 25129 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:04 PM: Finished problem compilation (took 2.969e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25129
  constraints   = 50129
  nnz(P)        = 0
  nnz(A)        = 385701
  cones (total) = 1
    : Nonnegative = 1,  numel = 50129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7819e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2944e-01  +6.0069e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5634e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8581e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.56e-01  
  5  +5.0001e-01  +1.4807e+00  9.81e-01  2.93e-03  1.65e+00  2.78e-05  1.90e-01  2.09e-01  
  6  +5.0000e-01  +8.0301e-01  3.03e-01  9.05e-04  5.12e-01  9.91e-06  6.27e-02  6.76e-01  
  7  +4.9999e-01  +7.9728e-01  2.97e-01  8.85e-04  5.01e-01  1.65e-05  2.74e-02  6.53e-01  
  8  +4.9963e-01  +7.6172e-01  2.62e-01  4.75e-04  2.70e-01  1.68e-04  1.88e-03  9.51e-01  
  9  +4.9742e-01  +7.5285e-01  2.55e-01  9.30e-05  5.31e-02  1.11e-03  2.69e-04  8.59e-01  
 10  +4.9723e-01  +7.3428e-01  2.37e-01  5.59e-05  3.20e-02  1.08e-03  1.56e-04  7.47e-01  
 11  +4.9675e-01  +7.3108e-01  2.34e-01  4.47e-05  2.56e-02  1.21e-03  1.24e-04  2.90e-01  
 12  +4.9757e-01  +7.2651e-01  2.29e-01  4.00e-05  2.29e-02  7.96e-04  1.09e-04  4.88e-01  
 13  +4.9408e-01  +7.1294e-01  2.19e-01  1.72e-05  9.87e-03  1.60e-03  4.66e-05  6.31e-01  
 14  +4.9335e-01  +7.0194e-01  2.09e-01  1.35e-05  7.72e-03  8.16e-04  3.63e-05  7.06e-01  
 15  +4.9111e-01  +6.8706e-01  1.96e-01  1.11e-05  6.32e-03  1.90e-05  2.99e-05  9.90e-01  
 16  +4.8805e-01  +6.7437e-01  1.86e-01  9.66e-06  5.53e-03  1.64e-05  2.63e-05  2.44e-01  
 17  +4.8153e-01  +6.4858e-01  1.67e-01  8.39e-06  4.79e-03  1.64e-07  2.35e-05  9.06e-01  
 18  +4.5747e-01  +5.5241e-01  9.49e-02  3.57e-06  2.03e-03  4.99e-07  1.05e-05  7.34e-01  
 19  +4.4735e-01  +5.1805e-01  7.07e-02  2.58e-06  1.46e-03  5.36e-07  7.81e-06  4.78e-01  
 20  +4.4276e-01  +5.0313e-01  6.04e-02  2.12e-06  1.20e-03  7.08e-07  6.48e-06  6.92e-01  
 21  +4.3766e-01  +4.8526e-01  4.76e-02  1.64e-06  9.33e-04  5.86e-07  5.10e-06  3.78e-01  
 22  +4.3213e-01  +4.6538e-01  3.32e-02  1.11e-06  6.31e-04  5.07e-07  3.50e-06  9.90e-01  
 23  +4.2684e-01  +4.4716e-01  2.03e-02  6.78e-07  3.85e-04  3.10e-07  2.18e-06  4.39e-01  
 24  +4.2420e-01  +4.3754e-01  1.33e-02  4.43e-07  2.51e-04  2.08e-07  1.43e-06  9.90e-01  
 25  +4.2048e-01  +4.2521e-01  4.73e-03  1.57e-07  8.93e-05  7.35e-08  5.20e-07  6.89e-01  
 26  +4.1871e-01  +4.1936e-01  6.56e-04  2.19e-08  1.24e-05  1.01e-08  7.29e-08  8.71e-01  
 27  +4.1843e-01  +4.1844e-01  1.29e-05  4.30e-10  2.44e-07  1.93e-10  1.44e-09  9.90e-01  
 28  +4.1842e-01  +4.1842e-01  1.29e-07  4.30e-12  2.44e-09  1.93e-12  1.44e-11  9.90e-01  
 29  +4.1842e-01  +4.1842e-01  1.31e-09  4.37e-14  2.48e-11  1.94e-14  1.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4636113s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:06 PM: Optimal value: 4.184e-01
(CVXPY) Oct 06 04:34:06 PM: Compilation took 2.969e-01 seconds
(CVXPY) Oct 06 04:34:06 PM: Solver (including time spent in interface) took 1.533e+00 seconds
Iteration: 17, Objective: 0.4184
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:06 PM: Your problem has 25130 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:07 PM: Finished problem compilation (took 3.125e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25130
  constraints   = 50130
  nnz(P)        = 0
  nnz(A)        = 385902
  cones (total) = 1
    : Nonnegative = 1,  numel = 50130

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.83e+02  1.00e+00  1.00e+00   ------   
  1  +5.7819e-01  +5.4926e+03  5.49e+03  4.48e-01  1.88e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2944e-01  +6.0069e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5634e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8580e+01  1.81e+01  4.93e-02  2.69e+01  5.59e-06  1.95e-01  4.56e-01  
  5  +5.0001e-01  +1.4747e+00  9.75e-01  2.91e-03  1.64e+00  2.78e-05  1.90e-01  2.10e-01  
  6  +5.0000e-01  +8.0256e-01  3.03e-01  9.03e-04  5.11e-01  9.98e-06  6.26e-02  6.76e-01  
  7  +4.9999e-01  +7.9690e-01  2.97e-01  8.84e-04  5.00e-01  1.66e-05  2.73e-02  6.53e-01  
  8  +4.9968e-01  +7.6696e-01  2.67e-01  5.27e-04  3.00e-01  1.47e-04  2.22e-03  9.38e-01  
  9  +4.9746e-01  +7.5802e-01  2.61e-01  9.74e-05  5.56e-02  1.09e-03  2.83e-04  8.74e-01  
 10  +4.9673e-01  +7.4176e-01  2.45e-01  5.77e-05  3.30e-02  1.31e-03  1.62e-04  6.39e-01  
 11  +4.9610e-01  +7.3800e-01  2.42e-01  4.62e-05  2.64e-02  1.50e-03  1.29e-04  2.62e-01  
 12  +4.9833e-01  +7.2678e-01  2.28e-01  4.19e-05  2.40e-02  4.50e-04  1.13e-04  7.62e-01  
 13  +4.9861e-01  +7.2382e-01  2.25e-01  3.94e-05  2.26e-02  3.31e-04  1.06e-04  3.44e-01  
 14  +4.9740e-01  +7.1871e-01  2.21e-01  2.22e-05  1.27e-02  5.23e-04  5.95e-05  5.18e-01  
 15  +4.9759e-01  +7.1835e-01  2.21e-01  2.16e-05  1.24e-02  4.06e-04  5.78e-05  2.60e-01  
 16  +4.9505e-01  +7.0780e-01  2.13e-01  1.29e-05  7.38e-03  6.02e-04  3.44e-05  4.45e-01  
 17  +4.9306e-01  +6.9835e-01  2.05e-01  1.12e-05  6.41e-03  5.34e-04  3.00e-05  2.67e-01  
 18  +4.8757e-01  +6.7190e-01  1.84e-01  9.30e-06  5.32e-03  3.24e-05  2.54e-05  8.77e-01  
 19  +4.8146e-01  +6.4934e-01  1.68e-01  7.87e-06  4.49e-03  1.33e-05  2.18e-05  5.74e-01  
 20  +4.5726e-01  +5.5449e-01  9.72e-02  3.55e-06  2.02e-03  7.42e-06  1.04e-05  5.84e-01  
 21  +4.4932e-01  +5.2645e-01  7.71e-02  2.77e-06  1.58e-03  4.69e-06  8.32e-06  3.49e-01  
 22  +4.4016e-01  +4.9428e-01  5.41e-02  1.89e-06  1.07e-03  1.95e-06  5.82e-06  6.34e-01  
 23  +4.3643e-01  +4.8103e-01  4.46e-02  1.54e-06  8.71e-04  1.43e-06  4.79e-06  3.24e-01  
 24  +4.3155e-01  +4.6323e-01  3.17e-02  1.06e-06  6.01e-04  5.60e-07  3.34e-06  9.29e-01  
 25  +4.2734e-01  +4.4879e-01  2.14e-02  7.16e-07  4.06e-04  3.74e-07  2.29e-06  4.01e-01  
 26  +4.2420e-01  +4.3755e-01  1.34e-02  4.43e-07  2.51e-04  2.11e-07  1.44e-06  9.90e-01  
 27  +4.2008e-01  +4.2389e-01  3.81e-03  1.27e-07  7.20e-05  5.98e-08  4.20e-07  7.52e-01  
 28  +4.1864e-01  +4.1916e-01  5.13e-04  1.71e-08  9.70e-06  7.99e-09  5.70e-08  8.74e-01  
 29  +4.1842e-01  +4.1843e-01  7.30e-06  2.44e-10  1.38e-07  1.11e-10  8.13e-10  9.90e-01  
 30  +4.1842e-01  +4.1842e-01  7.31e-08  2.44e-12  1.38e-09  1.11e-12  8.14e-12  9.90e-01  
 31  +4.1842e-01  +4.1842e-01  7.41e-10  2.47e-14  1.40e-11  1.12e-14  8.18e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5726546s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:08 PM: Optimal value: 4.184e-01
(CVXPY) Oct 06 04:34:08 PM: Compilation took 3.125e-01 seconds
(CVXPY) Oct 06 04:34:08 PM: Solver (including time spent in interface) took 1.641e+00 seconds
FULL MODEL:
  Accruacy: 0.5799
  Our objective: 0.1598

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1538)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.00032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.00024)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.00084)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.00032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.00036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.00084)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.00144)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.00024)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 55.181517124176025
Best over terms:
  Our final objective: 0.15380000000000002
    Its accruacy: 0.5769
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15380000000000002
  Highest accruacy: 0.5769
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

