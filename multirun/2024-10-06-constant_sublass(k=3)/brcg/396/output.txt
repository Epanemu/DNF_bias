Command:
python test_script.py -s constant_subclass -d 10 -n 50000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.156
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 10.

Computed total variation: 0.196
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:12 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:12 PM: Finished problem compilation (took 2.810e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 325021
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.7827e-01  +5.4921e+03  5.49e+03  4.48e-01  1.81e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2954e-01  +6.0157e+02  6.01e+02  1.86e-01  9.71e+01  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0862e-01  +1.5670e+02  1.56e+02  1.52e-01  8.05e+01  5.04e-05  2.66e-01  3.26e-01  
  4  +5.0144e-01  +1.8687e+01  1.82e+01  4.95e-02  2.61e+01  5.56e-06  1.96e-01  4.51e-01  
  5  +5.0002e-01  +1.4118e+00  9.12e-01  2.72e-03  1.48e+00  2.45e-05  1.93e-01  1.67e-01  
  6  +5.0001e-01  +8.6827e-01  3.68e-01  1.10e-03  5.99e-01  1.01e-05  8.35e-02  6.60e-01  
  7  +4.9999e-01  +6.6232e-01  1.62e-01  4.83e-04  2.64e-01  1.20e-05  1.72e-02  8.28e-01  
  8  +4.9786e-01  +7.9529e-01  2.97e-01  1.17e-04  6.41e-02  9.38e-04  3.63e-04  9.85e-01  
  9  +4.8478e-01  +7.1691e-01  2.32e-01  1.40e-05  7.69e-03  5.74e-03  4.20e-05  8.85e-01  
 10  +4.8374e-01  +6.8706e-01  2.03e-01  1.22e-05  6.73e-03  4.15e-03  3.70e-05  2.19e-01  
 11  +4.8474e-01  +6.6489e-01  1.80e-01  1.15e-05  6.29e-03  2.35e-03  3.47e-05  2.89e-01  
 12  +4.8203e-01  +6.0662e-01  1.25e-01  8.04e-06  4.41e-03  2.29e-05  2.49e-05  7.80e-01  
 13  +4.6614e-01  +5.1425e-01  4.81e-02  2.56e-06  1.40e-03  4.51e-06  8.45e-06  7.77e-01  
 14  +4.5542e-01  +4.6218e-01  6.75e-03  3.26e-07  1.79e-04  4.32e-07  1.18e-06  8.75e-01  
 15  +4.5309e-01  +4.5351e-01  4.16e-04  1.74e-08  9.52e-06  1.36e-08  7.29e-08  9.73e-01  
 16  +4.5296e-01  +4.5297e-01  4.19e-06  1.75e-10  9.57e-08  1.37e-10  7.35e-10  9.90e-01  
 17  +4.5296e-01  +4.5296e-01  4.19e-08  1.75e-12  9.57e-10  1.37e-12  7.35e-12  9.90e-01  
 18  +4.5296e-01  +4.5296e-01  4.21e-10  1.76e-14  9.60e-12  1.63e-14  8.67e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 727.2525ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:13 PM: Optimal value: 4.530e-01
(CVXPY) Oct 06 04:32:13 PM: Compilation took 2.810e-01 seconds
(CVXPY) Oct 06 04:32:13 PM: Solver (including time spent in interface) took 7.975e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4530
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:13 PM: Your problem has 25031 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:14 PM: Finished problem compilation (took 2.656e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25031
  constraints   = 50031
  nnz(P)        = 0
  nnz(A)        = 369316
  cones (total) = 1
    : Nonnegative = 1,  numel = 50031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7826e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2951e-01  +6.0131e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0861e-01  +1.5654e+02  1.56e+02  1.52e-01  8.31e+01  5.04e-05  2.66e-01  3.27e-01  
  4  +5.0143e-01  +1.8578e+01  1.81e+01  4.92e-02  2.68e+01  5.58e-06  1.96e-01  4.55e-01  
  5  +5.0002e-01  +1.5573e+00  1.06e+00  3.16e-03  1.77e+00  2.74e-05  1.91e-01  1.87e-01  
  6  +5.0000e-01  +6.4881e-01  1.49e-01  4.44e-04  2.51e-01  4.60e-06  3.26e-02  8.36e-01  
  7  +4.9998e-01  +8.2952e-01  3.30e-01  9.64e-04  5.44e-01  1.94e-05  1.43e-02  8.39e-01  
  8  +4.9978e-01  +8.0809e-01  3.08e-01  5.45e-04  3.10e-01  1.07e-04  2.08e-03  8.61e-01  
  9  +4.9487e-01  +7.8109e-01  2.86e-01  3.30e-05  1.88e-02  2.19e-03  9.09e-05  9.56e-01  
 10  +4.9067e-01  +7.3720e-01  2.47e-01  1.71e-05  9.77e-03  2.86e-03  4.68e-05  5.65e-01  
 11  +4.8930e-01  +7.2253e-01  2.33e-01  1.41e-05  8.06e-03  2.71e-03  3.84e-05  2.70e-01  
 12  +4.9019e-01  +7.1707e-01  2.27e-01  1.38e-05  7.89e-03  2.24e-03  3.74e-05  1.48e-01  
 13  +4.8941e-01  +7.0301e-01  2.14e-01  1.19e-05  6.77e-03  1.85e-03  3.20e-05  2.95e-01  
 14  +4.9021e-01  +6.9582e-01  2.06e-01  1.16e-05  6.61e-03  1.34e-03  3.12e-05  2.22e-01  
 15  +4.8626e-01  +6.7616e-01  1.90e-01  9.05e-06  5.16e-03  1.29e-03  2.45e-05  2.82e-01  
 16  +4.7794e-01  +6.1765e-01  1.40e-01  5.94e-06  3.38e-03  1.42e-05  1.65e-05  8.90e-01  
 17  +4.5018e-01  +5.1448e-01  6.43e-02  2.16e-06  1.23e-03  4.40e-06  6.35e-06  7.37e-01  
 18  +4.2546e-01  +4.3240e-01  6.94e-03  2.22e-07  1.25e-04  4.32e-08  6.98e-07  9.33e-01  
 19  +4.2214e-01  +4.2221e-01  7.63e-05  2.41e-09  1.36e-06  4.32e-10  7.67e-09  9.89e-01  
 20  +4.2210e-01  +4.2210e-01  7.63e-07  2.41e-11  1.36e-08  4.32e-12  7.67e-11  9.90e-01  
 21  +4.2210e-01  +4.2210e-01  7.64e-09  2.41e-13  1.36e-10  4.50e-14  7.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0039646s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:15 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 04:32:15 PM: Compilation took 2.656e-01 seconds
(CVXPY) Oct 06 04:32:15 PM: Solver (including time spent in interface) took 1.063e+00 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:15 PM: Your problem has 25041 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:15 PM: Finished problem compilation (took 2.500e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25041
  constraints   = 50041
  nnz(P)        = 0
  nnz(A)        = 371014
  cones (total) = 1
    : Nonnegative = 1,  numel = 50041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7825e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2950e-01  +6.0123e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5652e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.27e-01  
  4  +5.0143e-01  +1.8578e+01  1.81e+01  4.92e-02  2.68e+01  5.58e-06  1.96e-01  4.55e-01  
  5  +5.0002e-01  +1.4810e+00  9.81e-01  2.93e-03  1.65e+00  2.75e-05  1.91e-01  2.03e-01  
  6  +5.0000e-01  +7.1168e-01  2.12e-01  6.31e-04  3.56e-01  7.01e-06  4.57e-02  7.64e-01  
  7  +4.9999e-01  +7.3921e-01  2.39e-01  7.11e-04  4.01e-01  1.44e-05  2.05e-02  6.39e-01  
  8  +4.9949e-01  +7.2970e-01  2.30e-01  3.04e-04  1.73e-01  2.30e-04  1.03e-03  9.60e-01  
  9  +4.9673e-01  +7.1950e-01  2.23e-01  5.68e-05  3.24e-02  1.39e-03  1.60e-04  8.46e-01  
 10  +4.9620e-01  +7.1048e-01  2.14e-01  3.97e-05  2.26e-02  1.48e-03  1.10e-04  5.07e-01  
 11  +4.9503e-01  +7.0519e-01  2.10e-01  2.93e-05  1.67e-02  1.81e-03  8.06e-05  3.23e-01  
 12  +4.9672e-01  +6.9691e-01  2.00e-01  2.26e-05  1.29e-02  7.97e-04  6.07e-05  8.16e-01  
 13  +4.9659e-01  +6.9586e-01  1.99e-01  2.11e-05  1.20e-02  7.77e-04  5.65e-05  1.47e-01  
 14  +4.9583e-01  +6.8681e-01  1.91e-01  1.28e-05  7.33e-03  4.06e-04  3.41e-05  9.90e-01  
 15  +4.9269e-01  +6.7458e-01  1.82e-01  9.02e-06  5.15e-03  3.82e-04  2.40e-05  5.21e-01  
 16  +4.8518e-01  +6.4448e-01  1.59e-01  6.73e-06  3.84e-03  2.11e-04  1.83e-05  5.67e-01  
 17  +4.5362e-01  +5.2654e-01  7.29e-02  2.39e-06  1.36e-03  4.30e-05  6.93e-06  8.09e-01  
 18  +4.3927e-01  +4.7996e-01  4.07e-02  1.33e-06  7.50e-04  1.42e-05  4.01e-06  6.20e-01  
 19  +4.3887e-01  +4.7865e-01  3.98e-02  1.29e-06  7.31e-04  1.11e-05  3.92e-06  2.30e-01  
 20  +4.3864e-01  +4.7799e-01  3.94e-02  1.27e-06  7.20e-04  9.60e-06  3.86e-06  1.56e-01  
 21  +4.2680e-01  +4.3900e-01  1.22e-02  3.90e-07  2.21e-04  2.53e-06  1.23e-06  7.21e-01  
 22  +4.2182e-01  +4.2280e-01  9.82e-04  3.12e-08  1.77e-05  3.57e-08  9.98e-08  9.90e-01  
 23  +4.2137e-01  +4.2138e-01  1.16e-05  3.68e-10  2.08e-07  4.16e-10  1.18e-09  9.88e-01  
 24  +4.2136e-01  +4.2136e-01  1.16e-07  3.68e-12  2.08e-09  4.16e-12  1.18e-11  9.90e-01  
 25  +4.2136e-01  +4.2136e-01  1.16e-09  3.67e-14  2.08e-11  4.17e-14  1.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2144801s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:17 PM: Optimal value: 4.214e-01
(CVXPY) Oct 06 04:32:17 PM: Compilation took 2.500e-01 seconds
(CVXPY) Oct 06 04:32:17 PM: Solver (including time spent in interface) took 1.297e+00 seconds
Iteration: 3, Objective: 0.4214
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:17 PM: Your problem has 25047 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:17 PM: Finished problem compilation (took 2.500e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25047
  constraints   = 50047
  nnz(P)        = 0
  nnz(A)        = 371764
  cones (total) = 1
    : Nonnegative = 1,  numel = 50047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7825e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2950e-01  +6.0119e+02  6.01e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5651e+02  1.56e+02  1.52e-01  8.30e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8577e+01  1.81e+01  4.92e-02  2.68e+01  5.58e-06  1.96e-01  4.55e-01  
  5  +5.0001e-01  +1.3837e+00  8.84e-01  2.64e-03  1.48e+00  2.77e-05  1.90e-01  2.27e-01  
  6  +5.0000e-01  +7.2431e-01  2.24e-01  6.69e-04  3.78e-01  8.70e-06  4.89e-02  7.47e-01  
  7  +4.9998e-01  +7.3865e-01  2.39e-01  7.09e-04  4.00e-01  1.87e-05  1.91e-02  6.78e-01  
  8  +4.9935e-01  +7.2817e-01  2.29e-01  2.97e-04  1.69e-01  2.89e-04  1.01e-03  9.55e-01  
  9  +4.9165e-01  +7.0349e-01  2.12e-01  2.62e-05  1.49e-02  3.54e-03  7.36e-05  9.28e-01  
 10  +4.9102e-01  +6.9987e-01  2.09e-01  2.21e-05  1.26e-02  3.58e-03  6.14e-05  2.77e-01  
 11  +4.9154e-01  +6.9534e-01  2.04e-01  1.88e-05  1.07e-02  2.94e-03  5.17e-05  3.98e-01  
 12  +4.9136e-01  +6.8969e-01  1.98e-01  1.57e-05  8.95e-03  2.46e-03  4.28e-05  4.03e-01  
 13  +4.9185e-01  +6.8874e-01  1.97e-01  1.53e-05  8.74e-03  2.10e-03  4.16e-05  1.69e-01  
 14  +4.8402e-01  +6.5654e-01  1.73e-01  7.98e-06  4.55e-03  2.37e-03  2.18e-05  6.53e-01  
 15  +4.5635e-01  +5.4420e-01  8.79e-02  2.82e-06  1.60e-03  1.13e-03  8.09e-06  7.53e-01  
 16  +4.3709e-01  +4.7619e-01  3.91e-02  1.28e-06  7.25e-04  1.65e-04  3.91e-06  7.75e-01  
 17  +4.3614e-01  +4.7268e-01  3.65e-02  1.19e-06  6.73e-04  1.13e-04  3.64e-06  3.21e-01  
 18  +4.3367e-01  +4.6422e-01  3.05e-02  9.88e-07  5.59e-04  8.04e-05  3.05e-06  2.94e-01  
 19  +4.2404e-01  +4.3188e-01  7.85e-03  2.51e-07  1.42e-04  1.34e-05  7.97e-07  8.29e-01  
 20  +4.2068e-01  +4.2084e-01  1.65e-04  5.27e-09  2.98e-06  1.32e-07  1.70e-08  9.90e-01  
 21  +4.2060e-01  +4.2060e-01  1.65e-06  5.27e-11  2.98e-08  1.32e-09  1.70e-10  9.90e-01  
 22  +4.2060e-01  +4.2060e-01  1.65e-08  5.27e-13  2.98e-10  1.32e-11  1.70e-12  9.90e-01  
 23  +4.2060e-01  +4.2060e-01  1.65e-10  5.33e-15  2.99e-12  1.32e-13  1.70e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1376353s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:18 PM: Optimal value: 4.206e-01
(CVXPY) Oct 06 04:32:18 PM: Compilation took 2.500e-01 seconds
(CVXPY) Oct 06 04:32:18 PM: Solver (including time spent in interface) took 1.203e+00 seconds
Iteration: 4, Objective: 0.4206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:19 PM: Your problem has 25057 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:19 PM: Finished problem compilation (took 2.699e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25057
  constraints   = 50057
  nnz(P)        = 0
  nnz(A)        = 372687
  cones (total) = 1
    : Nonnegative = 1,  numel = 50057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2949e-01  +6.0111e+02  6.01e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5648e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8578e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0000e-01  +1.3311e+00  8.31e-01  2.48e-03  1.39e+00  2.78e-05  1.90e-01  2.43e-01  
  6  +5.0000e-01  +7.4221e-01  2.42e-01  7.23e-04  4.08e-01  1.01e-05  5.30e-02  7.29e-01  
  7  +4.9997e-01  +7.4193e-01  2.42e-01  7.19e-04  4.06e-01  2.04e-05  2.02e-02  6.81e-01  
  8  +4.9947e-01  +7.3164e-01  2.32e-01  3.76e-04  2.14e-01  2.40e-04  1.41e-03  9.39e-01  
  9  +4.9118e-01  +7.0575e-01  2.15e-01  2.81e-05  1.60e-02  3.77e-03  7.97e-05  9.44e-01  
 10  +4.9112e-01  +7.0091e-01  2.10e-01  2.29e-05  1.30e-02  3.46e-03  6.37e-05  4.02e-01  
 11  +4.9112e-01  +6.9956e-01  2.08e-01  2.18e-05  1.24e-02  3.35e-03  6.05e-05  1.12e-01  
 12  +4.9093e-01  +6.9339e-01  2.02e-01  1.78e-05  1.01e-02  2.89e-03  4.88e-05  4.17e-01  
 13  +4.9101e-01  +6.9328e-01  2.02e-01  1.77e-05  1.01e-02  2.83e-03  4.86e-05  2.48e-02  
 14  +4.9539e-01  +6.8967e-01  1.94e-01  1.54e-05  8.81e-03  1.04e-04  4.15e-05  9.90e-01  
 15  +4.8894e-01  +6.6051e-01  1.72e-01  7.92e-06  4.52e-03  6.09e-05  2.13e-05  9.90e-01  
 16  +4.7766e-01  +6.1897e-01  1.41e-01  5.41e-06  3.08e-03  5.02e-05  1.49e-05  3.76e-01  
 17  +4.5313e-01  +5.3051e-01  7.74e-02  2.86e-06  1.62e-03  1.90e-06  8.45e-06  7.62e-01  
 18  +4.4131e-01  +4.9028e-01  4.90e-02  1.71e-06  9.67e-04  1.09e-06  5.21e-06  4.48e-01  
 19  +4.3948e-01  +4.8414e-01  4.47e-02  1.48e-06  8.39e-04  7.55e-07  4.51e-06  7.88e-01  
 20  +4.3851e-01  +4.8097e-01  4.25e-02  1.40e-06  7.90e-04  7.14e-07  4.26e-06  2.75e-01  
 21  +4.2947e-01  +4.5075e-01  2.13e-02  6.92e-07  3.92e-04  3.49e-07  2.17e-06  5.88e-01  
 22  +4.2260e-01  +4.2793e-01  5.33e-03  1.72e-07  9.74e-05  8.61e-08  5.52e-07  7.94e-01  
 23  +4.2071e-01  +4.2171e-01  9.99e-04  3.22e-08  1.82e-05  1.62e-08  1.04e-07  8.21e-01  
 24  +4.2031e-01  +4.2040e-01  9.67e-05  3.11e-09  1.76e-06  1.44e-09  1.00e-08  9.87e-01  
 25  +4.2026e-01  +4.2026e-01  1.79e-06  5.74e-11  3.24e-08  2.69e-11  1.85e-10  9.83e-01  
 26  +4.2026e-01  +4.2026e-01  1.79e-08  5.74e-13  3.24e-10  2.69e-13  1.85e-12  9.90e-01  
 27  +4.2026e-01  +4.2026e-01  1.80e-10  5.72e-15  3.26e-12  3.42e-15  2.33e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4053296s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:20 PM: Optimal value: 4.203e-01
(CVXPY) Oct 06 04:32:20 PM: Compilation took 2.699e-01 seconds
(CVXPY) Oct 06 04:32:20 PM: Solver (including time spent in interface) took 1.464e+00 seconds
Iteration: 5, Objective: 0.4203
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:21 PM: Your problem has 25063 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:21 PM: Finished problem compilation (took 2.656e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25063
  constraints   = 50063
  nnz(P)        = 0
  nnz(A)        = 373267
  cones (total) = 1
    : Nonnegative = 1,  numel = 50063

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +5.4923e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2949e-01  +6.0109e+02  6.01e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5647e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8576e+01  1.81e+01  4.92e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0000e-01  +1.3243e+00  8.24e-01  2.46e-03  1.38e+00  2.79e-05  1.90e-01  2.45e-01  
  6  +5.0000e-01  +7.4516e-01  2.45e-01  7.31e-04  4.13e-01  1.04e-05  5.38e-02  7.20e-01  
  7  +4.9997e-01  +7.5227e-01  2.52e-01  7.49e-04  4.23e-01  2.12e-05  2.07e-02  6.96e-01  
  8  +4.9913e-01  +7.2564e-01  2.27e-01  2.58e-04  1.47e-01  3.87e-04  8.57e-04  9.67e-01  
  9  +4.9485e-01  +7.1279e-01  2.18e-01  4.93e-05  2.81e-02  2.18e-03  1.42e-04  8.35e-01  
 10  +4.9457e-01  +7.0627e-01  2.12e-01  3.52e-05  2.01e-02  2.10e-03  9.84e-05  5.68e-01  
 11  +4.9712e-01  +7.0093e-01  2.04e-01  2.59e-05  1.48e-02  6.54e-04  6.96e-05  9.90e-01  
 12  +4.9536e-01  +6.9430e-01  1.99e-01  1.72e-05  9.81e-03  8.76e-04  4.61e-05  3.92e-01  
 13  +4.9538e-01  +6.9414e-01  1.99e-01  1.70e-05  9.67e-03  8.36e-04  4.54e-05  6.77e-02  
 14  +4.9562e-01  +6.9388e-01  1.98e-01  1.60e-05  9.16e-03  6.13e-04  4.29e-05  3.37e-01  
 15  +4.9309e-01  +6.8421e-01  1.91e-01  1.18e-05  6.72e-03  7.45e-04  3.16e-05  2.88e-01  
 16  +4.9295e-01  +6.8375e-01  1.91e-01  1.18e-05  6.71e-03  7.28e-04  3.15e-05  1.77e-02  
 17  +4.8255e-01  +6.4342e-01  1.61e-01  6.31e-06  3.60e-03  8.67e-04  1.72e-05  5.15e-01  
 18  +4.5168e-01  +5.2421e-01  7.25e-02  2.59e-06  1.47e-03  3.06e-05  7.67e-06  7.85e-01  
 19  +4.4675e-01  +5.0841e-01  6.17e-02  2.15e-06  1.22e-03  1.96e-05  6.45e-06  3.51e-01  
 20  +4.3996e-01  +4.8710e-01  4.71e-02  1.56e-06  8.86e-04  9.88e-07  4.77e-06  9.62e-01  
 21  +4.3779e-01  +4.7971e-01  4.19e-02  1.38e-06  7.83e-04  8.50e-07  4.24e-06  2.40e-01  
 22  +4.2992e-01  +4.5310e-01  2.32e-02  7.58e-07  4.29e-04  4.53e-07  2.38e-06  4.93e-01  
 23  +4.2621e-01  +4.4004e-01  1.38e-02  4.46e-07  2.52e-04  2.27e-07  1.42e-06  9.86e-01  
 24  +4.2071e-01  +4.2216e-01  1.44e-03  4.68e-08  2.65e-05  2.32e-08  1.52e-07  9.61e-01  
 25  +4.2007e-01  +4.2009e-01  2.08e-05  6.76e-10  3.82e-07  3.30e-10  2.21e-09  9.86e-01  
 26  +4.2006e-01  +4.2006e-01  2.09e-07  6.77e-12  3.83e-09  3.30e-12  2.21e-11  9.90e-01  
 27  +4.2006e-01  +4.2006e-01  2.12e-09  6.88e-14  3.88e-11  3.32e-14  2.22e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3174643s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:22 PM: Optimal value: 4.201e-01
(CVXPY) Oct 06 04:32:22 PM: Compilation took 2.656e-01 seconds
(CVXPY) Oct 06 04:32:22 PM: Solver (including time spent in interface) took 1.391e+00 seconds
Iteration: 6, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:23 PM: Your problem has 25068 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:23 PM: Finished problem compilation (took 2.973e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25068
  constraints   = 50068
  nnz(P)        = 0
  nnz(A)        = 373798
  cones (total) = 1
    : Nonnegative = 1,  numel = 50068

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7823e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2948e-01  +6.0103e+02  6.01e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5646e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8578e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0000e-01  +1.3571e+00  8.57e-01  2.56e-03  1.44e+00  2.78e-05  1.90e-01  2.36e-01  
  6  +5.0000e-01  +7.6715e-01  2.67e-01  7.97e-04  4.50e-01  1.05e-05  5.81e-02  6.98e-01  
  7  +4.9998e-01  +7.9511e-01  2.95e-01  8.76e-04  4.94e-01  2.08e-05  2.25e-02  7.64e-01  
  8  +4.9937e-01  +7.2377e-01  2.24e-01  2.99e-04  1.70e-01  2.82e-04  1.03e-03  9.62e-01  
  9  +4.9666e-01  +7.1577e-01  2.19e-01  6.73e-05  3.83e-02  1.43e-03  1.94e-04  8.12e-01  
 10  +4.9464e-01  +7.0600e-01  2.11e-01  3.59e-05  2.04e-02  2.10e-03  1.00e-04  6.44e-01  
 11  +4.9471e-01  +7.0539e-01  2.11e-01  3.43e-05  1.95e-02  2.03e-03  9.56e-05  1.16e-01  
 12  +4.9693e-01  +7.0150e-01  2.05e-01  2.47e-05  1.41e-02  7.03e-04  6.64e-05  9.90e-01  
 13  +4.9390e-01  +6.8892e-01  1.95e-01  1.22e-05  6.94e-03  9.29e-04  3.25e-05  7.72e-01  
 14  +4.8942e-01  +6.6907e-01  1.80e-01  8.61e-06  4.91e-03  5.10e-04  2.32e-05  7.26e-01  
 15  +4.6443e-01  +5.7172e-01  1.07e-01  3.53e-06  2.01e-03  2.07e-04  9.97e-06  8.26e-01  
 16  +4.4693e-01  +5.1096e-01  6.40e-02  2.16e-06  1.22e-03  9.17e-05  6.43e-06  4.33e-01  
 17  +4.4440e-01  +5.0255e-01  5.82e-02  1.95e-06  1.10e-03  7.06e-05  5.84e-06  2.29e-01  
 18  +4.4239e-01  +4.9583e-01  5.34e-02  1.78e-06  1.01e-03  5.69e-05  5.37e-06  1.96e-01  
 19  +4.3668e-01  +4.7648e-01  3.98e-02  1.31e-06  7.39e-04  2.26e-05  4.01e-06  6.09e-01  
 20  +4.3102e-01  +4.5710e-01  2.61e-02  8.47e-07  4.79e-04  7.17e-06  2.65e-06  7.04e-01  
 21  +4.2706e-01  +4.4341e-01  1.64e-02  5.28e-07  2.98e-04  1.12e-06  1.67e-06  8.98e-01  
 22  +4.2120e-01  +4.2419e-01  2.99e-03  9.69e-08  5.48e-05  1.73e-07  3.15e-07  8.48e-01  
 23  +4.1991e-01  +4.1998e-01  7.20e-05  2.34e-09  1.32e-06  3.95e-09  7.64e-09  9.77e-01  
 24  +4.1988e-01  +4.1988e-01  7.23e-07  2.35e-11  1.33e-08  3.96e-11  7.68e-11  9.90e-01  
 25  +4.1988e-01  +4.1988e-01  7.23e-09  2.35e-13  1.33e-10  3.96e-13  7.68e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2218976s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:24 PM: Optimal value: 4.199e-01
(CVXPY) Oct 06 04:32:24 PM: Compilation took 2.973e-01 seconds
(CVXPY) Oct 06 04:32:24 PM: Solver (including time spent in interface) took 1.282e+00 seconds
Iteration: 7, Objective: 0.4199
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:25 PM: Your problem has 25078 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:25 PM: Finished problem compilation (took 2.656e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25078
  constraints   = 50078
  nnz(P)        = 0
  nnz(A)        = 374958
  cones (total) = 1
    : Nonnegative = 1,  numel = 50078

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0096e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5643e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8578e+01  1.81e+01  4.93e-02  2.68e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0000e-01  +1.3468e+00  8.47e-01  2.53e-03  1.42e+00  2.79e-05  1.90e-01  2.40e-01  
  6  +5.0000e-01  +7.6882e-01  2.69e-01  8.02e-04  4.52e-01  1.09e-05  5.83e-02  6.97e-01  
  7  +4.9997e-01  +7.6620e-01  2.66e-01  7.91e-04  4.46e-01  2.14e-05  2.14e-02  7.21e-01  
  8  +4.9921e-01  +7.3808e-01  2.39e-01  2.88e-04  1.63e-01  3.54e-04  9.68e-04  9.66e-01  
  9  +4.9452e-01  +7.2343e-01  2.29e-01  4.78e-05  2.72e-02  2.33e-03  1.37e-04  8.59e-01  
 10  +4.9459e-01  +7.1641e-01  2.22e-01  3.67e-05  2.09e-02  2.11e-03  1.03e-04  4.98e-01  
 11  +4.9532e-01  +7.1560e-01  2.20e-01  3.62e-05  2.06e-02  1.76e-03  1.00e-04  1.84e-01  
 12  +4.9300e-01  +7.0789e-01  2.15e-01  2.43e-05  1.39e-02  2.40e-03  6.71e-05  3.57e-01  
 13  +4.9304e-01  +7.0707e-01  2.14e-01  2.36e-05  1.34e-02  2.32e-03  6.50e-05  8.33e-02  
 14  +4.9610e-01  +7.0140e-01  2.05e-01  1.89e-05  1.08e-02  4.69e-04  5.08e-05  9.56e-01  
 15  +4.9115e-01  +6.8122e-01  1.90e-01  9.87e-06  5.63e-03  6.62e-04  2.65e-05  5.99e-01  
 16  +4.9061e-01  +6.7896e-01  1.88e-01  9.82e-06  5.60e-03  6.29e-04  2.65e-05  2.88e-02  
 17  +4.7836e-01  +6.2988e-01  1.52e-01  5.99e-06  3.41e-03  4.78e-04  1.65e-05  5.39e-01  
 18  +4.5987e-01  +5.5983e-01  1.00e-01  3.93e-06  2.23e-03  4.55e-06  1.15e-05  7.58e-01  
 19  +4.4987e-01  +5.2441e-01  7.45e-02  2.76e-06  1.57e-03  2.96e-06  8.30e-06  3.61e-01  
 20  +4.4460e-01  +5.0607e-01  6.15e-02  2.21e-06  1.25e-03  2.25e-06  6.73e-06  2.66e-01  
 21  +4.4253e-01  +4.9889e-01  5.64e-02  1.99e-06  1.12e-03  1.83e-06  6.07e-06  2.62e-01  
 22  +4.3682e-01  +4.7892e-01  4.21e-02  1.41e-06  7.95e-04  7.46e-07  4.34e-06  8.72e-01  
 23  +4.3097e-01  +4.5889e-01  2.79e-02  9.16e-07  5.18e-04  4.68e-07  2.87e-06  7.15e-01  
 24  +4.2714e-01  +4.4583e-01  1.87e-02  6.10e-07  3.45e-04  3.09e-07  1.94e-06  5.80e-01  
 25  +4.2096e-01  +4.2520e-01  4.24e-03  1.39e-07  7.83e-05  6.91e-08  4.51e-07  7.95e-01  
 26  +4.1918e-01  +4.1931e-01  1.31e-04  4.29e-09  2.43e-06  2.09e-09  1.41e-08  9.70e-01  
 27  +4.1912e-01  +4.1912e-01  1.32e-06  4.31e-11  2.43e-08  2.09e-11  1.42e-10  9.90e-01  
 28  +4.1912e-01  +4.1912e-01  1.32e-08  4.31e-13  2.43e-10  2.09e-13  1.42e-12  9.90e-01  
 29  +4.1912e-01  +4.1912e-01  1.32e-10  4.20e-15  2.43e-12  2.10e-15  1.42e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4498162s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:26 PM: Optimal value: 4.191e-01
(CVXPY) Oct 06 04:32:26 PM: Compilation took 2.656e-01 seconds
(CVXPY) Oct 06 04:32:26 PM: Solver (including time spent in interface) took 1.516e+00 seconds
Iteration: 8, Objective: 0.4191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:27 PM: Your problem has 25081 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:27 PM: Finished problem compilation (took 2.656e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25081
  constraints   = 50081
  nnz(P)        = 0
  nnz(A)        = 375149
  cones (total) = 1
    : Nonnegative = 1,  numel = 50081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2947e-01  +6.0091e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5642e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0143e-01  +1.8579e+01  1.81e+01  4.93e-02  2.68e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.3692e+00  8.69e-01  2.59e-03  1.46e+00  2.79e-05  1.90e-01  2.34e-01  
  6  +5.0000e-01  +7.6960e-01  2.70e-01  8.04e-04  4.54e-01  1.05e-05  5.80e-02  6.98e-01  
  7  +4.9997e-01  +7.6970e-01  2.70e-01  8.01e-04  4.52e-01  2.07e-05  2.15e-02  7.19e-01  
  8  +4.9913e-01  +7.3435e-01  2.35e-01  2.54e-04  1.45e-01  3.88e-04  8.31e-04  9.73e-01  
  9  +4.9447e-01  +7.2010e-01  2.26e-01  4.50e-05  2.56e-02  2.34e-03  1.28e-04  8.47e-01  
 10  +4.9493e-01  +7.1668e-01  2.22e-01  3.96e-05  2.25e-02  2.02e-03  1.11e-04  3.42e-01  
 11  +4.9600e-01  +7.1329e-01  2.17e-01  3.37e-05  1.92e-02  1.42e-03  9.24e-05  5.29e-01  
 12  +4.9704e-01  +7.1237e-01  2.15e-01  3.22e-05  1.84e-02  9.39e-04  8.74e-05  4.00e-01  
 13  +4.9560e-01  +7.0743e-01  2.12e-01  2.27e-05  1.30e-02  1.26e-03  6.14e-05  3.13e-01  
 14  +4.9712e-01  +7.0692e-01  2.10e-01  2.09e-05  1.19e-02  4.89e-04  5.59e-05  6.90e-01  
 15  +4.9252e-01  +6.8705e-01  1.95e-01  9.29e-06  5.30e-03  7.25e-04  2.48e-05  7.75e-01  
 16  +4.8747e-01  +6.6537e-01  1.78e-01  8.23e-06  4.69e-03  3.60e-04  2.24e-05  4.53e-01  
 17  +4.6681e-01  +5.8309e-01  1.16e-01  4.31e-06  2.45e-03  1.70e-04  1.22e-05  6.28e-01  
 18  +4.4971e-01  +5.2277e-01  7.31e-02  2.60e-06  1.48e-03  8.35e-05  7.76e-06  4.23e-01  
 19  +4.4600e-01  +5.1043e-01  6.44e-02  2.26e-06  1.28e-03  5.77e-05  6.79e-06  3.02e-01  
 20  +4.4391e-01  +5.0357e-01  5.97e-02  2.06e-06  1.16e-03  3.93e-05  6.22e-06  3.26e-01  
 21  +4.3822e-01  +4.8455e-01  4.63e-02  1.54e-06  8.69e-04  9.68e-07  4.71e-06  9.90e-01  
 22  +4.3325e-01  +4.6743e-01  3.42e-02  1.12e-06  6.36e-04  6.69e-07  3.50e-06  4.71e-01  
 23  +4.2818e-01  +4.5012e-01  2.19e-02  7.20e-07  4.07e-04  4.20e-07  2.28e-06  4.12e-01  
 24  +4.2187e-01  +4.2845e-01  6.58e-03  2.15e-07  1.21e-04  1.06e-07  6.96e-07  9.90e-01  
 25  +4.1908e-01  +4.1936e-01  2.73e-04  8.92e-09  5.04e-06  4.19e-09  2.93e-08  9.84e-01  
 26  +4.1896e-01  +4.1896e-01  2.75e-06  8.98e-11  5.08e-08  4.21e-11  2.96e-10  9.90e-01  
 27  +4.1896e-01  +4.1896e-01  2.75e-08  8.99e-13  5.08e-10  4.21e-13  2.96e-12  9.90e-01  
 28  +4.1896e-01  +4.1896e-01  2.78e-10  9.11e-15  5.15e-12  4.23e-15  2.98e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3381836s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:28 PM: Optimal value: 4.190e-01
(CVXPY) Oct 06 04:32:28 PM: Compilation took 2.656e-01 seconds
(CVXPY) Oct 06 04:32:28 PM: Solver (including time spent in interface) took 1.407e+00 seconds
Iteration: 9, Objective: 0.4190
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:32:29 PM: Your problem has 25085 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:32:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:32:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:32:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:32:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:32:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:32:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:32:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:32:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:32:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:32:29 PM: Finished problem compilation (took 2.812e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25085
  constraints   = 50085
  nnz(P)        = 0
  nnz(A)        = 375457
  cones (total) = 1
    : Nonnegative = 1,  numel = 50085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4926e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2946e-01  +6.0087e+02  6.00e+02  1.86e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5641e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0143e-01  +1.8581e+01  1.81e+01  4.93e-02  2.68e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.3955e+00  8.95e-01  2.67e-03  1.50e+00  2.79e-05  1.90e-01  2.27e-01  
  6  +5.0000e-01  +7.8081e-01  2.81e-01  8.38e-04  4.73e-01  1.04e-05  5.99e-02  6.88e-01  
  7  +4.9998e-01  +7.7045e-01  2.70e-01  8.04e-04  4.53e-01  1.93e-05  2.26e-02  7.08e-01  
  8  +4.9930e-01  +7.4124e-01  2.42e-01  3.04e-04  1.72e-01  3.13e-04  1.03e-03  9.69e-01  
  9  +4.9576e-01  +7.2990e-01  2.34e-01  5.86e-05  3.33e-02  1.80e-03  1.68e-04  8.38e-01  
 10  +4.9538e-01  +7.1881e-01  2.23e-01  3.92e-05  2.24e-02  1.77e-03  1.09e-04  6.21e-01  
 11  +4.9611e-01  +7.1747e-01  2.21e-01  3.79e-05  2.16e-02  1.42e-03  1.04e-04  2.49e-01  
 12  +4.9376e-01  +7.0901e-01  2.15e-01  2.37e-05  1.35e-02  2.04e-03  6.48e-05  4.22e-01  
 13  +4.9380e-01  +7.0843e-01  2.15e-01  2.30e-05  1.31e-02  1.97e-03  6.30e-05  7.55e-02  
 14  +4.9580e-01  +7.0522e-01  2.09e-01  1.97e-05  1.13e-02  7.93e-04  5.30e-05  7.45e-01  
 15  +4.9252e-01  +6.9254e-01  2.00e-01  1.26e-05  7.20e-03  1.07e-03  3.39e-05  3.97e-01  
 16  +4.9208e-01  +6.9011e-01  1.98e-01  1.21e-05  6.89e-03  9.73e-04  3.25e-05  1.35e-01  
 17  +4.9108e-01  +6.8034e-01  1.89e-01  1.09e-05  6.23e-03  2.03e-04  2.95e-05  7.57e-01  
 18  +4.7913e-01  +6.3347e-01  1.54e-01  6.20e-06  3.53e-03  1.68e-04  1.71e-05  6.02e-01  
 19  +4.5213e-01  +5.3129e-01  7.92e-02  2.83e-06  1.61e-03  5.15e-05  8.37e-06  6.06e-01  
 20  +4.4918e-01  +5.2147e-01  7.23e-02  2.56e-06  1.45e-03  4.02e-05  7.62e-06  2.11e-01  
 21  +4.4361e-01  +5.0238e-01  5.88e-02  2.05e-06  1.16e-03  3.07e-05  6.20e-06  2.23e-01  
 22  +4.4163e-01  +4.9572e-01  5.41e-02  1.86e-06  1.05e-03  2.44e-05  5.67e-06  2.10e-01  
 23  +4.3643e-01  +4.7816e-01  4.17e-02  1.39e-06  7.86e-04  5.88e-06  4.29e-06  7.84e-01  
 24  +4.3135e-01  +4.6079e-01  2.94e-02  9.67e-07  5.47e-04  2.33e-06  3.03e-06  6.56e-01  
 25  +4.2556e-01  +4.4084e-01  1.53e-02  4.98e-07  2.81e-04  3.12e-07  1.59e-06  9.90e-01  
 26  +4.1948e-01  +4.2074e-01  1.26e-03  4.11e-08  2.33e-05  2.05e-08  1.35e-07  9.90e-01  
 27  +4.1893e-01  +4.1894e-01  1.59e-05  5.19e-10  2.94e-07  2.58e-10  1.70e-09  9.87e-01  
 28  +4.1892e-01  +4.1892e-01  1.59e-07  5.20e-12  2.94e-09  2.59e-12  1.71e-11  9.90e-01  
 29  +4.1892e-01  +4.1892e-01  1.62e-09  5.29e-14  2.99e-11  2.60e-14  1.72e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4458621s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:32:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:32:30 PM: Optimal value: 4.189e-01
(CVXPY) Oct 06 04:32:30 PM: Compilation took 2.812e-01 seconds
(CVXPY) Oct 06 04:32:30 PM: Solver (including time spent in interface) took 1.516e+00 seconds
FULL MODEL:
  Accruacy: 0.58124
  Our objective: 0.16248000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.156)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.00084)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.00052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.00044)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.00052)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.00096)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.00076)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.00056)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.00036)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.00084)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.00068)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 29.948543787002563
Best over terms:
  Our final objective: 0.15600000000000006
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15600000000000006
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

