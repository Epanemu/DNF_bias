Command:
python test_script.py -s constant_subclass -d 9 -n 1000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.122
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.56
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:19 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:19 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +5.0075e+02  5.00e+02  9.56e-01  3.59e+01  1.00e+00  1.00e+00   ------   
  1  +5.8064e-01  +1.0888e+02  1.08e+02  4.15e-01  2.30e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3051e-01  +1.2483e+01  1.20e+01  1.44e-01  1.01e+01  1.65e-02  2.71e-01  9.48e-01  
  3  +5.0612e-01  +3.1359e+00  2.63e+00  5.50e-02  3.77e+00  4.17e-05  2.36e-01  4.55e-01  
  4  +5.0056e-01  +7.2559e-01  2.25e-01  5.03e-03  3.63e-01  9.87e-06  6.36e-02  8.75e-01  
  5  +5.0014e-01  +6.4516e-01  1.45e-01  3.08e-03  2.23e-01  1.28e-05  2.07e-02  7.47e-01  
  6  +4.9742e-01  +6.2587e-01  1.28e-01  7.37e-04  5.43e-02  7.88e-05  2.38e-03  8.95e-01  
  7  +4.8995e-01  +5.7940e-01  8.95e-02  2.57e-04  1.89e-02  1.13e-04  8.26e-04  6.87e-01  
  8  +4.7920e-01  +5.2881e-01  4.96e-02  1.17e-04  8.57e-03  5.06e-05  4.21e-04  5.83e-01  
  9  +4.7744e-01  +5.2055e-01  4.31e-02  1.00e-04  7.35e-03  3.67e-05  3.69e-04  3.24e-01  
 10  +4.6730e-01  +4.7676e-01  9.46e-03  1.93e-05  1.42e-03  2.27e-06  7.88e-05  9.90e-01  
 11  +4.6423e-01  +4.6459e-01  3.62e-04  7.19e-07  5.28e-05  1.39e-07  3.03e-06  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  3.64e-06  7.23e-09  5.30e-07  1.40e-09  3.05e-08  9.90e-01  
 13  +4.6410e-01  +4.6410e-01  3.64e-08  7.23e-11  5.30e-09  1.40e-11  3.06e-10  9.90e-01  
 14  +4.6410e-01  +4.6410e-01  3.64e-10  7.23e-13  5.30e-11  1.40e-13  3.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.79ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:19 PM: Optimal value: 4.641e-01
(CVXPY) Oct 06 04:16:19 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:16:19 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:19 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:19 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 6875
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9980e-01  +5.0134e+02  5.01e+02  9.56e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7960e-01  +1.0905e+02  1.08e+02  4.18e-01  2.35e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2915e-01  +1.2218e+01  1.17e+01  1.41e-01  1.01e+01  1.68e-02  2.67e-01  9.64e-01  
  3  +5.0555e-01  +3.0114e+00  2.51e+00  5.28e-02  3.72e+00  4.30e-05  2.24e-01  5.33e-01  
  4  +5.0135e-01  +1.1340e+00  6.33e-01  1.42e-02  1.04e+00  1.63e-05  1.11e-01  5.73e-01  
  5  +4.9985e-01  +7.4382e-01  2.44e-01  5.04e-03  3.75e-01  1.64e-05  2.66e-02  8.34e-01  
  6  +4.9170e-01  +7.2390e-01  2.32e-01  1.07e-03  8.21e-02  1.10e-04  3.21e-03  9.10e-01  
  7  +4.8456e-01  +6.5381e-01  1.69e-01  6.65e-04  5.06e-02  7.66e-05  2.05e-03  4.58e-01  
  8  +4.8416e-01  +6.5630e-01  1.72e-01  5.61e-04  4.26e-02  7.96e-05  1.68e-03  4.46e-01  
  9  +4.8001e-01  +6.3035e-01  1.50e-01  3.82e-04  2.90e-02  7.47e-05  1.13e-03  5.97e-01  
 10  +4.7689e-01  +6.1406e-01  1.37e-01  2.98e-04  2.27e-02  7.25e-05  8.82e-04  4.60e-01  
 11  +4.7029e-01  +5.7511e-01  1.05e-01  2.47e-04  1.88e-02  4.49e-05  7.44e-04  5.78e-01  
 12  +4.5212e-01  +5.0067e-01  4.85e-02  8.59e-05  6.49e-03  2.52e-05  2.70e-04  7.06e-01  
 13  +4.4098e-01  +4.5456e-01  1.36e-02  2.33e-05  1.75e-03  6.71e-06  7.76e-05  7.36e-01  
 14  +4.3658e-01  +4.3779e-01  1.21e-03  2.03e-06  1.52e-04  5.78e-07  7.12e-06  9.23e-01  
 15  +4.3618e-01  +4.3637e-01  1.87e-04  3.14e-07  2.36e-05  1.13e-07  1.11e-06  9.38e-01  
 16  +4.3610e-01  +4.3610e-01  1.92e-06  3.23e-09  2.42e-07  1.16e-09  1.14e-08  9.90e-01  
 17  +4.3610e-01  +4.3610e-01  1.92e-08  3.23e-11  2.42e-09  1.16e-11  1.14e-10  9.90e-01  
 18  +4.3610e-01  +4.3610e-01  1.92e-10  3.23e-13  2.42e-11  1.16e-13  1.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.8785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:19 PM: Optimal value: 4.361e-01
(CVXPY) Oct 06 04:16:19 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:19 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 2, Objective: 0.4361
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:19 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:19 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7297
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0175e+02  5.01e+02  9.56e-01  3.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.7837e-01  +1.0911e+02  1.09e+02  4.19e-01  2.35e+01  3.78e-03  5.78e-01  5.86e-01  
  2  +5.2808e-01  +1.2010e+01  1.15e+01  1.38e-01  9.86e+00  1.70e-02  2.62e-01  9.79e-01  
  3  +5.0508e-01  +2.9076e+00  2.40e+00  5.07e-02  3.59e+00  4.44e-05  2.10e-01  6.05e-01  
  4  +5.0141e-01  +1.2773e+00  7.76e-01  1.72e-02  1.26e+00  2.03e-05  1.06e-01  5.37e-01  
  5  +4.9824e-01  +1.0096e+00  5.11e-01  6.64e-03  5.03e-01  5.17e-05  2.11e-02  9.47e-01  
  6  +4.8592e-01  +8.6949e-01  3.84e-01  1.59e-03  1.23e-01  1.43e-04  4.56e-03  7.90e-01  
  7  +4.7162e-01  +7.3634e-01  2.65e-01  8.30e-04  6.32e-02  1.12e-04  2.44e-03  5.68e-01  
  8  +4.6111e-01  +6.8325e-01  2.22e-01  5.09e-04  3.88e-02  1.18e-04  1.50e-03  4.38e-01  
  9  +4.5486e-01  +6.3810e-01  1.83e-01  4.79e-04  3.63e-02  7.72e-05  1.47e-03  1.63e-01  
 10  +4.3131e-01  +5.2905e-01  9.77e-02  1.93e-04  1.45e-02  5.00e-05  6.14e-04  7.16e-01  
 11  +4.2029e-01  +4.7657e-01  5.63e-02  1.08e-04  8.12e-03  3.05e-05  3.58e-04  5.69e-01  
 12  +4.1849e-01  +4.6902e-01  5.05e-02  9.43e-05  7.09e-03  2.85e-05  3.14e-04  2.50e-01  
 13  +4.0807e-01  +4.2336e-01  1.53e-02  2.81e-05  2.11e-03  9.92e-06  9.79e-05  9.90e-01  
 14  +4.0264e-01  +4.0339e-01  7.52e-04  1.37e-06  1.02e-04  4.54e-07  4.92e-06  9.62e-01  
 15  +4.0239e-01  +4.0251e-01  1.16e-04  2.09e-07  1.57e-05  7.06e-08  7.55e-07  8.78e-01  
 16  +4.0235e-01  +4.0235e-01  1.20e-06  2.18e-09  1.63e-07  7.36e-10  7.87e-09  9.90e-01  
 17  +4.0235e-01  +4.0235e-01  1.20e-08  2.18e-11  1.63e-09  7.36e-12  7.87e-11  9.90e-01  
 18  +4.0235e-01  +4.0235e-01  1.20e-10  2.18e-13  1.64e-11  7.37e-14  7.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.1045ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:19 PM: Optimal value: 4.024e-01
(CVXPY) Oct 06 04:16:19 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:16:19 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 3, Objective: 0.4024
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:19 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:19 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7568
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0185e+02  5.01e+02  9.56e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.7726e-01  +1.0911e+02  1.09e+02  4.20e-01  2.33e+01  3.78e-03  5.78e-01  5.86e-01  
  2  +5.2714e-01  +1.1871e+01  1.13e+01  1.36e-01  9.62e+00  1.72e-02  2.57e-01  9.90e-01  
  3  +5.0496e-01  +2.8568e+00  2.35e+00  5.00e-02  3.56e+00  4.73e-05  1.94e-01  6.69e-01  
  4  +5.0117e-01  +1.2708e+00  7.70e-01  1.70e-02  1.25e+00  2.35e-05  8.83e-02  5.77e-01  
  5  +4.9448e-01  +1.0682e+00  5.74e-01  4.41e-03  3.40e-01  9.37e-05  1.22e-02  9.37e-01  
  6  +4.7534e-01  +8.9164e-01  4.16e-01  1.29e-03  9.99e-02  1.82e-04  3.52e-03  7.25e-01  
  7  +4.5691e-01  +7.8448e-01  3.28e-01  8.00e-04  6.11e-02  1.57e-04  2.28e-03  5.09e-01  
  8  +4.2824e-01  +6.1521e-01  1.87e-01  4.30e-04  3.24e-02  7.22e-05  1.37e-03  7.21e-01  
  9  +4.0450e-01  +5.0063e-01  9.61e-02  2.03e-04  1.52e-02  3.76e-05  7.07e-04  6.42e-01  
 10  +3.9670e-01  +4.6586e-01  6.92e-02  1.43e-04  1.07e-02  2.84e-05  5.15e-04  3.79e-01  
 11  +3.8164e-01  +4.0010e-01  1.85e-02  3.70e-05  2.76e-03  7.88e-06  1.45e-04  8.21e-01  
 12  +3.7576e-01  +3.7650e-01  7.33e-04  1.45e-06  1.08e-04  2.73e-07  6.01e-06  9.66e-01  
 13  +3.7550e-01  +3.7551e-01  7.35e-06  1.45e-08  1.08e-06  2.73e-09  6.05e-08  9.90e-01  
 14  +3.7550e-01  +3.7550e-01  7.35e-08  1.45e-10  1.08e-08  2.73e-11  6.05e-10  9.90e-01  
 15  +3.7550e-01  +3.7550e-01  7.35e-10  1.45e-12  1.08e-10  2.73e-13  6.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.4518ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:19 PM: Optimal value: 3.755e-01
(CVXPY) Oct 06 04:16:19 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:19 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 4, Objective: 0.3755
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:20 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Finished problem compilation (took 1.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 7815
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0157e+02  5.01e+02  9.56e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.7514e-01  +1.0909e+02  1.09e+02  4.21e-01  2.32e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2578e-01  +1.2028e+01  1.15e+01  1.35e-01  9.53e+00  1.74e-02  2.55e-01  9.90e-01  
  3  +5.0541e-01  +2.4533e+00  1.95e+00  4.31e-02  3.16e+00  5.49e-05  1.37e-01  8.49e-01  
  4  +4.9997e-01  +1.1817e+00  6.82e-01  1.25e-02  9.46e-01  5.89e-05  3.98e-02  7.64e-01  
  5  +4.8716e-01  +1.0973e+00  6.10e-01  2.89e-03  2.26e-01  2.34e-04  7.47e-03  8.30e-01  
  6  +4.6566e-01  +8.8658e-01  4.21e-01  1.34e-03  1.04e-01  2.05e-04  3.64e-03  6.09e-01  
  7  +4.4389e-01  +7.6276e-01  3.19e-01  8.10e-04  6.17e-02  1.63e-04  2.32e-03  4.84e-01  
  8  +4.2434e-01  +6.5456e-01  2.30e-01  5.74e-04  4.33e-02  1.01e-04  1.75e-03  4.56e-01  
  9  +4.1173e-01  +5.9120e-01  1.79e-01  4.22e-04  3.18e-02  7.83e-05  1.34e-03  3.05e-01  
 10  +3.9521e-01  +5.0924e-01  1.14e-01  2.55e-04  1.91e-02  4.88e-05  8.57e-04  4.50e-01  
 11  +3.7540e-01  +4.1228e-01  3.69e-02  7.86e-05  5.85e-03  1.71e-05  2.86e-04  8.71e-01  
 12  +3.6768e-01  +3.7735e-01  9.67e-03  2.03e-05  1.51e-03  4.42e-06  7.79e-05  7.70e-01  
 13  +3.6513e-01  +3.6643e-01  1.30e-03  2.71e-06  2.01e-04  5.81e-07  1.08e-05  8.93e-01  
 14  +3.6476e-01  +3.6495e-01  1.83e-04  3.80e-07  2.82e-05  8.13e-08  1.56e-06  9.22e-01  
 15  +3.6470e-01  +3.6471e-01  3.75e-06  7.77e-09  5.76e-07  1.67e-09  3.23e-08  9.86e-01  
 16  +3.6470e-01  +3.6470e-01  3.76e-08  7.78e-11  5.77e-09  1.67e-11  3.23e-10  9.90e-01  
 17  +3.6470e-01  +3.6470e-01  3.82e-10  7.92e-13  5.87e-11  1.71e-13  3.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.6453ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:20 PM: Optimal value: 3.647e-01
(CVXPY) Oct 06 04:16:20 PM: Compilation took 1.565e-02 seconds
(CVXPY) Oct 06 04:16:20 PM: Solver (including time spent in interface) took 1.560e-02 seconds
Iteration: 5, Objective: 0.3647
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:20 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 7965
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0170e+02  5.01e+02  9.57e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.7387e-01  +1.0918e+02  1.09e+02  4.22e-01  2.30e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2508e-01  +1.2139e+01  1.16e+01  1.35e-01  9.46e+00  1.76e-02  2.55e-01  9.90e-01  
  3  +5.0566e-01  +2.2303e+00  1.72e+00  3.76e-02  2.80e+00  5.94e-05  1.12e-01  9.01e-01  
  4  +5.0041e-01  +1.5773e+00  1.08e+00  1.16e-02  8.94e-01  1.45e-04  2.99e-02  8.13e-01  
  5  +4.8682e-01  +1.3904e+00  9.04e-01  3.49e-03  2.73e-01  3.29e-04  8.71e-03  7.27e-01  
  6  +4.5571e-01  +9.4396e-01  4.88e-01  1.42e-03  1.09e-01  1.89e-04  3.85e-03  7.24e-01  
  7  +4.4143e-01  +8.6054e-01  4.19e-01  1.08e-03  8.26e-02  1.72e-04  3.02e-03  4.05e-01  
  8  +4.0371e-01  +6.0573e-01  2.02e-01  5.03e-04  3.77e-02  6.55e-05  1.60e-03  6.95e-01  
  9  +3.7837e-01  +4.6943e-01  9.11e-02  2.13e-04  1.58e-02  2.80e-05  7.53e-04  5.72e-01  
 10  +3.6824e-01  +4.1785e-01  4.96e-02  1.13e-04  8.37e-03  1.92e-05  4.20e-04  6.75e-01  
 11  +3.5923e-01  +3.7464e-01  1.54e-02  3.44e-05  2.54e-03  5.93e-06  1.36e-04  7.04e-01  
 12  +3.5556e-01  +3.5772e-01  2.16e-03  4.75e-06  3.50e-04  8.52e-07  1.98e-05  9.07e-01  
 13  +3.5498e-01  +3.5523e-01  2.50e-04  5.49e-07  4.04e-05  9.52e-08  2.35e-06  9.12e-01  
 14  +3.5490e-01  +3.5491e-01  1.07e-05  2.35e-08  1.73e-06  4.46e-09  1.03e-07  9.90e-01  
 15  +3.5490e-01  +3.5490e-01  1.08e-07  2.36e-10  1.74e-08  4.48e-11  1.03e-09  9.90e-01  
 16  +3.5490e-01  +3.5490e-01  1.08e-09  2.36e-12  1.74e-10  4.48e-13  1.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.9117ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:20 PM: Optimal value: 3.549e-01
(CVXPY) Oct 06 04:16:20 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:20 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 6, Objective: 0.3549
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:20 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8184
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0171e+02  5.01e+02  9.57e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.7282e-01  +1.0922e+02  1.09e+02  4.23e-01  2.29e+01  3.79e-03  5.77e-01  5.86e-01  
  2  +5.2436e-01  +1.2226e+01  1.17e+01  1.35e-01  9.38e+00  1.77e-02  2.54e-01  9.90e-01  
  3  +5.0582e-01  +2.0376e+00  1.53e+00  3.24e-02  2.44e+00  6.40e-05  9.22e-02  9.28e-01  
  4  +5.0589e-01  +2.1754e+00  1.67e+00  2.29e-02  1.77e+00  1.18e-04  5.70e-02  4.37e-01  
  5  +4.9714e-01  +1.9905e+00  1.49e+00  7.04e-03  5.53e-01  3.18e-04  1.69e-02  8.83e-01  
  6  +4.7601e-01  +1.3000e+00  8.24e-01  2.76e-03  2.15e-01  2.44e-04  6.96e-03  7.10e-01  
  7  +4.5402e-01  +1.0681e+00  6.14e-01  1.65e-03  1.27e-01  2.23e-04  4.37e-03  5.74e-01  
  8  +4.3500e-01  +8.8960e-01  4.55e-01  1.24e-03  9.40e-02  1.58e-04  3.49e-03  4.43e-01  
  9  +3.9606e-01  +6.0996e-01  2.14e-01  5.27e-04  3.94e-02  7.61e-05  1.68e-03  7.75e-01  
 10  +3.7110e-01  +4.6707e-01  9.60e-02  2.26e-04  1.68e-02  3.36e-05  8.03e-04  5.90e-01  
 11  +3.5758e-01  +3.9553e-01  3.79e-02  8.71e-05  6.46e-03  1.57e-05  3.34e-04  7.77e-01  
 12  +3.5051e-01  +3.6237e-01  1.19e-02  2.66e-05  1.98e-03  5.07e-06  1.09e-04  7.79e-01  
 13  +3.4732e-01  +3.4798e-01  6.65e-04  1.48e-06  1.11e-04  2.60e-07  6.35e-06  9.72e-01  
 14  +3.4713e-01  +3.4721e-01  7.90e-05  1.74e-07  1.30e-05  3.04e-08  7.79e-07  9.31e-01  
 15  +3.4710e-01  +3.4710e-01  1.01e-06  2.21e-09  1.65e-07  3.86e-10  9.98e-09  9.90e-01  
 16  +3.4710e-01  +3.4710e-01  1.01e-08  2.22e-11  1.65e-09  3.86e-12  9.99e-11  9.90e-01  
 17  +3.4710e-01  +3.4710e-01  1.01e-10  2.22e-13  1.65e-11  3.94e-14  1.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.3183ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:20 PM: Optimal value: 3.471e-01
(CVXPY) Oct 06 04:16:20 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:20 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 7, Objective: 0.3471
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:20 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8340
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0174e+02  5.01e+02  9.57e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.7154e-01  +1.0919e+02  1.09e+02  4.24e-01  2.27e+01  3.80e-03  5.76e-01  5.86e-01  
  2  +5.2363e-01  +1.2311e+01  1.18e+01  1.35e-01  9.26e+00  1.78e-02  2.53e-01  9.90e-01  
  3  +5.0741e-01  +2.7728e+00  2.27e+00  4.32e-02  3.22e+00  1.63e-03  1.11e-01  7.56e-01  
  4  +5.0556e-01  +2.5145e+00  2.01e+00  2.75e-02  2.10e+00  2.38e-03  6.76e-02  4.18e-01  
  5  +5.0243e-01  +2.3140e+00  1.81e+00  2.33e-02  1.76e+00  1.35e-03  6.24e-02  3.55e-01  
  6  +4.8716e-01  +1.7141e+00  1.23e+00  4.21e-03  3.31e-01  3.94e-03  1.01e-02  8.47e-01  
  7  +4.6799e-01  +1.3806e+00  9.13e-01  2.74e-03  2.13e-01  2.42e-03  6.90e-03  4.34e-01  
  8  +4.4837e-01  +1.1523e+00  7.04e-01  1.89e-03  1.45e-01  1.50e-03  4.98e-03  4.12e-01  
  9  +4.2714e-01  +9.5022e-01  5.23e-01  1.36e-03  1.03e-01  7.29e-04  3.79e-03  4.46e-01  
 10  +3.8788e-01  +6.3704e-01  2.49e-01  6.30e-04  4.70e-02  1.67e-04  2.01e-03  6.66e-01  
 11  +3.5940e-01  +4.6245e-01  1.03e-01  2.53e-04  1.87e-02  5.90e-05  9.07e-04  5.98e-01  
 12  +3.4553e-01  +3.8849e-01  4.30e-02  1.01e-04  7.53e-03  2.38e-05  3.89e-04  6.91e-01  
 13  +3.3961e-01  +3.6065e-01  2.10e-02  4.75e-05  3.53e-03  1.17e-05  1.89e-04  6.29e-01  
 14  +3.3493e-01  +3.3926e-01  4.33e-03  9.65e-06  7.21e-04  1.97e-06  3.99e-05  9.90e-01  
 15  +3.3352e-01  +3.3358e-01  5.87e-05  1.30e-07  9.71e-06  2.53e-08  5.44e-07  9.87e-01  
 16  +3.3350e-01  +3.3350e-01  5.87e-07  1.30e-09  9.71e-08  2.53e-10  5.44e-09  9.90e-01  
 17  +3.3350e-01  +3.3350e-01  5.87e-09  1.30e-11  9.71e-10  2.53e-12  5.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.5712ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:20 PM: Optimal value: 3.335e-01
(CVXPY) Oct 06 04:16:20 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:20 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 8, Objective: 0.3335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:20 PM: Your problem has 590 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:20 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 590
  constraints   = 1090
  nnz(P)        = 0
  nnz(A)        = 8378
  cones (total) = 1
    : Nonnegative = 1,  numel = 1090

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +5.0177e+02  5.01e+02  9.57e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.7130e-01  +1.0920e+02  1.09e+02  4.24e-01  2.27e+01  3.80e-03  5.76e-01  5.86e-01  
  2  +5.2346e-01  +1.2332e+01  1.18e+01  1.35e-01  9.26e+00  1.78e-02  2.53e-01  9.90e-01  
  3  +5.0774e-01  +2.9417e+00  2.43e+00  4.54e-02  3.39e+00  1.97e-03  1.14e-01  7.25e-01  
  4  +5.0512e-01  +2.5134e+00  2.01e+00  2.71e-02  2.07e+00  2.80e-03  6.66e-02  4.49e-01  
  5  +5.0220e-01  +2.3420e+00  1.84e+00  2.30e-02  1.74e+00  1.58e-03  6.09e-02  3.85e-01  
  6  +4.8643e-01  +1.7428e+00  1.26e+00  4.26e-03  3.35e-01  4.53e-03  1.02e-02  8.41e-01  
  7  +4.6707e-01  +1.3999e+00  9.33e-01  2.77e-03  2.16e-01  2.74e-03  6.96e-03  4.37e-01  
  8  +4.4914e-01  +1.1922e+00  7.43e-01  1.99e-03  1.53e-01  1.81e-03  5.19e-03  3.75e-01  
  9  +4.2647e-01  +9.6459e-01  5.38e-01  1.40e-03  1.06e-01  8.89e-04  3.87e-03  4.27e-01  
 10  +3.8280e-01  +6.0213e-01  2.19e-01  5.59e-04  4.17e-02  1.14e-04  1.79e-03  7.52e-01  
 11  +3.5938e-01  +4.6341e-01  1.04e-01  2.58e-04  1.91e-02  5.04e-05  9.09e-04  5.53e-01  
 12  +3.4883e-01  +4.0710e-01  5.83e-02  1.40e-04  1.04e-02  2.84e-05  5.19e-04  5.00e-01  
 13  +3.4024e-01  +3.6452e-01  2.43e-02  5.65e-05  4.22e-03  1.19e-05  2.20e-04  6.40e-01  
 14  +3.3665e-01  +3.4660e-01  9.96e-03  2.26e-05  1.69e-03  4.52e-06  9.06e-05  9.90e-01  
 15  +3.3397e-01  +3.3539e-01  1.42e-03  3.19e-06  2.39e-04  6.42e-07  1.32e-05  8.64e-01  
 16  +3.3353e-01  +3.3360e-01  7.47e-05  1.65e-07  1.24e-05  3.30e-08  6.93e-07  9.90e-01  
 17  +3.3350e-01  +3.3350e-01  7.49e-07  1.66e-09  1.24e-07  3.31e-10  6.96e-09  9.90e-01  
 18  +3.3350e-01  +3.3350e-01  7.49e-09  1.66e-11  1.24e-09  3.31e-12  6.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.5331ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:20 PM: Optimal value: 3.335e-01
(CVXPY) Oct 06 04:16:20 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:20 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 9, Objective: 0.3335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:21 PM: Your problem has 600 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 600
  constraints   = 1100
  nnz(P)        = 0
  nnz(A)        = 8499
  cones (total) = 1
    : Nonnegative = 1,  numel = 1100

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9949e-01  +5.0184e+02  5.01e+02  9.57e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.6983e-01  +1.0927e+02  1.09e+02  4.25e-01  2.25e+01  3.80e-03  5.76e-01  5.86e-01  
  2  +5.2274e-01  +1.2437e+01  1.19e+01  1.34e-01  9.17e+00  1.80e-02  2.52e-01  9.90e-01  
  3  +5.0859e-01  +3.4046e+00  2.90e+00  5.01e-02  3.72e+00  2.95e-03  1.20e-01  6.50e-01  
  4  +5.0469e-01  +2.6919e+00  2.19e+00  2.84e-02  2.17e+00  3.85e-03  6.90e-02  4.91e-01  
  5  +5.0154e-01  +2.6115e+00  2.11e+00  2.21e-02  1.68e+00  2.19e-03  5.54e-02  6.01e-01  
  6  +4.8330e-01  +1.8994e+00  1.42e+00  4.42e-03  3.48e-01  5.41e-03  1.05e-02  8.16e-01  
  7  +4.5760e-01  +1.4155e+00  9.58e-01  2.62e-03  2.04e-01  2.82e-03  6.59e-03  4.90e-01  
  8  +4.4081e-01  +1.1791e+00  7.38e-01  2.04e-03  1.57e-01  1.39e-03  5.39e-03  3.83e-01  
  9  +4.1171e-01  +8.4705e-01  4.35e-01  1.24e-03  9.38e-02  1.22e-05  3.62e-03  8.87e-01  
 10  +3.6427e-01  +5.0766e-01  1.43e-01  3.66e-04  2.72e-02  9.96e-06  1.23e-03  6.97e-01  
 11  +3.4955e-01  +4.3641e-01  8.69e-02  2.12e-04  1.58e-02  1.34e-05  7.64e-04  5.08e-01  
 12  +3.3623e-01  +3.7111e-01  3.49e-02  8.31e-05  6.20e-03  8.95e-06  3.27e-04  7.15e-01  
 13  +3.2772e-01  +3.3086e-01  3.14e-03  7.32e-06  5.47e-04  8.23e-07  3.15e-05  9.20e-01  
 14  +3.2677e-01  +3.2684e-01  6.87e-05  1.57e-07  1.18e-05  2.09e-08  7.01e-07  9.86e-01  
 15  +3.2675e-01  +3.2675e-01  6.90e-07  1.58e-09  1.18e-07  2.10e-10  7.05e-09  9.90e-01  
 16  +3.2675e-01  +3.2675e-01  6.90e-09  1.58e-11  1.18e-09  2.10e-12  7.05e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.4988ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:21 PM: Optimal value: 3.268e-01
(CVXPY) Oct 06 04:16:21 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:21 PM: Solver (including time spent in interface) took 1.588e-02 seconds
Iteration: 10, Objective: 0.3268
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:21 PM: Your problem has 610 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 610
  constraints   = 1110
  nnz(P)        = 0
  nnz(A)        = 8638
  cones (total) = 1
    : Nonnegative = 1,  numel = 1110

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +5.0192e+02  5.01e+02  9.57e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.6822e-01  +1.0929e+02  1.09e+02  4.25e-01  2.24e+01  3.81e-03  5.75e-01  5.87e-01  
  2  +5.2199e-01  +1.2544e+01  1.20e+01  1.34e-01  9.06e+00  1.81e-02  2.50e-01  9.90e-01  
  3  +5.0871e-01  +3.5540e+00  3.05e+00  4.97e-02  3.69e+00  3.42e-03  1.17e-01  6.30e-01  
  4  +5.0559e-01  +2.9697e+00  2.46e+00  3.16e-02  2.40e+00  4.09e-03  7.47e-02  3.89e-01  
  5  +5.0178e-01  +2.7747e+00  2.27e+00  2.54e-02  1.91e+00  2.27e-03  6.39e-02  5.00e-01  
  6  +4.8063e-01  +1.8264e+00  1.35e+00  4.08e-03  3.22e-01  6.04e-03  9.59e-03  8.57e-01  
  7  +4.5795e-01  +1.4943e+00  1.04e+00  2.76e-03  2.15e-01  3.76e-03  6.79e-03  4.22e-01  
  8  +4.3922e-01  +1.2296e+00  7.90e-01  2.19e-03  1.69e-01  1.78e-03  5.66e-03  3.55e-01  
  9  +3.8802e-01  +7.0509e-01  3.17e-01  8.46e-04  6.34e-02  1.60e-05  2.53e-03  8.34e-01  
 10  +3.6068e-01  +5.3825e-01  1.78e-01  4.62e-04  3.43e-02  1.50e-05  1.53e-03  4.45e-01  
 11  +3.4080e-01  +4.2907e-01  8.83e-02  2.23e-04  1.65e-02  1.18e-05  8.12e-04  5.40e-01  
 12  +3.2942e-01  +3.6934e-01  3.99e-02  9.84e-05  7.31e-03  6.93e-06  3.86e-04  5.89e-01  
 13  +3.2251e-01  +3.3412e-01  1.16e-02  2.77e-05  2.06e-03  4.85e-06  1.16e-04  9.90e-01  
 14  +3.1947e-01  +3.2081e-01  1.34e-03  3.14e-06  2.34e-04  5.41e-07  1.38e-05  9.20e-01  
 15  +3.1907e-01  +3.1914e-01  6.44e-05  1.50e-07  1.11e-05  2.43e-08  6.77e-07  9.90e-01  
 16  +3.1905e-01  +3.1905e-01  6.47e-07  1.50e-09  1.12e-07  2.44e-10  6.81e-09  9.90e-01  
 17  +3.1905e-01  +3.1905e-01  6.47e-09  1.50e-11  1.12e-09  2.44e-12  6.81e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.1506ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:21 PM: Optimal value: 3.191e-01
(CVXPY) Oct 06 04:16:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:21 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 11, Objective: 0.3191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:21 PM: Your problem has 620 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 620
  constraints   = 1120
  nnz(P)        = 0
  nnz(A)        = 8764
  cones (total) = 1
    : Nonnegative = 1,  numel = 1120

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0193e+02  5.01e+02  9.58e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.6579e-01  +1.0935e+02  1.09e+02  4.25e-01  2.22e+01  3.81e-03  5.75e-01  5.87e-01  
  2  +5.2048e-01  +1.2715e+01  1.22e+01  1.33e-01  8.98e+00  1.84e-02  2.48e-01  9.90e-01  
  3  +5.0816e-01  +3.4878e+00  2.98e+00  4.50e-02  3.36e+00  3.69e-03  1.04e-01  6.42e-01  
  4  +5.0681e-01  +3.3021e+00  2.80e+00  3.49e-02  2.65e+00  4.22e-03  8.03e-02  2.41e-01  
  5  +5.0231e-01  +3.0244e+00  2.52e+00  2.91e-02  2.19e+00  2.50e-03  7.19e-02  3.91e-01  
  6  +4.8211e-01  +1.9285e+00  1.45e+00  5.00e-03  3.95e-01  5.89e-03  1.16e-02  8.48e-01  
  7  +4.6041e-01  +1.6113e+00  1.15e+00  3.38e-03  2.64e-01  4.01e-03  8.16e-03  4.25e-01  
  8  +4.3920e-01  +1.3401e+00  9.01e-01  2.44e-03  1.88e-01  2.58e-03  6.13e-03  3.56e-01  
  9  +3.9053e-01  +7.8334e-01  3.93e-01  1.10e-03  8.25e-02  2.16e-05  3.19e-03  7.71e-01  
 10  +3.4778e-01  +4.9684e-01  1.49e-01  3.96e-04  2.92e-02  2.11e-05  1.33e-03  6.75e-01  
 11  +3.3280e-01  +4.2156e-01  8.88e-02  2.25e-04  1.66e-02  1.98e-05  8.16e-04  5.43e-01  
 12  +3.2687e-01  +3.9174e-01  6.49e-02  1.61e-04  1.19e-02  1.58e-05  6.08e-04  3.23e-01  
 13  +3.1376e-01  +3.2582e-01  1.21e-02  2.91e-05  2.15e-03  4.42e-06  1.21e-04  9.34e-01  
 14  +3.1094e-01  +3.1307e-01  2.12e-03  5.04e-06  3.72e-04  8.07e-07  2.20e-05  8.93e-01  
 15  +3.1031e-01  +3.1035e-01  3.64e-05  8.62e-08  6.36e-06  1.26e-08  3.83e-07  9.83e-01  
 16  +3.1030e-01  +3.1030e-01  3.64e-07  8.61e-10  6.36e-08  1.26e-10  3.83e-09  9.90e-01  
 17  +3.1030e-01  +3.1030e-01  3.64e-09  8.62e-12  6.36e-10  1.26e-12  3.83e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.0696ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:21 PM: Optimal value: 3.103e-01
(CVXPY) Oct 06 04:16:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:21 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 12, Objective: 0.3103
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:21 PM: Your problem has 630 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 630
  constraints   = 1130
  nnz(P)        = 0
  nnz(A)        = 8907
  cones (total) = 1
    : Nonnegative = 1,  numel = 1130

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0199e+02  5.01e+02  9.58e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.6498e-01  +1.0932e+02  1.09e+02  4.26e-01  2.20e+01  3.82e-03  5.74e-01  5.87e-01  
  2  +5.1997e-01  +1.2778e+01  1.23e+01  1.33e-01  8.87e+00  1.84e-02  2.47e-01  9.90e-01  
  3  +5.0780e-01  +3.3949e+00  2.89e+00  4.24e-02  3.17e+00  3.67e-03  9.80e-02  6.54e-01  
  4  +5.0676e-01  +3.2830e+00  2.78e+00  3.41e-02  2.58e+00  4.17e-03  7.81e-02  2.14e-01  
  5  +5.0212e-01  +3.0676e+00  2.57e+00  2.85e-02  2.14e+00  2.53e-03  6.99e-02  4.06e-01  
  6  +4.7933e-01  +1.9572e+00  1.48e+00  4.56e-03  3.60e-01  6.48e-03  1.05e-02  8.59e-01  
  7  +4.5792e-01  +1.6666e+00  1.21e+00  3.24e-03  2.53e-01  4.71e-03  7.73e-03  3.69e-01  
  8  +4.2873e-01  +1.2147e+00  7.86e-01  2.24e-03  1.72e-01  1.29e-03  5.76e-03  4.81e-01  
  9  +3.8139e-01  +7.5662e-01  3.75e-01  1.01e-03  7.51e-02  3.98e-04  2.91e-03  5.83e-01  
 10  +3.4421e-01  +5.0026e-01  1.56e-01  4.11e-04  3.02e-02  1.27e-04  1.36e-03  6.33e-01  
 11  +3.3018e-01  +4.2312e-01  9.29e-02  2.33e-04  1.71e-02  7.31e-05  8.19e-04  5.03e-01  
 12  +3.2476e-01  +3.9599e-01  7.12e-02  1.74e-04  1.28e-02  5.49e-05  6.28e-04  2.89e-01  
 13  +3.1353e-01  +3.3773e-01  2.42e-02  5.70e-05  4.21e-03  1.28e-05  2.23e-04  9.34e-01  
 14  +3.0794e-01  +3.1264e-01  4.70e-03  1.08e-05  8.01e-04  2.34e-06  4.53e-05  8.32e-01  
 15  +3.0657e-01  +3.0680e-01  2.22e-04  5.05e-07  3.74e-05  9.57e-08  2.18e-06  9.72e-01  
 16  +3.0650e-01  +3.0650e-01  2.25e-06  5.11e-09  3.78e-07  9.58e-10  2.22e-08  9.90e-01  
 17  +3.0650e-01  +3.0650e-01  2.25e-08  5.11e-11  3.78e-09  9.58e-12  2.22e-10  9.90e-01  
 18  +3.0650e-01  +3.0650e-01  2.26e-10  5.12e-13  3.79e-11  9.63e-14  2.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.1458ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:21 PM: Optimal value: 3.065e-01
(CVXPY) Oct 06 04:16:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:21 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 13, Objective: 0.3065
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:21 PM: Your problem has 640 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:21 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 640
  constraints   = 1140
  nnz(P)        = 0
  nnz(A)        = 8998
  cones (total) = 1
    : Nonnegative = 1,  numel = 1140

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0203e+02  5.02e+02  9.58e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.6345e-01  +1.0940e+02  1.09e+02  4.27e-01  2.19e+01  3.81e-03  5.75e-01  5.87e-01  
  2  +5.1895e-01  +1.2902e+01  1.24e+01  1.32e-01  8.81e+00  1.86e-02  2.47e-01  9.90e-01  
  3  +5.0701e-01  +3.1706e+00  2.66e+00  3.76e-02  2.82e+00  3.56e-03  8.69e-02  6.84e-01  
  4  +5.0641e-01  +3.1811e+00  2.67e+00  3.19e-02  2.42e+00  4.03e-03  7.28e-02  1.87e-01  
  5  +5.0183e-01  +3.2706e+00  2.77e+00  2.64e-02  2.00e+00  3.02e-03  6.20e-02  4.93e-01  
  6  +4.8140e-01  +2.3287e+00  1.85e+00  6.08e-03  4.79e-01  6.17e-03  1.39e-02  7.83e-01  
  7  +4.5361e-01  +1.7312e+00  1.28e+00  3.70e-03  2.87e-01  3.31e-03  8.90e-03  4.98e-01  
  8  +4.3495e-01  +1.4489e+00  1.01e+00  2.82e-03  2.16e-01  1.92e-03  7.07e-03  3.78e-01  
  9  +3.8750e-01  +8.2449e-01  4.37e-01  1.24e-03  9.21e-02  1.65e-05  3.54e-03  8.44e-01  
 10  +3.4677e-01  +5.3003e-01  1.83e-01  4.96e-04  3.63e-02  1.78e-05  1.62e-03  6.08e-01  
 11  +3.2943e-01  +4.3939e-01  1.10e-01  2.78e-04  2.03e-02  1.92e-05  9.70e-04  5.22e-01  
 12  +3.2217e-01  +4.0354e-01  8.14e-02  2.01e-04  1.47e-02  1.65e-05  7.25e-04  3.24e-01  
 13  +3.0910e-01  +3.3935e-01  3.02e-02  7.14e-05  5.24e-03  7.49e-06  2.82e-04  6.87e-01  
 14  +3.0229e-01  +3.0759e-01  5.30e-03  1.22e-05  8.92e-04  1.41e-06  5.18e-05  8.45e-01  
 15  +3.0087e-01  +3.0136e-01  4.88e-04  1.10e-06  8.09e-05  1.93e-07  4.86e-06  9.90e-01  
 16  +3.0070e-01  +3.0071e-01  5.10e-06  1.15e-08  8.45e-07  1.96e-09  5.11e-08  9.90e-01  
 17  +3.0070e-01  +3.0070e-01  5.10e-08  1.15e-10  8.45e-09  1.96e-11  5.11e-10  9.90e-01  
 18  +3.0070e-01  +3.0070e-01  5.11e-10  1.15e-12  8.45e-11  1.96e-13  5.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.2069ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:21 PM: Optimal value: 3.007e-01
(CVXPY) Oct 06 04:16:21 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:21 PM: Solver (including time spent in interface) took 3.126e-02 seconds
Iteration: 14, Objective: 0.3007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:22 PM: Your problem has 650 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:22 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 650
  constraints   = 1150
  nnz(P)        = 0
  nnz(A)        = 9074
  cones (total) = 1
    : Nonnegative = 1,  numel = 1150

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +5.0204e+02  5.02e+02  9.58e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.6147e-01  +1.0942e+02  1.09e+02  4.27e-01  2.18e+01  3.82e-03  5.74e-01  5.87e-01  
  2  +5.1788e-01  +1.3039e+01  1.25e+01  1.31e-01  8.72e+00  1.88e-02  2.45e-01  9.90e-01  
  3  +5.0585e-01  +2.8052e+00  2.30e+00  3.10e-02  2.34e+00  3.25e-03  7.19e-02  7.38e-01  
  4  +5.0549e-01  +2.9422e+00  2.44e+00  2.74e-02  2.09e+00  3.68e-03  6.23e-02  2.11e-01  
  5  +4.9854e-01  +3.5440e+00  3.05e+00  1.89e-02  1.45e+00  4.10e-03  4.23e-02  7.17e-01  
  6  +4.7413e-01  +2.5620e+00  2.09e+00  5.87e-03  4.62e-01  6.11e-03  1.33e-02  6.89e-01  
  7  +4.4679e-01  +1.9479e+00  1.50e+00  3.89e-03  3.02e-01  3.63e-03  9.19e-03  4.26e-01  
  8  +4.1034e-01  +1.1250e+00  7.15e-01  2.21e-03  1.66e-01  2.71e-05  5.87e-03  6.79e-01  
  9  +3.5903e-01  +6.6195e-01  3.03e-01  8.45e-04  6.22e-02  3.92e-05  2.54e-03  6.61e-01  
 10  +3.3088e-01  +4.8342e-01  1.53e-01  4.09e-04  3.00e-02  3.52e-05  1.36e-03  6.17e-01  
 11  +3.1632e-01  +4.0448e-01  8.82e-02  2.21e-04  1.63e-02  2.63e-05  7.82e-04  5.69e-01  
 12  +3.0878e-01  +3.6698e-01  5.82e-02  1.41e-04  1.04e-02  1.86e-05  5.22e-04  4.18e-01  
 13  +2.9769e-01  +3.1313e-01  1.54e-02  3.56e-05  2.64e-03  6.22e-06  1.43e-04  8.92e-01  
 14  +2.9339e-01  +2.9463e-01  1.24e-03  2.80e-06  2.09e-04  4.67e-07  1.19e-05  9.28e-01  
 15  +2.9301e-01  +2.9303e-01  2.14e-05  4.85e-08  3.61e-06  8.30e-09  2.07e-07  9.90e-01  
 16  +2.9300e-01  +2.9300e-01  2.14e-07  4.85e-10  3.61e-08  8.30e-11  2.07e-09  9.90e-01  
 17  +2.9300e-01  +2.9300e-01  2.14e-09  4.85e-12  3.61e-10  8.31e-13  2.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.6854ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:22 PM: Optimal value: 2.930e-01
(CVXPY) Oct 06 04:16:22 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:22 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 15, Objective: 0.2930
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:22 PM: Your problem has 660 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:22 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 660
  constraints   = 1160
  nnz(P)        = 0
  nnz(A)        = 9149
  cones (total) = 1
    : Nonnegative = 1,  numel = 1160

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0206e+02  5.02e+02  9.58e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.5998e-01  +1.0948e+02  1.09e+02  4.28e-01  2.16e+01  3.82e-03  5.74e-01  5.87e-01  
  2  +5.1693e-01  +1.3143e+01  1.26e+01  1.31e-01  8.65e+00  1.89e-02  2.44e-01  9.90e-01  
  3  +5.0487e-01  +2.5468e+00  2.04e+00  2.64e-02  2.00e+00  3.08e-03  6.14e-02  7.77e-01  
  4  +5.0170e-01  +2.9820e+00  2.48e+00  1.85e-02  1.43e+00  4.30e-03  4.13e-02  5.60e-01  
  5  +4.8080e-01  +2.6055e+00  2.12e+00  6.70e-03  5.27e-01  6.94e-03  1.50e-02  7.24e-01  
  6  +4.4456e-01  +1.6672e+00  1.22e+00  3.48e-03  2.69e-01  2.25e-03  8.33e-03  6.12e-01  
  7  +3.9775e-01  +9.9641e-01  5.99e-01  1.82e-03  1.35e-01  9.76e-05  4.92e-03  7.52e-01  
  8  +3.5135e-01  +6.1788e-01  2.67e-01  7.57e-04  5.53e-02  4.94e-05  2.33e-03  6.02e-01  
  9  +3.3277e-01  +5.1015e-01  1.77e-01  4.84e-04  3.52e-02  4.33e-05  1.59e-03  4.55e-01  
 10  +3.1569e-01  +4.1403e-01  9.83e-02  2.54e-04  1.85e-02  2.87e-05  8.96e-04  5.51e-01  
 11  +3.0702e-01  +3.7066e-01  6.36e-02  1.57e-04  1.15e-02  1.99e-05  5.82e-04  4.22e-01  
 12  +2.9544e-01  +3.1270e-01  1.73e-02  4.05e-05  3.00e-03  7.74e-06  1.64e-04  9.90e-01  
 13  +2.9054e-01  +2.9190e-01  1.36e-03  3.14e-06  2.33e-04  5.53e-07  1.35e-05  9.32e-01  
 14  +2.9011e-01  +2.9013e-01  2.33e-05  5.38e-08  3.98e-06  9.23e-09  2.33e-07  9.90e-01  
 15  +2.9010e-01  +2.9010e-01  2.33e-07  5.38e-10  3.98e-08  9.22e-11  2.33e-09  9.90e-01  
 16  +2.9010e-01  +2.9010e-01  2.33e-09  5.38e-12  3.98e-10  9.23e-13  2.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.621ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:22 PM: Optimal value: 2.901e-01
(CVXPY) Oct 06 04:16:22 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:22 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 16, Objective: 0.2901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:22 PM: Your problem has 670 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:22 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 670
  constraints   = 1170
  nnz(P)        = 0
  nnz(A)        = 9214
  cones (total) = 1
    : Nonnegative = 1,  numel = 1170

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0211e+02  5.02e+02  9.59e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.5870e-01  +1.0957e+02  1.09e+02  4.29e-01  2.15e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1581e-01  +1.3253e+01  1.27e+01  1.30e-01  8.61e+00  1.91e-02  2.44e-01  9.90e-01  
  3  +5.0401e-01  +2.5362e+00  2.03e+00  2.50e-02  1.90e+00  3.31e-03  5.81e-02  7.87e-01  
  4  +4.9251e-01  +2.9316e+00  2.44e+00  1.15e-02  8.96e-01  6.37e-03  2.56e-02  7.62e-01  
  5  +4.6567e-01  +2.1644e+00  1.70e+00  5.03e-03  3.93e-01  5.94e-03  1.15e-02  6.16e-01  
  6  +4.3921e-01  +1.7342e+00  1.30e+00  3.48e-03  2.68e-01  3.65e-03  8.29e-03  4.04e-01  
  7  +3.9049e-01  +9.7732e-01  5.87e-01  1.76e-03  1.31e-01  2.86e-05  4.82e-03  7.53e-01  
  8  +3.5123e-01  +6.5618e-01  3.05e-01  8.72e-04  6.35e-02  3.20e-05  2.66e-03  5.26e-01  
  9  +3.2656e-01  +4.9921e-01  1.73e-01  4.75e-04  3.44e-02  2.92e-05  1.58e-03  5.14e-01  
 10  +3.1259e-01  +4.1910e-01  1.07e-01  2.80e-04  2.03e-02  2.61e-05  9.87e-04  5.38e-01  
 11  +3.0426e-01  +3.7520e-01  7.09e-02  1.80e-04  1.31e-02  1.87e-05  6.63e-04  3.84e-01  
 12  +2.9091e-01  +3.0583e-01  1.49e-02  3.59e-05  2.64e-03  6.38e-06  1.46e-04  9.90e-01  
 13  +2.8777e-01  +2.9269e-01  4.92e-03  1.16e-05  8.59e-04  2.07e-06  4.96e-05  6.90e-01  
 14  +2.8636e-01  +2.8684e-01  4.84e-04  1.14e-06  8.38e-05  1.97e-07  4.97e-06  9.34e-01  
 15  +2.8620e-01  +2.8621e-01  5.36e-06  1.26e-08  9.27e-07  2.16e-09  5.53e-08  9.89e-01  
 16  +2.8620e-01  +2.8620e-01  5.36e-08  1.26e-10  9.28e-09  2.16e-11  5.53e-10  9.90e-01  
 17  +2.8620e-01  +2.8620e-01  5.36e-10  1.26e-12  9.28e-11  2.16e-13  5.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.1996ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:22 PM: Optimal value: 2.862e-01
(CVXPY) Oct 06 04:16:22 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:22 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 17, Objective: 0.2862
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:22 PM: Your problem has 680 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:22 PM: Finished problem compilation (took 2.652e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 680
  constraints   = 1180
  nnz(P)        = 0
  nnz(A)        = 9292
  cones (total) = 1
    : Nonnegative = 1,  numel = 1180

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9928e-01  +5.0214e+02  5.02e+02  9.59e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.5754e-01  +1.0965e+02  1.09e+02  4.29e-01  2.14e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1521e-01  +1.3308e+01  1.28e+01  1.30e-01  8.54e+00  1.92e-02  2.43e-01  9.90e-01  
  3  +5.0345e-01  +2.5369e+00  2.03e+00  2.43e-02  1.84e+00  3.46e-03  5.63e-02  7.92e-01  
  4  +4.9049e-01  +2.7741e+00  2.28e+00  1.04e-02  8.12e-01  6.88e-03  2.33e-02  7.39e-01  
  5  +4.6230e-01  +2.0409e+00  1.58e+00  4.88e-03  3.78e-01  5.40e-03  1.12e-02  6.19e-01  
  6  +4.3378e-01  +1.6004e+00  1.17e+00  3.27e-03  2.50e-01  2.94e-03  7.92e-03  4.48e-01  
  7  +3.8778e-01  +9.7906e-01  5.91e-01  1.82e-03  1.34e-01  2.34e-05  5.04e-03  7.82e-01  
  8  +3.3714e-01  +5.5446e-01  2.17e-01  6.17e-04  4.45e-02  2.23e-05  1.96e-03  6.74e-01  
  9  +3.2045e-01  +4.6483e-01  1.44e-01  3.93e-04  2.84e-02  2.52e-05  1.33e-03  4.58e-01  
 10  +3.0665e-01  +3.8945e-01  8.28e-02  2.16e-04  1.57e-02  2.10e-05  7.76e-04  5.79e-01  
 11  +2.9817e-01  +3.4613e-01  4.80e-02  1.21e-04  8.79e-03  1.48e-05  4.57e-04  5.80e-01  
 12  +2.8854e-01  +2.9990e-01  1.14e-02  2.75e-05  2.02e-03  3.67e-06  1.13e-04  8.00e-01  
 13  +2.8589e-01  +2.8787e-01  1.99e-03  4.75e-06  3.49e-04  6.44e-07  2.04e-05  8.41e-01  
 14  +2.8532e-01  +2.8537e-01  5.39e-05  1.29e-07  9.44e-06  1.86e-08  5.59e-07  9.84e-01  
 15  +2.8530e-01  +2.8530e-01  5.40e-07  1.29e-09  9.45e-08  1.86e-10  5.60e-09  9.90e-01  
 16  +2.8530e-01  +2.8530e-01  5.40e-09  1.29e-11  9.45e-10  1.86e-12  5.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 24.5578ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:22 PM: Optimal value: 2.853e-01
(CVXPY) Oct 06 04:16:22 PM: Compilation took 2.652e-03 seconds
(CVXPY) Oct 06 04:16:22 PM: Solver (including time spent in interface) took 3.479e-02 seconds
Iteration: 18, Objective: 0.2853
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:23 PM: Your problem has 690 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:23 PM: Finished problem compilation (took 1.642e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 690
  constraints   = 1190
  nnz(P)        = 0
  nnz(A)        = 9402
  cones (total) = 1
    : Nonnegative = 1,  numel = 1190

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0213e+02  5.02e+02  9.59e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5705e-01  +1.0960e+02  1.09e+02  4.29e-01  2.12e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1490e-01  +1.3347e+01  1.28e+01  1.30e-01  8.45e+00  1.92e-02  2.43e-01  9.90e-01  
  3  +5.0304e-01  +2.5228e+00  2.02e+00  2.36e-02  1.79e+00  3.54e-03  5.47e-02  7.96e-01  
  4  +4.8771e-01  +2.7001e+00  2.21e+00  9.18e-03  7.15e-01  7.58e-03  2.05e-02  7.57e-01  
  5  +4.5391e-01  +1.8685e+00  1.41e+00  4.08e-03  3.15e-01  4.92e-03  9.51e-03  6.61e-01  
  6  +4.3183e-01  +1.5165e+00  1.08e+00  3.17e-03  2.40e-01  2.63e-03  7.73e-03  3.28e-01  
  7  +3.7764e-01  +8.8585e-01  5.08e-01  1.46e-03  1.07e-01  1.62e-04  4.04e-03  7.89e-01  
  8  +3.2914e-01  +5.2144e-01  1.92e-01  5.26e-04  3.78e-02  5.93e-05  1.69e-03  6.86e-01  
  9  +3.1397e-01  +4.4913e-01  1.35e-01  3.46e-04  2.48e-02  4.70e-05  1.17e-03  4.36e-01  
 10  +3.0193e-01  +3.8980e-01  8.79e-02  2.16e-04  1.56e-02  3.31e-05  7.67e-04  4.73e-01  
 11  +2.9244e-01  +3.4376e-01  5.13e-02  1.23e-04  8.85e-03  2.00e-05  4.61e-04  5.05e-01  
 12  +2.8080e-01  +2.8844e-01  7.63e-03  1.79e-05  1.29e-03  2.99e-06  7.29e-05  9.27e-01  
 13  +2.7913e-01  +2.8130e-01  2.17e-03  5.03e-06  3.61e-04  8.82e-07  2.14e-05  8.53e-01  
 14  +2.7843e-01  +2.7851e-01  8.25e-05  1.90e-07  1.36e-05  3.25e-08  8.25e-07  9.71e-01  
 15  +2.7840e-01  +2.7840e-01  8.30e-07  1.92e-09  1.37e-07  3.27e-10  8.31e-09  9.90e-01  
 16  +2.7840e-01  +2.7840e-01  8.30e-09  1.92e-11  1.37e-09  3.27e-12  8.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.2161ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:23 PM: Optimal value: 2.784e-01
(CVXPY) Oct 06 04:16:23 PM: Compilation took 1.642e-02 seconds
(CVXPY) Oct 06 04:16:23 PM: Solver (including time spent in interface) took 3.183e-02 seconds
Iteration: 19, Objective: 0.2784
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:23 PM: Your problem has 700 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:23 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 700
  constraints   = 1200
  nnz(P)        = 0
  nnz(A)        = 9483
  cones (total) = 1
    : Nonnegative = 1,  numel = 1200

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9925e-01  +5.0216e+02  5.02e+02  9.59e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.5607e-01  +1.0970e+02  1.09e+02  4.31e-01  2.11e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1416e-01  +1.3430e+01  1.29e+01  1.30e-01  8.39e+00  1.94e-02  2.43e-01  9.90e-01  
  3  +5.0238e-01  +2.5656e+00  2.06e+00  2.34e-02  1.76e+00  3.77e-03  5.40e-02  7.97e-01  
  4  +4.8585e-01  +2.5936e+00  2.11e+00  8.73e-03  6.79e-01  7.98e-03  1.96e-02  7.30e-01  
  5  +4.5334e-01  +1.8682e+00  1.41e+00  4.27e-03  3.28e-01  5.09e-03  1.00e-02  6.18e-01  
  6  +4.2396e-01  +1.4306e+00  1.01e+00  2.95e-03  2.22e-01  2.27e-03  7.31e-03  4.41e-01  
  7  +3.6857e-01  +8.0630e-01  4.38e-01  1.23e-03  8.97e-02  4.37e-04  3.47e-03  6.69e-01  
  8  +3.2588e-01  +5.2116e-01  1.95e-01  5.25e-04  3.76e-02  1.55e-04  1.69e-03  6.48e-01  
  9  +3.0998e-01  +4.4138e-01  1.31e-01  3.34e-04  2.39e-02  9.97e-05  1.14e-03  4.36e-01  
 10  +2.9923e-01  +3.8786e-01  8.86e-02  2.17e-04  1.56e-02  6.28e-05  7.77e-04  4.69e-01  
 11  +2.8973e-01  +3.4161e-01  5.19e-02  1.24e-04  8.89e-03  3.46e-05  4.69e-04  4.79e-01  
 12  +2.7844e-01  +2.8787e-01  9.42e-03  2.19e-05  1.57e-03  5.01e-06  9.06e-05  8.93e-01  
 13  +2.7617e-01  +2.7820e-01  2.04e-03  4.69e-06  3.36e-04  9.97e-07  2.03e-05  8.37e-01  
 14  +2.7551e-01  +2.7555e-01  3.77e-05  8.66e-08  6.20e-06  1.66e-08  3.82e-07  9.83e-01  
 15  +2.7550e-01  +2.7550e-01  3.77e-07  8.66e-10  6.20e-08  1.66e-10  3.82e-09  9.90e-01  
 16  +2.7550e-01  +2.7550e-01  3.78e-09  8.67e-12  6.20e-10  1.66e-12  3.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.2798ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:23 PM: Optimal value: 2.755e-01
(CVXPY) Oct 06 04:16:23 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:23 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 20, Objective: 0.2755
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:23 PM: Your problem has 710 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:23 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 710
  constraints   = 1210
  nnz(P)        = 0
  nnz(A)        = 9577
  cones (total) = 1
    : Nonnegative = 1,  numel = 1210

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +5.0213e+02  5.02e+02  9.59e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5525e-01  +1.0974e+02  1.09e+02  4.32e-01  2.10e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1328e-01  +1.3526e+01  1.30e+01  1.30e-01  8.34e+00  1.95e-02  2.43e-01  9.90e-01  
  3  +5.0169e-01  +2.7042e+00  2.20e+00  2.40e-02  1.81e+00  4.15e-03  5.52e-02  7.91e-01  
  4  +4.8133e-01  +2.5442e+00  2.06e+00  7.94e-03  6.16e-01  9.00e-03  1.79e-02  7.36e-01  
  5  +4.5104e-01  +1.9204e+00  1.47e+00  4.47e-03  3.42e-01  5.74e-03  1.05e-02  5.30e-01  
  6  +4.2364e-01  +1.4904e+00  1.07e+00  3.12e-03  2.35e-01  3.14e-03  7.71e-03  3.71e-01  
  7  +3.7410e-01  +9.0111e-01  5.27e-01  1.50e-03  1.10e-01  7.26e-04  4.17e-03  6.28e-01  
  8  +3.2539e-01  +5.2596e-01  2.01e-01  5.47e-04  3.89e-02  1.96e-04  1.76e-03  6.72e-01  
  9  +3.0722e-01  +4.4165e-01  1.34e-01  3.40e-04  2.41e-02  1.19e-04  1.17e-03  4.79e-01  
 10  +2.9614e-01  +3.8583e-01  8.97e-02  2.21e-04  1.57e-02  7.24e-05  8.07e-04  4.46e-01  
 11  +2.8272e-01  +3.1994e-01  3.72e-02  8.86e-05  6.29e-03  2.49e-05  3.51e-04  7.28e-01  
 12  +2.7441e-01  +2.8114e-01  6.73e-03  1.57e-05  1.11e-03  3.39e-06  6.72e-05  9.24e-01  
 13  +2.7264e-01  +2.7382e-01  1.18e-03  2.75e-06  1.94e-04  5.59e-07  1.22e-05  8.51e-01  
 14  +2.7226e-01  +2.7227e-01  1.70e-05  3.93e-08  2.78e-06  7.44e-09  1.77e-07  9.86e-01  
 15  +2.7225e-01  +2.7225e-01  1.70e-07  3.93e-10  2.78e-08  7.44e-11  1.77e-09  9.90e-01  
 16  +2.7225e-01  +2.7225e-01  1.70e-09  3.93e-12  2.78e-10  7.44e-13  1.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.8676ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:23 PM: Optimal value: 2.723e-01
(CVXPY) Oct 06 04:16:23 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:23 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 21, Objective: 0.2723
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:23 PM: Your problem has 712 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:23 PM: Finished problem compilation (took 1.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 712
  constraints   = 1212
  nnz(P)        = 0
  nnz(A)        = 9589
  cones (total) = 1
    : Nonnegative = 1,  numel = 1212

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9922e-01  +5.0212e+02  5.02e+02  9.59e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.5504e-01  +1.0975e+02  1.09e+02  4.32e-01  2.10e+01  3.83e-03  5.74e-01  5.86e-01  
  2  +5.1311e-01  +1.3537e+01  1.30e+01  1.29e-01  8.33e+00  1.95e-02  2.42e-01  9.90e-01  
  3  +5.0152e-01  +2.7122e+00  2.21e+00  2.40e-02  1.80e+00  4.20e-03  5.51e-02  7.92e-01  
  4  +4.8111e-01  +2.5331e+00  2.05e+00  7.96e-03  6.17e-01  8.98e-03  1.79e-02  7.30e-01  
  5  +4.4897e-01  +1.8776e+00  1.43e+00  4.31e-03  3.29e-01  5.61e-03  1.02e-02  5.54e-01  
  6  +4.2280e-01  +1.4797e+00  1.06e+00  3.10e-03  2.32e-01  3.12e-03  7.67e-03  3.53e-01  
  7  +3.7359e-01  +9.0047e-01  5.27e-01  1.51e-03  1.10e-01  7.00e-04  4.19e-03  6.36e-01  
  8  +3.2509e-01  +5.2477e-01  2.00e-01  5.45e-04  3.88e-02  1.90e-04  1.76e-03  6.71e-01  
  9  +3.0727e-01  +4.4178e-01  1.35e-01  3.41e-04  2.42e-02  1.17e-04  1.18e-03  4.67e-01  
 10  +2.9584e-01  +3.8445e-01  8.86e-02  2.19e-04  1.56e-02  7.07e-05  7.99e-04  4.42e-01  
 11  +2.8275e-01  +3.2017e-01  3.74e-02  8.94e-05  6.34e-03  2.47e-05  3.54e-04  7.29e-01  
 12  +2.7448e-01  +2.8136e-01  6.88e-03  1.61e-05  1.14e-03  3.40e-06  6.87e-05  9.31e-01  
 13  +2.7280e-01  +2.7440e-01  1.61e-03  3.73e-06  2.64e-04  7.08e-07  1.65e-05  8.87e-01  
 14  +2.7227e-01  +2.7231e-01  4.64e-05  1.08e-07  7.60e-06  1.95e-08  4.84e-07  9.72e-01  
 15  +2.7225e-01  +2.7225e-01  4.65e-07  1.08e-09  7.61e-08  1.95e-10  4.85e-09  9.90e-01  
 16  +2.7225e-01  +2.7225e-01  4.65e-09  1.08e-11  7.61e-10  1.95e-12  4.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.6506ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:23 PM: Optimal value: 2.723e-01
(CVXPY) Oct 06 04:16:23 PM: Compilation took 1.565e-02 seconds
(CVXPY) Oct 06 04:16:23 PM: Solver (including time spent in interface) took 3.123e-02 seconds
FULL MODEL:
  Accruacy: 0.681
  Our objective: 0.362

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0)                                                        <-- (term's our objective: 0.09)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1)                       <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.022)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.022)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.02)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.614317178726196
Best over terms:
  Our final objective: 0.09
    Its accruacy: 0.545
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.09
  Highest accruacy: 0.545
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

