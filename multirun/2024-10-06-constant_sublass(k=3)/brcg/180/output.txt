Command:
python test_script.py -s constant_subclass -d 5 -n 1000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.158
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.218
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:55 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Finished problem compilation (took 4.975e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9984e-01  +5.0079e+02  5.00e+02  9.52e-01  2.86e+01  1.00e+00  1.00e+00   ------   
  1  +5.9919e-01  +1.0059e+02  1.00e+02  3.51e-01  1.66e+01  3.99e-03  5.03e-01  6.45e-01  
  2  +5.4470e-01  +1.4427e+01  1.39e+01  1.26e-01  7.34e+00  9.98e-03  2.30e-01  7.93e-01  
  3  +5.0494e-01  +2.6267e+00  2.12e+00  4.33e-02  2.40e+00  1.61e-05  2.18e-01  2.58e-01  
  4  +5.0043e-01  +7.4381e-01  2.43e-01  5.24e-03  3.03e-01  6.36e-06  6.34e-02  8.20e-01  
  5  +4.9930e-01  +7.1246e-01  2.13e-01  3.34e-03  1.95e-01  1.86e-05  1.39e-02  8.49e-01  
  6  +4.8838e-01  +6.4195e-01  1.54e-01  4.30e-04  2.54e-02  1.18e-04  1.31e-03  9.09e-01  
  7  +4.7747e-01  +5.8116e-01  1.04e-01  2.68e-04  1.58e-02  6.70e-05  8.73e-04  4.23e-01  
  8  +4.5922e-01  +4.8643e-01  2.72e-02  6.17e-05  3.62e-03  5.11e-06  2.33e-04  9.46e-01  
  9  +4.5117e-01  +4.5436e-01  3.19e-03  6.48e-06  3.80e-04  1.37e-06  2.73e-05  9.90e-01  
 10  +4.5011e-01  +4.5015e-01  3.45e-05  6.95e-08  4.08e-06  1.45e-08  2.97e-07  9.89e-01  
 11  +4.5010e-01  +4.5010e-01  3.45e-07  6.95e-10  4.08e-08  1.45e-10  2.97e-09  9.90e-01  
 12  +4.5010e-01  +4.5010e-01  3.45e-09  6.95e-12  4.08e-10  1.45e-12  2.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.5819ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:55 PM: Optimal value: 4.501e-01
(CVXPY) Oct 06 03:53:55 PM: Compilation took 4.975e-02 seconds
(CVXPY) Oct 06 03:53:55 PM: Solver (including time spent in interface) took 1.209e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:55 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Finished problem compilation (took 9.232e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 5050
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +5.0116e+02  5.01e+02  9.53e-01  3.04e+01  1.00e+00  1.01e+00   ------   
  1  +5.9762e-01  +1.0106e+02  1.00e+02  3.56e-01  1.75e+01  3.98e-03  5.13e-01  6.42e-01  
  2  +5.4276e-01  +1.4054e+01  1.35e+01  1.25e-01  7.56e+00  1.04e-02  2.29e-01  8.13e-01  
  3  +5.0383e-01  +2.4084e+00  1.90e+00  3.95e-02  2.31e+00  1.59e-05  2.11e-01  3.48e-01  
  4  +5.0080e-01  +9.6191e-01  4.61e-01  9.93e-03  6.01e-01  6.48e-06  8.42e-02  6.46e-01  
  5  +4.9875e-01  +7.7350e-01  2.75e-01  3.99e-03  2.47e-01  1.71e-05  1.43e-02  9.23e-01  
  6  +4.8915e-01  +7.0534e-01  2.16e-01  8.89e-04  5.59e-02  6.26e-05  2.61e-03  8.33e-01  
  7  +4.8693e-01  +7.0715e-01  2.20e-01  6.60e-04  4.15e-02  8.35e-05  1.90e-03  3.49e-01  
  8  +4.8147e-01  +6.7361e-01  1.92e-01  5.54e-04  3.48e-02  7.24e-05  1.61e-03  3.19e-01  
  9  +4.6588e-01  +5.9195e-01  1.26e-01  2.68e-04  1.68e-02  5.99e-05  7.93e-04  6.26e-01  
 10  +4.5993e-01  +5.7524e-01  1.15e-01  2.21e-04  1.39e-02  6.05e-05  6.54e-04  4.27e-01  
 11  +4.3922e-01  +4.9348e-01  5.43e-02  9.34e-05  5.85e-03  3.15e-05  2.83e-04  9.90e-01  
 12  +4.2543e-01  +4.4016e-01  1.47e-02  2.40e-05  1.51e-03  1.09e-05  7.45e-05  9.70e-01  
 13  +4.1962e-01  +4.2061e-01  9.88e-04  1.58e-06  1.01e-04  7.36e-07  4.99e-06  9.45e-01  
 14  +4.1920e-01  +4.1921e-01  1.00e-05  1.61e-08  1.03e-06  7.45e-09  5.06e-08  9.90e-01  
 15  +4.1920e-01  +4.1920e-01  1.00e-07  1.61e-10  1.03e-08  7.45e-11  5.06e-10  9.90e-01  
 16  +4.1920e-01  +4.1920e-01  1.00e-09  1.61e-12  1.03e-10  7.45e-13  5.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4878ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:55 PM: Optimal value: 4.192e-01
(CVXPY) Oct 06 03:53:55 PM: Compilation took 9.232e-03 seconds
(CVXPY) Oct 06 03:53:55 PM: Solver (including time spent in interface) took 5.632e-03 seconds
Iteration: 2, Objective: 0.4192
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:55 PM: Your problem has 528 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Finished problem compilation (took 8.354e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 528
  constraints   = 1028
  nnz(P)        = 0
  nnz(A)        = 5325
  cones (total) = 1
    : Nonnegative = 1,  numel = 1028

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0132e+02  5.01e+02  9.53e-01  3.05e+01  1.00e+00  1.02e+00   ------   
  1  +5.9707e-01  +1.0127e+02  1.01e+02  3.58e-01  1.75e+01  3.97e-03  5.16e-01  6.41e-01  
  2  +5.4202e-01  +1.3916e+01  1.34e+01  1.24e-01  7.45e+00  1.06e-02  2.29e-01  8.20e-01  
  3  +5.0340e-01  +2.3221e+00  1.82e+00  3.80e-02  2.22e+00  1.59e-05  2.08e-01  3.92e-01  
  4  +5.0087e-01  +1.1063e+00  6.05e-01  1.29e-02  7.80e-01  7.79e-06  9.37e-02  5.76e-01  
  5  +4.8978e-01  +1.7548e+00  1.27e+00  5.17e-03  3.23e-01  1.02e-04  1.50e-02  9.90e-01  
  6  +4.7095e-01  +1.0498e+00  5.79e-01  1.67e-03  1.04e-01  6.67e-05  5.13e-03  6.73e-01  
  7  +4.6547e-01  +9.3625e-01  4.71e-01  1.29e-03  8.06e-02  8.00e-05  4.01e-03  3.27e-01  
  8  +4.4945e-01  +6.6404e-01  2.15e-01  5.35e-04  3.33e-02  7.59e-05  1.72e-03  7.88e-01  
  9  +4.5141e-01  +6.9215e-01  2.41e-01  4.95e-04  3.09e-02  1.08e-04  1.52e-03  3.54e-01  
 10  +4.4679e-01  +6.4795e-01  2.01e-01  4.49e-04  2.79e-02  8.27e-05  1.42e-03  2.10e-01  
 11  +4.3236e-01  +5.6521e-01  1.33e-01  2.67e-04  1.65e-02  5.78e-05  8.76e-04  4.49e-01  
 12  +4.1002e-01  +4.4179e-01  3.18e-02  6.09e-05  3.76e-03  1.34e-05  2.21e-04  8.50e-01  
 13  +4.0614e-01  +4.2645e-01  2.03e-02  3.80e-05  2.34e-03  9.26e-06  1.40e-04  6.63e-01  
 14  +4.0272e-01  +4.1241e-01  9.69e-03  1.79e-05  1.10e-03  4.63e-06  6.76e-05  5.78e-01  
 15  +4.0144e-01  +4.0690e-01  5.46e-03  9.99e-06  6.15e-04  2.93e-06  3.80e-05  6.89e-01  
 16  +3.9943e-01  +3.9952e-01  8.67e-05  1.58e-07  9.74e-06  4.51e-08  6.12e-07  9.84e-01  
 17  +3.9940e-01  +3.9940e-01  8.67e-07  1.58e-09  9.74e-08  4.51e-10  6.12e-09  9.90e-01  
 18  +3.9940e-01  +3.9940e-01  8.67e-09  1.58e-11  9.74e-10  4.51e-12  6.12e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8393ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:55 PM: Optimal value: 3.994e-01
(CVXPY) Oct 06 03:53:55 PM: Compilation took 8.354e-03 seconds
(CVXPY) Oct 06 03:53:55 PM: Solver (including time spent in interface) took 1.187e-02 seconds
Iteration: 3, Objective: 0.3994
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:55 PM: Your problem has 530 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Finished problem compilation (took 8.775e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 530
  constraints   = 1030
  nnz(P)        = 0
  nnz(A)        = 5414
  cones (total) = 1
    : Nonnegative = 1,  numel = 1030

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0129e+02  5.01e+02  9.53e-01  3.06e+01  1.00e+00  1.02e+00   ------   
  1  +5.9672e-01  +1.0138e+02  1.01e+02  3.59e-01  1.76e+01  3.97e-03  5.17e-01  6.40e-01  
  2  +5.4180e-01  +1.3877e+01  1.33e+01  1.24e-01  7.45e+00  1.07e-02  2.28e-01  8.23e-01  
  3  +5.0341e-01  +2.3314e+00  1.83e+00  3.82e-02  2.23e+00  1.61e-05  2.07e-01  3.96e-01  
  4  +5.0091e-01  +1.1285e+00  6.28e-01  1.34e-02  8.10e-01  7.97e-06  9.55e-02  5.63e-01  
  5  +4.9193e-01  +1.5783e+00  1.09e+00  5.40e-03  3.37e-01  8.46e-05  1.58e-02  9.90e-01  
  6  +4.7177e-01  +1.0225e+00  5.51e-01  1.55e-03  9.70e-02  7.89e-05  4.69e-03  7.07e-01  
  7  +4.6151e-01  +8.5169e-01  3.90e-01  1.06e-03  6.62e-02  7.46e-05  3.30e-03  3.93e-01  
  8  +4.4436e-01  +6.5683e-01  2.12e-01  4.96e-04  3.08e-02  5.97e-05  1.59e-03  6.11e-01  
  9  +4.4507e-01  +6.5535e-01  2.10e-01  4.61e-04  2.87e-02  7.52e-05  1.45e-03  3.51e-01  
 10  +4.2650e-01  +5.3614e-01  1.10e-01  2.19e-04  1.36e-02  4.95e-05  7.31e-04  8.24e-01  
 11  +4.1510e-01  +4.7962e-01  6.45e-02  1.25e-04  7.74e-03  2.99e-05  4.44e-04  4.43e-01  
 12  +4.0375e-01  +4.2319e-01  1.94e-02  3.71e-05  2.29e-03  1.07e-05  1.42e-04  8.66e-01  
 13  +3.9797e-01  +3.9919e-01  1.22e-03  2.32e-06  1.43e-04  6.72e-07  9.33e-06  9.90e-01  
 14  +3.9750e-01  +3.9752e-01  1.23e-05  2.34e-08  1.44e-06  6.74e-09  9.45e-08  9.90e-01  
 15  +3.9750e-01  +3.9750e-01  1.23e-07  2.34e-10  1.44e-08  6.74e-11  9.45e-10  9.90e-01  
 16  +3.9750e-01  +3.9750e-01  1.23e-09  2.34e-12  1.44e-10  6.74e-13  9.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.4665ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:55 PM: Optimal value: 3.975e-01
(CVXPY) Oct 06 03:53:55 PM: Compilation took 8.775e-03 seconds
(CVXPY) Oct 06 03:53:55 PM: Solver (including time spent in interface) took 1.012e-02 seconds
Iteration: 4, Objective: 0.3975
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:55 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:55 PM: Finished problem compilation (took 5.096e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 5436
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9954e-01  +5.0130e+02  5.01e+02  9.54e-01  3.06e+01  1.00e+00  1.02e+00   ------   
  1  +5.9685e-01  +1.0134e+02  1.01e+02  3.58e-01  1.75e+01  3.98e-03  5.17e-01  6.41e-01  
  2  +5.4178e-01  +1.3869e+01  1.33e+01  1.24e-01  7.43e+00  1.06e-02  2.29e-01  8.22e-01  
  3  +5.0338e-01  +2.3230e+00  1.82e+00  3.80e-02  2.22e+00  1.61e-05  2.07e-01  3.98e-01  
  4  +5.0086e-01  +1.1084e+00  6.08e-01  1.30e-02  7.84e-01  7.82e-06  9.29e-02  5.76e-01  
  5  +4.8977e-01  +1.7072e+00  1.22e+00  5.02e-03  3.14e-01  9.98e-05  1.46e-02  9.90e-01  
  6  +4.6887e-01  +1.0013e+00  5.32e-01  1.47e-03  9.20e-02  6.66e-05  4.51e-03  7.03e-01  
  7  +4.5920e-01  +8.2614e-01  3.67e-01  9.73e-04  6.07e-02  7.67e-05  3.04e-03  4.69e-01  
  8  +4.4427e-01  +6.7071e-01  2.26e-01  5.08e-04  3.16e-02  6.74e-05  1.62e-03  5.57e-01  
  9  +4.4322e-01  +6.5118e-01  2.08e-01  4.99e-04  3.10e-02  5.80e-05  1.62e-03  3.09e-02  
 10  +4.3963e-01  +6.3665e-01  1.97e-01  4.23e-04  2.63e-02  6.59e-05  1.36e-03  2.77e-01  
 11  +4.3308e-01  +5.7681e-01  1.44e-01  3.00e-04  1.86e-02  6.17e-05  9.89e-04  6.05e-01  
 12  +4.1698e-01  +4.9181e-01  7.48e-02  1.48e-04  9.14e-03  3.08e-05  5.23e-04  5.14e-01  
 13  +4.0467e-01  +4.2952e-01  2.48e-02  4.79e-05  2.95e-03  1.07e-05  1.82e-04  7.32e-01  
 14  +3.9846e-01  +4.0099e-01  2.53e-03  4.84e-06  2.98e-04  1.38e-06  1.94e-05  9.90e-01  
 15  +3.9751e-01  +3.9754e-01  2.64e-05  5.04e-08  3.10e-06  1.42e-08  2.04e-07  9.90e-01  
 16  +3.9750e-01  +3.9750e-01  2.64e-07  5.04e-10  3.10e-08  1.42e-10  2.04e-09  9.90e-01  
 17  +3.9750e-01  +3.9750e-01  2.64e-09  5.04e-12  3.10e-10  1.42e-12  2.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.9213ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:55 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:55 PM: Optimal value: 3.975e-01
(CVXPY) Oct 06 03:53:55 PM: Compilation took 5.096e-03 seconds
(CVXPY) Oct 06 03:53:55 PM: Solver (including time spent in interface) took 1.091e-02 seconds
FULL MODEL:
  Accruacy: 0.599
  Our objective: 0.198

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.158)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0)            <-- (term's our objective: 0.014)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.990105152130127
Best over terms:
  Our final objective: 0.15799999999999997
    Its accruacy: 0.579
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15799999999999997
  Highest accruacy: 0.579
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

