Command:
python test_script.py -s constant_subclass -d 8 -n 10 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:43 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:43 PM: Finished problem compilation (took 3.527e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.7761e-01  +6.5987e+00  6.22e+00  7.67e-01  2.72e+00  1.00e+00  1.43e+00   ------   
  1  +2.9783e-01  +9.3116e-01  6.33e-01  2.20e-01  9.35e-01  3.22e-03  5.35e-01  8.67e-01  
  2  +1.4132e-01  +3.2372e-01  1.82e-01  5.55e-02  2.54e-01  8.41e-03  1.90e-01  8.00e-01  
  3  +1.0810e-01  +1.4661e-01  3.85e-02  9.55e-03  4.88e-02  2.48e-03  4.02e-02  8.59e-01  
  4  +1.0023e-01  +1.0077e-01  5.45e-04  1.36e-04  6.98e-04  3.40e-05  5.89e-04  9.85e-01  
  5  +1.0012e-01  +1.0018e-01  5.73e-05  1.47e-05  7.38e-05  2.64e-06  6.80e-05  8.95e-01  
  6  +1.0010e-01  +1.0010e-01  2.55e-06  6.74e-07  3.35e-06  8.34e-08  3.40e-06  9.57e-01  
  7  +1.0010e-01  +1.0010e-01  2.52e-08  6.71e-09  3.32e-08  8.26e-10  3.41e-08  9.90e-01  
  8  +1.0010e-01  +1.0010e-01  2.52e-10  6.71e-11  3.32e-10  8.26e-12  3.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 256.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:43 PM: Optimal value: 1.001e-01
(CVXPY) Oct 06 04:06:43 PM: Compilation took 3.527e-02 seconds
(CVXPY) Oct 06 04:06:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:43 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:43 PM: Finished problem compilation (took 5.016e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 118
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.8008e-01  +6.3259e+00  6.05e+00  8.05e-01  3.18e+00  1.00e+00  1.38e+00   ------   
  1  +1.0766e-01  +7.5571e-01  6.48e-01  2.56e-01  1.03e+00  3.56e-03  4.95e-01  8.43e-01  
  2  +5.5860e-02  +1.8151e-01  1.26e-01  5.22e-02  2.48e-01  5.85e-03  1.43e-01  8.03e-01  
  3  +3.3823e-02  +1.2662e-01  9.28e-02  2.66e-02  1.64e-01  5.42e-03  8.73e-02  4.93e-01  
  4  +1.3871e-03  +5.7375e-03  4.35e-03  1.20e-03  7.72e-03  1.85e-04  4.34e-03  9.90e-01  
  5  +2.0363e-04  +2.8098e-04  7.73e-05  2.21e-05  1.41e-04  1.85e-06  8.03e-05  9.82e-01  
  6  +1.9904e-04  +2.0489e-04  5.84e-06  1.88e-06  1.10e-05  1.62e-07  6.83e-06  9.17e-01  
  7  +1.9999e-04  +2.0005e-04  5.85e-08  1.89e-08  1.10e-07  1.62e-09  6.84e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  5.85e-10  1.89e-10  1.10e-09  1.62e-11  6.84e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 417.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:43 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:06:43 PM: Compilation took 5.016e-03 seconds
(CVXPY) Oct 06 04:06:43 PM: Solver (including time spent in interface) took 2.551e-03 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:43 PM: Your problem has 33 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:43 PM: Finished problem compilation (took 5.071e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 33
  constraints   = 38
  nnz(P)        = 0
  nnz(A)        = 121
  cones (total) = 1
    : Nonnegative = 1,  numel = 38

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.6357e-01  +6.3509e+00  6.09e+00  8.07e-01  3.18e+00  1.00e+00  1.38e+00   ------   
  1  +7.4609e-02  +7.2934e-01  6.55e-01  2.57e-01  1.03e+00  3.60e-03  4.91e-01  8.42e-01  
  2  +1.5073e-02  +1.3574e-01  1.21e-01  5.00e-02  2.33e-01  5.27e-03  1.35e-01  8.02e-01  
  3  +1.1541e-03  +5.8210e-03  4.67e-03  1.89e-03  9.29e-03  2.38e-04  5.90e-03  9.67e-01  
  4  +1.7475e-04  +2.5882e-04  8.41e-05  3.54e-05  1.72e-04  2.58e-06  1.11e-04  9.81e-01  
  5  +1.5162e-04  +1.5602e-04  4.39e-06  2.24e-06  9.42e-06  8.29e-08  7.44e-06  9.39e-01  
  6  +1.5002e-04  +1.5007e-04  4.95e-08  2.54e-08  1.06e-07  1.03e-09  8.64e-08  9.89e-01  
  7  +1.5000e-04  +1.5000e-04  4.95e-10  2.54e-10  1.06e-09  1.03e-11  8.64e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 212.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:43 PM: Optimal value: 1.500e-04
(CVXPY) Oct 06 04:06:43 PM: Compilation took 5.071e-03 seconds
(CVXPY) Oct 06 04:06:43 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x1 = 0)                                  <-- (term's our objective: 0.8)
 OR (x2 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.8)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.1045150756835938
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.8
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

