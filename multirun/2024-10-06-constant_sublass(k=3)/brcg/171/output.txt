Command:
python test_script.py -s constant_subclass -d 5 -n 100 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.32
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:09 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Finished problem compilation (took 4.406e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9702e-01  +5.0869e+01  5.04e+01  8.62e-01  8.45e+00  1.00e+00  1.04e+00   ------   
  1  +5.9479e-01  +1.0444e+01  9.85e+00  3.18e-01  4.65e+00  3.97e-03  5.19e-01  6.46e-01  
  2  +5.2892e-01  +1.5537e+00  1.02e+00  6.89e-02  1.20e+00  1.14e-02  1.74e-01  9.46e-01  
  3  +4.9840e-01  +7.0170e-01  2.03e-01  1.38e-02  2.44e-01  5.59e-03  4.76e-02  9.64e-01  
  4  +4.7943e-01  +6.5603e-01  1.77e-01  4.64e-03  8.47e-02  1.08e-02  1.54e-02  7.12e-01  
  5  +4.6390e-01  +5.2565e-01  6.18e-02  1.73e-03  3.12e-02  2.79e-04  6.37e-03  7.92e-01  
  6  +4.4480e-01  +4.5668e-01  1.19e-02  2.38e-04  4.31e-03  5.89e-05  1.03e-03  8.85e-01  
  7  +4.4021e-01  +4.4048e-01  2.75e-04  5.27e-06  9.54e-05  1.21e-06  2.37e-05  9.85e-01  
  8  +4.4010e-01  +4.4010e-01  2.76e-06  5.27e-08  9.55e-07  1.21e-08  2.38e-07  9.90e-01  
  9  +4.4010e-01  +4.4010e-01  2.76e-08  5.27e-10  9.55e-09  1.21e-10  2.38e-09  9.90e-01  
 10  +4.4010e-01  +4.4010e-01  2.76e-10  5.27e-12  9.55e-11  1.21e-12  2.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 680.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:09 PM: Optimal value: 4.401e-01
(CVXPY) Oct 06 03:53:09 PM: Compilation took 4.406e-02 seconds
(CVXPY) Oct 06 03:53:09 PM: Solver (including time spent in interface) took 1.379e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:09 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Finished problem compilation (took 7.815e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 518
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9546e-01  +5.1012e+01  5.05e+01  8.69e-01  8.66e+00  1.00e+00  1.05e+00   ------   
  1  +5.8638e-01  +1.0586e+01  1.00e+01  3.36e-01  4.70e+00  3.95e-03  5.35e-01  6.38e-01  
  2  +5.2281e-01  +1.4864e+00  9.64e-01  6.53e-02  1.16e+00  1.25e-02  1.69e-01  9.90e-01  
  3  +5.0575e-01  +1.0975e+00  5.92e-01  3.01e-02  5.47e-01  1.13e-02  8.69e-02  5.50e-01  
  4  +4.8242e-01  +9.1037e-01  4.28e-01  1.37e-02  2.51e-01  9.68e-03  4.36e-02  6.02e-01  
  5  +4.4651e-01  +6.0416e-01  1.58e-01  3.97e-03  7.27e-02  2.63e-03  1.53e-02  7.35e-01  
  6  +4.2914e-01  +5.0138e-01  7.22e-02  1.89e-03  3.43e-02  4.47e-04  8.31e-03  6.99e-01  
  7  +4.1220e-01  +4.1933e-01  7.13e-03  1.71e-04  3.10e-03  2.31e-05  8.69e-04  9.14e-01  
  8  +4.1024e-01  +4.1035e-01  1.16e-04  2.78e-06  5.02e-05  2.96e-07  1.49e-05  9.85e-01  
  9  +4.1020e-01  +4.1020e-01  1.16e-06  2.77e-08  5.02e-07  2.96e-09  1.49e-07  9.90e-01  
 10  +4.1020e-01  +4.1020e-01  1.16e-08  2.77e-10  5.02e-09  2.96e-11  1.49e-09  9.90e-01  
 11  +4.1020e-01  +4.1020e-01  1.16e-10  2.77e-12  5.02e-11  2.96e-13  1.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 819µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:09 PM: Optimal value: 4.102e-01
(CVXPY) Oct 06 03:53:09 PM: Compilation took 7.815e-03 seconds
(CVXPY) Oct 06 03:53:09 PM: Solver (including time spent in interface) took 3.601e-03 seconds
Iteration: 2, Objective: 0.4102
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:09 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Finished problem compilation (took 5.253e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 597
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9266e-01  +5.1276e+01  5.08e+01  8.74e-01  8.63e+00  1.00e+00  1.06e+00   ------   
  1  +5.6841e-01  +1.0710e+01  1.01e+01  3.48e-01  4.65e+00  3.94e-03  5.45e-01  6.32e-01  
  2  +5.1246e-01  +1.6057e+00  1.09e+00  6.70e-02  1.19e+00  1.38e-02  1.69e-01  9.79e-01  
  3  +4.8034e-01  +1.2646e+00  7.84e-01  2.87e-02  5.30e-01  1.46e-02  7.90e-02  6.14e-01  
  4  +4.3310e-01  +8.1281e-01  3.80e-01  1.00e-02  1.85e-01  8.00e-03  3.12e-02  6.37e-01  
  5  +3.9461e-01  +5.6611e-01  1.71e-01  4.26e-03  7.72e-02  2.56e-03  1.54e-02  5.93e-01  
  6  +3.8376e-01  +5.1374e-01  1.30e-01  3.06e-03  5.55e-02  1.82e-03  1.16e-02  3.45e-01  
  7  +3.6074e-01  +3.9212e-01  3.14e-02  7.36e-04  1.32e-02  1.10e-04  3.28e-03  9.90e-01  
  8  +3.5080e-01  +3.5191e-01  1.11e-03  2.49e-05  4.45e-04  2.79e-06  1.22e-04  9.71e-01  
  9  +3.5041e-01  +3.5044e-01  2.82e-05  6.33e-07  1.13e-05  7.56e-08  3.14e-06  9.78e-01  
 10  +3.5040e-01  +3.5040e-01  2.82e-07  6.34e-09  1.13e-07  7.58e-10  3.14e-08  9.90e-01  
 11  +3.5040e-01  +3.5040e-01  2.82e-09  6.34e-11  1.13e-09  7.58e-12  3.15e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 940.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:09 PM: Optimal value: 3.504e-01
(CVXPY) Oct 06 03:53:09 PM: Compilation took 5.253e-03 seconds
(CVXPY) Oct 06 03:53:09 PM: Solver (including time spent in interface) took 4.596e-03 seconds
Iteration: 3, Objective: 0.3504
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:09 PM: Your problem has 91 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Finished problem compilation (took 4.597e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 91
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 648
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9067e-01  +5.1294e+01  5.08e+01  8.79e-01  8.47e+00  1.00e+00  1.06e+00   ------   
  1  +5.5109e-01  +1.0969e+01  1.04e+01  3.64e-01  4.66e+00  3.91e-03  5.65e-01  6.15e-01  
  2  +4.9897e-01  +1.7643e+00  1.27e+00  7.68e-02  1.33e+00  1.54e-02  1.96e-01  9.58e-01  
  3  +4.5247e-01  +1.0342e+00  5.82e-01  2.23e-02  4.01e-01  1.10e-02  6.42e-02  7.33e-01  
  4  +4.0742e-01  +7.2500e-01  3.18e-01  8.69e-03  1.55e-01  7.09e-03  2.78e-02  5.94e-01  
  5  +3.7149e-01  +4.8495e-01  1.13e-01  2.98e-03  5.24e-02  1.94e-03  1.10e-02  6.77e-01  
  6  +3.5682e-01  +4.1397e-01  5.71e-02  1.42e-03  2.50e-02  5.76e-04  5.67e-03  7.39e-01  
  7  +3.4337e-01  +3.5160e-01  8.24e-03  1.97e-04  3.45e-03  3.59e-05  8.54e-04  9.90e-01  
  8  +3.4092e-01  +3.4185e-01  9.25e-04  2.20e-05  3.84e-04  3.84e-06  9.81e-05  8.89e-01  
  9  +3.4061e-01  +3.4065e-01  4.01e-05  9.50e-07  1.65e-05  1.58e-07  4.32e-06  9.64e-01  
 10  +3.4060e-01  +3.4060e-01  4.07e-07  9.65e-09  1.68e-07  1.61e-09  4.39e-08  9.90e-01  
 11  +3.4060e-01  +3.4060e-01  4.07e-09  9.65e-11  1.68e-09  1.61e-11  4.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0321ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:09 PM: Optimal value: 3.406e-01
(CVXPY) Oct 06 03:53:09 PM: Compilation took 4.597e-03 seconds
(CVXPY) Oct 06 03:53:09 PM: Solver (including time spent in interface) took 1.710e-03 seconds
Iteration: 4, Objective: 0.3406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:09 PM: Your problem has 94 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:09 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 94
  constraints   = 144
  nnz(P)        = 0
  nnz(A)        = 666
  cones (total) = 1
    : Nonnegative = 1,  numel = 144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9050e-01  +5.1294e+01  5.08e+01  8.80e-01  8.43e+00  1.00e+00  1.06e+00   ------   
  1  +5.4854e-01  +1.1011e+01  1.05e+01  3.68e-01  4.65e+00  3.90e-03  5.69e-01  6.12e-01  
  2  +4.9580e-01  +1.8033e+00  1.31e+00  7.88e-02  1.34e+00  1.57e-02  2.02e-01  9.52e-01  
  3  +4.4807e-01  +1.0249e+00  5.77e-01  2.24e-02  3.97e-01  1.05e-02  6.56e-02  7.37e-01  
  4  +4.0668e-01  +7.5014e-01  3.43e-01  9.84e-03  1.74e-01  6.63e-03  3.19e-02  5.77e-01  
  5  +3.7143e-01  +4.9997e-01  1.29e-01  3.52e-03  6.13e-02  1.92e-03  1.31e-02  6.47e-01  
  6  +3.6329e-01  +4.5872e-01  9.54e-02  2.53e-03  4.42e-02  1.08e-03  9.66e-03  5.06e-01  
  7  +3.6002e-01  +4.3545e-01  7.54e-02  2.00e-03  3.50e-02  6.61e-04  7.84e-03  4.92e-01  
  8  +3.4262e-01  +3.4960e-01  6.98e-03  1.80e-04  3.13e-03  4.69e-05  7.73e-04  9.18e-01  
  9  +3.4097e-01  +3.4215e-01  1.17e-03  3.00e-05  5.20e-04  7.26e-06  1.33e-04  8.46e-01  
 10  +3.4081e-01  +3.4147e-01  6.57e-04  1.64e-05  2.84e-04  3.56e-06  7.32e-05  6.63e-01  
 11  +3.4061e-01  +3.4063e-01  2.29e-05  5.73e-07  9.89e-06  1.19e-07  2.58e-06  9.66e-01  
 12  +3.4060e-01  +3.4060e-01  2.30e-07  5.74e-09  9.91e-08  1.20e-09  2.59e-08  9.90e-01  
 13  +3.4060e-01  +3.4060e-01  2.30e-09  5.74e-11  9.92e-10  1.20e-11  2.59e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1817ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:09 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:09 PM: Optimal value: 3.406e-01
(CVXPY) Oct 06 03:53:09 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:53:09 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.65
  Our objective: 0.29999999999999993

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1) <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1)            <-- (term's our objective: 0.06)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.355131387710571
Best over terms:
  Our final objective: 0.07999999999999997
    Its accruacy: 0.54
    Its hamming distance: 3
  Shortest hamming distance: 1
    Its our objective: 0.05999999999999998
  Highest accruacy: 0.54
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

