Command:
python test_script.py -s constant_subclass -d 9 -n 100 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 9.

Computed total variation: 0.94
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:10 PM: Your problem has 69 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Finished problem compilation (took 4.729e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 69
  constraints   = 119
  nnz(P)        = 0
  nnz(A)        = 619
  cones (total) = 1
    : Nonnegative = 1,  numel = 119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9799e-01  +5.1047e+01  5.05e+01  8.73e-01  1.04e+01  1.00e+00  1.04e+00   ------   
  1  +5.7529e-01  +1.1248e+01  1.07e+01  3.81e-01  6.27e+00  3.76e-03  5.93e-01  5.89e-01  
  2  +5.1306e-01  +1.7742e+00  1.26e+00  9.77e-02  1.99e+00  1.88e-02  2.50e-01  9.90e-01  
  3  +4.9315e-01  +8.2167e-01  3.29e-01  2.13e-02  4.59e-01  8.01e-03  6.61e-02  7.88e-01  
  4  +4.6802e-01  +6.9674e-01  2.29e-01  8.42e-03  1.84e-01  8.05e-03  2.79e-02  6.23e-01  
  5  +4.4858e-01  +5.3187e-01  8.33e-02  2.88e-03  6.19e-02  1.69e-03  1.09e-02  6.98e-01  
  6  +4.4031e-01  +4.7633e-01  3.60e-02  1.18e-03  2.52e-02  6.44e-04  4.67e-03  6.22e-01  
  7  +4.3523e-01  +4.4425e-01  9.02e-03  2.84e-04  6.08e-03  1.24e-04  1.19e-03  8.17e-01  
  8  +4.3352e-01  +4.3377e-01  2.58e-04  8.10e-06  1.73e-04  3.18e-06  3.45e-05  9.72e-01  
  9  +4.3347e-01  +4.3347e-01  2.58e-06  8.10e-08  1.73e-06  3.18e-08  3.45e-07  9.90e-01  
 10  +4.3347e-01  +4.3347e-01  2.58e-08  8.10e-10  1.73e-08  3.18e-10  3.45e-09  9.90e-01  
 11  +4.3347e-01  +4.3347e-01  2.58e-10  8.10e-12  1.73e-10  3.18e-12  3.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 907.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:11 PM: Optimal value: 4.335e-01
(CVXPY) Oct 06 04:14:11 PM: Compilation took 4.729e-02 seconds
(CVXPY) Oct 06 04:14:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4335
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:11 PM: Your problem has 79 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 79
  constraints   = 129
  nnz(P)        = 0
  nnz(A)        = 740
  cones (total) = 1
    : Nonnegative = 1,  numel = 129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9272e-01  +5.1975e+01  5.15e+01  8.79e-01  1.05e+01  1.00e+00  1.06e+00   ------   
  1  +5.4477e-01  +1.1418e+01  1.09e+01  3.88e-01  6.25e+00  3.78e-03  6.05e-01  5.90e-01  
  2  +4.7855e-01  +2.1631e+00  1.68e+00  1.05e-01  2.18e+00  2.18e-02  2.59e-01  9.38e-01  
  3  +4.1594e-01  +9.5894e-01  5.43e-01  2.28e-02  4.94e-01  1.11e-02  6.62e-02  7.89e-01  
  4  +3.9956e-01  +7.9492e-01  3.95e-01  1.45e-02  3.15e-01  8.46e-03  4.36e-02  3.87e-01  
  5  +3.7541e-01  +6.4359e-01  2.68e-01  6.84e-03  1.51e-01  6.79e-03  2.19e-02  6.00e-01  
  6  +3.3904e-01  +4.6099e-01  1.22e-01  2.45e-03  5.45e-02  2.55e-03  8.50e-03  7.14e-01  
  7  +3.1535e-01  +3.5524e-01  3.99e-02  7.75e-04  1.74e-02  6.46e-04  2.81e-03  7.37e-01  
  8  +3.0485e-01  +3.1667e-01  1.18e-02  2.19e-04  5.05e-03  1.70e-04  8.21e-04  7.65e-01  
  9  +3.0056e-01  +3.0090e-01  3.38e-04  6.27e-06  1.45e-04  2.26e-06  2.40e-05  9.90e-01  
 10  +3.0040e-01  +3.0041e-01  6.29e-06  1.18e-07  2.71e-06  2.24e-08  4.69e-07  9.80e-01  
 11  +3.0040e-01  +3.0040e-01  6.28e-08  1.18e-09  2.70e-08  2.24e-10  4.71e-09  9.90e-01  
 12  +3.0040e-01  +3.0040e-01  6.28e-10  1.18e-11  2.70e-10  2.24e-12  4.71e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1584ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:11 PM: Optimal value: 3.004e-01
(CVXPY) Oct 06 04:14:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:11 PM: Solver (including time spent in interface) took 1.509e-02 seconds
Iteration: 2, Objective: 0.3004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:11 PM: Your problem has 89 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Finished problem compilation (took 1.666e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 89
  constraints   = 139
  nnz(P)        = 0
  nnz(A)        = 826
  cones (total) = 1
    : Nonnegative = 1,  numel = 139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8947e-01  +5.2242e+01  5.18e+01  8.84e-01  1.04e+01  1.00e+00  1.07e+00   ------   
  1  +5.2155e-01  +1.1401e+01  1.09e+01  3.92e-01  6.03e+00  3.81e-03  6.04e-01  5.94e-01  
  2  +4.3701e-01  +2.3416e+00  1.90e+00  9.70e-02  2.00e+00  2.45e-02  2.35e-01  9.48e-01  
  3  +3.3769e-01  +9.9774e-01  6.60e-01  2.09e-02  4.50e-01  1.40e-02  5.88e-02  8.03e-01  
  4  +2.7938e-01  +5.8940e-01  3.10e-01  7.97e-03  1.71e-01  6.66e-03  2.45e-02  6.37e-01  
  5  +2.3362e-01  +3.3830e-01  1.05e-01  2.50e-03  5.53e-02  1.58e-03  8.24e-03  7.74e-01  
  6  +2.1428e-01  +2.5872e-01  4.44e-02  1.01e-03  2.28e-02  6.40e-04  3.41e-03  6.25e-01  
  7  +2.0197e-01  +2.0610e-01  4.13e-03  9.27e-05  2.10e-03  4.99e-05  3.25e-04  9.15e-01  
  8  +2.0075e-01  +2.0103e-01  2.83e-04  6.48e-06  1.44e-04  2.57e-06  2.33e-05  9.29e-01  
  9  +2.0065e-01  +2.0067e-01  1.11e-05  2.62e-07  5.71e-06  7.32e-08  9.85e-07  9.70e-01  
 10  +2.0065e-01  +2.0065e-01  1.12e-07  2.65e-09  5.77e-08  7.39e-10  9.99e-09  9.90e-01  
 11  +2.0065e-01  +2.0065e-01  1.12e-09  2.65e-11  5.77e-10  7.39e-12  9.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2823ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:11 PM: Optimal value: 2.007e-01
(CVXPY) Oct 06 04:14:11 PM: Compilation took 1.666e-02 seconds
(CVXPY) Oct 06 04:14:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:11 PM: Your problem has 99 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 99
  constraints   = 149
  nnz(P)        = 0
  nnz(A)        = 881
  cones (total) = 1
    : Nonnegative = 1,  numel = 149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8729e-01  +5.2515e+01  5.20e+01  8.87e-01  1.02e+01  1.00e+00  1.07e+00   ------   
  1  +5.0454e-01  +1.1654e+01  1.11e+01  4.03e-01  5.94e+00  3.83e-03  6.13e-01  5.83e-01  
  2  +4.1589e-01  +2.2678e+00  1.85e+00  9.39e-02  1.90e+00  2.70e-02  2.29e-01  9.90e-01  
  3  +3.0725e-01  +1.1267e+00  8.19e-01  2.53e-02  5.29e-01  1.81e-02  7.09e-02  7.45e-01  
  4  +2.4503e-01  +5.5795e-01  3.13e-01  8.59e-03  1.79e-01  6.23e-03  2.61e-02  6.68e-01  
  5  +2.1064e-01  +3.5212e-01  1.41e-01  3.59e-03  7.80e-02  2.53e-03  1.15e-02  6.75e-01  
  6  +1.8611e-01  +2.3949e-01  5.34e-02  1.22e-03  2.71e-02  9.10e-04  4.16e-03  6.86e-01  
  7  +1.7318e-01  +1.8009e-01  6.91e-03  1.57e-04  3.47e-03  5.02e-05  5.53e-04  9.57e-01  
  8  +1.7098e-01  +1.7149e-01  5.08e-04  1.17e-05  2.55e-04  2.89e-06  4.23e-05  9.24e-01  
  9  +1.7081e-01  +1.7084e-01  3.19e-05  7.55e-07  1.61e-05  1.51e-07  2.88e-06  9.50e-01  
 10  +1.7080e-01  +1.7080e-01  3.27e-07  7.77e-09  1.65e-07  1.54e-09  2.97e-08  9.90e-01  
 11  +1.7080e-01  +1.7080e-01  3.27e-09  7.77e-11  1.65e-09  1.54e-11  2.98e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5631ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:11 PM: Optimal value: 1.708e-01
(CVXPY) Oct 06 04:14:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:11 PM: Solver (including time spent in interface) took 1.572e-02 seconds
Iteration: 4, Objective: 0.1708
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:11 PM: Your problem has 108 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 108
  constraints   = 158
  nnz(P)        = 0
  nnz(A)        = 928
  cones (total) = 1
    : Nonnegative = 1,  numel = 158

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8439e-01  +5.2594e+01  5.21e+01  8.90e-01  1.00e+01  1.00e+00  1.08e+00   ------   
  1  +4.6728e-01  +1.1737e+01  1.13e+01  3.99e-01  5.72e+00  3.92e-03  6.05e-01  5.83e-01  
  2  +3.3239e-01  +2.7220e+00  2.39e+00  9.52e-02  1.82e+00  2.98e-02  2.27e-01  9.38e-01  
  3  +2.3147e-01  +1.0730e+00  8.42e-01  2.70e-02  5.32e-01  1.31e-02  7.33e-02  7.24e-01  
  4  +1.8157e-01  +4.6020e-01  2.79e-01  9.00e-03  1.73e-01  3.64e-03  2.78e-02  6.69e-01  
  5  +1.5273e-01  +2.6276e-01  1.10e-01  3.30e-03  6.38e-02  1.38e-03  1.14e-02  6.39e-01  
  6  +1.4470e-01  +2.1438e-01  6.97e-02  2.02e-03  3.96e-02  8.59e-04  7.08e-03  4.18e-01  
  7  +1.3258e-01  +1.3877e-01  6.19e-03  1.79e-04  3.50e-03  1.96e-05  6.64e-04  9.88e-01  
  8  +1.3113e-01  +1.3191e-01  7.79e-04  2.28e-05  4.40e-04  1.99e-06  8.90e-05  8.71e-01  
  9  +1.3092e-01  +1.3097e-01  5.36e-05  1.55e-06  2.95e-05  1.17e-07  7.12e-06  9.65e-01  
 10  +1.3090e-01  +1.3090e-01  7.03e-07  2.01e-08  3.83e-07  1.53e-09  9.61e-08  9.87e-01  
 11  +1.3090e-01  +1.3090e-01  7.03e-09  2.01e-10  3.84e-09  1.53e-11  9.62e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5912ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:11 PM: Optimal value: 1.309e-01
(CVXPY) Oct 06 04:14:11 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:14:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1309
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:11 PM: Your problem has 118 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 118
  constraints   = 168
  nnz(P)        = 0
  nnz(A)        = 971
  cones (total) = 1
    : Nonnegative = 1,  numel = 168

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8242e-01  +5.2706e+01  5.22e+01  8.94e-01  9.80e+00  1.00e+00  1.08e+00   ------   
  1  +4.4268e-01  +1.2060e+01  1.16e+01  4.07e-01  5.59e+00  4.01e-03  6.12e-01  5.70e-01  
  2  +3.0185e-01  +2.6524e+00  2.35e+00  9.42e-02  1.73e+00  3.22e-02  2.26e-01  9.62e-01  
  3  +2.1083e-01  +9.5973e-01  7.49e-01  2.51e-02  4.76e-01  1.16e-02  6.91e-02  7.74e-01  
  4  +1.6397e-01  +3.6503e-01  2.01e-01  6.73e-03  1.26e-01  2.58e-03  2.12e-02  7.54e-01  
  5  +1.3795e-01  +2.1224e-01  7.43e-02  2.25e-03  4.31e-02  8.82e-04  7.54e-03  7.38e-01  
  6  +1.2594e-01  +1.4616e-01  2.02e-02  6.05e-04  1.16e-02  1.16e-04  2.11e-03  8.83e-01  
  7  +1.2125e-01  +1.2214e-01  8.91e-04  2.65e-05  5.07e-04  3.68e-06  9.58e-05  9.56e-01  
  8  +1.2103e-01  +1.2111e-01  8.05e-05  2.46e-06  4.53e-05  2.27e-07  1.03e-05  9.33e-01  
  9  +1.2100e-01  +1.2100e-01  1.25e-06  3.79e-08  7.00e-07  3.46e-09  1.66e-07  9.88e-01  
 10  +1.2100e-01  +1.2100e-01  1.25e-08  3.79e-10  7.00e-09  3.46e-11  1.67e-09  9.90e-01  
 11  +1.2100e-01  +1.2100e-01  1.25e-10  3.79e-12  7.00e-11  3.47e-13  1.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8457ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:11 PM: Optimal value: 1.210e-01
(CVXPY) Oct 06 04:14:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.1210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:11 PM: Your problem has 128 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 128
  constraints   = 178
  nnz(P)        = 0
  nnz(A)        = 1011
  cones (total) = 1
    : Nonnegative = 1,  numel = 178

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8081e-01  +5.2964e+01  5.25e+01  8.97e-01  9.59e+00  1.00e+00  1.09e+00   ------   
  1  +4.2056e-01  +1.2234e+01  1.18e+01  4.10e-01  5.42e+00  4.07e-03  6.12e-01  5.66e-01  
  2  +2.6653e-01  +2.9850e+00  2.72e+00  1.02e-01  1.82e+00  3.24e-02  2.43e-01  9.10e-01  
  3  +1.9766e-01  +9.4001e-01  7.42e-01  2.57e-02  4.76e-01  1.12e-02  7.09e-02  7.66e-01  
  4  +1.5375e-01  +3.7778e-01  2.24e-01  7.67e-03  1.41e-01  2.97e-03  2.38e-02  7.36e-01  
  5  +1.3615e-01  +2.8346e-01  1.47e-01  4.53e-03  8.64e-02  1.97e-03  1.45e-02  4.55e-01  
  6  +1.1597e-01  +1.7775e-01  6.18e-02  1.71e-03  3.38e-02  8.00e-04  5.75e-03  6.66e-01  
  7  +1.0287e-01  +1.0811e-01  5.24e-03  1.43e-04  2.82e-03  1.76e-05  5.05e-04  9.88e-01  
  8  +1.0134e-01  +1.0176e-01  4.16e-04  1.17e-05  2.25e-04  8.19e-07  4.37e-05  9.15e-01  
  9  +1.0122e-01  +1.0127e-01  5.51e-05  1.58e-06  2.98e-05  1.77e-07  6.41e-06  9.34e-01  
 10  +1.0120e-01  +1.0120e-01  6.47e-07  1.86e-08  3.50e-07  2.04e-09  7.60e-08  9.88e-01  
 11  +1.0120e-01  +1.0120e-01  6.47e-09  1.86e-10  3.50e-09  2.04e-11  7.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6682ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:11 PM: Optimal value: 1.012e-01
(CVXPY) Oct 06 04:14:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.1012
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:12 PM: Your problem has 138 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 138
  constraints   = 188
  nnz(P)        = 0
  nnz(A)        = 1049
  cones (total) = 1
    : Nonnegative = 1,  numel = 188

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7766e-01  +5.2594e+01  5.21e+01  8.99e-01  9.39e+00  1.00e+00  1.08e+00   ------   
  1  +3.6996e-01  +1.2351e+01  1.20e+01  4.03e-01  5.17e+00  4.26e-03  5.93e-01  5.63e-01  
  2  +2.2181e-01  +2.5960e+00  2.37e+00  8.97e-02  1.57e+00  3.22e-02  2.07e-01  9.57e-01  
  3  +1.6825e-01  +8.8065e-01  7.12e-01  2.63e-02  4.71e-01  1.08e-02  6.91e-02  6.92e-01  
  4  +1.1535e-01  +3.3363e-01  2.18e-01  7.48e-03  1.34e-01  2.96e-03  2.23e-02  7.84e-01  
  5  +9.9057e-02  +2.5169e-01  1.53e-01  4.81e-03  8.92e-02  2.03e-03  1.48e-02  3.96e-01  
  6  +7.6314e-02  +1.3336e-01  5.71e-02  1.62e-03  3.12e-02  5.62e-04  5.34e-03  8.05e-01  
  7  +6.4794e-02  +7.5484e-02  1.07e-02  2.99e-04  5.73e-03  4.54e-05  1.02e-03  9.90e-01  
  8  +6.1683e-02  +6.2470e-02  7.87e-04  2.24e-05  4.23e-04  2.05e-06  8.01e-05  9.22e-01  
  9  +6.1430e-02  +6.1513e-02  8.23e-05  2.45e-06  4.44e-05  2.28e-07  1.00e-05  9.12e-01  
 10  +6.1400e-02  +6.1402e-02  1.19e-06  3.56e-08  6.43e-07  3.54e-09  1.49e-07  9.90e-01  
 11  +6.1400e-02  +6.1400e-02  1.19e-08  3.56e-10  6.43e-09  3.54e-11  1.49e-09  9.90e-01  
 12  +6.1400e-02  +6.1400e-02  1.19e-10  3.56e-12  6.43e-11  3.54e-13  1.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8511ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:12 PM: Optimal value: 6.140e-02
(CVXPY) Oct 06 04:14:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0614
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:12 PM: Your problem has 148 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 148
  constraints   = 198
  nnz(P)        = 0
  nnz(A)        = 1089
  cones (total) = 1
    : Nonnegative = 1,  numel = 198

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7694e-01  +5.2751e+01  5.23e+01  9.02e-01  9.20e+00  1.00e+00  1.08e+00   ------   
  1  +3.5256e-01  +1.2353e+01  1.20e+01  4.04e-01  4.99e+00  4.29e-03  5.89e-01  5.66e-01  
  2  +1.6170e-01  +3.2476e+00  3.09e+00  1.03e-01  1.72e+00  3.12e-02  2.36e-01  8.59e-01  
  3  +1.4752e-01  +7.5789e-01  6.10e-01  2.39e-02  4.12e-01  8.61e-03  6.42e-02  7.60e-01  
  4  +9.6506e-02  +3.0775e-01  2.11e-01  7.66e-03  1.34e-01  2.69e-03  2.31e-02  7.80e-01  
  5  +8.2667e-02  +2.3077e-01  1.48e-01  4.91e-03  8.91e-02  1.86e-03  1.54e-02  3.99e-01  
  6  +6.6044e-02  +1.3326e-01  6.72e-02  2.03e-03  3.82e-02  7.27e-04  6.78e-03  6.80e-01  
  7  +5.5083e-02  +6.8181e-02  1.31e-02  3.91e-04  7.34e-03  5.14e-05  1.36e-03  9.90e-01  
  8  +5.1677e-02  +5.2532e-02  8.55e-04  2.59e-05  4.78e-04  1.97e-06  9.41e-05  9.31e-01  
  9  +5.1446e-02  +5.1588e-02  1.42e-04  4.52e-06  7.97e-05  3.48e-07  1.86e-05  8.38e-01  
 10  +5.1401e-02  +5.1404e-02  3.28e-06  1.05e-07  1.85e-06  9.35e-09  4.45e-07  9.87e-01  
 11  +5.1400e-02  +5.1400e-02  3.28e-08  1.05e-09  1.85e-08  9.35e-11  4.46e-09  9.90e-01  
 12  +5.1400e-02  +5.1400e-02  3.29e-10  1.05e-11  1.85e-10  9.36e-13  4.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.0667ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:12 PM: Optimal value: 5.140e-02
(CVXPY) Oct 06 04:14:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0514
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:12 PM: Your problem has 149 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:12 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 149
  constraints   = 199
  nnz(P)        = 0
  nnz(A)        = 1092
  cones (total) = 1
    : Nonnegative = 1,  numel = 199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7694e-01  +5.2755e+01  5.23e+01  9.02e-01  9.19e+00  1.00e+00  1.08e+00   ------   
  1  +3.5137e-01  +1.2372e+01  1.20e+01  4.05e-01  4.97e+00  4.29e-03  5.90e-01  5.65e-01  
  2  +1.5996e-01  +3.3114e+00  3.15e+00  1.05e-01  1.75e+00  3.13e-02  2.40e-01  8.51e-01  
  3  +1.4693e-01  +7.7509e-01  6.28e-01  2.46e-02  4.22e-01  8.83e-03  6.60e-02  7.57e-01  
  4  +9.5690e-02  +3.0269e-01  2.07e-01  7.52e-03  1.31e-01  2.64e-03  2.28e-02  7.91e-01  
  5  +8.2110e-02  +2.2930e-01  1.47e-01  4.89e-03  8.80e-02  1.83e-03  1.54e-02  3.95e-01  
  6  +6.5500e-02  +1.3127e-01  6.58e-02  2.02e-03  3.73e-02  6.84e-04  6.73e-03  6.89e-01  
  7  +5.3275e-02  +6.0027e-02  6.75e-03  2.04e-04  3.75e-03  2.38e-05  7.10e-04  9.90e-01  
  8  +5.1597e-02  +5.2209e-02  6.11e-04  1.91e-05  3.41e-04  1.23e-06  7.10e-05  9.02e-01  
  9  +5.1425e-02  +5.1505e-02  8.09e-05  2.62e-06  4.52e-05  2.40e-07  1.09e-05  9.30e-01  
 10  +5.1400e-02  +5.1401e-02  1.04e-06  3.36e-08  5.80e-07  2.99e-09  1.42e-07  9.87e-01  
 11  +5.1400e-02  +5.1400e-02  1.04e-08  3.36e-10  5.80e-09  2.99e-11  1.42e-09  9.90e-01  
 12  +5.1400e-02  +5.1400e-02  1.04e-10  3.37e-12  5.81e-11  2.99e-13  1.42e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8657ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:12 PM: Optimal value: 5.140e-02
(CVXPY) Oct 06 04:14:12 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:14:12 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 10, Objective: 0.0514
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:12 PM: Your problem has 150 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 150
  constraints   = 200
  nnz(P)        = 0
  nnz(A)        = 1096
  cones (total) = 1
    : Nonnegative = 1,  numel = 200

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7691e-01  +5.2752e+01  5.23e+01  9.02e-01  9.17e+00  1.00e+00  1.08e+00   ------   
  1  +3.5000e-01  +1.2382e+01  1.20e+01  4.05e-01  4.96e+00  4.30e-03  5.90e-01  5.65e-01  
  2  +1.5651e-01  +3.3638e+00  3.21e+00  1.07e-01  1.76e+00  3.13e-02  2.42e-01  8.45e-01  
  3  +1.4524e-01  +7.4627e-01  6.01e-01  2.36e-02  4.04e-01  8.59e-03  6.36e-02  7.74e-01  
  4  +9.5301e-02  +3.1167e-01  2.16e-01  7.93e-03  1.36e-01  2.88e-03  2.39e-02  7.45e-01  
  5  +8.0674e-02  +2.3099e-01  1.50e-01  4.99e-03  8.91e-02  1.94e-03  1.57e-02  4.16e-01  
  6  +6.2557e-02  +1.1608e-01  5.35e-02  1.67e-03  3.02e-02  4.90e-04  5.55e-03  8.00e-01  
  7  +5.2032e-02  +5.4316e-02  2.28e-03  7.05e-05  1.27e-03  7.99e-06  2.45e-04  9.80e-01  
  8  +5.1509e-02  +5.1869e-02  3.60e-04  1.17e-05  2.02e-04  9.35e-07  4.58e-05  8.28e-01  
  9  +5.1413e-02  +5.1458e-02  4.45e-05  1.47e-06  2.49e-05  1.54e-07  6.12e-06  9.90e-01  
 10  +5.1400e-02  +5.1401e-02  4.57e-07  1.51e-08  2.56e-07  1.56e-09  6.33e-08  9.90e-01  
 11  +5.1400e-02  +5.1400e-02  4.57e-09  1.51e-10  2.56e-09  1.56e-11  6.33e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.9382ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:12 PM: Optimal value: 5.140e-02
(CVXPY) Oct 06 04:14:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:14:12 PM: Solver (including time spent in interface) took 1.563e-02 seconds
FULL MODEL:
  Accruacy: 0.94
  Our objective: 0.88

IF 
    (x0 = 0 AND x1 = 1 AND x2 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x2 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.12)
 OR (x0 = 0 AND x3 = 1 AND x4 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0)                       <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.16)
 OR (x0 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 0) <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0)                       <-- (term's our objective: 0.06)
 OR (x1 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.08)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.06)
 OR (x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.108392715454102
Best over terms:
  Our final objective: 0.16000000000000006
    Its accruacy: 0.58
    Its hamming distance: 6
  Shortest hamming distance: 3
    Its our objective: 0.12
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

