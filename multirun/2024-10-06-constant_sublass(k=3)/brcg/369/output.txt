Command:
python test_script.py -s constant_subclass -d 10 -n 50 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 10.

Computed total variation: 0.96
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:45 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Finished problem compilation (took 4.865e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 346
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9073e-01  +2.6702e+01  2.62e+01  8.41e-01  7.20e+00  1.00e+00  1.10e+00   ------   
  1  +5.5323e-01  +5.8588e+00  5.31e+00  3.76e-01  4.23e+00  3.66e-03  6.32e-01  5.96e-01  
  2  +4.4483e-01  +1.2793e+00  8.34e-01  8.61e-02  1.20e+00  2.36e-02  2.36e-01  9.90e-01  
  3  +3.9320e-01  +6.7988e-01  2.87e-01  2.25e-02  3.21e-01  7.75e-03  7.81e-02  7.61e-01  
  4  +3.7252e-01  +5.0484e-01  1.32e-01  9.09e-03  1.29e-01  3.19e-03  3.60e-02  6.19e-01  
  5  +3.5304e-01  +4.1138e-01  5.83e-02  2.89e-03  4.20e-02  1.27e-03  1.46e-02  7.16e-01  
  6  +3.4073e-01  +3.4318e-01  2.45e-03  1.18e-04  1.71e-03  2.80e-05  6.54e-04  9.69e-01  
  7  +3.4011e-01  +3.4013e-01  2.47e-05  1.18e-06  1.72e-05  2.81e-07  6.62e-06  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  2.47e-07  1.18e-08  1.72e-07  2.81e-09  6.62e-08  9.90e-01  
  9  +3.4010e-01  +3.4010e-01  2.47e-09  1.18e-10  1.72e-09  2.81e-11  6.62e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 659µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:45 PM: Optimal value: 3.401e-01
(CVXPY) Oct 06 04:22:45 PM: Compilation took 4.865e-02 seconds
(CVXPY) Oct 06 04:22:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:45 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 404
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7708e-01  +2.7604e+01  2.71e+01  8.51e-01  7.12e+00  1.00e+00  1.14e+00   ------   
  1  +4.8389e-01  +5.8948e+00  5.41e+00  3.74e-01  3.99e+00  3.74e-03  6.30e-01  6.10e-01  
  2  +3.1170e-01  +1.4566e+00  1.14e+00  8.08e-02  1.08e+00  2.50e-02  2.14e-01  9.27e-01  
  3  +2.5796e-01  +6.2613e-01  3.68e-01  2.28e-02  3.11e-01  1.02e-02  7.23e-02  7.22e-01  
  4  +2.0724e-01  +4.1716e-01  2.10e-01  1.03e-02  1.47e-01  5.46e-03  3.64e-02  5.91e-01  
  5  +1.7129e-01  +2.1805e-01  4.68e-02  2.21e-03  3.15e-02  9.57e-04  8.75e-03  7.88e-01  
  6  +1.6080e-01  +1.6267e-01  1.87e-03  9.01e-05  1.27e-03  2.73e-05  3.76e-04  9.59e-01  
  7  +1.6033e-01  +1.6041e-01  7.75e-05  3.85e-06  5.34e-05  2.77e-07  1.71e-05  9.55e-01  
  8  +1.6030e-01  +1.6030e-01  1.17e-06  5.87e-08  8.10e-07  6.92e-09  2.92e-07  9.84e-01  
  9  +1.6030e-01  +1.6030e-01  1.17e-08  5.86e-10  8.08e-09  6.91e-11  2.92e-09  9.90e-01  
 10  +1.6030e-01  +1.6030e-01  1.17e-10  5.87e-12  8.09e-11  6.91e-13  2.92e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 694.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:45 PM: Optimal value: 1.603e-01
(CVXPY) Oct 06 04:22:45 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:45 PM: Your problem has 66 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 66
  constraints   = 91
  nnz(P)        = 0
  nnz(A)        = 451
  cones (total) = 1
    : Nonnegative = 1,  numel = 91

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7350e-01  +2.7792e+01  2.73e+01  8.59e-01  6.92e+00  1.00e+00  1.14e+00   ------   
  1  +4.5253e-01  +5.9795e+00  5.53e+00  3.82e-01  3.85e+00  3.79e-03  6.32e-01  6.04e-01  
  2  +1.8305e-01  +1.9743e+00  1.79e+00  1.01e-01  1.27e+00  2.75e-02  2.51e-01  8.16e-01  
  3  +1.5661e-01  +5.1282e-01  3.56e-01  2.16e-02  2.86e-01  9.93e-03  6.47e-02  7.87e-01  
  4  +1.2596e-01  +2.5786e-01  1.32e-01  7.69e-03  1.07e-01  3.17e-03  2.59e-02  7.28e-01  
  5  +1.0682e-01  +1.4019e-01  3.34e-02  1.83e-03  2.63e-02  7.56e-04  6.78e-03  7.56e-01  
  6  +1.0065e-01  +1.0142e-01  7.71e-04  4.32e-05  6.16e-04  8.39e-06  1.66e-04  9.82e-01  
  7  +1.0047e-01  +1.0051e-01  4.53e-05  2.66e-06  3.69e-05  1.39e-07  1.14e-05  9.34e-01  
  8  +1.0045e-01  +1.0045e-01  5.33e-07  3.16e-08  4.35e-07  2.04e-09  1.44e-07  9.88e-01  
  9  +1.0045e-01  +1.0045e-01  5.35e-09  3.17e-10  4.36e-09  2.04e-11  1.45e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 666.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:45 PM: Optimal value: 1.005e-01
(CVXPY) Oct 06 04:22:45 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1005
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:45 PM: Your problem has 76 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Finished problem compilation (took 1.005e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 101
  nnz(P)        = 0
  nnz(A)        = 509
  cones (total) = 1
    : Nonnegative = 1,  numel = 101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6845e-01  +2.8195e+01  2.77e+01  8.66e-01  6.83e+00  1.00e+00  1.15e+00   ------   
  1  +4.1581e-01  +6.1474e+00  5.73e+00  3.95e-01  3.79e+00  3.85e-03  6.43e-01  5.94e-01  
  2  +1.4094e-01  +1.8935e+00  1.75e+00  1.01e-01  1.22e+00  2.81e-02  2.51e-01  8.29e-01  
  3  +1.3174e-01  +5.4306e-01  4.11e-01  2.51e-02  3.24e-01  1.14e-02  7.55e-02  7.39e-01  
  4  +1.0567e-01  +2.4668e-01  1.41e-01  8.41e-03  1.13e-01  3.85e-03  2.76e-02  7.22e-01  
  5  +8.5307e-02  +1.1299e-01  2.77e-02  1.52e-03  2.17e-02  6.42e-04  5.51e-03  8.49e-01  
  6  +8.0697e-02  +8.1316e-02  6.19e-04  3.46e-05  4.89e-04  8.92e-06  1.29e-04  9.77e-01  
  7  +8.0573e-02  +8.0653e-02  8.04e-05  4.91e-06  6.51e-05  8.07e-07  2.06e-05  8.53e-01  
  8  +8.0551e-02  +8.0552e-02  1.90e-06  1.20e-07  1.55e-06  1.53e-08  5.24e-07  9.83e-01  
  9  +8.0550e-02  +8.0550e-02  1.90e-08  1.20e-09  1.55e-08  1.53e-10  5.24e-09  9.90e-01  
 10  +8.0550e-02  +8.0550e-02  1.90e-10  1.20e-11  1.56e-10  1.53e-12  5.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 725.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:45 PM: Optimal value: 8.055e-02
(CVXPY) Oct 06 04:22:45 PM: Compilation took 1.005e-03 seconds
(CVXPY) Oct 06 04:22:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.0806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:45 PM: Your problem has 86 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:45 PM: Finished problem compilation (took 1.570e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 86
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 539
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6239e-01  +2.8366e+01  2.79e+01  8.72e-01  6.61e+00  1.00e+00  1.16e+00   ------   
  1  +3.5695e-01  +6.1152e+00  5.76e+00  3.87e-01  3.51e+00  3.97e-03  6.26e-01  6.02e-01  
  2  +2.1926e-02  +2.4659e+00  2.44e+00  1.18e-01  1.33e+00  2.68e-02  3.01e-01  7.08e-01  
  3  +9.1677e-02  +4.2246e-01  3.31e-01  2.22e-02  2.62e-01  1.47e-02  7.04e-02  8.60e-01  
  4  +6.9162e-02  +1.6389e-01  9.47e-02  6.16e-03  7.28e-02  3.49e-03  2.20e-02  7.94e-01  
  5  +6.1463e-02  +6.7062e-02  5.60e-03  3.78e-04  4.43e-03  5.63e-05  1.41e-03  9.86e-01  
  6  +6.0620e-02  +6.0908e-02  2.88e-04  2.00e-05  2.30e-04  1.19e-06  7.86e-05  9.45e-01  
  7  +6.0561e-02  +6.0607e-02  4.60e-05  3.34e-06  3.72e-05  2.10e-07  1.56e-05  8.32e-01  
  8  +6.0550e-02  +6.0551e-02  9.67e-07  7.05e-08  7.85e-07  4.27e-09  3.43e-07  9.79e-01  
  9  +6.0550e-02  +6.0550e-02  9.66e-09  7.04e-10  7.85e-09  4.27e-11  3.43e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 743.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:45 PM: Optimal value: 6.055e-02
(CVXPY) Oct 06 04:22:45 PM: Compilation took 1.570e-02 seconds
(CVXPY) Oct 06 04:22:45 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:46 PM: Your problem has 96 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:46 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 96
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 575
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5541e-01  +2.8064e+01  2.76e+01  8.77e-01  6.43e+00  1.00e+00  1.15e+00   ------   
  1  +2.9751e-01  +6.2884e+00  5.99e+00  3.96e-01  3.36e+00  4.22e-03  6.13e-01  5.85e-01  
  2  +4.8104e-02  +3.2059e+00  3.16e+00  1.80e-01  1.82e+00  2.32e-02  3.84e-01  5.33e-01  
  3  +7.8887e-02  +5.5347e-01  4.75e-01  3.52e-02  3.97e-01  1.61e-02  1.02e-01  8.41e-01  
  4  +5.0278e-02  +1.4822e-01  9.79e-02  7.18e-03  8.08e-02  2.63e-03  2.42e-02  8.75e-01  
  5  +4.3021e-02  +6.0858e-02  1.78e-02  1.33e-03  1.50e-02  1.86e-04  4.65e-03  9.37e-01  
  6  +4.0762e-02  +4.1580e-02  8.19e-04  6.14e-05  6.83e-04  6.35e-06  2.21e-04  9.53e-01  
  7  +4.0637e-02  +4.0802e-02  1.65e-04  1.31e-05  1.37e-04  8.56e-07  5.65e-05  9.16e-01  
  8  +4.0601e-02  +4.0606e-02  5.04e-06  4.03e-07  4.19e-06  1.79e-08  1.90e-06  9.77e-01  
  9  +4.0600e-02  +4.0600e-02  5.05e-08  4.03e-09  4.20e-08  1.79e-10  1.91e-08  9.90e-01  
 10  +4.0600e-02  +4.0600e-02  5.05e-10  4.04e-11  4.20e-10  1.80e-12  1.91e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 840.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:46 PM: Optimal value: 4.060e-02
(CVXPY) Oct 06 04:22:46 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:46 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:46 PM: Your problem has 97 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:46 PM: Finished problem compilation (took 6.155e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 97
  constraints   = 122
  nnz(P)        = 0
  nnz(A)        = 581
  cones (total) = 1
    : Nonnegative = 1,  numel = 122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5409e-01  +2.8046e+01  2.76e+01  8.78e-01  6.43e+00  1.00e+00  1.15e+00   ------   
  1  +2.8264e-01  +6.2502e+00  5.97e+00  3.92e-01  3.32e+00  4.24e-03  6.09e-01  5.88e-01  
  2  +3.5663e-02  +3.2475e+00  3.21e+00  1.85e-01  1.84e+00  2.32e-02  3.90e-01  5.25e-01  
  3  +7.7963e-02  +5.5013e-01  4.72e-01  3.64e-02  4.05e-01  1.67e-02  1.03e-01  8.48e-01  
  4  +5.2437e-02  +1.9148e-01  1.39e-01  1.07e-02  1.19e-01  4.12e-03  3.40e-02  7.76e-01  
  5  +4.3583e-02  +7.9065e-02  3.55e-02  2.70e-03  3.01e-02  1.01e-03  9.02e-03  7.48e-01  
  6  +4.0744e-02  +4.1585e-02  8.40e-04  6.53e-05  7.21e-04  1.59e-05  2.23e-04  9.76e-01  
  7  +4.0629e-02  +4.0738e-02  1.09e-04  8.96e-06  9.32e-05  5.52e-07  3.75e-05  9.20e-01  
  8  +4.0601e-02  +4.0606e-02  4.82e-06  3.88e-07  4.03e-06  2.39e-08  1.82e-06  9.90e-01  
  9  +4.0600e-02  +4.0600e-02  4.83e-08  3.88e-09  4.04e-08  2.39e-10  1.83e-08  9.90e-01  
 10  +4.0600e-02  +4.0600e-02  4.83e-10  3.89e-11  4.04e-10  2.39e-12  1.83e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 992.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:46 PM: Optimal value: 4.060e-02
(CVXPY) Oct 06 04:22:46 PM: Compilation took 6.155e-03 seconds
(CVXPY) Oct 06 04:22:46 PM: Solver (including time spent in interface) took 1.111e-03 seconds
Iteration: 7, Objective: 0.0406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:46 PM: Your problem has 101 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:46 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 101
  constraints   = 126
  nnz(P)        = 0
  nnz(A)        = 606
  cones (total) = 1
    : Nonnegative = 1,  numel = 126

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4769e-01  +2.7976e+01  2.75e+01  8.80e-01  6.42e+00  1.00e+00  1.15e+00   ------   
  1  +2.5186e-01  +6.3966e+00  6.14e+00  4.00e-01  3.34e+00  4.35e-03  6.10e-01  5.74e-01  
  2  +6.4184e-03  +2.9528e+00  2.95e+00  1.71e-01  1.72e+00  2.61e-02  3.68e-01  5.88e-01  
  3  +7.3098e-02  +4.0920e-01  3.36e-01  2.77e-02  3.03e-01  1.61e-02  7.81e-02  9.03e-01  
  4  +4.7029e-02  +1.1654e-01  6.95e-02  5.75e-03  6.27e-02  2.51e-03  1.79e-02  8.55e-01  
  5  +4.0926e-02  +4.3289e-02  2.36e-03  1.99e-04  2.15e-03  6.99e-05  6.38e-04  9.66e-01  
  6  +4.0692e-02  +4.1086e-02  3.94e-04  3.47e-05  3.59e-04  8.07e-06  1.21e-04  8.22e-01  
  7  +4.0614e-02  +4.0688e-02  7.41e-05  6.09e-06  6.30e-05  6.90e-07  2.76e-05  9.10e-01  
  8  +4.0600e-02  +4.0602e-02  1.35e-06  1.10e-07  1.14e-06  9.73e-09  5.24e-07  9.82e-01  
  9  +4.0600e-02  +4.0600e-02  1.35e-08  1.10e-09  1.14e-08  9.72e-11  5.24e-09  9.90e-01  
 10  +4.0600e-02  +4.0600e-02  1.35e-10  1.10e-11  1.14e-10  9.75e-13  5.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 906.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:46 PM: Optimal value: 4.060e-02
(CVXPY) Oct 06 04:22:46 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:22:46 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0406
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:46 PM: Your problem has 102 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:46 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 102
  constraints   = 127
  nnz(P)        = 0
  nnz(A)        = 612
  cones (total) = 1
    : Nonnegative = 1,  numel = 127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4707e-01  +2.8028e+01  2.76e+01  8.80e-01  6.42e+00  1.00e+00  1.15e+00   ------   
  1  +2.4437e-01  +6.4212e+00  6.18e+00  4.00e-01  3.33e+00  4.37e-03  6.11e-01  5.73e-01  
  2  +5.1471e-03  +2.7904e+00  2.79e+00  1.65e-01  1.66e+00  2.64e-02  3.60e-01  6.11e-01  
  3  +7.0773e-02  +3.9587e-01  3.25e-01  2.71e-02  2.96e-01  1.49e-02  7.66e-02  8.93e-01  
  4  +4.6659e-02  +1.1644e-01  6.98e-02  5.84e-03  6.35e-02  2.43e-03  1.81e-02  8.49e-01  
  5  +4.0888e-02  +4.2965e-02  2.08e-03  1.77e-04  1.91e-03  5.84e-05  5.69e-04  9.70e-01  
  6  +4.0683e-02  +4.1031e-02  3.48e-04  3.11e-05  3.21e-04  6.49e-06  1.10e-04  8.23e-01  
  7  +4.0614e-02  +4.0687e-02  7.30e-05  6.02e-06  6.22e-05  7.71e-07  2.73e-05  8.77e-01  
  8  +4.0600e-02  +4.0602e-02  1.48e-06  1.21e-07  1.25e-06  1.24e-08  5.81e-07  9.81e-01  
  9  +4.0600e-02  +4.0600e-02  1.48e-08  1.21e-09  1.25e-08  1.23e-10  5.81e-09  9.90e-01  
 10  +4.0600e-02  +4.0600e-02  1.48e-10  1.21e-11  1.25e-10  1.24e-12  5.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 962.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:46 PM: Optimal value: 4.060e-02
(CVXPY) Oct 06 04:22:46 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:22:46 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.94
  Our objective: 0.88

IF 
    (x0 = 0 AND x1 = 0)                                             <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1) <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x6 = 0 AND x8 = 1)            <-- (term's our objective: 0.2)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x6 = 1 AND x8 = 1)            <-- (term's our objective: 0.12)
 OR (x2 = 0 AND x4 = 1 AND x5 = 0 AND x9 = 1)                       <-- (term's our objective: 0.16)
 OR (x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.842356443405151
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

