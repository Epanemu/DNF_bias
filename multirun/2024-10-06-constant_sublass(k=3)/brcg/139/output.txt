Command:
python test_script.py -s constant_subclass -d 4 -n 500 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14400000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 4.

Computed total variation: 0.196
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:11 PM: Your problem has 259 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:11 PM: Finished problem compilation (took 4.060e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 259
  constraints   = 509
  nnz(P)        = 0
  nnz(A)        = 1759
  cones (total) = 1
    : Nonnegative = 1,  numel = 509

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +2.5086e+02  2.50e+02  9.32e-01  1.85e+01  1.00e+00  1.01e+00   ------   
  1  +6.0711e-01  +4.8859e+01  4.83e+01  3.19e-01  1.01e+01  4.09e-03  4.76e-01  6.68e-01  
  2  +5.4731e-01  +7.6195e+00  7.07e+00  1.12e-01  4.25e+00  8.50e-03  2.15e-01  7.59e-01  
  3  +5.0092e-01  +1.3551e+00  8.54e-01  2.53e-02  9.27e-01  1.72e-03  1.90e-01  4.72e-01  
  4  +4.9919e-01  +6.9467e-01  1.95e-01  5.67e-03  2.14e-01  6.76e-04  3.80e-02  8.39e-01  
  5  +4.7548e-01  +7.1587e-01  2.40e-01  1.29e-03  5.01e-02  6.78e-03  3.97e-03  9.32e-01  
  6  +4.5229e-01  +5.2839e-01  7.61e-02  3.86e-04  1.48e-02  6.38e-05  1.37e-03  7.97e-01  
  7  +4.3247e-01  +4.5185e-01  1.94e-02  7.85e-05  3.01e-03  1.49e-05  3.22e-04  9.60e-01  
  8  +4.2712e-01  +4.3006e-01  2.93e-03  1.17e-05  4.47e-04  2.84e-06  5.00e-05  9.90e-01  
  9  +4.2611e-01  +4.2614e-01  3.07e-05  1.22e-07  4.66e-06  2.94e-08  5.26e-07  9.90e-01  
 10  +4.2610e-01  +4.2610e-01  3.07e-07  1.22e-09  4.66e-08  2.94e-10  5.26e-09  9.90e-01  
 11  +4.2610e-01  +4.2610e-01  3.07e-09  1.22e-11  4.66e-10  2.95e-12  5.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.5427ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:11 PM: Optimal value: 4.261e-01
(CVXPY) Oct 06 03:50:11 PM: Compilation took 4.060e-02 seconds
(CVXPY) Oct 06 03:50:11 PM: Solver (including time spent in interface) took 9.872e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:11 PM: Your problem has 265 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:11 PM: Finished problem compilation (took 7.784e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 265
  constraints   = 515
  nnz(P)        = 0
  nnz(A)        = 2119
  cones (total) = 1
    : Nonnegative = 1,  numel = 515

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +2.5107e+02  2.51e+02  9.33e-01  1.95e+01  1.00e+00  1.01e+00   ------   
  1  +6.0436e-01  +4.9288e+01  4.87e+01  3.26e-01  1.07e+01  4.08e-03  4.85e-01  6.63e-01  
  2  +5.4538e-01  +7.4405e+00  6.90e+00  1.10e-01  4.39e+00  8.97e-03  2.15e-01  7.80e-01  
  3  +4.9994e-01  +1.2518e+00  7.52e-01  2.25e-02  8.68e-01  1.60e-03  1.81e-01  5.97e-01  
  4  +4.9881e-01  +8.2467e-01  3.26e-01  9.48e-03  3.74e-01  9.85e-04  6.17e-02  6.95e-01  
  5  +4.7207e-01  +8.8381e-01  4.12e-01  2.32e-03  9.46e-02  7.40e-03  7.06e-03  9.90e-01  
  6  +4.5246e-01  +6.6656e-01  2.14e-01  9.08e-04  3.68e-02  3.73e-03  2.85e-03  6.71e-01  
  7  +4.4469e-01  +6.0304e-01  1.58e-01  6.13e-04  2.48e-02  2.24e-03  1.95e-03  4.61e-01  
  8  +4.3422e-01  +5.1319e-01  7.90e-02  2.98e-04  1.20e-02  2.26e-05  9.79e-04  9.53e-01  
  9  +4.1954e-01  +4.5420e-01  3.47e-02  1.23e-04  4.97e-03  1.54e-05  4.22e-04  6.38e-01  
 10  +4.1490e-01  +4.3720e-01  2.23e-02  7.43e-05  2.99e-03  1.18e-05  2.54e-04  4.33e-01  
 11  +4.1117e-01  +4.2222e-01  1.11e-02  3.68e-05  1.48e-03  1.57e-05  1.27e-04  9.90e-01  
 12  +4.0638e-01  +4.0683e-01  4.51e-04  1.48e-06  5.96e-05  4.77e-07  5.22e-06  9.88e-01  
 13  +4.0620e-01  +4.0621e-01  4.60e-06  1.51e-08  6.06e-07  4.87e-09  5.32e-08  9.90e-01  
 14  +4.0620e-01  +4.0620e-01  4.60e-08  1.51e-10  6.06e-09  4.87e-11  5.32e-10  9.90e-01  
 15  +4.0620e-01  +4.0620e-01  4.60e-10  1.51e-12  6.06e-11  4.87e-13  5.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.8405ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:11 PM: Optimal value: 4.062e-01
(CVXPY) Oct 06 03:50:11 PM: Compilation took 7.784e-03 seconds
(CVXPY) Oct 06 03:50:11 PM: Solver (including time spent in interface) took 7.500e-03 seconds
Iteration: 2, Objective: 0.4062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:11 PM: Your problem has 268 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 268
  constraints   = 518
  nnz(P)        = 0
  nnz(A)        = 2218
  cones (total) = 1
    : Nonnegative = 1,  numel = 518

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +2.5091e+02  2.50e+02  9.33e-01  1.96e+01  1.00e+00  1.01e+00   ------   
  1  +6.0283e-01  +4.9443e+01  4.88e+01  3.29e-01  1.08e+01  4.07e-03  4.89e-01  6.60e-01  
  2  +5.4445e-01  +7.3482e+00  6.80e+00  1.09e-01  4.37e+00  9.17e-03  2.13e-01  7.90e-01  
  3  +5.0048e-01  +1.3394e+00  8.39e-01  2.52e-02  9.75e-01  1.71e-03  1.81e-01  5.65e-01  
  4  +4.9888e-01  +8.6367e-01  3.65e-01  1.06e-02  4.19e-01  1.08e-03  6.20e-02  6.97e-01  
  5  +4.7373e-01  +9.5919e-01  4.85e-01  2.90e-03  1.19e-01  7.12e-03  8.94e-03  9.58e-01  
  6  +4.6160e-01  +7.5562e-01  2.94e-01  1.46e-03  5.96e-02  3.51e-03  4.56e-03  6.13e-01  
  7  +4.5250e-01  +6.8942e-01  2.37e-01  9.38e-04  3.82e-02  2.89e-03  2.91e-03  4.72e-01  
  8  +4.4560e-01  +6.1175e-01  1.66e-01  6.97e-04  2.83e-02  1.10e-03  2.23e-03  4.48e-01  
  9  +4.2305e-01  +4.9011e-01  6.71e-02  2.45e-04  9.92e-03  3.17e-04  8.38e-04  7.34e-01  
 10  +4.1363e-01  +4.4530e-01  3.17e-02  1.14e-04  4.61e-03  1.32e-04  4.07e-04  5.84e-01  
 11  +4.0532e-01  +4.0856e-01  3.25e-03  1.16e-05  4.69e-04  1.19e-05  4.35e-05  9.00e-01  
 12  +4.0495e-01  +4.0703e-01  2.08e-03  7.20e-06  2.90e-04  6.89e-06  2.67e-05  5.18e-01  
 13  +4.0467e-01  +4.0571e-01  1.05e-03  3.67e-06  1.48e-04  1.30e-06  1.37e-05  9.90e-01  
 14  +4.0423e-01  +4.0431e-01  7.69e-05  2.66e-07  1.07e-05  9.24e-08  9.95e-07  9.37e-01  
 15  +4.0420e-01  +4.0420e-01  7.74e-07  2.68e-09  1.08e-07  9.29e-10  1.00e-08  9.90e-01  
 16  +4.0420e-01  +4.0420e-01  7.74e-09  2.68e-11  1.08e-09  9.29e-12  1.00e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.786ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:11 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:11 PM: Optimal value: 4.042e-01
(CVXPY) Oct 06 03:50:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:50:11 PM: Solver (including time spent in interface) took 9.785e-03 seconds
FULL MODEL:
  Accruacy: 0.596
  Our objective: 0.19199999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.144)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.048)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.415010690689087
Best over terms:
  Our final objective: 0.14399999999999996
    Its accruacy: 0.572
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14399999999999996
  Highest accruacy: 0.572
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

