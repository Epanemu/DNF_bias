Command:
python test_script.py -s constant_subclass -d 9 -n 10 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.6
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 9.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:35 PM: Your problem has 24 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:35 PM: Finished problem compilation (took 2.425e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 24
  constraints   = 29
  nnz(P)        = 0
  nnz(A)        = 79
  cones (total) = 1
    : Nonnegative = 1,  numel = 29

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.7341e-01  +6.5783e+00  6.20e+00  7.75e-01  2.77e+00  1.00e+00  1.41e+00   ------   
  1  +2.8058e-01  +8.8344e-01  6.03e-01  2.21e-01  9.25e-01  3.13e-03  5.20e-01  8.88e-01  
  2  +1.4574e-01  +3.3672e-01  1.91e-01  6.14e-02  2.79e-01  7.99e-03  2.01e-01  7.68e-01  
  3  +1.0927e-01  +1.5119e-01  4.19e-02  1.08e-02  5.50e-02  2.63e-03  4.49e-02  8.70e-01  
  4  +1.0030e-01  +1.0114e-01  8.47e-04  2.19e-04  1.12e-03  5.38e-05  9.37e-04  9.79e-01  
  5  +1.0013e-01  +1.0021e-01  8.27e-05  2.17e-05  1.10e-04  4.26e-06  9.70e-05  8.99e-01  
  6  +1.0010e-01  +1.0011e-01  4.33e-06  1.17e-06  5.85e-06  1.46e-07  5.75e-06  9.51e-01  
  7  +1.0010e-01  +1.0010e-01  4.27e-08  1.17e-08  5.80e-08  1.44e-09  5.78e-08  9.90e-01  
  8  +1.0010e-01  +1.0010e-01  4.27e-10  1.17e-10  5.80e-10  1.44e-11  5.78e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 292.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:35 PM: Optimal value: 1.001e-01
(CVXPY) Oct 06 04:13:35 PM: Compilation took 2.425e-02 seconds
(CVXPY) Oct 06 04:13:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:35 PM: Your problem has 34 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:35 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 39
  nnz(P)        = 0
  nnz(A)        = 125
  cones (total) = 1
    : Nonnegative = 1,  numel = 39

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.8491e-01  +6.3459e+00  6.06e+00  8.10e-01  3.19e+00  1.00e+00  1.37e+00   ------   
  1  +1.0231e-01  +7.0878e-01  6.06e-01  2.49e-01  9.95e-01  3.44e-03  4.76e-01  8.72e-01  
  2  +5.1677e-02  +1.6676e-01  1.15e-01  4.75e-02  2.28e-01  5.79e-03  1.30e-01  8.27e-01  
  3  +3.1567e-02  +1.2308e-01  9.15e-02  2.63e-02  1.62e-01  5.59e-03  8.57e-02  4.59e-01  
  4  +1.5817e-03  +6.4781e-03  4.90e-03  1.35e-03  8.68e-03  2.47e-04  4.84e-03  9.68e-01  
  5  +2.0560e-04  +2.8603e-04  8.04e-05  2.30e-05  1.46e-04  2.45e-06  8.27e-05  9.83e-01  
  6  +1.9902e-04  +2.0525e-04  6.23e-06  2.03e-06  1.17e-05  2.04e-07  7.22e-06  9.14e-01  
  7  +1.9999e-04  +2.0005e-04  6.33e-08  2.06e-08  1.19e-07  2.08e-09  7.35e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  6.33e-10  2.06e-10  1.19e-09  2.08e-11  7.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 277.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:35 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:13:35 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:13:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:13:35 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:13:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:13:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:13:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:13:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:13:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:13:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:13:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:13:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:13:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:13:35 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 131
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +2.5973e-01  +6.4029e+00  6.14e+00  8.14e-01  3.19e+00  1.00e+00  1.38e+00   ------   
  1  +5.1998e-02  +6.7515e-01  6.23e-01  2.53e-01  9.94e-01  3.50e-03  4.74e-01  8.67e-01  
  2  +1.1787e-02  +1.3007e-01  1.18e-01  5.21e-02  2.40e-01  4.61e-03  1.34e-01  7.89e-01  
  3  +7.4798e-04  +6.5793e-03  5.83e-03  2.54e-03  1.23e-02  2.71e-04  7.43e-03  9.52e-01  
  4  +1.6976e-04  +2.8882e-04  1.19e-04  5.37e-05  2.57e-04  3.83e-06  1.57e-04  9.79e-01  
  5  +1.5140e-04  +1.6254e-04  1.11e-05  6.01e-06  2.47e-05  2.62e-07  1.85e-05  8.99e-01  
  6  +1.5002e-04  +1.5021e-04  1.89e-07  1.06e-07  4.25e-07  4.13e-09  3.29e-07  9.84e-01  
  7  +1.5000e-04  +1.5000e-04  1.88e-09  1.06e-09  4.24e-09  4.13e-11  3.29e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 220.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:13:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:13:35 PM: Optimal value: 1.500e-04
(CVXPY) Oct 06 04:13:35 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:13:35 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x1 = 0)                                  <-- (term's our objective: 0.8)
 OR (x2 = 0 AND x3 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.8)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.1274120807647705
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 2
  Shortest hamming distance: 2
    Its our objective: 0.8
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

