Command:
python test_script.py -s constant_subclass -d 4 -n 50000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15208
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.15208
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:52 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:53 PM: Finished problem compilation (took 1.953e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5399e+02  7.53e+02  1.44e-01  5.59e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1147e-01  +1.6831e+02  1.68e+02  1.31e-01  5.07e+01  1.84e-05  2.26e-01  5.78e-02  
  4  +5.0019e-01  +2.9135e+00  2.41e+00  7.21e-03  2.76e+00  1.59e-06  1.63e-01  8.79e-01  
  5  +5.0002e-01  +9.3323e-01  4.33e-01  1.31e-03  5.05e-01  8.85e-06  8.13e-02  9.90e-01  
  6  +5.0000e-01  +6.2921e-01  1.29e-01  3.89e-04  1.50e-01  9.04e-06  1.27e-02  8.60e-01  
  7  +4.9964e-01  +6.8576e-01  1.86e-01  1.63e-04  6.35e-02  2.96e-04  5.33e-04  9.71e-01  
  8  +4.9746e-01  +6.8350e-01  1.86e-01  3.15e-05  1.23e-02  1.48e-03  9.40e-05  9.29e-01  
  9  +4.9105e-01  +6.6140e-01  1.70e-01  9.44e-06  3.67e-03  4.08e-03  2.79e-05  7.35e-01  
 10  +4.8433e-01  +6.1115e-01  1.27e-01  7.60e-06  2.95e-03  1.83e-03  2.34e-05  3.11e-01  
 11  +4.6831e-01  +5.1962e-01  5.13e-02  2.76e-06  1.07e-03  1.42e-04  9.23e-06  7.80e-01  
 12  +4.5604e-01  +4.6398e-01  7.93e-03  3.70e-07  1.44e-04  1.36e-05  1.39e-06  8.66e-01  
 13  +4.5318e-01  +4.5343e-01  2.53e-04  1.06e-08  4.10e-06  2.39e-07  4.45e-08  9.80e-01  
 14  +4.5310e-01  +4.5310e-01  2.53e-06  1.06e-10  4.09e-08  2.39e-09  4.46e-10  9.90e-01  
 15  +4.5310e-01  +4.5310e-01  2.54e-08  1.06e-12  4.11e-10  2.77e-11  5.15e-12  9.90e-01  
 16  +4.5310e-01  +4.5310e-01  2.54e-10  1.06e-14  4.12e-12  3.22e-13  5.94e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 469.2174ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:53 PM: Optimal value: 4.531e-01
(CVXPY) Oct 06 03:51:53 PM: Compilation took 1.953e-01 seconds
(CVXPY) Oct 06 03:51:53 PM: Solver (including time spent in interface) took 5.148e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:53 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:53 PM: Finished problem compilation (took 1.771e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 224557
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  2.07e+02  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +4.8437e+03  4.84e+03  3.42e-01  1.16e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5111e-01  +7.5330e+02  7.53e+02  1.44e-01  5.99e+01  8.22e-03  2.28e-01  7.24e-01  
  3  +5.1144e-01  +1.6800e+02  1.67e+02  1.31e-01  5.44e+01  1.85e-05  2.26e-01  5.83e-02  
  4  +5.0016e-01  +2.5692e+00  2.07e+00  6.19e-03  2.55e+00  1.63e-06  1.55e-01  9.90e-01  
  5  +5.0007e-01  +1.4627e+00  9.63e-01  2.89e-03  1.20e+00  4.41e-06  1.14e-01  4.34e-01  
  6  +5.0002e-01  +7.8658e-01  2.87e-01  8.58e-04  3.56e-01  3.79e-06  4.18e-02  6.97e-01  
  7  +5.0000e-01  +8.0168e-01  3.02e-01  8.69e-04  3.61e-01  1.20e-05  8.58e-03  9.48e-01  
  8  +4.9943e-01  +7.7223e-01  2.73e-01  8.73e-05  3.66e-02  3.47e-04  2.41e-04  9.74e-01  
  9  +4.9672e-01  +7.4174e-01  2.45e-01  1.77e-05  7.44e-03  1.45e-03  4.76e-05  8.43e-01  
 10  +4.9544e-01  +7.2814e-01  2.33e-01  1.40e-05  5.87e-03  1.52e-03  3.75e-05  2.83e-01  
 11  +4.9484e-01  +7.1025e-01  2.15e-01  1.24e-05  5.18e-03  1.12e-03  3.30e-05  3.20e-01  
 12  +4.9488e-01  +6.9958e-01  2.05e-01  1.18e-05  4.95e-03  7.56e-04  3.15e-05  2.88e-01  
 13  +4.9120e-01  +6.8194e-01  1.91e-01  8.64e-06  3.62e-03  8.23e-04  2.32e-05  3.14e-01  
 14  +4.8791e-01  +6.6531e-01  1.77e-01  7.60e-06  3.18e-03  6.89e-04  2.05e-05  2.10e-01  
 15  +4.8236e-01  +6.2947e-01  1.47e-01  6.76e-06  2.83e-03  6.27e-06  1.88e-05  7.30e-01  
 16  +4.6170e-01  +5.4910e-01  8.74e-02  3.16e-06  1.32e-03  3.34e-06  9.12e-06  6.25e-01  
 17  +4.3684e-01  +4.6555e-01  2.87e-02  9.39e-07  3.91e-04  7.56e-07  2.88e-06  7.27e-01  
 18  +4.2452e-01  +4.2548e-01  9.55e-04  3.02e-08  1.26e-05  1.27e-08  9.58e-08  9.71e-01  
 19  +4.2406e-01  +4.2407e-01  9.60e-06  3.03e-10  1.26e-07  1.27e-10  9.63e-10  9.90e-01  
 20  +4.2406e-01  +4.2406e-01  9.60e-08  3.03e-12  1.26e-09  1.33e-12  9.99e-12  9.90e-01  
 21  +4.2406e-01  +4.2406e-01  9.61e-10  3.03e-14  1.26e-11  1.38e-14  1.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 802.3741ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:54 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:54 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 03:51:54 PM: Compilation took 1.771e-01 seconds
(CVXPY) Oct 06 03:51:54 PM: Solver (including time spent in interface) took 8.447e-01 seconds
FULL MODEL:
  Accruacy: 0.57604
  Our objective: 0.15208

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.15208)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.941582202911377
Best over terms:
  Our final objective: 0.15208
    Its accruacy: 0.57604
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15208
  Highest accruacy: 0.57604
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

