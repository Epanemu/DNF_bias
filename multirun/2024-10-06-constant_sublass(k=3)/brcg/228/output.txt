Command:
python test_script.py -s constant_subclass -d 6 -n 5000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16519999999999999
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 6.

Computed total variation: 0.18560000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:04 PM: Your problem has 2513 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:04 PM: Finished problem compilation (took 5.974e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2513
  constraints   = 5013
  nnz(P)        = 0
  nnz(A)        = 22513
  cones (total) = 1
    : Nonnegative = 1,  numel = 5013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5008e+03  2.50e+03  9.79e-01  6.99e+01  1.00e+00  1.00e+00   ------   
  1  +5.9310e-01  +5.1465e+02  5.14e+02  3.83e-01  4.23e+01  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4177e-01  +6.8233e+01  6.77e+01  1.46e-01  2.04e+01  1.15e-02  2.44e-01  8.26e-01  
  3  +5.0987e-01  +1.6686e+01  1.62e+01  1.03e-01  1.39e+01  2.82e-05  2.37e-01  1.35e-01  
  4  +5.0020e-01  +1.0264e+00  5.26e-01  5.05e-03  7.06e-01  7.28e-06  1.15e-01  9.90e-01  
  5  +4.9996e-01  +6.7224e-01  1.72e-01  1.63e-03  2.29e-01  5.89e-06  2.45e-02  8.54e-01  
  6  +4.9409e-01  +7.9597e-01  3.02e-01  3.89e-04  5.53e-02  1.94e-04  1.17e-03  9.67e-01  
  7  +4.8052e-01  +6.6050e-01  1.80e-01  1.03e-04  1.47e-02  2.91e-04  3.12e-04  7.58e-01  
  8  +4.6579e-01  +5.5217e-01  8.64e-02  4.59e-05  6.49e-03  9.02e-05  1.50e-04  6.10e-01  
  9  +4.5323e-01  +4.7341e-01  2.02e-02  1.01e-05  1.42e-03  1.34e-06  3.60e-05  9.56e-01  
 10  +4.4843e-01  +4.5097e-01  2.55e-03  1.20e-06  1.69e-04  1.67e-07  4.64e-06  8.82e-01  
 11  +4.4753e-01  +4.4761e-01  8.55e-05  3.61e-08  5.09e-06  6.52e-09  1.56e-07  9.82e-01  
 12  +4.4750e-01  +4.4750e-01  8.56e-07  3.60e-10  5.09e-08  6.52e-11  1.56e-09  9.90e-01  
 13  +4.4750e-01  +4.4750e-01  8.56e-09  3.61e-12  5.09e-10  6.79e-13  1.62e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 39.903ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:04 PM: Optimal value: 4.475e-01
(CVXPY) Oct 06 03:59:04 PM: Compilation took 5.974e-02 seconds
(CVXPY) Oct 06 03:59:04 PM: Solver (including time spent in interface) took 4.659e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4475
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:04 PM: Your problem has 2523 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:04 PM: Finished problem compilation (took 1.821e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2523
  constraints   = 5023
  nnz(P)        = 0
  nnz(A)        = 27181
  cones (total) = 1
    : Nonnegative = 1,  numel = 5023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.79e-01  7.35e+01  1.00e+00  1.00e+00   ------   
  1  +5.9292e-01  +5.1490e+02  5.14e+02  3.84e-01  4.45e+01  3.92e-03  5.27e-01  6.26e-01  
  2  +5.4142e-01  +6.7885e+01  6.73e+01  1.46e-01  2.13e+01  1.16e-02  2.44e-01  8.29e-01  
  3  +5.0969e-01  +1.6495e+01  1.60e+01  1.02e-01  1.45e+01  2.83e-05  2.37e-01  1.41e-01  
  4  +5.0034e-01  +1.2928e+00  7.92e-01  7.63e-03  1.11e+00  8.05e-06  1.34e-01  8.11e-01  
  5  +5.0009e-01  +8.1556e-01  3.15e-01  3.01e-03  4.43e-01  4.57e-06  5.46e-02  6.08e-01  
  6  +4.9998e-01  +8.2112e-01  3.21e-01  2.97e-03  4.38e-01  7.61e-06  2.67e-02  5.80e-01  
  7  +4.9810e-01  +7.8108e-01  2.83e-01  8.52e-04  1.28e-01  5.57e-05  2.60e-03  9.08e-01  
  8  +4.9289e-01  +7.4326e-01  2.50e-01  2.62e-04  3.93e-02  1.55e-04  7.44e-04  7.29e-01  
  9  +4.9386e-01  +7.3772e-01  2.44e-01  2.44e-04  3.67e-02  1.12e-04  6.82e-04  3.52e-01  
 10  +4.8539e-01  +6.8675e-01  2.01e-01  1.15e-04  1.73e-02  1.58e-04  3.20e-04  5.54e-01  
 11  +4.7974e-01  +6.5806e-01  1.78e-01  8.72e-05  1.31e-02  1.40e-04  2.43e-04  3.23e-01  
 12  +4.7515e-01  +6.3859e-01  1.63e-01  7.10e-05  1.06e-02  1.27e-04  1.99e-04  2.43e-01  
 13  +4.7492e-01  +6.3736e-01  1.62e-01  7.06e-05  1.06e-02  1.24e-04  1.98e-04  1.99e-02  
 14  +4.7391e-01  +6.3132e-01  1.57e-01  6.90e-05  1.03e-02  1.02e-04  1.94e-04  1.43e-01  
 15  +4.7243e-01  +6.2393e-01  1.52e-01  6.43e-05  9.61e-03  7.38e-05  1.81e-04  3.03e-01  
 16  +4.5875e-01  +5.6894e-01  1.10e-01  4.03e-05  6.01e-03  5.18e-05  1.16e-04  4.09e-01  
 17  +4.5375e-01  +5.4332e-01  8.96e-02  3.28e-05  4.88e-03  4.12e-06  9.75e-05  9.90e-01  
 18  +4.3090e-01  +4.5989e-01  2.90e-02  9.62e-06  1.43e-03  1.71e-06  2.99e-05  7.47e-01  
 19  +4.1859e-01  +4.2090e-01  2.31e-03  7.32e-07  1.09e-04  2.49e-07  2.35e-06  9.79e-01  
 20  +4.1751e-01  +4.1754e-01  2.77e-05  8.74e-09  1.30e-06  2.99e-09  2.82e-08  9.88e-01  
 21  +4.1750e-01  +4.1750e-01  2.77e-07  8.74e-11  1.30e-08  2.99e-11  2.82e-10  9.90e-01  
 22  +4.1750e-01  +4.1750e-01  2.77e-09  8.74e-13  1.30e-10  3.00e-13  2.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.133ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:04 PM: Optimal value: 4.175e-01
(CVXPY) Oct 06 03:59:04 PM: Compilation took 1.821e-02 seconds
(CVXPY) Oct 06 03:59:04 PM: Solver (including time spent in interface) took 8.193e-02 seconds
Iteration: 2, Objective: 0.4175
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:05 PM: Your problem has 2531 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:05 PM: Finished problem compilation (took 1.991e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2531
  constraints   = 5031
  nnz(P)        = 0
  nnz(A)        = 28174
  cones (total) = 1
    : Nonnegative = 1,  numel = 5031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5010e+03  2.50e+03  9.79e-01  7.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.9285e-01  +5.1499e+02  5.14e+02  3.84e-01  4.45e+01  3.91e-03  5.27e-01  6.26e-01  
  2  +5.4130e-01  +6.7762e+01  6.72e+01  1.46e-01  2.13e+01  1.16e-02  2.44e-01  8.31e-01  
  3  +5.0965e-01  +1.6454e+01  1.59e+01  1.02e-01  1.45e+01  2.83e-05  2.37e-01  1.43e-01  
  4  +5.0033e-01  +1.2836e+00  7.83e-01  7.55e-03  1.10e+00  8.08e-06  1.32e-01  8.20e-01  
  5  +5.0009e-01  +8.4456e-01  3.44e-01  3.29e-03  4.85e-01  4.99e-06  5.73e-02  5.89e-01  
  6  +4.9934e-01  +8.1120e-01  3.12e-01  1.84e-03  2.74e-01  2.47e-05  6.76e-03  9.85e-01  
  7  +4.9674e-01  +7.9009e-01  2.93e-01  5.82e-04  8.73e-02  8.57e-05  1.69e-03  7.56e-01  
  8  +4.9674e-01  +7.7272e-01  2.76e-01  4.50e-04  6.76e-02  7.29e-05  1.28e-03  4.99e-01  
  9  +4.9153e-01  +7.3831e-01  2.47e-01  1.97e-04  2.96e-02  1.35e-04  5.44e-04  5.92e-01  
 10  +4.8394e-01  +6.9482e-01  2.11e-01  1.12e-04  1.68e-02  1.54e-04  3.08e-04  5.13e-01  
 11  +4.8303e-01  +6.8882e-01  2.06e-01  1.08e-04  1.62e-02  1.36e-04  2.97e-04  1.23e-01  
 12  +4.7532e-01  +6.5523e-01  1.80e-01  8.04e-05  1.20e-02  1.16e-04  2.25e-04  3.33e-01  
 13  +4.4906e-01  +5.4085e-01  9.18e-02  3.28e-05  4.89e-03  2.35e-05  9.70e-05  8.29e-01  
 14  +4.4879e-01  +5.3985e-01  9.11e-02  3.26e-05  4.86e-03  2.30e-05  9.63e-05  2.46e-02  
 15  +4.4787e-01  +5.3618e-01  8.83e-02  3.12e-05  4.65e-03  2.01e-05  9.25e-05  2.56e-01  
 16  +4.3394e-01  +4.8499e-01  5.11e-02  1.73e-05  2.58e-03  8.89e-06  5.33e-05  7.03e-01  
 17  +4.3157e-01  +4.7630e-01  4.47e-02  1.49e-05  2.21e-03  7.62e-06  4.60e-05  3.63e-01  
 18  +4.2664e-01  +4.5874e-01  3.21e-02  1.05e-05  1.57e-03  5.32e-06  3.30e-05  5.39e-01  
 19  +4.2251e-01  +4.4461e-01  2.21e-02  7.16e-06  1.06e-03  3.66e-06  2.27e-05  3.77e-01  
 20  +4.1838e-01  +4.3023e-01  1.19e-02  3.80e-06  5.64e-04  1.93e-06  1.22e-05  7.89e-01  
 21  +4.1347e-01  +4.1407e-01  5.95e-04  1.91e-07  2.83e-05  9.12e-08  6.23e-07  9.90e-01  
 22  +4.1320e-01  +4.1321e-01  6.24e-06  2.00e-09  2.96e-07  9.55e-10  6.54e-09  9.90e-01  
 23  +4.1320e-01  +4.1320e-01  6.24e-08  2.00e-11  2.96e-09  9.55e-12  6.54e-11  9.90e-01  
 24  +4.1320e-01  +4.1320e-01  6.24e-10  2.00e-13  2.96e-11  9.55e-14  6.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.336ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:05 PM: Optimal value: 4.132e-01
(CVXPY) Oct 06 03:59:05 PM: Compilation took 1.991e-02 seconds
(CVXPY) Oct 06 03:59:05 PM: Solver (including time spent in interface) took 1.049e-01 seconds
Iteration: 3, Objective: 0.4132
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:05 PM: Your problem has 2538 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:05 PM: Finished problem compilation (took 2.487e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2538
  constraints   = 5038
  nnz(P)        = 0
  nnz(A)        = 28706
  cones (total) = 1
    : Nonnegative = 1,  numel = 5038

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5010e+03  2.50e+03  9.79e-01  7.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.9263e-01  +5.1523e+02  5.15e+02  3.85e-01  4.45e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4111e-01  +6.7582e+01  6.70e+01  1.46e-01  2.12e+01  1.16e-02  2.43e-01  8.33e-01  
  3  +5.0961e-01  +1.6415e+01  1.59e+01  1.02e-01  1.45e+01  2.84e-05  2.36e-01  1.46e-01  
  4  +5.0048e-01  +1.5319e+00  1.03e+00  9.94e-03  1.45e+00  8.49e-06  1.47e-01  6.96e-01  
  5  +5.0015e-01  +9.5715e-01  4.57e-01  4.37e-03  6.42e-01  5.35e-06  7.07e-02  5.95e-01  
  6  +5.0006e-01  +9.5145e-01  4.51e-01  4.21e-03  6.20e-01  7.60e-06  3.90e-02  5.27e-01  
  7  +4.9909e-01  +9.4096e-01  4.42e-01  1.87e-03  2.80e-01  3.10e-05  6.00e-03  9.90e-01  
  8  +4.9372e-01  +8.7146e-01  3.78e-01  3.89e-04  5.86e-02  1.31e-04  1.09e-03  8.19e-01  
  9  +4.9537e-01  +8.4983e-01  3.54e-01  3.52e-04  5.31e-02  9.12e-05  9.67e-04  3.77e-01  
 10  +4.9044e-01  +7.6666e-01  2.76e-01  1.68e-04  2.53e-02  8.52e-05  4.58e-04  7.86e-01  
 11  +4.8824e-01  +7.3940e-01  2.51e-01  1.52e-04  2.29e-02  5.04e-05  4.18e-04  4.24e-01  
 12  +4.8490e-01  +7.2220e-01  2.37e-01  1.25e-04  1.88e-02  4.82e-05  3.45e-04  2.88e-01  
 13  +4.7853e-01  +6.8578e-01  2.07e-01  1.03e-04  1.55e-02  2.93e-05  2.92e-04  5.26e-01  
 14  +4.7578e-01  +6.7303e-01  1.97e-01  9.54e-05  1.43e-02  2.75e-05  2.71e-04  1.15e-01  
 15  +4.5056e-01  +5.5939e-01  1.09e-01  4.22e-05  6.30e-03  1.35e-05  1.27e-04  7.09e-01  
 16  +4.3650e-01  +5.0716e-01  7.07e-02  2.58e-05  3.84e-03  8.45e-06  8.05e-05  6.04e-01  
 17  +4.2885e-01  +4.7831e-01  4.95e-02  1.75e-05  2.60e-03  5.94e-06  5.57e-05  3.44e-01  
 18  +4.2744e-01  +4.7261e-01  4.52e-02  1.60e-05  2.38e-03  5.54e-06  5.17e-05  2.78e-01  
 19  +4.1797e-01  +4.3704e-01  1.91e-02  6.55e-06  9.73e-04  2.61e-06  2.17e-05  8.53e-01  
 20  +4.1612e-01  +4.3071e-01  1.46e-02  4.93e-06  7.31e-04  2.04e-06  1.64e-05  4.63e-01  
 21  +4.1073e-01  +4.1245e-01  1.72e-03  5.76e-07  8.55e-05  2.35e-07  1.97e-06  9.64e-01  
 22  +4.1001e-01  +4.1004e-01  2.59e-05  8.65e-09  1.28e-06  3.52e-09  2.96e-08  9.85e-01  
 23  +4.1000e-01  +4.1000e-01  2.59e-07  8.65e-11  1.28e-08  3.52e-11  2.96e-10  9.90e-01  
 24  +4.1000e-01  +4.1000e-01  2.59e-09  8.65e-13  1.28e-10  3.52e-13  2.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 96.2683ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:05 PM: Optimal value: 4.100e-01
(CVXPY) Oct 06 03:59:05 PM: Compilation took 2.487e-02 seconds
(CVXPY) Oct 06 03:59:05 PM: Solver (including time spent in interface) took 1.054e-01 seconds
Iteration: 4, Objective: 0.4100
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:59:05 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:59:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:59:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:59:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:59:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:59:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:59:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:59:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:59:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:59:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:59:05 PM: Finished problem compilation (took 2.015e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 28756
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0005e-01  +2.5010e+03  2.50e+03  9.79e-01  7.36e+01  1.00e+00  1.00e+00   ------   
  1  +5.9260e-01  +5.1522e+02  5.15e+02  3.85e-01  4.45e+01  3.91e-03  5.28e-01  6.26e-01  
  2  +5.4106e-01  +6.7530e+01  6.70e+01  1.46e-01  2.12e+01  1.16e-02  2.43e-01  8.33e-01  
  3  +5.0960e-01  +1.6404e+01  1.59e+01  1.02e-01  1.45e+01  2.84e-05  2.36e-01  1.46e-01  
  4  +5.0048e-01  +1.5274e+00  1.03e+00  9.90e-03  1.44e+00  8.49e-06  1.47e-01  6.99e-01  
  5  +5.0018e-01  +1.0112e+00  5.11e-01  4.89e-03  7.18e-01  5.71e-06  7.76e-02  5.38e-01  
  6  +5.0008e-01  +9.9027e-01  4.90e-01  4.58e-03  6.74e-01  7.85e-06  4.25e-02  5.37e-01  
  7  +4.9806e-01  +8.1656e-01  3.18e-01  9.42e-04  1.41e-01  5.28e-05  2.89e-03  9.64e-01  
  8  +4.9357e-01  +7.7291e-01  2.79e-01  3.30e-04  4.96e-02  1.19e-04  9.45e-04  7.38e-01  
  9  +4.9390e-01  +7.7543e-01  2.82e-01  3.24e-04  4.88e-02  1.09e-04  9.21e-04  1.38e-01  
 10  +4.9330e-01  +7.7192e-01  2.79e-01  2.76e-04  4.15e-02  1.03e-04  7.73e-04  3.29e-01  
 11  +4.9231e-01  +7.5952e-01  2.67e-01  1.93e-04  2.91e-02  5.49e-05  5.30e-04  8.68e-01  
 12  +4.8823e-01  +7.3325e-01  2.45e-01  1.45e-04  2.19e-02  4.40e-05  4.00e-04  5.53e-01  
 13  +4.8182e-01  +6.9960e-01  2.18e-01  1.12e-04  1.69e-02  3.47e-05  3.13e-04  4.70e-01  
 14  +4.7327e-01  +6.6127e-01  1.88e-01  8.76e-05  1.31e-02  2.40e-05  2.50e-04  5.47e-01  
 15  +4.6116e-01  +6.0962e-01  1.48e-01  6.40e-05  9.56e-03  1.42e-05  1.89e-04  8.32e-01  
 16  +4.4376e-01  +5.3855e-01  9.48e-02  3.70e-05  5.51e-03  8.82e-06  1.14e-04  5.11e-01  
 17  +4.2461e-01  +4.6260e-01  3.80e-02  1.36e-05  2.02e-03  3.86e-06  4.43e-05  7.94e-01  
 18  +4.2452e-01  +4.6227e-01  3.78e-02  1.35e-05  2.01e-03  3.85e-06  4.41e-05  1.93e-02  
 19  +4.2191e-01  +4.5301e-01  3.11e-02  1.10e-05  1.63e-03  3.41e-06  3.60e-05  3.85e-01  
 20  +4.1898e-01  +4.4253e-01  2.35e-02  8.18e-06  1.21e-03  2.63e-06  2.71e-05  2.83e-01  
 21  +4.1542e-01  +4.2939e-01  1.40e-02  4.76e-06  7.06e-04  1.81e-06  1.60e-05  7.50e-01  
 22  +4.1029e-01  +4.1166e-01  1.36e-03  4.63e-07  6.87e-05  1.87e-07  1.60e-06  9.90e-01  
 23  +4.0971e-01  +4.0973e-01  1.75e-05  5.94e-09  8.81e-07  2.37e-09  2.06e-08  9.87e-01  
 24  +4.0970e-01  +4.0970e-01  1.75e-07  5.94e-11  8.81e-09  2.37e-11  2.06e-10  9.90e-01  
 25  +4.0970e-01  +4.0970e-01  1.75e-09  5.94e-13  8.81e-11  2.37e-13  2.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.2839ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:59:05 PM: Problem status: optimal
(CVXPY) Oct 06 03:59:05 PM: Optimal value: 4.097e-01
(CVXPY) Oct 06 03:59:05 PM: Compilation took 2.015e-02 seconds
(CVXPY) Oct 06 03:59:05 PM: Solver (including time spent in interface) took 9.011e-02 seconds
FULL MODEL:
  Accruacy: 0.5908
  Our objective: 0.1816

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)                       <-- (term's our objective: 0.076)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1)                       <-- (term's our objective: 0.0892)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1) <-- (term's our objective: 0.0088)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.0016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.684902191162109
Best over terms:
  Our final objective: 0.08920000000000006
    Its accruacy: 0.5446
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.08920000000000006
  Highest accruacy: 0.5446
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

