Command:
python test_script.py -s constant_subclass -d 9 -n 1000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.218
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 9.

Computed total variation: 0.5860000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:54 PM: Your problem has 519 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:54 PM: Finished problem compilation (took 4.027e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 519
  constraints   = 1019
  nnz(P)        = 0
  nnz(A)        = 6019
  cones (total) = 1
    : Nonnegative = 1,  numel = 1019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9994e-01  +5.0104e+02  5.01e+02  9.56e-01  3.60e+01  1.00e+00  1.00e+00   ------   
  1  +5.8049e-01  +1.0890e+02  1.08e+02  4.15e-01  2.31e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3004e-01  +1.2388e+01  1.19e+01  1.42e-01  1.01e+01  1.66e-02  2.69e-01  9.54e-01  
  3  +5.0515e-01  +2.9510e+00  2.45e+00  5.11e-02  3.53e+00  4.08e-05  2.26e-01  5.39e-01  
  4  +5.0066e-01  +8.8114e-01  3.80e-01  8.41e-03  6.07e-01  1.26e-05  7.03e-02  7.62e-01  
  5  +4.9371e-01  +1.0231e+00  5.29e-01  2.93e-03  2.19e-01  1.16e-04  8.39e-03  9.40e-01  
  6  +4.7759e-01  +8.0212e-01  3.25e-01  9.71e-04  7.23e-02  1.36e-04  2.83e-03  6.88e-01  
  7  +4.6017e-01  +6.3904e-01  1.79e-01  4.92e-04  3.62e-02  6.80e-05  1.56e-03  5.39e-01  
  8  +4.4606e-01  +5.3567e-01  8.96e-02  2.32e-04  1.70e-02  3.32e-05  7.92e-04  6.52e-01  
  9  +4.3647e-01  +4.6864e-01  3.22e-02  8.19e-05  5.98e-03  1.44e-05  2.96e-04  9.90e-01  
 10  +4.2967e-01  +4.3426e-01  4.59e-03  1.12e-05  8.16e-04  1.97e-06  4.36e-05  8.67e-01  
 11  +4.2821e-01  +4.2859e-01  3.81e-04  8.07e-07  5.90e-05  1.65e-07  3.62e-06  9.54e-01  
 12  +4.2810e-01  +4.2810e-01  3.84e-06  8.10e-09  5.93e-07  1.67e-09  3.65e-08  9.90e-01  
 13  +4.2810e-01  +4.2810e-01  3.84e-08  8.10e-11  5.93e-09  1.67e-11  3.65e-10  9.90e-01  
 14  +4.2810e-01  +4.2810e-01  3.84e-10  8.10e-13  5.93e-11  1.68e-13  3.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6208ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:54 PM: Optimal value: 4.281e-01
(CVXPY) Oct 06 04:15:54 PM: Compilation took 4.027e-02 seconds
(CVXPY) Oct 06 04:15:54 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:54 PM: Your problem has 529 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:54 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 529
  constraints   = 1029
  nnz(P)        = 0
  nnz(A)        = 7233
  cones (total) = 1
    : Nonnegative = 1,  numel = 1029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +5.0127e+02  5.01e+02  9.56e-01  3.79e+01  1.00e+00  1.01e+00   ------   
  1  +5.7924e-01  +1.0914e+02  1.09e+02  4.19e-01  2.42e+01  3.78e-03  5.83e-01  5.85e-01  
  2  +5.2818e-01  +1.2057e+01  1.15e+01  1.40e-01  1.03e+01  1.71e-02  2.67e-01  9.76e-01  
  3  +5.0436e-01  +2.7733e+00  2.27e+00  4.81e-02  3.49e+00  4.33e-05  2.08e-01  6.66e-01  
  4  +5.0086e-01  +1.1450e+00  6.44e-01  1.42e-02  1.07e+00  1.86e-05  8.26e-02  6.33e-01  
  5  +4.9343e-01  +9.3031e-01  4.37e-01  3.22e-03  2.55e-01  8.51e-05  8.82e-03  9.38e-01  
  6  +4.7861e-01  +8.0652e-01  3.28e-01  1.20e-03  9.56e-02  1.33e-04  3.25e-03  6.59e-01  
  7  +4.7767e-01  +8.0337e-01  3.26e-01  1.15e-03  9.14e-02  1.32e-04  3.09e-03  1.83e-01  
  8  +4.6327e-01  +7.3072e-01  2.67e-01  6.51e-04  5.17e-02  1.43e-04  1.76e-03  5.48e-01  
  9  +4.4592e-01  +6.5698e-01  2.11e-01  4.43e-04  3.51e-02  1.17e-04  1.22e-03  4.99e-01  
 10  +4.3780e-01  +6.2309e-01  1.85e-01  3.74e-04  2.97e-02  1.03e-04  1.04e-03  2.45e-01  
 11  +4.0004e-01  +4.6461e-01  6.46e-02  1.16e-04  9.19e-03  3.37e-05  3.44e-04  9.90e-01  
 12  +3.8240e-01  +3.9793e-01  1.55e-02  2.69e-05  2.17e-03  8.38e-06  8.30e-05  7.95e-01  
 13  +3.8019e-01  +3.9048e-01  1.03e-02  1.74e-05  1.44e-03  6.04e-06  5.32e-05  4.48e-01  
 14  +3.7703e-01  +3.7973e-01  2.69e-03  4.52e-06  3.74e-04  2.09e-06  1.39e-05  9.90e-01  
 15  +3.7583e-01  +3.7588e-01  5.76e-05  9.64e-08  8.01e-06  4.39e-08  2.98e-07  9.79e-01  
 16  +3.7580e-01  +3.7580e-01  5.77e-07  9.65e-10  8.02e-08  4.39e-10  2.98e-09  9.90e-01  
 17  +3.7580e-01  +3.7580e-01  5.77e-09  9.65e-12  8.02e-10  4.39e-12  2.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.5853ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:54 PM: Optimal value: 3.758e-01
(CVXPY) Oct 06 04:15:54 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:54 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 2, Objective: 0.3758
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:54 PM: Your problem has 539 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 539
  constraints   = 1039
  nnz(P)        = 0
  nnz(A)        = 7450
  cones (total) = 1
    : Nonnegative = 1,  numel = 1039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9963e-01  +5.0147e+02  5.01e+02  9.56e-01  3.78e+01  1.00e+00  1.01e+00   ------   
  1  +5.7758e-01  +1.0920e+02  1.09e+02  4.20e-01  2.40e+01  3.78e-03  5.83e-01  5.84e-01  
  2  +5.2685e-01  +1.1884e+01  1.14e+01  1.37e-01  1.00e+01  1.74e-02  2.62e-01  9.90e-01  
  3  +5.0434e-01  +2.7129e+00  2.21e+00  4.75e-02  3.47e+00  4.80e-05  1.85e-01  7.49e-01  
  4  +5.0024e-01  +1.1427e+00  6.43e-01  1.37e-02  1.04e+00  2.78e-05  6.00e-02  7.09e-01  
  5  +4.8581e-01  +1.1198e+00  6.34e-01  3.07e-03  2.44e-01  1.67e-04  8.01e-03  8.97e-01  
  6  +4.7175e-01  +9.5332e-01  4.82e-01  1.73e-03  1.36e-01  1.56e-04  4.63e-03  5.29e-01  
  7  +4.5015e-01  +7.8957e-01  3.39e-01  8.03e-04  6.31e-02  1.61e-04  2.19e-03  7.96e-01  
  8  +4.4407e-01  +7.6121e-01  3.17e-01  6.86e-04  5.39e-02  1.60e-04  1.88e-03  2.21e-01  
  9  +4.3147e-01  +6.7488e-01  2.43e-01  5.65e-04  4.43e-02  1.18e-04  1.60e-03  6.55e-01  
 10  +4.1111e-01  +5.7900e-01  1.68e-01  3.36e-04  2.63e-02  8.75e-05  9.75e-04  4.26e-01  
 11  +3.8808e-01  +4.6666e-01  7.86e-02  1.49e-04  1.17e-02  4.82e-05  4.55e-04  9.90e-01  
 12  +3.6665e-01  +3.8138e-01  1.47e-02  2.68e-05  2.13e-03  8.21e-06  8.68e-05  8.44e-01  
 13  +3.6125e-01  +3.6304e-01  1.79e-03  3.19e-06  2.54e-04  9.82e-07  1.08e-05  8.88e-01  
 14  +3.6051e-01  +3.6053e-01  1.94e-05  3.44e-08  2.74e-06  1.07e-08  1.17e-07  9.90e-01  
 15  +3.6050e-01  +3.6050e-01  1.94e-07  3.44e-10  2.74e-08  1.07e-10  1.17e-09  9.90e-01  
 16  +3.6050e-01  +3.6050e-01  1.94e-09  3.44e-12  2.74e-10  1.07e-12  1.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.78ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:54 PM: Optimal value: 3.605e-01
(CVXPY) Oct 06 04:15:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:54 PM: Solver (including time spent in interface) took 1.746e-02 seconds
Iteration: 3, Objective: 0.3605
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:55 PM: Your problem has 549 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 549
  constraints   = 1049
  nnz(P)        = 0
  nnz(A)        = 7659
  cones (total) = 1
    : Nonnegative = 1,  numel = 1049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9953e-01  +5.0180e+02  5.01e+02  9.57e-01  3.76e+01  1.00e+00  1.01e+00   ------   
  1  +5.7539e-01  +1.0933e+02  1.09e+02  4.22e-01  2.39e+01  3.78e-03  5.84e-01  5.84e-01  
  2  +5.2565e-01  +1.2077e+01  1.16e+01  1.37e-01  9.95e+00  1.77e-02  2.61e-01  9.90e-01  
  3  +5.0488e-01  +2.3244e+00  1.82e+00  4.05e-02  3.04e+00  5.61e-05  1.30e-01  9.00e-01  
  4  +4.9831e-01  +1.1861e+00  6.88e-01  9.13e-03  7.20e-01  9.68e-05  2.50e-02  8.93e-01  
  5  +4.8386e-01  +1.0633e+00  5.79e-01  2.65e-03  2.12e-01  2.58e-04  6.68e-03  7.44e-01  
  6  +4.7106e-01  +9.7942e-01  5.08e-01  1.74e-03  1.38e-01  2.71e-04  4.45e-03  4.15e-01  
  7  +4.4794e-01  +8.4628e-01  3.98e-01  1.02e-03  8.02e-02  2.35e-04  2.70e-03  5.64e-01  
  8  +4.1867e-01  +6.9310e-01  2.74e-01  6.34e-04  4.95e-02  1.43e-04  1.78e-03  5.40e-01  
  9  +4.0741e-01  +6.4533e-01  2.38e-01  5.12e-04  3.99e-02  1.27e-04  1.47e-03  2.74e-01  
 10  +3.6612e-01  +4.4777e-01  8.17e-02  1.67e-04  1.28e-02  3.81e-05  5.29e-04  9.90e-01  
 11  +3.4928e-01  +3.7310e-01  2.38e-02  4.80e-05  3.67e-03  1.05e-05  1.62e-04  7.12e-01  
 12  +3.4364e-01  +3.4882e-01  5.18e-03  1.03e-05  7.84e-04  2.41e-06  3.66e-05  8.31e-01  
 13  +3.4239e-01  +3.4421e-01  1.82e-03  3.50e-06  2.65e-04  9.31e-07  1.31e-05  7.78e-01  
 14  +3.4172e-01  +3.4177e-01  4.89e-05  9.21e-08  6.99e-06  2.64e-08  3.55e-07  9.90e-01  
 15  +3.4170e-01  +3.4170e-01  4.89e-07  9.21e-10  6.99e-08  2.64e-10  3.55e-09  9.90e-01  
 16  +3.4170e-01  +3.4170e-01  4.90e-09  9.22e-12  7.00e-10  2.64e-12  3.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.9041ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:55 PM: Optimal value: 3.417e-01
(CVXPY) Oct 06 04:15:55 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:55 PM: Solver (including time spent in interface) took 1.677e-02 seconds
Iteration: 4, Objective: 0.3417
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:55 PM: Your problem has 559 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 559
  constraints   = 1059
  nnz(P)        = 0
  nnz(A)        = 7890
  cones (total) = 1
    : Nonnegative = 1,  numel = 1059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9943e-01  +5.0187e+02  5.01e+02  9.57e-01  3.75e+01  1.00e+00  1.01e+00   ------   
  1  +5.7331e-01  +1.0939e+02  1.09e+02  4.23e-01  2.37e+01  3.78e-03  5.84e-01  5.84e-01  
  2  +5.2430e-01  +1.2258e+01  1.17e+01  1.37e-01  9.88e+00  1.79e-02  2.60e-01  9.90e-01  
  3  +5.0528e-01  +1.9399e+00  1.43e+00  3.05e-02  2.36e+00  8.35e-05  8.75e-02  9.59e-01  
  4  +5.0509e-01  +2.0773e+00  1.57e+00  2.10e-02  1.67e+00  1.48e-04  5.16e-02  4.63e-01  
  5  +4.9740e-01  +2.1014e+00  1.60e+00  8.17e-03  6.62e-01  3.54e-04  1.91e-02  8.02e-01  
  6  +4.7926e-01  +1.5390e+00  1.06e+00  3.90e-03  3.14e-01  3.06e-04  9.41e-03  5.88e-01  
  7  +4.6395e-01  +1.4076e+00  9.44e-01  2.41e-03  1.93e-01  3.87e-04  5.92e-03  5.48e-01  
  8  +4.4485e-01  +1.1250e+00  6.80e-01  1.78e-03  1.41e-01  2.71e-04  4.57e-03  5.20e-01  
  9  +4.0054e-01  +7.4318e-01  3.43e-01  7.89e-04  6.15e-02  1.45e-04  2.22e-03  8.61e-01  
 10  +3.6827e-01  +5.6312e-01  1.95e-01  4.31e-04  3.32e-02  8.19e-05  1.31e-03  5.56e-01  
 11  +3.3567e-01  +3.9206e-01  5.64e-02  1.23e-04  9.37e-03  2.19e-05  4.20e-04  7.53e-01  
 12  +3.2745e-01  +3.5397e-01  2.65e-02  5.69e-05  4.33e-03  1.08e-05  2.05e-04  5.70e-01  
 13  +3.2147e-01  +3.2833e-01  6.86e-03  1.41e-05  1.08e-03  3.55e-06  5.49e-05  9.67e-01  
 14  +3.1916e-01  +3.1933e-01  1.71e-04  3.47e-07  2.64e-05  8.06e-08  1.40e-06  9.80e-01  
 15  +3.1910e-01  +3.1910e-01  1.73e-06  3.50e-09  2.67e-07  8.15e-10  1.42e-08  9.90e-01  
 16  +3.1910e-01  +3.1910e-01  1.73e-08  3.51e-11  2.67e-09  8.15e-12  1.42e-10  9.90e-01  
 17  +3.1910e-01  +3.1910e-01  1.74e-10  3.52e-13  2.68e-11  8.20e-14  1.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.3003ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:55 PM: Optimal value: 3.191e-01
(CVXPY) Oct 06 04:15:55 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:55 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 5, Objective: 0.3191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:55 PM: Your problem has 569 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Finished problem compilation (took 1.554e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 569
  constraints   = 1069
  nnz(P)        = 0
  nnz(A)        = 7999
  cones (total) = 1
    : Nonnegative = 1,  numel = 1069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0191e+02  5.01e+02  9.57e-01  3.74e+01  1.00e+00  1.01e+00   ------   
  1  +5.7172e-01  +1.0938e+02  1.09e+02  4.23e-01  2.35e+01  3.79e-03  5.82e-01  5.85e-01  
  2  +5.2343e-01  +1.2364e+01  1.18e+01  1.36e-01  9.75e+00  1.80e-02  2.58e-01  9.90e-01  
  3  +5.0695e-01  +2.6737e+00  2.17e+00  4.11e-02  3.18e+00  1.68e-03  1.05e-01  7.78e-01  
  4  +5.0618e-01  +2.6481e+00  2.14e+00  3.02e-02  2.38e+00  2.30e-03  7.29e-02  3.33e-01  
  5  +5.0289e-01  +2.4568e+00  1.95e+00  2.64e-02  2.05e+00  1.46e-03  6.97e-02  2.57e-01  
  6  +4.8877e-01  +1.9081e+00  1.42e+00  5.74e-03  4.65e-01  3.92e-03  1.35e-02  8.18e-01  
  7  +4.6687e-01  +1.4124e+00  9.46e-01  3.14e-03  2.50e-01  1.99e-03  7.70e-03  5.87e-01  
  8  +4.6140e-01  +1.3558e+00  8.94e-01  2.72e-03  2.17e-01  1.75e-03  6.71e-03  2.40e-01  
  9  +4.5448e-01  +1.2489e+00  7.94e-01  2.41e-03  1.91e-01  8.95e-04  6.07e-03  4.52e-01  
 10  +4.0205e-01  +8.0780e-01  4.06e-01  9.11e-04  7.10e-02  3.84e-04  2.48e-03  7.47e-01  
 11  +3.8479e-01  +7.0946e-01  3.25e-01  7.15e-04  5.55e-02  2.92e-04  2.02e-03  2.42e-01  
 12  +3.4949e-01  +5.1732e-01  1.68e-01  3.82e-04  2.92e-02  8.56e-05  1.21e-03  9.90e-01  
 13  +3.2075e-01  +3.6967e-01  4.89e-02  1.05e-04  8.00e-03  2.46e-05  3.65e-04  8.12e-01  
 14  +3.1055e-01  +3.2515e-01  1.46e-02  3.06e-05  2.34e-03  7.34e-06  1.14e-04  9.27e-01  
 15  +3.0655e-01  +3.0963e-01  3.08e-03  6.30e-06  4.80e-04  1.55e-06  2.48e-05  8.37e-01  
 16  +3.0552e-01  +3.0556e-01  4.64e-05  9.43e-08  7.18e-06  2.12e-08  3.80e-07  9.86e-01  
 17  +3.0550e-01  +3.0550e-01  4.64e-07  9.43e-10  7.18e-08  2.12e-10  3.80e-09  9.90e-01  
 18  +3.0550e-01  +3.0550e-01  4.64e-09  9.44e-12  7.19e-10  2.12e-12  3.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.3121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:55 PM: Optimal value: 3.055e-01
(CVXPY) Oct 06 04:15:55 PM: Compilation took 1.554e-02 seconds
(CVXPY) Oct 06 04:15:55 PM: Solver (including time spent in interface) took 1.636e-02 seconds
Iteration: 6, Objective: 0.3055
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:55 PM: Your problem has 579 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 579
  constraints   = 1079
  nnz(P)        = 0
  nnz(A)        = 8164
  cones (total) = 1
    : Nonnegative = 1,  numel = 1079

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0192e+02  5.01e+02  9.57e-01  3.73e+01  1.00e+00  1.01e+00   ------   
  1  +5.7079e-01  +1.0940e+02  1.09e+02  4.24e-01  2.34e+01  3.79e-03  5.82e-01  5.85e-01  
  2  +5.2271e-01  +1.2434e+01  1.19e+01  1.36e-01  9.67e+00  1.81e-02  2.57e-01  9.90e-01  
  3  +5.0786e-01  +3.1610e+00  2.65e+00  4.68e-02  3.60e+00  2.71e-03  1.14e-01  6.91e-01  
  4  +5.0623e-01  +2.9500e+00  2.44e+00  3.32e-02  2.60e+00  3.44e-03  7.90e-02  3.29e-01  
  5  +5.0276e-01  +2.7198e+00  2.22e+00  2.89e-02  2.23e+00  2.12e-03  7.44e-02  2.94e-01  
  6  +4.8727e-01  +1.9585e+00  1.47e+00  6.10e-03  4.92e-01  5.04e-03  1.43e-02  8.18e-01  
  7  +4.6490e-01  +1.4876e+00  1.02e+00  3.33e-03  2.65e-01  3.03e-03  8.15e-03  5.68e-01  
  8  +4.5610e-01  +1.3915e+00  9.35e-01  2.65e-03  2.10e-01  2.09e-03  6.53e-03  4.53e-01  
  9  +4.3089e-01  +1.1572e+00  7.26e-01  1.72e-03  1.36e-01  1.55e-03  4.40e-03  4.09e-01  
 10  +3.9439e-01  +8.4916e-01  4.55e-01  1.05e-03  8.16e-02  5.99e-04  2.92e-03  5.06e-01  
 11  +3.5383e-01  +5.8017e-01  2.26e-01  5.12e-04  3.91e-02  2.21e-04  1.58e-03  5.29e-01  
 12  +3.2793e-01  +4.3815e-01  1.10e-01  2.44e-04  1.85e-02  9.65e-05  8.24e-04  5.41e-01  
 13  +3.1929e-01  +3.9631e-01  7.70e-02  1.66e-04  1.26e-02  6.52e-05  5.79e-04  4.08e-01  
 14  +3.0527e-01  +3.2944e-01  2.42e-02  5.06e-05  3.87e-03  1.59e-05  1.91e-04  9.03e-01  
 15  +2.9820e-01  +2.9965e-01  1.45e-03  3.03e-06  2.32e-04  7.57e-07  1.21e-05  9.67e-01  
 16  +2.9771e-01  +2.9772e-01  1.85e-05  3.86e-08  2.94e-06  9.04e-09  1.56e-07  9.88e-01  
 17  +2.9770e-01  +2.9770e-01  1.85e-07  3.86e-10  2.94e-08  9.04e-11  1.56e-09  9.90e-01  
 18  +2.9770e-01  +2.9770e-01  1.85e-09  3.86e-12  2.94e-10  9.04e-13  1.56e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.4099ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:55 PM: Optimal value: 2.977e-01
(CVXPY) Oct 06 04:15:55 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:55 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 7, Objective: 0.2977
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:55 PM: Your problem has 589 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:55 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 589
  constraints   = 1089
  nnz(P)        = 0
  nnz(A)        = 8306
  cones (total) = 1
    : Nonnegative = 1,  numel = 1089

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9942e-01  +5.0188e+02  5.01e+02  9.57e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.7015e-01  +1.0941e+02  1.09e+02  4.25e-01  2.32e+01  3.79e-03  5.82e-01  5.85e-01  
  2  +5.2222e-01  +1.2459e+01  1.19e+01  1.36e-01  9.59e+00  1.82e-02  2.57e-01  9.90e-01  
  3  +5.0811e-01  +3.3194e+00  2.81e+00  4.79e-02  3.68e+00  3.09e-03  1.15e-01  6.66e-01  
  4  +5.0625e-01  +3.0414e+00  2.54e+00  3.40e-02  2.65e+00  3.78e-03  8.04e-02  3.20e-01  
  5  +5.0272e-01  +2.8004e+00  2.30e+00  2.95e-02  2.27e+00  2.32e-03  7.53e-02  3.03e-01  
  6  +4.8712e-01  +1.9764e+00  1.49e+00  6.30e-03  5.07e-01  5.23e-03  1.48e-02  8.13e-01  
  7  +4.6073e-01  +1.4509e+00  9.90e-01  3.09e-03  2.45e-01  3.12e-03  7.59e-03  6.32e-01  
  8  +4.5207e-01  +1.3380e+00  8.86e-01  2.55e-03  2.01e-01  2.19e-03  6.31e-03  3.67e-01  
  9  +4.2897e-01  +1.1502e+00  7.21e-01  1.74e-03  1.37e-01  1.71e-03  4.44e-03  3.84e-01  
 10  +3.7428e-01  +6.9399e-01  3.20e-01  7.51e-04  5.75e-02  1.56e-05  2.17e-03  8.29e-01  
 11  +3.2584e-01  +4.2913e-01  1.03e-01  2.33e-04  1.76e-02  1.70e-05  7.75e-04  7.26e-01  
 12  +3.1864e-01  +3.9891e-01  8.03e-02  1.77e-04  1.34e-02  1.90e-05  6.07e-04  3.60e-01  
 13  +3.0317e-01  +3.3264e-01  2.95e-02  6.28e-05  4.80e-03  8.44e-06  2.33e-04  6.83e-01  
 14  +2.9493e-01  +2.9785e-01  2.92e-03  6.16e-06  4.72e-04  1.36e-06  2.43e-05  9.83e-01  
 15  +2.9392e-01  +2.9398e-01  5.89e-05  1.24e-07  9.51e-06  2.55e-08  4.99e-07  9.81e-01  
 16  +2.9390e-01  +2.9390e-01  5.89e-07  1.25e-09  9.52e-08  2.56e-10  5.00e-09  9.90e-01  
 17  +2.9390e-01  +2.9390e-01  5.90e-09  1.25e-11  9.53e-10  2.56e-12  5.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.0142ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:55 PM: Optimal value: 2.939e-01
(CVXPY) Oct 06 04:15:55 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:55 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 8, Objective: 0.2939
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:56 PM: Your problem has 599 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:56 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 599
  constraints   = 1099
  nnz(P)        = 0
  nnz(A)        = 8418
  cones (total) = 1
    : Nonnegative = 1,  numel = 1099

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9940e-01  +5.0187e+02  5.01e+02  9.58e-01  3.70e+01  1.00e+00  1.01e+00   ------   
  1  +5.6883e-01  +1.0939e+02  1.09e+02  4.25e-01  2.30e+01  3.80e-03  5.81e-01  5.85e-01  
  2  +5.2140e-01  +1.2569e+01  1.20e+01  1.35e-01  9.48e+00  1.83e-02  2.55e-01  9.90e-01  
  3  +5.0813e-01  +3.4235e+00  2.92e+00  4.70e-02  3.60e+00  3.48e-03  1.11e-01  6.51e-01  
  4  +5.0664e-01  +3.2205e+00  2.71e+00  3.54e-02  2.76e+00  4.09e-03  8.26e-02  2.68e-01  
  5  +5.0268e-01  +2.9614e+00  2.46e+00  3.05e-02  2.35e+00  2.50e-03  7.68e-02  3.17e-01  
  6  +4.8487e-01  +2.0104e+00  1.53e+00  5.99e-03  4.81e-01  5.79e-03  1.39e-02  8.28e-01  
  7  +4.6732e-01  +1.7752e+00  1.31e+00  3.90e-03  3.12e-01  5.36e-03  9.23e-03  4.18e-01  
  8  +4.3489e-01  +1.3338e+00  8.99e-01  2.07e-03  1.64e-01  2.67e-03  5.10e-03  6.62e-01  
  9  +4.1467e-01  +1.1029e+00  6.88e-01  1.72e-03  1.34e-01  1.25e-03  4.46e-03  3.18e-01  
 10  +3.6635e-01  +7.2807e-01  3.62e-01  8.34e-04  6.39e-02  3.26e-04  2.39e-03  7.10e-01  
 11  +3.2021e-01  +4.3572e-01  1.16e-01  2.65e-04  2.00e-02  7.64e-05  8.70e-04  6.94e-01  
 12  +3.1054e-01  +3.9124e-01  8.07e-02  1.78e-04  1.35e-02  5.21e-05  6.10e-04  5.44e-01  
 13  +2.9585e-01  +3.2474e-01  2.89e-02  6.16e-05  4.70e-03  1.81e-05  2.28e-04  6.90e-01  
 14  +2.8832e-01  +2.9178e-01  3.47e-03  7.33e-06  5.59e-04  1.80e-06  2.89e-05  9.63e-01  
 15  +2.8716e-01  +2.8733e-01  1.67e-04  3.51e-07  2.67e-05  7.78e-08  1.43e-06  9.71e-01  
 16  +2.8710e-01  +2.8710e-01  1.68e-06  3.54e-09  2.69e-07  7.80e-10  1.45e-08  9.90e-01  
 17  +2.8710e-01  +2.8710e-01  1.68e-08  3.54e-11  2.69e-09  7.80e-12  1.45e-10  9.90e-01  
 18  +2.8710e-01  +2.8710e-01  1.68e-10  3.54e-13  2.69e-11  7.82e-14  1.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.0623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:56 PM: Optimal value: 2.871e-01
(CVXPY) Oct 06 04:15:56 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:56 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 9, Objective: 0.2871
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:56 PM: Your problem has 609 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:56 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 609
  constraints   = 1109
  nnz(P)        = 0
  nnz(A)        = 8554
  cones (total) = 1
    : Nonnegative = 1,  numel = 1109

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0190e+02  5.01e+02  9.58e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.6833e-01  +1.0939e+02  1.09e+02  4.26e-01  2.29e+01  3.80e-03  5.81e-01  5.85e-01  
  2  +5.2092e-01  +1.2606e+01  1.21e+01  1.35e-01  9.39e+00  1.84e-02  2.55e-01  9.90e-01  
  3  +5.0796e-01  +3.4058e+00  2.90e+00  4.56e-02  3.49e+00  3.57e-03  1.07e-01  6.53e-01  
  4  +5.0674e-01  +3.2647e+00  2.76e+00  3.56e-02  2.76e+00  4.15e-03  8.26e-02  2.40e-01  
  5  +5.0271e-01  +3.0272e+00  2.52e+00  3.08e-02  2.36e+00  2.60e-03  7.68e-02  3.19e-01  
  6  +4.8501e-01  +2.0897e+00  1.60e+00  6.36e-03  5.11e-01  5.82e-03  1.48e-02  8.17e-01  
  7  +4.6756e-01  +1.8162e+00  1.35e+00  4.20e-03  3.35e-01  5.11e-03  9.94e-03  4.08e-01  
  8  +4.4699e-01  +1.5735e+00  1.13e+00  2.79e-03  2.21e-01  4.23e-03  6.73e-03  4.26e-01  
  9  +4.2661e-01  +1.3228e+00  8.96e-01  2.09e-03  1.64e-01  2.79e-03  5.22e-03  3.32e-01  
 10  +3.9932e-01  +1.0026e+00  6.03e-01  1.50e-03  1.16e-01  6.26e-04  4.02e-03  6.07e-01  
 11  +3.3465e-01  +5.1087e-01  1.76e-01  3.97e-04  3.00e-02  8.54e-05  1.22e-03  7.75e-01  
 12  +3.1883e-01  +4.4246e-01  1.24e-01  2.73e-04  2.06e-02  6.39e-05  8.84e-04  4.23e-01  
 13  +2.9621e-01  +3.4069e-01  4.45e-02  9.52e-05  7.21e-03  2.36e-05  3.42e-04  7.11e-01  
 14  +2.8695e-01  +3.0173e-01  1.48e-02  3.12e-05  2.36e-03  7.73e-06  1.20e-04  7.28e-01  
 15  +2.8243e-01  +2.8311e-01  6.73e-04  1.41e-06  1.07e-04  2.99e-07  5.69e-06  9.58e-01  
 16  +2.8220e-01  +2.8221e-01  8.61e-06  1.81e-08  1.37e-06  3.65e-09  7.37e-08  9.89e-01  
 17  +2.8220e-01  +2.8220e-01  8.61e-08  1.81e-10  1.37e-08  3.65e-11  7.37e-10  9.90e-01  
 18  +2.8220e-01  +2.8220e-01  8.61e-10  1.81e-12  1.37e-10  3.65e-13  7.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.9642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:56 PM: Optimal value: 2.822e-01
(CVXPY) Oct 06 04:15:56 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:56 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.2822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:56 PM: Your problem has 619 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:56 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 619
  constraints   = 1119
  nnz(P)        = 0
  nnz(A)        = 8654
  cones (total) = 1
    : Nonnegative = 1,  numel = 1119

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0193e+02  5.01e+02  9.58e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.6570e-01  +1.0944e+02  1.09e+02  4.27e-01  2.27e+01  3.80e-03  5.81e-01  5.85e-01  
  2  +5.1931e-01  +1.2841e+01  1.23e+01  1.34e-01  9.29e+00  1.87e-02  2.53e-01  9.90e-01  
  3  +5.0682e-01  +3.1162e+00  2.61e+00  3.79e-02  2.93e+00  3.54e-03  8.83e-02  6.92e-01  
  4  +5.0635e-01  +3.1752e+00  2.67e+00  3.26e-02  2.54e+00  4.04e-03  7.46e-02  1.91e-01  
  5  +5.0224e-01  +3.3620e+00  2.86e+00  2.77e-02  2.15e+00  3.31e-03  6.43e-02  4.65e-01  
  6  +4.8337e-01  +2.5446e+00  2.06e+00  7.42e-03  5.97e-01  6.43e-03  1.68e-02  7.45e-01  
  7  +4.5861e-01  +1.8824e+00  1.42e+00  4.47e-03  3.54e-01  3.49e-03  1.06e-02  5.05e-01  
  8  +4.3618e-01  +1.6211e+00  1.18e+00  2.97e-03  2.34e-01  3.12e-03  7.19e-03  3.73e-01  
  9  +4.1207e-01  +1.2852e+00  8.73e-01  2.19e-03  1.71e-01  1.50e-03  5.57e-03  4.15e-01  
 10  +3.6780e-01  +8.3594e-01  4.68e-01  1.14e-03  8.68e-02  5.18e-04  3.16e-03  5.67e-01  
 11  +3.1362e-01  +4.5056e-01  1.37e-01  3.27e-04  2.45e-02  6.93e-05  1.06e-03  8.30e-01  
 12  +3.0567e-01  +4.1528e-01  1.10e-01  2.55e-04  1.92e-02  5.71e-05  8.57e-04  3.34e-01  
 13  +2.8688e-01  +3.2728e-01  4.04e-02  9.07e-05  6.84e-03  2.10e-05  3.34e-04  7.03e-01  
 14  +2.7761e-01  +2.8763e-01  1.00e-02  2.19e-05  1.66e-03  4.96e-06  8.65e-05  8.03e-01  
 15  +2.7466e-01  +2.7514e-01  4.82e-04  1.05e-06  7.95e-05  2.12e-07  4.30e-06  9.54e-01  
 16  +2.7450e-01  +2.7451e-01  5.45e-06  1.19e-08  8.97e-07  2.32e-09  4.91e-08  9.89e-01  
 17  +2.7450e-01  +2.7450e-01  5.45e-08  1.19e-10  8.98e-09  2.32e-11  4.91e-10  9.90e-01  
 18  +2.7450e-01  +2.7450e-01  5.45e-10  1.19e-12  8.98e-11  2.32e-13  4.91e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.9606ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:56 PM: Optimal value: 2.745e-01
(CVXPY) Oct 06 04:15:56 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:56 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 11, Objective: 0.2745
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:56 PM: Your problem has 629 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:56 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 629
  constraints   = 1129
  nnz(P)        = 0
  nnz(A)        = 8840
  cones (total) = 1
    : Nonnegative = 1,  numel = 1129

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9930e-01  +5.0200e+02  5.02e+02  9.58e-01  3.66e+01  1.00e+00  1.01e+00   ------   
  1  +5.6426e-01  +1.0940e+02  1.09e+02  4.27e-01  2.26e+01  3.81e-03  5.80e-01  5.86e-01  
  2  +5.1830e-01  +1.2930e+01  1.24e+01  1.33e-01  9.19e+00  1.88e-02  2.51e-01  9.90e-01  
  3  +5.0574e-01  +2.7841e+00  2.28e+00  3.16e-02  2.46e+00  3.29e-03  7.40e-02  7.37e-01  
  4  +5.0541e-01  +2.9349e+00  2.43e+00  2.80e-02  2.20e+00  3.74e-03  6.41e-02  2.16e-01  
  5  +4.9963e-01  +3.5011e+00  3.00e+00  2.07e-02  1.63e+00  4.07e-03  4.65e-02  6.51e-01  
  6  +4.7843e-01  +2.6054e+00  2.13e+00  7.10e-03  5.70e-01  5.75e-03  1.61e-02  6.58e-01  
  7  +4.5688e-01  +2.1797e+00  1.72e+00  4.88e-03  3.88e-01  4.41e-03  1.14e-02  4.11e-01  
  8  +4.3414e-01  +1.7983e+00  1.36e+00  3.36e-03  2.65e-01  3.27e-03  8.07e-03  3.80e-01  
  9  +4.1059e-01  +1.4377e+00  1.03e+00  2.44e-03  1.90e-01  1.99e-03  6.09e-03  3.68e-01  
 10  +3.7843e-01  +9.8819e-01  6.10e-01  1.57e-03  1.20e-01  3.30e-04  4.27e-03  7.60e-01  
 11  +3.1989e-01  +5.0812e-01  1.88e-01  4.50e-04  3.37e-02  6.90e-05  1.41e-03  7.18e-01  
 12  +3.0417e-01  +4.3254e-01  1.28e-01  2.99e-04  2.25e-02  5.18e-05  9.84e-04  4.09e-01  
 13  +2.8462e-01  +3.3916e-01  5.45e-02  1.22e-04  9.22e-03  2.33e-05  4.40e-04  6.25e-01  
 14  +2.7585e-01  +2.9999e-01  2.41e-02  5.30e-05  4.00e-03  1.07e-05  2.02e-04  6.27e-01  
 15  +2.6933e-01  +2.7133e-01  2.00e-03  4.37e-06  3.29e-04  7.96e-07  1.77e-05  9.23e-01  
 16  +2.6872e-01  +2.6878e-01  6.24e-05  1.36e-07  1.02e-05  2.36e-08  5.63e-07  9.73e-01  
 17  +2.6870e-01  +2.6870e-01  6.25e-07  1.36e-09  1.02e-07  2.36e-10  5.64e-09  9.90e-01  
 18  +2.6870e-01  +2.6870e-01  6.25e-09  1.36e-11  1.02e-09  2.36e-12  5.64e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.8832ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:56 PM: Optimal value: 2.687e-01
(CVXPY) Oct 06 04:15:56 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:56 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 12, Objective: 0.2687
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:57 PM: Your problem has 639 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 639
  constraints   = 1139
  nnz(P)        = 0
  nnz(A)        = 8910
  cones (total) = 1
    : Nonnegative = 1,  numel = 1139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0212e+02  5.02e+02  9.58e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.6191e-01  +1.0950e+02  1.09e+02  4.27e-01  2.24e+01  3.81e-03  5.79e-01  5.86e-01  
  2  +5.1717e-01  +1.3088e+01  1.26e+01  1.32e-01  9.08e+00  1.90e-02  2.49e-01  9.90e-01  
  3  +5.0480e-01  +2.7393e+00  2.23e+00  2.92e-02  2.27e+00  3.50e-03  6.79e-02  7.56e-01  
  4  +4.9149e-01  +3.3494e+00  2.86e+00  1.23e-02  9.87e-01  7.58e-03  2.72e-02  8.24e-01  
  5  +4.6824e-01  +2.3551e+00  1.89e+00  6.66e-03  5.30e-01  4.33e-03  1.53e-02  5.45e-01  
  6  +4.4308e-01  +1.9188e+00  1.48e+00  4.15e-03  3.28e-01  3.33e-03  9.82e-03  4.61e-01  
  7  +4.1873e-01  +1.5567e+00  1.14e+00  2.89e-03  2.26e-01  1.93e-03  7.08e-03  4.76e-01  
  8  +3.8283e-01  +1.0592e+00  6.76e-01  1.83e-03  1.40e-01  3.51e-04  4.89e-03  6.75e-01  
  9  +3.4649e-01  +7.5697e-01  4.10e-01  1.05e-03  7.93e-02  1.95e-04  3.04e-03  4.10e-01  
 10  +3.3024e-01  +6.4920e-01  3.19e-01  8.08e-04  6.07e-02  1.65e-04  2.45e-03  6.60e-01  
 11  +2.9375e-01  +4.0650e-01  1.13e-01  2.76e-04  2.06e-02  5.08e-05  9.44e-04  6.54e-01  
 12  +2.8005e-01  +3.3680e-01  5.68e-02  1.33e-04  1.00e-02  2.77e-05  4.83e-04  7.47e-01  
 13  +2.7036e-01  +2.9218e-01  2.18e-02  4.93e-05  3.72e-03  1.08e-05  1.90e-04  6.64e-01  
 14  +2.6530e-01  +2.6952e-01  4.22e-03  9.45e-06  7.13e-04  1.97e-06  3.82e-05  8.54e-01  
 15  +2.6406e-01  +2.6425e-01  1.90e-04  4.26e-07  3.21e-05  8.12e-08  1.76e-06  9.59e-01  
 16  +2.6400e-01  +2.6400e-01  1.93e-06  4.31e-09  3.25e-07  8.15e-10  1.79e-08  9.90e-01  
 17  +2.6400e-01  +2.6400e-01  1.93e-08  4.32e-11  3.25e-09  8.15e-12  1.79e-10  9.90e-01  
 18  +2.6400e-01  +2.6400e-01  1.93e-10  4.32e-13  3.26e-11  8.17e-14  1.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.7785ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:57 PM: Optimal value: 2.640e-01
(CVXPY) Oct 06 04:15:57 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:57 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 13, Objective: 0.2640
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:57 PM: Your problem has 649 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Finished problem compilation (took 5.506e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 649
  constraints   = 1149
  nnz(P)        = 0
  nnz(A)        = 9005
  cones (total) = 1
    : Nonnegative = 1,  numel = 1149

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0211e+02  5.02e+02  9.59e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.5952e-01  +1.0959e+02  1.09e+02  4.27e-01  2.23e+01  3.82e-03  5.79e-01  5.86e-01  
  2  +5.1604e-01  +1.3257e+01  1.27e+01  1.32e-01  9.01e+00  1.92e-02  2.48e-01  9.90e-01  
  3  +5.0402e-01  +2.7820e+00  2.28e+00  2.83e-02  2.20e+00  3.80e-03  6.50e-02  7.62e-01  
  4  +4.9007e-01  +2.9677e+00  2.48e+00  1.15e-02  9.25e-01  7.68e-03  2.55e-02  7.40e-01  
  5  +4.6640e-01  +2.2986e+00  1.83e+00  6.15e-03  4.91e-01  6.45e-03  1.40e-02  5.20e-01  
  6  +4.4093e-01  +1.9105e+00  1.47e+00  4.04e-03  3.20e-01  4.77e-03  9.46e-03  4.40e-01  
  7  +4.1702e-01  +1.5617e+00  1.14e+00  2.99e-03  2.34e-01  2.69e-03  7.25e-03  4.10e-01  
  8  +3.6909e-01  +9.6587e-01  5.97e-01  1.59e-03  1.21e-01  3.43e-04  4.29e-03  7.25e-01  
  9  +3.0804e-01  +4.8120e-01  1.73e-01  4.43e-04  3.29e-02  6.05e-05  1.40e-03  7.42e-01  
 10  +2.9717e-01  +4.3249e-01  1.35e-01  3.37e-04  2.51e-02  5.23e-05  1.11e-03  3.50e-01  
 11  +2.7696e-01  +3.3407e-01  5.71e-02  1.37e-04  1.03e-02  2.37e-05  4.97e-04  6.59e-01  
 12  +2.6730e-01  +2.9076e-01  2.35e-02  5.40e-05  4.05e-03  1.01e-05  2.10e-04  6.51e-01  
 13  +2.6242e-01  +2.6921e-01  6.79e-03  1.54e-05  1.16e-03  2.91e-06  6.31e-05  7.89e-01  
 14  +2.6041e-01  +2.6073e-01  3.19e-04  7.22e-07  5.41e-05  1.22e-07  3.06e-06  9.66e-01  
 15  +2.6030e-01  +2.6030e-01  3.30e-06  7.46e-09  5.59e-07  1.24e-09  3.18e-08  9.90e-01  
 16  +2.6030e-01  +2.6030e-01  3.30e-08  7.47e-11  5.59e-09  1.24e-11  3.18e-10  9.90e-01  
 17  +2.6030e-01  +2.6030e-01  3.30e-10  7.47e-13  5.59e-11  1.24e-13  3.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.2837ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:57 PM: Optimal value: 2.603e-01
(CVXPY) Oct 06 04:15:57 PM: Compilation took 5.506e-03 seconds
(CVXPY) Oct 06 04:15:57 PM: Solver (including time spent in interface) took 3.126e-02 seconds
Iteration: 14, Objective: 0.2603
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:57 PM: Your problem has 659 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Finished problem compilation (took 1.440e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 659
  constraints   = 1159
  nnz(P)        = 0
  nnz(A)        = 9163
  cones (total) = 1
    : Nonnegative = 1,  numel = 1159

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0213e+02  5.02e+02  9.59e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.5905e-01  +1.0963e+02  1.09e+02  4.29e-01  2.21e+01  3.82e-03  5.79e-01  5.85e-01  
  2  +5.1589e-01  +1.3283e+01  1.28e+01  1.32e-01  8.93e+00  1.93e-02  2.47e-01  9.90e-01  
  3  +5.0379e-01  +2.7794e+00  2.28e+00  2.79e-02  2.16e+00  3.85e-03  6.42e-02  7.64e-01  
  4  +4.8971e-01  +2.9004e+00  2.41e+00  1.13e-02  9.05e-01  7.66e-03  2.51e-02  7.28e-01  
  5  +4.6619e-01  +2.2761e+00  1.81e+00  6.08e-03  4.85e-01  6.65e-03  1.38e-02  5.12e-01  
  6  +4.3914e-01  +1.8860e+00  1.45e+00  3.90e-03  3.08e-01  5.04e-03  9.14e-03  4.54e-01  
  7  +4.1419e-01  +1.5244e+00  1.11e+00  2.92e-03  2.27e-01  2.43e-03  7.13e-03  4.43e-01  
  8  +3.6673e-01  +9.6069e-01  5.94e-01  1.56e-03  1.19e-01  4.66e-04  4.21e-03  6.79e-01  
  9  +3.1039e-01  +5.1483e-01  2.04e-01  5.23e-04  3.88e-02  1.05e-04  1.64e-03  6.78e-01  
 10  +2.9473e-01  +4.3541e-01  1.41e-01  3.50e-04  2.60e-02  7.37e-05  1.16e-03  4.15e-01  
 11  +2.7604e-01  +3.4073e-01  6.47e-02  1.56e-04  1.16e-02  3.36e-05  5.62e-04  6.10e-01  
 12  +2.6634e-01  +2.9503e-01  2.87e-02  6.71e-05  5.01e-03  1.47e-05  2.59e-04  6.14e-01  
 13  +2.5926e-01  +2.6245e-01  3.19e-03  7.37e-06  5.49e-04  1.43e-06  3.07e-05  8.95e-01  
 14  +2.5843e-01  +2.5886e-01  4.30e-04  9.88e-07  7.35e-05  1.85e-07  4.26e-06  8.74e-01  
 15  +2.5830e-01  +2.5831e-01  7.51e-06  1.72e-08  1.28e-06  3.14e-09  7.49e-08  9.89e-01  
 16  +2.5830e-01  +2.5830e-01  7.51e-08  1.72e-10  1.28e-08  3.14e-11  7.50e-10  9.90e-01  
 17  +2.5830e-01  +2.5830e-01  7.51e-10  1.72e-12  1.28e-10  3.14e-13  7.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.5956ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:57 PM: Optimal value: 2.583e-01
(CVXPY) Oct 06 04:15:57 PM: Compilation took 1.440e-02 seconds
(CVXPY) Oct 06 04:15:57 PM: Solver (including time spent in interface) took 1.714e-02 seconds
Iteration: 15, Objective: 0.2583
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:57 PM: Your problem has 669 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 669
  constraints   = 1169
  nnz(P)        = 0
  nnz(A)        = 9238
  cones (total) = 1
    : Nonnegative = 1,  numel = 1169

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +5.0230e+02  5.02e+02  9.59e-01  3.61e+01  1.00e+00  1.02e+00   ------   
  1  +5.5682e-01  +1.0971e+02  1.09e+02  4.29e-01  2.20e+01  3.82e-03  5.79e-01  5.85e-01  
  2  +5.1440e-01  +1.3469e+01  1.30e+01  1.31e-01  8.85e+00  1.95e-02  2.46e-01  9.90e-01  
  3  +5.0262e-01  +2.8881e+00  2.39e+00  2.74e-02  2.12e+00  4.32e-03  6.25e-02  7.65e-01  
  4  +4.8351e-01  +2.7489e+00  2.27e+00  9.47e-03  7.59e-01  9.07e-03  2.10e-02  7.30e-01  
  5  +4.5671e-01  +2.2032e+00  1.75e+00  5.37e-03  4.28e-01  7.58e-03  1.22e-02  5.01e-01  
  6  +4.2981e-01  +1.8309e+00  1.40e+00  3.64e-03  2.88e-01  5.84e-03  8.51e-03  3.79e-01  
  7  +3.9213e-01  +1.3159e+00  9.24e-01  2.37e-03  1.83e-01  2.52e-03  5.90e-03  4.48e-01  
  8  +3.4071e-01  +7.8712e-01  4.46e-01  1.16e-03  8.73e-02  7.45e-04  3.23e-03  5.62e-01  
  9  +2.9616e-01  +4.7094e-01  1.75e-01  4.50e-04  3.34e-02  2.25e-04  1.44e-03  6.33e-01  
 10  +2.8088e-01  +3.8668e-01  1.06e-01  2.66e-04  1.98e-02  1.24e-04  8.99e-04  4.81e-01  
 11  +2.7331e-01  +3.4713e-01  7.38e-02  1.80e-04  1.36e-02  7.97e-05  6.29e-04  4.33e-01  
 12  +2.6082e-01  +2.8578e-01  2.50e-02  5.79e-05  4.43e-03  2.38e-05  2.20e-04  7.34e-01  
 13  +2.5519e-01  +2.5948e-01  4.29e-03  9.87e-06  7.51e-04  1.98e-06  3.98e-05  9.90e-01  
 14  +2.5389e-01  +2.5444e-01  5.48e-04  1.25e-06  9.54e-05  2.42e-07  5.25e-06  8.77e-01  
 15  +2.5370e-01  +2.5371e-01  1.01e-05  2.30e-08  1.75e-06  4.28e-09  9.71e-08  9.90e-01  
 16  +2.5370e-01  +2.5370e-01  1.01e-07  2.30e-10  1.75e-08  4.28e-11  9.72e-10  9.90e-01  
 17  +2.5370e-01  +2.5370e-01  1.01e-09  2.30e-12  1.75e-10  4.29e-13  9.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.9224ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:57 PM: Optimal value: 2.537e-01
(CVXPY) Oct 06 04:15:57 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:57 PM: Solver (including time spent in interface) took 3.126e-02 seconds
Iteration: 16, Objective: 0.2537
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:57 PM: Your problem has 679 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:57 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 679
  constraints   = 1179
  nnz(P)        = 0
  nnz(A)        = 9316
  cones (total) = 1
    : Nonnegative = 1,  numel = 1179

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +5.0227e+02  5.02e+02  9.59e-01  3.59e+01  1.00e+00  1.02e+00   ------   
  1  +5.5627e-01  +1.0970e+02  1.09e+02  4.30e-01  2.19e+01  3.82e-03  5.79e-01  5.85e-01  
  2  +5.1380e-01  +1.3499e+01  1.30e+01  1.31e-01  8.78e+00  1.96e-02  2.46e-01  9.90e-01  
  3  +5.0211e-01  +2.9374e+00  2.44e+00  2.73e-02  2.11e+00  4.51e-03  6.22e-02  7.64e-01  
  4  +4.8105e-01  +2.6962e+00  2.22e+00  8.93e-03  7.15e-01  9.50e-03  1.99e-02  7.32e-01  
  5  +4.5316e-01  +2.1689e+00  1.72e+00  5.15e-03  4.09e-01  7.85e-03  1.18e-02  4.92e-01  
  6  +4.2740e-01  +1.8184e+00  1.39e+00  3.62e-03  2.85e-01  6.15e-03  8.50e-03  3.37e-01  
  7  +3.7318e-01  +1.0795e+00  7.06e-01  1.85e-03  1.41e-01  6.45e-04  4.80e-03  7.08e-01  
  8  +3.0993e-01  +5.3841e-01  2.28e-01  5.98e-04  4.43e-02  1.21e-04  1.81e-03  6.95e-01  
  9  +2.9080e-01  +4.4638e-01  1.56e-01  3.93e-04  2.92e-02  8.45e-05  1.27e-03  4.79e-01  
 10  +2.7396e-01  +3.6063e-01  8.67e-02  2.13e-04  1.59e-02  4.67e-05  7.40e-04  5.01e-01  
 11  +2.6796e-01  +3.3170e-01  6.37e-02  1.54e-04  1.16e-02  3.41e-05  5.51e-04  3.81e-01  
 12  +2.5609e-01  +2.7515e-01  1.91e-02  4.49e-05  3.39e-03  9.64e-06  1.75e-04  7.35e-01  
 13  +2.5117e-01  +2.5265e-01  1.48e-03  3.46e-06  2.61e-04  6.22e-07  1.45e-05  9.30e-01  
 14  +2.5074e-01  +2.5087e-01  1.28e-04  2.99e-07  2.25e-05  5.26e-08  1.29e-06  9.65e-01  
 15  +2.5070e-01  +2.5070e-01  1.34e-06  3.12e-09  2.35e-07  5.47e-10  1.35e-08  9.90e-01  
 16  +2.5070e-01  +2.5070e-01  1.34e-08  3.13e-11  2.35e-09  5.48e-12  1.35e-10  9.90e-01  
 17  +2.5070e-01  +2.5070e-01  1.35e-10  3.14e-13  2.37e-11  5.51e-14  1.36e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.3806ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:58 PM: Optimal value: 2.507e-01
(CVXPY) Oct 06 04:15:58 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:58 PM: Solver (including time spent in interface) took 3.199e-02 seconds
Iteration: 17, Objective: 0.2507
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:58 PM: Your problem has 680 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:58 PM: Finished problem compilation (took 1.554e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 680
  constraints   = 1180
  nnz(P)        = 0
  nnz(A)        = 9381
  cones (total) = 1
    : Nonnegative = 1,  numel = 1180

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +5.0227e+02  5.02e+02  9.59e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.5628e-01  +1.0967e+02  1.09e+02  4.30e-01  2.19e+01  3.82e-03  5.78e-01  5.86e-01  
  2  +5.1380e-01  +1.3489e+01  1.30e+01  1.30e-01  8.77e+00  1.95e-02  2.45e-01  9.90e-01  
  3  +5.0207e-01  +2.9303e+00  2.43e+00  2.72e-02  2.10e+00  4.51e-03  6.19e-02  7.65e-01  
  4  +4.8093e-01  +2.6904e+00  2.21e+00  8.88e-03  7.11e-01  9.51e-03  1.98e-02  7.32e-01  
  5  +4.5286e-01  +2.1621e+00  1.71e+00  5.13e-03  4.08e-01  7.77e-03  1.17e-02  4.93e-01  
  6  +4.2750e-01  +1.8208e+00  1.39e+00  3.63e-03  2.86e-01  6.10e-03  8.52e-03  3.36e-01  
  7  +3.7538e-01  +1.1087e+00  7.33e-01  1.92e-03  1.47e-01  8.64e-04  4.94e-03  6.80e-01  
  8  +3.1548e-01  +5.8362e-01  2.68e-01  7.00e-04  5.20e-02  1.95e-04  2.08e-03  6.48e-01  
  9  +2.8667e-01  +4.2921e-01  1.43e-01  3.58e-04  2.66e-02  9.78e-05  1.17e-03  5.94e-01  
 10  +2.7092e-01  +3.4746e-01  7.65e-02  1.87e-04  1.40e-02  4.99e-05  6.53e-04  5.92e-01  
 11  +2.6200e-01  +3.0384e-01  4.18e-02  9.96e-05  7.53e-03  2.58e-05  3.69e-04  5.35e-01  
 12  +2.5367e-01  +2.6422e-01  1.06e-02  2.48e-05  1.87e-03  6.06e-06  9.90e-05  7.50e-01  
 13  +2.5102e-01  +2.5209e-01  1.06e-03  2.48e-06  1.87e-04  5.38e-07  1.05e-05  9.04e-01  
 14  +2.5073e-01  +2.5081e-01  7.88e-05  1.84e-07  1.38e-05  3.37e-08  7.92e-07  9.83e-01  
 15  +2.5070e-01  +2.5070e-01  8.00e-07  1.86e-09  1.40e-07  3.42e-10  8.05e-09  9.90e-01  
 16  +2.5070e-01  +2.5070e-01  8.01e-09  1.87e-11  1.40e-09  3.42e-12  8.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.1588ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:58 PM: Optimal value: 2.507e-01
(CVXPY) Oct 06 04:15:58 PM: Compilation took 1.554e-02 seconds
(CVXPY) Oct 06 04:15:58 PM: Solver (including time spent in interface) took 3.183e-02 seconds
Iteration: 18, Objective: 0.2507
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:58 PM: Your problem has 690 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:58 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 690
  constraints   = 1190
  nnz(P)        = 0
  nnz(A)        = 9458
  cones (total) = 1
    : Nonnegative = 1,  numel = 1190

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9911e-01  +5.0225e+02  5.02e+02  9.59e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.5494e-01  +1.0970e+02  1.09e+02  4.31e-01  2.17e+01  3.83e-03  5.78e-01  5.85e-01  
  2  +5.1254e-01  +1.3581e+01  1.31e+01  1.30e-01  8.72e+00  1.97e-02  2.45e-01  9.90e-01  
  3  +5.0072e-01  +2.9661e+00  2.47e+00  2.63e-02  2.04e+00  4.83e-03  5.99e-02  7.74e-01  
  4  +4.7647e-01  +2.5980e+00  2.12e+00  8.35e-03  6.69e-01  9.83e-03  1.87e-02  7.26e-01  
  5  +4.4758e-01  +2.1110e+00  1.66e+00  4.97e-03  3.95e-01  8.04e-03  1.14e-02  4.72e-01  
  6  +4.2374e-01  +1.8167e+00  1.39e+00  3.70e-03  2.91e-01  5.76e-03  8.73e-03  3.61e-01  
  7  +3.6377e-01  +9.9396e-01  6.30e-01  1.67e-03  1.27e-01  5.21e-05  4.39e-03  8.09e-01  
  8  +3.0369e-01  +5.1203e-01  2.08e-01  5.50e-04  4.07e-02  3.62e-05  1.69e-03  7.02e-01  
  9  +2.8774e-01  +4.3825e-01  1.51e-01  3.83e-04  2.85e-02  4.08e-05  1.24e-03  4.74e-01  
 10  +2.7082e-01  +3.5201e-01  8.12e-02  2.00e-04  1.50e-02  2.51e-05  6.94e-04  5.29e-01  
 11  +2.6452e-01  +3.2178e-01  5.73e-02  1.38e-04  1.05e-02  1.95e-05  4.96e-04  4.05e-01  
 12  +2.5358e-01  +2.6985e-01  1.63e-02  3.83e-05  2.91e-03  5.70e-06  1.50e-04  7.53e-01  
 13  +2.4937e-01  +2.5080e-01  1.43e-03  3.36e-06  2.55e-04  4.60e-07  1.40e-05  9.24e-01  
 14  +2.4896e-01  +2.4913e-01  1.71e-04  3.97e-07  3.01e-05  6.54e-08  1.70e-06  9.59e-01  
 15  +2.4890e-01  +2.4890e-01  1.86e-06  4.34e-09  3.29e-07  7.11e-10  1.87e-08  9.89e-01  
 16  +2.4890e-01  +2.4890e-01  1.87e-08  4.35e-11  3.29e-09  7.12e-12  1.87e-10  9.90e-01  
 17  +2.4890e-01  +2.4890e-01  1.87e-10  4.36e-13  3.31e-11  7.16e-14  1.88e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.2842ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:58 PM: Optimal value: 2.489e-01
(CVXPY) Oct 06 04:15:58 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:58 PM: Solver (including time spent in interface) took 3.246e-02 seconds
Iteration: 19, Objective: 0.2489
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:58 PM: Your problem has 700 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:58 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 700
  constraints   = 1200
  nnz(P)        = 0
  nnz(A)        = 9585
  cones (total) = 1
    : Nonnegative = 1,  numel = 1200

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +5.0223e+02  5.02e+02  9.59e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.5367e-01  +1.0977e+02  1.09e+02  4.32e-01  2.17e+01  3.83e-03  5.78e-01  5.85e-01  
  2  +5.1165e-01  +1.3649e+01  1.31e+01  1.30e-01  8.65e+00  1.98e-02  2.45e-01  9.90e-01  
  3  +4.9959e-01  +2.9151e+00  2.42e+00  2.50e-02  1.93e+00  4.95e-03  5.69e-02  7.85e-01  
  4  +4.7514e-01  +2.5497e+00  2.07e+00  8.47e-03  6.76e-01  9.48e-03  1.90e-02  7.02e-01  
  5  +4.4518e-01  +2.0411e+00  1.60e+00  4.86e-03  3.84e-01  7.78e-03  1.12e-02  4.87e-01  
  6  +4.2263e-01  +1.8207e+00  1.40e+00  3.82e-03  2.98e-01  4.99e-03  9.07e-03  4.15e-01  
  7  +3.7027e-01  +1.0891e+00  7.19e-01  2.00e-03  1.51e-01  4.43e-05  5.27e-03  8.09e-01  
  8  +3.1439e-01  +5.9816e-01  2.84e-01  7.59e-04  5.61e-02  3.00e-05  2.28e-03  6.19e-01  
  9  +3.0042e-01  +5.2344e-01  2.23e-01  5.83e-04  4.33e-02  3.48e-05  1.82e-03  2.96e-01  
 10  +2.7636e-01  +3.8964e-01  1.13e-01  2.86e-04  2.13e-02  2.24e-05  9.71e-04  5.32e-01  
 11  +2.6684e-01  +3.4148e-01  7.46e-02  1.82e-04  1.37e-02  2.25e-05  6.46e-04  5.62e-01  
 12  +2.5248e-01  +2.7063e-01  1.81e-02  4.32e-05  3.25e-03  7.04e-06  1.68e-04  8.84e-01  
 13  +2.4751e-01  +2.4877e-01  1.25e-03  2.96e-06  2.23e-04  4.23e-07  1.24e-05  9.46e-01  
 14  +2.4711e-01  +2.4714e-01  3.15e-05  7.44e-08  5.59e-06  9.91e-09  3.18e-07  9.76e-01  
 15  +2.4710e-01  +2.4710e-01  3.15e-07  7.44e-10  5.59e-08  9.91e-11  3.18e-09  9.90e-01  
 16  +2.4710e-01  +2.4710e-01  3.16e-09  7.46e-12  5.60e-10  9.93e-13  3.19e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.3489ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:58 PM: Optimal value: 2.471e-01
(CVXPY) Oct 06 04:15:58 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:58 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 20, Objective: 0.2471
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:58 PM: Your problem has 710 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:58 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 710
  constraints   = 1210
  nnz(P)        = 0
  nnz(A)        = 9677
  cones (total) = 1
    : Nonnegative = 1,  numel = 1210

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +5.0222e+02  5.02e+02  9.60e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.5332e-01  +1.0971e+02  1.09e+02  4.32e-01  2.15e+01  3.83e-03  5.77e-01  5.86e-01  
  2  +5.1120e-01  +1.3659e+01  1.31e+01  1.29e-01  8.55e+00  1.98e-02  2.43e-01  9.90e-01  
  3  +4.9897e-01  +2.9617e+00  2.46e+00  2.49e-02  1.92e+00  5.14e-03  5.67e-02  7.84e-01  
  4  +4.7348e-01  +2.5427e+00  2.07e+00  8.39e-03  6.67e-01  9.61e-03  1.89e-02  6.98e-01  
  5  +4.4722e-01  +2.1223e+00  1.68e+00  5.23e-03  4.12e-01  8.36e-03  1.21e-02  4.26e-01  
  6  +4.2271e-01  +1.8669e+00  1.44e+00  3.92e-03  3.06e-01  5.73e-03  9.30e-03  4.15e-01  
  7  +3.7674e-01  +1.1816e+00  8.05e-01  2.28e-03  1.73e-01  5.00e-05  5.95e-03  7.86e-01  
  8  +3.2586e-01  +7.0507e-01  3.79e-01  1.02e-03  7.56e-02  4.52e-05  2.96e-03  5.72e-01  
  9  +2.8818e-01  +4.6522e-01  1.77e-01  4.60e-04  3.38e-02  3.53e-05  1.50e-03  6.02e-01  
 10  +2.7228e-01  +3.7721e-01  1.05e-01  2.66e-04  1.96e-02  2.58e-05  9.20e-04  4.83e-01  
 11  +2.6338e-01  +3.3053e-01  6.72e-02  1.65e-04  1.24e-02  2.04e-05  5.98e-04  4.99e-01  
 12  +2.5118e-01  +2.6893e-01  1.77e-02  4.27e-05  3.19e-03  6.63e-06  1.68e-04  8.55e-01  
 13  +2.4673e-01  +2.4873e-01  2.00e-03  4.77e-06  3.55e-04  6.67e-07  2.02e-05  8.98e-01  
 14  +2.4614e-01  +2.4624e-01  1.05e-04  2.50e-07  1.86e-05  3.88e-08  1.10e-06  9.90e-01  
 15  +2.4610e-01  +2.4610e-01  1.07e-06  2.56e-09  1.90e-07  3.97e-10  1.13e-08  9.90e-01  
 16  +2.4610e-01  +2.4610e-01  1.08e-08  2.57e-11  1.91e-09  3.98e-12  1.13e-10  9.90e-01  
 17  +2.4610e-01  +2.4610e-01  1.08e-10  2.58e-13  1.92e-11  4.01e-14  1.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.1661ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:58 PM: Optimal value: 2.461e-01
(CVXPY) Oct 06 04:15:58 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:58 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 21, Objective: 0.2461
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:59 PM: Your problem has 720 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:59 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 720
  constraints   = 1220
  nnz(P)        = 0
  nnz(A)        = 9743
  cones (total) = 1
    : Nonnegative = 1,  numel = 1220

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +5.0215e+02  5.02e+02  9.60e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.5264e-01  +1.0972e+02  1.09e+02  4.32e-01  2.14e+01  3.83e-03  5.77e-01  5.86e-01  
  2  +5.1065e-01  +1.3690e+01  1.32e+01  1.29e-01  8.49e+00  1.98e-02  2.43e-01  9.90e-01  
  3  +4.9837e-01  +2.9719e+00  2.47e+00  2.46e-02  1.89e+00  5.25e-03  5.60e-02  7.87e-01  
  4  +4.7189e-01  +2.5184e+00  2.05e+00  8.24e-03  6.52e-01  9.65e-03  1.86e-02  6.96e-01  
  5  +4.4852e-01  +2.1960e+00  1.75e+00  5.52e-03  4.34e-01  8.79e-03  1.27e-02  3.81e-01  
  6  +4.2184e-01  +1.8852e+00  1.46e+00  3.97e-03  3.08e-01  6.26e-03  9.41e-03  4.06e-01  
  7  +3.7834e-01  +1.2162e+00  8.38e-01  2.42e-03  1.82e-01  5.37e-05  6.31e-03  7.68e-01  
  8  +3.2674e-01  +7.1437e-01  3.88e-01  1.05e-03  7.77e-02  4.51e-05  3.05e-03  5.81e-01  
  9  +2.8852e-01  +4.6738e-01  1.79e-01  4.70e-04  3.44e-02  3.44e-05  1.53e-03  6.02e-01  
 10  +2.7343e-01  +3.8354e-01  1.10e-01  2.83e-04  2.07e-02  2.58e-05  9.72e-04  4.54e-01  
 11  +2.6266e-01  +3.2657e-01  6.39e-02  1.59e-04  1.18e-02  1.95e-05  5.75e-04  5.72e-01  
 12  +2.5125e-01  +2.6899e-01  1.77e-02  4.29e-05  3.19e-03  6.78e-06  1.69e-04  8.64e-01  
 13  +2.4668e-01  +2.4847e-01  1.79e-03  4.30e-06  3.19e-04  5.96e-07  1.83e-05  9.11e-01  
 14  +2.4614e-01  +2.4624e-01  1.02e-04  2.43e-07  1.80e-05  3.79e-08  1.07e-06  9.90e-01  
 15  +2.4610e-01  +2.4610e-01  1.04e-06  2.48e-09  1.84e-07  3.86e-10  1.10e-08  9.90e-01  
 16  +2.4610e-01  +2.4610e-01  1.04e-08  2.49e-11  1.85e-09  3.88e-12  1.10e-10  9.90e-01  
 17  +2.4610e-01  +2.4610e-01  1.05e-10  2.50e-13  1.86e-11  3.90e-14  1.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 31.7211ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:59 PM: Optimal value: 2.461e-01
(CVXPY) Oct 06 04:15:59 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:59 PM: Solver (including time spent in interface) took 4.679e-02 seconds
Iteration: 22, Objective: 0.2461
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:59 PM: Your problem has 730 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:59 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 730
  constraints   = 1230
  nnz(P)        = 0
  nnz(A)        = 9837
  cones (total) = 1
    : Nonnegative = 1,  numel = 1230

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +5.0221e+02  5.02e+02  9.60e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.5167e-01  +1.0981e+02  1.09e+02  4.32e-01  2.13e+01  3.84e-03  5.76e-01  5.86e-01  
  2  +5.0988e-01  +1.3709e+01  1.32e+01  1.28e-01  8.41e+00  1.99e-02  2.43e-01  9.90e-01  
  3  +4.9723e-01  +2.8622e+00  2.37e+00  2.29e-02  1.76e+00  5.25e-03  5.24e-02  8.04e-01  
  4  +4.7001e-01  +2.4318e+00  1.96e+00  7.99e-03  6.30e-01  9.35e-03  1.81e-02  6.84e-01  
  5  +4.4691e-01  +2.1569e+00  1.71e+00  5.37e-03  4.21e-01  9.01e-03  1.24e-02  3.71e-01  
  6  +4.2112e-01  +1.8858e+00  1.46e+00  4.05e-03  3.13e-01  5.87e-03  9.62e-03  4.22e-01  
  7  +3.7822e-01  +1.2425e+00  8.64e-01  2.54e-03  1.91e-01  5.04e-05  6.64e-03  7.77e-01  
  8  +3.2500e-01  +7.1110e-01  3.86e-01  1.06e-03  7.80e-02  4.10e-05  3.08e-03  5.94e-01  
  9  +2.8830e-01  +4.7582e-01  1.88e-01  5.00e-04  3.66e-02  3.40e-05  1.62e-03  5.78e-01  
 10  +2.7331e-01  +3.9103e-01  1.18e-01  3.08e-04  2.26e-02  2.65e-05  1.05e-03  4.44e-01  
 11  +2.6022e-01  +3.2098e-01  6.08e-02  1.53e-04  1.14e-02  1.85e-05  5.57e-04  6.35e-01  
 12  +2.5033e-01  +2.7170e-01  2.14e-02  5.24e-05  3.93e-03  7.83e-06  2.05e-04  8.01e-01  
 13  +2.4502e-01  +2.4760e-01  2.58e-03  6.23e-06  4.68e-04  8.73e-07  2.64e-05  9.13e-01  
 14  +2.4424e-01  +2.4434e-01  1.03e-04  2.47e-07  1.85e-05  3.51e-08  1.09e-06  9.85e-01  
 15  +2.4420e-01  +2.4420e-01  1.05e-06  2.53e-09  1.89e-07  3.59e-10  1.12e-08  9.90e-01  
 16  +2.4420e-01  +2.4420e-01  1.05e-08  2.53e-11  1.89e-09  3.59e-12  1.12e-10  9.90e-01  
 17  +2.4420e-01  +2.4420e-01  1.06e-10  2.54e-13  1.90e-11  3.62e-14  1.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.738ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:59 PM: Optimal value: 2.442e-01
(CVXPY) Oct 06 04:15:59 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:59 PM: Solver (including time spent in interface) took 3.138e-02 seconds
Iteration: 23, Objective: 0.2442
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:59 PM: Your problem has 740 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:59 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 740
  constraints   = 1240
  nnz(P)        = 0
  nnz(A)        = 9896
  cones (total) = 1
    : Nonnegative = 1,  numel = 1240

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0218e+02  5.02e+02  9.60e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.5066e-01  +1.0982e+02  1.09e+02  4.32e-01  2.11e+01  3.84e-03  5.76e-01  5.86e-01  
  2  +5.0883e-01  +1.3759e+01  1.32e+01  1.28e-01  8.35e+00  1.99e-02  2.42e-01  9.90e-01  
  3  +4.9585e-01  +2.9818e+00  2.49e+00  2.33e-02  1.78e+00  5.64e-03  5.31e-02  8.01e-01  
  4  +4.6594e-01  +2.4244e+00  1.96e+00  7.90e-03  6.20e-01  9.47e-03  1.80e-02  6.86e-01  
  5  +4.4245e-01  +2.1645e+00  1.72e+00  5.40e-03  4.21e-01  8.89e-03  1.25e-02  3.79e-01  
  6  +4.1650e-01  +1.8956e+00  1.48e+00  4.09e-03  3.15e-01  5.69e-03  9.78e-03  4.29e-01  
  7  +3.7487e-01  +1.2497e+00  8.75e-01  2.59e-03  1.93e-01  4.87e-05  6.79e-03  7.88e-01  
  8  +3.2135e-01  +6.9847e-01  3.77e-01  1.04e-03  7.61e-02  3.47e-05  3.04e-03  5.97e-01  
  9  +2.8503e-01  +4.6195e-01  1.77e-01  4.77e-04  3.47e-02  3.25e-05  1.56e-03  6.06e-01  
 10  +2.6615e-01  +3.5307e-01  8.69e-02  2.29e-04  1.67e-02  2.37e-05  7.99e-04  6.41e-01  
 11  +2.6239e-01  +3.3380e-01  7.14e-02  1.84e-04  1.37e-02  2.23e-05  6.53e-04  3.41e-01  
 12  +2.5087e-01  +2.7560e-01  2.47e-02  6.18e-05  4.64e-03  8.39e-06  2.36e-04  7.17e-01  
 13  +2.4584e-01  +2.5159e-01  5.75e-03  1.42e-05  1.06e-03  1.96e-06  5.79e-05  8.11e-01  
 14  +2.4466e-01  +2.4643e-01  1.77e-03  4.31e-06  3.23e-04  6.24e-07  1.83e-05  7.52e-01  
 15  +2.4418e-01  +2.4440e-01  2.23e-04  5.40e-07  4.04e-05  8.46e-08  2.35e-06  9.71e-01  
 16  +2.4410e-01  +2.4410e-01  2.53e-06  6.12e-09  4.58e-07  9.55e-10  2.67e-08  9.89e-01  
 17  +2.4410e-01  +2.4410e-01  2.54e-08  6.15e-11  4.60e-09  9.59e-12  2.68e-10  9.90e-01  
 18  +2.4410e-01  +2.4410e-01  2.56e-10  6.18e-13  4.63e-11  9.66e-14  2.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.1204ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:59 PM: Optimal value: 2.441e-01
(CVXPY) Oct 06 04:15:59 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:59 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 24, Objective: 0.2441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:59 PM: Your problem has 741 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:59 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 741
  constraints   = 1241
  nnz(P)        = 0
  nnz(A)        = 9909
  cones (total) = 1
    : Nonnegative = 1,  numel = 1241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0218e+02  5.02e+02  9.60e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.5061e-01  +1.0981e+02  1.09e+02  4.32e-01  2.11e+01  3.84e-03  5.76e-01  5.86e-01  
  2  +5.0877e-01  +1.3761e+01  1.33e+01  1.28e-01  8.34e+00  1.99e-02  2.42e-01  9.90e-01  
  3  +4.9574e-01  +2.9620e+00  2.47e+00  2.30e-02  1.76e+00  5.64e-03  5.26e-02  8.02e-01  
  4  +4.6596e-01  +2.4168e+00  1.95e+00  7.89e-03  6.18e-01  9.43e-03  1.80e-02  6.83e-01  
  5  +4.4326e-01  +2.1688e+00  1.73e+00  5.47e-03  4.26e-01  8.91e-03  1.27e-02  3.67e-01  
  6  +4.1641e-01  +1.8891e+00  1.47e+00  4.06e-03  3.13e-01  5.88e-03  9.72e-03  4.28e-01  
  7  +3.7576e-01  +1.2572e+00  8.81e-01  2.63e-03  1.96e-01  4.99e-05  6.88e-03  7.77e-01  
  8  +3.2106e-01  +6.9332e-01  3.72e-01  1.03e-03  7.51e-02  3.36e-05  3.00e-03  6.06e-01  
  9  +2.8505e-01  +4.6235e-01  1.77e-01  4.78e-04  3.48e-02  3.29e-05  1.56e-03  6.04e-01  
 10  +2.6605e-01  +3.5269e-01  8.66e-02  2.28e-04  1.67e-02  2.35e-05  7.96e-04  6.38e-01  
 11  +2.6231e-01  +3.3343e-01  7.11e-02  1.83e-04  1.36e-02  2.22e-05  6.51e-04  3.43e-01  
 12  +2.5030e-01  +2.7275e-01  2.25e-02  5.60e-05  4.20e-03  7.68e-06  2.15e-04  7.50e-01  
 13  +2.4556e-01  +2.5022e-01  4.66e-03  1.15e-05  8.62e-04  1.62e-06  4.72e-05  8.50e-01  
 14  +2.4459e-01  +2.4609e-01  1.50e-03  3.65e-06  2.74e-04  5.52e-07  1.56e-05  7.77e-01  
 15  +2.4414e-01  +2.4425e-01  1.12e-04  2.71e-07  2.03e-05  4.30e-08  1.18e-06  9.90e-01  
 16  +2.4410e-01  +2.4410e-01  1.15e-06  2.78e-09  2.08e-07  4.41e-10  1.22e-08  9.90e-01  
 17  +2.4410e-01  +2.4410e-01  1.15e-08  2.79e-11  2.09e-09  4.42e-12  1.22e-10  9.90e-01  
 18  +2.4410e-01  +2.4410e-01  1.16e-10  2.81e-13  2.10e-11  4.45e-14  1.23e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.7166ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:59 PM: Optimal value: 2.441e-01
(CVXPY) Oct 06 04:15:59 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:59 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 25, Objective: 0.2441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:00 PM: Your problem has 742 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:00 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 742
  constraints   = 1242
  nnz(P)        = 0
  nnz(A)        = 9971
  cones (total) = 1
    : Nonnegative = 1,  numel = 1242

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0218e+02  5.02e+02  9.60e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.5060e-01  +1.0980e+02  1.09e+02  4.32e-01  2.11e+01  3.84e-03  5.75e-01  5.86e-01  
  2  +5.0868e-01  +1.3765e+01  1.33e+01  1.27e-01  8.34e+00  1.99e-02  2.41e-01  9.90e-01  
  3  +4.9552e-01  +2.9278e+00  2.43e+00  2.26e-02  1.73e+00  5.62e-03  5.16e-02  8.06e-01  
  4  +4.6561e-01  +2.3936e+00  1.93e+00  7.78e-03  6.10e-01  9.39e-03  1.78e-02  6.81e-01  
  5  +4.4114e-01  +2.1285e+00  1.69e+00  5.30e-03  4.13e-01  8.76e-03  1.23e-02  3.82e-01  
  6  +4.1442e-01  +1.8474e+00  1.43e+00  3.86e-03  2.98e-01  6.69e-03  9.22e-03  3.67e-01  
  7  +3.7366e-01  +1.2260e+00  8.52e-01  2.54e-03  1.90e-01  5.52e-05  6.68e-03  7.50e-01  
  8  +3.1694e-01  +6.5363e-01  3.37e-01  9.28e-04  6.78e-02  3.23e-05  2.74e-03  6.32e-01  
  9  +2.9216e-01  +5.0564e-01  2.13e-01  5.77e-04  4.22e-02  3.53e-05  1.83e-03  4.46e-01  
 10  +2.6858e-01  +3.6642e-01  9.78e-02  2.58e-04  1.89e-02  2.30e-05  8.91e-04  6.22e-01  
 11  +2.6336e-01  +3.3924e-01  7.59e-02  1.95e-04  1.45e-02  2.21e-05  6.87e-04  4.07e-01  
 12  +2.5054e-01  +2.7384e-01  2.33e-02  5.81e-05  4.37e-03  8.03e-06  2.21e-04  7.86e-01  
 13  +2.4567e-01  +2.5073e-01  5.07e-03  1.25e-05  9.39e-04  1.78e-06  5.05e-05  8.36e-01  
 14  +2.4460e-01  +2.4612e-01  1.52e-03  3.72e-06  2.79e-04  5.55e-07  1.57e-05  7.82e-01  
 15  +2.4415e-01  +2.4429e-01  1.40e-04  3.39e-07  2.54e-05  5.37e-08  1.47e-06  9.90e-01  
 16  +2.4410e-01  +2.4410e-01  1.49e-06  3.61e-09  2.70e-07  5.70e-10  1.58e-08  9.89e-01  
 17  +2.4410e-01  +2.4410e-01  1.50e-08  3.62e-11  2.71e-09  5.73e-12  1.58e-10  9.90e-01  
 18  +2.4410e-01  +2.4410e-01  1.51e-10  3.65e-13  2.73e-11  5.78e-14  1.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.3083ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:00 PM: Optimal value: 2.441e-01
(CVXPY) Oct 06 04:16:00 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:00 PM: Solver (including time spent in interface) took 3.126e-02 seconds
Iteration: 26, Objective: 0.2441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:00 PM: Your problem has 743 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 743
  constraints   = 1243
  nnz(P)        = 0
  nnz(A)        = 10041
  cones (total) = 1
    : Nonnegative = 1,  numel = 1243

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0219e+02  5.02e+02  9.60e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.5076e-01  +1.0973e+02  1.09e+02  4.32e-01  2.11e+01  3.84e-03  5.74e-01  5.86e-01  
  2  +5.0862e-01  +1.3738e+01  1.32e+01  1.27e-01  8.32e+00  1.99e-02  2.41e-01  9.90e-01  
  3  +4.9536e-01  +2.8946e+00  2.40e+00  2.22e-02  1.70e+00  5.58e-03  5.08e-02  8.10e-01  
  4  +4.6533e-01  +2.3718e+00  1.91e+00  7.69e-03  6.03e-01  9.33e-03  1.76e-02  6.80e-01  
  5  +4.3932e-01  +2.0988e+00  1.66e+00  5.15e-03  4.01e-01  8.67e-03  1.20e-02  3.98e-01  
  6  +4.1316e-01  +1.8256e+00  1.41e+00  3.76e-03  2.91e-01  7.02e-03  8.98e-03  3.33e-01  
  7  +3.7214e-01  +1.2091e+00  8.37e-01  2.49e-03  1.86e-01  5.71e-05  6.58e-03  7.41e-01  
  8  +3.1308e-01  +6.1843e-01  3.05e-01  8.40e-04  6.14e-02  3.13e-05  2.50e-03  6.64e-01  
  9  +2.9705e-01  +5.2991e-01  2.33e-01  6.30e-04  4.62e-02  3.63e-05  1.96e-03  3.17e-01  
 10  +2.7127e-01  +3.8006e-01  1.09e-01  2.88e-04  2.11e-02  2.34e-05  9.81e-04  5.92e-01  
 11  +2.6279e-01  +3.3589e-01  7.31e-02  1.88e-04  1.40e-02  2.15e-05  6.60e-04  5.25e-01  
 12  +2.4997e-01  +2.7065e-01  2.07e-02  5.15e-05  3.88e-03  7.72e-06  1.96e-04  8.49e-01  
 13  +2.4549e-01  +2.4979e-01  4.30e-03  1.06e-05  7.98e-04  1.61e-06  4.30e-05  8.75e-01  
 14  +2.4470e-01  +2.4651e-01  1.81e-03  4.40e-06  3.31e-04  6.94e-07  1.85e-05  6.95e-01  
 15  +2.4416e-01  +2.4432e-01  1.64e-04  3.98e-07  2.99e-05  6.25e-08  1.73e-06  9.62e-01  
 16  +2.4410e-01  +2.4410e-01  1.73e-06  4.19e-09  3.14e-07  6.54e-10  1.83e-08  9.89e-01  
 17  +2.4410e-01  +2.4410e-01  1.73e-08  4.20e-11  3.15e-09  6.55e-12  1.83e-10  9.90e-01  
 18  +2.4410e-01  +2.4410e-01  1.75e-10  4.23e-13  3.17e-11  6.61e-14  1.85e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.0416ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:00 PM: Optimal value: 2.441e-01
(CVXPY) Oct 06 04:16:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:16:00 PM: Solver (including time spent in interface) took 4.635e-02 seconds
Iteration: 27, Objective: 0.2441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:00 PM: Your problem has 746 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:00 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 746
  constraints   = 1246
  nnz(P)        = 0
  nnz(A)        = 10070
  cones (total) = 1
    : Nonnegative = 1,  numel = 1246

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0217e+02  5.02e+02  9.60e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.5031e-01  +1.0974e+02  1.09e+02  4.31e-01  2.11e+01  3.85e-03  5.74e-01  5.87e-01  
  2  +5.0811e-01  +1.3744e+01  1.32e+01  1.27e-01  8.29e+00  1.99e-02  2.40e-01  9.90e-01  
  3  +4.9474e-01  +2.9349e+00  2.44e+00  2.23e-02  1.70e+00  5.73e-03  5.10e-02  8.07e-01  
  4  +4.6356e-01  +2.3667e+00  1.90e+00  7.64e-03  5.98e-01  9.34e-03  1.75e-02  6.84e-01  
  5  +4.3698e-01  +2.1022e+00  1.67e+00  5.15e-03  4.00e-01  8.61e-03  1.20e-02  4.00e-01  
  6  +4.1097e-01  +1.8412e+00  1.43e+00  3.82e-03  2.94e-01  6.82e-03  9.15e-03  3.41e-01  
  7  +3.7163e-01  +1.2265e+00  8.55e-01  2.57e-03  1.91e-01  5.52e-05  6.78e-03  7.48e-01  
  8  +3.1038e-01  +6.0014e-01  2.90e-01  7.97e-04  5.80e-02  2.89e-05  2.38e-03  6.91e-01  
  9  +2.9764e-01  +5.3405e-01  2.36e-01  6.41e-04  4.69e-02  3.52e-05  1.98e-03  2.66e-01  
 10  +2.7232e-01  +3.9015e-01  1.18e-01  3.13e-04  2.29e-02  2.39e-05  1.06e-03  5.53e-01  
 11  +2.6079e-01  +3.2942e-01  6.86e-02  1.76e-04  1.31e-02  2.07e-05  6.24e-04  6.17e-01  
 12  +2.4856e-01  +2.6676e-01  1.82e-02  4.55e-05  3.41e-03  7.34e-06  1.74e-04  9.07e-01  
 13  +2.4631e-01  +2.5642e-01  1.01e-02  2.49e-05  1.88e-03  4.19e-06  9.86e-05  6.33e-01  
 14  +2.4408e-01  +2.4701e-01  2.92e-03  7.05e-06  5.35e-04  1.19e-06  2.94e-05  7.85e-01  
 15  +2.4332e-01  +2.4397e-01  6.47e-04  1.54e-06  1.17e-04  2.58e-07  6.68e-06  8.39e-01  
 16  +2.4311e-01  +2.4313e-01  2.27e-05  5.40e-08  4.10e-06  8.86e-09  2.37e-07  9.90e-01  
 17  +2.4310e-01  +2.4310e-01  2.27e-07  5.40e-10  4.10e-08  8.87e-11  2.37e-09  9.90e-01  
 18  +2.4310e-01  +2.4310e-01  2.27e-09  5.40e-12  4.10e-10  8.89e-13  2.38e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.0437ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:00 PM: Optimal value: 2.431e-01
(CVXPY) Oct 06 04:16:00 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:00 PM: Solver (including time spent in interface) took 3.125e-02 seconds
FULL MODEL:
  Accruacy: 0.728
  Our objective: 0.456

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.218)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.018)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.004)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.012)
 OR (x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.022)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 11.513795614242554
Best over terms:
  Our final objective: 0.218
    Its accruacy: 0.609
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.218
  Highest accruacy: 0.609
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

