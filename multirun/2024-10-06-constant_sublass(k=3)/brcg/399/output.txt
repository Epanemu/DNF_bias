Command:
python test_script.py -s constant_subclass -d 10 -n 50000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14611999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 10.

Computed total variation: 0.18975999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:30 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:30 PM: Finished problem compilation (took 2.819e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 325021
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.73e+02  1.00e+00  1.00e+00   ------   
  1  +5.7827e-01  +5.4921e+03  5.49e+03  4.48e-01  1.81e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2954e-01  +6.0158e+02  6.01e+02  1.86e-01  9.70e+01  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0862e-01  +1.5671e+02  1.56e+02  1.52e-01  8.04e+01  5.04e-05  2.66e-01  3.26e-01  
  4  +5.0144e-01  +1.8709e+01  1.82e+01  4.96e-02  2.61e+01  5.56e-06  1.97e-01  4.50e-01  
  5  +5.0002e-01  +1.4480e+00  9.48e-01  2.83e-03  1.54e+00  2.39e-05  1.94e-01  1.51e-01  
  6  +5.0001e-01  +8.5234e-01  3.52e-01  1.05e-03  5.74e-01  8.70e-06  8.24e-02  6.82e-01  
  7  +4.9999e-01  +6.6624e-01  1.66e-01  4.95e-04  2.70e-01  8.93e-06  2.12e-02  7.75e-01  
  8  +4.9909e-01  +7.2645e-01  2.27e-01  1.67e-04  9.17e-02  4.05e-04  5.47e-04  9.82e-01  
  9  +4.8685e-01  +6.6980e-01  1.83e-01  1.05e-05  5.76e-03  5.30e-03  3.14e-05  9.43e-01  
 10  +4.8553e-01  +6.4699e-01  1.61e-01  9.29e-06  5.10e-03  3.79e-03  2.81e-05  2.20e-01  
 11  +4.8520e-01  +6.2657e-01  1.41e-01  8.71e-06  4.78e-03  2.17e-03  2.66e-05  2.55e-01  
 12  +4.8593e-01  +6.0453e-01  1.19e-01  7.94e-06  4.36e-03  2.02e-05  2.43e-05  7.45e-01  
 13  +4.7771e-01  +5.5461e-01  7.69e-02  4.58e-06  2.51e-03  2.19e-07  1.45e-05  8.81e-01  
 14  +4.6090e-01  +4.6770e-01  6.79e-03  3.45e-07  1.89e-04  2.09e-08  1.17e-06  9.55e-01  
 15  +4.5887e-01  +4.5974e-01  8.68e-04  4.00e-08  2.19e-05  4.79e-09  1.51e-07  9.22e-01  
 16  +4.5855e-01  +4.5858e-01  2.81e-05  1.17e-09  6.40e-07  1.91e-10  4.90e-09  9.79e-01  
 17  +4.5854e-01  +4.5854e-01  2.81e-07  1.17e-11  6.39e-09  1.91e-12  4.90e-11  9.90e-01  
 18  +4.5854e-01  +4.5854e-01  2.88e-09  1.20e-13  6.56e-11  4.41e-14  1.08e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 780.5452ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:31 PM: Optimal value: 4.585e-01
(CVXPY) Oct 06 04:34:31 PM: Compilation took 2.819e-01 seconds
(CVXPY) Oct 06 04:34:31 PM: Solver (including time spent in interface) took 8.566e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4585
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:31 PM: Your problem has 25031 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:31 PM: Finished problem compilation (took 2.503e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25031
  constraints   = 50031
  nnz(P)        = 0
  nnz(A)        = 368234
  cones (total) = 1
    : Nonnegative = 1,  numel = 50031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7826e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2951e-01  +6.0133e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.52e-01  
  3  +5.0861e-01  +1.5656e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.66e-01  3.27e-01  
  4  +5.0144e-01  +1.8603e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0002e-01  +1.4612e+00  9.61e-01  2.87e-03  1.61e+00  2.68e-05  1.92e-01  1.95e-01  
  6  +5.0000e-01  +8.6740e-01  3.67e-01  1.10e-03  6.17e-01  1.07e-05  8.00e-02  6.08e-01  
  7  +5.0000e-01  +8.4744e-01  3.47e-01  1.04e-03  5.83e-01  1.10e-05  4.75e-02  6.16e-01  
  8  +4.9998e-01  +7.8429e-01  2.84e-01  8.33e-04  4.69e-01  1.82e-05  1.28e-02  9.04e-01  
  9  +4.9879e-01  +7.0725e-01  2.08e-01  9.49e-05  5.39e-02  5.32e-04  2.74e-04  9.81e-01  
 10  +4.8907e-01  +6.6667e-01  1.78e-01  9.93e-06  5.65e-03  4.27e-03  2.73e-05  9.01e-01  
 11  +4.9001e-01  +6.7378e-01  1.84e-01  9.25e-06  5.26e-03  4.25e-03  2.52e-05  2.11e-01  
 12  +4.9016e-01  +6.6878e-01  1.79e-01  9.18e-06  5.22e-03  3.56e-03  2.49e-05  1.17e-01  
 13  +4.9014e-01  +6.6851e-01  1.78e-01  8.43e-06  4.79e-03  3.21e-03  2.28e-05  2.30e-01  
 14  +4.9004e-01  +6.6738e-01  1.77e-01  8.40e-06  4.78e-03  3.07e-03  2.28e-05  3.35e-02  
 15  +4.8832e-01  +6.5846e-01  1.70e-01  7.49e-06  4.26e-03  2.54e-03  2.04e-05  2.59e-01  
 16  +4.8391e-01  +6.3015e-01  1.46e-01  6.27e-06  3.56e-03  4.60e-04  1.73e-05  7.07e-01  
 17  +4.6587e-01  +5.6205e-01  9.62e-02  3.39e-06  1.92e-03  2.09e-04  9.70e-06  6.09e-01  
 18  +4.4360e-01  +4.8247e-01  3.89e-02  1.29e-06  7.28e-04  5.11e-05  3.91e-06  6.63e-01  
 19  +4.2823e-01  +4.3076e-01  2.53e-03  7.99e-08  4.51e-05  5.16e-07  2.52e-07  9.66e-01  
 20  +4.2705e-01  +4.2708e-01  2.56e-05  8.07e-10  4.56e-07  5.16e-09  2.56e-09  9.90e-01  
 21  +4.2704e-01  +4.2704e-01  2.57e-07  8.07e-12  4.56e-09  5.30e-11  2.63e-11  9.90e-01  
 22  +4.2704e-01  +4.2704e-01  2.57e-09  8.07e-14  4.56e-11  5.45e-13  2.70e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0814881s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:32 PM: Optimal value: 4.270e-01
(CVXPY) Oct 06 04:34:32 PM: Compilation took 2.503e-01 seconds
(CVXPY) Oct 06 04:34:32 PM: Solver (including time spent in interface) took 1.142e+00 seconds
Iteration: 2, Objective: 0.4270
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:33 PM: Your problem has 25041 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:33 PM: Finished problem compilation (took 2.659e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25041
  constraints   = 50041
  nnz(P)        = 0
  nnz(A)        = 369973
  cones (total) = 1
    : Nonnegative = 1,  numel = 50041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7825e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2950e-01  +6.0124e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0861e-01  +1.5653e+02  1.56e+02  1.52e-01  8.29e+01  5.05e-05  2.65e-01  3.27e-01  
  4  +5.0144e-01  +1.8604e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0002e-01  +1.5210e+00  1.02e+00  3.05e-03  1.71e+00  2.68e-05  1.92e-01  1.84e-01  
  6  +5.0001e-01  +8.6445e-01  3.64e-01  1.09e-03  6.12e-01  9.92e-06  7.81e-02  6.13e-01  
  7  +5.0000e-01  +8.4834e-01  3.48e-01  1.04e-03  5.85e-01  1.04e-05  5.02e-02  5.27e-01  
  8  +4.9999e-01  +8.4579e-01  3.46e-01  1.01e-03  5.71e-01  1.51e-05  1.56e-02  9.90e-01  
  9  +4.9945e-01  +7.2413e-01  2.25e-01  1.68e-04  9.55e-02  2.47e-04  5.03e-04  9.72e-01  
 10  +4.9086e-01  +6.8869e-01  1.98e-01  1.03e-05  5.88e-03  3.73e-03  2.82e-05  9.44e-01  
 11  +4.9181e-01  +6.9352e-01  2.02e-01  9.75e-06  5.55e-03  3.60e-03  2.64e-05  1.85e-01  
 12  +4.9275e-01  +6.8816e-01  1.95e-01  9.53e-06  5.42e-03  2.52e-03  2.57e-05  2.65e-01  
 13  +4.9276e-01  +6.8739e-01  1.95e-01  9.48e-06  5.40e-03  2.43e-03  2.55e-05  3.41e-02  
 14  +4.9213e-01  +6.8160e-01  1.89e-01  8.92e-06  5.07e-03  2.10e-03  2.40e-05  1.79e-01  
 15  +4.9136e-01  +6.7672e-01  1.85e-01  8.45e-06  4.81e-03  1.89e-03  2.28e-05  1.39e-01  
 16  +4.9032e-01  +6.6834e-01  1.78e-01  8.16e-06  4.64e-03  1.42e-03  2.21e-05  2.01e-01  
 17  +4.8368e-01  +6.3906e-01  1.55e-01  6.26e-06  3.56e-03  1.07e-03  1.72e-05  3.68e-01  
 18  +4.6481e-01  +5.5969e-01  9.49e-02  3.52e-06  2.00e-03  1.10e-04  1.02e-05  7.52e-01  
 19  +4.4108e-01  +4.7523e-01  3.41e-02  1.14e-06  6.44e-04  7.26e-06  3.49e-06  8.43e-01  
 20  +4.4016e-01  +4.7218e-01  3.20e-02  1.06e-06  5.99e-04  6.48e-06  3.25e-06  1.17e-01  
 21  +4.3828e-01  +4.6552e-01  2.72e-02  8.73e-07  4.93e-04  1.88e-06  2.68e-06  7.78e-01  
 22  +4.3185e-01  +4.4458e-01  1.27e-02  4.05e-07  2.29e-04  7.59e-07  1.27e-06  6.11e-01  
 23  +4.2661e-01  +4.2760e-01  9.92e-04  3.15e-08  1.78e-05  5.10e-08  1.00e-07  9.33e-01  
 24  +4.2617e-01  +4.2618e-01  1.40e-05  4.45e-10  2.52e-07  6.60e-10  1.42e-09  9.87e-01  
 25  +4.2616e-01  +4.2616e-01  1.40e-07  4.45e-12  2.52e-09  6.60e-12  1.42e-11  9.90e-01  
 26  +4.2616e-01  +4.2616e-01  1.40e-09  4.47e-14  2.52e-11  6.63e-14  1.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2913107s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:34 PM: Optimal value: 4.262e-01
(CVXPY) Oct 06 04:34:34 PM: Compilation took 2.659e-01 seconds
(CVXPY) Oct 06 04:34:34 PM: Solver (including time spent in interface) took 1.361e+00 seconds
Iteration: 3, Objective: 0.4262
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:35 PM: Your problem has 25051 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:35 PM: Finished problem compilation (took 2.500e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25051
  constraints   = 50051
  nnz(P)        = 0
  nnz(A)        = 372300
  cones (total) = 1
    : Nonnegative = 1,  numel = 50051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7825e-01  +5.4924e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2950e-01  +6.0119e+02  6.01e+02  1.87e-01  1.00e+02  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5651e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8601e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0001e-01  +1.3824e+00  8.82e-01  2.63e-03  1.48e+00  2.70e-05  1.91e-01  2.15e-01  
  6  +5.0000e-01  +9.9119e-01  4.91e-01  1.47e-03  8.24e-01  1.52e-05  1.05e-01  5.20e-01  
  7  +5.0000e-01  +9.1360e-01  4.14e-01  1.23e-03  6.94e-01  1.34e-05  6.92e-02  4.81e-01  
  8  +5.0000e-01  +8.4260e-01  3.43e-01  1.01e-03  5.71e-01  1.36e-05  2.28e-02  9.90e-01  
  9  +4.9977e-01  +7.2768e-01  2.28e-01  3.89e-04  2.20e-01  1.08e-04  1.46e-03  9.45e-01  
 10  +4.9578e-01  +7.1298e-01  2.17e-01  2.92e-05  1.66e-02  1.80e-03  8.07e-05  9.45e-01  
 11  +4.9506e-01  +7.0948e-01  2.14e-01  2.41e-05  1.37e-02  2.01e-03  6.64e-05  2.24e-01  
 12  +4.9535e-01  +7.0658e-01  2.11e-01  2.40e-05  1.37e-02  1.80e-03  6.61e-05  8.23e-02  
 13  +4.9429e-01  +7.0134e-01  2.07e-01  1.91e-05  1.09e-02  2.02e-03  5.24e-05  2.63e-01  
 14  +4.9496e-01  +6.9764e-01  2.03e-01  1.85e-05  1.06e-02  1.61e-03  5.05e-05  2.16e-01  
 15  +4.9384e-01  +6.8853e-01  1.95e-01  1.42e-05  8.07e-03  1.56e-03  3.86e-05  4.06e-01  
 16  +4.9390e-01  +6.8808e-01  1.94e-01  1.41e-05  8.05e-03  1.51e-03  3.84e-05  3.51e-02  
 17  +4.9139e-01  +6.7320e-01  1.82e-01  1.03e-05  5.85e-03  1.36e-03  2.80e-05  4.76e-01  
 18  +4.9116e-01  +6.6924e-01  1.78e-01  9.99e-06  5.68e-03  1.05e-03  2.72e-05  2.09e-01  
 19  +4.8759e-01  +6.5264e-01  1.65e-01  8.06e-06  4.58e-03  8.24e-04  2.21e-05  3.78e-01  
 20  +4.6833e-01  +5.7279e-01  1.04e-01  3.74e-06  2.12e-03  2.00e-04  1.07e-05  8.71e-01  
 21  +4.5385e-01  +5.2179e-01  6.79e-02  2.39e-06  1.35e-03  7.56e-05  7.09e-06  5.13e-01  
 22  +4.4225e-01  +4.8196e-01  3.97e-02  1.34e-06  7.57e-04  3.76e-05  4.10e-06  4.76e-01  
 23  +4.4088e-01  +4.7724e-01  3.64e-02  1.21e-06  6.85e-04  2.93e-05  3.72e-06  2.33e-01  
 24  +4.3214e-01  +4.4761e-01  1.55e-02  4.97e-07  2.81e-04  1.73e-06  1.56e-06  9.47e-01  
 25  +4.2636e-01  +4.2865e-01  2.30e-03  7.36e-08  4.15e-05  1.83e-07  2.36e-07  8.98e-01  
 26  +4.2541e-01  +4.2559e-01  1.86e-04  5.96e-09  3.37e-06  7.59e-09  1.92e-08  9.68e-01  
 27  +4.2532e-01  +4.2532e-01  1.91e-06  6.11e-11  3.45e-08  7.77e-11  1.97e-10  9.90e-01  
 28  +4.2532e-01  +4.2532e-01  1.91e-08  6.11e-13  3.45e-10  7.77e-13  1.97e-12  9.90e-01  
 29  +4.2532e-01  +4.2532e-01  1.91e-10  6.07e-15  3.45e-12  7.77e-15  1.97e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4243108s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:36 PM: Optimal value: 4.253e-01
(CVXPY) Oct 06 04:34:36 PM: Compilation took 2.500e-01 seconds
(CVXPY) Oct 06 04:34:36 PM: Solver (including time spent in interface) took 1.501e+00 seconds
Iteration: 4, Objective: 0.4253
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:37 PM: Your problem has 25061 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:37 PM: Finished problem compilation (took 2.656e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25061
  constraints   = 50061
  nnz(P)        = 0
  nnz(A)        = 373995
  cones (total) = 1
    : Nonnegative = 1,  numel = 50061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7823e-01  +5.4925e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2948e-01  +6.0109e+02  6.01e+02  1.86e-01  9.99e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5648e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8602e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.96e-01  4.54e-01  
  5  +5.0001e-01  +1.3648e+00  8.65e-01  2.58e-03  1.45e+00  2.71e-05  1.91e-01  2.21e-01  
  6  +5.0000e-01  +9.0077e-01  4.01e-01  1.20e-03  6.73e-01  1.34e-05  8.80e-02  5.75e-01  
  7  +5.0000e-01  +8.5815e-01  3.58e-01  1.07e-03  6.01e-01  1.35e-05  5.32e-02  5.45e-01  
  8  +4.9999e-01  +8.8318e-01  3.83e-01  1.13e-03  6.34e-01  1.85e-05  1.83e-02  9.90e-01  
  9  +4.9956e-01  +7.5926e-01  2.60e-01  2.87e-04  1.63e-01  1.98e-04  9.23e-04  9.53e-01  
 10  +4.9544e-01  +7.4146e-01  2.46e-01  3.17e-05  1.80e-02  1.92e-03  8.78e-05  9.06e-01  
 11  +4.9438e-01  +7.3412e-01  2.40e-01  2.47e-05  1.41e-02  2.19e-03  6.81e-05  2.76e-01  
 12  +4.9457e-01  +7.3134e-01  2.37e-01  2.47e-05  1.40e-02  2.05e-03  6.79e-05  4.17e-02  
 13  +4.9395e-01  +7.2457e-01  2.31e-01  2.09e-05  1.19e-02  2.11e-03  5.72e-05  2.30e-01  
 14  +4.9522e-01  +7.1460e-01  2.19e-01  2.05e-05  1.16e-02  1.41e-03  5.58e-05  2.71e-01  
 15  +4.9282e-01  +6.9861e-01  2.06e-01  1.36e-05  7.72e-03  1.59e-03  3.69e-05  4.59e-01  
 16  +4.9275e-01  +6.9183e-01  1.99e-01  1.25e-05  7.11e-03  1.25e-03  3.40e-05  2.76e-01  
 17  +4.9264e-01  +6.8547e-01  1.93e-01  1.19e-05  6.75e-03  9.25e-04  3.22e-05  2.65e-01  
 18  +4.8454e-01  +6.4589e-01  1.61e-01  6.82e-06  3.88e-03  7.04e-04  1.88e-05  6.83e-01  
 19  +4.6727e-01  +5.7690e-01  1.10e-01  4.05e-06  2.29e-03  3.83e-04  1.16e-05  4.77e-01  
 20  +4.5411e-01  +5.2823e-01  7.41e-02  2.65e-06  1.50e-03  1.72e-04  7.88e-06  4.69e-01  
 21  +4.3829e-01  +4.7211e-01  3.38e-02  1.14e-06  6.45e-04  5.97e-05  3.55e-06  6.12e-01  
 22  +4.3761e-01  +4.6965e-01  3.20e-02  1.07e-06  6.07e-04  5.05e-05  3.34e-06  1.64e-01  
 23  +4.3113e-01  +4.4692e-01  1.58e-02  5.10e-07  2.88e-04  1.17e-06  1.61e-06  9.90e-01  
 24  +4.2517e-01  +4.2736e-01  2.19e-03  7.09e-08  4.00e-05  1.13e-07  2.29e-07  9.12e-01  
 25  +4.2426e-01  +4.2442e-01  1.66e-04  5.35e-09  3.02e-06  4.78e-09  1.74e-08  9.72e-01  
 26  +4.2418e-01  +4.2418e-01  1.68e-06  5.44e-11  3.07e-08  4.86e-11  1.77e-10  9.90e-01  
 27  +4.2418e-01  +4.2418e-01  1.68e-08  5.44e-13  3.07e-10  4.86e-13  1.77e-12  9.90e-01  
 28  +4.2418e-01  +4.2418e-01  1.69e-10  5.48e-15  3.07e-12  4.86e-15  1.77e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3815225s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:38 PM: Optimal value: 4.242e-01
(CVXPY) Oct 06 04:34:38 PM: Compilation took 2.656e-01 seconds
(CVXPY) Oct 06 04:34:38 PM: Solver (including time spent in interface) took 1.454e+00 seconds
Iteration: 5, Objective: 0.4242
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:39 PM: Your problem has 25071 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:39 PM: Finished problem compilation (took 2.814e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25071
  constraints   = 50071
  nnz(P)        = 0
  nnz(A)        = 375069
  cones (total) = 1
    : Nonnegative = 1,  numel = 50071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4927e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2946e-01  +6.0090e+02  6.00e+02  1.86e-01  9.99e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5643e+02  1.56e+02  1.52e-01  8.28e+01  5.05e-05  2.65e-01  3.28e-01  
  4  +5.0144e-01  +1.8604e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.54e-01  
  5  +5.0002e-01  +1.5149e+00  1.01e+00  3.03e-03  1.70e+00  2.70e-05  1.91e-01  1.89e-01  
  6  +5.0000e-01  +8.0031e-01  3.00e-01  8.96e-04  5.05e-01  8.75e-06  6.45e-02  6.67e-01  
  7  +5.0000e-01  +8.3365e-01  3.34e-01  9.94e-04  5.59e-01  1.21e-05  3.66e-02  6.31e-01  
  8  +4.9992e-01  +7.5233e-01  2.52e-01  6.98e-04  3.93e-01  4.15e-05  5.80e-03  8.66e-01  
  9  +4.9519e-01  +7.3201e-01  2.37e-01  3.62e-05  2.06e-02  2.08e-03  1.01e-04  9.84e-01  
 10  +4.9293e-01  +7.1462e-01  2.22e-01  2.18e-05  1.24e-02  2.62e-03  6.04e-05  5.31e-01  
 11  +4.9419e-01  +7.0878e-01  2.15e-01  2.08e-05  1.18e-02  1.87e-03  5.71e-05  3.02e-01  
 12  +4.9735e-01  +6.9516e-01  1.98e-01  1.74e-05  9.90e-03  1.12e-04  4.66e-05  9.90e-01  
 13  +4.9578e-01  +6.8850e-01  1.93e-01  1.29e-05  7.34e-03  1.37e-04  3.46e-05  2.89e-01  
 14  +4.9569e-01  +6.8802e-01  1.92e-01  1.28e-05  7.29e-03  1.30e-04  3.44e-05  6.17e-02  
 15  +4.9139e-01  +6.7044e-01  1.79e-01  8.64e-06  4.92e-03  1.08e-04  2.34e-05  6.08e-01  
 16  +4.8022e-01  +6.2622e-01  1.46e-01  5.69e-06  3.23e-03  8.98e-05  1.58e-05  4.08e-01  
 17  +4.6366e-01  +5.6398e-01  1.00e-01  3.74e-06  2.12e-03  4.49e-05  1.09e-05  4.03e-01  
 18  +4.5121e-01  +5.1992e-01  6.87e-02  2.46e-06  1.39e-03  2.34e-05  7.40e-06  4.25e-01  
 19  +4.4984e-01  +5.1520e-01  6.54e-02  2.30e-06  1.30e-03  1.49e-05  6.93e-06  3.71e-01  
 20  +4.4184e-01  +4.8751e-01  4.57e-02  1.57e-06  8.87e-04  9.67e-06  4.85e-06  3.33e-01  
 21  +4.3284e-01  +4.5622e-01  2.34e-02  7.68e-07  4.34e-04  4.22e-07  2.42e-06  9.90e-01  
 22  +4.2510e-01  +4.3032e-01  5.22e-03  1.71e-07  9.65e-05  9.07e-08  5.55e-07  8.12e-01  
 23  +4.2509e-01  +4.3028e-01  5.19e-03  1.70e-07  9.60e-05  8.96e-08  5.54e-07  1.74e-02  
 24  +4.2509e-01  +4.3026e-01  5.17e-03  1.69e-07  9.57e-05  8.90e-08  5.51e-07  3.35e-02  
 25  +4.2497e-01  +4.2986e-01  4.89e-03  1.60e-07  9.02e-05  8.36e-08  5.19e-07  1.53e-01  
 26  +4.2365e-01  +4.2544e-01  1.79e-03  5.85e-08  3.30e-05  2.75e-08  1.91e-07  9.90e-01  
 27  +4.2284e-01  +4.2288e-01  4.15e-05  1.35e-09  7.65e-07  6.30e-10  4.45e-09  9.83e-01  
 28  +4.2282e-01  +4.2282e-01  4.16e-07  1.36e-11  7.66e-09  6.31e-12  4.46e-11  9.90e-01  
 29  +4.2282e-01  +4.2282e-01  4.16e-09  1.36e-13  7.66e-11  6.31e-14  4.46e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4760477s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:41 PM: Optimal value: 4.228e-01
(CVXPY) Oct 06 04:34:41 PM: Compilation took 2.814e-01 seconds
(CVXPY) Oct 06 04:34:41 PM: Solver (including time spent in interface) took 1.550e+00 seconds
Iteration: 6, Objective: 0.4228
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:41 PM: Your problem has 25081 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:41 PM: Finished problem compilation (took 2.813e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25081
  constraints   = 50081
  nnz(P)        = 0
  nnz(A)        = 376176
  cones (total) = 1
    : Nonnegative = 1,  numel = 50081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.82e+02  1.00e+00  1.00e+00   ------   
  1  +5.7821e-01  +5.4927e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2946e-01  +6.0085e+02  6.00e+02  1.86e-01  9.99e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0860e-01  +1.5641e+02  1.56e+02  1.52e-01  8.27e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0144e-01  +1.8603e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4654e+00  9.65e-01  2.88e-03  1.62e+00  2.71e-05  1.91e-01  2.00e-01  
  6  +5.0000e-01  +7.8715e-01  2.87e-01  8.57e-04  4.83e-01  9.06e-06  6.21e-02  6.78e-01  
  7  +5.0000e-01  +9.3226e-01  4.32e-01  1.29e-03  7.22e-01  1.46e-05  3.62e-02  7.94e-01  
  8  +4.9992e-01  +7.8016e-01  2.80e-01  7.56e-04  4.26e-01  4.31e-05  5.54e-03  8.56e-01  
  9  +4.9510e-01  +7.5274e-01  2.58e-01  3.48e-05  1.98e-02  2.12e-03  9.67e-05  9.83e-01  
 10  +4.9373e-01  +7.3452e-01  2.41e-01  2.34e-05  1.33e-02  2.36e-03  6.45e-05  4.66e-01  
 11  +4.9699e-01  +6.9843e-01  2.01e-01  1.77e-05  1.01e-02  2.08e-04  4.77e-05  9.69e-01  
 12  +4.9682e-01  +6.9396e-01  1.97e-01  1.50e-05  8.55e-03  1.13e-04  4.03e-05  6.35e-01  
 13  +4.9284e-01  +6.7788e-01  1.85e-01  8.91e-06  5.07e-03  1.36e-04  2.40e-05  5.65e-01  
 14  +4.8087e-01  +6.2956e-01  1.49e-01  5.82e-06  3.31e-03  8.57e-05  1.61e-05  5.49e-01  
 15  +4.6646e-01  +5.7549e-01  1.09e-01  4.12e-06  2.33e-03  4.84e-05  1.19e-05  3.45e-01  
 16  +4.5701e-01  +5.4182e-01  8.48e-02  3.12e-06  1.76e-03  3.01e-05  9.25e-06  3.27e-01  
 17  +4.5150e-01  +5.2255e-01  7.10e-02  2.56e-06  1.45e-03  2.28e-05  7.71e-06  2.26e-01  
 18  +4.4417e-01  +4.9708e-01  5.29e-02  1.82e-06  1.03e-03  4.32e-06  5.58e-06  8.03e-01  
 19  +4.3665e-01  +4.7078e-01  3.41e-02  1.13e-06  6.39e-04  5.51e-07  3.54e-06  9.90e-01  
 20  +4.3369e-01  +4.6044e-01  2.68e-02  8.80e-07  4.97e-04  4.33e-07  2.77e-06  5.78e-01  
 21  +4.2816e-01  +4.4179e-01  1.36e-02  4.48e-07  2.53e-04  2.20e-07  1.44e-06  5.60e-01  
 22  +4.2644e-01  +4.3601e-01  9.57e-03  3.14e-07  1.77e-04  1.54e-07  1.02e-06  3.13e-01  
 23  +4.2569e-01  +4.3308e-01  7.39e-03  2.42e-07  1.37e-04  1.14e-07  7.85e-07  9.90e-01  
 24  +4.2359e-01  +4.2634e-01  2.75e-03  9.02e-08  5.09e-05  4.25e-08  2.96e-07  6.66e-01  
 25  +4.2239e-01  +4.2251e-01  1.14e-04  3.75e-09  2.12e-06  1.73e-09  1.24e-08  9.88e-01  
 26  +4.2234e-01  +4.2234e-01  1.16e-06  3.79e-11  2.14e-08  1.74e-11  1.25e-10  9.90e-01  
 27  +4.2234e-01  +4.2234e-01  1.16e-08  3.79e-13  2.14e-10  1.74e-13  1.25e-12  9.90e-01  
 28  +4.2234e-01  +4.2234e-01  1.16e-10  3.80e-15  2.14e-12  1.76e-15  1.26e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4327227s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:43 PM: Optimal value: 4.223e-01
(CVXPY) Oct 06 04:34:43 PM: Compilation took 2.813e-01 seconds
(CVXPY) Oct 06 04:34:43 PM: Solver (including time spent in interface) took 1.511e+00 seconds
Iteration: 7, Objective: 0.4223
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:43 PM: Your problem has 25091 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:43 PM: Finished problem compilation (took 2.812e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25091
  constraints   = 50091
  nnz(P)        = 0
  nnz(A)        = 377280
  cones (total) = 1
    : Nonnegative = 1,  numel = 50091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +5.4927e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2945e-01  +6.0078e+02  6.00e+02  1.86e-01  9.98e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5638e+02  1.56e+02  1.52e-01  8.27e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0144e-01  +1.8603e+01  1.81e+01  4.93e-02  2.68e+01  5.58e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4211e+00  9.21e-01  2.75e-03  1.54e+00  2.73e-05  1.91e-01  2.11e-01  
  6  +5.0000e-01  +8.1949e-01  3.19e-01  9.53e-04  5.37e-01  1.07e-05  6.91e-02  6.41e-01  
  7  +5.0000e-01  +8.1866e-01  3.19e-01  9.50e-04  5.35e-01  1.28e-05  4.55e-02  4.46e-01  
  8  +4.9995e-01  +8.0011e-01  3.00e-01  8.69e-04  4.89e-01  3.22e-05  1.09e-02  8.86e-01  
  9  +4.9712e-01  +7.4653e-01  2.49e-01  7.22e-05  4.10e-02  1.25e-03  2.07e-04  9.84e-01  
 10  +4.9342e-01  +7.2916e-01  2.36e-01  3.05e-05  1.73e-02  2.59e-03  8.56e-05  6.29e-01  
 11  +4.9215e-01  +7.2172e-01  2.30e-01  2.44e-05  1.39e-02  2.85e-03  6.82e-05  2.62e-01  
 12  +4.9627e-01  +6.9889e-01  2.03e-01  1.85e-05  1.05e-02  3.44e-04  5.00e-05  9.88e-01  
 13  +4.9627e-01  +6.9890e-01  2.03e-01  1.85e-05  1.05e-02  3.38e-04  5.00e-05  1.97e-02  
 14  +4.9065e-01  +6.7405e-01  1.83e-01  8.53e-06  4.86e-03  4.11e-04  2.31e-05  8.12e-01  
 15  +4.7355e-01  +6.0490e-01  1.31e-01  4.83e-06  2.74e-03  2.40e-04  1.36e-05  5.82e-01  
 16  +4.6211e-01  +5.6270e-01  1.01e-01  3.71e-06  2.10e-03  1.33e-04  1.08e-05  3.26e-01  
 17  +4.4992e-01  +5.1903e-01  6.91e-02  2.47e-06  1.40e-03  7.47e-05  7.47e-06  3.84e-01  
 18  +4.4847e-01  +5.1397e-01  6.55e-02  2.30e-06  1.30e-03  4.58e-05  6.99e-06  3.87e-01  
 19  +4.4030e-01  +4.8543e-01  4.51e-02  1.56e-06  8.79e-04  2.93e-05  4.83e-06  3.38e-01  
 20  +4.3577e-01  +4.6950e-01  3.37e-02  1.14e-06  6.42e-04  1.40e-05  3.57e-06  5.35e-01  
 21  +4.3111e-01  +4.5298e-01  2.19e-02  7.21e-07  4.07e-04  1.93e-06  2.29e-06  9.03e-01  
 22  +4.2606e-01  +4.3608e-01  1.00e-02  3.30e-07  1.86e-04  7.54e-07  1.07e-06  6.20e-01  
 23  +4.2565e-01  +4.3467e-01  9.03e-03  2.97e-07  1.68e-04  6.51e-07  9.65e-07  1.47e-01  
 24  +4.2453e-01  +4.3068e-01  6.15e-03  2.02e-07  1.14e-04  1.07e-07  6.60e-07  9.90e-01  
 25  +4.2235e-01  +4.2369e-01  1.34e-03  4.41e-08  2.49e-05  2.24e-08  1.46e-07  8.49e-01  
 26  +4.2175e-01  +4.2177e-01  2.19e-05  7.20e-10  4.06e-07  3.59e-10  2.39e-09  9.85e-01  
 27  +4.2174e-01  +4.2174e-01  2.19e-07  7.20e-12  4.06e-09  3.59e-12  2.39e-11  9.90e-01  
 28  +4.2174e-01  +4.2174e-01  2.19e-09  7.20e-14  4.06e-11  3.61e-14  2.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.3918148s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:45 PM: Optimal value: 4.217e-01
(CVXPY) Oct 06 04:34:45 PM: Compilation took 2.812e-01 seconds
(CVXPY) Oct 06 04:34:45 PM: Solver (including time spent in interface) took 1.453e+00 seconds
Iteration: 8, Objective: 0.4217
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:45 PM: Your problem has 25101 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:45 PM: Finished problem compilation (took 2.812e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25101
  constraints   = 50101
  nnz(P)        = 0
  nnz(A)        = 378610
  cones (total) = 1
    : Nonnegative = 1,  numel = 50101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7819e-01  +5.4928e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2944e-01  +6.0067e+02  6.00e+02  1.86e-01  9.98e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5635e+02  1.56e+02  1.52e-01  8.26e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0144e-01  +1.8603e+01  1.81e+01  4.93e-02  2.68e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4508e+00  9.51e-01  2.84e-03  1.59e+00  2.73e-05  1.91e-01  2.06e-01  
  6  +5.0000e-01  +8.1874e-01  3.19e-01  9.51e-04  5.36e-01  1.03e-05  6.79e-02  6.53e-01  
  7  +5.0000e-01  +9.9421e-01  4.94e-01  1.47e-03  8.24e-01  1.71e-05  3.58e-02  8.83e-01  
  8  +4.9993e-01  +7.7667e-01  2.77e-01  7.21e-04  4.07e-01  4.01e-05  4.58e-03  9.90e-01  
  9  +4.9673e-01  +7.6276e-01  2.66e-01  4.29e-05  2.44e-02  1.42e-03  1.18e-04  9.74e-01  
 10  +4.9526e-01  +7.5406e-01  2.59e-01  2.94e-05  1.68e-02  1.87e-03  8.08e-05  3.55e-01  
 11  +4.9556e-01  +7.2073e-01  2.25e-01  1.95e-05  1.11e-02  1.17e-03  5.28e-05  7.37e-01  
 12  +4.9517e-01  +7.1363e-01  2.18e-01  1.68e-05  9.59e-03  1.01e-03  4.55e-05  3.27e-01  
 13  +4.9297e-01  +6.9809e-01  2.05e-01  1.22e-05  6.93e-03  8.62e-04  3.30e-05  5.28e-01  
 14  +4.8787e-01  +6.6660e-01  1.79e-01  8.76e-06  4.98e-03  2.08e-04  2.40e-05  8.52e-01  
 15  +4.6552e-01  +5.7740e-01  1.12e-01  3.97e-06  2.25e-03  1.33e-04  1.14e-05  6.22e-01  
 16  +4.5803e-01  +5.5090e-01  9.29e-02  3.32e-06  1.88e-03  8.50e-05  9.79e-06  2.82e-01  
 17  +4.4614e-01  +5.0897e-01  6.28e-02  2.22e-06  1.26e-03  2.47e-05  6.82e-06  6.34e-01  
 18  +4.3784e-01  +4.7953e-01  4.17e-02  1.45e-06  8.17e-04  1.54e-05  4.55e-06  3.55e-01  
 19  +4.3518e-01  +4.6976e-01  3.46e-02  1.18e-06  6.65e-04  8.10e-06  3.73e-06  5.04e-01  
 20  +4.3010e-01  +4.5158e-01  2.15e-02  7.15e-07  4.03e-04  6.44e-07  2.29e-06  9.84e-01  
 21  +4.2942e-01  +4.4919e-01  1.98e-02  6.58e-07  3.71e-04  5.34e-07  2.12e-06  2.74e-01  
 22  +4.2626e-01  +4.3854e-01  1.23e-02  4.09e-07  2.31e-04  3.14e-07  1.33e-06  4.51e-01  
 23  +4.2622e-01  +4.3833e-01  1.21e-02  4.02e-07  2.27e-04  2.91e-07  1.31e-06  1.77e-01  
 24  +4.2329e-01  +4.2841e-01  5.13e-03  1.71e-07  9.63e-05  8.00e-08  5.63e-07  9.90e-01  
 25  +4.2121e-01  +4.2165e-01  4.33e-04  1.44e-08  8.14e-06  6.69e-09  4.82e-08  9.30e-01  
 26  +4.2102e-01  +4.2103e-01  5.03e-06  1.67e-10  9.45e-08  7.73e-11  5.60e-10  9.89e-01  
 27  +4.2102e-01  +4.2102e-01  5.03e-08  1.68e-12  9.45e-10  7.73e-13  5.61e-12  9.90e-01  
 28  +4.2102e-01  +4.2102e-01  5.04e-10  1.67e-14  9.46e-12  7.86e-15  5.69e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4003929s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:47 PM: Optimal value: 4.210e-01
(CVXPY) Oct 06 04:34:47 PM: Compilation took 2.812e-01 seconds
(CVXPY) Oct 06 04:34:47 PM: Solver (including time spent in interface) took 1.469e+00 seconds
Iteration: 9, Objective: 0.4210
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:47 PM: Your problem has 25102 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:47 PM: Finished problem compilation (took 2.812e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25102
  constraints   = 50102
  nnz(P)        = 0
  nnz(A)        = 378813
  cones (total) = 1
    : Nonnegative = 1,  numel = 50102

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7818e-01  +5.4928e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2944e-01  +6.0065e+02  6.00e+02  1.86e-01  9.98e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5634e+02  1.56e+02  1.52e-01  8.26e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0144e-01  +1.8603e+01  1.81e+01  4.93e-02  2.68e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.4772e+00  9.77e-01  2.92e-03  1.64e+00  2.73e-05  1.91e-01  2.00e-01  
  6  +5.0000e-01  +8.5178e-01  3.52e-01  1.05e-03  5.91e-01  1.08e-05  7.38e-02  6.28e-01  
  7  +5.0001e-01  +1.1622e+00  6.62e-01  1.96e-03  1.10e+00  1.69e-05  4.26e-02  9.90e-01  
  8  +4.9994e-01  +7.6139e-01  2.61e-01  6.97e-04  3.93e-01  3.61e-05  4.81e-03  8.91e-01  
  9  +4.9708e-01  +7.5131e-01  2.54e-01  4.59e-05  2.61e-02  1.27e-03  1.27e-04  9.74e-01  
 10  +4.9583e-01  +7.4451e-01  2.49e-01  3.20e-05  1.82e-02  1.66e-03  8.81e-05  3.43e-01  
 11  +4.9605e-01  +7.4141e-01  2.45e-01  3.11e-05  1.77e-02  1.53e-03  8.54e-05  1.08e-01  
 12  +4.9787e-01  +7.1674e-01  2.19e-01  2.43e-05  1.38e-02  4.48e-04  6.53e-05  8.56e-01  
 13  +4.9674e-01  +7.0836e-01  2.12e-01  1.57e-05  8.97e-03  4.70e-04  4.22e-05  6.08e-01  
 14  +4.9479e-01  +6.9781e-01  2.03e-01  1.15e-05  6.55e-03  3.67e-04  3.09e-05  6.06e-01  
 15  +4.8917e-01  +6.7154e-01  1.82e-01  8.68e-06  4.94e-03  1.00e-04  2.37e-05  8.23e-01  
 16  +4.7154e-01  +6.0132e-01  1.30e-01  4.86e-06  2.76e-03  6.71e-05  1.38e-05  5.23e-01  
 17  +4.6184e-01  +5.6567e-01  1.04e-01  3.88e-06  2.20e-03  4.23e-05  1.14e-05  2.78e-01  
 18  +4.5314e-01  +5.3423e-01  8.11e-02  2.97e-06  1.68e-03  3.01e-05  8.91e-06  2.49e-01  
 19  +4.5077e-01  +5.2611e-01  7.53e-02  2.72e-06  1.54e-03  1.84e-05  8.23e-06  3.82e-01  
 20  +4.4000e-01  +4.8779e-01  4.78e-02  1.68e-06  9.48e-04  1.03e-05  5.25e-06  4.07e-01  
 21  +4.3995e-01  +4.8750e-01  4.76e-02  1.66e-06  9.39e-04  9.26e-06  5.20e-06  1.18e-01  
 22  +4.3383e-01  +4.6608e-01  3.22e-02  1.11e-06  6.26e-04  5.54e-06  3.53e-06  3.98e-01  
 23  +4.3266e-01  +4.6184e-01  2.92e-02  9.97e-07  5.63e-04  4.41e-06  3.19e-06  2.21e-01  
 24  +4.2926e-01  +4.5000e-01  2.07e-02  7.02e-07  3.96e-04  2.78e-06  2.27e-06  3.79e-01  
 25  +4.2757e-01  +4.4342e-01  1.58e-02  5.27e-07  2.98e-04  3.39e-07  1.71e-06  9.90e-01  
 26  +4.2601e-01  +4.3826e-01  1.22e-02  4.07e-07  2.30e-04  2.53e-07  1.33e-06  3.27e-01  
 27  +4.2468e-01  +4.3370e-01  9.03e-03  3.00e-07  1.69e-04  1.40e-07  9.86e-07  9.90e-01  
 28  +4.2288e-01  +4.2784e-01  4.96e-03  1.65e-07  9.32e-05  7.66e-08  5.47e-07  4.66e-01  
 29  +4.2085e-01  +4.2122e-01  3.75e-04  1.25e-08  7.05e-06  5.57e-09  4.19e-08  9.79e-01  
 30  +4.2068e-01  +4.2069e-01  4.18e-06  1.40e-10  7.88e-08  6.22e-11  4.68e-10  9.89e-01  
 31  +4.2068e-01  +4.2068e-01  4.19e-08  1.40e-12  7.88e-10  6.22e-13  4.69e-12  9.90e-01  
 32  +4.2068e-01  +4.2068e-01  4.19e-10  1.40e-14  7.88e-12  6.28e-15  4.73e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5872682s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:49 PM: Optimal value: 4.207e-01
(CVXPY) Oct 06 04:34:49 PM: Compilation took 2.812e-01 seconds
(CVXPY) Oct 06 04:34:49 PM: Solver (including time spent in interface) took 1.657e+00 seconds
Iteration: 10, Objective: 0.4207
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:49 PM: Your problem has 25112 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:50 PM: Finished problem compilation (took 3.052e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25112
  constraints   = 50112
  nnz(P)        = 0
  nnz(A)        = 379900
  cones (total) = 1
    : Nonnegative = 1,  numel = 50112

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7818e-01  +5.4928e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2943e-01  +6.0056e+02  6.00e+02  1.86e-01  9.97e+01  1.78e-02  2.90e-01  9.53e-01  
  3  +5.0859e-01  +1.5632e+02  1.56e+02  1.52e-01  8.26e+01  5.05e-05  2.65e-01  3.29e-01  
  4  +5.0144e-01  +1.8602e+01  1.81e+01  4.93e-02  2.68e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.5191e+00  1.02e+00  3.04e-03  1.71e+00  2.73e-05  1.91e-01  1.93e-01  
  6  +5.0000e-01  +8.3449e-01  3.34e-01  9.98e-04  5.62e-01  9.86e-06  6.97e-02  6.43e-01  
  7  +5.0000e-01  +1.0189e+00  5.19e-01  1.54e-03  8.65e-01  1.65e-05  3.62e-02  8.95e-01  
  8  +4.9991e-01  +8.0783e-01  3.08e-01  7.90e-04  4.45e-01  5.04e-05  4.83e-03  8.72e-01  
  9  +4.9482e-01  +7.8037e-01  2.86e-01  3.43e-05  1.95e-02  2.24e-03  9.52e-05  9.81e-01  
 10  +4.9368e-01  +7.6732e-01  2.74e-01  2.64e-05  1.50e-02  2.45e-03  7.28e-05  3.07e-01  
 11  +4.9574e-01  +7.3613e-01  2.40e-01  2.14e-05  1.22e-02  1.13e-03  5.80e-05  6.29e-01  
 12  +4.9447e-01  +7.1583e-01  2.21e-01  1.48e-05  8.44e-03  9.16e-04  4.00e-05  6.05e-01  
 13  +4.9447e-01  +7.1547e-01  2.21e-01  1.48e-05  8.43e-03  9.00e-04  4.00e-05  1.58e-02  
 14  +4.9271e-01  +7.0329e-01  2.11e-01  1.24e-05  7.06e-03  7.44e-04  3.36e-05  3.54e-01  
 15  +4.8176e-01  +6.5475e-01  1.73e-01  6.87e-06  3.90e-03  7.86e-04  1.90e-05  5.12e-01  
 16  +4.6500e-01  +5.8426e-01  1.19e-01  4.60e-06  2.60e-03  3.78e-04  1.34e-05  3.94e-01  
 17  +4.5607e-01  +5.4982e-01  9.38e-02  3.53e-06  2.00e-03  2.21e-04  1.06e-05  3.52e-01  
 18  +4.5015e-01  +5.2730e-01  7.72e-02  2.84e-06  1.60e-03  1.13e-04  8.63e-06  4.53e-01  
 19  +4.3524e-01  +4.7272e-01  3.75e-02  1.32e-06  7.43e-04  4.20e-05  4.19e-06  5.85e-01  
 20  +4.3334e-01  +4.6547e-01  3.21e-02  1.11e-06  6.26e-04  2.47e-05  3.55e-06  4.30e-01  
 21  +4.2973e-01  +4.5204e-01  2.23e-02  7.51e-07  4.24e-04  4.11e-06  2.42e-06  8.72e-01  
 22  +4.2885e-01  +4.4894e-01  2.01e-02  6.76e-07  3.81e-04  2.88e-06  2.19e-06  3.27e-01  
 23  +4.2515e-01  +4.3638e-01  1.12e-02  3.78e-07  2.13e-04  1.46e-06  1.24e-06  4.95e-01  
 24  +4.2512e-01  +4.3624e-01  1.11e-02  3.73e-07  2.10e-04  1.26e-06  1.22e-06  1.65e-01  
 25  +4.2409e-01  +4.3271e-01  8.63e-03  2.89e-07  1.63e-04  7.90e-07  9.53e-07  3.94e-01  
 26  +4.2313e-01  +4.2940e-01  6.28e-03  2.10e-07  1.19e-04  3.33e-07  6.97e-07  6.44e-01  
 27  +4.2096e-01  +4.2226e-01  1.30e-03  4.35e-08  2.46e-05  2.18e-08  1.46e-07  9.90e-01  
 28  +4.2040e-01  +4.2045e-01  4.76e-05  1.60e-09  9.00e-07  7.93e-10  5.37e-09  9.65e-01  
 29  +4.2038e-01  +4.2038e-01  4.78e-07  1.60e-11  9.03e-09  7.96e-12  5.39e-11  9.90e-01  
 30  +4.2038e-01  +4.2038e-01  4.78e-09  1.60e-13  9.03e-11  7.96e-14  5.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5037479s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:51 PM: Optimal value: 4.204e-01
(CVXPY) Oct 06 04:34:51 PM: Compilation took 3.052e-01 seconds
(CVXPY) Oct 06 04:34:51 PM: Solver (including time spent in interface) took 1.571e+00 seconds
Iteration: 11, Objective: 0.4204
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:52 PM: Your problem has 25122 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:52 PM: Finished problem compilation (took 3.125e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25122
  constraints   = 50122
  nnz(P)        = 0
  nnz(A)        = 380864
  cones (total) = 1
    : Nonnegative = 1,  numel = 50122

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7817e-01  +5.4928e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2942e-01  +6.0049e+02  6.00e+02  1.86e-01  9.97e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0859e-01  +1.5630e+02  1.56e+02  1.52e-01  8.25e+01  5.05e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8603e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.5109e+00  1.01e+00  3.02e-03  1.69e+00  2.73e-05  1.91e-01  1.95e-01  
  6  +5.0000e-01  +8.3328e-01  3.33e-01  9.95e-04  5.60e-01  1.00e-05  6.95e-02  6.40e-01  
  7  +4.9999e-01  +8.6573e-01  3.66e-01  1.09e-03  6.11e-01  1.69e-05  2.82e-02  8.13e-01  
  8  +4.9978e-01  +7.7859e-01  2.79e-01  5.88e-04  3.32e-01  1.07e-04  2.63e-03  9.16e-01  
  9  +4.9279e-01  +7.5286e-01  2.60e-01  2.90e-05  1.65e-02  3.09e-03  8.13e-05  9.69e-01  
 10  +4.9187e-01  +7.4079e-01  2.49e-01  2.23e-05  1.27e-02  3.10e-03  6.20e-05  3.75e-01  
 11  +4.9309e-01  +7.3315e-01  2.40e-01  2.13e-05  1.21e-02  2.32e-03  5.86e-05  2.67e-01  
 12  +4.9390e-01  +7.2896e-01  2.35e-01  2.11e-05  1.20e-02  1.87e-03  5.81e-05  1.64e-01  
 13  +4.9248e-01  +7.2029e-01  2.28e-01  1.70e-05  9.69e-03  1.93e-03  4.67e-05  2.86e-01  
 14  +4.9144e-01  +6.9616e-01  2.05e-01  1.26e-05  7.15e-03  8.26e-04  3.44e-05  7.55e-01  
 15  +4.7908e-01  +6.4212e-01  1.63e-01  6.60e-06  3.75e-03  7.42e-04  1.84e-05  6.25e-01  
 16  +4.6644e-01  +5.9075e-01  1.24e-01  4.86e-06  2.75e-03  4.69e-04  1.41e-05  2.97e-01  
 17  +4.5561e-01  +5.4896e-01  9.33e-02  3.55e-06  2.01e-03  2.35e-04  1.07e-05  4.15e-01  
 18  +4.5031e-01  +5.2901e-01  7.87e-02  2.92e-06  1.65e-03  1.17e-04  8.90e-06  4.68e-01  
 19  +4.3593e-01  +4.7606e-01  4.01e-02  1.41e-06  7.97e-04  2.27e-05  4.50e-06  7.62e-01  
 20  +4.3329e-01  +4.6628e-01  3.30e-02  1.14e-06  6.45e-04  1.21e-05  3.66e-06  4.88e-01  
 21  +4.2955e-01  +4.5249e-01  2.29e-02  7.77e-07  4.39e-04  2.21e-06  2.52e-06  8.69e-01  
 22  +4.2728e-01  +4.4453e-01  1.72e-02  5.83e-07  3.29e-04  9.19e-07  1.90e-06  6.64e-01  
 23  +4.2403e-01  +4.3349e-01  9.47e-03  3.20e-07  1.80e-04  4.86e-07  1.06e-06  4.74e-01  
 24  +4.2380e-01  +4.3262e-01  8.81e-03  2.98e-07  1.68e-04  3.35e-07  9.87e-07  4.12e-01  
 25  +4.2319e-01  +4.3046e-01  7.27e-03  2.45e-07  1.38e-04  1.72e-07  8.15e-07  6.97e-01  
 26  +4.2129e-01  +4.2419e-01  2.90e-03  9.79e-08  5.52e-05  6.35e-08  3.29e-07  6.75e-01  
 27  +4.2015e-01  +4.2044e-01  2.93e-04  9.90e-09  5.58e-06  6.12e-09  3.35e-08  9.11e-01  
 28  +4.2002e-01  +4.2003e-01  8.75e-06  2.95e-10  1.66e-07  1.43e-10  1.00e-09  9.90e-01  
 29  +4.2002e-01  +4.2002e-01  8.76e-08  2.96e-12  1.67e-09  1.43e-12  1.00e-11  9.90e-01  
 30  +4.2002e-01  +4.2002e-01  9.38e-10  3.16e-14  1.79e-11  1.54e-14  1.07e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.502873s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:53 PM: Optimal value: 4.200e-01
(CVXPY) Oct 06 04:34:53 PM: Compilation took 3.125e-01 seconds
(CVXPY) Oct 06 04:34:53 PM: Solver (including time spent in interface) took 1.563e+00 seconds
Iteration: 12, Objective: 0.4200
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:54 PM: Your problem has 25132 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:54 PM: Finished problem compilation (took 3.125e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25132
  constraints   = 50132
  nnz(P)        = 0
  nnz(A)        = 381801
  cones (total) = 1
    : Nonnegative = 1,  numel = 50132

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7816e-01  +5.4929e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2942e-01  +6.0043e+02  6.00e+02  1.86e-01  9.96e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0859e-01  +1.5628e+02  1.56e+02  1.52e-01  8.25e+01  5.06e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8604e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.5505e+00  1.05e+00  3.14e-03  1.76e+00  2.73e-05  1.91e-01  1.88e-01  
  6  +5.0000e-01  +8.4588e-01  3.46e-01  1.03e-03  5.81e-01  9.88e-06  7.12e-02  6.31e-01  
  7  +4.9999e-01  +7.8130e-01  2.81e-01  8.37e-04  4.71e-01  1.54e-05  2.51e-02  7.24e-01  
  8  +4.9945e-01  +7.8388e-01  2.84e-01  3.69e-04  2.09e-01  2.48e-04  1.26e-03  9.83e-01  
  9  +4.9412e-01  +7.6348e-01  2.69e-01  4.08e-05  2.32e-02  2.48e-03  1.16e-04  9.08e-01  
 10  +4.9482e-01  +7.4139e-01  2.47e-01  2.98e-05  1.70e-02  1.85e-03  8.24e-05  6.06e-01  
 11  +4.9500e-01  +7.3460e-01  2.40e-01  2.65e-05  1.51e-02  1.59e-03  7.28e-05  2.90e-01  
 12  +4.9335e-01  +7.1508e-01  2.22e-01  1.67e-05  9.50e-03  1.46e-03  4.56e-05  6.61e-01  
 13  +4.9338e-01  +7.1466e-01  2.21e-01  1.66e-05  9.48e-03  1.41e-03  4.54e-05  3.07e-02  
 14  +4.8866e-01  +6.8793e-01  1.99e-01  1.04e-05  5.94e-03  1.18e-03  2.86e-05  6.52e-01  
 15  +4.7220e-01  +6.1682e-01  1.45e-01  5.54e-06  3.14e-03  9.36e-04  1.57e-05  5.34e-01  
 16  +4.5964e-01  +5.6646e-01  1.07e-01  4.04e-06  2.29e-03  5.65e-04  1.19e-05  3.01e-01  
 17  +4.5413e-01  +5.4534e-01  9.12e-02  3.40e-06  1.93e-03  3.79e-04  1.02e-05  2.89e-01  
 18  +4.4764e-01  +5.2081e-01  7.32e-02  2.68e-06  1.51e-03  2.22e-04  8.21e-06  3.83e-01  
 19  +4.3706e-01  +4.8142e-01  4.44e-02  1.56e-06  8.83e-04  7.06e-05  4.96e-06  6.55e-01  
 20  +4.3213e-01  +4.6323e-01  3.11e-02  1.07e-06  6.06e-04  2.85e-05  3.46e-06  6.07e-01  
 21  +4.2960e-01  +4.5364e-01  2.40e-02  8.18e-07  4.62e-04  9.90e-06  2.65e-06  6.85e-01  
 22  +4.2585e-01  +4.4044e-01  1.46e-02  4.93e-07  2.78e-04  1.88e-06  1.62e-06  8.46e-01  
 23  +4.2392e-01  +4.3386e-01  9.95e-03  3.36e-07  1.90e-04  1.25e-06  1.11e-06  3.31e-01  
 24  +4.2351e-01  +4.3229e-01  8.78e-03  2.97e-07  1.67e-04  5.27e-07  9.85e-07  6.51e-01  
 25  +4.2150e-01  +4.2558e-01  4.08e-03  1.38e-07  7.77e-05  1.38e-07  4.62e-07  8.10e-01  
 26  +4.1993e-01  +4.2041e-01  4.78e-04  1.61e-08  9.11e-06  7.67e-09  5.47e-08  9.90e-01  
 27  +4.1972e-01  +4.1974e-01  1.11e-05  3.74e-10  2.11e-07  1.65e-10  1.27e-09  9.90e-01  
 28  +4.1972e-01  +4.1972e-01  1.11e-07  3.74e-12  2.11e-09  1.65e-12  1.27e-11  9.90e-01  
 29  +4.1972e-01  +4.1972e-01  1.24e-09  4.20e-14  2.37e-11  1.86e-14  1.43e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5575931s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:56 PM: Optimal value: 4.197e-01
(CVXPY) Oct 06 04:34:56 PM: Compilation took 3.125e-01 seconds
(CVXPY) Oct 06 04:34:56 PM: Solver (including time spent in interface) took 1.627e+00 seconds
Iteration: 13, Objective: 0.4197
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:56 PM: Your problem has 25133 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:56 PM: Finished problem compilation (took 3.283e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25133
  constraints   = 50133
  nnz(P)        = 0
  nnz(A)        = 381984
  cones (total) = 1
    : Nonnegative = 1,  numel = 50133

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7816e-01  +5.4929e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2942e-01  +6.0041e+02  6.00e+02  1.86e-01  9.96e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0859e-01  +1.5627e+02  1.56e+02  1.52e-01  8.25e+01  5.06e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8604e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.5540e+00  1.05e+00  3.15e-03  1.77e+00  2.73e-05  1.91e-01  1.87e-01  
  6  +5.0000e-01  +8.4417e-01  3.44e-01  1.03e-03  5.78e-01  9.82e-06  7.07e-02  6.33e-01  
  7  +4.9999e-01  +7.8080e-01  2.81e-01  8.35e-04  4.70e-01  1.59e-05  2.40e-02  7.40e-01  
  8  +4.9935e-01  +7.8101e-01  2.82e-01  3.21e-04  1.82e-01  2.93e-04  1.06e-03  9.84e-01  
  9  +4.9152e-01  +7.5131e-01  2.60e-01  2.74e-05  1.56e-02  3.56e-03  7.73e-05  9.27e-01  
 10  +4.9154e-01  +7.4063e-01  2.49e-01  2.26e-05  1.28e-02  3.17e-03  6.28e-05  3.68e-01  
 11  +4.9184e-01  +7.3015e-01  2.38e-01  1.97e-05  1.12e-02  2.56e-03  5.44e-05  3.35e-01  
 12  +4.9095e-01  +7.2189e-01  2.31e-01  1.70e-05  9.66e-03  2.41e-03  4.69e-05  2.51e-01  
 13  +4.9091e-01  +7.0184e-01  2.11e-01  1.36e-05  7.75e-03  1.09e-03  3.74e-05  6.57e-01  
 14  +4.7417e-01  +6.2459e-01  1.50e-01  5.50e-06  3.12e-03  8.77e-04  1.55e-05  8.28e-01  
 15  +4.6281e-01  +5.7924e-01  1.16e-01  4.31e-06  2.44e-03  5.64e-04  1.26e-05  2.39e-01  
 16  +4.5779e-01  +5.6003e-01  1.02e-01  3.77e-06  2.14e-03  4.42e-04  1.12e-05  1.76e-01  
 17  +4.5339e-01  +5.4334e-01  8.99e-02  3.30e-06  1.87e-03  3.16e-04  9.93e-06  2.51e-01  
 18  +4.4480e-01  +5.1100e-01  6.62e-02  2.39e-06  1.35e-03  1.74e-04  7.38e-06  4.08e-01  
 19  +4.3944e-01  +4.9083e-01  5.14e-02  1.81e-06  1.02e-03  9.06e-05  5.71e-06  4.76e-01  
 20  +4.3090e-01  +4.5953e-01  2.86e-02  9.89e-07  5.58e-04  2.75e-05  3.20e-06  6.91e-01  
 21  +4.2963e-01  +4.5461e-01  2.50e-02  8.56e-07  4.83e-04  1.71e-05  2.78e-06  3.99e-01  
 22  +4.2828e-01  +4.4981e-01  2.15e-02  7.36e-07  4.16e-04  1.36e-05  2.41e-06  2.07e-01  
 23  +4.2389e-01  +4.3407e-01  1.02e-02  3.45e-07  1.95e-04  5.48e-07  1.15e-06  9.90e-01  
 24  +4.2281e-01  +4.3042e-01  7.61e-03  2.58e-07  1.46e-04  3.95e-07  8.64e-07  2.86e-01  
 25  +4.2272e-01  +4.3010e-01  7.38e-03  2.51e-07  1.41e-04  3.56e-07  8.39e-07  1.26e-01  
 26  +4.2106e-01  +4.2448e-01  3.43e-03  1.17e-07  6.57e-05  6.68e-08  3.94e-07  9.34e-01  
 27  +4.2077e-01  +4.2353e-01  2.76e-03  9.39e-08  5.30e-05  5.24e-08  3.18e-07  2.72e-01  
 28  +4.1993e-01  +4.2075e-01  8.20e-04  2.79e-08  1.57e-05  1.18e-08  9.48e-08  9.85e-01  
 29  +4.1959e-01  +4.1967e-01  7.57e-05  2.57e-09  1.45e-06  1.09e-09  8.78e-09  9.10e-01  
 30  +4.1956e-01  +4.1956e-01  7.95e-07  2.70e-11  1.52e-08  1.14e-11  9.21e-11  9.90e-01  
 31  +4.1956e-01  +4.1956e-01  7.95e-09  2.70e-13  1.52e-10  1.14e-13  9.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5905338s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:34:58 PM: Optimal value: 4.196e-01
(CVXPY) Oct 06 04:34:58 PM: Compilation took 3.283e-01 seconds
(CVXPY) Oct 06 04:34:58 PM: Solver (including time spent in interface) took 1.673e+00 seconds
Iteration: 14, Objective: 0.4196
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:34:58 PM: Your problem has 25139 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:34:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:34:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:34:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:34:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:34:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:34:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:34:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:34:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:34:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:34:59 PM: Finished problem compilation (took 3.129e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:34:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25139
  constraints   = 50139
  nnz(P)        = 0
  nnz(A)        = 382655
  cones (total) = 1
    : Nonnegative = 1,  numel = 50139

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7816e-01  +5.4929e+03  5.49e+03  4.48e-01  1.87e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2941e-01  +6.0037e+02  6.00e+02  1.86e-01  9.96e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0859e-01  +1.5626e+02  1.56e+02  1.52e-01  8.25e+01  5.06e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.4946e+00  9.95e-01  2.97e-03  1.67e+00  2.74e-05  1.90e-01  1.99e-01  
  6  +5.0000e-01  +8.3433e-01  3.34e-01  9.98e-04  5.62e-01  1.04e-05  6.94e-02  6.40e-01  
  7  +4.9998e-01  +7.8146e-01  2.81e-01  8.37e-04  4.71e-01  1.79e-05  2.29e-02  7.51e-01  
  8  +4.9920e-01  +7.7422e-01  2.75e-01  2.86e-04  1.62e-01  3.55e-04  9.29e-04  9.80e-01  
  9  +4.9606e-01  +7.6283e-01  2.67e-01  6.51e-05  3.70e-02  1.66e-03  1.87e-04  8.00e-01  
 10  +4.9724e-01  +7.5214e-01  2.55e-01  6.18e-05  3.52e-02  1.12e-03  1.74e-04  3.62e-01  
 11  +4.9422e-01  +7.4081e-01  2.47e-01  3.02e-05  1.72e-02  2.12e-03  8.40e-05  5.32e-01  
 12  +4.9549e-01  +7.3355e-01  2.38e-01  2.81e-05  1.60e-02  1.43e-03  7.73e-05  3.83e-01  
 13  +4.9376e-01  +7.2412e-01  2.30e-01  2.02e-05  1.15e-02  1.66e-03  5.53e-05  3.78e-01  
 14  +4.9405e-01  +7.2203e-01  2.28e-01  1.96e-05  1.12e-02  1.43e-03  5.37e-05  1.58e-01  
 15  +4.8356e-01  +6.6900e-01  1.85e-01  7.27e-06  4.13e-03  1.81e-03  2.00e-05  8.86e-01  
 16  +4.6668e-01  +5.9531e-01  1.29e-01  5.05e-06  2.86e-03  8.38e-04  1.46e-05  3.69e-01  
 17  +4.6138e-01  +5.7443e-01  1.13e-01  4.40e-06  2.49e-03  6.12e-04  1.30e-05  2.20e-01  
 18  +4.5455e-01  +5.4813e-01  9.36e-02  3.57e-06  2.02e-03  3.77e-04  1.08e-05  3.34e-01  
 19  +4.4651e-01  +5.1755e-01  7.10e-02  2.62e-06  1.48e-03  1.42e-04  8.10e-06  5.78e-01  
 20  +4.3983e-01  +4.9242e-01  5.26e-02  1.87e-06  1.05e-03  3.95e-05  5.88e-06  7.13e-01  
 21  +4.3107e-01  +4.6053e-01  2.95e-02  1.02e-06  5.75e-04  8.02e-06  3.30e-06  8.01e-01  
 22  +4.2962e-01  +4.5504e-01  2.54e-02  8.72e-07  4.92e-04  4.74e-06  2.84e-06  4.44e-01  
 23  +4.2823e-01  +4.5013e-01  2.19e-02  7.49e-07  4.23e-04  3.67e-06  2.45e-06  2.37e-01  
 24  +4.2315e-01  +4.3218e-01  9.03e-03  3.07e-07  1.73e-04  2.26e-07  1.03e-06  9.90e-01  
 25  +4.2210e-01  +4.2861e-01  6.51e-03  2.21e-07  1.25e-04  1.47e-07  7.43e-07  4.55e-01  
 26  +4.2209e-01  +4.2857e-01  6.48e-03  2.20e-07  1.24e-04  1.44e-07  7.40e-07  3.16e-02  
 27  +4.2106e-01  +4.2505e-01  4.00e-03  1.36e-07  7.68e-05  5.93e-08  4.62e-07  9.47e-01  
 28  +4.2094e-01  +4.2465e-01  3.72e-03  1.27e-07  7.15e-05  5.51e-08  4.30e-07  1.06e-01  
 29  +4.2062e-01  +4.2360e-01  2.97e-03  1.01e-07  5.71e-05  4.25e-08  3.44e-07  7.74e-01  
 30  +4.1994e-01  +4.2137e-01  1.43e-03  4.86e-08  2.74e-05  2.04e-08  1.66e-07  6.15e-01  
 31  +4.1937e-01  +4.1952e-01  1.56e-04  5.28e-09  2.98e-06  2.21e-09  1.81e-08  9.02e-01  
 32  +4.1930e-01  +4.1930e-01  2.12e-06  7.20e-11  4.06e-08  2.99e-11  2.46e-10  9.90e-01  
 33  +4.1930e-01  +4.1930e-01  2.12e-08  7.20e-13  4.06e-10  2.99e-13  2.46e-12  9.90e-01  
 34  +4.1930e-01  +4.1930e-01  2.12e-10  7.18e-15  4.06e-12  3.00e-15  2.47e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7701437s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:35:01 PM: Optimal value: 4.193e-01
(CVXPY) Oct 06 04:35:01 PM: Compilation took 3.129e-01 seconds
(CVXPY) Oct 06 04:35:01 PM: Solver (including time spent in interface) took 1.845e+00 seconds
Iteration: 15, Objective: 0.4193
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:35:01 PM: Your problem has 25148 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:35:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:35:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:35:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:35:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:35:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:35:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:35:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:35:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:35:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:35:01 PM: Finished problem compilation (took 3.125e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25148
  constraints   = 50148
  nnz(P)        = 0
  nnz(A)        = 383259
  cones (total) = 1
    : Nonnegative = 1,  numel = 50148

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7815e-01  +5.4929e+03  5.49e+03  4.48e-01  1.86e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2941e-01  +6.0035e+02  6.00e+02  1.86e-01  9.96e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0858e-01  +1.5625e+02  1.56e+02  1.52e-01  8.24e+01  5.06e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.4923e+00  9.92e-01  2.96e-03  1.66e+00  2.74e-05  1.90e-01  2.00e-01  
  6  +5.0000e-01  +8.3409e-01  3.34e-01  9.98e-04  5.61e-01  1.04e-05  6.93e-02  6.40e-01  
  7  +4.9998e-01  +7.9129e-01  2.91e-01  8.67e-04  4.88e-01  1.69e-05  2.61e-02  6.99e-01  
  8  +4.9951e-01  +7.7230e-01  2.73e-01  4.13e-04  2.34e-01  2.22e-04  1.50e-03  9.64e-01  
  9  +4.9375e-01  +7.5201e-01  2.58e-01  4.04e-05  2.29e-02  2.66e-03  1.15e-04  9.23e-01  
 10  +4.9615e-01  +7.3973e-01  2.44e-01  3.55e-05  2.02e-02  1.42e-03  9.80e-05  5.83e-01  
 11  +4.9723e-01  +7.3203e-01  2.35e-01  3.21e-05  1.83e-02  8.43e-04  8.74e-05  5.06e-01  
 12  +4.9689e-01  +7.2913e-01  2.32e-01  2.76e-05  1.57e-02  8.62e-04  7.49e-05  2.39e-01  
 13  +4.9813e-01  +7.2060e-01  2.22e-01  2.21e-05  1.26e-02  1.51e-04  5.92e-05  9.90e-01  
 14  +4.9658e-01  +7.1395e-01  2.17e-01  1.48e-05  8.44e-03  2.05e-04  3.97e-05  3.68e-01  
 15  +4.9582e-01  +7.1057e-01  2.15e-01  1.37e-05  7.79e-03  1.85e-04  3.67e-05  2.02e-01  
 16  +4.8615e-01  +6.6931e-01  1.83e-01  6.88e-06  3.91e-03  1.84e-04  1.88e-05  7.43e-01  
 17  +4.6955e-01  +6.0180e-01  1.32e-01  5.23e-06  2.96e-03  8.40e-05  1.50e-05  3.10e-01  
 18  +4.6181e-01  +5.7280e-01  1.11e-01  4.34e-06  2.46e-03  5.58e-05  1.28e-05  2.67e-01  
 19  +4.5661e-01  +5.5391e-01  9.73e-02  3.75e-06  2.12e-03  3.76e-05  1.12e-05  2.84e-01  
 20  +4.4387e-01  +5.0693e-01  6.31e-02  2.33e-06  1.32e-03  1.91e-05  7.27e-06  4.47e-01  
 21  +4.3980e-01  +4.9205e-01  5.22e-02  1.86e-06  1.05e-03  8.01e-06  5.87e-06  6.06e-01  
 22  +4.3323e-01  +4.6848e-01  3.52e-02  1.23e-06  6.95e-04  3.61e-06  3.96e-06  5.68e-01  
 23  +4.2727e-01  +4.4696e-01  1.97e-02  6.75e-07  3.81e-04  8.61e-07  2.22e-06  8.29e-01  
 24  +4.2660e-01  +4.4447e-01  1.79e-02  6.12e-07  3.45e-04  6.22e-07  2.02e-06  3.76e-01  
 25  +4.2422e-01  +4.3604e-01  1.18e-02  4.03e-07  2.28e-04  2.59e-07  1.34e-06  7.87e-01  
 26  +4.2194e-01  +4.2833e-01  6.39e-03  2.17e-07  1.23e-04  1.28e-07  7.32e-07  6.11e-01  
 27  +4.2193e-01  +4.2828e-01  6.36e-03  2.16e-07  1.22e-04  1.26e-07  7.29e-07  3.20e-02  
 28  +4.2110e-01  +4.2543e-01  4.34e-03  1.48e-07  8.36e-05  6.79e-08  5.02e-07  8.04e-01  
 29  +4.2092e-01  +4.2486e-01  3.93e-03  1.34e-07  7.57e-05  6.05e-08  4.55e-07  2.55e-01  
 30  +4.2030e-01  +4.2277e-01  2.47e-03  8.42e-08  4.75e-05  3.49e-08  2.86e-07  9.90e-01  
 31  +4.1953e-01  +4.2026e-01  7.30e-04  2.48e-08  1.40e-05  1.02e-08  8.50e-08  7.43e-01  
 32  +4.1922e-01  +4.1927e-01  5.07e-05  1.73e-09  9.73e-07  7.06e-10  5.92e-09  9.65e-01  
 33  +4.1920e-01  +4.1920e-01  5.18e-07  1.76e-11  9.94e-09  7.20e-12  6.04e-11  9.90e-01  
 34  +4.1920e-01  +4.1920e-01  5.18e-09  1.76e-13  9.94e-11  7.20e-14  6.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7085648s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:35:03 PM: Optimal value: 4.192e-01
(CVXPY) Oct 06 04:35:03 PM: Compilation took 3.125e-01 seconds
(CVXPY) Oct 06 04:35:03 PM: Solver (including time spent in interface) took 1.782e+00 seconds
Iteration: 16, Objective: 0.4192
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:35:03 PM: Your problem has 25154 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:35:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:35:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:35:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:35:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:35:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:35:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:35:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:35:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:35:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:35:04 PM: Finished problem compilation (took 3.282e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25154
  constraints   = 50154
  nnz(P)        = 0
  nnz(A)        = 383766
  cones (total) = 1
    : Nonnegative = 1,  numel = 50154

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7815e-01  +5.4929e+03  5.49e+03  4.48e-01  1.86e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2941e-01  +6.0035e+02  6.00e+02  1.86e-01  9.95e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0858e-01  +1.5625e+02  1.56e+02  1.52e-01  8.24e+01  5.06e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0002e-01  +1.4800e+00  9.80e-01  2.93e-03  1.64e+00  2.75e-05  1.90e-01  2.03e-01  
  6  +5.0000e-01  +8.3233e-01  3.32e-01  9.92e-04  5.58e-01  1.05e-05  6.91e-02  6.41e-01  
  7  +4.9998e-01  +7.8296e-01  2.83e-01  8.41e-04  4.73e-01  1.85e-05  2.28e-02  7.52e-01  
  8  +4.9934e-01  +7.8405e-01  2.85e-01  3.46e-04  1.96e-01  2.98e-04  1.17e-03  9.76e-01  
  9  +4.9715e-01  +7.7584e-01  2.79e-01  9.43e-05  5.36e-02  1.21e-03  2.75e-04  7.66e-01  
 10  +4.9789e-01  +7.6501e-01  2.67e-01  9.15e-05  5.20e-02  8.85e-04  2.62e-04  2.71e-01  
 11  +4.9511e-01  +7.5398e-01  2.59e-01  4.04e-05  2.30e-02  1.89e-03  1.13e-04  5.80e-01  
 12  +4.9468e-01  +7.3056e-01  2.36e-01  2.53e-05  1.44e-02  1.61e-03  6.97e-05  7.16e-01  
 13  +4.9350e-01  +7.2302e-01  2.30e-01  2.02e-05  1.15e-02  1.67e-03  5.54e-05  3.10e-01  
 14  +4.9385e-01  +7.2052e-01  2.27e-01  1.95e-05  1.11e-02  1.39e-03  5.33e-05  1.99e-01  
 15  +4.8703e-01  +6.8616e-01  1.99e-01  9.78e-06  5.56e-03  1.57e-03  2.69e-05  7.14e-01  
 16  +4.6649e-01  +5.9561e-01  1.29e-01  4.81e-06  2.73e-03  9.34e-04  1.39e-05  6.01e-01  
 17  +4.6119e-01  +5.7481e-01  1.14e-01  4.24e-06  2.40e-03  7.20e-04  1.24e-05  1.74e-01  
 18  +4.5544e-01  +5.5266e-01  9.72e-02  3.61e-06  2.04e-03  5.28e-04  1.08e-05  2.22e-01  
 19  +4.4532e-01  +5.1419e-01  6.89e-02  2.51e-06  1.42e-03  2.72e-04  7.76e-06  4.32e-01  
 20  +4.3948e-01  +4.9214e-01  5.27e-02  1.87e-06  1.06e-03  1.32e-04  5.91e-06  5.06e-01  
 21  +4.3544e-01  +4.7725e-01  4.18e-02  1.47e-06  8.29e-04  8.59e-05  4.69e-06  3.50e-01  
 22  +4.3204e-01  +4.6481e-01  3.28e-02  1.14e-06  6.44e-04  5.80e-05  3.69e-06  3.25e-01  
 23  +4.2814e-01  +4.5021e-01  2.21e-02  7.57e-07  4.27e-04  1.76e-05  2.48e-06  7.18e-01  
 24  +4.2728e-01  +4.4675e-01  1.95e-02  6.65e-07  3.75e-04  6.67e-06  2.18e-06  6.56e-01  
 25  +4.2233e-01  +4.2980e-01  7.48e-03  2.56e-07  1.44e-04  2.15e-06  8.60e-07  6.74e-01  
 26  +4.2075e-01  +4.2436e-01  3.60e-03  1.23e-07  6.93e-05  8.61e-08  4.17e-07  9.90e-01  
 27  +4.1931e-01  +4.1960e-01  2.93e-04  1.00e-08  5.64e-06  6.82e-09  3.43e-08  9.23e-01  
 28  +4.1918e-01  +4.1920e-01  1.08e-05  3.67e-10  2.07e-07  1.80e-10  1.26e-09  9.89e-01  
 29  +4.1918e-01  +4.1918e-01  1.08e-07  3.68e-12  2.07e-09  1.80e-12  1.26e-11  9.90e-01  
 30  +4.1918e-01  +4.1918e-01  1.08e-09  3.69e-14  2.07e-11  1.81e-14  1.27e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.488285s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:35:05 PM: Optimal value: 4.192e-01
(CVXPY) Oct 06 04:35:05 PM: Compilation took 3.282e-01 seconds
(CVXPY) Oct 06 04:35:05 PM: Solver (including time spent in interface) took 1.563e+00 seconds
Iteration: 17, Objective: 0.4192
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:35:06 PM: Your problem has 25155 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:35:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:35:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:35:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:35:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:35:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:35:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:35:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:35:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:35:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:35:06 PM: Finished problem compilation (took 3.127e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25155
  constraints   = 50155
  nnz(P)        = 0
  nnz(A)        = 383874
  cones (total) = 1
    : Nonnegative = 1,  numel = 50155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7815e-01  +5.4929e+03  5.49e+03  4.48e-01  1.86e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2941e-01  +6.0033e+02  6.00e+02  1.86e-01  9.95e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0858e-01  +1.5625e+02  1.56e+02  1.52e-01  8.24e+01  5.06e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4737e+00  9.74e-01  2.91e-03  1.63e+00  2.75e-05  1.90e-01  2.04e-01  
  6  +5.0000e-01  +8.3119e-01  3.31e-01  9.89e-04  5.56e-01  1.06e-05  6.89e-02  6.42e-01  
  7  +4.9998e-01  +7.9088e-01  2.91e-01  8.66e-04  4.87e-01  1.77e-05  2.54e-02  7.09e-01  
  8  +4.9939e-01  +7.7420e-01  2.75e-01  3.61e-04  2.05e-01  2.75e-04  1.25e-03  9.74e-01  
  9  +4.9625e-01  +7.6319e-01  2.67e-01  7.06e-05  4.01e-02  1.59e-03  2.04e-04  8.37e-01  
 10  +4.9720e-01  +7.5528e-01  2.58e-01  6.86e-05  3.90e-02  1.16e-03  1.95e-04  2.81e-01  
 11  +4.9487e-01  +7.4590e-01  2.51e-01  3.77e-05  2.14e-02  1.96e-03  1.06e-04  4.82e-01  
 12  +4.9551e-01  +7.4095e-01  2.45e-01  3.55e-05  2.02e-02  1.61e-03  9.88e-05  2.51e-01  
 13  +4.9618e-01  +7.3821e-01  2.42e-01  3.52e-05  2.00e-02  1.31e-03  9.71e-05  1.86e-01  
 14  +4.9245e-01  +7.2219e-01  2.30e-01  1.83e-05  1.04e-02  2.12e-03  5.03e-05  5.36e-01  
 15  +4.9251e-01  +7.1438e-01  2.22e-01  1.62e-05  9.23e-03  1.49e-03  4.44e-05  4.07e-01  
 16  +4.8619e-01  +6.8248e-01  1.96e-01  9.89e-06  5.62e-03  1.40e-03  2.73e-05  5.82e-01  
 17  +4.6661e-01  +5.9681e-01  1.30e-01  4.96e-06  2.81e-03  8.78e-04  1.43e-05  5.85e-01  
 18  +4.6057e-01  +5.7294e-01  1.12e-01  4.27e-06  2.42e-03  6.50e-04  1.26e-05  2.02e-01  
 19  +4.5307e-01  +5.4392e-01  9.08e-02  3.41e-06  1.93e-03  4.04e-04  1.03e-05  3.24e-01  
 20  +4.4358e-01  +5.0797e-01  6.44e-02  2.35e-06  1.33e-03  2.28e-04  7.33e-06  3.97e-01  
 21  +4.3897e-01  +4.9008e-01  5.11e-02  1.81e-06  1.02e-03  8.42e-05  5.72e-06  6.37e-01  
 22  +4.3123e-01  +4.6164e-01  3.04e-02  1.05e-06  5.94e-04  1.60e-05  3.41e-06  8.17e-01  
 23  +4.3023e-01  +4.5788e-01  2.77e-02  9.52e-07  5.37e-04  1.16e-05  3.10e-06  2.89e-01  
 24  +4.2848e-01  +4.5165e-01  2.32e-02  7.96e-07  4.49e-04  8.83e-06  2.61e-06  2.44e-01  
 25  +4.2581e-01  +4.4165e-01  1.58e-02  5.40e-07  3.05e-04  6.06e-07  1.78e-06  9.90e-01  
 26  +4.2193e-01  +4.2852e-01  6.59e-03  2.25e-07  1.27e-04  2.17e-07  7.59e-07  6.73e-01  
 27  +4.2186e-01  +4.2825e-01  6.39e-03  2.18e-07  1.23e-04  1.98e-07  7.36e-07  1.35e-01  
 28  +4.2024e-01  +4.2274e-01  2.50e-03  8.55e-08  4.82e-05  3.69e-08  2.92e-07  9.90e-01  
 29  +4.1926e-01  +4.1953e-01  2.70e-04  9.23e-09  5.21e-06  3.97e-09  3.17e-08  8.99e-01  
 30  +4.1914e-01  +4.1915e-01  7.57e-06  2.59e-10  1.46e-07  1.06e-10  8.89e-10  9.90e-01  
 31  +4.1914e-01  +4.1914e-01  7.59e-08  2.59e-12  1.46e-09  1.07e-12  8.91e-12  9.90e-01  
 32  +4.1914e-01  +4.1914e-01  7.59e-10  2.60e-14  1.46e-11  1.07e-14  8.99e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6166843s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:35:08 PM: Optimal value: 4.191e-01
(CVXPY) Oct 06 04:35:08 PM: Compilation took 3.127e-01 seconds
(CVXPY) Oct 06 04:35:08 PM: Solver (including time spent in interface) took 1.703e+00 seconds
Iteration: 18, Objective: 0.4191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:35:08 PM: Your problem has 25156 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:35:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:35:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:35:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:35:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:35:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:35:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:35:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:35:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:35:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:35:08 PM: Finished problem compilation (took 2.969e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25156
  constraints   = 50156
  nnz(P)        = 0
  nnz(A)        = 383923
  cones (total) = 1
    : Nonnegative = 1,  numel = 50156

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7815e-01  +5.4929e+03  5.49e+03  4.48e-01  1.86e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2941e-01  +6.0033e+02  6.00e+02  1.86e-01  9.95e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0858e-01  +1.5624e+02  1.56e+02  1.52e-01  8.24e+01  5.06e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8605e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.55e-01  
  5  +5.0001e-01  +1.4618e+00  9.62e-01  2.87e-03  1.61e+00  2.75e-05  1.90e-01  2.07e-01  
  6  +5.0000e-01  +8.2868e-01  3.29e-01  9.82e-04  5.52e-01  1.07e-05  6.86e-02  6.44e-01  
  7  +4.9998e-01  +7.9060e-01  2.91e-01  8.65e-04  4.87e-01  1.81e-05  2.51e-02  7.11e-01  
  8  +4.9934e-01  +7.7354e-01  2.74e-01  3.44e-04  1.95e-01  2.96e-04  1.18e-03  9.76e-01  
  9  +4.9626e-01  +7.6272e-01  2.66e-01  7.18e-05  4.08e-02  1.59e-03  2.08e-04  8.23e-01  
 10  +4.9715e-01  +7.5553e-01  2.58e-01  7.02e-05  3.99e-02  1.19e-03  2.00e-04  2.59e-01  
 11  +4.9378e-01  +7.4255e-01  2.49e-01  3.24e-05  1.84e-02  2.35e-03  9.09e-05  5.67e-01  
 12  +4.9530e-01  +7.3654e-01  2.41e-01  3.13e-05  1.78e-02  1.59e-03  8.68e-05  3.34e-01  
 13  +4.9581e-01  +7.3464e-01  2.39e-01  3.11e-05  1.77e-02  1.35e-03  8.56e-05  1.48e-01  
 14  +4.9318e-01  +7.1891e-01  2.26e-01  1.81e-05  1.03e-02  1.70e-03  4.95e-05  5.83e-01  
 15  +4.9327e-01  +7.1835e-01  2.25e-01  1.80e-05  1.02e-02  1.61e-03  4.92e-05  5.27e-02  
 16  +4.8638e-01  +6.8222e-01  1.96e-01  9.30e-06  5.29e-03  1.50e-03  2.56e-05  7.70e-01  
 17  +4.6733e-01  +5.9912e-01  1.32e-01  5.05e-06  2.86e-03  8.90e-04  1.46e-05  5.34e-01  
 18  +4.6182e-01  +5.7733e-01  1.16e-01  4.43e-06  2.51e-03  6.36e-04  1.30e-05  2.20e-01  
 19  +4.5605e-01  +5.5503e-01  9.90e-02  3.75e-06  2.12e-03  4.62e-04  1.12e-05  2.31e-01  
 20  +4.4540e-01  +5.1449e-01  6.91e-02  2.54e-06  1.44e-03  2.30e-04  7.89e-06  4.51e-01  
 21  +4.3921e-01  +4.9123e-01  5.20e-02  1.86e-06  1.05e-03  1.13e-04  5.89e-06  5.01e-01  
 22  +4.3540e-01  +4.7718e-01  4.18e-02  1.48e-06  8.33e-04  7.51e-05  4.73e-06  3.35e-01  
 23  +4.3199e-01  +4.6471e-01  3.27e-02  1.14e-06  6.45e-04  4.92e-05  3.70e-06  3.48e-01  
 24  +4.2808e-01  +4.5012e-01  2.20e-02  7.57e-07  4.27e-04  1.49e-05  2.48e-06  7.19e-01  
 25  +4.2721e-01  +4.4662e-01  1.94e-02  6.64e-07  3.75e-04  5.50e-06  2.18e-06  6.67e-01  
 26  +4.2232e-01  +4.2988e-01  7.56e-03  2.59e-07  1.46e-04  1.80e-06  8.72e-07  6.70e-01  
 27  +4.2083e-01  +4.2472e-01  3.89e-03  1.33e-07  7.50e-05  2.22e-07  4.51e-07  9.08e-01  
 28  +4.1926e-01  +4.1954e-01  2.81e-04  9.59e-09  5.41e-06  1.50e-08  3.29e-08  9.33e-01  
 29  +4.1914e-01  +4.1916e-01  1.04e-05  3.57e-10  2.01e-07  2.87e-10  1.23e-09  9.87e-01  
 30  +4.1914e-01  +4.1914e-01  1.05e-07  3.58e-12  2.02e-09  2.87e-12  1.23e-11  9.90e-01  
 31  +4.1914e-01  +4.1914e-01  1.05e-09  3.58e-14  2.02e-11  2.90e-14  1.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.560233s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:35:10 PM: Optimal value: 4.191e-01
(CVXPY) Oct 06 04:35:10 PM: Compilation took 2.969e-01 seconds
(CVXPY) Oct 06 04:35:10 PM: Solver (including time spent in interface) took 1.641e+00 seconds
Iteration: 19, Objective: 0.4191
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:35:10 PM: Your problem has 25157 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:35:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:35:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:35:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:35:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:35:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:35:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:35:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:35:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:35:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:35:11 PM: Finished problem compilation (took 3.125e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25157
  constraints   = 50157
  nnz(P)        = 0
  nnz(A)        = 383953
  cones (total) = 1
    : Nonnegative = 1,  numel = 50157

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5005e+04  2.50e+04  9.94e-01  2.81e+02  1.00e+00  1.00e+00   ------   
  1  +5.7815e-01  +5.4929e+03  5.49e+03  4.48e-01  1.86e+02  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2941e-01  +6.0033e+02  6.00e+02  1.86e-01  9.95e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0858e-01  +1.5624e+02  1.56e+02  1.52e-01  8.24e+01  5.06e-05  2.65e-01  3.30e-01  
  4  +5.0144e-01  +1.8606e+01  1.81e+01  4.93e-02  2.67e+01  5.59e-06  1.95e-01  4.56e-01  
  5  +5.0001e-01  +1.4636e+00  9.64e-01  2.88e-03  1.61e+00  2.75e-05  1.90e-01  2.07e-01  
  6  +5.0000e-01  +8.2902e-01  3.29e-01  9.83e-04  5.53e-01  1.07e-05  6.86e-02  6.44e-01  
  7  +4.9998e-01  +7.9072e-01  2.91e-01  8.65e-04  4.87e-01  1.81e-05  2.52e-02  7.10e-01  
  8  +4.9935e-01  +7.7363e-01  2.74e-01  3.48e-04  1.97e-01  2.92e-04  1.19e-03  9.76e-01  
  9  +4.9614e-01  +7.6233e-01  2.66e-01  6.93e-05  3.93e-02  1.64e-03  2.00e-04  8.32e-01  
 10  +4.9707e-01  +7.5497e-01  2.58e-01  6.76e-05  3.84e-02  1.21e-03  1.92e-04  2.69e-01  
 11  +4.9390e-01  +7.4284e-01  2.49e-01  3.27e-05  1.86e-02  2.31e-03  9.18e-05  5.43e-01  
 12  +4.9549e-01  +7.3634e-01  2.41e-01  3.15e-05  1.79e-02  1.50e-03  8.72e-05  3.59e-01  
 13  +4.9645e-01  +7.3226e-01  2.36e-01  3.02e-05  1.72e-02  1.05e-03  8.27e-05  3.39e-01  
 14  +4.9357e-01  +7.1930e-01  2.26e-01  1.76e-05  1.00e-02  1.52e-03  4.80e-05  4.87e-01  
 15  +4.9367e-01  +7.1840e-01  2.25e-01  1.74e-05  9.91e-03  1.41e-03  4.75e-05  7.81e-02  
 16  +4.8591e-01  +6.7931e-01  1.93e-01  8.66e-06  4.92e-03  1.38e-03  2.38e-05  7.73e-01  
 17  +4.6695e-01  +5.9689e-01  1.30e-01  5.03e-06  2.85e-03  7.38e-04  1.45e-05  4.90e-01  
 18  +4.6175e-01  +5.7650e-01  1.15e-01  4.42e-06  2.50e-03  5.46e-04  1.30e-05  2.05e-01  
 19  +4.5579e-01  +5.5361e-01  9.78e-02  3.72e-06  2.11e-03  3.91e-04  1.12e-05  2.41e-01  
 20  +4.4499e-01  +5.1273e-01  6.77e-02  2.50e-06  1.41e-03  1.96e-04  7.76e-06  4.50e-01  
 21  +4.3921e-01  +4.9107e-01  5.19e-02  1.86e-06  1.05e-03  9.48e-05  5.88e-06  5.12e-01  
 22  +4.3514e-01  +4.7616e-01  4.10e-02  1.45e-06  8.18e-04  6.23e-05  4.64e-06  3.42e-01  
 23  +4.3191e-01  +4.6438e-01  3.25e-02  1.14e-06  6.41e-04  4.31e-05  3.68e-06  3.09e-01  
 24  +4.2798e-01  +4.4978e-01  2.18e-02  7.50e-07  4.23e-04  1.41e-05  2.46e-06  6.95e-01  
 25  +4.2705e-01  +4.4604e-01  1.90e-02  6.50e-07  3.66e-04  4.46e-06  2.14e-06  7.22e-01  
 26  +4.2228e-01  +4.2972e-01  7.44e-03  2.55e-07  1.44e-04  1.46e-06  8.57e-07  6.73e-01  
 27  +4.2080e-01  +4.2460e-01  3.81e-03  1.30e-07  7.33e-05  7.66e-08  4.41e-07  9.90e-01  
 28  +4.1941e-01  +4.2003e-01  6.16e-04  2.10e-08  1.19e-05  1.22e-08  7.21e-08  8.47e-01  
 29  +4.1915e-01  +4.1918e-01  2.76e-05  9.43e-10  5.32e-07  4.95e-10  3.24e-09  9.68e-01  
 30  +4.1914e-01  +4.1914e-01  2.84e-07  9.68e-12  5.46e-09  5.08e-12  3.33e-11  9.90e-01  
 31  +4.1914e-01  +4.1914e-01  2.84e-09  9.69e-14  5.46e-11  5.13e-14  3.36e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.577623s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:35:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:35:12 PM: Optimal value: 4.191e-01
(CVXPY) Oct 06 04:35:12 PM: Compilation took 3.125e-01 seconds
(CVXPY) Oct 06 04:35:12 PM: Solver (including time spent in interface) took 1.657e+00 seconds
FULL MODEL:
  Accruacy: 0.57722
  Our objective: 0.15444000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.14612)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.00084)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.00076)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.00044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.00056)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.00104)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.00048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.00084)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.00048)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.00024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.00024)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.00124)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.00116)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 62.56832528114319
Best over terms:
  Our final objective: 0.14612000000000003
    Its accruacy: 0.57306
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14612000000000003
  Highest accruacy: 0.57306
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

