Command:
python test_script.py -s constant_subclass -d 10 -n 10000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1514
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 10.

Computed total variation: 0.30720000000000003
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:03 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:03 PM: Finished problem compilation (took 9.376e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 65021
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7825e-01  +1.0987e+03  1.10e+03  4.43e-01  8.03e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2941e-01  +1.2046e+02  1.20e+02  1.78e-01  4.15e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0839e-01  +3.1305e+01  3.08e+01  1.24e-01  2.90e+01  5.02e-05  2.64e-01  3.41e-01  
  4  +5.0116e-01  +3.4407e+00  2.94e+00  2.00e-02  4.75e+00  6.10e-06  1.71e-01  5.83e-01  
  5  +5.0011e-01  +1.0073e+00  5.07e-01  3.40e-03  8.25e-01  4.49e-05  1.02e-01  9.90e-01  
  6  +4.9999e-01  +6.1300e-01  1.13e-01  7.53e-04  1.83e-01  2.39e-05  1.88e-02  8.29e-01  
  7  +4.9784e-01  +8.2999e-01  3.32e-01  3.54e-04  8.69e-02  1.08e-03  1.13e-03  9.79e-01  
  8  +4.9156e-01  +7.7221e-01  2.81e-01  9.34e-05  2.29e-02  3.16e-03  2.88e-04  7.49e-01  
  9  +4.8578e-01  +6.0638e-01  1.21e-01  3.94e-05  9.65e-03  3.15e-05  1.26e-04  7.95e-01  
 10  +4.8055e-01  +5.6946e-01  8.89e-02  2.62e-05  6.41e-03  1.61e-05  8.56e-05  5.09e-01  
 11  +4.7039e-01  +5.0814e-01  3.77e-02  9.73e-06  2.38e-03  1.74e-07  3.36e-05  9.75e-01  
 12  +4.6098e-01  +4.6419e-01  3.20e-03  7.65e-07  1.87e-04  5.39e-08  2.83e-06  9.45e-01  
 13  +4.5988e-01  +4.6013e-01  2.55e-04  5.33e-08  1.30e-05  7.84e-09  2.27e-07  9.60e-01  
 14  +4.5980e-01  +4.5980e-01  2.58e-06  5.39e-10  1.32e-07  7.94e-11  2.30e-09  9.90e-01  
 15  +4.5980e-01  +4.5980e-01  2.58e-08  5.39e-12  1.32e-09  7.94e-13  2.30e-11  9.90e-01  
 16  +4.5980e-01  +4.5980e-01  2.58e-10  5.40e-14  1.32e-11  8.31e-15  2.40e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.3205ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:03 PM: Optimal value: 4.598e-01
(CVXPY) Oct 06 04:29:03 PM: Compilation took 9.376e-02 seconds
(CVXPY) Oct 06 04:29:03 PM: Solver (including time spent in interface) took 1.408e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4598
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:04 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:04 PM: Finished problem compilation (took 4.705e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 73909
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7819e-01  +1.0990e+03  1.10e+03  4.43e-01  8.29e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2926e-01  +1.2021e+02  1.20e+02  1.78e-01  4.28e+01  1.78e-02  2.90e-01  9.55e-01  
  3  +5.0832e-01  +3.1146e+01  3.06e+01  1.24e-01  2.98e+01  5.03e-05  2.63e-01  3.48e-01  
  4  +5.0112e-01  +3.3247e+00  2.82e+00  1.93e-02  4.72e+00  6.21e-06  1.65e-01  6.10e-01  
  5  +5.0018e-01  +1.1700e+00  6.70e-01  4.50e-03  1.12e+00  4.16e-05  9.31e-02  9.20e-01  
  6  +5.0003e-01  +7.3288e-01  2.33e-01  1.54e-03  3.87e-01  3.19e-05  2.32e-02  8.76e-01  
  7  +4.9763e-01  +8.9246e-01  3.95e-01  3.13e-04  7.97e-02  1.19e-03  8.97e-04  9.78e-01  
  8  +4.9189e-01  +8.2549e-01  3.34e-01  1.03e-04  2.62e-02  2.70e-03  2.90e-04  6.95e-01  
  9  +4.9022e-01  +7.9163e-01  3.01e-01  8.85e-05  2.25e-02  2.23e-03  2.50e-04  2.15e-01  
 10  +4.8957e-01  +7.4783e-01  2.58e-01  7.35e-05  1.87e-02  1.32e-03  2.06e-04  3.81e-01  
 11  +4.9109e-01  +6.9803e-01  2.07e-01  6.21e-05  1.58e-02  1.04e-04  1.72e-04  7.27e-01  
 12  +4.9018e-01  +6.9081e-01  2.01e-01  5.82e-05  1.48e-02  9.35e-05  1.61e-04  1.44e-01  
 13  +4.8778e-01  +6.6079e-01  1.73e-01  4.57e-05  1.16e-02  1.53e-05  1.26e-04  8.31e-01  
 14  +4.8320e-01  +6.3983e-01  1.57e-01  3.47e-05  8.81e-03  1.42e-05  9.64e-05  3.80e-01  
 15  +4.7851e-01  +6.2518e-01  1.47e-01  3.37e-05  8.55e-03  1.19e-05  9.60e-05  8.29e-02  
 16  +4.5633e-01  +5.3187e-01  7.55e-02  1.29e-05  3.27e-03  6.70e-06  3.80e-05  7.00e-01  
 17  +4.3009e-01  +4.4232e-01  1.22e-02  1.96e-06  4.95e-04  3.99e-07  6.18e-06  9.65e-01  
 18  +4.2447e-01  +4.2462e-01  1.51e-04  2.38e-08  6.01e-06  4.26e-09  7.63e-08  9.89e-01  
 19  +4.2440e-01  +4.2440e-01  1.51e-06  2.38e-10  6.00e-08  4.26e-11  7.63e-10  9.90e-01  
 20  +4.2440e-01  +4.2440e-01  1.51e-08  2.38e-12  6.01e-10  4.29e-13  7.69e-12  9.90e-01  
 21  +4.2440e-01  +4.2440e-01  1.51e-10  2.38e-14  6.01e-12  4.33e-15  7.75e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 183.9402ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:04 PM: Optimal value: 4.244e-01
(CVXPY) Oct 06 04:29:04 PM: Compilation took 4.705e-02 seconds
(CVXPY) Oct 06 04:29:04 PM: Solver (including time spent in interface) took 2.048e-01 seconds
Iteration: 2, Objective: 0.4244
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:04 PM: Your problem has 5041 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:04 PM: Finished problem compilation (took 4.643e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5041
  constraints   = 10041
  nnz(P)        = 0
  nnz(A)        = 75937
  cones (total) = 1
    : Nonnegative = 1,  numel = 10041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0014e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7817e-01  +1.0989e+03  1.10e+03  4.43e-01  8.29e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2922e-01  +1.2014e+02  1.20e+02  1.78e-01  4.27e+01  1.78e-02  2.90e-01  9.56e-01  
  3  +5.0830e-01  +3.1110e+01  3.06e+01  1.24e-01  2.98e+01  5.03e-05  2.63e-01  3.50e-01  
  4  +5.0111e-01  +3.3134e+00  2.81e+00  1.92e-02  4.71e+00  6.23e-06  1.64e-01  6.13e-01  
  5  +5.0020e-01  +1.2154e+00  7.15e-01  4.81e-03  1.20e+00  4.14e-05  9.34e-02  8.95e-01  
  6  +5.0006e-01  +8.3249e-01  3.32e-01  2.21e-03  5.54e-01  3.53e-05  3.20e-02  7.69e-01  
  7  +4.9963e-01  +7.9238e-01  2.93e-01  9.71e-04  2.46e-01  2.30e-04  3.29e-03  9.18e-01  
  8  +4.9369e-01  +7.6512e-01  2.71e-01  8.71e-05  2.22e-02  2.78e-03  2.40e-04  9.27e-01  
  9  +4.9089e-01  +7.4143e-01  2.51e-01  6.75e-05  1.72e-02  2.65e-03  1.86e-04  3.18e-01  
 10  +4.9076e-01  +7.2759e-01  2.37e-01  6.34e-05  1.62e-02  1.84e-03  1.74e-04  2.82e-01  
 11  +4.8816e-01  +7.0855e-01  2.20e-01  5.26e-05  1.34e-02  1.49e-03  1.45e-04  3.27e-01  
 12  +4.8708e-01  +7.0119e-01  2.14e-01  5.21e-05  1.33e-02  1.29e-03  1.44e-04  7.74e-02  
 13  +4.7582e-01  +6.4032e-01  1.64e-01  3.40e-05  8.63e-03  5.12e-04  9.61e-05  6.48e-01  
 14  +4.4729e-01  +5.1838e-01  7.11e-02  1.31e-05  3.32e-03  1.76e-05  4.02e-05  8.14e-01  
 15  +4.3342e-01  +4.6872e-01  3.53e-02  6.14e-06  1.55e-03  6.15e-06  1.95e-05  6.73e-01  
 16  +4.3329e-01  +4.6822e-01  3.49e-02  6.08e-06  1.54e-03  5.87e-06  1.94e-05  6.76e-02  
 17  +4.3214e-01  +4.6407e-01  3.19e-02  5.44e-06  1.37e-03  4.25e-06  1.73e-05  4.56e-01  
 18  +4.2225e-01  +4.2990e-01  7.65e-03  1.28e-06  3.22e-04  8.31e-07  4.20e-06  8.54e-01  
 19  +4.2051e-01  +4.2421e-01  3.70e-03  6.12e-07  1.54e-04  3.43e-07  2.03e-06  7.08e-01  
 20  +4.1906e-01  +4.1941e-01  3.58e-04  5.90e-08  1.49e-05  3.31e-08  1.97e-07  9.09e-01  
 21  +4.1890e-01  +4.1891e-01  3.64e-06  5.99e-10  1.51e-07  3.36e-10  2.00e-09  9.90e-01  
 22  +4.1890e-01  +4.1890e-01  3.64e-08  5.99e-12  1.51e-09  3.36e-12  2.00e-11  9.90e-01  
 23  +4.1890e-01  +4.1890e-01  3.64e-10  5.99e-14  1.51e-11  3.36e-14  2.00e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.0185ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:04 PM: Optimal value: 4.189e-01
(CVXPY) Oct 06 04:29:04 PM: Compilation took 4.643e-02 seconds
(CVXPY) Oct 06 04:29:04 PM: Solver (including time spent in interface) took 2.206e-01 seconds
Iteration: 3, Objective: 0.4189
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:04 PM: Your problem has 5051 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:05 PM: Finished problem compilation (took 6.400e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5051
  constraints   = 10051
  nnz(P)        = 0
  nnz(A)        = 76779
  cones (total) = 1
    : Nonnegative = 1,  numel = 10051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7814e-01  +1.0989e+03  1.10e+03  4.43e-01  8.28e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2919e-01  +1.2007e+02  1.20e+02  1.78e-01  4.26e+01  1.78e-02  2.90e-01  9.56e-01  
  3  +5.0829e-01  +3.1085e+01  3.06e+01  1.24e-01  2.97e+01  5.04e-05  2.63e-01  3.51e-01  
  4  +5.0111e-01  +3.3084e+00  2.81e+00  1.92e-02  4.70e+00  6.24e-06  1.63e-01  6.15e-01  
  5  +5.0017e-01  +1.1463e+00  6.46e-01  4.34e-03  1.08e+00  4.29e-05  8.61e-02  9.75e-01  
  6  +5.0004e-01  +8.0956e-01  3.10e-01  2.05e-03  5.13e-01  4.17e-05  2.60e-02  7.67e-01  
  7  +4.9852e-01  +7.8110e-01  2.83e-01  3.67e-04  9.35e-02  7.50e-04  1.06e-03  9.71e-01  
  8  +4.9184e-01  +7.5160e-01  2.60e-01  7.72e-05  1.97e-02  3.24e-03  2.12e-04  8.03e-01  
  9  +4.8958e-01  +7.4046e-01  2.51e-01  6.28e-05  1.60e-02  3.34e-03  1.72e-04  2.58e-01  
 10  +4.8626e-01  +7.1041e-01  2.24e-01  5.20e-05  1.33e-02  2.11e-03  1.43e-04  4.18e-01  
 11  +4.6982e-01  +6.2459e-01  1.55e-01  3.06e-05  7.77e-03  9.48e-04  8.77e-05  5.89e-01  
 12  +4.3892e-01  +4.9485e-01  5.59e-02  1.02e-05  2.58e-03  8.99e-05  3.20e-05  7.52e-01  
 13  +4.2925e-01  +4.5970e-01  3.04e-02  5.32e-06  1.34e-03  3.01e-05  1.71e-05  6.75e-01  
 14  +4.2847e-01  +4.5694e-01  2.85e-02  4.98e-06  1.26e-03  2.28e-05  1.61e-05  2.36e-01  
 15  +4.2410e-01  +4.4150e-01  1.74e-02  3.00e-06  7.56e-04  1.18e-05  9.82e-06  4.99e-01  
 16  +4.1946e-01  +4.2542e-01  5.96e-03  1.01e-06  2.55e-04  2.42e-06  3.37e-06  8.12e-01  
 17  +4.1724e-01  +4.1780e-01  5.56e-04  9.41e-08  2.37e-05  1.64e-07  3.20e-07  9.33e-01  
 18  +4.1700e-01  +4.1701e-01  7.64e-06  1.29e-09  3.25e-07  1.80e-09  4.43e-09  9.89e-01  
 19  +4.1700e-01  +4.1700e-01  7.64e-08  1.29e-11  3.25e-09  1.80e-11  4.43e-11  9.90e-01  
 20  +4.1700e-01  +4.1700e-01  7.65e-10  1.29e-13  3.26e-11  1.91e-13  4.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 186.766ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:05 PM: Optimal value: 4.170e-01
(CVXPY) Oct 06 04:29:05 PM: Compilation took 6.400e-02 seconds
(CVXPY) Oct 06 04:29:05 PM: Solver (including time spent in interface) took 2.044e-01 seconds
Iteration: 4, Objective: 0.4170
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:05 PM: Your problem has 5061 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:05 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5061
  constraints   = 10061
  nnz(P)        = 0
  nnz(A)        = 77625
  cones (total) = 1
    : Nonnegative = 1,  numel = 10061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0016e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7811e-01  +1.0988e+03  1.10e+03  4.44e-01  8.28e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2916e-01  +1.2002e+02  1.19e+02  1.78e-01  4.25e+01  1.78e-02  2.90e-01  9.57e-01  
  3  +5.0829e-01  +3.1061e+01  3.06e+01  1.24e-01  2.96e+01  5.04e-05  2.62e-01  3.52e-01  
  4  +5.0111e-01  +3.3009e+00  2.80e+00  1.91e-02  4.69e+00  6.25e-06  1.63e-01  6.17e-01  
  5  +5.0028e-01  +1.4073e+00  9.07e-01  6.12e-03  1.52e+00  3.90e-05  1.02e-01  7.58e-01  
  6  +5.0006e-01  +8.0625e-01  3.06e-01  2.04e-03  5.11e-01  3.16e-05  3.12e-02  7.27e-01  
  7  +4.9942e-01  +8.0628e-01  3.07e-01  7.66e-04  1.95e-01  3.29e-04  2.37e-03  9.45e-01  
  8  +4.9116e-01  +7.7815e-01  2.87e-01  6.75e-05  1.72e-02  3.82e-03  1.83e-04  9.23e-01  
  9  +4.8599e-01  +7.4264e-01  2.57e-01  5.52e-05  1.41e-02  3.23e-03  1.51e-04  2.53e-01  
 10  +4.8014e-01  +7.0587e-01  2.26e-01  4.73e-05  1.20e-02  2.43e-03  1.32e-04  2.17e-01  
 11  +4.6359e-01  +6.0580e-01  1.42e-01  3.03e-05  7.67e-03  1.49e-04  8.86e-05  7.03e-01  
 12  +4.4661e-01  +5.3656e-01  9.00e-02  1.74e-05  4.39e-03  7.34e-05  5.32e-05  4.89e-01  
 13  +4.4251e-01  +5.2004e-01  7.75e-02  1.46e-05  3.68e-03  4.46e-05  4.49e-05  4.04e-01  
 14  +4.3426e-01  +4.8847e-01  5.42e-02  9.81e-06  2.48e-03  2.28e-05  3.10e-05  5.02e-01  
 15  +4.2240e-01  +4.4403e-01  2.16e-02  3.71e-06  9.36e-04  3.79e-06  1.21e-05  8.82e-01  
 16  +4.2076e-01  +4.3823e-01  1.75e-02  2.96e-06  7.45e-04  2.44e-06  9.67e-06  4.83e-01  
 17  +4.1547e-01  +4.2001e-01  4.54e-03  7.60e-07  1.92e-04  6.08e-07  2.54e-06  7.59e-01  
 18  +4.1409e-01  +4.1518e-01  1.09e-03  1.83e-07  4.61e-05  8.23e-08  6.15e-07  9.90e-01  
 19  +4.1361e-01  +4.1362e-01  1.19e-05  1.99e-09  5.03e-07  8.94e-10  6.72e-09  9.89e-01  
 20  +4.1360e-01  +4.1360e-01  1.19e-07  2.00e-11  5.03e-09  8.94e-12  6.73e-11  9.90e-01  
 21  +4.1360e-01  +4.1360e-01  1.19e-09  2.00e-13  5.03e-11  8.95e-14  6.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 187.209ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:05 PM: Optimal value: 4.136e-01
(CVXPY) Oct 06 04:29:05 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:29:05 PM: Solver (including time spent in interface) took 2.033e-01 seconds
Iteration: 5, Objective: 0.4136
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:05 PM: Your problem has 5071 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:06 PM: Finished problem compilation (took 4.744e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5071
  constraints   = 10071
  nnz(P)        = 0
  nnz(A)        = 78170
  cones (total) = 1
    : Nonnegative = 1,  numel = 10071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7801e-01  +1.0988e+03  1.10e+03  4.44e-01  8.27e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2910e-01  +1.1991e+02  1.19e+02  1.78e-01  4.24e+01  1.79e-02  2.89e-01  9.58e-01  
  3  +5.0827e-01  +3.1032e+01  3.05e+01  1.24e-01  2.96e+01  5.05e-05  2.62e-01  3.54e-01  
  4  +5.0111e-01  +3.2969e+00  2.80e+00  1.91e-02  4.68e+00  6.27e-06  1.62e-01  6.19e-01  
  5  +5.0028e-01  +1.4116e+00  9.11e-01  6.15e-03  1.53e+00  3.99e-05  9.94e-02  7.76e-01  
  6  +5.0004e-01  +7.8629e-01  2.86e-01  1.90e-03  4.76e-01  3.47e-05  2.51e-02  8.42e-01  
  7  +4.9884e-01  +8.3276e-01  3.34e-01  4.91e-04  1.25e-01  6.04e-04  1.41e-03  9.61e-01  
  8  +4.9249e-01  +8.0550e-01  3.13e-01  9.21e-05  2.35e-02  3.06e-03  2.49e-04  8.25e-01  
  9  +4.8826e-01  +7.7849e-01  2.90e-01  7.00e-05  1.78e-02  3.14e-03  1.90e-04  2.91e-01  
 10  +4.8335e-01  +7.2737e-01  2.44e-01  5.70e-05  1.45e-02  1.58e-03  1.57e-04  4.46e-01  
 11  +4.6461e-01  +6.1611e-01  1.52e-01  3.18e-05  8.05e-03  1.69e-05  9.20e-05  8.54e-01  
 12  +4.4385e-01  +5.3318e-01  8.93e-02  1.71e-05  4.33e-03  8.32e-06  5.25e-05  4.92e-01  
 13  +4.3122e-01  +4.8522e-01  5.40e-02  9.69e-06  2.45e-03  3.32e-06  3.07e-05  9.90e-01  
 14  +4.1950e-01  +4.4244e-01  2.29e-02  4.01e-06  1.01e-03  1.40e-06  1.32e-05  6.15e-01  
 15  +4.1833e-01  +4.3835e-01  2.00e-02  3.46e-06  8.71e-04  1.25e-06  1.14e-05  2.46e-01  
 16  +4.1340e-01  +4.2115e-01  7.76e-03  1.31e-06  3.31e-04  5.07e-07  4.42e-06  7.42e-01  
 17  +4.1045e-01  +4.1100e-01  5.56e-04  9.37e-08  2.36e-05  3.88e-08  3.20e-07  9.90e-01  
 18  +4.1020e-01  +4.1021e-01  5.71e-06  9.62e-10  2.42e-07  3.99e-10  3.29e-09  9.90e-01  
 19  +4.1020e-01  +4.1020e-01  5.71e-08  9.62e-12  2.42e-09  3.99e-12  3.29e-11  9.90e-01  
 20  +4.1020e-01  +4.1020e-01  5.71e-10  9.63e-14  2.42e-11  3.99e-14  3.30e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 174.446ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:06 PM: Optimal value: 4.102e-01
(CVXPY) Oct 06 04:29:06 PM: Compilation took 4.744e-02 seconds
(CVXPY) Oct 06 04:29:06 PM: Solver (including time spent in interface) took 1.876e-01 seconds
Iteration: 6, Objective: 0.4102
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:06 PM: Your problem has 5081 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:06 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5081
  constraints   = 10081
  nnz(P)        = 0
  nnz(A)        = 79165
  cones (total) = 1
    : Nonnegative = 1,  numel = 10081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7795e-01  +1.0988e+03  1.10e+03  4.44e-01  8.27e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2905e-01  +1.1981e+02  1.19e+02  1.78e-01  4.23e+01  1.79e-02  2.89e-01  9.58e-01  
  3  +5.0826e-01  +3.1000e+01  3.05e+01  1.23e-01  2.95e+01  5.06e-05  2.61e-01  3.56e-01  
  4  +5.0110e-01  +3.2899e+00  2.79e+00  1.91e-02  4.67e+00  6.28e-06  1.61e-01  6.22e-01  
  5  +5.0032e-01  +1.5117e+00  1.01e+00  6.83e-03  1.70e+00  3.89e-05  1.02e-01  7.23e-01  
  6  +5.0007e-01  +8.4797e-01  3.48e-01  2.31e-03  5.80e-01  3.48e-05  3.13e-02  7.17e-01  
  7  +4.9944e-01  +8.6289e-01  3.63e-01  8.95e-04  2.28e-01  3.28e-04  2.73e-03  9.42e-01  
  8  +4.9268e-01  +8.2863e-01  3.36e-01  9.49e-05  2.43e-02  3.10e-03  2.56e-04  9.07e-01  
  9  +4.9028e-01  +8.0790e-01  3.18e-01  8.18e-05  2.09e-02  2.87e-03  2.21e-04  2.06e-01  
 10  +4.8848e-01  +7.8175e-01  2.93e-01  7.03e-05  1.79e-02  2.03e-03  1.91e-04  3.51e-01  
 11  +4.8611e-01  +7.5178e-01  2.66e-01  6.69e-05  1.71e-02  1.20e-03  1.83e-04  2.67e-01  
 12  +4.7928e-01  +7.1696e-01  2.38e-01  5.36e-05  1.36e-02  1.08e-03  1.49e-04  2.27e-01  
 13  +4.5879e-01  +6.0460e-01  1.46e-01  3.04e-05  7.71e-03  1.10e-05  8.95e-05  8.15e-01  
 14  +4.3815e-01  +5.2204e-01  8.39e-02  1.60e-05  4.03e-03  5.57e-06  4.98e-05  5.05e-01  
 15  +4.2851e-01  +4.8479e-01  5.63e-02  1.00e-05  2.53e-03  3.67e-06  3.20e-05  9.90e-01  
 16  +4.2391e-01  +4.6805e-01  4.41e-02  7.79e-06  1.96e-03  2.88e-06  2.53e-05  2.54e-01  
 17  +4.1545e-01  +4.3680e-01  2.14e-02  3.68e-06  9.28e-04  1.54e-06  1.23e-05  9.90e-01  
 18  +4.0852e-01  +4.1274e-01  4.22e-03  7.26e-07  1.83e-04  3.00e-07  2.51e-06  8.14e-01  
 19  +4.0683e-01  +4.0691e-01  7.95e-05  1.37e-08  3.45e-06  5.53e-09  4.77e-08  9.83e-01  
 20  +4.0680e-01  +4.0680e-01  7.95e-07  1.37e-10  3.45e-08  5.53e-11  4.77e-10  9.90e-01  
 21  +4.0680e-01  +4.0680e-01  7.95e-09  1.37e-12  3.45e-10  5.53e-13  4.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 195.8014ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:06 PM: Optimal value: 4.068e-01
(CVXPY) Oct 06 04:29:06 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:06 PM: Solver (including time spent in interface) took 2.037e-01 seconds
Iteration: 7, Objective: 0.4068
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:06 PM: Your problem has 5091 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:06 PM: Finished problem compilation (took 6.924e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5091
  constraints   = 10091
  nnz(P)        = 0
  nnz(A)        = 79587
  cones (total) = 1
    : Nonnegative = 1,  numel = 10091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7789e-01  +1.0988e+03  1.10e+03  4.44e-01  8.26e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2900e-01  +1.1972e+02  1.19e+02  1.78e-01  4.22e+01  1.79e-02  2.89e-01  9.59e-01  
  3  +5.0825e-01  +3.0973e+01  3.05e+01  1.23e-01  2.94e+01  5.06e-05  2.61e-01  3.58e-01  
  4  +5.0110e-01  +3.2870e+00  2.79e+00  1.91e-02  4.66e+00  6.29e-06  1.60e-01  6.23e-01  
  5  +5.0034e-01  +1.5430e+00  1.04e+00  7.04e-03  1.75e+00  3.86e-05  1.02e-01  7.11e-01  
  6  +5.0008e-01  +8.8459e-01  3.85e-01  2.56e-03  6.41e-01  3.55e-05  3.38e-02  6.90e-01  
  7  +4.9928e-01  +8.8483e-01  3.86e-01  7.62e-04  1.94e-01  4.05e-04  2.24e-03  9.73e-01  
  8  +4.9213e-01  +8.4526e-01  3.53e-01  9.16e-05  2.34e-02  3.22e-03  2.46e-04  8.92e-01  
  9  +4.8687e-01  +7.9354e-01  3.07e-01  7.08e-05  1.81e-02  2.42e-03  1.92e-04  3.64e-01  
 10  +4.8615e-01  +7.8655e-01  3.00e-01  6.89e-05  1.76e-02  2.24e-03  1.87e-04  7.06e-02  
 11  +4.7710e-01  +6.9889e-01  2.22e-01  4.94e-05  1.26e-02  1.25e-04  1.37e-04  8.00e-01  
 12  +4.5848e-01  +6.1352e-01  1.55e-01  3.13e-05  7.92e-03  6.84e-05  9.13e-05  4.37e-01  
 13  +4.4125e-01  +5.4166e-01  1.00e-01  1.92e-05  4.86e-03  3.53e-05  5.91e-05  4.28e-01  
 14  +4.2576e-01  +4.8013e-01  5.44e-02  9.89e-06  2.49e-03  1.20e-05  3.19e-05  6.60e-01  
 15  +4.2144e-01  +4.6377e-01  4.23e-02  7.57e-06  1.91e-03  8.59e-06  2.47e-05  3.13e-01  
 16  +4.1478e-01  +4.3778e-01  2.30e-02  3.99e-06  1.01e-03  1.78e-06  1.33e-05  9.90e-01  
 17  +4.0783e-01  +4.1353e-01  5.70e-03  9.85e-07  2.48e-04  4.33e-07  3.40e-06  7.84e-01  
 18  +4.0555e-01  +4.0568e-01  1.25e-04  2.16e-08  5.45e-06  9.23e-09  7.57e-08  9.79e-01  
 19  +4.0550e-01  +4.0550e-01  1.25e-06  2.17e-10  5.46e-08  9.24e-11  7.58e-10  9.90e-01  
 20  +4.0550e-01  +4.0550e-01  1.25e-08  2.17e-12  5.46e-10  9.24e-13  7.58e-12  9.90e-01  
 21  +4.0550e-01  +4.0550e-01  1.25e-10  2.17e-14  5.46e-12  9.25e-15  7.59e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 187.42ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:07 PM: Optimal value: 4.055e-01
(CVXPY) Oct 06 04:29:07 PM: Compilation took 6.924e-02 seconds
(CVXPY) Oct 06 04:29:07 PM: Solver (including time spent in interface) took 1.984e-01 seconds
Iteration: 8, Objective: 0.4055
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:07 PM: Your problem has 5101 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:07 PM: Finished problem compilation (took 4.689e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5101
  constraints   = 10101
  nnz(P)        = 0
  nnz(A)        = 80110
  cones (total) = 1
    : Nonnegative = 1,  numel = 10101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7781e-01  +1.0988e+03  1.10e+03  4.44e-01  8.25e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2895e-01  +1.1961e+02  1.19e+02  1.78e-01  4.21e+01  1.79e-02  2.88e-01  9.60e-01  
  3  +5.0824e-01  +3.0939e+01  3.04e+01  1.23e-01  2.94e+01  5.07e-05  2.60e-01  3.60e-01  
  4  +5.0110e-01  +3.2832e+00  2.78e+00  1.90e-02  4.66e+00  6.30e-06  1.59e-01  6.25e-01  
  5  +5.0034e-01  +1.5558e+00  1.06e+00  7.13e-03  1.77e+00  3.90e-05  1.01e-01  7.19e-01  
  6  +5.0008e-01  +8.9717e-01  3.97e-01  2.64e-03  6.61e-01  3.73e-05  3.26e-02  6.94e-01  
  7  +4.9927e-01  +8.9699e-01  3.98e-01  7.81e-04  1.99e-01  4.12e-04  2.29e-03  9.60e-01  
  8  +4.9211e-01  +8.5642e-01  3.64e-01  9.55e-05  2.44e-02  3.21e-03  2.56e-04  8.90e-01  
  9  +4.8945e-01  +8.2424e-01  3.35e-01  8.05e-05  2.06e-02  2.46e-03  2.16e-04  3.20e-01  
 10  +4.8650e-01  +8.0102e-01  3.15e-01  7.10e-05  1.81e-02  2.15e-03  1.92e-04  1.97e-01  
 11  +4.8013e-01  +7.2787e-01  2.48e-01  6.28e-05  1.60e-02  3.19e-04  1.74e-04  5.63e-01  
 12  +4.5574e-01  +6.1150e-01  1.56e-01  3.04e-05  7.69e-03  1.68e-04  8.87e-05  6.17e-01  
 13  +4.4234e-01  +5.5504e-01  1.13e-01  2.16e-05  5.46e-03  9.22e-05  6.57e-05  3.76e-01  
 14  +4.2311e-01  +4.7676e-01  5.36e-02  9.87e-06  2.49e-03  2.17e-05  3.19e-05  7.16e-01  
 15  +4.1732e-01  +4.5451e-01  3.72e-02  6.74e-06  1.70e-03  1.34e-05  2.22e-05  3.93e-01  
 16  +4.0737e-01  +4.1660e-01  9.23e-03  1.63e-06  4.11e-04  7.67e-07  5.59e-06  9.90e-01  
 17  +4.0418e-01  +4.0553e-01  1.36e-03  2.38e-07  5.99e-05  9.75e-08  8.36e-07  9.53e-01  
 18  +4.0361e-01  +4.0363e-01  2.30e-05  4.03e-09  1.01e-06  1.56e-09  1.43e-08  9.90e-01  
 19  +4.0360e-01  +4.0360e-01  2.31e-07  4.03e-11  1.01e-08  1.56e-11  1.43e-10  9.90e-01  
 20  +4.0360e-01  +4.0360e-01  2.31e-09  4.03e-13  1.01e-10  1.56e-13  1.43e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 183.0783ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:07 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:07 PM: Optimal value: 4.036e-01
(CVXPY) Oct 06 04:29:07 PM: Compilation took 4.689e-02 seconds
(CVXPY) Oct 06 04:29:07 PM: Solver (including time spent in interface) took 2.043e-01 seconds
Iteration: 9, Objective: 0.4036
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:07 PM: Your problem has 5111 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:07 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:07 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:07 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:07 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:07 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:07 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:07 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:07 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:07 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:07 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:07 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:07 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5111
  constraints   = 10111
  nnz(P)        = 0
  nnz(A)        = 81025
  cones (total) = 1
    : Nonnegative = 1,  numel = 10111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7775e-01  +1.0988e+03  1.10e+03  4.44e-01  8.25e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2889e-01  +1.1950e+02  1.19e+02  1.77e-01  4.20e+01  1.79e-02  2.88e-01  9.61e-01  
  3  +5.0823e-01  +3.0906e+01  3.04e+01  1.23e-01  2.93e+01  5.08e-05  2.60e-01  3.62e-01  
  4  +5.0110e-01  +3.2776e+00  2.78e+00  1.90e-02  4.65e+00  6.31e-06  1.59e-01  6.27e-01  
  5  +5.0032e-01  +1.5228e+00  1.02e+00  6.91e-03  1.72e+00  4.06e-05  9.60e-02  7.62e-01  
  6  +5.0006e-01  +8.7601e-01  3.76e-01  2.48e-03  6.21e-01  4.17e-05  2.65e-02  7.48e-01  
  7  +4.9826e-01  +9.2555e-01  4.27e-01  4.23e-04  1.08e-01  8.87e-04  1.17e-03  9.76e-01  
  8  +4.9253e-01  +8.8002e-01  3.87e-01  1.22e-04  3.11e-02  2.66e-03  3.26e-04  7.34e-01  
  9  +4.8902e-01  +8.4348e-01  3.54e-01  9.35e-05  2.39e-02  2.37e-03  2.52e-04  3.47e-01  
 10  +4.8598e-01  +8.1367e-01  3.28e-01  7.94e-05  2.03e-02  1.96e-03  2.15e-04  2.68e-01  
 11  +4.8026e-01  +7.3155e-01  2.51e-01  6.72e-05  1.71e-02  1.75e-05  1.86e-04  7.17e-01  
 12  +4.5598e-01  +6.1783e-01  1.62e-01  3.23e-05  8.19e-03  1.21e-05  9.44e-05  6.13e-01  
 13  +4.3603e-01  +5.3335e-01  9.73e-02  1.90e-05  4.79e-03  5.66e-06  5.92e-05  6.20e-01  
 14  +4.1860e-01  +4.6369e-01  4.51e-02  8.43e-06  2.12e-03  2.43e-06  2.78e-05  5.82e-01  
 15  +4.1155e-01  +4.3576e-01  2.42e-02  4.37e-06  1.10e-03  1.56e-06  1.47e-05  8.92e-01  
 16  +4.0386e-01  +4.0775e-01  3.89e-03  6.97e-07  1.76e-04  2.47e-07  2.44e-06  8.54e-01  
 17  +4.0236e-01  +4.0252e-01  1.57e-04  2.80e-08  7.05e-06  9.96e-09  9.97e-08  9.82e-01  
 18  +4.0230e-01  +4.0230e-01  1.59e-06  2.83e-10  7.14e-08  1.01e-10  1.01e-09  9.90e-01  
 19  +4.0230e-01  +4.0230e-01  1.59e-08  2.83e-12  7.14e-10  1.01e-12  1.01e-11  9.90e-01  
 20  +4.0230e-01  +4.0230e-01  1.59e-10  2.85e-14  7.14e-12  1.01e-14  1.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 199.2702ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:08 PM: Optimal value: 4.023e-01
(CVXPY) Oct 06 04:29:08 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:08 PM: Solver (including time spent in interface) took 2.193e-01 seconds
Iteration: 10, Objective: 0.4023
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:08 PM: Your problem has 5121 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:08 PM: Finished problem compilation (took 6.345e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:08 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5121
  constraints   = 10121
  nnz(P)        = 0
  nnz(A)        = 81408
  cones (total) = 1
    : Nonnegative = 1,  numel = 10121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7768e-01  +1.0988e+03  1.10e+03  4.44e-01  8.24e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2884e-01  +1.1941e+02  1.19e+02  1.77e-01  4.19e+01  1.79e-02  2.88e-01  9.61e-01  
  3  +5.0822e-01  +3.0883e+01  3.04e+01  1.23e-01  2.92e+01  5.08e-05  2.59e-01  3.63e-01  
  4  +5.0110e-01  +3.2764e+00  2.78e+00  1.90e-02  4.65e+00  6.32e-06  1.58e-01  6.28e-01  
  5  +5.0030e-01  +1.4708e+00  9.71e-01  6.55e-03  1.63e+00  4.22e-05  9.12e-02  8.13e-01  
  6  +5.0007e-01  +9.2571e-01  4.26e-01  2.79e-03  6.99e-01  4.64e-05  2.70e-02  7.32e-01  
  7  +4.9818e-01  +9.3607e-01  4.38e-01  4.03e-04  1.03e-01  9.25e-04  1.10e-03  9.90e-01  
  8  +4.9236e-01  +8.8851e-01  3.96e-01  1.19e-04  3.05e-02  2.66e-03  3.19e-04  7.27e-01  
  9  +4.8880e-01  +8.4702e-01  3.58e-01  9.34e-05  2.38e-02  2.19e-03  2.51e-04  3.57e-01  
 10  +4.8494e-01  +8.1496e-01  3.30e-01  7.80e-05  1.99e-02  1.86e-03  2.12e-04  2.63e-01  
 11  +4.8014e-01  +7.5198e-01  2.72e-01  7.09e-05  1.81e-02  5.00e-04  1.96e-04  4.73e-01  
 12  +4.6052e-01  +6.5046e-01  1.90e-01  3.99e-05  1.01e-02  2.56e-04  1.16e-04  5.89e-01  
 13  +4.5124e-01  +6.0622e-01  1.55e-01  3.23e-05  8.18e-03  9.85e-05  9.66e-05  5.07e-01  
 14  +4.2030e-01  +4.7417e-01  5.39e-02  1.02e-05  2.57e-03  1.77e-05  3.34e-05  7.30e-01  
 15  +4.1547e-01  +4.5610e-01  4.06e-02  7.57e-06  1.91e-03  1.25e-05  2.52e-05  2.95e-01  
 16  +4.0538e-01  +4.1819e-01  1.28e-02  2.30e-06  5.78e-04  9.88e-07  8.01e-06  9.90e-01  
 17  +4.0069e-01  +4.0163e-01  9.38e-04  1.67e-07  4.21e-05  6.60e-08  6.02e-07  9.59e-01  
 18  +4.0030e-01  +4.0031e-01  1.02e-05  1.82e-09  4.58e-07  7.10e-10  6.58e-09  9.89e-01  
 19  +4.0030e-01  +4.0030e-01  1.02e-07  1.82e-11  4.58e-09  7.10e-12  6.58e-11  9.90e-01  
 20  +4.0030e-01  +4.0030e-01  1.02e-09  1.82e-13  4.58e-11  7.12e-14  6.60e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 195.5688ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:08 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:08 PM: Optimal value: 4.003e-01
(CVXPY) Oct 06 04:29:08 PM: Compilation took 6.345e-02 seconds
(CVXPY) Oct 06 04:29:08 PM: Solver (including time spent in interface) took 2.042e-01 seconds
Iteration: 11, Objective: 0.4003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:08 PM: Your problem has 5131 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:08 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:08 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:08 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:08 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:08 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:08 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:08 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:08 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:08 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:08 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:09 PM: Finished problem compilation (took 6.299e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5131
  constraints   = 10131
  nnz(P)        = 0
  nnz(A)        = 81784
  cones (total) = 1
    : Nonnegative = 1,  numel = 10131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7759e-01  +1.0988e+03  1.10e+03  4.44e-01  8.23e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2879e-01  +1.1932e+02  1.19e+02  1.77e-01  4.18e+01  1.79e-02  2.87e-01  9.62e-01  
  3  +5.0821e-01  +3.0860e+01  3.04e+01  1.23e-01  2.92e+01  5.09e-05  2.59e-01  3.65e-01  
  4  +5.0110e-01  +3.2740e+00  2.77e+00  1.90e-02  4.64e+00  6.33e-06  1.58e-01  6.29e-01  
  5  +5.0028e-01  +1.4282e+00  9.28e-01  6.26e-03  1.56e+00  4.40e-05  8.61e-02  8.63e-01  
  6  +5.0005e-01  +9.0564e-01  4.06e-01  2.62e-03  6.55e-01  5.43e-05  2.15e-02  7.81e-01  
  7  +4.9752e-01  +9.3852e-01  4.41e-01  3.23e-04  8.25e-02  1.22e-03  8.78e-04  9.79e-01  
  8  +4.9108e-01  +8.7902e-01  3.88e-01  1.12e-04  2.86e-02  2.78e-03  3.00e-04  6.87e-01  
  9  +4.8840e-01  +8.4891e-01  3.61e-01  9.20e-05  2.35e-02  2.16e-03  2.47e-04  3.59e-01  
 10  +4.8309e-01  +8.0894e-01  3.26e-01  7.44e-05  1.90e-02  1.81e-03  2.02e-04  2.83e-01  
 11  +4.8084e-01  +7.8846e-01  3.08e-01  7.29e-05  1.86e-02  1.47e-03  2.00e-04  8.61e-02  
 12  +4.6388e-01  +6.7337e-01  2.09e-01  4.62e-05  1.17e-02  1.72e-04  1.33e-04  7.36e-01  
 13  +4.4421e-01  +5.8415e-01  1.40e-01  2.84e-05  7.17e-03  9.26e-05  8.63e-05  4.20e-01  
 14  +4.2514e-01  +5.0292e-01  7.78e-02  1.49e-05  3.75e-03  2.61e-05  4.81e-05  6.69e-01  
 15  +4.1074e-01  +4.4607e-01  3.53e-02  6.50e-06  1.63e-03  8.59e-06  2.21e-05  6.72e-01  
 16  +4.0252e-01  +4.1433e-01  1.18e-02  2.12e-06  5.32e-04  9.17e-07  7.45e-06  9.90e-01  
 17  +3.9824e-01  +3.9932e-01  1.09e-03  1.94e-07  4.88e-05  8.22e-08  7.01e-07  9.12e-01  
 18  +3.9780e-01  +3.9782e-01  1.15e-05  2.05e-09  5.15e-07  8.63e-10  7.43e-09  9.90e-01  
 19  +3.9780e-01  +3.9780e-01  1.15e-07  2.05e-11  5.15e-09  8.63e-12  7.43e-11  9.90e-01  
 20  +3.9780e-01  +3.9780e-01  1.15e-09  2.05e-13  5.15e-11  8.64e-14  7.44e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 198.7377ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:09 PM: Optimal value: 3.978e-01
(CVXPY) Oct 06 04:29:09 PM: Compilation took 6.299e-02 seconds
(CVXPY) Oct 06 04:29:09 PM: Solver (including time spent in interface) took 2.203e-01 seconds
Iteration: 12, Objective: 0.3978
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:09 PM: Your problem has 5141 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:09 PM: Finished problem compilation (took 6.257e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5141
  constraints   = 10141
  nnz(P)        = 0
  nnz(A)        = 82730
  cones (total) = 1
    : Nonnegative = 1,  numel = 10141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7747e-01  +1.0989e+03  1.10e+03  4.45e-01  8.23e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2869e-01  +1.1913e+02  1.19e+02  1.77e-01  4.17e+01  1.80e-02  2.87e-01  9.64e-01  
  3  +5.0819e-01  +3.0799e+01  3.03e+01  1.22e-01  2.91e+01  5.11e-05  2.58e-01  3.69e-01  
  4  +5.0109e-01  +3.2601e+00  2.76e+00  1.89e-02  4.62e+00  6.36e-06  1.56e-01  6.34e-01  
  5  +5.0032e-01  +1.5316e+00  1.03e+00  6.96e-03  1.73e+00  4.50e-05  8.50e-02  8.41e-01  
  6  +5.0005e-01  +9.6123e-01  4.61e-01  2.91e-03  7.29e-01  6.23e-05  2.01e-02  7.88e-01  
  7  +4.9753e-01  +9.7440e-01  4.77e-01  3.44e-04  8.80e-02  1.21e-03  9.29e-04  9.62e-01  
  8  +4.9292e-01  +9.2967e-01  4.37e-01  1.53e-04  3.92e-02  2.27e-03  4.09e-04  5.89e-01  
  9  +4.8990e-01  +8.7261e-01  3.83e-01  1.21e-04  3.10e-02  1.42e-03  3.26e-04  4.54e-01  
 10  +4.8734e-01  +8.3770e-01  3.50e-01  1.02e-04  2.61e-02  8.65e-04  2.76e-04  4.43e-01  
 11  +4.8626e-01  +8.2918e-01  3.43e-01  9.81e-05  2.50e-02  8.01e-04  2.66e-04  8.92e-02  
 12  +4.8298e-01  +8.0216e-01  3.19e-01  8.80e-05  2.24e-02  5.41e-04  2.40e-04  3.15e-01  
 13  +4.7293e-01  +7.4656e-01  2.74e-01  6.58e-05  1.67e-02  4.13e-04  1.84e-04  3.48e-01  
 14  +4.4372e-01  +5.9607e-01  1.52e-01  3.17e-05  8.00e-03  8.81e-05  9.60e-05  6.99e-01  
 15  +4.2907e-01  +5.3418e-01  1.05e-01  2.12e-05  5.34e-03  2.77e-05  6.77e-05  6.38e-01  
 16  +4.1486e-01  +4.7580e-01  6.09e-02  1.19e-05  2.98e-03  1.41e-05  3.99e-05  4.66e-01  
 17  +4.0860e-01  +4.5102e-01  4.24e-02  8.09e-06  2.03e-03  9.10e-06  2.79e-05  3.63e-01  
 18  +3.9829e-01  +4.1063e-01  1.23e-02  2.28e-06  5.72e-04  1.62e-06  8.23e-06  8.63e-01  
 19  +3.9404e-01  +3.9494e-01  9.02e-04  1.65e-07  4.15e-05  1.11e-07  6.13e-07  9.32e-01  
 20  +3.9370e-01  +3.9371e-01  9.28e-06  1.70e-09  4.27e-07  1.14e-09  6.32e-09  9.90e-01  
 21  +3.9370e-01  +3.9370e-01  9.28e-08  1.70e-11  4.27e-09  1.14e-11  6.32e-11  9.90e-01  
 22  +3.9370e-01  +3.9370e-01  9.28e-10  1.70e-13  4.27e-11  1.14e-13  6.34e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 218.2016ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:09 PM: Optimal value: 3.937e-01
(CVXPY) Oct 06 04:29:09 PM: Compilation took 6.257e-02 seconds
(CVXPY) Oct 06 04:29:09 PM: Solver (including time spent in interface) took 2.350e-01 seconds
Iteration: 13, Objective: 0.3937
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:09 PM: Your problem has 5151 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:10 PM: Finished problem compilation (took 6.290e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5151
  constraints   = 10151
  nnz(P)        = 0
  nnz(A)        = 83025
  cones (total) = 1
    : Nonnegative = 1,  numel = 10151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7734e-01  +1.0990e+03  1.10e+03  4.45e-01  8.22e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2860e-01  +1.1897e+02  1.18e+02  1.77e-01  4.16e+01  1.80e-02  2.87e-01  9.65e-01  
  3  +5.0817e-01  +3.0768e+01  3.03e+01  1.22e-01  2.90e+01  5.12e-05  2.57e-01  3.72e-01  
  4  +5.0109e-01  +3.2598e+00  2.76e+00  1.89e-02  4.62e+00  6.38e-06  1.55e-01  6.36e-01  
  5  +5.0030e-01  +1.4889e+00  9.89e-01  6.66e-03  1.65e+00  4.79e-05  7.88e-02  9.00e-01  
  6  +5.0001e-01  +9.5868e-01  4.59e-01  2.73e-03  6.86e-01  8.06e-05  1.51e-02  8.38e-01  
  7  +4.9716e-01  +9.6022e-01  4.63e-01  3.04e-04  7.78e-02  1.37e-03  8.18e-04  9.49e-01  
  8  +4.9298e-01  +9.2025e-01  4.27e-01  1.59e-04  4.07e-02  2.15e-03  4.25e-04  5.16e-01  
  9  +4.9075e-01  +8.7681e-01  3.86e-01  1.32e-04  3.38e-02  1.30e-03  3.54e-04  4.55e-01  
 10  +4.8764e-01  +8.4576e-01  3.58e-01  1.06e-04  2.72e-02  9.34e-04  2.87e-04  4.36e-01  
 11  +4.8356e-01  +8.0992e-01  3.26e-01  9.16e-05  2.34e-02  4.72e-04  2.49e-04  4.85e-01  
 12  +4.6759e-01  +7.2431e-01  2.57e-01  5.74e-05  1.46e-02  3.23e-04  1.62e-04  5.04e-01  
 13  +4.4437e-01  +6.0995e-01  1.66e-01  3.51e-05  8.87e-03  1.35e-04  1.06e-04  4.60e-01  
 14  +4.2620e-01  +5.3001e-01  1.04e-01  2.11e-05  5.32e-03  3.77e-05  6.83e-05  6.47e-01  
 15  +4.1383e-01  +4.7864e-01  6.48e-02  1.28e-05  3.21e-03  2.05e-05  4.33e-05  4.33e-01  
 16  +4.0747e-01  +4.5302e-01  4.56e-02  8.79e-06  2.21e-03  1.31e-05  3.06e-05  3.67e-01  
 17  +3.9701e-01  +4.1109e-01  1.41e-02  2.63e-06  6.60e-04  1.73e-06  9.61e-06  9.17e-01  
 18  +3.9226e-01  +3.9348e-01  1.22e-03  2.27e-07  5.69e-05  1.39e-07  8.53e-07  9.21e-01  
 19  +3.9180e-01  +3.9182e-01  1.29e-05  2.39e-09  6.00e-07  1.46e-09  9.03e-09  9.89e-01  
 20  +3.9180e-01  +3.9180e-01  1.29e-07  2.39e-11  6.00e-09  1.46e-11  9.03e-11  9.90e-01  
 21  +3.9180e-01  +3.9180e-01  1.29e-09  2.39e-13  6.00e-11  1.47e-13  9.04e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.3642ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:10 PM: Optimal value: 3.918e-01
(CVXPY) Oct 06 04:29:10 PM: Compilation took 6.290e-02 seconds
(CVXPY) Oct 06 04:29:10 PM: Solver (including time spent in interface) took 2.205e-01 seconds
Iteration: 14, Objective: 0.3918
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:10 PM: Your problem has 5161 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:10 PM: Finished problem compilation (took 4.731e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5161
  constraints   = 10161
  nnz(P)        = 0
  nnz(A)        = 83350
  cones (total) = 1
    : Nonnegative = 1,  numel = 10161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7723e-01  +1.0991e+03  1.10e+03  4.45e-01  8.21e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2852e-01  +1.1884e+02  1.18e+02  1.76e-01  4.15e+01  1.80e-02  2.87e-01  9.66e-01  
  3  +5.0816e-01  +3.0737e+01  3.02e+01  1.22e-01  2.89e+01  5.14e-05  2.57e-01  3.74e-01  
  4  +5.0109e-01  +3.2582e+00  2.76e+00  1.89e-02  4.62e+00  6.39e-06  1.54e-01  6.37e-01  
  5  +5.0029e-01  +1.4838e+00  9.83e-01  6.62e-03  1.64e+00  4.98e-05  7.52e-02  9.28e-01  
  6  +4.9999e-01  +9.8004e-01  4.80e-01  2.71e-03  6.82e-01  9.52e-05  1.32e-02  8.56e-01  
  7  +4.9698e-01  +9.7380e-01  4.77e-01  2.98e-04  7.64e-02  1.43e-03  8.02e-04  9.42e-01  
  8  +4.9135e-01  +9.1723e-01  4.26e-01  1.40e-04  3.57e-02  2.36e-03  3.73e-04  5.80e-01  
  9  +4.8676e-01  +8.7569e-01  3.89e-01  1.12e-04  2.87e-02  2.05e-03  3.03e-04  2.86e-01  
 10  +4.8356e-01  +8.5189e-01  3.68e-01  9.61e-05  2.45e-02  1.73e-03  2.61e-04  2.71e-01  
 11  +4.7908e-01  +8.1596e-01  3.37e-01  8.46e-05  2.16e-02  1.16e-03  2.32e-04  3.10e-01  
 12  +4.7410e-01  +7.7614e-01  3.02e-01  7.84e-05  1.99e-02  4.72e-04  2.19e-04  4.22e-01  
 13  +4.4892e-01  +6.4146e-01  1.93e-01  4.09e-05  1.04e-02  2.59e-04  1.22e-04  5.21e-01  
 14  +4.3573e-01  +5.8051e-01  1.45e-01  3.01e-05  7.58e-03  1.47e-04  9.37e-05  3.63e-01  
 15  +4.1760e-01  +5.0020e-01  8.26e-02  1.65e-05  4.15e-03  6.58e-05  5.49e-05  4.93e-01  
 16  +4.0675e-01  +4.5425e-01  4.75e-02  9.16e-06  2.30e-03  2.42e-05  3.19e-05  6.39e-01  
 17  +3.9805e-01  +4.1850e-01  2.04e-02  3.86e-06  9.67e-04  4.45e-06  1.40e-05  8.58e-01  
 18  +3.9181e-01  +3.9487e-01  3.05e-03  5.72e-07  1.43e-04  6.08e-07  2.16e-06  8.61e-01  
 19  +3.9071e-01  +3.9075e-01  3.88e-05  7.25e-09  1.82e-06  7.62e-09  2.76e-08  9.87e-01  
 20  +3.9070e-01  +3.9070e-01  3.88e-07  7.25e-11  1.82e-08  7.62e-11  2.76e-10  9.90e-01  
 21  +3.9070e-01  +3.9070e-01  3.88e-09  7.25e-13  1.82e-10  7.63e-13  2.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 212.9624ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:10 PM: Optimal value: 3.907e-01
(CVXPY) Oct 06 04:29:10 PM: Compilation took 4.731e-02 seconds
(CVXPY) Oct 06 04:29:10 PM: Solver (including time spent in interface) took 2.200e-01 seconds
Iteration: 15, Objective: 0.3907
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:11 PM: Your problem has 5171 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:11 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5171
  constraints   = 10171
  nnz(P)        = 0
  nnz(A)        = 83719
  cones (total) = 1
    : Nonnegative = 1,  numel = 10171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7719e-01  +1.0990e+03  1.10e+03  4.45e-01  8.21e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2848e-01  +1.1874e+02  1.18e+02  1.76e-01  4.14e+01  1.80e-02  2.86e-01  9.66e-01  
  3  +5.0815e-01  +3.0709e+01  3.02e+01  1.22e-01  2.89e+01  5.14e-05  2.56e-01  3.75e-01  
  4  +5.0109e-01  +3.2534e+00  2.75e+00  1.89e-02  4.61e+00  6.39e-06  1.54e-01  6.39e-01  
  5  +5.0027e-01  +1.4553e+00  9.55e-01  6.42e-03  1.59e+00  5.16e-05  7.15e-02  9.62e-01  
  6  +4.9995e-01  +9.7651e-01  4.77e-01  2.49e-03  6.27e-01  1.16e-04  1.07e-02  8.85e-01  
  7  +4.9662e-01  +9.6439e-01  4.68e-01  2.69e-04  6.90e-02  1.57e-03  7.22e-04  9.34e-01  
  8  +4.9164e-01  +9.1508e-01  4.23e-01  1.47e-04  3.77e-02  2.24e-03  3.94e-04  5.03e-01  
  9  +4.8872e-01  +8.7916e-01  3.90e-01  1.24e-04  3.16e-02  1.51e-03  3.32e-04  4.00e-01  
 10  +4.8469e-01  +8.5183e-01  3.67e-01  1.01e-04  2.56e-02  1.37e-03  2.72e-04  2.87e-01  
 11  +4.8037e-01  +8.1767e-01  3.37e-01  8.93e-05  2.27e-02  7.91e-04  2.44e-04  3.87e-01  
 12  +4.7208e-01  +7.7089e-01  2.99e-01  7.26e-05  1.84e-02  6.21e-04  2.03e-04  2.64e-01  
 13  +4.4355e-01  +6.1631e-01  1.73e-01  3.71e-05  9.37e-03  1.18e-04  1.13e-04  6.94e-01  
 14  +4.2644e-01  +5.4006e-01  1.14e-01  2.36e-05  5.93e-03  4.93e-05  7.60e-05  5.11e-01  
 15  +4.1524e-01  +4.9208e-01  7.68e-02  1.55e-05  3.89e-03  2.88e-05  5.21e-05  3.98e-01  
 16  +4.0939e-01  +4.6771e-01  5.83e-02  1.15e-05  2.89e-03  1.95e-05  3.98e-05  3.28e-01  
 17  +4.0193e-01  +4.3703e-01  3.51e-02  6.79e-06  1.70e-03  9.60e-06  2.43e-05  5.25e-01  
 18  +3.9148e-01  +3.9555e-01  4.06e-03  7.68e-07  1.93e-04  6.85e-07  2.91e-06  9.30e-01  
 19  +3.9004e-01  +3.9016e-01  1.19e-04  2.25e-08  5.64e-06  1.91e-08  8.62e-08  9.72e-01  
 20  +3.9000e-01  +3.9000e-01  1.19e-06  2.25e-10  5.64e-08  1.92e-10  8.63e-10  9.90e-01  
 21  +3.9000e-01  +3.9000e-01  1.19e-08  2.25e-12  5.64e-10  1.92e-12  8.63e-12  9.90e-01  
 22  +3.9000e-01  +3.9000e-01  1.19e-10  2.26e-14  5.64e-12  1.92e-14  8.65e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 220.9677ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:11 PM: Optimal value: 3.900e-01
(CVXPY) Oct 06 04:29:11 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:11 PM: Solver (including time spent in interface) took 2.355e-01 seconds
Iteration: 16, Objective: 0.3900
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:11 PM: Your problem has 5181 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:11 PM: Finished problem compilation (took 6.257e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5181
  constraints   = 10181
  nnz(P)        = 0
  nnz(A)        = 84135
  cones (total) = 1
    : Nonnegative = 1,  numel = 10181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7714e-01  +1.0990e+03  1.10e+03  4.45e-01  8.20e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2843e-01  +1.1865e+02  1.18e+02  1.76e-01  4.14e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0815e-01  +3.0687e+01  3.02e+01  1.22e-01  2.88e+01  5.15e-05  2.56e-01  3.77e-01  
  4  +5.0109e-01  +3.2516e+00  2.75e+00  1.89e-02  4.61e+00  6.40e-06  1.53e-01  6.40e-01  
  5  +5.0028e-01  +1.4717e+00  9.71e-01  6.53e-03  1.62e+00  5.23e-05  7.06e-02  9.64e-01  
  6  +4.9999e-01  +1.0544e+00  5.54e-01  2.96e-03  7.45e-01  1.12e-04  1.30e-02  8.46e-01  
  7  +4.9686e-01  +1.0376e+00  5.41e-01  3.25e-04  8.33e-02  1.48e-03  8.70e-04  9.35e-01  
  8  +4.8977e-01  +9.4896e-01  4.59e-01  1.35e-04  3.45e-02  2.52e-03  3.59e-04  6.42e-01  
  9  +4.8817e-01  +9.1930e-01  4.31e-01  1.20e-04  3.06e-02  1.43e-03  3.18e-04  4.29e-01  
 10  +4.8316e-01  +8.7851e-01  3.95e-01  9.92e-05  2.53e-02  1.19e-03  2.68e-04  2.65e-01  
 11  +4.8268e-01  +8.7383e-01  3.91e-01  9.86e-05  2.51e-02  1.14e-03  2.67e-04  2.33e-02  
 12  +4.7838e-01  +8.2758e-01  3.49e-01  9.34e-05  2.38e-02  5.65e-04  2.56e-04  3.22e-01  
 13  +4.6925e-01  +7.7424e-01  3.05e-01  7.40e-05  1.88e-02  4.55e-04  2.08e-04  2.58e-01  
 14  +4.4138e-01  +6.1510e-01  1.74e-01  3.76e-05  9.49e-03  6.53e-05  1.15e-04  7.29e-01  
 15  +4.2402e-01  +5.3540e-01  1.11e-01  2.32e-05  5.83e-03  2.70e-05  7.54e-05  5.37e-01  
 16  +4.1189e-01  +4.8278e-01  7.09e-02  1.43e-05  3.59e-03  1.55e-05  4.88e-05  4.06e-01  
 17  +4.0465e-01  +4.5211e-01  4.75e-02  9.37e-06  2.35e-03  9.25e-06  3.30e-05  4.20e-01  
 18  +3.9498e-01  +4.1108e-01  1.61e-02  3.09e-06  7.74e-04  1.11e-06  1.14e-05  9.90e-01  
 19  +3.9088e-01  +3.9560e-01  4.72e-03  9.00e-07  2.25e-04  3.14e-07  3.40e-06  7.88e-01  
 20  +3.8946e-01  +3.9040e-01  9.44e-04  1.78e-07  4.47e-05  6.03e-08  6.83e-07  8.51e-01  
 21  +3.8910e-01  +3.8912e-01  1.12e-05  2.12e-09  5.31e-07  7.01e-10  8.15e-09  9.90e-01  
 22  +3.8910e-01  +3.8910e-01  1.12e-07  2.12e-11  5.31e-09  7.01e-12  8.15e-11  9.90e-01  
 23  +3.8910e-01  +3.8910e-01  1.12e-09  2.12e-13  5.31e-11  7.04e-14  8.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 242.2678ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:11 PM: Optimal value: 3.891e-01
(CVXPY) Oct 06 04:29:11 PM: Compilation took 6.257e-02 seconds
(CVXPY) Oct 06 04:29:11 PM: Solver (including time spent in interface) took 2.516e-01 seconds
Iteration: 17, Objective: 0.3891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:12 PM: Your problem has 5191 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:12 PM: Finished problem compilation (took 6.311e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5191
  constraints   = 10191
  nnz(P)        = 0
  nnz(A)        = 84423
  cones (total) = 1
    : Nonnegative = 1,  numel = 10191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7710e-01  +1.0991e+03  1.10e+03  4.45e-01  8.19e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2841e-01  +1.1862e+02  1.18e+02  1.76e-01  4.13e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0814e-01  +3.0679e+01  3.02e+01  1.22e-01  2.88e+01  5.15e-05  2.56e-01  3.78e-01  
  4  +5.0109e-01  +3.2526e+00  2.75e+00  1.89e-02  4.61e+00  6.41e-06  1.53e-01  6.40e-01  
  5  +5.0028e-01  +1.4852e+00  9.85e-01  6.63e-03  1.64e+00  5.21e-05  7.09e-02  9.58e-01  
  6  +4.9998e-01  +1.0479e+00  5.48e-01  2.85e-03  7.18e-01  1.13e-04  1.21e-02  8.85e-01  
  7  +4.9690e-01  +1.0319e+00  5.35e-01  3.16e-04  8.09e-02  1.46e-03  8.43e-04  9.32e-01  
  8  +4.9050e-01  +9.5143e-01  4.61e-01  1.42e-04  3.62e-02  2.33e-03  3.77e-04  6.09e-01  
  9  +4.8746e-01  +9.0627e-01  4.19e-01  1.20e-04  3.08e-02  1.36e-03  3.22e-04  4.22e-01  
 10  +4.8263e-01  +8.7210e-01  3.89e-01  9.83e-05  2.51e-02  1.24e-03  2.66e-04  2.57e-01  
 11  +4.8211e-01  +8.6728e-01  3.85e-01  9.77e-05  2.49e-02  1.19e-03  2.65e-04  2.40e-02  
 12  +4.7970e-01  +8.4180e-01  3.62e-01  9.50e-05  2.42e-02  8.48e-04  2.60e-04  1.75e-01  
 13  +4.7028e-01  +7.8458e-01  3.14e-01  7.51e-05  1.91e-02  6.85e-04  2.10e-04  2.53e-01  
 14  +4.5019e-01  +6.5952e-01  2.09e-01  4.86e-05  1.23e-02  6.44e-05  1.45e-04  7.07e-01  
 15  +4.3220e-01  +5.7395e-01  1.42e-01  3.06e-05  7.71e-03  3.68e-05  9.70e-05  3.95e-01  
 16  +4.1512e-01  +4.9670e-01  8.16e-02  1.67e-05  4.19e-03  1.52e-05  5.62e-05  5.73e-01  
 17  +4.0880e-01  +4.6931e-01  6.05e-02  1.21e-05  3.03e-03  9.46e-06  4.16e-05  4.35e-01  
 18  +4.0371e-01  +4.4719e-01  4.35e-02  8.50e-06  2.13e-03  5.31e-06  2.99e-05  5.54e-01  
 19  +3.9297e-01  +4.0403e-01  1.11e-02  2.13e-06  5.32e-04  1.18e-06  7.91e-06  7.84e-01  
 20  +3.9183e-01  +3.9953e-01  7.69e-03  1.47e-06  3.69e-04  7.83e-07  5.51e-06  3.81e-01  
 21  +3.9009e-01  +3.9280e-01  2.71e-03  5.15e-07  1.29e-04  2.50e-07  1.96e-06  7.23e-01  
 22  +3.8919e-01  +3.8940e-01  2.17e-04  4.11e-08  1.03e-05  1.34e-08  1.57e-07  9.88e-01  
 23  +3.8910e-01  +3.8910e-01  2.27e-06  4.29e-10  1.07e-07  1.39e-10  1.64e-09  9.90e-01  
 24  +3.8910e-01  +3.8910e-01  2.27e-08  4.29e-12  1.07e-09  1.39e-12  1.64e-11  9.90e-01  
 25  +3.8910e-01  +3.8910e-01  2.27e-10  4.29e-14  1.07e-11  1.41e-14  1.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 253.7809ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:12 PM: Optimal value: 3.891e-01
(CVXPY) Oct 06 04:29:12 PM: Compilation took 6.311e-02 seconds
(CVXPY) Oct 06 04:29:12 PM: Solver (including time spent in interface) took 2.669e-01 seconds
Iteration: 18, Objective: 0.3891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:12 PM: Your problem has 5201 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:12 PM: Finished problem compilation (took 6.258e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5201
  constraints   = 10201
  nnz(P)        = 0
  nnz(A)        = 84780
  cones (total) = 1
    : Nonnegative = 1,  numel = 10201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7700e-01  +1.0992e+03  1.10e+03  4.46e-01  8.19e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2835e-01  +1.1853e+02  1.18e+02  1.76e-01  4.12e+01  1.81e-02  2.86e-01  9.68e-01  
  3  +5.0813e-01  +3.0654e+01  3.01e+01  1.21e-01  2.87e+01  5.16e-05  2.55e-01  3.80e-01  
  4  +5.0109e-01  +3.2518e+00  2.75e+00  1.89e-02  4.61e+00  6.42e-06  1.53e-01  6.41e-01  
  5  +5.0030e-01  +1.5176e+00  1.02e+00  6.84e-03  1.69e+00  5.27e-05  7.03e-02  9.53e-01  
  6  +4.9992e-01  +9.7733e-01  4.77e-01  2.31e-03  5.83e-01  1.27e-04  9.06e-03  9.19e-01  
  7  +4.9658e-01  +9.6360e-01  4.67e-01  2.56e-04  6.55e-02  1.57e-03  6.79e-04  9.26e-01  
  8  +4.9157e-01  +9.1711e-01  4.26e-01  1.44e-04  3.69e-02  2.17e-03  3.83e-04  4.91e-01  
  9  +4.8935e-01  +8.9383e-01  4.04e-01  1.26e-04  3.21e-02  1.44e-03  3.35e-04  4.03e-01  
 10  +4.8547e-01  +8.6455e-01  3.79e-01  1.05e-04  2.69e-02  1.07e-03  2.83e-04  3.67e-01  
 11  +4.8454e-01  +8.5802e-01  3.73e-01  1.03e-04  2.63e-02  1.01e-03  2.78e-04  5.45e-02  
 12  +4.7877e-01  +8.1581e-01  3.37e-01  9.27e-05  2.36e-02  4.84e-04  2.54e-04  4.19e-01  
 13  +4.5458e-01  +6.8499e-01  2.30e-01  5.03e-05  1.27e-02  2.78e-04  1.46e-04  5.45e-01  
 14  +4.4024e-01  +6.1661e-01  1.76e-01  3.85e-05  9.70e-03  1.16e-04  1.18e-04  4.61e-01  
 15  +4.1432e-01  +4.9746e-01  8.31e-02  1.72e-05  4.30e-03  2.35e-05  5.80e-05  7.09e-01  
 16  +4.0873e-01  +4.7385e-01  6.51e-02  1.31e-05  3.29e-03  1.53e-05  4.54e-05  3.88e-01  
 17  +4.0493e-01  +4.5752e-01  5.26e-02  1.04e-05  2.61e-03  9.68e-06  3.65e-05  4.45e-01  
 18  +3.9277e-01  +4.0794e-01  1.52e-02  2.94e-06  7.36e-04  1.70e-06  1.09e-05  8.73e-01  
 19  +3.9196e-01  +4.0457e-01  1.26e-02  2.44e-06  6.11e-04  1.24e-06  9.16e-06  3.53e-01  
 20  +3.9192e-01  +4.0435e-01  1.24e-02  2.41e-06  6.02e-04  1.19e-06  9.02e-06  8.79e-02  
 21  +3.9059e-01  +3.9923e-01  8.64e-03  1.66e-06  4.16e-04  7.51e-07  6.26e-06  4.86e-01  
 22  +3.8828e-01  +3.9065e-01  2.37e-03  4.52e-07  1.13e-04  1.96e-07  1.73e-06  7.59e-01  
 23  +3.8747e-01  +3.8766e-01  1.83e-04  3.48e-08  8.71e-06  1.08e-08  1.34e-07  9.90e-01  
 24  +3.8740e-01  +3.8740e-01  1.92e-06  3.65e-10  9.13e-08  1.13e-10  1.41e-09  9.90e-01  
 25  +3.8740e-01  +3.8740e-01  1.92e-08  3.65e-12  9.14e-10  1.13e-12  1.41e-11  9.90e-01  
 26  +3.8740e-01  +3.8740e-01  1.92e-10  3.65e-14  9.14e-12  1.14e-14  1.42e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 265.1636ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:13 PM: Optimal value: 3.874e-01
(CVXPY) Oct 06 04:29:13 PM: Compilation took 6.258e-02 seconds
(CVXPY) Oct 06 04:29:13 PM: Solver (including time spent in interface) took 2.813e-01 seconds
Iteration: 19, Objective: 0.3874
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:13 PM: Your problem has 5211 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:13 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5211
  constraints   = 10211
  nnz(P)        = 0
  nnz(A)        = 85042
  cones (total) = 1
    : Nonnegative = 1,  numel = 10211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7697e-01  +1.0992e+03  1.10e+03  4.46e-01  8.18e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2834e-01  +1.1850e+02  1.18e+02  1.76e-01  4.11e+01  1.81e-02  2.86e-01  9.68e-01  
  3  +5.0813e-01  +3.0648e+01  3.01e+01  1.21e-01  2.87e+01  5.17e-05  2.55e-01  3.80e-01  
  4  +5.0109e-01  +3.2521e+00  2.75e+00  1.89e-02  4.60e+00  6.42e-06  1.52e-01  6.41e-01  
  5  +5.0029e-01  +1.4959e+00  9.96e-01  6.69e-03  1.66e+00  5.36e-05  6.86e-02  9.71e-01  
  6  +4.9994e-01  +1.0357e+00  5.36e-01  2.60e-03  6.56e-01  1.29e-04  1.02e-02  8.98e-01  
  7  +4.9664e-01  +1.0176e+00  5.21e-01  2.90e-04  7.42e-02  1.55e-03  7.70e-04  9.27e-01  
  8  +4.9095e-01  +9.5077e-01  4.60e-01  1.49e-04  3.82e-02  2.21e-03  3.97e-04  5.43e-01  
  9  +4.9039e-01  +9.2979e-01  4.39e-01  1.39e-04  3.55e-02  1.38e-03  3.69e-04  3.56e-01  
 10  +4.8583e-01  +8.7666e-01  3.91e-01  1.12e-04  2.86e-02  7.57e-04  3.01e-04  4.98e-01  
 11  +4.8451e-01  +8.6580e-01  3.81e-01  1.08e-04  2.76e-02  6.72e-04  2.92e-04  1.03e-01  
 12  +4.7594e-01  +8.0772e-01  3.32e-01  8.66e-05  2.20e-02  4.03e-04  2.39e-04  4.16e-01  
 13  +4.4702e-01  +6.4435e-01  1.97e-01  4.35e-05  1.10e-02  5.33e-05  1.30e-04  7.83e-01  
 14  +4.2741e-01  +5.5668e-01  1.29e-01  2.77e-05  6.96e-03  1.04e-05  8.93e-05  7.64e-01  
 15  +4.1551e-01  +5.0484e-01  8.93e-02  1.84e-05  4.62e-03  6.48e-06  6.20e-05  4.66e-01  
 16  +4.0528e-01  +4.6168e-01  5.64e-02  1.12e-05  2.81e-03  3.84e-06  3.94e-05  5.20e-01  
 17  +3.9832e-01  +4.3236e-01  3.40e-02  6.61e-06  1.65e-03  2.20e-06  2.39e-05  6.89e-01  
 18  +3.9367e-01  +4.1407e-01  2.04e-02  3.92e-06  9.81e-04  1.31e-06  1.45e-05  4.24e-01  
 19  +3.9265e-01  +4.0968e-01  1.70e-02  3.27e-06  8.17e-04  1.07e-06  1.22e-05  3.54e-01  
 20  +3.8776e-01  +3.9076e-01  3.01e-03  5.73e-07  1.43e-04  1.74e-07  2.20e-06  9.90e-01  
 21  +3.8663e-01  +3.8669e-01  6.52e-05  1.24e-08  3.11e-06  3.76e-09  4.81e-08  9.79e-01  
 22  +3.8660e-01  +3.8660e-01  6.52e-07  1.24e-10  3.11e-08  3.76e-11  4.81e-10  9.90e-01  
 23  +3.8660e-01  +3.8660e-01  6.52e-09  1.24e-12  3.11e-10  3.77e-13  4.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 231.0611ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:13 PM: Optimal value: 3.866e-01
(CVXPY) Oct 06 04:29:13 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:29:13 PM: Solver (including time spent in interface) took 2.501e-01 seconds
Iteration: 20, Objective: 0.3866
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:13 PM: Your problem has 5221 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:13 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5221
  constraints   = 10221
  nnz(P)        = 0
  nnz(A)        = 85335
  cones (total) = 1
    : Nonnegative = 1,  numel = 10221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7695e-01  +1.0991e+03  1.10e+03  4.46e-01  8.17e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2832e-01  +1.1847e+02  1.18e+02  1.76e-01  4.10e+01  1.81e-02  2.86e-01  9.69e-01  
  3  +5.0813e-01  +3.0639e+01  3.01e+01  1.21e-01  2.86e+01  5.17e-05  2.55e-01  3.81e-01  
  4  +5.0109e-01  +3.2501e+00  2.75e+00  1.89e-02  4.60e+00  6.43e-06  1.52e-01  6.42e-01  
  5  +5.0029e-01  +1.5051e+00  1.00e+00  6.76e-03  1.67e+00  5.35e-05  6.87e-02  9.67e-01  
  6  +4.9993e-01  +1.0301e+00  5.30e-01  2.55e-03  6.42e-01  1.30e-04  9.91e-03  9.03e-01  
  7  +4.9664e-01  +1.0124e+00  5.16e-01  2.85e-04  7.30e-02  1.55e-03  7.58e-04  9.26e-01  
  8  +4.9075e-01  +9.4464e-01  4.54e-01  1.45e-04  3.72e-02  2.21e-03  3.86e-04  5.52e-01  
  9  +4.9032e-01  +9.2907e-01  4.39e-01  1.36e-04  3.48e-02  1.45e-03  3.61e-04  3.37e-01  
 10  +4.8567e-01  +8.7642e-01  3.91e-01  1.11e-04  2.84e-02  7.86e-04  2.99e-04  4.83e-01  
 11  +4.8443e-01  +8.6626e-01  3.82e-01  1.08e-04  2.75e-02  7.03e-04  2.91e-04  9.58e-02  
 12  +4.7652e-01  +8.1278e-01  3.36e-01  8.82e-05  2.24e-02  4.39e-04  2.43e-04  3.87e-01  
 13  +4.5523e-01  +6.9045e-01  2.35e-01  5.46e-05  1.38e-02  1.11e-04  1.60e-04  6.67e-01  
 14  +4.3473e-01  +5.9201e-01  1.57e-01  3.44e-05  8.65e-03  4.22e-05  1.08e-04  5.35e-01  
 15  +4.2076e-01  +5.2979e-01  1.09e-01  2.29e-05  5.74e-03  2.32e-05  7.54e-05  4.33e-01  
 16  +4.0965e-01  +4.8206e-01  7.24e-02  1.47e-05  3.67e-03  1.24e-05  5.05e-05  4.85e-01  
 17  +4.0005e-01  +4.4226e-01  4.22e-02  8.36e-06  2.09e-03  6.78e-06  3.01e-05  4.43e-01  
 18  +3.9132e-01  +4.0550e-01  1.42e-02  2.72e-06  6.80e-04  9.54e-07  1.02e-05  9.90e-01  
 19  +3.9064e-01  +4.0285e-01  1.22e-02  2.34e-06  5.85e-04  7.97e-07  8.82e-06  3.15e-01  
 20  +3.8708e-01  +3.8961e-01  2.53e-03  4.85e-07  1.21e-04  1.41e-07  1.87e-06  9.90e-01  
 21  +3.8620e-01  +3.8645e-01  2.50e-04  4.77e-08  1.19e-05  1.40e-08  1.86e-07  9.22e-01  
 22  +3.8610e-01  +3.8610e-01  2.51e-06  4.79e-10  1.20e-07  1.40e-10  1.86e-09  9.90e-01  
 23  +3.8610e-01  +3.8610e-01  2.51e-08  4.79e-12  1.20e-09  1.40e-12  1.86e-11  9.90e-01  
 24  +3.8610e-01  +3.8610e-01  2.51e-10  4.79e-14  1.20e-11  1.40e-14  1.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 234.9962ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:14 PM: Optimal value: 3.861e-01
(CVXPY) Oct 06 04:29:14 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:29:14 PM: Solver (including time spent in interface) took 2.499e-01 seconds
Iteration: 21, Objective: 0.3861
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:14 PM: Your problem has 5231 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:14 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5231
  constraints   = 10231
  nnz(P)        = 0
  nnz(A)        = 85734
  cones (total) = 1
    : Nonnegative = 1,  numel = 10231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7696e-01  +1.0990e+03  1.10e+03  4.46e-01  8.16e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2832e-01  +1.1843e+02  1.18e+02  1.76e-01  4.09e+01  1.81e-02  2.85e-01  9.69e-01  
  3  +5.0812e-01  +3.0613e+01  3.01e+01  1.21e-01  2.86e+01  5.16e-05  2.55e-01  3.81e-01  
  4  +5.0109e-01  +3.2444e+00  2.74e+00  1.89e-02  4.59e+00  6.43e-06  1.52e-01  6.43e-01  
  5  +5.0028e-01  +1.4832e+00  9.83e-01  6.60e-03  1.63e+00  5.48e-05  6.62e-02  9.90e-01  
  6  +4.9993e-01  +1.0653e+00  5.65e-01  2.65e-03  6.68e-01  1.41e-04  1.01e-02  8.83e-01  
  7  +4.9653e-01  +1.0430e+00  5.46e-01  2.99e-04  7.65e-02  1.60e-03  7.95e-04  9.23e-01  
  8  +4.8978e-01  +9.5381e-01  4.64e-01  1.43e-04  3.65e-02  2.26e-03  3.80e-04  5.93e-01  
  9  +4.9076e-01  +9.6174e-01  4.71e-01  1.42e-04  3.63e-02  2.10e-03  3.77e-04  9.66e-02  
 10  +4.8578e-01  +9.0185e-01  4.16e-01  1.20e-04  3.05e-02  1.31e-03  3.22e-04  3.57e-01  
 11  +4.8141e-01  +8.6330e-01  3.82e-01  1.02e-04  2.60e-02  8.87e-04  2.78e-04  3.55e-01  
 12  +4.7754e-01  +8.3350e-01  3.56e-01  9.47e-05  2.41e-02  6.53e-04  2.60e-04  2.09e-01  
 13  +4.5844e-01  +7.1657e-01  2.58e-01  6.04e-05  1.53e-02  2.82e-04  1.75e-04  5.46e-01  
 14  +4.3399e-01  +5.9201e-01  1.58e-01  3.44e-05  8.63e-03  9.38e-05  1.08e-04  5.60e-01  
 15  +4.2223e-01  +5.3870e-01  1.16e-01  2.45e-05  6.13e-03  5.22e-05  8.00e-05  4.19e-01  
 16  +4.0875e-01  +4.7947e-01  7.07e-02  1.43e-05  3.58e-03  2.23e-05  4.93e-05  5.67e-01  
 17  +3.9976e-01  +4.4172e-01  4.20e-02  8.31e-06  2.08e-03  1.21e-05  2.98e-05  4.49e-01  
 18  +3.9246e-01  +4.1068e-01  1.82e-02  3.51e-06  8.77e-04  2.60e-06  1.30e-05  8.59e-01  
 19  +3.8910e-01  +3.9721e-01  8.11e-03  1.56e-06  3.90e-04  4.94e-07  5.92e-06  9.90e-01  
 20  +3.8684e-01  +3.8900e-01  2.16e-03  4.14e-07  1.03e-04  1.30e-07  1.59e-06  8.30e-01  
 21  +3.8601e-01  +3.8604e-01  2.79e-05  5.35e-09  1.34e-06  1.64e-09  2.07e-08  9.88e-01  
 22  +3.8600e-01  +3.8600e-01  2.79e-07  5.35e-11  1.34e-08  1.64e-11  2.07e-10  9.90e-01  
 23  +3.8600e-01  +3.8600e-01  2.81e-09  5.39e-13  1.35e-10  1.66e-13  2.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 240.5639ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:14 PM: Optimal value: 3.860e-01
(CVXPY) Oct 06 04:29:14 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:29:14 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 22, Objective: 0.3860
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:15 PM: Your problem has 5241 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:15 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:15 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5241
  constraints   = 10241
  nnz(P)        = 0
  nnz(A)        = 85944
  cones (total) = 1
    : Nonnegative = 1,  numel = 10241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7694e-01  +1.0989e+03  1.10e+03  4.46e-01  8.15e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2828e-01  +1.1836e+02  1.18e+02  1.76e-01  4.09e+01  1.81e-02  2.85e-01  9.69e-01  
  3  +5.0812e-01  +3.0596e+01  3.01e+01  1.21e-01  2.85e+01  5.17e-05  2.55e-01  3.82e-01  
  4  +5.0108e-01  +3.2430e+00  2.74e+00  1.89e-02  4.59e+00  6.43e-06  1.52e-01  6.44e-01  
  5  +5.0028e-01  +1.4987e+00  9.98e-01  6.71e-03  1.66e+00  5.53e-05  6.56e-02  9.90e-01  
  6  +4.9992e-01  +1.0702e+00  5.70e-01  2.60e-03  6.56e-01  1.46e-04  9.67e-03  8.85e-01  
  7  +4.9650e-01  +1.0473e+00  5.51e-01  2.99e-04  7.64e-02  1.60e-03  7.93e-04  9.20e-01  
  8  +4.9011e-01  +9.6092e-01  4.71e-01  1.50e-04  3.83e-02  2.17e-03  3.99e-04  5.70e-01  
  9  +4.9089e-01  +9.6299e-01  4.72e-01  1.48e-04  3.78e-02  1.81e-03  3.92e-04  1.69e-01  
 10  +4.8564e-01  +9.0103e-01  4.15e-01  1.20e-04  3.06e-02  1.14e-03  3.24e-04  3.98e-01  
 11  +4.8026e-01  +8.6301e-01  3.83e-01  9.99e-05  2.54e-02  9.62e-04  2.72e-04  2.62e-01  
 12  +4.7590e-01  +8.2760e-01  3.52e-01  9.25e-05  2.35e-02  6.26e-04  2.56e-04  2.56e-01  
 13  +4.5901e-01  +7.2272e-01  2.64e-01  6.34e-05  1.60e-02  2.40e-04  1.84e-04  5.46e-01  
 14  +4.3959e-01  +6.2413e-01  1.85e-01  4.10e-05  1.03e-02  1.34e-04  1.26e-04  3.96e-01  
 15  +4.2167e-01  +5.3979e-01  1.18e-01  2.49e-05  6.25e-03  5.59e-05  8.17e-05  5.25e-01  
 16  +4.1093e-01  +4.9214e-01  8.12e-02  1.65e-05  4.13e-03  2.66e-05  5.64e-05  5.35e-01  
 17  +3.9853e-01  +4.3887e-01  4.03e-02  7.94e-06  1.98e-03  8.30e-06  2.86e-05  7.17e-01  
 18  +3.9122e-01  +4.0817e-01  1.69e-02  3.27e-06  8.15e-04  1.51e-06  1.22e-05  9.39e-01  
 19  +3.9093e-01  +4.0694e-01  1.60e-02  3.09e-06  7.71e-04  1.38e-06  1.15e-05  1.57e-01  
 20  +3.8726e-01  +3.9288e-01  5.62e-03  1.08e-06  2.70e-04  3.32e-07  4.14e-06  9.90e-01  
 21  +3.8542e-01  +3.8626e-01  8.36e-04  1.61e-07  4.01e-05  4.90e-08  6.22e-07  8.73e-01  
 22  +3.8510e-01  +3.8511e-01  8.76e-06  1.68e-09  4.20e-07  5.13e-10  6.53e-09  9.90e-01  
 23  +3.8510e-01  +3.8510e-01  8.76e-08  1.68e-11  4.20e-09  5.13e-12  6.54e-11  9.90e-01  
 24  +3.8510e-01  +3.8510e-01  8.76e-10  1.68e-13  4.20e-11  5.13e-14  6.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 245.341ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:15 PM: Optimal value: 3.851e-01
(CVXPY) Oct 06 04:29:15 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:29:15 PM: Solver (including time spent in interface) took 2.657e-01 seconds
Iteration: 23, Objective: 0.3851
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:15 PM: Your problem has 5251 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:15 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5251
  constraints   = 10251
  nnz(P)        = 0
  nnz(A)        = 86155
  cones (total) = 1
    : Nonnegative = 1,  numel = 10251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7690e-01  +1.0990e+03  1.10e+03  4.46e-01  8.15e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2825e-01  +1.1829e+02  1.18e+02  1.76e-01  4.08e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0811e-01  +3.0582e+01  3.01e+01  1.21e-01  2.85e+01  5.17e-05  2.54e-01  3.83e-01  
  4  +5.0109e-01  +3.2448e+00  2.74e+00  1.89e-02  4.59e+00  6.44e-06  1.51e-01  6.44e-01  
  5  +5.0029e-01  +1.5071e+00  1.01e+00  6.76e-03  1.67e+00  5.57e-05  6.53e-02  9.90e-01  
  6  +4.9988e-01  +1.0353e+00  5.35e-01  2.29e-03  5.77e-01  1.59e-04  8.12e-03  9.18e-01  
  7  +4.9629e-01  +1.0137e+00  5.17e-01  2.65e-04  6.79e-02  1.67e-03  7.03e-04  9.15e-01  
  8  +4.9097e-01  +9.4991e-01  4.59e-01  1.56e-04  3.98e-02  2.04e-03  4.14e-04  4.83e-01  
  9  +4.9001e-01  +9.2804e-01  4.38e-01  1.41e-04  3.61e-02  1.19e-03  3.76e-04  4.24e-01  
 10  +4.8686e-01  +8.8968e-01  4.03e-01  1.25e-04  3.19e-02  7.00e-04  3.36e-04  3.93e-01  
 11  +4.7913e-01  +8.3683e-01  3.58e-01  9.59e-05  2.44e-02  4.94e-04  2.62e-04  4.24e-01  
 12  +4.6856e-01  +7.7058e-01  3.02e-01  7.85e-05  1.99e-02  1.68e-04  2.22e-04  5.42e-01  
 13  +4.3905e-01  +6.1784e-01  1.79e-01  3.85e-05  9.68e-03  8.42e-05  1.18e-04  5.28e-01  
 14  +4.2186e-01  +5.4035e-01  1.18e-01  2.48e-05  6.21e-03  3.76e-05  8.09e-05  4.96e-01  
 15  +4.1217e-01  +4.9845e-01  8.63e-02  1.76e-05  4.39e-03  2.03e-05  5.95e-05  4.85e-01  
 16  +3.9968e-01  +4.4474e-01  4.51e-02  8.86e-06  2.21e-03  4.99e-06  3.16e-05  8.53e-01  
 17  +3.9102e-01  +4.0896e-01  1.79e-02  3.47e-06  8.65e-04  1.18e-06  1.29e-05  9.90e-01  
 18  +3.8808e-01  +3.9736e-01  9.28e-03  1.80e-06  4.48e-04  5.31e-07  6.85e-06  9.90e-01  
 19  +3.8722e-01  +3.9412e-01  6.90e-03  1.34e-06  3.34e-04  3.94e-07  5.13e-06  4.32e-01  
 20  +3.8660e-01  +3.9198e-01  5.37e-03  1.04e-06  2.58e-04  3.07e-07  3.97e-06  4.23e-01  
 21  +3.8463e-01  +3.8485e-01  2.19e-04  4.23e-08  1.05e-05  1.25e-08  1.65e-07  9.60e-01  
 22  +3.8455e-01  +3.8455e-01  2.20e-06  4.24e-10  1.06e-07  1.25e-10  1.65e-09  9.90e-01  
 23  +3.8455e-01  +3.8455e-01  2.20e-08  4.24e-12  1.06e-09  1.25e-12  1.65e-11  9.90e-01  
 24  +3.8455e-01  +3.8455e-01  2.20e-10  4.24e-14  1.06e-11  1.25e-14  1.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 237.8424ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:15 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:15 PM: Optimal value: 3.846e-01
(CVXPY) Oct 06 04:29:15 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:29:15 PM: Solver (including time spent in interface) took 2.505e-01 seconds
Iteration: 24, Objective: 0.3846
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:16 PM: Your problem has 5257 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:16 PM: Finished problem compilation (took 7.406e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5257
  constraints   = 10257
  nnz(P)        = 0
  nnz(A)        = 86370
  cones (total) = 1
    : Nonnegative = 1,  numel = 10257

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7688e-01  +1.0990e+03  1.10e+03  4.46e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2823e-01  +1.1825e+02  1.18e+02  1.76e-01  4.07e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0811e-01  +3.0577e+01  3.01e+01  1.21e-01  2.84e+01  5.17e-05  2.54e-01  3.84e-01  
  4  +5.0109e-01  +3.2460e+00  2.74e+00  1.89e-02  4.59e+00  6.44e-06  1.51e-01  6.44e-01  
  5  +5.0029e-01  +1.5115e+00  1.01e+00  6.79e-03  1.68e+00  5.58e-05  6.52e-02  9.90e-01  
  6  +4.9987e-01  +1.0307e+00  5.31e-01  2.27e-03  5.73e-01  1.60e-04  8.07e-03  9.09e-01  
  7  +4.9623e-01  +1.0096e+00  5.13e-01  2.62e-04  6.70e-02  1.69e-03  6.95e-04  9.15e-01  
  8  +4.9162e-01  +9.5604e-01  4.64e-01  1.65e-04  4.21e-02  2.03e-03  4.38e-04  4.34e-01  
  9  +4.8975e-01  +9.2496e-01  4.35e-01  1.43e-04  3.65e-02  1.24e-03  3.82e-04  4.28e-01  
 10  +4.8624e-01  +8.8218e-01  3.96e-01  1.21e-04  3.07e-02  6.04e-04  3.24e-04  5.28e-01  
 11  +4.8499e-01  +8.7283e-01  3.88e-01  1.16e-04  2.95e-02  5.39e-04  3.13e-04  1.17e-01  
 12  +4.7811e-01  +8.2899e-01  3.51e-01  9.51e-05  2.41e-02  3.75e-04  2.61e-04  3.70e-01  
 13  +4.5021e-01  +6.6856e-01  2.18e-01  4.93e-05  1.24e-02  1.67e-05  1.46e-04  8.72e-01  
 14  +4.3154e-01  +5.8237e-01  1.51e-01  3.26e-05  8.17e-03  1.02e-05  1.03e-04  3.69e-01  
 15  +4.1998e-01  +5.3193e-01  1.12e-01  2.35e-05  5.88e-03  7.06e-06  7.73e-05  3.82e-01  
 16  +4.0959e-01  +4.8743e-01  7.78e-02  1.59e-05  3.97e-03  4.73e-06  5.45e-05  4.33e-01  
 17  +4.0006e-01  +4.4660e-01  4.65e-02  9.22e-06  2.30e-03  2.79e-06  3.29e-05  6.93e-01  
 18  +3.9099e-01  +4.0900e-01  1.80e-02  3.50e-06  8.72e-04  1.09e-06  1.30e-05  9.36e-01  
 19  +3.9070e-01  +4.0774e-01  1.70e-02  3.32e-06  8.27e-04  1.02e-06  1.24e-05  1.65e-01  
 20  +3.8920e-01  +4.0196e-01  1.28e-02  2.47e-06  6.16e-04  7.62e-07  9.30e-06  4.16e-01  
 21  +3.8521e-01  +3.8700e-01  1.79e-03  3.45e-07  8.61e-05  1.05e-07  1.34e-06  8.91e-01  
 22  +3.8458e-01  +3.8468e-01  9.24e-05  1.78e-08  4.44e-06  5.34e-09  6.93e-08  9.57e-01  
 23  +3.8455e-01  +3.8455e-01  9.26e-07  1.78e-10  4.45e-08  5.35e-11  6.95e-10  9.90e-01  
 24  +3.8455e-01  +3.8455e-01  9.27e-09  1.79e-12  4.45e-10  5.35e-13  6.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 244.07ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:16 PM: Optimal value: 3.846e-01
(CVXPY) Oct 06 04:29:16 PM: Compilation took 7.406e-02 seconds
(CVXPY) Oct 06 04:29:16 PM: Solver (including time spent in interface) took 2.544e-01 seconds
Iteration: 25, Objective: 0.3846
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:16 PM: Your problem has 5259 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:16 PM: Finished problem compilation (took 7.811e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5259
  constraints   = 10259
  nnz(P)        = 0
  nnz(A)        = 86405
  cones (total) = 1
    : Nonnegative = 1,  numel = 10259

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0016e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7688e-01  +1.0990e+03  1.10e+03  4.46e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2823e-01  +1.1825e+02  1.18e+02  1.76e-01  4.07e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0811e-01  +3.0575e+01  3.01e+01  1.21e-01  2.84e+01  5.17e-05  2.54e-01  3.84e-01  
  4  +5.0109e-01  +3.2458e+00  2.74e+00  1.89e-02  4.59e+00  6.44e-06  1.51e-01  6.44e-01  
  5  +5.0029e-01  +1.5114e+00  1.01e+00  6.79e-03  1.68e+00  5.58e-05  6.52e-02  9.90e-01  
  6  +4.9987e-01  +1.0314e+00  5.32e-01  2.27e-03  5.74e-01  1.59e-04  8.10e-03  9.09e-01  
  7  +4.9624e-01  +1.0103e+00  5.14e-01  2.63e-04  6.71e-02  1.69e-03  6.96e-04  9.15e-01  
  8  +4.9157e-01  +9.5605e-01  4.64e-01  1.64e-04  4.19e-02  2.03e-03  4.36e-04  4.38e-01  
  9  +4.8974e-01  +9.2536e-01  4.36e-01  1.43e-04  3.65e-02  1.24e-03  3.81e-04  4.27e-01  
 10  +4.8623e-01  +8.8256e-01  3.96e-01  1.21e-04  3.07e-02  6.09e-04  3.24e-04  5.24e-01  
 11  +4.8503e-01  +8.7359e-01  3.89e-01  1.16e-04  2.96e-02  5.47e-04  3.13e-04  1.10e-01  
 12  +4.7832e-01  +8.3014e-01  3.52e-01  9.58e-05  2.43e-02  3.70e-04  2.63e-04  3.80e-01  
 13  +4.5012e-01  +6.6811e-01  2.18e-01  4.89e-05  1.23e-02  1.66e-05  1.44e-04  8.80e-01  
 14  +4.3168e-01  +5.8300e-01  1.51e-01  3.26e-05  8.18e-03  1.02e-05  1.03e-04  3.63e-01  
 15  +4.2003e-01  +5.3220e-01  1.12e-01  2.35e-05  5.88e-03  7.06e-06  7.73e-05  3.81e-01  
 16  +4.0965e-01  +4.8773e-01  7.81e-02  1.59e-05  3.97e-03  4.75e-06  5.45e-05  4.33e-01  
 17  +3.9996e-01  +4.4629e-01  4.63e-02  9.17e-06  2.29e-03  2.78e-06  3.27e-05  6.97e-01  
 18  +3.9204e-01  +4.1349e-01  2.14e-02  4.17e-06  1.04e-03  1.30e-06  1.54e-05  8.25e-01  
 19  +3.9151e-01  +4.1120e-01  1.97e-02  3.83e-06  9.56e-04  1.18e-06  1.42e-05  2.29e-01  
 20  +3.8786e-01  +3.9708e-01  9.22e-03  1.78e-06  4.45e-04  5.50e-07  6.77e-06  6.77e-01  
 21  +3.8494e-01  +3.8610e-01  1.16e-03  2.24e-07  5.59e-05  6.80e-08  8.71e-07  9.07e-01  
 22  +3.8455e-01  +3.8470e-01  1.40e-04  2.69e-08  6.71e-06  7.72e-09  1.05e-07  9.68e-01  
 23  +3.8450e-01  +3.8450e-01  1.56e-06  2.99e-10  7.45e-08  8.58e-11  1.17e-09  9.89e-01  
 24  +3.8450e-01  +3.8450e-01  1.56e-08  2.99e-12  7.46e-10  8.59e-13  1.17e-11  9.90e-01  
 25  +3.8450e-01  +3.8450e-01  1.56e-10  3.00e-14  7.47e-12  8.66e-15  1.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 257.4506ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:17 PM: Optimal value: 3.845e-01
(CVXPY) Oct 06 04:29:17 PM: Compilation took 7.811e-02 seconds
(CVXPY) Oct 06 04:29:17 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 26, Objective: 0.3845
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:17 PM: Your problem has 5269 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:17 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5269
  constraints   = 10269
  nnz(P)        = 0
  nnz(A)        = 86770
  cones (total) = 1
    : Nonnegative = 1,  numel = 10269

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7683e-01  +1.0990e+03  1.10e+03  4.46e-01  8.13e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2819e-01  +1.1816e+02  1.18e+02  1.76e-01  4.06e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0810e-01  +3.0547e+01  3.00e+01  1.21e-01  2.84e+01  5.18e-05  2.54e-01  3.85e-01  
  4  +5.0108e-01  +3.2409e+00  2.74e+00  1.89e-02  4.58e+00  6.44e-06  1.51e-01  6.45e-01  
  5  +5.0029e-01  +1.5286e+00  1.03e+00  6.90e-03  1.70e+00  5.62e-05  6.42e-02  9.90e-01  
  6  +4.9988e-01  +1.0720e+00  5.72e-01  2.39e-03  6.04e-01  1.61e-04  8.35e-03  9.11e-01  
  7  +4.9629e-01  +1.0500e+00  5.54e-01  2.78e-04  7.12e-02  1.67e-03  7.34e-04  9.13e-01  
  8  +4.8731e-01  +9.4263e-01  4.55e-01  1.18e-04  3.00e-02  2.50e-03  3.11e-04  6.63e-01  
  9  +4.8333e-01  +9.2112e-01  4.38e-01  1.02e-04  2.60e-02  2.26e-03  2.72e-04  2.24e-01  
 10  +4.7738e-01  +8.7800e-01  4.01e-01  9.02e-05  2.29e-02  1.64e-03  2.45e-04  2.45e-01  
 11  +4.6789e-01  +8.0609e-01  3.38e-01  7.99e-05  2.02e-02  8.53e-04  2.24e-04  2.88e-01  
 12  +4.4180e-01  +6.4554e-01  2.04e-01  4.67e-05  1.17e-02  1.08e-04  1.43e-04  6.66e-01  
 13  +4.1887e-01  +5.3583e-01  1.17e-01  2.50e-05  6.26e-03  4.48e-05  8.29e-05  5.15e-01  
 14  +4.0836e-01  +4.8943e-01  8.11e-02  1.68e-05  4.18e-03  2.22e-05  5.78e-05  5.19e-01  
 15  +3.9684e-01  +4.4018e-01  4.33e-02  8.71e-06  2.17e-03  1.00e-05  3.16e-05  5.50e-01  
 16  +3.9438e-01  +4.2970e-01  3.53e-02  7.03e-06  1.75e-03  7.42e-06  2.58e-05  2.89e-01  
 17  +3.9120e-01  +4.1643e-01  2.52e-02  4.97e-06  1.24e-03  4.82e-06  1.85e-05  3.77e-01  
 18  +3.8843e-01  +4.0369e-01  1.53e-02  2.98e-06  7.42e-04  1.02e-06  1.12e-05  9.90e-01  
 19  +3.8367e-01  +3.8601e-01  2.34e-03  4.56e-07  1.14e-04  1.48e-07  1.78e-06  8.90e-01  
 20  +3.8281e-01  +3.8284e-01  3.20e-05  6.23e-09  1.55e-06  2.01e-09  2.44e-08  9.86e-01  
 21  +3.8280e-01  +3.8280e-01  3.20e-07  6.24e-11  1.55e-08  2.01e-11  2.45e-10  9.90e-01  
 22  +3.8280e-01  +3.8280e-01  3.22e-09  6.27e-13  1.56e-10  2.02e-13  2.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 235.3216ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:17 PM: Optimal value: 3.828e-01
(CVXPY) Oct 06 04:29:17 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:29:17 PM: Solver (including time spent in interface) took 2.657e-01 seconds
Iteration: 27, Objective: 0.3828
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:18 PM: Your problem has 5279 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:18 PM: Finished problem compilation (took 7.876e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5279
  constraints   = 10279
  nnz(P)        = 0
  nnz(A)        = 86915
  cones (total) = 1
    : Nonnegative = 1,  numel = 10279

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7681e-01  +1.0990e+03  1.10e+03  4.46e-01  8.13e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2818e-01  +1.1814e+02  1.18e+02  1.76e-01  4.06e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0810e-01  +3.0547e+01  3.00e+01  1.21e-01  2.83e+01  5.18e-05  2.54e-01  3.85e-01  
  4  +5.0108e-01  +3.2425e+00  2.74e+00  1.89e-02  4.58e+00  6.45e-06  1.51e-01  6.45e-01  
  5  +5.0029e-01  +1.5315e+00  1.03e+00  6.92e-03  1.71e+00  5.64e-05  6.42e-02  9.90e-01  
  6  +4.9988e-01  +1.0700e+00  5.70e-01  2.37e-03  5.99e-01  1.63e-04  8.25e-03  9.12e-01  
  7  +4.9627e-01  +1.0481e+00  5.52e-01  2.76e-04  7.06e-02  1.68e-03  7.29e-04  9.13e-01  
  8  +4.8719e-01  +9.3991e-01  4.53e-01  1.17e-04  2.97e-02  2.49e-03  3.09e-04  6.65e-01  
  9  +4.8323e-01  +9.1941e-01  4.36e-01  1.01e-04  2.57e-02  2.26e-03  2.69e-04  2.26e-01  
 10  +4.7713e-01  +8.7596e-01  3.99e-01  8.94e-05  2.27e-02  1.63e-03  2.42e-04  2.46e-01  
 11  +4.6721e-01  +8.0202e-01  3.35e-01  7.88e-05  1.99e-02  8.39e-04  2.21e-04  2.92e-01  
 12  +4.4013e-01  +6.3746e-01  1.97e-01  4.49e-05  1.13e-02  1.05e-04  1.38e-04  6.69e-01  
 13  +4.1715e-01  +5.2837e-01  1.11e-01  2.37e-05  5.92e-03  4.02e-05  7.88e-05  5.48e-01  
 14  +4.0983e-01  +4.9591e-01  8.61e-02  1.78e-05  4.44e-03  2.22e-05  6.09e-05  4.88e-01  
 15  +3.9612e-01  +4.3749e-01  4.14e-02  8.29e-06  2.07e-03  8.86e-06  3.01e-05  5.93e-01  
 16  +3.9392e-01  +4.2812e-01  3.42e-02  6.80e-06  1.69e-03  6.69e-06  2.49e-05  2.78e-01  
 17  +3.9111e-01  +4.1652e-01  2.54e-02  5.01e-06  1.25e-03  4.62e-06  1.86e-05  3.33e-01  
 18  +3.8810e-01  +4.0290e-01  1.48e-02  2.88e-06  7.18e-04  9.85e-07  1.09e-05  9.90e-01  
 19  +3.8480e-01  +3.9072e-01  5.92e-03  1.15e-06  2.87e-04  3.87e-07  4.43e-06  6.28e-01  
 20  +3.8280e-01  +3.8333e-01  5.24e-04  1.02e-07  2.53e-05  2.96e-08  3.98e-07  9.84e-01  
 21  +3.8260e-01  +3.8261e-01  6.38e-06  1.24e-09  3.08e-07  3.57e-10  4.85e-09  9.90e-01  
 22  +3.8260e-01  +3.8260e-01  6.39e-08  1.24e-11  3.09e-09  3.58e-12  4.87e-11  9.90e-01  
 23  +3.8260e-01  +3.8260e-01  6.39e-10  1.24e-13  3.09e-11  3.60e-14  4.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 243.866ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:18 PM: Optimal value: 3.826e-01
(CVXPY) Oct 06 04:29:18 PM: Compilation took 7.876e-02 seconds
(CVXPY) Oct 06 04:29:18 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 28, Objective: 0.3826
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:18 PM: Your problem has 5289 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:18 PM: Finished problem compilation (took 7.819e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5289
  constraints   = 10289
  nnz(P)        = 0
  nnz(A)        = 87336
  cones (total) = 1
    : Nonnegative = 1,  numel = 10289

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7675e-01  +1.0990e+03  1.10e+03  4.46e-01  8.12e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2814e-01  +1.1806e+02  1.18e+02  1.75e-01  4.05e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0809e-01  +3.0526e+01  3.00e+01  1.21e-01  2.83e+01  5.19e-05  2.53e-01  3.87e-01  
  4  +5.0108e-01  +3.2404e+00  2.74e+00  1.89e-02  4.58e+00  6.46e-06  1.50e-01  6.47e-01  
  5  +5.0030e-01  +1.5473e+00  1.05e+00  7.02e-03  1.73e+00  5.68e-05  6.35e-02  9.90e-01  
  6  +4.9986e-01  +1.0667e+00  5.67e-01  2.27e-03  5.75e-01  1.70e-04  7.74e-03  9.15e-01  
  7  +4.9619e-01  +1.0448e+00  5.49e-01  2.68e-04  6.85e-02  1.70e-03  7.05e-04  9.10e-01  
  8  +4.8705e-01  +9.3850e-01  4.51e-01  1.17e-04  2.98e-02  2.44e-03  3.09e-04  6.55e-01  
  9  +4.8496e-01  +9.2624e-01  4.41e-01  1.09e-04  2.77e-02  2.26e-03  2.88e-04  1.31e-01  
 10  +4.7967e-01  +8.9176e-01  4.12e-01  9.50e-05  2.41e-02  1.94e-03  2.55e-04  1.95e-01  
 11  +4.7541e-01  +8.5826e-01  3.83e-01  9.06e-05  2.30e-02  1.41e-03  2.47e-04  1.62e-01  
 12  +4.6271e-01  +7.7873e-01  3.16e-01  7.24e-05  1.83e-02  9.35e-04  2.05e-04  2.68e-01  
 13  +4.4184e-01  +6.5786e-01  2.16e-01  4.87e-05  1.22e-02  3.21e-04  1.48e-04  4.90e-01  
 14  +4.2103e-01  +5.5416e-01  1.33e-01  2.86e-05  7.15e-03  1.57e-04  9.34e-05  4.34e-01  
 15  +4.0441e-01  +4.7721e-01  7.28e-02  1.50e-05  3.73e-03  5.19e-05  5.22e-05  6.41e-01  
 16  +3.9480e-01  +4.3508e-01  4.03e-02  8.08e-06  2.01e-03  2.24e-05  2.94e-05  5.70e-01  
 17  +3.9253e-01  +4.2507e-01  3.25e-02  6.47e-06  1.61e-03  1.55e-05  2.38e-05  3.29e-01  
 18  +3.9025e-01  +4.1562e-01  2.54e-02  5.01e-06  1.25e-03  1.14e-05  1.87e-05  2.67e-01  
 19  +3.8663e-01  +3.9943e-01  1.28e-02  2.50e-06  6.24e-04  1.11e-06  9.50e-06  9.90e-01  
 20  +3.8380e-01  +3.8892e-01  5.12e-03  1.00e-06  2.49e-04  4.25e-07  3.88e-06  6.34e-01  
 21  +3.8207e-01  +3.8252e-01  4.46e-04  8.69e-08  2.16e-05  2.71e-08  3.42e-07  9.79e-01  
 22  +3.8190e-01  +3.8191e-01  5.06e-06  9.86e-10  2.46e-07  3.04e-10  3.89e-09  9.90e-01  
 23  +3.8190e-01  +3.8190e-01  5.07e-08  9.88e-12  2.46e-09  3.05e-12  3.90e-11  9.90e-01  
 24  +3.8190e-01  +3.8190e-01  5.07e-10  9.88e-14  2.46e-11  3.06e-14  3.91e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 260.5345ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:18 PM: Optimal value: 3.819e-01
(CVXPY) Oct 06 04:29:18 PM: Compilation took 7.819e-02 seconds
(CVXPY) Oct 06 04:29:18 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 29, Objective: 0.3819
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:19 PM: Your problem has 5294 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:19 PM: Finished problem compilation (took 7.820e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5294
  constraints   = 10294
  nnz(P)        = 0
  nnz(A)        = 87430
  cones (total) = 1
    : Nonnegative = 1,  numel = 10294

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0017e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7671e-01  +1.0990e+03  1.10e+03  4.47e-01  8.12e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2812e-01  +1.1803e+02  1.17e+02  1.75e-01  4.04e+01  1.81e-02  2.84e-01  9.71e-01  
  3  +5.0809e-01  +3.0520e+01  3.00e+01  1.21e-01  2.83e+01  5.19e-05  2.53e-01  3.87e-01  
  4  +5.0108e-01  +3.2407e+00  2.74e+00  1.89e-02  4.58e+00  6.46e-06  1.50e-01  6.47e-01  
  5  +5.0030e-01  +1.5536e+00  1.05e+00  7.06e-03  1.74e+00  5.71e-05  6.33e-02  9.90e-01  
  6  +4.9986e-01  +1.0661e+00  5.66e-01  2.24e-03  5.67e-01  1.72e-04  7.59e-03  9.18e-01  
  7  +4.9617e-01  +1.0442e+00  5.48e-01  2.66e-04  6.79e-02  1.71e-03  6.98e-04  9.09e-01  
  8  +4.8675e-01  +9.3676e-01  4.50e-01  1.14e-04  2.91e-02  2.46e-03  3.02e-04  6.62e-01  
  9  +4.8512e-01  +9.2637e-01  4.41e-01  1.09e-04  2.78e-02  2.29e-03  2.89e-04  9.71e-02  
 10  +4.7968e-01  +8.9206e-01  4.12e-01  9.46e-05  2.41e-02  1.99e-03  2.54e-04  1.95e-01  
 11  +4.7635e-01  +8.6603e-01  3.90e-01  9.15e-05  2.32e-02  1.57e-03  2.49e-04  1.22e-01  
 12  +4.6453e-01  +7.9073e-01  3.26e-01  7.49e-05  1.89e-02  1.04e-03  2.11e-04  2.57e-01  
 13  +4.4515e-01  +6.7602e-01  2.31e-01  5.30e-05  1.33e-02  3.23e-04  1.59e-04  5.04e-01  
 14  +4.2189e-01  +5.5851e-01  1.37e-01  2.95e-05  7.38e-03  1.41e-04  9.62e-05  4.77e-01  
 15  +4.1189e-01  +5.1221e-01  1.00e-01  2.11e-05  5.26e-03  8.33e-05  7.14e-05  3.94e-01  
 16  +3.9992e-01  +4.5856e-01  5.86e-02  1.20e-05  2.99e-03  4.02e-05  4.27e-05  4.97e-01  
 17  +3.9480e-01  +4.3646e-01  4.17e-02  8.40e-06  2.09e-03  2.70e-05  3.07e-05  3.24e-01  
 18  +3.8884e-01  +4.1062e-01  2.18e-02  4.31e-06  1.07e-03  1.06e-05  1.63e-05  6.22e-01  
 19  +3.8704e-01  +4.0155e-01  1.45e-02  2.84e-06  7.08e-04  1.67e-06  1.08e-05  9.41e-01  
 20  +3.8370e-01  +3.8909e-01  5.39e-03  1.05e-06  2.62e-04  5.10e-07  4.10e-06  7.56e-01  
 21  +3.8178e-01  +3.8198e-01  2.03e-04  3.96e-08  9.86e-06  1.55e-08  1.56e-07  9.78e-01  
 22  +3.8170e-01  +3.8170e-01  2.03e-06  3.97e-10  9.88e-08  1.55e-10  1.57e-09  9.90e-01  
 23  +3.8170e-01  +3.8170e-01  2.03e-08  3.97e-12  9.88e-10  1.55e-12  1.57e-11  9.90e-01  
 24  +3.8170e-01  +3.8170e-01  2.03e-10  3.97e-14  9.88e-12  1.56e-14  1.57e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 262.4719ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:19 PM: Optimal value: 3.817e-01
(CVXPY) Oct 06 04:29:19 PM: Compilation took 7.820e-02 seconds
(CVXPY) Oct 06 04:29:19 PM: Solver (including time spent in interface) took 2.812e-01 seconds
Iteration: 30, Objective: 0.3817
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:19 PM: Your problem has 5304 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:19 PM: Finished problem compilation (took 9.374e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5304
  constraints   = 10304
  nnz(P)        = 0
  nnz(A)        = 87753
  cones (total) = 1
    : Nonnegative = 1,  numel = 10304

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0018e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7662e-01  +1.0990e+03  1.10e+03  4.47e-01  8.11e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2805e-01  +1.1788e+02  1.17e+02  1.75e-01  4.03e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0808e-01  +3.0484e+01  3.00e+01  1.21e-01  2.82e+01  5.20e-05  2.53e-01  3.89e-01  
  4  +5.0108e-01  +3.2353e+00  2.73e+00  1.89e-02  4.57e+00  6.47e-06  1.49e-01  6.49e-01  
  5  +5.0031e-01  +1.5918e+00  1.09e+00  7.30e-03  1.80e+00  5.84e-05  6.19e-02  9.90e-01  
  6  +4.9986e-01  +1.1036e+00  6.04e-01  2.28e-03  5.76e-01  1.80e-04  7.49e-03  9.17e-01  
  7  +4.9623e-01  +1.0795e+00  5.83e-01  2.81e-04  7.19e-02  1.67e-03  7.36e-04  9.02e-01  
  8  +4.8709e-01  +9.6132e-01  4.74e-01  1.23e-04  3.15e-02  2.29e-03  3.25e-04  6.58e-01  
  9  +4.8431e-01  +9.4959e-01  4.65e-01  1.09e-04  2.77e-02  2.03e-03  2.88e-04  2.47e-01  
 10  +4.7414e-01  +8.6082e-01  3.87e-01  9.56e-05  2.43e-02  9.02e-04  2.61e-04  3.46e-01  
 11  +4.5249e-01  +7.2203e-01  2.70e-01  6.37e-05  1.60e-02  2.09e-04  1.87e-04  6.00e-01  
 12  +4.2448e-01  +5.7462e-01  1.50e-01  3.30e-05  8.25e-03  8.03e-05  1.06e-04  5.11e-01  
 13  +4.1497e-01  +5.3082e-01  1.16e-01  2.48e-05  6.19e-03  5.07e-05  8.27e-05  3.58e-01  
 14  +4.0493e-01  +4.8516e-01  8.02e-02  1.67e-05  4.16e-03  2.61e-05  5.80e-05  4.96e-01  
 15  +3.9383e-01  +4.3670e-01  4.29e-02  8.73e-06  2.17e-03  1.25e-05  3.20e-05  5.06e-01  
 16  +3.9152e-01  +4.2655e-01  3.50e-02  7.08e-06  1.76e-03  9.35e-06  2.62e-05  2.70e-01  
 17  +3.8458e-01  +3.9666e-01  1.21e-02  2.40e-06  5.98e-04  1.58e-06  9.25e-06  8.86e-01  
 18  +3.8229e-01  +3.8760e-01  5.31e-03  1.05e-06  2.62e-04  5.54e-07  4.12e-06  7.14e-01  
 19  +3.8061e-01  +3.8117e-01  5.59e-04  1.11e-07  2.75e-05  3.57e-08  4.39e-07  9.77e-01  
 20  +3.8040e-01  +3.8041e-01  6.12e-06  1.21e-09  3.01e-07  3.88e-10  4.81e-09  9.89e-01  
 21  +3.8040e-01  +3.8040e-01  6.12e-08  1.21e-11  3.01e-09  3.88e-12  4.82e-11  9.90e-01  
 22  +3.8040e-01  +3.8040e-01  6.12e-10  1.21e-13  3.01e-11  3.89e-14  4.83e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 245.4277ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:20 PM: Optimal value: 3.804e-01
(CVXPY) Oct 06 04:29:20 PM: Compilation took 9.374e-02 seconds
(CVXPY) Oct 06 04:29:20 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 31, Objective: 0.3804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:20 PM: Your problem has 5314 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:20 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5314
  constraints   = 10314
  nnz(P)        = 0
  nnz(A)        = 88012
  cones (total) = 1
    : Nonnegative = 1,  numel = 10314

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0018e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7661e-01  +1.0990e+03  1.10e+03  4.47e-01  8.10e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2804e-01  +1.1787e+02  1.17e+02  1.75e-01  4.03e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0807e-01  +3.0479e+01  3.00e+01  1.21e-01  2.82e+01  5.20e-05  2.53e-01  3.90e-01  
  4  +5.0108e-01  +3.2372e+00  2.74e+00  1.89e-02  4.57e+00  6.47e-06  1.49e-01  6.49e-01  
  5  +5.0031e-01  +1.5949e+00  1.09e+00  7.32e-03  1.80e+00  5.86e-05  6.19e-02  9.90e-01  
  6  +4.9984e-01  +1.0918e+00  5.92e-01  2.19e-03  5.55e-01  1.83e-04  7.15e-03  9.24e-01  
  7  +4.9615e-01  +1.0680e+00  5.72e-01  2.71e-04  6.92e-02  1.70e-03  7.09e-04  9.02e-01  
  8  +4.8673e-01  +9.5128e-01  4.65e-01  1.19e-04  3.04e-02  2.30e-03  3.14e-04  6.60e-01  
  9  +4.8387e-01  +9.4000e-01  4.56e-01  1.05e-04  2.69e-02  2.01e-03  2.79e-04  2.51e-01  
 10  +4.7344e-01  +8.5428e-01  3.81e-01  9.32e-05  2.36e-02  9.79e-04  2.55e-04  3.05e-01  
 11  +4.5223e-01  +7.2107e-01  2.69e-01  6.39e-05  1.61e-02  2.58e-04  1.88e-04  5.59e-01  
 12  +4.2386e-01  +5.7199e-01  1.48e-01  3.25e-05  8.13e-03  9.71e-05  1.05e-04  5.21e-01  
 13  +4.1395e-01  +5.2646e-01  1.13e-01  2.40e-05  6.00e-03  5.86e-05  8.05e-05  3.84e-01  
 14  +4.0444e-01  +4.8332e-01  7.89e-02  1.64e-05  4.10e-03  3.18e-05  5.72e-05  4.62e-01  
 15  +3.9343e-01  +4.3524e-01  4.18e-02  8.53e-06  2.12e-03  1.50e-05  3.12e-05  5.13e-01  
 16  +3.9126e-01  +4.2570e-01  3.44e-02  6.97e-06  1.73e-03  1.12e-05  2.58e-05  2.70e-01  
 17  +3.8450e-01  +3.9678e-01  1.23e-02  2.45e-06  6.09e-04  2.22e-06  9.42e-06  8.40e-01  
 18  +3.8218e-01  +3.8753e-01  5.34e-03  1.06e-06  2.63e-04  7.36e-07  4.14e-06  7.13e-01  
 19  +3.8056e-01  +3.8126e-01  6.99e-04  1.38e-07  3.44e-05  5.24e-08  5.49e-07  9.66e-01  
 20  +3.8030e-01  +3.8031e-01  8.03e-06  1.59e-09  3.95e-07  5.98e-10  6.33e-09  9.89e-01  
 21  +3.8030e-01  +3.8030e-01  8.05e-08  1.59e-11  3.96e-09  5.99e-12  6.34e-11  9.90e-01  
 22  +3.8030e-01  +3.8030e-01  8.05e-10  1.59e-13  3.96e-11  6.00e-14  6.35e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 245.1948ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:20 PM: Optimal value: 3.803e-01
(CVXPY) Oct 06 04:29:20 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:29:20 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 32, Objective: 0.3803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:20 PM: Your problem has 5315 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:21 PM: Finished problem compilation (took 7.813e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5315
  constraints   = 10315
  nnz(P)        = 0
  nnz(A)        = 88032
  cones (total) = 1
    : Nonnegative = 1,  numel = 10315

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0018e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7660e-01  +1.0990e+03  1.10e+03  4.47e-01  8.10e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2804e-01  +1.1786e+02  1.17e+02  1.75e-01  4.03e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0807e-01  +3.0478e+01  3.00e+01  1.21e-01  2.81e+01  5.20e-05  2.53e-01  3.90e-01  
  4  +5.0108e-01  +3.2373e+00  2.74e+00  1.89e-02  4.57e+00  6.47e-06  1.49e-01  6.49e-01  
  5  +5.0032e-01  +1.5966e+00  1.10e+00  7.33e-03  1.80e+00  5.86e-05  6.18e-02  9.90e-01  
  6  +4.9984e-01  +1.0875e+00  5.88e-01  2.15e-03  5.45e-01  1.85e-04  6.99e-03  9.28e-01  
  7  +4.9612e-01  +1.0638e+00  5.68e-01  2.67e-04  6.82e-02  1.70e-03  6.98e-04  9.01e-01  
  8  +4.8657e-01  +9.4709e-01  4.61e-01  1.18e-04  3.00e-02  2.29e-03  3.10e-04  6.62e-01  
  9  +4.8378e-01  +9.3670e-01  4.53e-01  1.04e-04  2.66e-02  1.99e-03  2.77e-04  2.53e-01  
 10  +4.7323e-01  +8.5148e-01  3.78e-01  9.24e-05  2.34e-02  9.86e-04  2.53e-04  2.94e-01  
 11  +4.5224e-01  +7.2097e-01  2.69e-01  6.39e-05  1.61e-02  2.67e-04  1.88e-04  5.51e-01  
 12  +4.2244e-01  +5.6454e-01  1.42e-01  3.11e-05  7.77e-03  9.20e-05  1.01e-04  5.49e-01  
 13  +4.1351e-01  +5.2413e-01  1.11e-01  2.36e-05  5.88e-03  5.64e-05  7.90e-05  3.83e-01  
 14  +4.0379e-01  +4.8056e-01  7.68e-02  1.60e-05  3.98e-03  3.07e-05  5.57e-05  4.58e-01  
 15  +3.9299e-01  +4.3367e-01  4.07e-02  8.29e-06  2.06e-03  1.45e-05  3.05e-05  5.09e-01  
 16  +3.9047e-01  +4.2281e-01  3.23e-02  6.55e-06  1.63e-03  1.08e-05  2.44e-05  2.57e-01  
 17  +3.8380e-01  +3.9432e-01  1.05e-02  2.10e-06  5.22e-04  2.03e-06  8.12e-06  8.44e-01  
 18  +3.8191e-01  +3.8676e-01  4.84e-03  9.63e-07  2.39e-04  6.82e-07  3.78e-06  7.11e-01  
 19  +3.8029e-01  +3.8054e-01  2.49e-04  4.94e-08  1.23e-05  2.94e-08  1.97e-07  9.60e-01  
 20  +3.8020e-01  +3.8020e-01  2.53e-06  5.02e-10  1.25e-07  2.98e-10  2.00e-09  9.90e-01  
 21  +3.8020e-01  +3.8020e-01  2.53e-08  5.03e-12  1.25e-09  2.98e-12  2.00e-11  9.90e-01  
 22  +3.8020e-01  +3.8020e-01  2.53e-10  5.02e-14  1.25e-11  2.99e-14  2.01e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 244.5289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:21 PM: Optimal value: 3.802e-01
(CVXPY) Oct 06 04:29:21 PM: Compilation took 7.813e-02 seconds
(CVXPY) Oct 06 04:29:21 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 33, Objective: 0.3802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:29:21 PM: Your problem has 5316 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:29:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:29:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:29:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:29:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:29:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:29:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:29:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:29:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:29:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:29:21 PM: Finished problem compilation (took 7.819e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5316
  constraints   = 10316
  nnz(P)        = 0
  nnz(A)        = 88055
  cones (total) = 1
    : Nonnegative = 1,  numel = 10316

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0018e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7660e-01  +1.0990e+03  1.10e+03  4.47e-01  8.10e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2803e-01  +1.1785e+02  1.17e+02  1.75e-01  4.03e+01  1.81e-02  2.84e-01  9.72e-01  
  3  +5.0807e-01  +3.0475e+01  3.00e+01  1.21e-01  2.81e+01  5.20e-05  2.52e-01  3.90e-01  
  4  +5.0108e-01  +3.2367e+00  2.74e+00  1.89e-02  4.57e+00  6.47e-06  1.49e-01  6.49e-01  
  5  +5.0032e-01  +1.5985e+00  1.10e+00  7.34e-03  1.81e+00  5.87e-05  6.18e-02  9.90e-01  
  6  +4.9984e-01  +1.0897e+00  5.90e-01  2.16e-03  5.47e-01  1.85e-04  7.02e-03  9.27e-01  
  7  +4.9613e-01  +1.0659e+00  5.70e-01  2.68e-04  6.85e-02  1.70e-03  7.02e-04  9.01e-01  
  8  +4.8659e-01  +9.4854e-01  4.62e-01  1.18e-04  3.02e-02  2.28e-03  3.12e-04  6.62e-01  
  9  +4.8384e-01  +9.3780e-01  4.54e-01  1.05e-04  2.68e-02  1.97e-03  2.79e-04  2.56e-01  
 10  +4.7327e-01  +8.5293e-01  3.80e-01  9.25e-05  2.34e-02  9.97e-04  2.53e-04  2.95e-01  
 11  +4.5217e-01  +7.2152e-01  2.69e-01  6.39e-05  1.61e-02  2.68e-04  1.88e-04  5.52e-01  
 12  +4.2260e-01  +5.6606e-01  1.43e-01  3.14e-05  7.85e-03  9.33e-05  1.02e-04  5.43e-01  
 13  +4.1329e-01  +5.2377e-01  1.10e-01  2.36e-05  5.88e-03  5.64e-05  7.90e-05  3.88e-01  
 14  +3.9912e-01  +4.6008e-01  6.10e-02  1.25e-05  3.12e-03  1.86e-05  4.47e-05  6.77e-01  
 15  +3.8941e-01  +4.1845e-01  2.90e-02  5.87e-06  1.46e-03  7.60e-06  2.20e-05  5.89e-01  
 16  +3.8596e-01  +4.0234e-01  1.64e-02  3.27e-06  8.12e-04  1.19e-06  1.24e-05  9.90e-01  
 17  +3.8251e-01  +3.8922e-01  6.71e-03  1.33e-06  3.32e-04  4.72e-07  5.21e-06  6.42e-01  
 18  +3.8058e-01  +3.8185e-01  1.27e-03  2.53e-07  6.29e-05  6.94e-08  1.01e-06  9.83e-01  
 19  +3.8011e-01  +3.8013e-01  1.83e-05  3.63e-09  9.03e-07  9.84e-10  1.45e-08  9.86e-01  
 20  +3.8010e-01  +3.8010e-01  1.84e-07  3.65e-11  9.07e-09  9.89e-12  1.46e-10  9.90e-01  
 21  +3.8010e-01  +3.8010e-01  1.84e-09  3.65e-13  9.07e-11  9.91e-14  1.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 240.0519ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:29:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:29:21 PM: Optimal value: 3.801e-01
(CVXPY) Oct 06 04:29:21 PM: Compilation took 7.819e-02 seconds
(CVXPY) Oct 06 04:29:21 PM: Solver (including time spent in interface) took 2.499e-01 seconds
FULL MODEL:
  Accruacy: 0.5956
  Our objective: 0.19119999999999998

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1514)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0026)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 1)            <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1)                                             <-- (term's our objective: 0.005)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0026)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.0018)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0018)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0014)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 30.08831524848938
Best over terms:
  Our final objective: 0.1514
    Its accruacy: 0.5757
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1514
  Highest accruacy: 0.5757
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

