Command:
python test_script.py -s constant_subclass -d 5 -n 50000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15208
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.15208
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:39 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:40 PM: Finished problem compilation (took 2.048e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.22e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4641e-01  +7.1486e+02  7.14e+02  1.49e-01  6.21e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7328e+02  1.73e+02  1.36e-01  5.63e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0051e-01  +6.9570e+00  6.46e+00  1.91e-02  7.77e+00  2.56e-06  1.86e-01  5.44e-01  
  5  +5.0000e-01  +1.0103e+00  5.10e-01  1.55e-03  6.47e-01  2.66e-05  1.41e-01  9.90e-01  
  6  +4.9999e-01  +6.1611e-01  1.16e-01  3.50e-04  1.46e-01  1.39e-05  2.23e-02  8.53e-01  
  7  +4.9923e-01  +8.3681e-01  3.38e-01  4.28e-04  1.79e-01  5.38e-04  1.58e-03  9.80e-01  
  8  +4.8832e-01  +7.5683e-01  2.69e-01  2.91e-05  1.22e-02  6.73e-03  9.23e-05  9.57e-01  
  9  +4.7596e-01  +6.3692e-01  1.61e-01  8.50e-06  3.56e-03  7.90e-03  2.69e-05  8.05e-01  
 10  +4.6737e-01  +5.2494e-01  5.76e-02  3.12e-06  1.31e-03  4.49e-04  1.04e-05  7.80e-01  
 11  +4.5644e-01  +4.6631e-01  9.88e-03  4.71e-07  1.97e-04  5.47e-05  1.73e-06  8.52e-01  
 12  +4.5320e-01  +4.5352e-01  3.23e-04  1.35e-08  5.66e-06  5.84e-07  5.70e-08  9.87e-01  
 13  +4.5310e-01  +4.5310e-01  3.24e-06  1.35e-10  5.66e-08  5.85e-09  5.71e-10  9.90e-01  
 14  +4.5310e-01  +4.5310e-01  3.24e-08  1.35e-12  5.66e-10  5.85e-11  5.71e-12  9.90e-01  
 15  +4.5310e-01  +4.5310e-01  3.25e-10  1.36e-14  5.67e-12  6.64e-13  6.45e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 487.1213ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:40 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:40 PM: Optimal value: 4.531e-01
(CVXPY) Oct 06 03:55:40 PM: Compilation took 2.048e-01 seconds
(CVXPY) Oct 06 03:55:40 PM: Solver (including time spent in interface) took 5.354e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:40 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:40 PM: Finished problem compilation (took 1.946e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 246828
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  2.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.9961e-01  +5.0090e+03  5.01e+03  3.68e-01  1.30e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4637e-01  +7.1442e+02  7.14e+02  1.49e-01  6.58e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1135e-01  +1.7302e+02  1.73e+02  1.36e-01  5.95e+01  2.41e-05  2.33e-01  8.10e-02  
  4  +5.0049e-01  +6.6562e+00  6.16e+00  1.82e-02  7.87e+00  2.59e-06  1.83e-01  5.70e-01  
  5  +5.0001e-01  +1.1530e+00  6.53e-01  1.99e-03  8.79e-01  2.82e-05  1.33e-01  9.90e-01  
  6  +5.0000e-01  +7.7445e-01  2.74e-01  8.28e-04  3.66e-01  1.63e-05  4.75e-02  6.47e-01  
  7  +4.9996e-01  +7.4498e-01  2.45e-01  7.39e-04  3.27e-01  4.09e-05  1.15e-02  8.39e-01  
  8  +4.9887e-01  +7.3476e-01  2.36e-01  1.73e-04  7.69e-02  7.67e-04  5.30e-04  9.59e-01  
  9  +4.9274e-01  +7.1495e-01  2.22e-01  2.99e-05  1.33e-02  4.19e-03  8.55e-05  8.61e-01  
 10  +4.9349e-01  +6.9445e-01  2.01e-01  2.01e-05  8.99e-03  3.00e-03  5.57e-05  7.25e-01  
 11  +4.9620e-01  +6.8817e-01  1.92e-01  1.79e-05  8.00e-03  1.06e-03  4.84e-05  7.23e-01  
 12  +4.9372e-01  +6.7797e-01  1.84e-01  1.23e-05  5.49e-03  1.37e-03  3.31e-05  3.34e-01  
 13  +4.9249e-01  +6.6717e-01  1.75e-01  9.60e-06  4.29e-03  5.80e-04  2.58e-05  7.50e-01  
 14  +4.8572e-01  +6.4130e-01  1.56e-01  6.54e-06  2.92e-03  5.79e-04  1.78e-05  3.93e-01  
 15  +4.6673e-01  +5.6853e-01  1.02e-01  3.75e-06  1.67e-03  1.21e-04  1.07e-05  7.22e-01  
 16  +4.4168e-01  +4.8183e-01  4.02e-02  1.33e-06  5.91e-04  2.92e-05  4.03e-06  6.90e-01  
 17  +4.2499e-01  +4.2687e-01  1.89e-03  5.97e-08  2.65e-05  2.92e-07  1.89e-07  9.63e-01  
 18  +4.2407e-01  +4.2409e-01  1.92e-05  6.05e-10  2.68e-07  2.94e-09  1.92e-09  9.90e-01  
 19  +4.2406e-01  +4.2406e-01  1.92e-07  6.05e-12  2.68e-09  3.06e-11  2.00e-11  9.90e-01  
 20  +4.2406e-01  +4.2406e-01  1.92e-09  6.05e-14  2.69e-11  3.19e-13  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 836.33ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:41 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:41 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 03:55:41 PM: Compilation took 1.946e-01 seconds
(CVXPY) Oct 06 03:55:41 PM: Solver (including time spent in interface) took 8.863e-01 seconds
FULL MODEL:
  Accruacy: 0.57604
  Our objective: 0.15208

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.15208)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.229674339294434
Best over terms:
  Our final objective: 0.15208
    Its accruacy: 0.57604
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15208
  Highest accruacy: 0.57604
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

