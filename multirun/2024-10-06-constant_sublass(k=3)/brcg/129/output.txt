Command:
python test_script.py -s constant_subclass -d 4 -n 50 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 4.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:18 PM: Your problem has 34 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:18 PM: Finished problem compilation (took 4.140e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 34
  constraints   = 59
  nnz(P)        = 0
  nnz(A)        = 184
  cones (total) = 1
    : Nonnegative = 1,  numel = 59

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8836e-01  +2.6333e+01  2.58e+01  8.15e-01  5.47e+00  1.00e+00  1.10e+00   ------   
  1  +5.8736e-01  +5.2691e+00  4.68e+00  2.79e-01  2.77e+00  4.02e-03  5.15e-01  6.78e-01  
  2  +4.9412e-01  +1.2127e+00  7.19e-01  6.33e-02  7.26e-01  1.07e-02  1.69e-01  8.51e-01  
  3  +4.1946e-01  +8.0821e-01  3.89e-01  1.98e-02  2.35e-01  8.35e-03  6.22e-02  6.93e-01  
  4  +3.6228e-01  +4.2845e-01  6.62e-02  3.18e-03  3.65e-02  8.97e-04  1.45e-02  8.45e-01  
  5  +3.4126e-01  +3.4504e-01  3.79e-03  1.71e-04  1.95e-03  3.60e-05  9.34e-04  9.51e-01  
  6  +3.4011e-01  +3.4015e-01  3.80e-05  1.71e-06  1.95e-05  3.60e-07  9.44e-06  9.90e-01  
  7  +3.4010e-01  +3.4010e-01  3.80e-07  1.71e-08  1.95e-07  3.60e-09  9.44e-08  9.90e-01  
  8  +3.4010e-01  +3.4010e-01  3.80e-09  1.71e-10  1.95e-09  3.60e-11  9.44e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 447.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:18 PM: Optimal value: 3.401e-01
(CVXPY) Oct 06 03:49:18 PM: Compilation took 4.140e-02 seconds
(CVXPY) Oct 06 03:49:18 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3401
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:18 PM: Your problem has 44 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:18 PM: Finished problem compilation (took 5.022e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 44
  constraints   = 69
  nnz(P)        = 0
  nnz(A)        = 256
  cones (total) = 1
    : Nonnegative = 1,  numel = 69

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8121e-01  +2.6446e+01  2.60e+01  8.29e-01  5.73e+00  1.00e+00  1.11e+00   ------   
  1  +5.5304e-01  +5.3270e+00  4.77e+00  3.00e-01  2.85e+00  3.98e-03  5.31e-01  6.69e-01  
  2  +4.5523e-01  +1.3103e+00  8.55e-01  6.41e-02  7.60e-01  1.22e-02  1.71e-01  8.42e-01  
  3  +3.5250e-01  +7.3770e-01  3.85e-01  1.84e-02  2.23e-01  7.15e-03  5.82e-02  7.13e-01  
  4  +2.8738e-01  +4.6875e-01  1.81e-01  7.61e-03  9.12e-02  2.75e-03  2.75e-02  6.63e-01  
  5  +2.4833e-01  +2.7562e-01  2.73e-02  1.17e-03  1.38e-02  3.14e-04  4.93e-03  8.42e-01  
  6  +2.4038e-01  +2.4087e-01  4.94e-04  2.15e-05  2.51e-04  4.31e-06  9.54e-05  9.81e-01  
  7  +2.4021e-01  +2.4025e-01  3.10e-05  1.35e-06  1.56e-05  1.52e-07  6.62e-06  9.33e-01  
  8  +2.4020e-01  +2.4020e-01  3.82e-07  1.65e-08  1.91e-07  1.89e-09  8.48e-08  9.87e-01  
  9  +2.4020e-01  +2.4020e-01  3.82e-09  1.65e-10  1.91e-09  1.89e-11  8.48e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 407.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:18 PM: Optimal value: 2.402e-01
(CVXPY) Oct 06 03:49:18 PM: Compilation took 5.022e-03 seconds
(CVXPY) Oct 06 03:49:18 PM: Solver (including time spent in interface) took 4.588e-03 seconds
Iteration: 2, Objective: 0.2402
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:49:18 PM: Your problem has 45 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:49:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:49:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:49:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:49:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:49:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:49:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:49:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:49:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:49:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:49:18 PM: Finished problem compilation (took 9.954e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 45
  constraints   = 70
  nnz(P)        = 0
  nnz(A)        = 259
  cones (total) = 1
    : Nonnegative = 1,  numel = 70

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8094e-01  +2.6467e+01  2.60e+01  8.30e-01  5.70e+00  1.00e+00  1.11e+00   ------   
  1  +5.4984e-01  +5.3240e+00  4.77e+00  3.01e-01  2.83e+00  3.98e-03  5.32e-01  6.69e-01  
  2  +4.5003e-01  +1.2751e+00  8.25e-01  6.06e-02  7.19e-01  1.23e-02  1.63e-01  8.57e-01  
  3  +3.4176e-01  +7.1174e-01  3.70e-01  1.69e-02  2.04e-01  7.12e-03  5.45e-02  7.24e-01  
  4  +2.6504e-01  +3.5574e-01  9.07e-02  4.00e-03  4.70e-02  8.24e-04  1.53e-02  8.61e-01  
  5  +2.4210e-01  +2.4830e-01  6.20e-03  2.79e-04  3.24e-03  4.70e-05  1.18e-03  9.34e-01  
  6  +2.4054e-01  +2.4147e-01  9.40e-04  4.23e-05  4.91e-04  6.81e-06  1.84e-04  8.49e-01  
  7  +2.4026e-01  +2.4041e-01  1.50e-04  6.59e-06  7.59e-05  1.11e-06  3.17e-05  9.10e-01  
  8  +2.4020e-01  +2.4020e-01  3.30e-06  1.44e-07  1.66e-06  1.52e-08  7.42e-07  9.78e-01  
  9  +2.4020e-01  +2.4020e-01  3.30e-08  1.44e-09  1.65e-08  1.52e-10  7.44e-09  9.90e-01  
 10  +2.4020e-01  +2.4020e-01  3.30e-10  1.44e-11  1.65e-10  1.52e-12  7.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 591.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:49:18 PM: Problem status: optimal
(CVXPY) Oct 06 03:49:18 PM: Optimal value: 2.402e-01
(CVXPY) Oct 06 03:49:18 PM: Compilation took 9.954e-03 seconds
(CVXPY) Oct 06 03:49:18 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.76
  Our objective: 0.52

IF 
    (x0 = 0 AND x1 = 0)            <-- (term's our objective: 0.4)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1) <-- (term's our objective: 0.12)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.590163230895996
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

