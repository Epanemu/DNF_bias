Command:
python test_script.py -s constant_subclass -d 9 -n 500 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.184
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.744
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:10 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Finished problem compilation (took 3.184e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +2.5089e+02  2.50e+02  9.38e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8016e-01  +5.4648e+01  5.41e+01  4.07e-01  1.58e+01  3.78e-03  5.77e-01  5.86e-01  
  2  +5.2846e-01  +6.2898e+00  5.76e+00  1.28e-01  6.30e+00  1.68e-02  2.63e-01  9.74e-01  
  3  +5.0257e-01  +1.4708e+00  9.68e-01  3.04e-02  1.49e+00  3.98e-05  1.87e-01  8.32e-01  
  4  +4.9989e-01  +7.0507e-01  2.05e-01  6.43e-03  3.25e-01  1.59e-05  4.33e-02  7.99e-01  
  5  +4.8398e-01  +8.4427e-01  3.60e-01  2.32e-03  1.20e-01  1.59e-04  7.36e-03  9.18e-01  
  6  +4.5889e-01  +5.8216e-01  1.23e-01  6.16e-04  3.17e-02  5.69e-05  2.22e-03  8.01e-01  
  7  +4.4011e-01  +4.9550e-01  5.54e-02  2.45e-04  1.26e-02  2.91e-05  1.00e-03  6.87e-01  
  8  +4.3008e-01  +4.4921e-01  1.91e-02  8.21e-05  4.20e-03  1.65e-05  3.61e-04  9.90e-01  
  9  +4.2425e-01  +4.2473e-01  4.76e-04  2.02e-06  1.03e-04  3.35e-07  9.28e-06  9.88e-01  
 10  +4.2410e-01  +4.2411e-01  4.76e-06  2.02e-08  1.03e-06  3.35e-09  9.28e-08  9.90e-01  
 11  +4.2410e-01  +4.2410e-01  4.76e-08  2.02e-10  1.03e-08  3.35e-11  9.28e-10  9.90e-01  
 12  +4.2410e-01  +4.2410e-01  4.76e-10  2.02e-12  1.03e-10  3.35e-13  9.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.7126ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:10 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 04:15:10 PM: Compilation took 3.184e-02 seconds
(CVXPY) Oct 06 04:15:10 PM: Solver (including time spent in interface) took 1.556e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:10 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3545
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +2.5173e+02  2.51e+02  9.39e-01  2.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.7704e-01  +5.4827e+01  5.42e+01  4.11e-01  1.63e+01  3.78e-03  5.82e-01  5.86e-01  
  2  +5.2499e-01  +6.2842e+00  5.76e+00  1.26e-01  6.35e+00  1.75e-02  2.59e-01  9.90e-01  
  3  +5.0546e-01  +1.7207e+00  1.22e+00  4.08e-02  2.11e+00  2.21e-03  1.29e-01  7.72e-01  
  4  +4.9883e-01  +1.3489e+00  8.50e-01  1.57e-02  8.45e-01  3.28e-03  4.37e-02  7.64e-01  
  5  +4.8389e-01  +1.1320e+00  6.48e-01  5.88e-03  3.20e-01  4.55e-03  1.64e-02  6.60e-01  
  6  +4.6861e-01  +8.5607e-01  3.87e-01  3.27e-03  1.76e-01  1.73e-03  9.95e-03  5.33e-01  
  7  +4.5152e-01  +6.5066e-01  1.99e-01  1.42e-03  7.53e-02  7.22e-04  4.61e-03  6.46e-01  
  8  +4.4212e-01  +5.9178e-01  1.50e-01  7.73e-04  4.10e-02  6.52e-04  2.54e-03  5.13e-01  
  9  +4.3996e-01  +5.6749e-01  1.28e-01  6.93e-04  3.67e-02  3.00e-04  2.27e-03  4.61e-01  
 10  +4.3131e-01  +5.2597e-01  9.47e-02  3.97e-04  2.11e-02  1.48e-04  1.32e-03  8.32e-01  
 11  +4.2284e-01  +4.8915e-01  6.63e-02  2.47e-04  1.31e-02  1.00e-04  8.49e-04  4.49e-01  
 12  +4.1734e-01  +4.5680e-01  3.95e-02  1.50e-04  7.94e-03  4.26e-05  5.29e-04  9.90e-01  
 13  +4.0356e-01  +4.0735e-01  3.79e-03  1.34e-05  7.06e-04  2.26e-06  5.01e-05  9.56e-01  
 14  +4.0212e-01  +4.0216e-01  4.27e-05  1.50e-07  7.91e-06  2.39e-08  5.69e-07  9.89e-01  
 15  +4.0210e-01  +4.0210e-01  4.27e-07  1.50e-09  7.91e-08  2.39e-10  5.69e-09  9.90e-01  
 16  +4.0210e-01  +4.0210e-01  4.27e-09  1.50e-11  7.91e-10  2.39e-12  5.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.9563ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:10 PM: Optimal value: 4.021e-01
(CVXPY) Oct 06 04:15:10 PM: Compilation took 1.571e-02 seconds
(CVXPY) Oct 06 04:15:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:10 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3903
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +2.5149e+02  2.51e+02  9.39e-01  2.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7540e-01  +5.4805e+01  5.42e+01  4.13e-01  1.63e+01  3.78e-03  5.82e-01  5.86e-01  
  2  +5.2338e-01  +6.3825e+00  5.86e+00  1.26e-01  6.34e+00  1.78e-02  2.58e-01  9.90e-01  
  3  +5.0585e-01  +1.6346e+00  1.13e+00  3.54e-02  1.89e+00  2.53e-03  1.01e-01  7.73e-01  
  4  +5.0401e-01  +1.6674e+00  1.16e+00  2.49e-02  1.35e+00  3.58e-03  6.52e-02  4.06e-01  
  5  +4.9160e-01  +1.6178e+00  1.13e+00  1.01e-02  5.61e-01  5.85e-03  2.59e-02  7.44e-01  
  6  +4.6895e-01  +1.1349e+00  6.66e-01  4.51e-03  2.49e-01  3.25e-03  1.23e-02  6.14e-01  
  7  +4.5061e-01  +9.5776e-01  5.07e-01  2.80e-03  1.54e-01  2.34e-03  7.85e-03  4.68e-01  
  8  +4.3120e-01  +8.0683e-01  3.76e-01  1.79e-03  9.78e-02  1.46e-03  5.27e-03  4.67e-01  
  9  +4.1143e-01  +6.4924e-01  2.38e-01  1.18e-03  6.38e-02  2.72e-04  3.82e-03  7.16e-01  
 10  +3.7209e-01  +4.3639e-01  6.43e-02  2.81e-04  1.50e-02  5.03e-05  1.06e-03  7.54e-01  
 11  +3.5608e-01  +3.6145e-01  5.37e-03  2.32e-05  1.24e-03  4.40e-06  1.00e-04  9.90e-01  
 12  +3.5434e-01  +3.5444e-01  1.06e-04  4.58e-07  2.44e-05  8.61e-08  2.02e-06  9.82e-01  
 13  +3.5430e-01  +3.5430e-01  1.06e-06  4.58e-09  2.44e-07  8.61e-10  2.02e-08  9.90e-01  
 14  +3.5430e-01  +3.5430e-01  1.06e-08  4.58e-11  2.44e-09  8.61e-12  2.02e-10  9.90e-01  
 15  +3.5430e-01  +3.5430e-01  1.06e-10  4.58e-13  2.44e-11  8.61e-14  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7192ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:10 PM: Optimal value: 3.543e-01
(CVXPY) Oct 06 04:15:10 PM: Compilation took 1.572e-02 seconds
(CVXPY) Oct 06 04:15:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3543
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:10 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Finished problem compilation (took 1.458e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 4169
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9884e-01  +2.5139e+02  2.51e+02  9.40e-01  2.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.7257e-01  +5.4850e+01  5.43e+01  4.16e-01  1.62e+01  3.78e-03  5.82e-01  5.85e-01  
  2  +5.2098e-01  +6.4990e+00  5.98e+00  1.27e-01  6.33e+00  1.82e-02  2.57e-01  9.90e-01  
  3  +5.0531e-01  +1.5402e+00  1.03e+00  2.90e-02  1.58e+00  2.91e-03  7.83e-02  7.69e-01  
  4  +5.0512e-01  +1.6160e+00  1.11e+00  2.57e-02  1.41e+00  3.45e-03  6.64e-02  2.26e-01  
  5  +5.0152e-01  +1.8176e+00  1.32e+00  2.22e-02  1.22e+00  3.18e-03  5.77e-02  4.99e-01  
  6  +4.8328e-01  +1.4967e+00  1.01e+00  7.01e-03  3.95e-01  5.80e-03  1.76e-02  7.07e-01  
  7  +4.6447e-01  +1.3289e+00  8.64e-01  4.59e-03  2.57e-01  5.29e-03  1.17e-02  4.16e-01  
  8  +4.3670e-01  +9.9879e-01  5.62e-01  2.76e-03  1.53e-01  1.69e-03  7.53e-03  6.06e-01  
  9  +3.9271e-01  +6.3296e-01  2.40e-01  1.21e-03  6.55e-02  1.46e-05  3.74e-03  8.65e-01  
 10  +3.5761e-01  +4.4591e-01  8.83e-02  4.08e-04  2.19e-02  2.76e-05  1.41e-03  7.22e-01  
 11  +3.4734e-01  +3.9840e-01  5.11e-02  2.30e-04  1.23e-02  2.66e-05  8.29e-04  5.80e-01  
 12  +3.3778e-01  +3.5414e-01  1.64e-02  7.25e-05  3.89e-03  1.19e-05  2.79e-04  8.10e-01  
 13  +3.3529e-01  +3.4370e-01  8.40e-03  3.64e-05  1.95e-03  6.93e-06  1.46e-04  6.62e-01  
 14  +3.3270e-01  +3.3328e-01  5.77e-04  2.44e-06  1.31e-04  5.11e-07  1.02e-05  9.57e-01  
 15  +3.3250e-01  +3.3251e-01  6.08e-06  2.56e-08  1.38e-06  5.39e-09  1.07e-07  9.90e-01  
 16  +3.3250e-01  +3.3250e-01  6.08e-08  2.56e-10  1.38e-08  5.39e-11  1.07e-09  9.90e-01  
 17  +3.3250e-01  +3.3250e-01  6.08e-10  2.56e-12  1.38e-10  5.39e-13  1.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.9448ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:10 PM: Optimal value: 3.325e-01
(CVXPY) Oct 06 04:15:10 PM: Compilation took 1.458e-02 seconds
(CVXPY) Oct 06 04:15:10 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.3325
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:10 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 4301
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9867e-01  +2.5168e+02  2.51e+02  9.41e-01  2.60e+01  1.00e+00  1.02e+00   ------   
  1  +5.6825e-01  +5.4866e+01  5.43e+01  4.17e-01  1.60e+01  3.79e-03  5.81e-01  5.86e-01  
  2  +5.1794e-01  +6.6738e+00  6.16e+00  1.25e-01  6.21e+00  1.86e-02  2.53e-01  9.90e-01  
  3  +5.0364e-01  +1.8140e+00  1.31e+00  3.07e-02  1.69e+00  4.73e-03  7.72e-02  7.19e-01  
  4  +4.8653e-01  +1.8335e+00  1.35e+00  1.23e-02  7.01e-01  9.66e-03  2.94e-02  7.04e-01  
  5  +4.6368e-01  +1.5005e+00  1.04e+00  7.03e-03  3.98e-01  8.07e-03  1.74e-02  4.77e-01  
  6  +4.3384e-01  +1.2245e+00  7.91e-01  3.99e-03  2.24e-01  6.39e-03  1.03e-02  4.97e-01  
  7  +3.9159e-01  +7.8250e-01  3.91e-01  2.11e-03  1.16e-01  5.34e-05  6.15e-03  7.45e-01  
  8  +3.4939e-01  +5.1823e-01  1.69e-01  8.42e-04  4.58e-02  3.62e-05  2.71e-03  6.08e-01  
  9  +3.3093e-01  +4.2220e-01  9.13e-02  4.42e-04  2.40e-02  2.79e-05  1.52e-03  5.07e-01  
 10  +3.1544e-01  +3.4343e-01  2.80e-02  1.32e-04  7.15e-03  1.62e-05  4.87e-04  8.08e-01  
 11  +3.0872e-01  +3.1427e-01  5.54e-03  2.48e-05  1.34e-03  4.05e-06  9.84e-05  8.73e-01  
 12  +3.0692e-01  +3.0728e-01  3.57e-04  1.55e-06  8.35e-05  2.61e-07  6.42e-06  9.49e-01  
 13  +3.0680e-01  +3.0681e-01  4.76e-06  2.06e-08  1.11e-06  3.43e-09  8.60e-08  9.87e-01  
 14  +3.0680e-01  +3.0680e-01  4.76e-08  2.06e-10  1.11e-08  3.43e-11  8.60e-10  9.90e-01  
 15  +3.0680e-01  +3.0680e-01  4.81e-10  2.09e-12  1.12e-10  3.48e-13  8.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.7296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:10 PM: Optimal value: 3.068e-01
(CVXPY) Oct 06 04:15:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:10 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 5, Objective: 0.3068
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:10 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:10 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4392
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9852e-01  +2.5191e+02  2.51e+02  9.41e-01  2.58e+01  1.00e+00  1.02e+00   ------   
  1  +5.6445e-01  +5.4920e+01  5.44e+01  4.18e-01  1.58e+01  3.80e-03  5.81e-01  5.86e-01  
  2  +5.1515e-01  +6.8368e+00  6.32e+00  1.24e-01  6.11e+00  1.91e-02  2.50e-01  9.90e-01  
  3  +5.0106e-01  +2.0416e+00  1.54e+00  3.16e-02  1.73e+00  6.15e-03  7.68e-02  7.08e-01  
  4  +4.7607e-01  +1.8617e+00  1.39e+00  1.15e-02  6.52e-01  1.17e-02  2.74e-02  6.82e-01  
  5  +4.4107e-01  +1.3816e+00  9.40e-01  5.63e-03  3.16e-01  8.22e-03  1.41e-02  5.76e-01  
  6  +4.0909e-01  +1.0896e+00  6.80e-01  3.52e-03  1.95e-01  4.65e-03  9.26e-03  4.78e-01  
  7  +3.5611e-01  +6.5276e-01  2.97e-01  1.52e-03  8.20e-02  8.01e-04  4.56e-03  6.61e-01  
  8  +3.1971e-01  +4.3885e-01  1.19e-01  5.94e-04  3.18e-02  2.50e-04  2.02e-03  6.34e-01  
  9  +2.9899e-01  +3.3062e-01  3.16e-02  1.53e-04  8.21e-03  4.58e-05  5.74e-04  8.72e-01  
 10  +2.9381e-01  +3.0832e-01  1.45e-02  6.64e-05  3.61e-03  2.00e-05  2.59e-04  6.65e-01  
 11  +2.9001e-01  +2.9263e-01  2.63e-03  1.15e-05  6.31e-04  2.46e-06  4.70e-05  9.90e-01  
 12  +2.8912e-01  +2.8916e-01  4.35e-05  1.89e-07  1.04e-05  3.45e-08  7.87e-07  9.83e-01  
 13  +2.8910e-01  +2.8910e-01  4.38e-07  1.91e-09  1.05e-07  3.47e-10  7.95e-09  9.90e-01  
 14  +2.8910e-01  +2.8910e-01  4.39e-09  1.91e-11  1.05e-09  3.47e-12  7.96e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.4833ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:10 PM: Optimal value: 2.891e-01
(CVXPY) Oct 06 04:15:10 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:10 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 6, Objective: 0.2891
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:11 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4511
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9834e-01  +2.5189e+02  2.51e+02  9.42e-01  2.56e+01  1.00e+00  1.02e+00   ------   
  1  +5.5951e-01  +5.4959e+01  5.44e+01  4.18e-01  1.56e+01  3.81e-03  5.79e-01  5.87e-01  
  2  +5.1163e-01  +7.0057e+00  6.49e+00  1.23e-01  6.00e+00  1.95e-02  2.46e-01  9.90e-01  
  3  +4.9640e-01  +2.1087e+00  1.61e+00  2.89e-02  1.59e+00  7.20e-03  6.89e-02  7.36e-01  
  4  +4.6254e-01  +1.7840e+00  1.32e+00  1.01e-02  5.72e-01  1.24e-02  2.39e-02  6.85e-01  
  5  +4.2891e-01  +1.4924e+00  1.06e+00  5.94e-03  3.34e-01  1.05e-02  1.46e-02  4.84e-01  
  6  +3.9499e-01  +1.1092e+00  7.14e-01  3.95e-03  2.18e-01  3.52e-03  1.04e-02  5.27e-01  
  7  +3.4018e-01  +6.2951e-01  2.89e-01  1.53e-03  8.27e-02  7.31e-04  4.58e-03  6.64e-01  
  8  +3.0316e-01  +4.0950e-01  1.06e-01  5.41e-04  2.91e-02  2.19e-04  1.81e-03  7.02e-01  
  9  +2.8910e-01  +3.4177e-01  5.27e-02  2.55e-04  1.38e-02  9.72e-05  9.04e-04  6.11e-01  
 10  +2.7925e-01  +2.9846e-01  1.92e-02  8.76e-05  4.76e-03  3.06e-05  3.35e-04  7.31e-01  
 11  +2.7425e-01  +2.7689e-01  2.64e-03  1.16e-05  6.30e-04  2.55e-06  4.74e-05  9.90e-01  
 12  +2.7332e-01  +2.7336e-01  4.22e-05  1.85e-07  1.00e-05  2.99e-08  7.75e-07  9.84e-01  
 13  +2.7330e-01  +2.7330e-01  4.25e-07  1.87e-09  1.01e-07  3.01e-10  7.82e-09  9.90e-01  
 14  +2.7330e-01  +2.7330e-01  4.25e-09  1.87e-11  1.01e-09  3.01e-12  7.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.5301ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:11 PM: Optimal value: 2.733e-01
(CVXPY) Oct 06 04:15:11 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 7, Objective: 0.2733
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:11 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4637
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +2.5199e+02  2.51e+02  9.42e-01  2.55e+01  1.00e+00  1.02e+00   ------   
  1  +5.5673e-01  +5.4956e+01  5.44e+01  4.19e-01  1.54e+01  3.82e-03  5.78e-01  5.88e-01  
  2  +5.0938e-01  +7.1032e+00  6.59e+00  1.21e-01  5.87e+00  1.98e-02  2.43e-01  9.90e-01  
  3  +4.9250e-01  +2.2700e+00  1.78e+00  2.88e-02  1.58e+00  8.36e-03  6.80e-02  7.37e-01  
  4  +4.4711e-01  +1.7865e+00  1.34e+00  9.01e-03  5.08e-01  1.39e-02  2.14e-02  7.14e-01  
  5  +4.1329e-01  +1.4298e+00  1.02e+00  5.51e-03  3.06e-01  9.16e-03  1.37e-02  4.91e-01  
  6  +3.5715e-01  +8.3772e-01  4.81e-01  2.64e-03  1.42e-01  6.55e-04  7.42e-03  7.33e-01  
  7  +3.1071e-01  +5.1915e-01  2.08e-01  1.09e-03  5.82e-02  2.32e-04  3.45e-03  5.88e-01  
  8  +2.7913e-01  +3.5190e-01  7.28e-02  3.60e-04  1.93e-02  7.79e-05  1.26e-03  7.23e-01  
  9  +2.6709e-01  +2.9849e-01  3.14e-02  1.49e-04  8.04e-03  3.27e-05  5.62e-04  6.68e-01  
 10  +2.5959e-01  +2.6613e-01  6.54e-03  2.99e-05  1.61e-03  6.43e-06  1.21e-04  8.59e-01  
 11  +2.5767e-01  +2.5813e-01  4.60e-04  2.09e-06  1.12e-04  3.92e-07  8.79e-06  9.71e-01  
 12  +2.5750e-01  +2.5751e-01  5.36e-06  2.43e-08  1.30e-06  4.30e-09  1.03e-07  9.89e-01  
 13  +2.5750e-01  +2.5750e-01  5.36e-08  2.43e-10  1.31e-08  4.30e-11  1.03e-09  9.90e-01  
 14  +2.5750e-01  +2.5750e-01  5.36e-10  2.43e-12  1.31e-10  4.30e-13  1.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.8408ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:11 PM: Optimal value: 2.575e-01
(CVXPY) Oct 06 04:15:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:11 PM: Solver (including time spent in interface) took 1.570e-02 seconds
Iteration: 8, Objective: 0.2575
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:11 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4711
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9810e-01  +2.5219e+02  2.52e+02  9.43e-01  2.53e+01  1.00e+00  1.02e+00   ------   
  1  +5.5111e-01  +5.5205e+01  5.47e+01  4.20e-01  1.53e+01  3.83e-03  5.79e-01  5.86e-01  
  2  +5.0587e-01  +7.2966e+00  6.79e+00  1.21e-01  5.81e+00  2.04e-02  2.42e-01  9.90e-01  
  3  +4.8589e-01  +2.0870e+00  1.60e+00  2.35e-02  1.29e+00  8.64e-03  5.51e-02  7.89e-01  
  4  +4.3219e-01  +1.5573e+00  1.13e+00  7.40e-03  4.14e-01  1.25e-02  1.76e-02  7.20e-01  
  5  +4.0075e-01  +1.3009e+00  9.00e-01  4.98e-03  2.75e-01  8.67e-03  1.24e-02  4.20e-01  
  6  +3.4038e-01  +7.8688e-01  4.47e-01  2.46e-03  1.31e-01  1.17e-03  6.92e-03  6.77e-01  
  7  +2.9318e-01  +4.9264e-01  1.99e-01  1.04e-03  5.50e-02  4.11e-04  3.34e-03  5.78e-01  
  8  +2.6627e-01  +3.5427e-01  8.80e-02  4.42e-04  2.34e-02  1.62e-04  1.57e-03  5.97e-01  
  9  +2.5195e-01  +2.8684e-01  3.49e-02  1.70e-04  9.05e-03  5.96e-05  6.53e-04  6.28e-01  
 10  +2.4370e-01  +2.4974e-01  6.03e-03  2.86e-05  1.53e-03  8.98e-06  1.19e-04  8.49e-01  
 11  +2.4211e-01  +2.4269e-01  5.81e-04  2.75e-06  1.46e-04  4.60e-07  1.19e-05  9.90e-01  
 12  +2.4190e-01  +2.4191e-01  6.88e-06  3.26e-08  1.73e-06  5.00e-09  1.43e-07  9.88e-01  
 13  +2.4190e-01  +2.4190e-01  6.88e-08  3.26e-10  1.73e-08  5.00e-11  1.43e-09  9.90e-01  
 14  +2.4190e-01  +2.4190e-01  6.88e-10  3.26e-12  1.73e-10  5.00e-13  1.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:11 PM: Optimal value: 2.419e-01
(CVXPY) Oct 06 04:15:11 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:11 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 9, Objective: 0.2419
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:11 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4779
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9794e-01  +2.5219e+02  2.52e+02  9.43e-01  2.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.4671e-01  +5.5251e+01  5.47e+01  4.21e-01  1.51e+01  3.84e-03  5.79e-01  5.86e-01  
  2  +5.0199e-01  +7.4409e+00  6.94e+00  1.19e-01  5.73e+00  2.08e-02  2.39e-01  9.90e-01  
  3  +4.7863e-01  +2.1331e+00  1.65e+00  2.21e-02  1.21e+00  9.48e-03  5.17e-02  7.99e-01  
  4  +4.2999e-01  +1.6356e+00  1.21e+00  8.70e-03  4.81e-01  1.12e-02  2.08e-02  6.39e-01  
  5  +3.9282e-01  +1.3699e+00  9.77e-01  5.46e-03  2.99e-01  9.16e-03  1.35e-02  4.41e-01  
  6  +3.3096e-01  +7.8551e-01  4.55e-01  2.54e-03  1.34e-01  1.39e-03  7.12e-03  6.70e-01  
  7  +2.8791e-01  +5.1098e-01  2.23e-01  1.19e-03  6.23e-02  5.61e-04  3.75e-03  5.40e-01  
  8  +2.6573e-01  +3.9360e-01  1.28e-01  6.60e-04  3.46e-02  2.77e-04  2.26e-03  5.15e-01  
  9  +2.4436e-01  +2.8290e-01  3.85e-02  1.93e-04  1.01e-02  7.16e-05  7.37e-04  7.13e-01  
 10  +2.3693e-01  +2.4721e-01  1.03e-02  5.06e-05  2.62e-03  1.68e-05  2.09e-04  7.57e-01  
 11  +2.3452e-01  +2.3622e-01  1.69e-03  8.23e-06  4.25e-04  2.25e-06  3.63e-05  8.66e-01  
 12  +2.3402e-01  +2.3410e-01  7.29e-05  3.52e-07  1.81e-05  6.63e-08  1.63e-06  9.70e-01  
 13  +2.3400e-01  +2.3400e-01  7.67e-07  3.69e-09  1.90e-07  6.92e-10  1.73e-08  9.89e-01  
 14  +2.3400e-01  +2.3400e-01  7.67e-09  3.69e-11  1.90e-09  6.92e-12  1.73e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.0537ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:11 PM: Optimal value: 2.340e-01
(CVXPY) Oct 06 04:15:11 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:11 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 10, Objective: 0.2340
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:11 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:11 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:11 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:11 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:11 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:11 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:11 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:11 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4866
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9788e-01  +2.5227e+02  2.52e+02  9.44e-01  2.49e+01  1.00e+00  1.02e+00   ------   
  1  +5.4335e-01  +5.5321e+01  5.48e+01  4.22e-01  1.49e+01  3.85e-03  5.78e-01  5.85e-01  
  2  +4.9936e-01  +7.5487e+00  7.05e+00  1.19e-01  5.64e+00  2.11e-02  2.37e-01  9.90e-01  
  3  +4.7367e-01  +2.1523e+00  1.68e+00  2.12e-02  1.16e+00  9.87e-03  4.96e-02  8.09e-01  
  4  +4.1029e-01  +1.5549e+00  1.14e+00  7.26e-03  3.99e-01  1.18e-02  1.75e-02  6.95e-01  
  5  +3.6211e-01  +1.1427e+00  7.81e-01  4.31e-03  2.33e-01  5.74e-03  1.10e-02  5.24e-01  
  6  +3.1321e-01  +7.4155e-01  4.28e-01  2.36e-03  1.24e-01  2.34e-03  6.66e-03  4.74e-01  
  7  +2.8128e-01  +5.3812e-01  2.57e-01  1.37e-03  7.20e-02  1.24e-03  4.21e-03  4.32e-01  
  8  +2.5311e-01  +3.7795e-01  1.25e-01  6.44e-04  3.40e-02  4.83e-04  2.18e-03  6.01e-01  
  9  +2.4182e-01  +3.1925e-01  7.74e-02  3.93e-04  2.08e-02  2.72e-04  1.39e-03  4.35e-01  
 10  +2.2715e-01  +2.4454e-01  1.74e-02  8.69e-05  4.58e-03  4.80e-05  3.38e-04  8.03e-01  
 11  +2.2298e-01  +2.2482e-01  1.84e-03  9.14e-06  4.78e-04  3.63e-06  3.81e-05  9.11e-01  
 12  +2.2243e-01  +2.2252e-01  8.62e-05  4.24e-07  2.21e-05  9.11e-08  1.90e-06  9.72e-01  
 13  +2.2240e-01  +2.2240e-01  9.25e-07  4.54e-09  2.37e-07  9.67e-10  2.05e-08  9.89e-01  
 14  +2.2240e-01  +2.2240e-01  9.26e-09  4.54e-11  2.37e-09  9.68e-12  2.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6362ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:11 PM: Optimal value: 2.224e-01
(CVXPY) Oct 06 04:15:11 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:15:11 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.2224
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:12 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4968
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9776e-01  +2.5235e+02  2.52e+02  9.44e-01  2.48e+01  1.00e+00  1.02e+00   ------   
  1  +5.4100e-01  +5.5326e+01  5.48e+01  4.23e-01  1.48e+01  3.85e-03  5.78e-01  5.86e-01  
  2  +4.9710e-01  +7.6306e+00  7.13e+00  1.18e-01  5.55e+00  2.13e-02  2.35e-01  9.90e-01  
  3  +4.6927e-01  +2.2040e+00  1.73e+00  2.10e-02  1.14e+00  1.03e-02  4.89e-02  8.09e-01  
  4  +4.1070e-01  +1.6603e+00  1.25e+00  8.23e-03  4.50e-01  1.16e-02  1.98e-02  6.49e-01  
  5  +3.6559e-01  +1.1798e+00  8.14e-01  4.82e-03  2.59e-01  4.86e-03  1.23e-02  5.38e-01  
  6  +3.1856e-01  +7.8957e-01  4.71e-01  2.67e-03  1.41e-01  2.22e-03  7.43e-03  4.63e-01  
  7  +2.7625e-01  +5.1189e-01  2.36e-01  1.27e-03  6.71e-02  9.45e-04  3.91e-03  5.35e-01  
  8  +2.5307e-01  +3.8950e-01  1.36e-01  7.10e-04  3.78e-02  4.81e-04  2.33e-03  4.93e-01  
  9  +2.3073e-01  +2.7556e-01  4.48e-02  2.26e-04  1.20e-02  1.30e-04  8.15e-04  7.09e-01  
 10  +2.2149e-01  +2.3143e-01  9.94e-03  4.94e-05  2.61e-03  2.48e-05  1.92e-04  7.93e-01  
 11  +2.1895e-01  +2.2002e-01  1.07e-03  5.29e-06  2.77e-04  1.93e-06  2.18e-05  9.13e-01  
 12  +2.1862e-01  +2.1868e-01  5.66e-05  2.77e-07  1.45e-05  7.70e-08  1.20e-06  9.61e-01  
 13  +2.1860e-01  +2.1860e-01  5.70e-07  2.79e-09  1.46e-07  7.73e-10  1.21e-08  9.90e-01  
 14  +2.1860e-01  +2.1860e-01  5.71e-09  2.79e-11  1.46e-09  7.73e-12  1.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.1048ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:12 PM: Optimal value: 2.186e-01
(CVXPY) Oct 06 04:15:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:12 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 12, Objective: 0.2186
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:12 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 5073
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9775e-01  +2.5237e+02  2.52e+02  9.44e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.3853e-01  +5.5413e+01  5.49e+01  4.24e-01  1.46e+01  3.86e-03  5.77e-01  5.86e-01  
  2  +4.9456e-01  +7.6743e+00  7.18e+00  1.17e-01  5.44e+00  2.14e-02  2.34e-01  9.90e-01  
  3  +4.6366e-01  +2.2422e+00  1.78e+00  2.07e-02  1.12e+00  1.05e-02  4.86e-02  8.14e-01  
  4  +4.0669e-01  +1.7079e+00  1.30e+00  8.88e-03  4.79e-01  1.08e-02  2.15e-02  6.21e-01  
  5  +3.7373e-01  +1.3432e+00  9.69e-01  5.96e-03  3.19e-01  6.33e-03  1.50e-02  4.26e-01  
  6  +3.2255e-01  +8.5457e-01  5.32e-01  3.08e-03  1.62e-01  2.34e-03  8.49e-03  5.47e-01  
  7  +2.7214e-01  +5.0235e-01  2.30e-01  1.26e-03  6.57e-02  7.80e-04  3.90e-03  6.19e-01  
  8  +2.5150e-01  +3.9873e-01  1.47e-01  7.77e-04  4.09e-02  4.31e-04  2.55e-03  4.63e-01  
  9  +2.3187e-01  +2.9941e-01  6.75e-02  3.46e-04  1.83e-02  1.80e-04  1.22e-03  5.60e-01  
 10  +2.2198e-01  +2.4931e-01  2.73e-02  1.38e-04  7.30e-03  5.91e-05  5.16e-04  6.97e-01  
 11  +2.1542e-01  +2.1808e-01  2.66e-03  1.35e-05  7.05e-04  4.33e-06  5.32e-05  9.12e-01  
 12  +2.1470e-01  +2.1499e-01  2.94e-04  1.48e-06  7.66e-05  3.60e-07  6.37e-06  9.03e-01  
 13  +2.1460e-01  +2.1462e-01  1.46e-05  7.33e-08  3.78e-06  1.51e-08  3.23e-07  9.69e-01  
 14  +2.1460e-01  +2.1460e-01  1.46e-07  7.35e-10  3.80e-08  1.52e-10  3.25e-09  9.90e-01  
 15  +2.1460e-01  +2.1460e-01  1.47e-09  7.36e-12  3.80e-10  1.53e-12  3.26e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.8972ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:12 PM: Optimal value: 2.146e-01
(CVXPY) Oct 06 04:15:12 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:12 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 13, Objective: 0.2146
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:12 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 5129
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9774e-01  +2.5239e+02  2.52e+02  9.45e-01  2.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.3621e-01  +5.5418e+01  5.49e+01  4.24e-01  1.44e+01  3.87e-03  5.75e-01  5.86e-01  
  2  +4.9265e-01  +7.7573e+00  7.26e+00  1.16e-01  5.30e+00  2.16e-02  2.31e-01  9.90e-01  
  3  +4.5829e-01  +2.2885e+00  1.83e+00  2.00e-02  1.07e+00  1.11e-02  4.70e-02  8.19e-01  
  4  +3.9730e-01  +1.8344e+00  1.44e+00  9.25e-03  4.95e-01  1.09e-02  2.25e-02  6.46e-01  
  5  +3.4834e-01  +1.2366e+00  8.88e-01  5.16e-03  2.72e-01  4.25e-03  1.34e-02  5.76e-01  
  6  +2.7921e-01  +5.4479e-01  2.66e-01  1.51e-03  7.74e-02  6.01e-04  4.52e-03  7.41e-01  
  7  +2.5625e-01  +4.4802e-01  1.92e-01  1.03e-03  5.39e-02  3.91e-04  3.26e-03  4.28e-01  
  8  +2.3201e-01  +3.2795e-01  9.59e-02  4.97e-04  2.62e-02  1.81e-04  1.71e-03  5.24e-01  
  9  +2.1632e-01  +2.5137e-01  3.50e-02  1.78e-04  9.36e-03  5.86e-05  6.70e-04  6.69e-01  
 10  +2.1008e-01  +2.2163e-01  1.15e-02  5.85e-05  3.05e-03  1.73e-05  2.33e-04  6.98e-01  
 11  +2.0722e-01  +2.0853e-01  1.31e-03  6.67e-06  3.45e-04  1.47e-06  2.82e-05  9.10e-01  
 12  +2.0683e-01  +2.0693e-01  9.99e-05  5.08e-07  2.62e-05  1.02e-07  2.23e-06  9.25e-01  
 13  +2.0680e-01  +2.0680e-01  1.10e-06  5.62e-09  2.89e-07  1.10e-09  2.48e-08  9.89e-01  
 14  +2.0680e-01  +2.0680e-01  1.10e-08  5.62e-11  2.90e-09  1.10e-11  2.48e-10  9.90e-01  
 15  +2.0680e-01  +2.0680e-01  1.10e-10  5.63e-13  2.90e-11  1.10e-13  2.49e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.1165ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:12 PM: Optimal value: 2.068e-01
(CVXPY) Oct 06 04:15:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:12 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 14, Objective: 0.2068
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:12 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 5178
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9754e-01  +2.5251e+02  2.52e+02  9.45e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.2836e-01  +5.5688e+01  5.52e+01  4.24e-01  1.43e+01  3.90e-03  5.75e-01  5.84e-01  
  2  +4.8623e-01  +7.9574e+00  7.47e+00  1.16e-01  5.25e+00  2.23e-02  2.30e-01  9.90e-01  
  3  +4.4514e-01  +2.2033e+00  1.76e+00  1.82e-02  9.72e-01  1.09e-02  4.25e-02  8.48e-01  
  4  +3.8800e-01  +2.0276e+00  1.64e+00  1.04e-02  5.49e-01  1.12e-02  2.50e-02  5.91e-01  
  5  +3.3454e-01  +1.1816e+00  8.47e-01  5.11e-03  2.66e-01  2.42e-03  1.33e-02  6.75e-01  
  6  +2.7002e-01  +5.5254e-01  2.83e-01  1.64e-03  8.34e-02  5.19e-04  4.90e-03  6.97e-01  
  7  +2.4596e-01  +4.4271e-01  1.97e-01  1.08e-03  5.60e-02  3.29e-04  3.38e-03  4.67e-01  
  8  +2.1990e-01  +3.0799e-01  8.81e-02  4.57e-04  2.40e-02  1.41e-04  1.56e-03  5.83e-01  
  9  +2.0695e-01  +2.4375e-01  3.68e-02  1.88e-04  9.89e-03  4.97e-05  6.76e-04  7.11e-01  
 10  +2.0173e-01  +2.1942e-01  1.77e-02  8.82e-05  4.72e-03  2.29e-05  3.22e-04  6.27e-01  
 11  +1.9949e-01  +2.1064e-01  1.12e-02  5.18e-05  2.88e-03  1.44e-05  1.90e-04  5.34e-01  
 12  +1.9679e-01  +2.0037e-01  3.57e-03  1.61e-05  9.05e-04  4.12e-06  6.12e-05  7.48e-01  
 13  +1.9561e-01  +1.9586e-01  2.55e-04  1.15e-06  6.45e-05  2.28e-07  4.50e-06  9.74e-01  
 14  +1.9550e-01  +1.9550e-01  2.72e-06  1.23e-08  6.87e-07  2.37e-09  4.83e-08  9.89e-01  
 15  +1.9550e-01  +1.9550e-01  2.72e-08  1.23e-10  6.87e-09  2.37e-11  4.83e-10  9.90e-01  
 16  +1.9550e-01  +1.9550e-01  2.72e-10  1.23e-12  6.87e-11  2.37e-13  4.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.2643ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:12 PM: Optimal value: 1.955e-01
(CVXPY) Oct 06 04:15:12 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:12 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 15, Objective: 0.1955
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:12 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 5229
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9737e-01  +2.5263e+02  2.52e+02  9.46e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.2268e-01  +5.5804e+01  5.53e+01  4.24e-01  1.41e+01  3.91e-03  5.74e-01  5.84e-01  
  2  +4.8023e-01  +8.1669e+00  7.69e+00  1.13e-01  5.14e+00  2.29e-02  2.26e-01  9.90e-01  
  3  +4.3269e-01  +2.4290e+00  2.00e+00  1.93e-02  1.02e+00  1.20e-02  4.47e-02  8.31e-01  
  4  +3.7956e-01  +2.1275e+00  1.75e+00  1.14e-02  6.03e-01  1.11e-02  2.73e-02  5.37e-01  
  5  +3.2559e-01  +1.2327e+00  9.07e-01  5.51e-03  2.85e-01  3.59e-03  1.42e-02  6.16e-01  
  6  +2.6105e-01  +5.4827e-01  2.87e-01  1.73e-03  8.73e-02  6.61e-04  5.14e-03  7.26e-01  
  7  +2.3935e-01  +4.4851e-01  2.09e-01  1.19e-03  6.14e-02  4.26e-04  3.70e-03  4.43e-01  
  8  +2.1184e-01  +3.0150e-01  8.97e-02  4.79e-04  2.51e-02  1.72e-04  1.63e-03  6.11e-01  
  9  +2.0237e-01  +2.5335e-01  5.10e-02  2.66e-04  1.40e-02  8.30e-05  9.37e-04  6.05e-01  
 10  +1.9594e-01  +2.2312e-01  2.72e-02  1.35e-04  7.31e-03  4.29e-05  4.83e-04  5.88e-01  
 11  +1.9517e-01  +2.1900e-01  2.38e-02  1.23e-04  6.51e-03  3.24e-05  4.55e-04  1.70e-01  
 12  +1.9545e-01  +2.2004e-01  2.46e-02  1.24e-04  6.65e-03  3.31e-05  4.43e-04  1.97e-01  
 13  +1.9221e-01  +2.0674e-01  1.45e-02  7.19e-05  3.89e-03  1.88e-05  2.64e-04  4.50e-01  
 14  +1.9118e-01  +2.0166e-01  1.05e-02  5.17e-05  2.80e-03  1.18e-05  1.92e-04  6.00e-01  
 15  +1.8809e-01  +1.8967e-01  1.58e-03  7.78e-06  4.18e-04  1.52e-06  3.03e-05  8.57e-01  
 16  +1.8756e-01  +1.8773e-01  1.63e-04  7.95e-07  4.25e-05  1.40e-07  3.26e-06  9.15e-01  
 17  +1.8750e-01  +1.8750e-01  2.29e-06  1.12e-08  5.95e-07  1.91e-09  4.64e-08  9.89e-01  
 18  +1.8750e-01  +1.8750e-01  2.30e-08  1.12e-10  5.96e-09  1.91e-11  4.65e-10  9.90e-01  
 19  +1.8750e-01  +1.8750e-01  2.30e-10  1.12e-12  5.97e-11  1.92e-13  4.67e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.3588ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:12 PM: Optimal value: 1.875e-01
(CVXPY) Oct 06 04:15:12 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:15:12 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 16, Objective: 0.1875
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:12 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:12 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:12 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:12 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:12 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:12 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:12 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:12 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:12 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:12 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 5284
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9730e-01  +2.5261e+02  2.52e+02  9.46e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +5.1961e-01  +5.5825e+01  5.53e+01  4.24e-01  1.40e+01  3.92e-03  5.73e-01  5.84e-01  
  2  +4.7580e-01  +8.2482e+00  7.77e+00  1.12e-01  5.05e+00  2.31e-02  2.24e-01  9.90e-01  
  3  +4.2590e-01  +2.5457e+00  2.12e+00  2.02e-02  1.06e+00  1.19e-02  4.71e-02  8.19e-01  
  4  +3.6912e-01  +2.1321e+00  1.76e+00  1.14e-02  5.94e-01  1.11e-02  2.73e-02  5.40e-01  
  5  +3.1281e-01  +1.1065e+00  7.94e-01  4.93e-03  2.52e-01  1.95e-03  1.29e-02  7.19e-01  
  6  +2.5580e-01  +5.5482e-01  2.99e-01  1.83e-03  9.16e-02  5.40e-04  5.44e-03  6.72e-01  
  7  +2.3274e-01  +4.3580e-01  2.03e-01  1.17e-03  5.98e-02  3.39e-04  3.68e-03  4.49e-01  
  8  +2.0650e-01  +2.9253e-01  8.60e-02  4.67e-04  2.43e-02  1.35e-04  1.61e-03  6.15e-01  
  9  +1.9900e-01  +2.5303e-01  5.40e-02  2.85e-04  1.50e-02  7.67e-05  1.01e-03  5.57e-01  
 10  +1.9186e-01  +2.1861e-01  2.68e-02  1.35e-04  7.27e-03  3.67e-05  4.87e-04  6.33e-01  
 11  +1.9110e-01  +2.1447e-01  2.34e-02  1.22e-04  6.45e-03  2.78e-05  4.57e-04  1.75e-01  
 12  +1.9138e-01  +2.1552e-01  2.41e-02  1.23e-04  6.60e-03  2.88e-05  4.45e-04  1.97e-01  
 13  +1.8847e-01  +2.0354e-01  1.51e-02  7.56e-05  4.08e-03  1.74e-05  2.80e-04  4.25e-01  
 14  +1.8739e-01  +1.9819e-01  1.08e-02  5.40e-05  2.92e-03  1.11e-05  2.02e-04  6.31e-01  
 15  +1.8410e-01  +1.8541e-01  1.32e-03  6.56e-06  3.53e-04  1.12e-06  2.57e-05  8.88e-01  
 16  +1.8369e-01  +1.8394e-01  2.43e-04  1.20e-06  6.41e-05  1.97e-07  4.95e-06  8.42e-01  
 17  +1.8361e-01  +1.8363e-01  1.98e-05  9.74e-08  5.18e-06  1.59e-08  4.10e-07  9.90e-01  
 18  +1.8360e-01  +1.8360e-01  2.03e-07  9.99e-10  5.32e-08  1.63e-10  4.21e-09  9.90e-01  
 19  +1.8360e-01  +1.8360e-01  2.04e-09  1.00e-11  5.33e-10  1.64e-12  4.22e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.6896ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:13 PM: Optimal value: 1.836e-01
(CVXPY) Oct 06 04:15:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:13 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 17, Objective: 0.1836
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:13 PM: Your problem has 439 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:13 PM: Finished problem compilation (took 1.558e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 439
  constraints   = 689
  nnz(P)        = 0
  nnz(A)        = 5328
  cones (total) = 1
    : Nonnegative = 1,  numel = 689

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9724e-01  +2.5269e+02  2.52e+02  9.46e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.1616e-01  +5.6028e+01  5.55e+01  4.25e-01  1.39e+01  3.93e-03  5.73e-01  5.83e-01  
  2  +4.7279e-01  +8.3299e+00  7.86e+00  1.12e-01  5.00e+00  2.34e-02  2.24e-01  9.90e-01  
  3  +4.2279e-01  +2.5876e+00  2.16e+00  2.08e-02  1.08e+00  1.17e-02  4.86e-02  8.13e-01  
  4  +3.6210e-01  +2.1715e+00  1.81e+00  1.15e-02  5.95e-01  1.14e-02  2.77e-02  5.38e-01  
  5  +3.0729e-01  +1.0725e+00  7.65e-01  4.88e-03  2.47e-01  1.34e-03  1.29e-02  7.50e-01  
  6  +2.5158e-01  +5.4294e-01  2.91e-01  1.82e-03  8.99e-02  3.95e-04  5.45e-03  6.63e-01  
  7  +2.3240e-01  +4.4366e-01  2.11e-01  1.25e-03  6.30e-02  2.77e-04  3.90e-03  4.00e-01  
  8  +2.0526e-01  +2.9605e-01  9.08e-02  4.94e-04  2.57e-02  1.16e-04  1.68e-03  6.37e-01  
  9  +1.9992e-01  +2.6976e-01  6.98e-02  3.66e-04  1.94e-02  8.63e-05  1.26e-03  4.13e-01  
 10  +1.9163e-01  +2.3124e-01  3.96e-02  1.99e-04  1.07e-02  4.85e-05  7.02e-04  4.92e-01  
 11  +1.8852e-01  +2.1737e-01  2.89e-02  1.41e-04  7.72e-03  3.36e-05  5.07e-04  4.02e-01  
 12  +1.8131e-01  +1.8551e-01  4.20e-03  2.04e-05  1.11e-03  3.72e-06  7.73e-05  9.52e-01  
 13  +1.8019e-01  +1.8145e-01  1.25e-03  6.08e-06  3.31e-04  1.08e-06  2.44e-05  8.74e-01  
 14  +1.7973e-01  +1.7979e-01  6.43e-05  3.12e-07  1.69e-05  5.04e-08  1.29e-06  9.57e-01  
 15  +1.7970e-01  +1.7970e-01  6.64e-07  3.22e-09  1.75e-07  5.18e-10  1.34e-08  9.90e-01  
 16  +1.7970e-01  +1.7970e-01  6.65e-09  3.23e-11  1.75e-09  5.19e-12  1.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.038ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:13 PM: Optimal value: 1.797e-01
(CVXPY) Oct 06 04:15:13 PM: Compilation took 1.558e-02 seconds
(CVXPY) Oct 06 04:15:13 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 18, Objective: 0.1797
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:13 PM: Your problem has 449 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 449
  constraints   = 699
  nnz(P)        = 0
  nnz(A)        = 5384
  cones (total) = 1
    : Nonnegative = 1,  numel = 699

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9724e-01  +2.5268e+02  2.52e+02  9.47e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.1506e-01  +5.6015e+01  5.55e+01  4.26e-01  1.37e+01  3.93e-03  5.73e-01  5.83e-01  
  2  +4.7096e-01  +8.5712e+00  8.10e+00  1.14e-01  5.05e+00  2.33e-02  2.28e-01  9.76e-01  
  3  +4.2219e-01  +2.6263e+00  2.20e+00  2.15e-02  1.10e+00  1.12e-02  5.05e-02  8.06e-01  
  4  +3.5914e-01  +2.2499e+00  1.89e+00  1.20e-02  6.15e-01  1.14e-02  2.89e-02  5.39e-01  
  5  +3.0605e-01  +1.0388e+00  7.33e-01  4.79e-03  2.40e-01  1.00e-04  1.28e-02  8.41e-01  
  6  +2.4830e-01  +5.2401e-01  2.76e-01  1.72e-03  8.46e-02  7.82e-05  5.20e-03  6.77e-01  
  7  +2.2765e-01  +4.2126e-01  1.94e-01  1.14e-03  5.73e-02  7.67e-05  3.61e-03  4.34e-01  
  8  +2.0216e-01  +2.8679e-01  8.46e-02  4.62e-04  2.38e-02  4.28e-05  1.57e-03  6.52e-01  
  9  +1.9800e-01  +2.6840e-01  7.04e-02  3.69e-04  1.94e-02  4.20e-05  1.25e-03  3.68e-01  
 10  +1.8809e-01  +2.2169e-01  3.36e-02  1.68e-04  8.99e-03  2.34e-05  5.89e-04  6.58e-01  
 11  +1.8701e-01  +2.1647e-01  2.95e-02  1.49e-04  7.92e-03  2.08e-05  5.27e-04  2.01e-01  
 12  +1.8178e-01  +1.9345e-01  1.17e-02  5.76e-05  3.10e-03  9.62e-06  2.11e-04  8.73e-01  
 13  +1.7874e-01  +1.8119e-01  2.45e-03  1.22e-05  6.50e-04  1.92e-06  4.65e-05  8.18e-01  
 14  +1.7810e-01  +1.7884e-01  7.43e-04  3.63e-06  1.94e-04  6.17e-07  1.46e-05  8.74e-01  
 15  +1.7781e-01  +1.7784e-01  2.66e-05  1.29e-07  6.89e-06  2.07e-08  5.31e-07  9.74e-01  
 16  +1.7780e-01  +1.7780e-01  2.70e-07  1.31e-09  7.00e-08  2.10e-10  5.40e-09  9.90e-01  
 17  +1.7780e-01  +1.7780e-01  2.71e-09  1.31e-11  7.02e-10  2.11e-12  5.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.8238ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:13 PM: Optimal value: 1.778e-01
(CVXPY) Oct 06 04:15:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:13 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 19, Objective: 0.1778
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:13 PM: Your problem has 459 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:13 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 459
  constraints   = 709
  nnz(P)        = 0
  nnz(A)        = 5468
  cones (total) = 1
    : Nonnegative = 1,  numel = 709

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9723e-01  +2.5273e+02  2.52e+02  9.47e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.1022e-01  +5.6003e+01  5.55e+01  4.23e-01  1.35e+01  3.96e-03  5.70e-01  5.85e-01  
  2  +4.6502e-01  +8.4132e+00  7.95e+00  1.08e-01  4.76e+00  2.36e-02  2.18e-01  9.90e-01  
  3  +4.1243e-01  +2.8078e+00  2.40e+00  2.25e-02  1.14e+00  1.17e-02  5.29e-02  7.85e-01  
  4  +3.5609e-01  +2.3956e+00  2.04e+00  1.34e-02  6.78e-01  1.10e-02  3.23e-02  5.03e-01  
  5  +3.0910e-01  +1.2989e+00  9.90e-01  6.28e-03  3.14e-01  3.14e-03  1.63e-02  6.35e-01  
  6  +2.5277e-01  +5.9492e-01  3.42e-01  2.17e-03  1.06e-01  7.79e-04  6.33e-03  6.67e-01  
  7  +2.3315e-01  +4.9738e-01  2.64e-01  1.58e-03  7.83e-02  5.43e-04  4.79e-03  4.09e-01  
  8  +2.0708e-01  +3.4546e-01  1.38e-01  7.76e-04  3.94e-02  2.68e-04  2.50e-03  5.70e-01  
  9  +1.9538e-01  +2.8804e-01  9.27e-02  4.90e-04  2.55e-02  1.73e-04  1.62e-03  4.43e-01  
 10  +1.8106e-01  +2.1810e-01  3.70e-02  1.87e-04  9.89e-03  5.68e-05  6.54e-04  7.24e-01  
 11  +1.7257e-01  +1.7992e-01  7.35e-03  3.64e-05  1.92e-03  8.54e-06  1.35e-04  8.72e-01  
 12  +1.7049e-01  +1.7159e-01  1.10e-03  5.51e-06  2.87e-04  1.08e-06  2.17e-05  8.50e-01  
 13  +1.7013e-01  +1.7021e-01  7.89e-05  3.98e-07  2.06e-05  6.44e-08  1.62e-06  9.90e-01  
 14  +1.7010e-01  +1.7010e-01  8.13e-07  4.10e-09  2.12e-07  6.61e-10  1.67e-08  9.90e-01  
 15  +1.7010e-01  +1.7010e-01  8.14e-09  4.11e-11  2.12e-09  6.61e-12  1.67e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.8456ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:13 PM: Optimal value: 1.701e-01
(CVXPY) Oct 06 04:15:13 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:13 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 20, Objective: 0.1701
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:13 PM: Your problem has 469 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:13 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:13 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:13 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:13 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:13 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:13 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:13 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:13 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:13 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:13 PM: Finished problem compilation (took 6.527e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 469
  constraints   = 719
  nnz(P)        = 0
  nnz(A)        = 5532
  cones (total) = 1
    : Nonnegative = 1,  numel = 719

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9717e-01  +2.5287e+02  2.52e+02  9.47e-01  2.34e+01  1.00e+00  1.02e+00   ------   
  1  +5.0613e-01  +5.6171e+01  5.57e+01  4.24e-01  1.34e+01  3.96e-03  5.70e-01  5.84e-01  
  2  +4.5930e-01  +8.6831e+00  8.22e+00  1.09e-01  4.78e+00  2.37e-02  2.22e-01  9.78e-01  
  3  +4.0847e-01  +2.8377e+00  2.43e+00  2.36e-02  1.17e+00  1.08e-02  5.60e-02  7.75e-01  
  4  +3.4985e-01  +2.5793e+00  2.23e+00  1.47e-02  7.34e-01  1.08e-02  3.57e-02  5.18e-01  
  5  +3.0703e-01  +1.3371e+00  1.03e+00  6.79e-03  3.35e-01  1.62e-03  1.78e-02  7.49e-01  
  6  +2.5034e-01  +5.9878e-01  3.48e-01  2.24e-03  1.08e-01  4.12e-04  6.61e-03  6.75e-01  
  7  +2.2576e-01  +4.8242e-01  2.57e-01  1.53e-03  7.49e-02  2.95e-04  4.75e-03  4.91e-01  
  8  +2.0301e-01  +3.5010e-01  1.47e-01  8.29e-04  4.14e-02  1.70e-04  2.73e-03  4.80e-01  
  9  +1.9030e-01  +2.8184e-01  9.15e-02  4.95e-04  2.52e-02  1.04e-04  1.69e-03  4.66e-01  
 10  +1.8088e-01  +2.2981e-01  4.89e-02  2.60e-04  1.32e-02  5.05e-05  9.26e-04  6.68e-01  
 11  +1.6992e-01  +1.7605e-01  6.13e-03  3.21e-05  1.63e-03  4.75e-06  1.22e-04  9.47e-01  
 12  +1.6837e-01  +1.6955e-01  1.19e-03  6.30e-06  3.17e-04  8.40e-07  2.60e-05  8.76e-01  
 13  +1.6802e-01  +1.6821e-01  1.93e-04  1.03e-06  5.14e-05  1.34e-07  4.42e-06  8.60e-01  
 14  +1.6795e-01  +1.6796e-01  6.43e-06  3.41e-08  1.71e-06  4.57e-09  1.48e-07  9.90e-01  
 15  +1.6795e-01  +1.6795e-01  6.44e-08  3.41e-10  1.71e-08  4.57e-11  1.48e-09  9.90e-01  
 16  +1.6795e-01  +1.6795e-01  6.44e-10  3.42e-12  1.71e-10  4.58e-13  1.49e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.9136ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:13 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:13 PM: Optimal value: 1.680e-01
(CVXPY) Oct 06 04:15:13 PM: Compilation took 6.527e-03 seconds
(CVXPY) Oct 06 04:15:13 PM: Solver (including time spent in interface) took 1.615e-02 seconds
Iteration: 21, Objective: 0.1680
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:14 PM: Your problem has 479 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:14 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:14 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 479
  constraints   = 729
  nnz(P)        = 0
  nnz(A)        = 5590
  cones (total) = 1
    : Nonnegative = 1,  numel = 729

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9715e-01  +2.5287e+02  2.52e+02  9.48e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.0402e-01  +5.6251e+01  5.57e+01  4.24e-01  1.33e+01  3.97e-03  5.70e-01  5.83e-01  
  2  +4.5737e-01  +8.5750e+00  8.12e+00  1.08e-01  4.68e+00  2.38e-02  2.20e-01  9.85e-01  
  3  +4.0668e-01  +2.8215e+00  2.41e+00  2.39e-02  1.18e+00  1.04e-02  5.69e-02  7.70e-01  
  4  +3.4737e-01  +2.5812e+00  2.23e+00  1.49e-02  7.37e-01  1.09e-02  3.62e-02  4.98e-01  
  5  +3.0553e-01  +1.3680e+00  1.06e+00  6.97e-03  3.42e-01  2.34e-03  1.83e-02  6.86e-01  
  6  +2.4993e-01  +6.1171e-01  3.62e-01  2.34e-03  1.12e-01  5.86e-04  6.90e-03  6.71e-01  
  7  +2.2831e-01  +5.0663e-01  2.78e-01  1.69e-03  8.18e-02  4.15e-04  5.20e-03  4.39e-01  
  8  +2.0277e-01  +3.5342e-01  1.51e-01  8.63e-04  4.27e-02  2.14e-04  2.85e-03  5.48e-01  
  9  +1.8564e-01  +2.6080e-01  7.52e-02  4.09e-04  2.06e-02  1.02e-04  1.42e-03  5.99e-01  
 10  +1.7646e-01  +2.0704e-01  3.06e-02  1.66e-04  8.33e-03  2.62e-05  6.03e-04  9.90e-01  
 11  +1.6938e-01  +1.7656e-01  7.18e-03  3.86e-05  1.94e-03  5.73e-06  1.47e-04  7.79e-01  
 12  +1.6812e-01  +1.7123e-01  3.11e-03  1.67e-05  8.39e-04  2.44e-06  6.60e-05  6.84e-01  
 13  +1.6729e-01  +1.6782e-01  5.32e-04  2.88e-06  1.44e-04  4.03e-07  1.17e-05  8.60e-01  
 14  +1.6713e-01  +1.6720e-01  7.72e-05  4.17e-07  2.08e-05  5.84e-08  1.71e-06  9.33e-01  
 15  +1.6710e-01  +1.6710e-01  8.65e-07  4.67e-09  2.33e-07  6.53e-10  1.92e-08  9.89e-01  
 16  +1.6710e-01  +1.6710e-01  8.67e-09  4.68e-11  2.33e-09  6.55e-12  1.92e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.0353ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:14 PM: Optimal value: 1.671e-01
(CVXPY) Oct 06 04:15:14 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:14 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 22, Objective: 0.1671
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:14 PM: Your problem has 481 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:14 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:14 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:14 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:14 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:14 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:14 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:14 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:14 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:14 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:14 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:14 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:14 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 481
  constraints   = 731
  nnz(P)        = 0
  nnz(A)        = 5599
  cones (total) = 1
    : Nonnegative = 1,  numel = 731

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9714e-01  +2.5286e+02  2.52e+02  9.48e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.0341e-01  +5.6265e+01  5.58e+01  4.24e-01  1.33e+01  3.97e-03  5.70e-01  5.83e-01  
  2  +4.5647e-01  +8.5352e+00  8.08e+00  1.07e-01  4.65e+00  2.39e-02  2.19e-01  9.87e-01  
  3  +4.0598e-01  +2.8314e+00  2.43e+00  2.40e-02  1.18e+00  1.05e-02  5.73e-02  7.67e-01  
  4  +3.4733e-01  +2.5712e+00  2.22e+00  1.49e-02  7.39e-01  1.08e-02  3.64e-02  4.95e-01  
  5  +3.0275e-01  +1.2978e+00  9.95e-01  6.53e-03  3.20e-01  1.93e-03  1.72e-02  7.23e-01  
  6  +2.4784e-01  +5.9769e-01  3.50e-01  2.27e-03  1.08e-01  5.17e-04  6.70e-03  6.63e-01  
  7  +2.2456e-01  +4.8360e-01  2.59e-01  1.56e-03  7.59e-02  3.53e-04  4.85e-03  4.80e-01  
  8  +2.0299e-01  +3.5595e-01  1.53e-01  8.77e-04  4.34e-02  2.04e-04  2.88e-03  4.75e-01  
  9  +1.8533e-01  +2.5973e-01  7.44e-02  4.05e-04  2.04e-02  9.58e-05  1.40e-03  6.01e-01  
 10  +1.7622e-01  +2.0588e-01  2.97e-02  1.61e-04  8.09e-03  2.55e-05  5.85e-04  9.90e-01  
 11  +1.6922e-01  +1.7584e-01  6.62e-03  3.57e-05  1.79e-03  5.26e-06  1.36e-04  7.95e-01  
 12  +1.6775e-01  +1.6966e-01  1.92e-03  1.03e-05  5.18e-04  1.49e-06  4.12e-05  8.31e-01  
 13  +1.6754e-01  +1.6886e-01  1.32e-03  7.09e-06  3.54e-04  1.02e-06  2.85e-05  4.71e-01  
 14  +1.6712e-01  +1.6722e-01  1.00e-04  5.40e-07  2.69e-05  7.51e-08  2.21e-06  9.90e-01  
 15  +1.6708e-01  +1.6708e-01  1.13e-06  6.07e-09  3.03e-07  8.43e-10  2.50e-08  9.89e-01  
 16  +1.6708e-01  +1.6708e-01  1.13e-08  6.08e-11  3.03e-09  8.43e-12  2.50e-10  9.90e-01  
 17  +1.6708e-01  +1.6708e-01  1.13e-10  6.09e-13  3.04e-11  8.45e-14  2.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.6429ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:14 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:14 PM: Optimal value: 1.671e-01
(CVXPY) Oct 06 04:15:14 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:15:14 PM: Solver (including time spent in interface) took 1.563e-02 seconds
FULL MODEL:
  Accruacy: 0.79
  Our objective: 0.58

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.184)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.024)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.02)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x7 = 1)                                             <-- (term's our objective: 0.044)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.052)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.024)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.02)
 OR (x2 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.024)
 OR (x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)                                             <-- (term's our objective: 0.028)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 8.280217170715332
Best over terms:
  Our final objective: 0.184
    Its accruacy: 0.592
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.184
  Highest accruacy: 0.592
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

