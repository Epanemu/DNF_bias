Command:
python test_script.py -s constant_subclass -d 5 -n 50 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.24
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 5.

Computed total variation: 0.64
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:53 PM: Your problem has 36 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Finished problem compilation (took 3.862e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 61
  nnz(P)        = 0
  nnz(A)        = 211
  cones (total) = 1
    : Nonnegative = 1,  numel = 61

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9142e-01  +2.6132e+01  2.56e+01  8.20e-01  5.81e+00  1.00e+00  1.08e+00   ------   
  1  +5.8540e-01  +5.4354e+00  4.85e+00  3.04e-01  3.10e+00  3.94e-03  5.40e-01  6.52e-01  
  2  +5.0420e-01  +1.1300e+00  6.26e-01  6.42e-02  7.71e-01  1.25e-02  1.77e-01  9.15e-01  
  3  +4.4209e-01  +9.3099e-01  4.89e-01  2.53e-02  3.15e-01  1.36e-02  8.42e-02  6.30e-01  
  4  +3.8462e-01  +4.6715e-01  8.25e-02  4.07e-03  4.98e-02  6.68e-04  1.89e-02  8.29e-01  
  5  +3.6169e-01  +3.6753e-01  5.85e-03  2.82e-04  3.43e-03  4.58e-05  1.60e-03  9.50e-01  
  6  +3.6012e-01  +3.6017e-01  5.89e-05  2.84e-06  3.44e-05  4.57e-07  1.63e-05  9.90e-01  
  7  +3.6010e-01  +3.6010e-01  5.89e-07  2.84e-08  3.44e-07  4.57e-09  1.63e-07  9.90e-01  
  8  +3.6010e-01  +3.6010e-01  5.89e-09  2.84e-10  3.44e-09  4.57e-11  1.63e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 392.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:53 PM: Optimal value: 3.601e-01
(CVXPY) Oct 06 03:52:53 PM: Compilation took 3.862e-02 seconds
(CVXPY) Oct 06 03:52:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3601
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:53 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 281
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8073e-01  +2.6652e+01  2.62e+01  8.35e-01  5.98e+00  1.00e+00  1.12e+00   ------   
  1  +5.3946e-01  +5.5699e+00  5.03e+00  3.25e-01  3.14e+00  3.92e-03  5.69e-01  6.42e-01  
  2  +4.5636e-01  +1.4758e+00  1.02e+00  8.62e-02  1.04e+00  1.44e-02  2.23e-01  8.04e-01  
  3  +3.6854e-01  +7.8708e-01  4.19e-01  2.39e-02  3.00e-01  8.25e-03  7.33e-02  7.53e-01  
  4  +3.0023e-01  +5.0741e-01  2.07e-01  8.50e-03  1.07e-01  4.32e-03  2.97e-02  6.63e-01  
  5  +2.5214e-01  +2.8908e-01  3.69e-02  1.52e-03  1.87e-02  5.00e-04  6.04e-03  8.44e-01  
  6  +2.4063e-01  +2.4152e-01  8.95e-04  3.73e-05  4.57e-04  8.74e-06  1.56e-04  9.76e-01  
  7  +2.4034e-01  +2.4045e-01  1.03e-04  4.36e-06  5.28e-05  7.55e-07  1.96e-05  8.79e-01  
  8  +2.4030e-01  +2.4030e-01  2.93e-06  1.24e-07  1.50e-06  2.49e-08  5.89e-07  9.87e-01  
  9  +2.4030e-01  +2.4030e-01  2.93e-08  1.24e-09  1.50e-08  2.49e-10  5.90e-09  9.90e-01  
 10  +2.4030e-01  +2.4030e-01  2.94e-10  1.25e-11  1.50e-10  2.49e-12  5.90e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 572.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:53 PM: Optimal value: 2.403e-01
(CVXPY) Oct 06 03:52:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:52:53 PM: Solver (including time spent in interface) took 1.059e-02 seconds
Iteration: 2, Objective: 0.2403
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:53 PM: Your problem has 48 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Finished problem compilation (took 5.015e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 48
  constraints   = 73
  nnz(P)        = 0
  nnz(A)        = 291
  cones (total) = 1
    : Nonnegative = 1,  numel = 73

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7661e-01  +2.6791e+01  2.63e+01  8.38e-01  5.96e+00  1.00e+00  1.13e+00   ------   
  1  +5.2020e-01  +5.5717e+00  5.05e+00  3.25e-01  3.11e+00  3.93e-03  5.73e-01  6.42e-01  
  2  +4.2086e-01  +1.5546e+00  1.13e+00  8.42e-02  1.01e+00  1.49e-02  2.19e-01  7.95e-01  
  3  +2.9072e-01  +6.2601e-01  3.35e-01  1.70e-02  2.09e-01  6.27e-03  5.37e-02  8.28e-01  
  4  +2.3547e-01  +3.6089e-01  1.25e-01  5.67e-03  6.85e-02  2.05e-03  2.18e-02  7.05e-01  
  5  +2.0522e-01  +2.2120e-01  1.60e-02  7.22e-04  8.57e-03  1.89e-04  3.15e-03  8.83e-01  
  6  +2.0052e-01  +2.0086e-01  3.41e-04  1.56e-05  1.84e-04  2.95e-06  7.01e-05  9.81e-01  
  7  +2.0041e-01  +2.0044e-01  2.92e-05  1.36e-06  1.58e-05  2.06e-07  6.76e-06  9.43e-01  
  8  +2.0040e-01  +2.0040e-01  3.43e-07  1.59e-08  1.86e-07  2.40e-09  8.05e-08  9.89e-01  
  9  +2.0040e-01  +2.0040e-01  3.43e-09  1.59e-10  1.86e-09  2.40e-11  8.05e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 518.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:53 PM: Optimal value: 2.004e-01
(CVXPY) Oct 06 03:52:53 PM: Compilation took 5.015e-03 seconds
(CVXPY) Oct 06 03:52:53 PM: Solver (including time spent in interface) took 5.585e-03 seconds
Iteration: 3, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:53 PM: Your problem has 51 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Finished problem compilation (took 6.268e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 51
  constraints   = 76
  nnz(P)        = 0
  nnz(A)        = 303
  cones (total) = 1
    : Nonnegative = 1,  numel = 76

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7386e-01  +2.6783e+01  2.63e+01  8.41e-01  5.91e+00  1.00e+00  1.13e+00   ------   
  1  +5.0294e-01  +5.5614e+00  5.06e+00  3.26e-01  3.05e+00  3.95e-03  5.73e-01  6.42e-01  
  2  +3.8596e-01  +1.5474e+00  1.16e+00  8.08e-02  9.56e-01  1.51e-02  2.11e-01  7.98e-01  
  3  +2.6230e-01  +6.6360e-01  4.01e-01  2.07e-02  2.49e-01  6.68e-03  6.55e-02  7.75e-01  
  4  +2.0658e-01  +3.3486e-01  1.28e-01  6.52e-03  7.63e-02  1.73e-03  2.46e-02  7.31e-01  
  5  +1.8287e-01  +1.9373e-01  1.09e-02  5.59e-04  6.45e-03  1.20e-04  2.34e-03  9.08e-01  
  6  +1.8062e-01  +1.8103e-01  4.15e-04  2.17e-05  2.48e-04  3.22e-06  9.40e-05  9.60e-01  
  7  +1.8052e-01  +1.8057e-01  5.65e-05  2.98e-06  3.35e-05  4.17e-07  1.50e-05  9.41e-01  
  8  +1.8050e-01  +1.8050e-01  7.68e-07  4.06e-08  4.55e-07  5.40e-09  2.08e-07  9.87e-01  
  9  +1.8050e-01  +1.8050e-01  7.68e-09  4.06e-10  4.55e-09  5.40e-11  2.08e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 508.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:53 PM: Optimal value: 1.805e-01
(CVXPY) Oct 06 03:52:53 PM: Compilation took 6.268e-03 seconds
(CVXPY) Oct 06 03:52:53 PM: Solver (including time spent in interface) took 1.900e-04 seconds
Iteration: 4, Objective: 0.1805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:53 PM: Your problem has 52 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Finished problem compilation (took 7.971e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 52
  constraints   = 77
  nnz(P)        = 0
  nnz(A)        = 307
  cones (total) = 1
    : Nonnegative = 1,  numel = 77

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7323e-01  +2.6796e+01  2.63e+01  8.42e-01  5.89e+00  1.00e+00  1.13e+00   ------   
  1  +4.9681e-01  +5.5682e+00  5.07e+00  3.27e-01  3.03e+00  3.96e-03  5.73e-01  6.41e-01  
  2  +3.7717e-01  +1.5523e+00  1.18e+00  8.07e-02  9.46e-01  1.52e-02  2.10e-01  7.97e-01  
  3  +2.5392e-01  +6.2239e-01  3.68e-01  1.94e-02  2.30e-01  5.93e-03  6.13e-02  7.98e-01  
  4  +2.0476e-01  +3.2587e-01  1.21e-01  6.32e-03  7.36e-02  1.71e-03  2.34e-02  7.16e-01  
  5  +1.8280e-01  +1.9384e-01  1.10e-02  5.77e-04  6.65e-03  1.38e-04  2.37e-03  9.04e-01  
  6  +1.8065e-01  +1.8119e-01  5.41e-04  2.87e-05  3.28e-04  4.97e-06  1.22e-04  9.49e-01  
  7  +1.8053e-01  +1.8064e-01  1.12e-04  5.95e-06  6.65e-05  8.90e-07  2.93e-05  7.89e-01  
  8  +1.8050e-01  +1.8051e-01  5.79e-06  3.08e-07  3.44e-06  4.34e-08  1.60e-06  9.90e-01  
  9  +1.8050e-01  +1.8050e-01  5.81e-08  3.08e-09  3.44e-08  4.35e-10  1.60e-08  9.90e-01  
 10  +1.8050e-01  +1.8050e-01  5.81e-10  3.08e-11  3.44e-10  4.35e-12  1.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 516.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:53 PM: Optimal value: 1.805e-01
(CVXPY) Oct 06 03:52:53 PM: Compilation took 7.971e-03 seconds
(CVXPY) Oct 06 03:52:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.1805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:53 PM: Your problem has 53 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:53 PM: Finished problem compilation (took 5.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 53
  constraints   = 78
  nnz(P)        = 0
  nnz(A)        = 310
  cones (total) = 1
    : Nonnegative = 1,  numel = 78

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7255e-01  +2.6760e+01  2.63e+01  8.43e-01  5.86e+00  1.00e+00  1.13e+00   ------   
  1  +4.9176e-01  +5.5896e+00  5.10e+00  3.29e-01  3.03e+00  3.96e-03  5.76e-01  6.38e-01  
  2  +3.6729e-01  +1.5295e+00  1.16e+00  7.97e-02  9.24e-01  1.56e-02  2.09e-01  8.06e-01  
  3  +2.4973e-01  +6.1440e-01  3.65e-01  1.99e-02  2.33e-01  5.67e-03  6.29e-02  7.88e-01  
  4  +2.0080e-01  +3.0288e-01  1.02e-01  5.44e-03  6.27e-02  1.42e-03  2.01e-02  7.47e-01  
  5  +1.8246e-01  +1.9205e-01  9.59e-03  5.12e-04  5.86e-03  1.24e-04  2.07e-03  9.03e-01  
  6  +1.8076e-01  +1.8181e-01  1.04e-03  5.62e-05  6.37e-04  1.16e-05  2.35e-04  8.88e-01  
  7  +1.8055e-01  +1.8071e-01  1.59e-04  8.56e-06  9.51e-05  1.17e-06  4.15e-05  8.91e-01  
  8  +1.8050e-01  +1.8052e-01  1.54e-05  8.24e-07  9.15e-06  1.16e-07  4.28e-06  9.90e-01  
  9  +1.8050e-01  +1.8050e-01  1.57e-07  8.41e-09  9.33e-08  1.17e-09  4.38e-08  9.90e-01  
 10  +1.8050e-01  +1.8050e-01  1.57e-09  8.41e-11  9.34e-10  1.17e-11  4.39e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 523.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:53 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:53 PM: Optimal value: 1.805e-01
(CVXPY) Oct 06 03:52:53 PM: Compilation took 5.006e-03 seconds
(CVXPY) Oct 06 03:52:53 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.82
  Our objective: 0.64

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.16)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.04)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x3 = 1 AND x4 = 0)                       <-- (term's our objective: 0.16)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1)                       <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.640042304992676
Best over terms:
  Our final objective: 0.19999999999999998
    Its accruacy: 0.6
    Its hamming distance: 4
  Shortest hamming distance: 1
    Its our objective: 0.16000000000000003
  Highest accruacy: 0.6
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

