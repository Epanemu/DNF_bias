Command:
python test_script.py -s constant_subclass -d 4 -n 5000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1372
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.1372
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:42 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:42 PM: Finished problem compilation (took 6.946e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5007e+03  2.50e+03  9.78e-01  6.04e+01  1.00e+00  1.00e+00   ------   
  1  +6.0814e-01  +4.8463e+02  4.84e+02  3.36e-01  3.35e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5087e-01  +7.5517e+01  7.50e+01  1.37e-01  1.67e+01  8.23e-03  2.27e-01  7.26e-01  
  3  +5.1005e-01  +1.5736e+01  1.52e+01  9.62e-02  1.14e+01  1.69e-05  2.24e-01  7.47e-02  
  4  +5.0004e-01  +1.0221e+00  5.22e-01  4.96e-03  5.99e-01  6.20e-06  1.48e-01  7.95e-01  
  5  +4.9997e-01  +6.0993e-01  1.10e-01  1.04e-03  1.27e-01  2.01e-06  2.85e-02  8.32e-01  
  6  +4.9449e-01  +9.3811e-01  4.44e-01  6.52e-04  7.99e-02  9.62e-05  2.08e-03  9.77e-01  
  7  +4.8272e-01  +6.9553e-01  2.13e-01  1.25e-04  1.53e-02  1.54e-04  3.95e-04  8.16e-01  
  8  +4.7018e-01  +4.9811e-01  2.79e-02  1.41e-05  1.73e-03  2.46e-06  4.74e-05  9.39e-01  
  9  +4.6468e-01  +4.7077e-01  6.09e-03  2.85e-06  3.49e-04  5.15e-07  1.03e-05  8.34e-01  
 10  +4.6257e-01  +4.6281e-01  2.34e-04  9.59e-08  1.17e-05  2.05e-08  4.02e-07  9.90e-01  
 11  +4.6250e-01  +4.6250e-01  2.35e-06  9.60e-10  1.17e-07  2.06e-10  4.04e-09  9.90e-01  
 12  +4.6250e-01  +4.6250e-01  2.35e-08  9.60e-12  1.17e-09  2.06e-12  4.04e-11  9.90e-01  
 13  +4.6250e-01  +4.6250e-01  2.35e-10  9.61e-14  1.17e-11  2.11e-14  4.13e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.0171ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:42 PM: Optimal value: 4.625e-01
(CVXPY) Oct 06 03:50:42 PM: Compilation took 6.946e-02 seconds
(CVXPY) Oct 06 03:50:42 PM: Solver (including time spent in interface) took 4.526e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:50:42 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:50:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:50:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:50:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:50:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:50:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:50:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:50:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:50:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:50:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:50:42 PM: Finished problem compilation (took 1.784e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22550
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0003e-01  +2.5011e+03  2.50e+03  9.78e-01  6.49e+01  1.00e+00  1.00e+00   ------   
  1  +6.0781e-01  +4.8539e+02  4.85e+02  3.37e-01  3.60e+01  4.09e-03  4.75e-01  6.67e-01  
  2  +5.5034e-01  +7.4990e+01  7.44e+01  1.37e-01  1.78e+01  8.34e-03  2.27e-01  7.31e-01  
  3  +5.0978e-01  +1.5461e+01  1.50e+01  9.54e-02  1.21e+01  1.70e-05  2.24e-01  8.05e-02  
  4  +5.0061e-01  +1.9074e+00  1.41e+00  1.34e-02  1.71e+00  7.35e-06  1.85e-01  3.90e-01  
  5  +5.0010e-01  +7.9441e-01  2.94e-01  2.80e-03  3.63e-01  1.98e-06  6.41e-02  7.00e-01  
  6  +5.0005e-01  +8.2539e-01  3.25e-01  3.04e-03  3.95e-01  3.11e-06  3.59e-02  5.78e-01  
  7  +4.9866e-01  +7.6133e-01  2.63e-01  8.71e-04  1.15e-01  2.23e-05  2.90e-03  9.65e-01  
  8  +4.9253e-01  +6.9669e-01  2.04e-01  1.79e-04  2.36e-02  8.18e-05  5.41e-04  8.14e-01  
  9  +4.9014e-01  +6.7614e-01  1.86e-01  1.32e-04  1.73e-02  7.74e-05  3.84e-04  4.08e-01  
 10  +4.9002e-01  +6.7180e-01  1.82e-01  1.04e-04  1.38e-02  5.92e-05  2.95e-04  5.55e-01  
 11  +4.8802e-01  +6.6176e-01  1.74e-01  8.52e-05  1.12e-02  5.98e-05  2.40e-04  2.57e-01  
 12  +4.8645e-01  +6.5342e-01  1.67e-01  8.45e-05  1.11e-02  5.30e-05  2.39e-04  4.81e-02  
 13  +4.8024e-01  +6.2518e-01  1.45e-01  6.18e-05  8.14e-03  4.84e-05  1.76e-04  3.21e-01  
 14  +4.7925e-01  +6.2039e-01  1.41e-01  6.11e-05  8.05e-03  4.50e-05  1.76e-04  2.21e-02  
 15  +4.7315e-01  +5.8921e-01  1.16e-01  4.73e-05  6.22e-03  2.74e-05  1.37e-04  4.56e-01  
 16  +4.6943e-01  +5.6550e-01  9.61e-02  3.72e-05  4.88e-03  7.91e-06  1.09e-04  9.90e-01  
 17  +4.6468e-01  +5.4793e-01  8.33e-02  3.08e-05  4.05e-03  7.12e-06  9.13e-05  2.22e-01  
 18  +4.5144e-01  +4.9943e-01  4.80e-02  1.63e-05  2.14e-03  6.15e-06  4.95e-05  9.90e-01  
 19  +4.3625e-01  +4.4697e-01  1.07e-02  3.39e-06  4.44e-04  1.30e-06  1.07e-05  8.39e-01  
 20  +4.3158e-01  +4.3175e-01  1.74e-04  5.41e-08  7.09e-06  1.91e-08  1.72e-07  9.88e-01  
 21  +4.3150e-01  +4.3150e-01  1.74e-06  5.41e-10  7.09e-08  1.91e-10  1.72e-09  9.90e-01  
 22  +4.3150e-01  +4.3150e-01  1.74e-08  5.41e-12  7.09e-10  1.92e-12  1.73e-11  9.90e-01  
 23  +4.3150e-01  +4.3150e-01  1.74e-10  5.41e-14  7.09e-12  1.93e-14  1.74e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 64.0727ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:50:42 PM: Problem status: optimal
(CVXPY) Oct 06 03:50:42 PM: Optimal value: 4.315e-01
(CVXPY) Oct 06 03:50:42 PM: Compilation took 1.784e-02 seconds
(CVXPY) Oct 06 03:50:42 PM: Solver (including time spent in interface) took 7.530e-02 seconds
FULL MODEL:
  Accruacy: 0.5686
  Our objective: 0.13719999999999996

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1372)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.199937105178833
Best over terms:
  Our final objective: 0.13719999999999996
    Its accruacy: 0.5686
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.13719999999999996
  Highest accruacy: 0.5686
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

