Command:
python test_script.py -s constant_subclass -d 5 -n 1000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 5.

Computed total variation: 0.23199999999999998
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:01 PM: Your problem has 511 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Finished problem compilation (took 5.616e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 511
  constraints   = 1011
  nnz(P)        = 0
  nnz(A)        = 4011
  cones (total) = 1
    : Nonnegative = 1,  numel = 1011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9982e-01  +5.0088e+02  5.00e+02  9.52e-01  2.87e+01  1.00e+00  1.00e+00   ------   
  1  +5.9913e-01  +1.0059e+02  1.00e+02  3.51e-01  1.66e+01  3.99e-03  5.04e-01  6.45e-01  
  2  +5.4453e-01  +1.4390e+01  1.38e+01  1.26e-01  7.34e+00  1.00e-02  2.30e-01  7.95e-01  
  3  +5.0422e-01  +2.4776e+00  1.97e+00  4.03e-02  2.24e+00  1.52e-05  2.15e-01  2.95e-01  
  4  +5.0047e-01  +7.8512e-01  2.85e-01  6.08e-03  3.52e-01  5.63e-06  6.27e-02  7.82e-01  
  5  +4.9754e-01  +8.2704e-01  3.29e-01  3.15e-03  1.86e-01  3.23e-05  1.01e-02  8.92e-01  
  6  +4.8505e-01  +7.2844e-01  2.43e-01  7.31e-04  4.35e-02  9.07e-05  2.17e-03  7.87e-01  
  7  +4.6833e-01  +6.1232e-01  1.44e-01  3.86e-04  2.28e-02  4.69e-05  1.25e-03  5.16e-01  
  8  +4.5022e-01  +5.0445e-01  5.42e-02  1.34e-04  7.87e-03  1.85e-05  4.86e-04  9.90e-01  
  9  +4.3736e-01  +4.4724e-01  9.88e-03  2.12e-05  1.24e-03  4.08e-06  8.80e-05  9.90e-01  
 10  +4.3416e-01  +4.3433e-01  1.72e-04  3.54e-07  2.08e-05  6.72e-08  1.55e-06  9.83e-01  
 11  +4.3410e-01  +4.3410e-01  1.72e-06  3.54e-09  2.08e-07  6.72e-10  1.55e-08  9.90e-01  
 12  +4.3410e-01  +4.3410e-01  1.72e-08  3.54e-11  2.08e-09  6.72e-12  1.55e-10  9.90e-01  
 13  +4.3410e-01  +4.3410e-01  1.72e-10  3.54e-13  2.08e-11  6.73e-14  1.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7454ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:01 PM: Optimal value: 4.341e-01
(CVXPY) Oct 06 03:54:01 PM: Compilation took 5.616e-02 seconds
(CVXPY) Oct 06 03:54:01 PM: Solver (including time spent in interface) took 9.943e-03 seconds
Initial LP solved
Iteration: 1, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:01 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 5024
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9986e-01  +5.0132e+02  5.01e+02  9.53e-01  3.05e+01  1.00e+00  1.01e+00   ------   
  1  +5.9793e-01  +1.0093e+02  1.00e+02  3.54e-01  1.76e+01  3.98e-03  5.09e-01  6.43e-01  
  2  +5.4304e-01  +1.4098e+01  1.36e+01  1.25e-01  7.59e+00  1.03e-02  2.29e-01  8.09e-01  
  3  +5.0362e-01  +2.3652e+00  1.86e+00  3.84e-02  2.26e+00  1.54e-05  2.10e-01  3.54e-01  
  4  +5.0074e-01  +9.4116e-01  4.40e-01  9.41e-03  5.73e-01  5.99e-06  7.97e-02  6.62e-01  
  5  +4.9798e-01  +1.0458e+00  5.48e-01  5.43e-03  3.39e-01  3.22e-05  1.70e-02  9.44e-01  
  6  +4.8495e-01  +8.7139e-01  3.86e-01  1.19e-03  7.48e-02  8.65e-05  3.43e-03  7.99e-01  
  7  +4.6940e-01  +6.9204e-01  2.23e-01  5.65e-04  3.54e-02  6.44e-05  1.69e-03  6.55e-01  
  8  +4.7026e-01  +6.6869e-01  1.98e-01  5.05e-04  3.16e-02  7.59e-05  1.50e-03  6.09e-01  
  9  +4.6673e-01  +6.5625e-01  1.90e-01  4.13e-04  2.59e-02  8.28e-05  1.22e-03  2.66e-01  
 10  +4.6136e-01  +6.2476e-01  1.63e-01  3.83e-04  2.40e-02  6.92e-05  1.15e-03  4.02e-01  
 11  +4.4129e-01  +5.4299e-01  1.02e-01  1.79e-04  1.12e-02  5.50e-05  5.52e-04  6.30e-01  
 12  +4.1386e-01  +4.3274e-01  1.89e-02  3.16e-05  1.97e-03  8.00e-06  1.06e-04  8.95e-01  
 13  +4.0637e-01  +4.0674e-01  3.69e-04  6.11e-07  3.79e-05  1.17e-07  2.14e-06  9.83e-01  
 14  +4.0620e-01  +4.0621e-01  3.68e-06  6.11e-09  3.79e-07  1.17e-09  2.14e-08  9.90e-01  
 15  +4.0620e-01  +4.0620e-01  3.68e-08  6.11e-11  3.79e-09  1.17e-11  2.14e-10  9.90e-01  
 16  +4.0620e-01  +4.0620e-01  3.68e-10  6.11e-13  3.79e-11  1.17e-13  2.14e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.1684ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:01 PM: Optimal value: 4.062e-01
(CVXPY) Oct 06 03:54:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 03:54:01 PM: Solver (including time spent in interface) took 1.974e-02 seconds
Iteration: 2, Objective: 0.4062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:01 PM: Your problem has 530 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Finished problem compilation (took 3.507e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 530
  constraints   = 1030
  nnz(P)        = 0
  nnz(A)        = 5379
  cones (total) = 1
    : Nonnegative = 1,  numel = 1030

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0103e+02  5.01e+02  9.54e-01  3.06e+01  1.00e+00  1.02e+00   ------   
  1  +5.9517e-01  +1.0130e+02  1.01e+02  3.62e-01  1.77e+01  3.94e-03  5.22e-01  6.39e-01  
  2  +5.4185e-01  +1.3924e+01  1.34e+01  1.24e-01  7.49e+00  1.08e-02  2.30e-01  8.26e-01  
  3  +5.0340e-01  +2.3418e+00  1.84e+00  3.84e-02  2.25e+00  1.64e-05  2.08e-01  3.99e-01  
  4  +5.0069e-01  +9.8250e-01  4.82e-01  1.04e-02  6.27e-01  6.68e-06  7.86e-02  6.52e-01  
  5  +4.9520e-01  +1.0096e+00  5.14e-01  3.78e-03  2.36e-01  4.31e-05  1.11e-02  9.52e-01  
  6  +4.8385e-01  +9.1115e-01  4.27e-01  1.47e-03  9.19e-02  7.91e-05  4.15e-03  6.31e-01  
  7  +4.8347e-01  +8.8126e-01  3.98e-01  1.44e-03  9.04e-02  7.40e-05  4.13e-03  7.34e-02  
  8  +4.8387e-01  +8.6926e-01  3.85e-01  1.28e-03  8.04e-02  9.68e-05  3.63e-03  3.75e-01  
  9  +4.6532e-01  +7.5572e-01  2.90e-01  6.50e-04  4.07e-02  1.09e-04  1.88e-03  5.69e-01  
 10  +4.3099e-01  +5.7057e-01  1.40e-01  2.71e-04  1.68e-02  5.16e-05  8.60e-04  6.80e-01  
 11  +3.9976e-01  +4.3943e-01  3.97e-02  7.35e-05  4.53e-03  1.32e-05  2.61e-04  7.75e-01  
 12  +3.8635e-01  +3.8867e-01  2.32e-03  4.24e-06  2.61e-04  7.01e-07  1.62e-05  9.52e-01  
 13  +3.8541e-01  +3.8544e-01  2.52e-05  4.59e-08  2.82e-06  8.15e-09  1.77e-07  9.90e-01  
 14  +3.8540e-01  +3.8540e-01  2.52e-07  4.59e-10  2.82e-08  8.15e-11  1.77e-09  9.90e-01  
 15  +3.8540e-01  +3.8540e-01  2.52e-09  4.59e-12  2.82e-10  8.15e-13  1.77e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 8.8403ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:01 PM: Optimal value: 3.854e-01
(CVXPY) Oct 06 03:54:01 PM: Compilation took 3.507e-03 seconds
(CVXPY) Oct 06 03:54:01 PM: Solver (including time spent in interface) took 1.153e-02 seconds
Iteration: 3, Objective: 0.3854
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:01 PM: Your problem has 532 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Finished problem compilation (took 4.006e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 532
  constraints   = 1032
  nnz(P)        = 0
  nnz(A)        = 5435
  cones (total) = 1
    : Nonnegative = 1,  numel = 1032

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9959e-01  +5.0117e+02  5.01e+02  9.54e-01  3.06e+01  1.00e+00  1.02e+00   ------   
  1  +5.9389e-01  +1.0162e+02  1.01e+02  3.65e-01  1.78e+01  3.93e-03  5.26e-01  6.37e-01  
  2  +5.4126e-01  +1.3831e+01  1.33e+01  1.24e-01  7.46e+00  1.10e-02  2.30e-01  8.34e-01  
  3  +5.0334e-01  +2.3475e+00  1.84e+00  3.86e-02  2.25e+00  1.70e-05  2.06e-01  4.18e-01  
  4  +5.0058e-01  +9.8144e-01  4.81e-01  1.03e-02  6.24e-01  7.09e-06  7.37e-02  6.68e-01  
  5  +4.9230e-01  +1.3609e+00  8.69e-01  4.66e-03  2.92e-01  6.65e-05  1.33e-02  9.15e-01  
  6  +4.7729e-01  +1.0487e+00  5.71e-01  1.79e-03  1.12e-01  7.94e-05  5.17e-03  6.35e-01  
  7  +4.7610e-01  +9.8741e-01  5.11e-01  1.37e-03  8.57e-02  1.28e-04  3.87e-03  4.89e-01  
  8  +4.7072e-01  +9.3364e-01  4.63e-01  1.13e-03  7.10e-02  1.28e-04  3.24e-03  2.21e-01  
  9  +4.6514e-01  +7.7676e-01  3.12e-01  8.09e-04  5.06e-02  1.30e-04  2.39e-03  8.43e-01  
 10  +4.3894e-01  +6.3031e-01  1.91e-01  4.07e-04  2.53e-02  8.34e-05  1.28e-03  5.45e-01  
 11  +4.1702e-01  +5.2619e-01  1.09e-01  2.21e-04  1.36e-02  4.42e-05  7.47e-04  4.84e-01  
 12  +3.8915e-01  +4.0143e-01  1.23e-02  2.39e-05  1.47e-03  3.06e-06  9.15e-05  9.30e-01  
 13  +3.8466e-01  +3.8504e-01  3.83e-04  7.43e-07  4.56e-05  1.46e-07  3.03e-06  9.88e-01  
 14  +3.8450e-01  +3.8451e-01  3.88e-06  7.53e-09  4.62e-07  1.48e-09  3.09e-08  9.90e-01  
 15  +3.8450e-01  +3.8450e-01  3.88e-08  7.53e-11  4.62e-09  1.48e-11  3.09e-10  9.90e-01  
 16  +3.8450e-01  +3.8450e-01  3.88e-10  7.53e-13  4.62e-11  1.48e-13  3.09e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.7293ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:01 PM: Optimal value: 3.845e-01
(CVXPY) Oct 06 03:54:01 PM: Compilation took 4.006e-03 seconds
(CVXPY) Oct 06 03:54:01 PM: Solver (including time spent in interface) took 1.513e-02 seconds
Iteration: 4, Objective: 0.3845
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:54:01 PM: Your problem has 533 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:54:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:54:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:54:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:54:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:54:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:54:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:54:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:54:01 PM: Finished problem compilation (took 1.014e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 533
  constraints   = 1033
  nnz(P)        = 0
  nnz(A)        = 5471
  cones (total) = 1
    : Nonnegative = 1,  numel = 1033

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9958e-01  +5.0116e+02  5.01e+02  9.54e-01  3.06e+01  1.00e+00  1.02e+00   ------   
  1  +5.9304e-01  +1.0185e+02  1.01e+02  3.67e-01  1.78e+01  3.92e-03  5.26e-01  6.35e-01  
  2  +5.4089e-01  +1.3765e+01  1.32e+01  1.23e-01  7.47e+00  1.11e-02  2.29e-01  8.39e-01  
  3  +5.0349e-01  +2.3956e+00  1.89e+00  3.94e-02  2.31e+00  1.77e-05  2.06e-01  4.13e-01  
  4  +5.0061e-01  +9.8733e-01  4.87e-01  1.04e-02  6.33e-01  7.39e-06  7.39e-02  6.68e-01  
  5  +4.9183e-01  +1.3808e+00  8.89e-01  4.49e-03  2.82e-01  7.27e-05  1.27e-02  9.22e-01  
  6  +4.7179e-01  +9.8217e-01  5.10e-01  1.34e-03  8.44e-02  9.21e-05  3.86e-03  7.23e-01  
  7  +4.6893e-01  +8.9438e-01  4.25e-01  1.08e-03  6.78e-02  1.09e-04  3.13e-03  3.91e-01  
  8  +4.6854e-01  +8.4823e-01  3.80e-01  1.02e-03  6.37e-02  1.17e-04  2.97e-03  3.27e-01  
  9  +4.4395e-01  +6.8952e-01  2.46e-01  5.14e-04  3.21e-02  9.30e-05  1.57e-03  5.75e-01  
 10  +4.2089e-01  +5.6008e-01  1.39e-01  2.76e-04  1.71e-02  5.12e-05  9.09e-04  4.83e-01  
 11  +3.9418e-01  +4.2144e-01  2.73e-02  5.30e-05  3.27e-03  1.39e-05  1.97e-04  9.90e-01  
 12  +3.8562e-01  +3.8860e-01  2.98e-03  5.78e-06  3.56e-04  1.36e-06  2.31e-05  8.97e-01  
 13  +3.8453e-01  +3.8459e-01  6.37e-05  1.23e-07  7.59e-06  2.92e-08  5.04e-07  9.88e-01  
 14  +3.8450e-01  +3.8450e-01  6.36e-07  1.23e-09  7.59e-08  2.92e-10  5.04e-09  9.90e-01  
 15  +3.8450e-01  +3.8450e-01  6.36e-09  1.23e-11  7.59e-10  2.92e-12  5.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.2117ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:54:01 PM: Problem status: optimal
(CVXPY) Oct 06 03:54:01 PM: Optimal value: 3.845e-01
(CVXPY) Oct 06 03:54:01 PM: Compilation took 1.014e-02 seconds
(CVXPY) Oct 06 03:54:01 PM: Solver (including time spent in interface) took 1.162e-02 seconds
FULL MODEL:
  Accruacy: 0.615
  Our objective: 0.23000000000000004

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                       <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.445049524307251
Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.17999999999999997
  Highest accruacy: 0.59
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

