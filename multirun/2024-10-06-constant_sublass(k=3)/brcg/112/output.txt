Command:
python test_script.py -s constant_subclass -d 3 -n 10000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1424
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 3.

Computed total variation: 0.1424
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:47:58 PM: Your problem has 5007 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:47:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:47:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:47:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:47:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:47:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:47:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:47:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:47:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:47:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:47:58 PM: Finished problem compilation (took 8.484e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5007
  constraints   = 10007
  nnz(P)        = 0
  nnz(A)        = 30007
  cones (total) = 1
    : Nonnegative = 1,  numel = 10007

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +5.0009e+03  5.00e+03  9.84e-01  7.83e+01  1.00e+00  1.00e+00   ------   
  1  +6.2012e-01  +9.2711e+02  9.26e+02  3.06e-01  4.07e+01  4.25e-03  4.36e-01  6.94e-01  
  2  +5.5584e-01  +1.5890e+02  1.58e+02  1.36e-01  2.16e+01  6.67e-03  2.21e-01  6.63e-01  
  3  +5.0960e-01  +2.8149e+01  2.76e+01  1.04e-01  1.61e+01  1.17e-05  2.19e-01  5.20e-02  
  4  +5.0001e-01  +1.0983e+00  5.98e-01  4.00e-03  6.26e-01  3.17e-06  1.68e-01  7.21e-01  
  5  +4.9998e-01  +6.2267e-01  1.23e-01  8.18e-04  1.29e-01  9.48e-07  3.22e-02  8.28e-01  
  6  +4.9583e-01  +1.3143e+00  8.18e-01  8.89e-04  1.41e-01  6.30e-05  2.86e-03  9.70e-01  
  7  +4.8031e-01  +8.4266e-01  3.62e-01  1.00e-04  1.59e-02  1.84e-04  3.14e-04  8.91e-01  
  8  +4.6753e-01  +5.2075e-01  5.32e-02  1.36e-05  2.16e-03  1.84e-06  4.61e-05  9.02e-01  
  9  +4.5901e-01  +4.6685e-01  7.84e-03  1.83e-06  2.89e-04  2.58e-07  6.83e-06  8.68e-01  
 10  +4.5629e-01  +4.5661e-01  3.14e-04  6.53e-08  1.03e-05  1.20e-08  2.77e-07  9.78e-01  
 11  +4.5620e-01  +4.5620e-01  3.14e-06  6.53e-10  1.03e-07  1.20e-10  2.77e-09  9.90e-01  
 12  +4.5620e-01  +4.5620e-01  3.14e-08  6.53e-12  1.03e-09  1.20e-12  2.77e-11  9.90e-01  
 13  +4.5620e-01  +4.5620e-01  3.14e-10  6.53e-14  1.03e-11  1.23e-14  2.84e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.0422ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:58 PM: Problem status: optimal
(CVXPY) Oct 06 03:47:58 PM: Optimal value: 4.562e-01
(CVXPY) Oct 06 03:47:58 PM: Compilation took 8.484e-02 seconds
(CVXPY) Oct 06 03:47:58 PM: Solver (including time spent in interface) took 1.052e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4562
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:47:58 PM: Your problem has 5011 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:47:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:47:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:47:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:47:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:47:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:47:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:47:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:47:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:47:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:47:58 PM: Finished problem compilation (took 2.664e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5011
  constraints   = 10011
  nnz(P)        = 0
  nnz(A)        = 35628
  cones (total) = 1
    : Nonnegative = 1,  numel = 10011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +5.0015e+03  5.00e+03  9.84e-01  8.32e+01  1.00e+00  1.00e+00   ------   
  1  +6.1995e-01  +9.2856e+02  9.28e+02  3.07e-01  4.33e+01  4.25e-03  4.38e-01  6.93e-01  
  2  +5.5561e-01  +1.5849e+02  1.58e+02  1.36e-01  2.29e+01  6.74e-03  2.22e-01  6.65e-01  
  3  +5.0946e-01  +2.7846e+01  2.73e+01  1.03e-01  1.70e+01  1.18e-05  2.20e-01  5.43e-02  
  4  +5.0085e-01  +3.5234e+00  3.02e+00  2.00e-02  3.25e+00  4.19e-06  2.07e-01  1.73e-01  
  5  +4.9999e-01  +7.0473e-01  2.05e-01  1.37e-03  2.28e-01  1.19e-06  5.78e-02  9.52e-01  
  6  +4.9998e-01  +7.2320e-01  2.23e-01  1.49e-03  2.49e-01  1.40e-06  4.86e-02  2.54e-01  
  7  +4.9999e-01  +7.7365e-01  2.74e-01  1.82e-03  3.04e-01  1.53e-06  4.48e-02  3.48e-01  
  8  +4.9977e-01  +7.2342e-01  2.24e-01  1.36e-03  2.27e-01  3.98e-06  9.95e-03  8.22e-01  
  9  +4.9355e-01  +6.7562e-01  1.82e-01  1.24e-04  2.08e-02  7.99e-05  3.64e-04  9.65e-01  
 10  +4.9125e-01  +6.6517e-01  1.74e-01  8.35e-05  1.41e-02  9.52e-05  2.39e-04  4.39e-01  
 11  +4.9097e-01  +6.5974e-01  1.69e-01  8.29e-05  1.40e-02  8.70e-05  2.38e-04  2.70e-02  
 12  +4.9196e-01  +6.6535e-01  1.73e-01  7.29e-05  1.23e-02  6.87e-05  2.06e-04  4.47e-01  
 13  +4.9186e-01  +6.6000e-01  1.68e-01  7.18e-05  1.21e-02  5.72e-05  2.04e-04  1.19e-01  
 14  +4.9053e-01  +6.5301e-01  1.62e-01  5.01e-05  8.45e-03  3.77e-05  1.40e-04  7.33e-01  
 15  +4.8900e-01  +6.4751e-01  1.59e-01  4.93e-05  8.31e-03  3.38e-05  1.39e-04  6.50e-02  
 16  +4.7551e-01  +5.8852e-01  1.13e-01  2.26e-05  3.81e-03  2.60e-05  6.44e-05  7.38e-01  
 17  +4.4472e-01  +4.8007e-01  3.53e-02  5.67e-06  9.51e-04  3.96e-06  1.72e-05  8.48e-01  
 18  +4.2950e-01  +4.3071e-01  1.21e-03  1.91e-07  3.20e-05  3.85e-08  6.08e-07  9.79e-01  
 19  +4.2891e-01  +4.2892e-01  1.22e-05  1.91e-09  3.21e-07  3.85e-10  6.10e-09  9.90e-01  
 20  +4.2890e-01  +4.2890e-01  1.22e-07  1.91e-11  3.21e-09  3.89e-12  6.16e-11  9.90e-01  
 21  +4.2890e-01  +4.2890e-01  1.22e-09  1.91e-13  3.21e-11  3.93e-14  6.21e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.3475ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:47:59 PM: Problem status: optimal
(CVXPY) Oct 06 03:47:59 PM: Optimal value: 4.289e-01
(CVXPY) Oct 06 03:47:59 PM: Compilation took 2.664e-02 seconds
(CVXPY) Oct 06 03:47:59 PM: Solver (including time spent in interface) took 1.319e-01 seconds
FULL MODEL:
  Accruacy: 0.5712
  Our objective: 0.1424

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1424)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.3136489391326904
Best over terms:
  Our final objective: 0.1424
    Its accruacy: 0.5712
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1424
  Highest accruacy: 0.5712
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

