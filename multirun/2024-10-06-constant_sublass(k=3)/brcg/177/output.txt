Command:
python test_script.py -s constant_subclass -d 5 -n 500 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.176
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.27599999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:39 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:39 PM: Finished problem compilation (took 4.264e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9947e-01  +2.5085e+02  2.50e+02  9.33e-01  2.01e+01  1.00e+00  1.01e+00   ------   
  1  +5.9866e-01  +5.0513e+01  4.99e+01  3.44e-01  1.15e+01  3.99e-03  5.06e-01  6.45e-01  
  2  +5.4267e-01  +7.2479e+00  6.71e+00  1.14e-01  4.69e+00  1.02e-02  2.23e-01  8.13e-01  
  3  +5.0113e-01  +1.3477e+00  8.47e-01  2.52e-02  9.98e-01  1.01e-03  1.92e-01  5.46e-01  
  4  +4.9942e-01  +6.9590e-01  1.96e-01  5.78e-03  2.36e-01  3.81e-04  4.09e-02  8.33e-01  
  5  +4.7771e-01  +7.4222e-01  2.65e-01  1.47e-03  6.17e-02  3.84e-03  4.65e-03  9.30e-01  
  6  +4.5734e-01  +5.5666e-01  9.93e-02  5.22e-04  2.17e-02  4.82e-04  1.85e-03  7.11e-01  
  7  +4.4236e-01  +4.7547e-01  3.31e-02  1.51e-04  6.25e-03  1.83e-05  6.04e-04  9.90e-01  
  8  +4.3339e-01  +4.3754e-01  4.15e-03  1.73e-05  7.15e-04  3.49e-06  7.71e-05  9.90e-01  
  9  +4.3211e-01  +4.3216e-01  4.71e-05  1.95e-07  8.08e-06  3.89e-08  8.82e-07  9.89e-01  
 10  +4.3210e-01  +4.3210e-01  4.71e-07  1.95e-09  8.08e-08  3.89e-10  8.82e-09  9.90e-01  
 11  +4.3210e-01  +4.3210e-01  4.71e-09  1.95e-11  8.08e-10  3.89e-12  8.83e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.8989ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:39 PM: Optimal value: 4.321e-01
(CVXPY) Oct 06 03:53:39 PM: Compilation took 4.264e-02 seconds
(CVXPY) Oct 06 03:53:39 PM: Solver (including time spent in interface) took 2.155e-04 seconds
Initial LP solved
Iteration: 1, Objective: 0.4321
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:39 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:39 PM: Finished problem compilation (took 1.009e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2606
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9890e-01  +2.5125e+02  2.51e+02  9.35e-01  2.16e+01  1.00e+00  1.02e+00   ------   
  1  +5.9548e-01  +5.0929e+01  5.03e+01  3.52e-01  1.23e+01  3.96e-03  5.20e-01  6.40e-01  
  2  +5.3964e-01  +6.9629e+00  6.42e+00  1.12e-01  4.80e+00  1.09e-02  2.21e-01  8.45e-01  
  3  +5.0066e-01  +1.3577e+00  8.57e-01  2.61e-02  1.10e+00  1.28e-03  1.78e-01  6.62e-01  
  4  +4.9866e-01  +8.1793e-01  3.19e-01  9.30e-03  4.03e-01  7.81e-04  5.10e-02  7.47e-01  
  5  +4.7138e-01  +9.0419e-01  4.33e-01  2.50e-03  1.13e-01  5.56e-03  7.58e-03  9.35e-01  
  6  +4.5800e-01  +7.2592e-01  2.68e-01  1.35e-03  6.11e-02  2.71e-03  4.13e-03  5.73e-01  
  7  +4.4068e-01  +6.0209e-01  1.61e-01  6.39e-04  2.90e-02  1.64e-03  1.97e-03  6.26e-01  
  8  +4.3273e-01  +5.3080e-01  9.81e-02  4.35e-04  1.99e-02  1.40e-05  1.42e-03  7.17e-01  
  9  +4.0667e-01  +4.2671e-01  2.00e-02  7.14e-05  3.26e-03  1.05e-05  2.44e-04  8.83e-01  
 10  +3.9859e-01  +3.9944e-01  8.51e-04  3.05e-06  1.38e-04  4.28e-07  1.10e-05  9.61e-01  
 11  +3.9820e-01  +3.9821e-01  8.85e-06  3.18e-08  1.44e-06  4.65e-09  1.17e-07  9.90e-01  
 12  +3.9820e-01  +3.9820e-01  8.85e-08  3.18e-10  1.44e-08  4.65e-11  1.17e-09  9.90e-01  
 13  +3.9820e-01  +3.9820e-01  8.85e-10  3.18e-12  1.44e-10  4.65e-13  1.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.7887ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:39 PM: Optimal value: 3.982e-01
(CVXPY) Oct 06 03:53:39 PM: Compilation took 1.009e-02 seconds
(CVXPY) Oct 06 03:53:39 PM: Solver (including time spent in interface) took 4.589e-03 seconds
Iteration: 2, Objective: 0.3982
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:39 PM: Your problem has 281 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:39 PM: Finished problem compilation (took 4.597e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 281
  constraints   = 531
  nnz(P)        = 0
  nnz(A)        = 2917
  cones (total) = 1
    : Nonnegative = 1,  numel = 531

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9856e-01  +2.5171e+02  2.51e+02  9.35e-01  2.19e+01  1.00e+00  1.02e+00   ------   
  1  +5.9138e-01  +5.1125e+01  5.05e+01  3.54e-01  1.24e+01  3.97e-03  5.19e-01  6.39e-01  
  2  +5.3641e-01  +6.6047e+00  6.07e+00  1.05e-01  4.59e+00  1.12e-02  2.09e-01  8.77e-01  
  3  +5.0044e-01  +1.4525e+00  9.52e-01  2.89e-02  1.24e+00  1.86e-03  1.57e-01  7.35e-01  
  4  +4.9269e-01  +8.6193e-01  3.69e-01  7.39e-03  3.34e-01  2.35e-03  2.43e-02  9.46e-01  
  5  +4.7618e-01  +7.4821e-01  2.72e-01  2.63e-03  1.21e-01  3.77e-03  8.00e-03  7.01e-01  
  6  +4.7349e-01  +7.5415e-01  2.81e-01  2.20e-03  1.01e-01  4.06e-03  6.44e-03  3.13e-01  
  7  +4.6095e-01  +7.1456e-01  2.54e-01  1.32e-03  6.01e-02  3.77e-03  3.93e-03  5.75e-01  
  8  +4.4760e-01  +6.4687e-01  1.99e-01  1.04e-03  4.73e-02  1.27e-03  3.22e-03  5.13e-01  
  9  +4.1876e-01  +5.2560e-01  1.07e-01  4.36e-04  1.98e-02  5.50e-04  1.42e-03  6.98e-01  
 10  +4.0879e-01  +4.8851e-01  7.97e-02  3.09e-04  1.42e-02  3.85e-04  1.03e-03  3.42e-01  
 11  +3.9311e-01  +4.2652e-01  3.34e-02  1.24e-04  5.72e-03  3.76e-05  4.34e-04  9.90e-01  
 12  +3.8153e-01  +3.8471e-01  3.18e-03  1.16e-05  5.34e-04  3.23e-06  4.25e-05  9.09e-01  
 13  +3.8039e-01  +3.8062e-01  2.30e-04  8.38e-07  3.85e-05  2.29e-07  3.11e-06  9.35e-01  
 14  +3.8030e-01  +3.8030e-01  2.48e-06  9.03e-09  4.15e-07  2.45e-09  3.37e-08  9.90e-01  
 15  +3.8030e-01  +3.8030e-01  2.48e-08  9.03e-11  4.15e-09  2.45e-11  3.37e-10  9.90e-01  
 16  +3.8030e-01  +3.8030e-01  2.48e-10  9.03e-13  4.15e-11  2.45e-13  3.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3524ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:39 PM: Optimal value: 3.803e-01
(CVXPY) Oct 06 03:53:39 PM: Compilation took 4.597e-03 seconds
(CVXPY) Oct 06 03:53:39 PM: Solver (including time spent in interface) took 8.894e-03 seconds
Iteration: 3, Objective: 0.3803
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:39 PM: Your problem has 286 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:39 PM: Finished problem compilation (took 5.103e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 286
  constraints   = 536
  nnz(P)        = 0
  nnz(A)        = 2992
  cones (total) = 1
    : Nonnegative = 1,  numel = 536

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9833e-01  +2.5181e+02  2.51e+02  9.36e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.8840e-01  +5.1260e+01  5.07e+01  3.57e-01  1.24e+01  3.96e-03  5.22e-01  6.38e-01  
  2  +5.3481e-01  +6.4389e+00  5.90e+00  1.02e-01  4.45e+00  1.15e-02  2.03e-01  8.95e-01  
  3  +5.0062e-01  +1.5710e+00  1.07e+00  3.22e-02  1.38e+00  2.43e-03  1.48e-01  7.44e-01  
  4  +4.8673e-01  +1.1239e+00  6.37e-01  8.81e-03  4.00e-01  4.74e-03  2.63e-02  9.32e-01  
  5  +4.6815e-01  +8.5435e-01  3.86e-01  3.38e-03  1.54e-01  4.00e-03  1.04e-02  6.32e-01  
  6  +4.6607e-01  +8.3311e-01  3.67e-01  2.94e-03  1.34e-01  3.23e-03  8.77e-03  3.49e-01  
  7  +4.5449e-01  +8.0354e-01  3.49e-01  1.88e-03  8.55e-02  3.96e-03  5.56e-03  4.23e-01  
  8  +4.4213e-01  +7.2433e-01  2.82e-01  1.43e-03  6.48e-02  2.04e-03  4.39e-03  4.40e-01  
  9  +4.2230e-01  +6.0588e-01  1.84e-01  8.91e-04  4.03e-02  2.01e-05  2.92e-03  8.74e-01  
 10  +4.0076e-01  +5.0521e-01  1.04e-01  4.61e-04  2.08e-02  1.76e-05  1.61e-03  4.89e-01  
 11  +3.8677e-01  +4.4359e-01  5.68e-02  2.38e-04  1.08e-02  2.06e-05  8.71e-04  5.76e-01  
 12  +3.7265e-01  +3.8404e-01  1.14e-02  4.59e-05  2.10e-03  7.04e-06  1.77e-04  8.71e-01  
 13  +3.6884e-01  +3.6973e-01  8.86e-04  3.51e-06  1.61e-04  7.36e-07  1.39e-05  9.70e-01  
 14  +3.6851e-01  +3.6852e-01  1.46e-05  5.76e-08  2.65e-06  1.16e-08  2.32e-07  9.88e-01  
 15  +3.6850e-01  +3.6850e-01  1.46e-07  5.76e-10  2.65e-08  1.16e-10  2.32e-09  9.90e-01  
 16  +3.6850e-01  +3.6850e-01  1.46e-09  5.76e-12  2.65e-10  1.16e-12  2.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.0824ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:39 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:39 PM: Optimal value: 3.685e-01
(CVXPY) Oct 06 03:53:39 PM: Compilation took 5.103e-03 seconds
(CVXPY) Oct 06 03:53:39 PM: Solver (including time spent in interface) took 6.339e-03 seconds
Iteration: 4, Objective: 0.3685
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:40 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:40 PM: Finished problem compilation (took 8.314e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 3003
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9832e-01  +2.5181e+02  2.51e+02  9.36e-01  2.18e+01  1.00e+00  1.02e+00   ------   
  1  +5.8785e-01  +5.1325e+01  5.07e+01  3.58e-01  1.24e+01  3.96e-03  5.23e-01  6.37e-01  
  2  +5.3454e-01  +6.4141e+00  5.88e+00  1.01e-01  4.43e+00  1.15e-02  2.03e-01  8.98e-01  
  3  +5.0083e-01  +1.6142e+00  1.11e+00  3.34e-02  1.43e+00  2.55e-03  1.48e-01  7.29e-01  
  4  +4.8374e-01  +1.1347e+00  6.51e-01  7.66e-03  3.49e-01  5.61e-03  2.25e-02  9.75e-01  
  5  +4.6707e-01  +8.7745e-01  4.10e-01  3.49e-03  1.58e-01  4.00e-03  1.07e-02  5.66e-01  
  6  +4.6855e-01  +9.4612e-01  4.78e-01  3.09e-03  1.41e-01  3.77e-03  8.82e-03  5.28e-01  
  7  +4.5725e-01  +8.7497e-01  4.18e-01  2.08e-03  9.47e-02  2.75e-03  6.05e-03  5.43e-01  
  8  +4.2973e-01  +6.5749e-01  2.28e-01  1.11e-03  5.00e-02  2.57e-05  3.55e-03  8.14e-01  
  9  +3.9568e-01  +4.8899e-01  9.33e-02  4.03e-04  1.81e-02  4.48e-05  1.44e-03  7.62e-01  
 10  +3.7343e-01  +3.8844e-01  1.50e-02  6.27e-05  2.80e-03  1.14e-05  2.50e-04  9.37e-01  
 11  +3.7033e-01  +3.7564e-01  5.31e-03  2.21e-05  9.84e-04  4.20e-06  9.03e-05  6.82e-01  
 12  +3.6939e-01  +3.7170e-01  2.31e-03  9.51e-06  4.27e-04  2.31e-06  3.85e-05  9.90e-01  
 13  +3.6885e-01  +3.6973e-01  8.80e-04  3.49e-06  1.60e-04  9.42e-07  1.40e-05  6.75e-01  
 14  +3.6865e-01  +3.6901e-01  3.61e-04  1.44e-06  6.59e-05  3.68e-07  5.80e-06  9.90e-01  
 15  +3.6850e-01  +3.6851e-01  5.43e-06  2.15e-08  9.88e-07  5.14e-09  8.69e-08  9.87e-01  
 16  +3.6850e-01  +3.6850e-01  5.44e-08  2.15e-10  9.88e-09  5.14e-11  8.69e-10  9.90e-01  
 17  +3.6850e-01  +3.6850e-01  5.44e-10  2.15e-12  9.88e-11  5.16e-13  8.72e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.2959ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:40 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:40 PM: Optimal value: 3.685e-01
(CVXPY) Oct 06 03:53:40 PM: Compilation took 8.314e-03 seconds
(CVXPY) Oct 06 03:53:40 PM: Solver (including time spent in interface) took 6.768e-03 seconds
FULL MODEL:
  Accruacy: 0.634
  Our objective: 0.268

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.036)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.104)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0)            <-- (term's our objective: 0.052)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1)            <-- (term's our objective: 0.084)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.9399075508117676
Best over terms:
  Our final objective: 0.104
    Its accruacy: 0.552
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.104
  Highest accruacy: 0.552
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

