Command:
python test_script.py -s constant_subclass -d 6 -n 50000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15208
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 6.

Computed total variation: 0.15208
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:09 PM: Your problem has 25013 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:10 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:10 PM: Finished problem compilation (took 2.297e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:10 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25013
  constraints   = 50013
  nnz(P)        = 0
  nnz(A)        = 225013
  cones (total) = 1
    : Nonnegative = 1,  numel = 50013

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.23e+02  1.00e+00  1.00e+00   ------   
  1  +5.9317e-01  +5.1431e+03  5.14e+03  3.90e-01  1.36e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4210e-01  +6.8129e+02  6.81e+02  1.56e-01  6.86e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1085e-01  +1.7216e+02  1.72e+02  1.40e-01  6.16e+01  2.95e-05  2.40e-01  1.12e-01  
  4  +5.0079e-01  +1.0504e+01  1.00e+01  2.91e-02  1.25e+01  3.47e-06  1.91e-01  4.76e-01  
  5  +4.9999e-01  +1.0381e+00  5.38e-01  1.62e-03  7.24e-01  2.97e-05  1.70e-01  6.50e-01  
  6  +4.9999e-01  +6.2079e-01  1.21e-01  3.62e-04  1.62e-01  1.34e-05  2.81e-02  8.47e-01  
  7  +4.9888e-01  +1.0364e+00  5.38e-01  6.07e-04  2.72e-01  6.96e-04  2.22e-03  9.76e-01  
  8  +4.8114e-01  +9.1826e-01  4.37e-01  3.53e-05  1.58e-02  1.03e-02  1.13e-04  9.51e-01  
  9  +4.8042e-01  +6.6197e-01  1.82e-01  1.20e-05  5.37e-03  2.47e-03  3.76e-05  8.31e-01  
 10  +4.6269e-01  +4.9663e-01  3.39e-02  1.71e-06  7.65e-04  2.55e-04  5.74e-06  8.96e-01  
 11  +4.5468e-01  +4.5897e-01  4.28e-03  1.93e-07  8.66e-05  2.16e-05  7.47e-07  9.02e-01  
 12  +4.5313e-01  +4.5322e-01  9.30e-05  3.88e-09  1.74e-06  3.29e-07  1.64e-08  9.84e-01  
 13  +4.5310e-01  +4.5310e-01  9.30e-07  3.87e-11  1.73e-08  3.29e-09  1.64e-10  9.90e-01  
 14  +4.5310e-01  +4.5310e-01  9.35e-09  3.90e-13  1.74e-10  4.17e-11  2.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 453.8619ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:10 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:10 PM: Optimal value: 4.531e-01
(CVXPY) Oct 06 04:00:10 PM: Compilation took 2.297e-01 seconds
(CVXPY) Oct 06 04:00:10 PM: Solver (including time spent in interface) took 5.049e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:00:10 PM: Your problem has 25023 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:00:10 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:00:10 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:00:10 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:00:10 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:10 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:00:10 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:00:10 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:00:10 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:00:10 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:00:11 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:00:11 PM: Finished problem compilation (took 2.019e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:11 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25023
  constraints   = 50023
  nnz(P)        = 0
  nnz(A)        = 268900
  cones (total) = 1
    : Nonnegative = 1,  numel = 50023

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.34e+02  1.00e+00  1.00e+00   ------   
  1  +5.9316e-01  +5.1431e+03  5.14e+03  3.90e-01  1.42e+02  3.92e-03  5.25e-01  6.27e-01  
  2  +5.4206e-01  +6.8090e+02  6.80e+02  1.56e-01  7.19e+01  1.15e-02  2.45e-01  8.23e-01  
  3  +5.1083e-01  +1.7194e+02  1.71e+02  1.40e-01  6.45e+01  2.95e-05  2.40e-01  1.13e-01  
  4  +5.0078e-01  +1.0280e+01  9.78e+00  2.84e-02  1.29e+01  3.50e-06  1.90e-01  4.88e-01  
  5  +5.0002e-01  +1.4312e+00  9.31e-01  2.82e-03  1.31e+00  3.22e-05  1.72e-01  5.04e-01  
  6  +5.0000e-01  +6.8981e-01  1.90e-01  5.67e-04  2.65e-01  7.46e-06  3.65e-02  9.19e-01  
  7  +4.9998e-01  +8.3672e-01  3.37e-01  9.87e-04  4.62e-01  2.70e-05  1.34e-02  8.58e-01  
  8  +4.9876e-01  +7.2160e-01  2.23e-01  9.45e-05  4.46e-02  7.43e-04  2.72e-04  9.82e-01  
  9  +4.9470e-01  +7.0714e-01  2.12e-01  2.32e-05  1.09e-02  2.85e-03  6.42e-05  7.81e-01  
 10  +4.9278e-01  +6.9620e-01  2.03e-01  1.64e-05  7.77e-03  3.30e-03  4.50e-05  3.84e-01  
 11  +4.9171e-01  +6.8074e-01  1.89e-01  1.19e-05  5.60e-03  2.58e-03  3.21e-05  5.77e-01  
 12  +4.9232e-01  +6.7585e-01  1.84e-01  1.10e-05  5.19e-03  1.59e-03  2.96e-05  4.24e-01  
 13  +4.8355e-01  +6.4039e-01  1.57e-01  6.12e-06  2.89e-03  1.68e-03  1.67e-05  5.64e-01  
 14  +4.7544e-01  +6.0020e-01  1.25e-01  5.38e-06  2.54e-03  1.48e-05  1.52e-05  6.84e-01  
 15  +4.4787e-01  +5.0036e-01  5.25e-02  1.76e-06  8.29e-04  5.31e-06  5.25e-06  7.18e-01  
 16  +4.2709e-01  +4.3341e-01  6.31e-03  2.01e-07  9.43e-05  5.30e-08  6.33e-07  9.50e-01  
 17  +4.2410e-01  +4.2417e-01  7.46e-05  2.36e-09  1.11e-06  5.83e-10  7.49e-09  9.88e-01  
 18  +4.2406e-01  +4.2406e-01  7.46e-07  2.36e-11  1.11e-08  5.83e-12  7.49e-11  9.90e-01  
 19  +4.2406e-01  +4.2406e-01  7.47e-09  2.36e-13  1.11e-10  6.05e-14  7.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 789.0478ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:00:11 PM: Problem status: optimal
(CVXPY) Oct 06 04:00:11 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 04:00:11 PM: Compilation took 2.019e-01 seconds
(CVXPY) Oct 06 04:00:11 PM: Solver (including time spent in interface) took 8.452e-01 seconds
FULL MODEL:
  Accruacy: 0.57604
  Our objective: 0.15208

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.15208)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.227359056472778
Best over terms:
  Our final objective: 0.15208
    Its accruacy: 0.57604
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15208
  Highest accruacy: 0.57604
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

