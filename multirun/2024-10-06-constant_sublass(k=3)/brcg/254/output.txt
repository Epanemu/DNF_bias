Command:
python test_script.py -s constant_subclass -d 7 -n 100 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 7.

Computed total variation: 0.7
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:48 PM: Your problem has 65 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:48 PM: Finished problem compilation (took 4.976e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 65
  constraints   = 115
  nnz(P)        = 0
  nnz(A)        = 515
  cones (total) = 1
    : Nonnegative = 1,  numel = 115

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9717e-01  +5.1108e+01  5.06e+01  8.68e-01  9.49e+00  1.00e+00  1.04e+00   ------   
  1  +5.8238e-01  +1.0931e+01  1.03e+01  3.54e-01  5.55e+00  3.84e-03  5.65e-01  6.13e-01  
  2  +5.1799e-01  +1.6334e+00  1.12e+00  8.05e-02  1.55e+00  1.53e-02  2.06e-01  9.90e-01  
  3  +4.9303e-01  +7.7720e-01  2.84e-01  1.60e-02  3.22e-01  7.44e-03  4.90e-02  8.34e-01  
  4  +4.6934e-01  +6.7529e-01  2.06e-01  6.86e-03  1.39e-01  7.54e-03  2.21e-02  5.96e-01  
  5  +4.4836e-01  +5.3837e-01  9.00e-02  2.77e-03  5.54e-02  1.66e-03  9.95e-03  6.96e-01  
  6  +4.3536e-01  +4.8732e-01  5.20e-02  1.21e-03  2.43e-02  8.45e-04  5.00e-03  6.30e-01  
  7  +4.2307e-01  +4.3172e-01  8.65e-03  1.85e-04  3.71e-03  2.49e-05  8.59e-04  9.90e-01  
  8  +4.2014e-01  +4.2026e-01  1.17e-04  2.39e-06  4.80e-05  3.10e-07  1.16e-05  9.87e-01  
  9  +4.2010e-01  +4.2010e-01  1.17e-06  2.39e-08  4.79e-07  3.10e-09  1.16e-07  9.90e-01  
 10  +4.2010e-01  +4.2010e-01  1.17e-08  2.39e-10  4.79e-09  3.10e-11  1.16e-09  9.90e-01  
 11  +4.2010e-01  +4.2010e-01  1.17e-10  2.39e-12  4.79e-11  3.10e-13  1.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 897.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:48 PM: Optimal value: 4.201e-01
(CVXPY) Oct 06 04:01:48 PM: Compilation took 4.976e-02 seconds
(CVXPY) Oct 06 04:01:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4201
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:48 PM: Your problem has 75 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:48 PM: Finished problem compilation (took 8.828e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 75
  constraints   = 125
  nnz(P)        = 0
  nnz(A)        = 607
  cones (total) = 1
    : Nonnegative = 1,  numel = 125

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9202e-01  +5.1579e+01  5.11e+01  8.74e-01  9.54e+00  1.00e+00  1.06e+00   ------   
  1  +5.5159e-01  +1.1052e+01  1.05e+01  3.63e-01  5.45e+00  3.86e-03  5.73e-01  6.11e-01  
  2  +4.8716e-01  +1.9400e+00  1.45e+00  8.87e-02  1.71e+00  1.74e-02  2.17e-01  9.39e-01  
  3  +4.3341e-01  +9.5174e-01  5.18e-01  2.20e-02  4.44e-01  9.16e-03  6.14e-02  7.59e-01  
  4  +4.0065e-01  +7.3047e-01  3.30e-01  1.05e-02  2.10e-01  6.31e-03  3.18e-02  5.61e-01  
  5  +3.7279e-01  +5.0107e-01  1.28e-01  3.87e-03  7.81e-02  2.16e-03  1.30e-02  6.39e-01  
  6  +3.5683e-01  +4.0428e-01  4.74e-02  1.22e-03  2.52e-02  6.78e-04  4.34e-03  7.96e-01  
  7  +3.5055e-01  +3.7425e-01  2.37e-02  5.30e-04  1.10e-02  1.95e-04  1.94e-03  7.88e-01  
  8  +3.4255e-01  +3.4784e-01  5.29e-03  9.84e-05  2.03e-03  3.60e-05  3.77e-04  9.29e-01  
  9  +3.4045e-01  +3.4056e-01  1.11e-04  2.03e-06  4.17e-05  5.75e-07  7.88e-06  9.79e-01  
 10  +3.4040e-01  +3.4040e-01  1.27e-06  2.35e-08  4.81e-07  6.33e-09  9.21e-08  9.89e-01  
 11  +3.4040e-01  +3.4040e-01  1.27e-08  2.35e-10  4.81e-09  6.33e-11  9.22e-10  9.90e-01  
 12  +3.4040e-01  +3.4040e-01  1.28e-10  2.35e-12  4.81e-11  6.33e-13  9.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0187ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:48 PM: Optimal value: 3.404e-01
(CVXPY) Oct 06 04:01:48 PM: Compilation took 8.828e-03 seconds
(CVXPY) Oct 06 04:01:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3404
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:49 PM: Your problem has 85 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Finished problem compilation (took 5.042e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 85
  constraints   = 135
  nnz(P)        = 0
  nnz(A)        = 689
  cones (total) = 1
    : Nonnegative = 1,  numel = 135

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8744e-01  +5.2171e+01  5.17e+01  8.80e-01  9.48e+00  1.00e+00  1.07e+00   ------   
  1  +5.1831e-01  +1.1209e+01  1.07e+01  3.68e-01  5.33e+00  3.90e-03  5.81e-01  6.09e-01  
  2  +4.3869e-01  +2.2003e+00  1.76e+00  8.53e-02  1.63e+00  1.97e-02  2.10e-01  9.22e-01  
  3  +3.5972e-01  +8.8417e-01  5.24e-01  1.92e-02  3.71e-01  7.16e-03  5.58e-02  7.79e-01  
  4  +3.2902e-01  +6.6885e-01  3.40e-01  1.06e-02  2.05e-01  4.44e-03  3.34e-02  5.26e-01  
  5  +3.0365e-01  +4.8952e-01  1.86e-01  5.10e-03  9.94e-02  2.38e-03  1.75e-02  5.41e-01  
  6  +2.8790e-01  +4.0157e-01  1.14e-01  2.94e-03  5.89e-02  1.41e-03  1.06e-02  4.58e-01  
  7  +2.6955e-01  +3.0496e-01  3.54e-02  8.66e-04  1.76e-02  3.99e-04  3.44e-03  7.06e-01  
  8  +2.6131e-01  +2.6326e-01  1.95e-03  4.75e-05  9.62e-04  9.56e-06  1.98e-04  9.88e-01  
  9  +2.6069e-01  +2.6094e-01  2.48e-04  5.78e-06  1.15e-04  1.05e-06  2.61e-05  9.29e-01  
 10  +2.6060e-01  +2.6061e-01  4.51e-06  1.06e-07  2.10e-06  1.65e-08  4.85e-07  9.85e-01  
 11  +2.6060e-01  +2.6060e-01  4.51e-08  1.05e-09  2.10e-08  1.65e-10  4.85e-09  9.90e-01  
 12  +2.6060e-01  +2.6060e-01  4.51e-10  1.06e-11  2.10e-10  1.65e-12  4.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1398ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:49 PM: Optimal value: 2.606e-01
(CVXPY) Oct 06 04:01:49 PM: Compilation took 5.042e-03 seconds
(CVXPY) Oct 06 04:01:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2606
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:49 PM: Your problem has 95 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Finished problem compilation (took 8.584e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 95
  constraints   = 145
  nnz(P)        = 0
  nnz(A)        = 746
  cones (total) = 1
    : Nonnegative = 1,  numel = 145

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8462e-01  +5.2205e+01  5.17e+01  8.83e-01  9.30e+00  1.00e+00  1.07e+00   ------   
  1  +4.9471e-01  +1.1416e+01  1.09e+01  3.77e-01  5.23e+00  3.95e-03  5.82e-01  5.99e-01  
  2  +4.1420e-01  +2.1126e+00  1.70e+00  8.02e-02  1.50e+00  2.12e-02  1.98e-01  9.57e-01  
  3  +3.3809e-01  +9.4509e-01  6.07e-01  2.15e-02  4.07e-01  9.24e-03  6.20e-02  7.35e-01  
  4  +2.9083e-01  +6.1616e-01  3.25e-01  9.79e-03  1.85e-01  4.55e-03  3.15e-02  5.61e-01  
  5  +2.5907e-01  +4.0854e-01  1.49e-01  4.32e-03  8.22e-02  1.85e-03  1.56e-02  5.59e-01  
  6  +2.5157e-01  +3.7817e-01  1.27e-01  3.40e-03  6.72e-02  1.48e-03  1.27e-02  2.99e-01  
  7  +2.2936e-01  +2.6406e-01  3.47e-02  8.59e-04  1.74e-02  3.45e-04  3.64e-03  7.50e-01  
  8  +2.2145e-01  +2.2343e-01  1.98e-03  4.89e-05  9.91e-04  7.89e-06  2.19e-04  9.90e-01  
  9  +2.2086e-01  +2.2103e-01  1.72e-04  4.33e-06  8.71e-05  5.18e-07  2.03e-05  9.11e-01  
 10  +2.2080e-01  +2.2080e-01  3.24e-06  8.23e-08  1.65e-06  1.00e-08  3.97e-07  9.89e-01  
 11  +2.2080e-01  +2.2080e-01  3.24e-08  8.23e-10  1.65e-08  1.00e-10  3.97e-09  9.90e-01  
 12  +2.2080e-01  +2.2080e-01  3.24e-10  8.24e-12  1.65e-10  1.00e-12  3.97e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2844ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:49 PM: Optimal value: 2.208e-01
(CVXPY) Oct 06 04:01:49 PM: Compilation took 8.584e-03 seconds
(CVXPY) Oct 06 04:01:49 PM: Solver (including time spent in interface) took 4.032e-03 seconds
Iteration: 4, Objective: 0.2208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:49 PM: Your problem has 105 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Finished problem compilation (took 4.737e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 105
  constraints   = 155
  nnz(P)        = 0
  nnz(A)        = 796
  cones (total) = 1
    : Nonnegative = 1,  numel = 155

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8348e-01  +5.2417e+01  5.19e+01  8.87e-01  9.11e+00  1.00e+00  1.07e+00   ------   
  1  +4.8641e-01  +1.1443e+01  1.10e+01  3.83e-01  5.05e+00  3.95e-03  5.85e-01  6.00e-01  
  2  +3.9906e-01  +2.1851e+00  1.79e+00  7.80e-02  1.43e+00  2.17e-02  1.95e-01  9.51e-01  
  3  +3.2414e-01  +9.8809e-01  6.64e-01  2.23e-02  4.20e-01  9.32e-03  6.34e-02  7.49e-01  
  4  +2.7074e-01  +5.4382e-01  2.73e-01  8.30e-03  1.56e-01  3.39e-03  2.62e-02  6.47e-01  
  5  +2.4625e-01  +3.9120e-01  1.45e-01  4.23e-03  8.14e-02  1.74e-03  1.44e-02  5.02e-01  
  6  +2.3477e-01  +3.3933e-01  1.05e-01  2.80e-03  5.64e-02  1.09e-03  1.00e-02  4.40e-01  
  7  +2.1424e-01  +2.2632e-01  1.21e-02  3.12e-04  6.35e-03  8.37e-05  1.26e-03  8.97e-01  
  8  +2.1128e-01  +2.1252e-01  1.24e-03  3.21e-05  6.50e-04  6.78e-06  1.37e-04  9.11e-01  
  9  +2.1094e-01  +2.1105e-01  1.10e-04  2.93e-06  5.84e-05  4.13e-07  1.36e-05  9.07e-01  
 10  +2.1090e-01  +2.1090e-01  1.45e-06  3.89e-08  7.72e-07  5.24e-09  1.85e-07  9.89e-01  
 11  +2.1090e-01  +2.1090e-01  1.45e-08  3.89e-10  7.73e-09  5.25e-11  1.85e-09  9.90e-01  
 12  +2.1090e-01  +2.1090e-01  1.45e-10  3.90e-12  7.74e-11  5.25e-13  1.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.4422ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:49 PM: Optimal value: 2.109e-01
(CVXPY) Oct 06 04:01:49 PM: Compilation took 4.737e-03 seconds
(CVXPY) Oct 06 04:01:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.2109
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:49 PM: Your problem has 115 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Finished problem compilation (took 1.014e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 115
  constraints   = 165
  nnz(P)        = 0
  nnz(A)        = 828
  cones (total) = 1
    : Nonnegative = 1,  numel = 165

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8185e-01  +5.2652e+01  5.22e+01  8.91e-01  8.90e+00  1.00e+00  1.08e+00   ------   
  1  +4.6741e-01  +1.1592e+01  1.11e+01  3.89e-01  4.92e+00  3.98e-03  5.90e-01  5.95e-01  
  2  +3.7243e-01  +2.2277e+00  1.86e+00  7.83e-02  1.39e+00  2.25e-02  1.98e-01  9.50e-01  
  3  +3.0172e-01  +7.4939e-01  4.48e-01  1.55e-02  2.82e-01  6.93e-03  4.55e-02  7.99e-01  
  4  +2.5063e-01  +4.7087e-01  2.20e-01  6.90e-03  1.27e-01  2.32e-03  2.25e-02  6.66e-01  
  5  +2.3653e-01  +3.9282e-01  1.56e-01  4.54e-03  8.65e-02  1.60e-03  1.53e-02  4.14e-01  
  6  +2.1474e-01  +2.7020e-01  5.55e-02  1.58e-03  3.03e-02  2.32e-04  5.73e-03  9.20e-01  
  7  +2.0220e-01  +2.0709e-01  4.89e-03  1.35e-04  2.60e-03  1.76e-05  5.17e-04  9.15e-01  
  8  +2.0114e-01  +2.0168e-01  5.45e-04  1.56e-05  2.96e-04  1.32e-06  6.43e-05  8.85e-01  
  9  +2.0104e-01  +2.0117e-01  1.36e-04  3.97e-06  7.43e-05  3.85e-07  1.72e-05  8.13e-01  
 10  +2.0100e-01  +2.0100e-01  2.00e-06  5.88e-08  1.10e-06  5.69e-09  2.58e-07  9.86e-01  
 11  +2.0100e-01  +2.0100e-01  2.00e-08  5.88e-10  1.10e-08  5.69e-11  2.58e-09  9.90e-01  
 12  +2.0100e-01  +2.0100e-01  2.01e-10  5.89e-12  1.10e-10  5.69e-13  2.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5098ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:49 PM: Optimal value: 2.010e-01
(CVXPY) Oct 06 04:01:49 PM: Compilation took 1.014e-02 seconds
(CVXPY) Oct 06 04:01:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.2010
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:49 PM: Your problem has 125 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 125
  constraints   = 175
  nnz(P)        = 0
  nnz(A)        = 883
  cones (total) = 1
    : Nonnegative = 1,  numel = 175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8073e-01  +5.2624e+01  5.21e+01  8.94e-01  8.76e+00  1.00e+00  1.08e+00   ------   
  1  +4.4849e-01  +1.1825e+01  1.14e+01  3.95e-01  4.84e+00  4.05e-03  5.93e-01  5.84e-01  
  2  +3.5549e-01  +2.2305e+00  1.88e+00  8.20e-02  1.41e+00  2.34e-02  2.07e-01  9.50e-01  
  3  +2.9198e-01  +8.1437e-01  5.22e-01  1.90e-02  3.36e-01  7.67e-03  5.56e-02  7.85e-01  
  4  +2.4033e-01  +4.7412e-01  2.34e-01  7.20e-03  1.30e-01  2.86e-03  2.30e-02  7.22e-01  
  5  +2.1389e-01  +3.3555e-01  1.22e-01  3.35e-03  6.31e-02  1.48e-03  1.14e-02  5.77e-01  
  6  +1.9677e-01  +2.4944e-01  5.27e-02  1.41e-03  2.69e-02  3.33e-04  5.08e-03  7.70e-01  
  7  +1.8373e-01  +1.9265e-01  8.92e-03  2.24e-04  4.36e-03  5.23e-05  8.48e-04  8.66e-01  
  8  +1.8156e-01  +1.8266e-01  1.10e-03  2.81e-05  5.41e-04  5.00e-06  1.12e-04  8.72e-01  
  9  +1.8125e-01  +1.8138e-01  1.37e-04  3.62e-06  6.87e-05  5.37e-07  1.57e-05  8.99e-01  
 10  +1.8120e-01  +1.8121e-01  3.73e-06  9.87e-08  1.87e-06  1.43e-08  4.35e-07  9.84e-01  
 11  +1.8120e-01  +1.8120e-01  3.73e-08  9.87e-10  1.87e-08  1.43e-10  4.35e-09  9.90e-01  
 12  +1.8120e-01  +1.8120e-01  3.73e-10  9.88e-12  1.87e-10  1.43e-12  4.35e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5792ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:49 PM: Optimal value: 1.812e-01
(CVXPY) Oct 06 04:01:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:01:49 PM: Solver (including time spent in interface) took 7.659e-03 seconds
Iteration: 7, Objective: 0.1812
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:49 PM: Your problem has 135 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:49 PM: Finished problem compilation (took 1.134e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 135
  constraints   = 185
  nnz(P)        = 0
  nnz(A)        = 922
  cones (total) = 1
    : Nonnegative = 1,  numel = 185

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8042e-01  +5.2718e+01  5.22e+01  8.96e-01  8.58e+00  1.00e+00  1.08e+00   ------   
  1  +4.3924e-01  +1.1828e+01  1.14e+01  3.98e-01  4.68e+00  4.07e-03  5.90e-01  5.86e-01  
  2  +3.2783e-01  +2.1783e+00  1.85e+00  7.43e-02  1.26e+00  2.40e-02  1.93e-01  9.65e-01  
  3  +2.7248e-01  +7.0676e-01  4.34e-01  1.51e-02  2.63e-01  7.10e-03  4.55e-02  8.09e-01  
  4  +2.3737e-01  +5.1824e-01  2.81e-01  8.84e-03  1.58e-01  4.04e-03  2.77e-02  5.26e-01  
  5  +2.0725e-01  +3.4585e-01  1.39e-01  3.86e-03  7.12e-02  1.99e-03  1.28e-02  5.80e-01  
  6  +1.9318e-01  +2.7559e-01  8.24e-02  2.23e-03  4.17e-02  7.73e-04  7.69e-03  6.09e-01  
  7  +1.7596e-01  +1.9402e-01  1.81e-02  4.51e-04  8.63e-03  1.57e-04  1.64e-03  8.16e-01  
  8  +1.7180e-01  +1.7362e-01  1.82e-03  4.60e-05  8.70e-04  1.21e-05  1.75e-04  8.95e-01  
  9  +1.7139e-01  +1.7193e-01  5.41e-04  1.42e-05  2.62e-04  2.82e-06  6.12e-05  7.80e-01  
 10  +1.7122e-01  +1.7126e-01  4.67e-05  1.23e-06  2.26e-05  2.18e-07  5.65e-06  9.13e-01  
 11  +1.7120e-01  +1.7120e-01  5.05e-07  1.33e-08  2.44e-07  2.32e-09  6.17e-08  9.89e-01  
 12  +1.7120e-01  +1.7120e-01  5.05e-09  1.33e-10  2.44e-09  2.32e-11  6.17e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.7985ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:49 PM: Optimal value: 1.712e-01
(CVXPY) Oct 06 04:01:49 PM: Compilation took 1.134e-02 seconds
(CVXPY) Oct 06 04:01:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.1712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:50 PM: Your problem has 136 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:50 PM: Finished problem compilation (took 1.031e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 136
  constraints   = 186
  nnz(P)        = 0
  nnz(A)        = 931
  cones (total) = 1
    : Nonnegative = 1,  numel = 186

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8038e-01  +5.2712e+01  5.22e+01  8.97e-01  8.58e+00  1.00e+00  1.08e+00   ------   
  1  +4.3868e-01  +1.1858e+01  1.14e+01  3.99e-01  4.69e+00  4.07e-03  5.91e-01  5.84e-01  
  2  +3.2730e-01  +2.1531e+00  1.83e+00  7.38e-02  1.25e+00  2.42e-02  1.92e-01  9.72e-01  
  3  +2.7009e-01  +7.0465e-01  4.35e-01  1.50e-02  2.60e-01  7.34e-03  4.52e-02  8.16e-01  
  4  +2.4032e-01  +5.4683e-01  3.07e-01  9.74e-03  1.73e-01  4.63e-03  3.03e-02  4.55e-01  
  5  +2.0743e-01  +3.5196e-01  1.45e-01  4.08e-03  7.46e-02  2.19e-03  1.35e-02  5.86e-01  
  6  +1.9216e-01  +2.8222e-01  9.01e-02  2.35e-03  4.49e-02  1.02e-03  8.11e-03  5.81e-01  
  7  +1.7329e-01  +1.8180e-01  8.51e-03  2.12e-04  4.07e-03  7.94e-05  7.75e-04  9.09e-01  
  8  +1.7168e-01  +1.7315e-01  1.47e-03  3.80e-05  7.14e-04  1.05e-05  1.46e-04  8.24e-01  
  9  +1.7136e-01  +1.7182e-01  4.62e-04  1.22e-05  2.26e-04  2.46e-06  5.33e-05  8.13e-01  
 10  +1.7121e-01  +1.7123e-01  2.52e-05  6.67e-07  1.22e-05  1.13e-07  3.08e-06  9.47e-01  
 11  +1.7120e-01  +1.7120e-01  2.58e-07  6.83e-09  1.25e-07  1.15e-09  3.17e-08  9.90e-01  
 12  +1.7120e-01  +1.7120e-01  2.59e-09  6.86e-11  1.26e-09  1.15e-11  3.19e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.8264ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:50 PM: Optimal value: 1.712e-01
(CVXPY) Oct 06 04:01:50 PM: Compilation took 1.031e-02 seconds
(CVXPY) Oct 06 04:01:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.1712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:50 PM: Your problem has 137 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:50 PM: Finished problem compilation (took 5.099e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 137
  constraints   = 187
  nnz(P)        = 0
  nnz(A)        = 936
  cones (total) = 1
    : Nonnegative = 1,  numel = 187

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8026e-01  +5.2719e+01  5.22e+01  8.97e-01  8.57e+00  1.00e+00  1.08e+00   ------   
  1  +4.3540e-01  +1.1872e+01  1.14e+01  3.99e-01  4.68e+00  4.08e-03  5.92e-01  5.84e-01  
  2  +3.2579e-01  +2.2686e+00  1.94e+00  7.88e-02  1.32e+00  2.40e-02  2.03e-01  9.48e-01  
  3  +2.7238e-01  +9.1103e-01  6.39e-01  2.23e-02  3.85e-01  8.93e-03  6.60e-02  7.68e-01  
  4  +2.2184e-01  +4.5881e-01  2.37e-01  7.47e-03  1.30e-01  3.10e-03  2.41e-02  6.99e-01  
  5  +1.9970e-01  +3.3875e-01  1.39e-01  4.06e-03  7.18e-02  1.72e-03  1.38e-02  4.95e-01  
  6  +1.7795e-01  +2.1149e-01  3.35e-02  9.30e-04  1.66e-02  3.69e-04  3.38e-03  7.80e-01  
  7  +1.7171e-01  +1.7353e-01  1.82e-03  5.09e-05  9.01e-04  1.44e-05  1.92e-04  9.45e-01  
  8  +1.7134e-01  +1.7178e-01  4.38e-04  1.28e-05  2.21e-04  2.30e-06  5.46e-05  8.36e-01  
  9  +1.7121e-01  +1.7125e-01  3.67e-05  1.07e-06  1.84e-05  1.45e-07  4.85e-06  9.55e-01  
 10  +1.7120e-01  +1.7120e-01  4.09e-07  1.19e-08  2.05e-07  1.57e-09  5.46e-08  9.89e-01  
 11  +1.7120e-01  +1.7120e-01  4.10e-09  1.19e-10  2.05e-09  1.57e-11  5.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5211ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:50 PM: Optimal value: 1.712e-01
(CVXPY) Oct 06 04:01:50 PM: Compilation took 5.099e-03 seconds
(CVXPY) Oct 06 04:01:50 PM: Solver (including time spent in interface) took 5.078e-03 seconds
Iteration: 10, Objective: 0.1712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:50 PM: Your problem has 139 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:50 PM: Finished problem compilation (took 1.022e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 139
  constraints   = 189
  nnz(P)        = 0
  nnz(A)        = 947
  cones (total) = 1
    : Nonnegative = 1,  numel = 189

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7942e-01  +5.2650e+01  5.22e+01  8.97e-01  8.54e+00  1.00e+00  1.08e+00   ------   
  1  +4.2767e-01  +1.1922e+01  1.15e+01  4.02e-01  4.72e+00  4.06e-03  5.95e-01  5.79e-01  
  2  +2.9920e-01  +2.2549e+00  1.96e+00  7.46e-02  1.25e+00  2.59e-02  1.93e-01  9.71e-01  
  3  +2.5098e-01  +7.5531e-01  5.04e-01  1.82e-02  3.11e-01  7.65e-03  5.37e-02  7.89e-01  
  4  +2.1083e-01  +4.6606e-01  2.55e-01  8.48e-03  1.47e-01  3.44e-03  2.72e-02  5.98e-01  
  5  +1.8505e-01  +2.7478e-01  8.97e-02  2.78e-03  4.88e-02  1.16e-03  9.78e-03  6.72e-01  
  6  +1.7281e-01  +1.8045e-01  7.63e-03  2.37e-04  4.13e-03  5.46e-05  8.76e-04  9.49e-01  
  7  +1.7149e-01  +1.7256e-01  1.07e-03  3.43e-05  5.88e-04  5.73e-06  1.34e-04  8.51e-01  
  8  +1.7130e-01  +1.7171e-01  4.09e-04  1.32e-05  2.23e-04  1.67e-06  5.73e-05  8.40e-01  
  9  +1.7120e-01  +1.7122e-01  1.71e-05  5.52e-07  9.34e-06  6.57e-08  2.46e-06  9.61e-01  
 10  +1.7120e-01  +1.7120e-01  1.73e-07  5.58e-09  9.45e-08  6.63e-10  2.49e-08  9.90e-01  
 11  +1.7120e-01  +1.7120e-01  1.73e-09  5.59e-11  9.46e-10  6.64e-12  2.49e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.5321ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:50 PM: Optimal value: 1.712e-01
(CVXPY) Oct 06 04:01:50 PM: Compilation took 1.022e-02 seconds
(CVXPY) Oct 06 04:01:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 11, Objective: 0.1712
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:01:50 PM: Your problem has 140 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 04:01:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:01:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:01:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:01:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:01:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:01:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:01:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:01:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:01:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:01:50 PM: Finished problem compilation (took 1.010e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 140
  constraints   = 190
  nnz(P)        = 0
  nnz(A)        = 954
  cones (total) = 1
    : Nonnegative = 1,  numel = 190

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7942e-01  +5.2647e+01  5.22e+01  8.97e-01  8.54e+00  1.00e+00  1.08e+00   ------   
  1  +4.2761e-01  +1.1939e+01  1.15e+01  4.03e-01  4.72e+00  4.06e-03  5.96e-01  5.78e-01  
  2  +2.9972e-01  +2.2576e+00  1.96e+00  7.52e-02  1.26e+00  2.60e-02  1.95e-01  9.71e-01  
  3  +2.5103e-01  +7.9207e-01  5.41e-01  1.95e-02  3.33e-01  8.12e-03  5.74e-02  7.76e-01  
  4  +2.1377e-01  +4.8946e-01  2.76e-01  9.29e-03  1.60e-01  3.89e-03  2.95e-02  5.55e-01  
  5  +1.8562e-01  +2.7945e-01  9.38e-02  2.92e-03  5.12e-02  1.24e-03  1.03e-02  6.93e-01  
  6  +1.7332e-01  +1.8327e-01  9.95e-03  3.10e-04  5.40e-03  6.93e-05  1.14e-03  9.42e-01  
  7  +1.7151e-01  +1.7267e-01  1.16e-03  3.69e-05  6.34e-04  5.92e-06  1.44e-04  8.77e-01  
  8  +1.7131e-01  +1.7177e-01  4.59e-04  1.48e-05  2.50e-04  1.86e-06  6.42e-05  8.24e-01  
  9  +1.7121e-01  +1.7123e-01  2.73e-05  8.79e-07  1.49e-05  1.06e-07  3.92e-06  9.43e-01  
 10  +1.7120e-01  +1.7120e-01  2.76e-07  8.90e-09  1.50e-07  1.07e-09  3.97e-08  9.90e-01  
 11  +1.7120e-01  +1.7120e-01  2.76e-09  8.91e-11  1.51e-09  1.07e-11  3.98e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.6259ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:01:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:01:50 PM: Optimal value: 1.712e-01
(CVXPY) Oct 06 04:01:50 PM: Compilation took 1.010e-02 seconds
(CVXPY) Oct 06 04:01:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.82
  Our objective: 0.64

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x6 = 1) <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x6 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x5 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0) <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 1)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0) <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.04)
 OR (x1 = 0 AND x2 = 1 AND x6 = 1)                       <-- (term's our objective: 0.08)
 OR (x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.04)
 OR (x1 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0)            <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 5.457449913024902
Best over terms:
  Our final objective: 0.08000000000000002
    Its accruacy: 0.54
    Its hamming distance: 4
  Shortest hamming distance: 1
    Its our objective: 0.06000000000000005
  Highest accruacy: 0.54
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

