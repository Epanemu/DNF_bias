Command:
python test_script.py -s constant_subclass -d 5 -n 50000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15380000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 5.

Computed total variation: 0.1538
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:47 PM: Your problem has 25011 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:47 PM: Finished problem compilation (took 1.930e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25011
  constraints   = 50011
  nnz(P)        = 0
  nnz(A)        = 200011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50011

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +2.5004e+04  2.50e+04  9.93e-01  2.09e+02  1.00e+00  1.00e+00   ------   
  1  +5.9962e-01  +5.0087e+03  5.01e+03  3.68e-01  1.22e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4641e-01  +7.1486e+02  7.14e+02  1.49e-01  6.21e+01  9.83e-03  2.36e-01  7.77e-01  
  3  +5.1137e-01  +1.7327e+02  1.73e+02  1.36e-01  5.63e+01  2.41e-05  2.33e-01  8.05e-02  
  4  +5.0051e-01  +6.9365e+00  6.44e+00  1.90e-02  7.75e+00  2.56e-06  1.85e-01  5.46e-01  
  5  +5.0000e-01  +1.0209e+00  5.21e-01  1.58e-03  6.61e-01  2.68e-05  1.40e-01  9.90e-01  
  6  +4.9999e-01  +6.1576e-01  1.16e-01  3.49e-04  1.46e-01  1.42e-05  2.14e-02  8.58e-01  
  7  +4.9921e-01  +7.8822e-01  2.89e-01  3.63e-04  1.52e-01  5.44e-04  1.33e-03  9.78e-01  
  8  +4.8865e-01  +7.3449e-01  2.46e-01  2.75e-05  1.16e-02  6.55e-03  8.69e-05  9.51e-01  
  9  +4.7543e-01  +6.2972e-01  1.54e-01  8.11e-06  3.40e-03  8.31e-03  2.55e-05  8.00e-01  
 10  +4.6601e-01  +5.1434e-01  4.83e-02  2.68e-06  1.12e-03  7.84e-05  8.94e-06  8.13e-01  
 11  +4.5644e-01  +4.6550e-01  9.06e-03  4.44e-07  1.86e-04  1.22e-05  1.61e-06  8.29e-01  
 12  +4.5337e-01  +4.5375e-01  3.81e-04  1.60e-08  6.71e-06  1.28e-07  6.77e-08  9.88e-01  
 13  +4.5326e-01  +4.5326e-01  3.82e-06  1.60e-10  6.71e-08  1.28e-09  6.79e-10  9.90e-01  
 14  +4.5326e-01  +4.5326e-01  3.82e-08  1.60e-12  6.71e-10  1.28e-11  6.79e-12  9.90e-01  
 15  +4.5326e-01  +4.5326e-01  3.83e-10  1.61e-14  6.73e-12  1.43e-13  7.56e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 514.926ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:48 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:48 PM: Optimal value: 4.533e-01
(CVXPY) Oct 06 03:55:48 PM: Compilation took 1.930e-01 seconds
(CVXPY) Oct 06 03:55:48 PM: Solver (including time spent in interface) took 5.704e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4533
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:55:48 PM: Your problem has 25021 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:55:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:55:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:55:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:55:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:55:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:55:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:55:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:55:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:55:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:55:48 PM: Finished problem compilation (took 1.891e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25021
  constraints   = 50021
  nnz(P)        = 0
  nnz(A)        = 246874
  cones (total) = 1
    : Nonnegative = 1,  numel = 50021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  2.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.9960e-01  +5.0090e+03  5.01e+03  3.68e-01  1.30e+02  3.99e-03  5.02e-01  6.45e-01  
  2  +5.4637e-01  +7.1441e+02  7.14e+02  1.49e-01  6.58e+01  9.84e-03  2.36e-01  7.77e-01  
  3  +5.1135e-01  +1.7301e+02  1.72e+02  1.36e-01  5.96e+01  2.41e-05  2.33e-01  8.10e-02  
  4  +5.0049e-01  +6.6381e+00  6.14e+00  1.82e-02  7.85e+00  2.59e-06  1.83e-01  5.72e-01  
  5  +5.0001e-01  +1.1626e+00  6.63e-01  2.02e-03  8.92e-01  2.83e-05  1.32e-01  9.90e-01  
  6  +5.0000e-01  +7.9532e-01  2.95e-01  8.92e-04  3.95e-01  1.70e-05  5.05e-02  6.23e-01  
  7  +4.9997e-01  +7.5770e-01  2.58e-01  7.79e-04  3.45e-01  3.59e-05  1.41e-02  8.04e-01  
  8  +4.9894e-01  +7.3697e-01  2.38e-01  1.83e-04  8.16e-02  7.23e-04  5.63e-04  9.67e-01  
  9  +4.9414e-01  +7.2057e-01  2.26e-01  3.74e-05  1.67e-02  3.40e-03  1.07e-04  8.33e-01  
 10  +4.9791e-01  +6.9613e-01  1.98e-01  2.77e-05  1.24e-02  6.97e-04  7.52e-05  9.90e-01  
 11  +4.9447e-01  +6.7382e-01  1.79e-01  9.85e-06  4.41e-03  1.04e-03  2.63e-05  9.90e-01  
 12  +4.9136e-01  +6.6232e-01  1.71e-01  7.81e-06  3.49e-03  9.60e-04  2.09e-05  3.53e-01  
 13  +4.8861e-01  +6.5159e-01  1.63e-01  7.20e-06  3.22e-03  7.83e-04  1.94e-05  1.99e-01  
 14  +4.8136e-01  +6.2395e-01  1.43e-01  6.00e-06  2.68e-03  3.61e-04  1.65e-05  4.83e-01  
 15  +4.7836e-01  +6.1351e-01  1.35e-01  5.67e-06  2.53e-03  2.22e-04  1.57e-05  3.01e-01  
 16  +4.5960e-01  +5.4603e-01  8.64e-02  3.07e-06  1.36e-03  1.28e-04  8.86e-06  4.89e-01  
 17  +4.3169e-01  +4.5008e-01  1.84e-02  5.95e-07  2.64e-04  1.32e-06  1.84e-06  8.94e-01  
 18  +4.2337e-01  +4.2371e-01  3.40e-04  1.07e-08  4.77e-06  1.32e-08  3.41e-08  9.84e-01  
 19  +4.2320e-01  +4.2321e-01  3.40e-06  1.07e-10  4.77e-08  1.31e-10  3.41e-10  9.90e-01  
 20  +4.2320e-01  +4.2320e-01  3.41e-08  1.07e-12  4.77e-10  1.37e-12  3.54e-12  9.90e-01  
 21  +4.2320e-01  +4.2320e-01  3.41e-10  1.08e-14  4.77e-12  1.42e-14  3.67e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 881.6003ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:55:49 PM: Problem status: optimal
(CVXPY) Oct 06 03:55:49 PM: Optimal value: 4.232e-01
(CVXPY) Oct 06 03:55:49 PM: Compilation took 1.891e-01 seconds
(CVXPY) Oct 06 03:55:49 PM: Solver (including time spent in interface) took 9.413e-01 seconds
FULL MODEL:
  Accruacy: 0.5769
  Our objective: 0.15380000000000002

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1538)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.6729371547698975
Best over terms:
  Our final objective: 0.15380000000000002
    Its accruacy: 0.5769
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15380000000000002
  Highest accruacy: 0.5769
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

