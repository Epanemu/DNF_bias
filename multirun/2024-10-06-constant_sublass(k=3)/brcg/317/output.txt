Command:
python test_script.py -s constant_subclass -d 8 -n 50000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15208
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 8.

Computed total variation: 0.15812
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:12:28 PM: Your problem has 25017 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:12:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:12:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:12:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:12:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:12:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:12:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:12:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:12:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:12:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:12:28 PM: Finished problem compilation (took 2.659e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25017
  constraints   = 50017
  nnz(P)        = 0
  nnz(A)        = 275017
  cones (total) = 1
    : Nonnegative = 1,  numel = 50017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0016e-01  +2.5004e+04  2.50e+04  9.94e-01  2.49e+02  1.00e+00  1.00e+00   ------   
  1  +5.8419e-01  +5.3463e+03  5.35e+03  4.23e-01  1.60e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3497e-01  +6.3196e+02  6.31e+02  1.70e-01  8.23e+01  1.47e-02  2.66e-01  8.98e-01  
  3  +5.0961e-01  +1.6455e+02  1.64e+02  1.47e-01  7.15e+01  4.00e-05  2.54e-01  2.02e-01  
  4  +5.0121e-01  +1.5753e+01  1.53e+01  4.26e-02  2.04e+01  4.79e-06  1.95e-01  4.49e-01  
  5  +5.0000e-01  +1.1568e+00  6.57e-01  1.96e-03  9.78e-01  2.72e-05  1.88e-01  3.02e-01  
  6  +4.9999e-01  +6.3420e-01  1.34e-01  4.00e-04  2.00e-01  8.79e-06  3.35e-02  8.37e-01  
  7  +4.9979e-01  +7.4712e-01  2.47e-01  6.36e-04  3.18e-01  1.13e-04  4.29e-03  9.17e-01  
  8  +4.9150e-01  +7.1397e-01  2.22e-01  3.17e-05  1.59e-02  4.16e-03  9.87e-05  9.77e-01  
  9  +4.7542e-01  +6.2629e-01  1.51e-01  8.07e-06  4.04e-03  8.02e-03  2.52e-05  7.63e-01  
 10  +4.6596e-01  +5.1670e-01  5.07e-02  2.72e-06  1.36e-03  6.10e-04  9.10e-06  7.79e-01  
 11  +4.5610e-01  +4.6453e-01  8.43e-03  4.01e-07  2.01e-04  7.83e-05  1.47e-06  8.50e-01  
 12  +4.5322e-01  +4.5363e-01  4.11e-04  1.72e-08  8.59e-06  1.77e-06  7.23e-08  9.76e-01  
 13  +4.5310e-01  +4.5311e-01  4.12e-06  1.72e-10  8.59e-08  1.78e-08  7.26e-10  9.90e-01  
 14  +4.5310e-01  +4.5310e-01  4.12e-08  1.72e-12  8.59e-10  1.78e-10  7.26e-12  9.90e-01  
 15  +4.5310e-01  +4.5310e-01  4.14e-10  1.73e-14  8.61e-12  2.03e-12  8.26e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 562.0976ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:12:29 PM: Optimal value: 4.531e-01
(CVXPY) Oct 06 04:12:29 PM: Compilation took 2.659e-01 seconds
(CVXPY) Oct 06 04:12:29 PM: Solver (including time spent in interface) took 6.096e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:12:29 PM: Your problem has 25027 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:12:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:12:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:12:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:12:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:12:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:12:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:12:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:12:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:12:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:12:29 PM: Finished problem compilation (took 2.348e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25027
  constraints   = 50027
  nnz(P)        = 0
  nnz(A)        = 319011
  cones (total) = 1
    : Nonnegative = 1,  numel = 50027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8418e-01  +5.3465e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3494e-01  +6.3164e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6437e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5614e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.54e-01  
  5  +5.0003e-01  +1.6711e+00  1.17e+00  3.51e-03  1.81e+00  2.97e-05  1.89e-01  2.19e-01  
  6  +5.0000e-01  +6.5491e-01  1.55e-01  4.62e-04  2.40e-01  4.37e-06  3.36e-02  8.79e-01  
  7  +5.0000e-01  +9.9339e-01  4.93e-01  1.44e-03  7.45e-01  1.84e-05  1.92e-02  9.04e-01  
  8  +4.9976e-01  +8.1366e-01  3.14e-01  3.96e-04  2.07e-01  1.29e-04  1.32e-03  9.32e-01  
  9  +4.9781e-01  +8.0170e-01  3.04e-01  5.47e-05  2.87e-02  1.05e-03  1.53e-04  8.84e-01  
 10  +4.9434e-01  +7.1512e-01  2.21e-01  1.60e-05  8.37e-03  1.89e-03  4.38e-05  8.56e-01  
 11  +4.9283e-01  +7.0122e-01  2.08e-01  1.26e-05  6.59e-03  1.76e-03  3.40e-05  3.65e-01  
 12  +4.9302e-01  +6.9869e-01  2.06e-01  1.25e-05  6.56e-03  1.57e-03  3.38e-05  8.53e-02  
 13  +4.9166e-01  +6.8719e-01  1.96e-01  1.04e-05  5.46e-03  1.35e-03  2.80e-05  3.33e-01  
 14  +4.9096e-01  +6.8220e-01  1.91e-01  9.55e-06  5.00e-03  1.21e-03  2.57e-05  1.93e-01  
 15  +4.8977e-01  +6.7271e-01  1.83e-01  9.29e-06  4.86e-03  9.78e-04  2.51e-05  1.32e-01  
 16  +4.8761e-01  +6.5409e-01  1.66e-01  8.01e-06  4.19e-03  2.42e-04  2.18e-05  6.83e-01  
 17  +4.7543e-01  +6.0213e-01  1.27e-01  5.06e-06  2.64e-03  6.03e-05  1.41e-05  7.68e-01  
 18  +4.4004e-01  +4.7390e-01  3.39e-02  1.09e-06  5.65e-04  1.32e-06  3.28e-06  9.01e-01  
 19  +4.2467e-01  +4.2587e-01  1.20e-03  3.81e-08  1.98e-05  1.27e-08  1.21e-07  9.75e-01  
 20  +4.2407e-01  +4.2408e-01  1.21e-05  3.83e-10  1.99e-07  1.27e-10  1.22e-09  9.90e-01  
 21  +4.2406e-01  +4.2406e-01  1.21e-07  3.83e-12  1.99e-09  1.33e-12  1.27e-11  9.90e-01  
 22  +4.2406e-01  +4.2406e-01  1.21e-09  3.84e-14  1.99e-11  1.39e-14  1.32e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 974.4552ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:12:30 PM: Optimal value: 4.241e-01
(CVXPY) Oct 06 04:12:30 PM: Compilation took 2.348e-01 seconds
(CVXPY) Oct 06 04:12:30 PM: Solver (including time spent in interface) took 1.048e+00 seconds
Iteration: 2, Objective: 0.4241
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:12:30 PM: Your problem has 25031 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:12:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:12:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:12:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:12:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:12:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:12:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:12:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:12:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:12:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:12:31 PM: Finished problem compilation (took 2.503e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25031
  constraints   = 50031
  nnz(P)        = 0
  nnz(A)        = 319751
  cones (total) = 1
    : Nonnegative = 1,  numel = 50031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3466e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3157e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6435e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.03e-01  
  4  +5.0120e-01  +1.5616e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0004e-01  +1.6921e+00  1.19e+00  3.57e-03  1.84e+00  2.97e-05  1.89e-01  2.16e-01  
  6  +5.0001e-01  +7.0381e-01  2.04e-01  6.08e-04  3.15e-01  5.52e-06  4.35e-02  8.21e-01  
  7  +5.0000e-01  +7.6531e-01  2.65e-01  7.89e-04  4.09e-01  9.90e-06  2.54e-02  6.01e-01  
  8  +4.9985e-01  +7.3097e-01  2.31e-01  4.69e-04  2.45e-01  8.57e-05  1.99e-03  9.44e-01  
  9  +4.9782e-01  +7.2340e-01  2.26e-01  5.44e-05  2.85e-02  1.06e-03  1.52e-04  9.24e-01  
 10  +4.9624e-01  +7.1469e-01  2.18e-01  3.11e-05  1.63e-02  1.68e-03  8.56e-05  4.84e-01  
 11  +4.9510e-01  +7.0461e-01  2.10e-01  2.17e-05  1.14e-02  1.90e-03  5.90e-05  4.38e-01  
 12  +4.9398e-01  +6.9388e-01  2.00e-01  1.57e-05  8.22e-03  1.90e-03  4.24e-05  4.64e-01  
 13  +4.9359e-01  +6.9140e-01  1.98e-01  1.46e-05  7.64e-03  1.88e-03  3.94e-05  1.19e-01  
 14  +4.9326e-01  +6.8621e-01  1.93e-01  1.29e-05  6.74e-03  1.62e-03  3.47e-05  2.98e-01  
 15  +4.9114e-01  +6.6686e-01  1.76e-01  9.41e-06  4.93e-03  8.88e-04  2.54e-05  6.84e-01  
 16  +4.8911e-01  +6.5743e-01  1.68e-01  8.44e-06  4.42e-03  7.19e-04  2.29e-05  2.58e-01  
 17  +4.8087e-01  +6.2033e-01  1.39e-01  6.10e-06  3.19e-03  8.09e-06  1.69e-05  9.25e-01  
 18  +4.6231e-01  +5.5354e-01  9.12e-02  3.28e-06  1.71e-03  5.17e-06  9.46e-06  4.86e-01  
 19  +4.5805e-01  +5.3908e-01  8.10e-02  2.87e-06  1.50e-03  4.08e-06  8.37e-06  2.13e-01  
 20  +4.3577e-01  +4.6325e-01  2.75e-02  8.99e-07  4.67e-04  4.91e-08  2.77e-06  9.90e-01  
 21  +4.2451e-01  +4.2637e-01  1.85e-03  5.89e-08  3.06e-05  1.03e-08  1.88e-07  9.52e-01  
 22  +4.2367e-01  +4.2369e-01  2.16e-05  6.84e-10  3.55e-07  1.50e-10  2.19e-09  9.90e-01  
 23  +4.2366e-01  +4.2366e-01  2.16e-07  6.84e-12  3.55e-09  1.50e-12  2.19e-11  9.90e-01  
 24  +4.2366e-01  +4.2366e-01  2.16e-09  6.84e-14  3.56e-11  1.53e-14  2.23e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0716323s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:12:32 PM: Optimal value: 4.237e-01
(CVXPY) Oct 06 04:12:32 PM: Compilation took 2.503e-01 seconds
(CVXPY) Oct 06 04:12:32 PM: Solver (including time spent in interface) took 1.126e+00 seconds
Iteration: 3, Objective: 0.4237
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:12:32 PM: Your problem has 25032 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:12:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:12:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:12:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:12:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:12:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:12:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:12:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:12:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:12:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:12:32 PM: Finished problem compilation (took 2.671e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25032
  constraints   = 50032
  nnz(P)        = 0
  nnz(A)        = 319944
  cones (total) = 1
    : Nonnegative = 1,  numel = 50032

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +2.5004e+04  2.50e+04  9.94e-01  2.59e+02  1.00e+00  1.00e+00   ------   
  1  +5.8417e-01  +5.3467e+03  5.35e+03  4.23e-01  1.66e+02  3.82e-03  5.60e-01  5.98e-01  
  2  +5.3493e-01  +6.3151e+02  6.31e+02  1.70e-01  8.55e+01  1.47e-02  2.66e-01  8.99e-01  
  3  +5.0959e-01  +1.6434e+02  1.64e+02  1.47e-01  7.43e+01  4.00e-05  2.54e-01  2.04e-01  
  4  +5.0120e-01  +1.5618e+01  1.51e+01  4.22e-02  2.11e+01  4.81e-06  1.94e-01  4.55e-01  
  5  +5.0004e-01  +1.6971e+00  1.20e+00  3.59e-03  1.85e+00  2.97e-05  1.89e-01  2.15e-01  
  6  +5.0001e-01  +7.8693e-01  2.87e-01  8.56e-04  4.44e-01  7.55e-06  5.94e-02  7.30e-01  
  7  +5.0000e-01  +8.3258e-01  3.33e-01  9.88e-04  5.12e-01  1.31e-05  2.53e-02  8.05e-01  
  8  +4.9984e-01  +7.3725e-01  2.37e-01  4.85e-04  2.52e-01  8.71e-05  2.05e-03  9.31e-01  
  9  +4.9791e-01  +7.2984e-01  2.32e-01  5.94e-05  3.11e-02  1.02e-03  1.66e-04  9.19e-01  
 10  +4.9597e-01  +7.1790e-01  2.22e-01  2.94e-05  1.54e-02  1.80e-03  8.07e-05  5.79e-01  
 11  +4.9679e-01  +7.1093e-01  2.14e-01  2.82e-05  1.48e-02  1.30e-03  7.68e-05  2.90e-01  
 12  +4.9560e-01  +6.9621e-01  2.01e-01  1.72e-05  9.01e-03  1.38e-03  4.63e-05  6.40e-01  
 13  +4.9385e-01  +6.8897e-01  1.95e-01  1.29e-05  6.78e-03  1.61e-03  3.48e-05  2.99e-01  
 14  +4.9367e-01  +6.8743e-01  1.94e-01  1.29e-05  6.77e-03  1.54e-03  3.48e-05  2.87e-02  
 15  +4.8770e-01  +6.6168e-01  1.74e-01  7.75e-06  4.06e-03  1.75e-03  2.10e-05  5.09e-01  
 16  +4.8704e-01  +6.5810e-01  1.71e-01  7.70e-06  4.03e-03  1.63e-03  2.10e-05  3.11e-02  
 17  +4.8378e-01  +6.4439e-01  1.61e-01  6.87e-06  3.59e-03  1.48e-03  1.89e-05  1.44e-01  
 18  +4.8081e-01  +6.2925e-01  1.48e-01  6.47e-06  3.38e-03  9.13e-04  1.87e-05  2.18e-01  
 19  +4.8079e-01  +6.2917e-01  1.48e-01  6.47e-06  3.38e-03  9.02e-04  1.87e-05  1.04e-02  
 20  +4.7671e-01  +6.1092e-01  1.34e-01  5.78e-06  3.01e-03  5.90e-04  1.67e-05  2.97e-01  
 21  +4.6624e-01  +5.6896e-01  1.03e-01  4.11e-06  2.14e-03  3.98e-04  1.21e-05  3.35e-01  
 22  +4.5422e-01  +5.2639e-01  7.22e-02  2.64e-06  1.38e-03  1.97e-04  7.86e-06  5.14e-01  
 23  +4.4435e-01  +4.9436e-01  5.00e-02  1.65e-06  8.60e-04  2.16e-06  4.99e-06  9.52e-01  
 24  +4.3140e-01  +4.4979e-01  1.84e-02  5.93e-07  3.08e-04  5.94e-07  1.86e-06  7.43e-01  
 25  +4.2399e-01  +4.2500e-01  1.01e-03  3.23e-08  1.68e-05  2.89e-08  1.04e-07  9.46e-01  
 26  +4.2354e-01  +4.2356e-01  1.06e-05  3.37e-10  1.75e-07  2.94e-10  1.08e-09  9.90e-01  
 27  +4.2354e-01  +4.2354e-01  1.06e-07  3.37e-12  1.75e-09  2.94e-12  1.08e-11  9.90e-01  
 28  +4.2354e-01  +4.2354e-01  1.06e-09  3.38e-14  1.75e-11  2.99e-14  1.10e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.2292447s
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:12:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:12:33 PM: Optimal value: 4.235e-01
(CVXPY) Oct 06 04:12:33 PM: Compilation took 2.671e-01 seconds
(CVXPY) Oct 06 04:12:33 PM: Solver (including time spent in interface) took 1.282e+00 seconds
FULL MODEL:
  Accruacy: 0.57676
  Our objective: 0.15352000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.15208)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.00044)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 14.533167123794556
Best over terms:
  Our final objective: 0.15208
    Its accruacy: 0.57604
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15208
  Highest accruacy: 0.57604
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

