Command:
python test_script.py -s constant_subclass -d 4 -n 5000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1452
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 4.

Computed total variation: 0.1452
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:04 PM: Your problem has 2509 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:04 PM: Finished problem compilation (took 4.239e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2509
  constraints   = 5009
  nnz(P)        = 0
  nnz(A)        = 17509
  cones (total) = 1
    : Nonnegative = 1,  numel = 5009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5007e+03  2.50e+03  9.78e-01  6.04e+01  1.00e+00  1.00e+00   ------   
  1  +6.0814e-01  +4.8463e+02  4.84e+02  3.36e-01  3.36e+01  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5086e-01  +7.5506e+01  7.50e+01  1.37e-01  1.67e+01  8.23e-03  2.27e-01  7.26e-01  
  3  +5.1000e-01  +1.5685e+01  1.52e+01  9.60e-02  1.14e+01  1.69e-05  2.24e-01  7.54e-02  
  4  +5.0004e-01  +1.0270e+00  5.27e-01  5.01e-03  6.05e-01  6.32e-06  1.47e-01  8.00e-01  
  5  +4.9994e-01  +6.3818e-01  1.38e-01  1.31e-03  1.59e-01  2.77e-06  3.21e-02  8.10e-01  
  6  +4.9415e-01  +1.1347e+00  6.41e-01  1.11e-03  1.37e-01  1.03e-04  3.71e-03  9.90e-01  
  7  +4.7866e-01  +8.0557e-01  3.27e-01  1.87e-04  2.30e-02  2.22e-04  6.12e-04  8.39e-01  
  8  +4.6344e-01  +5.4789e-01  8.45e-02  3.98e-05  4.88e-03  2.72e-05  1.41e-04  8.49e-01  
  9  +4.4911e-01  +4.6662e-01  1.75e-02  7.43e-06  9.08e-04  2.45e-06  3.05e-05  9.08e-01  
 10  +4.4566e-01  +4.5040e-01  4.74e-03  1.99e-06  2.44e-04  4.64e-07  8.48e-06  9.90e-01  
 11  +4.4412e-01  +4.4419e-01  6.90e-05  2.90e-08  3.54e-06  6.53e-09  1.25e-07  9.88e-01  
 12  +4.4410e-01  +4.4410e-01  6.89e-07  2.90e-10  3.54e-08  6.52e-11  1.25e-09  9.90e-01  
 13  +4.4410e-01  +4.4410e-01  6.89e-09  2.90e-12  3.54e-10  6.53e-13  1.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.1316ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:04 PM: Optimal value: 4.441e-01
(CVXPY) Oct 06 03:51:04 PM: Compilation took 4.239e-02 seconds
(CVXPY) Oct 06 03:51:04 PM: Solver (including time spent in interface) took 3.496e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4441
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:04 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:04 PM: Finished problem compilation (took 1.971e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 22416
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0004e-01  +2.5013e+03  2.50e+03  9.78e-01  6.47e+01  1.00e+00  1.00e+00   ------   
  1  +6.0781e-01  +4.8549e+02  4.85e+02  3.37e-01  3.60e+01  4.09e-03  4.76e-01  6.66e-01  
  2  +5.5037e-01  +7.5031e+01  7.45e+01  1.37e-01  1.78e+01  8.34e-03  2.27e-01  7.31e-01  
  3  +5.0975e-01  +1.5431e+01  1.49e+01  9.53e-02  1.20e+01  1.69e-05  2.24e-01  8.10e-02  
  4  +5.0070e-01  +2.0491e+00  1.55e+00  1.47e-02  1.87e+00  7.53e-06  1.88e-01  3.61e-01  
  5  +5.0013e-01  +8.6167e-01  3.62e-01  3.43e-03  4.45e-01  2.33e-06  7.37e-02  6.59e-01  
  6  +4.9997e-01  +8.4871e-01  3.49e-01  3.16e-03  4.10e-01  4.51e-06  2.70e-02  7.37e-01  
  7  +4.9442e-01  +7.9665e-01  3.02e-01  3.42e-04  4.51e-02  8.06e-05  1.03e-03  9.90e-01  
  8  +4.8545e-01  +6.9093e-01  2.05e-01  1.39e-04  1.82e-02  8.59e-05  4.17e-04  6.63e-01  
  9  +4.8112e-01  +6.6222e-01  1.81e-01  1.00e-04  1.31e-02  8.18e-05  2.94e-04  3.62e-01  
 10  +4.8030e-01  +6.5993e-01  1.80e-01  8.70e-05  1.14e-02  7.90e-05  2.52e-04  2.64e-01  
 11  +4.8087e-01  +6.5235e-01  1.71e-01  8.00e-05  1.05e-02  4.84e-05  2.29e-04  4.44e-01  
 12  +4.7686e-01  +6.2343e-01  1.47e-01  6.73e-05  8.84e-03  1.93e-05  1.94e-04  6.68e-01  
 13  +4.6706e-01  +5.8232e-01  1.15e-01  4.42e-05  5.79e-03  1.66e-05  1.29e-04  3.65e-01  
 14  +4.5703e-01  +5.4019e-01  8.32e-02  2.93e-05  3.84e-03  1.19e-05  8.70e-05  3.74e-01  
 15  +4.5521e-01  +5.3062e-01  7.54e-02  2.64e-05  3.45e-03  1.03e-05  7.89e-05  3.68e-01  
 16  +4.5288e-01  +5.1486e-01  6.20e-02  2.09e-05  2.74e-03  8.83e-06  6.28e-05  9.90e-01  
 17  +4.3817e-01  +4.6364e-01  2.55e-02  8.23e-06  1.08e-03  3.34e-06  2.56e-05  6.85e-01  
 18  +4.2858e-01  +4.3095e-01  2.37e-03  7.45e-07  9.73e-05  3.38e-07  2.38e-06  9.90e-01  
 19  +4.2751e-01  +4.2753e-01  2.39e-05  7.48e-09  9.78e-07  3.37e-09  2.40e-08  9.90e-01  
 20  +4.2750e-01  +4.2750e-01  2.39e-07  7.48e-11  9.78e-09  3.37e-11  2.40e-10  9.90e-01  
 21  +4.2750e-01  +4.2750e-01  2.39e-09  7.48e-13  9.78e-11  3.38e-13  2.40e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.2777ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:04 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:04 PM: Optimal value: 4.275e-01
(CVXPY) Oct 06 03:51:04 PM: Compilation took 1.971e-02 seconds
(CVXPY) Oct 06 03:51:04 PM: Solver (including time spent in interface) took 6.011e-02 seconds
FULL MODEL:
  Accruacy: 0.5726
  Our objective: 0.1452

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.1452)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.6990036964416504
Best over terms:
  Our final objective: 0.1452
    Its accruacy: 0.5726
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.1452
  Highest accruacy: 0.5726
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

