Command:
python test_script.py -s constant_subclass -d 8 -n 10 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.4
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 8.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:46 PM: Your problem has 22 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:47 PM: Finished problem compilation (took 3.510e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 22
  constraints   = 27
  nnz(P)        = 0
  nnz(A)        = 72
  cones (total) = 1
    : Nonnegative = 1,  numel = 27

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.1962e-01  +6.0172e+00  5.60e+00  7.66e-01  2.71e+00  1.00e+00  1.27e+00   ------   
  1  +4.4915e-01  +1.2394e+00  7.90e-01  2.98e-01  1.24e+00  3.51e-03  6.20e-01  7.07e-01  
  2  +3.1191e-01  +4.0554e-01  9.36e-02  3.97e-02  1.82e-01  9.47e-03  1.27e-01  9.54e-01  
  3  +3.0074e-01  +3.0521e-01  4.47e-03  1.95e-03  9.00e-03  5.15e-04  6.89e-03  9.64e-01  
  4  +3.0015e-01  +3.0036e-01  2.14e-04  9.36e-05  4.33e-04  2.36e-05  3.35e-04  9.52e-01  
  5  +3.0011e-01  +3.0013e-01  2.21e-05  9.48e-06  4.47e-05  1.43e-06  3.75e-05  9.52e-01  
  6  +3.0010e-01  +3.0010e-01  2.46e-07  1.04e-07  4.94e-07  1.54e-08  4.21e-07  9.89e-01  
  7  +3.0010e-01  +3.0010e-01  2.46e-09  1.04e-09  4.94e-09  1.54e-10  4.21e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 273.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:47 PM: Optimal value: 3.001e-01
(CVXPY) Oct 06 04:06:47 PM: Compilation took 3.510e-02 seconds
(CVXPY) Oct 06 04:06:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:47 PM: Your problem has 32 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:47 PM: Finished problem compilation (took 4.508e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 32
  constraints   = 37
  nnz(P)        = 0
  nnz(A)        = 116
  cones (total) = 1
    : Nonnegative = 1,  numel = 37

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.5489e-01  +6.1276e+00  5.77e+00  8.04e-01  3.13e+00  1.00e+00  1.30e+00   ------   
  1  +2.9845e-01  +1.0853e+00  7.87e-01  3.20e-01  1.34e+00  3.57e-03  5.98e-01  7.31e-01  
  2  +1.3137e-01  +3.3948e-01  2.08e-01  7.28e-02  3.79e-01  1.06e-02  2.12e-01  7.80e-01  
  3  +1.0306e-01  +1.2416e-01  2.11e-02  7.65e-03  4.15e-02  1.55e-03  2.50e-02  8.90e-01  
  4  +1.0017e-01  +1.0048e-01  3.07e-04  1.14e-04  6.15e-04  2.12e-05  3.76e-04  9.85e-01  
  5  +1.0012e-01  +1.0016e-01  4.08e-05  1.62e-05  8.14e-05  1.82e-06  5.85e-05  8.58e-01  
  6  +1.0010e-01  +1.0010e-01  2.32e-06  8.76e-07  4.40e-06  9.74e-08  3.81e-06  9.56e-01  
  7  +1.0010e-01  +1.0010e-01  2.35e-08  8.85e-09  4.44e-08  9.80e-10  3.88e-08  9.90e-01  
  8  +1.0010e-01  +1.0010e-01  2.35e-10  8.85e-11  4.44e-10  9.80e-12  3.88e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 235.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:47 PM: Optimal value: 1.001e-01
(CVXPY) Oct 06 04:06:47 PM: Compilation took 4.508e-03 seconds
(CVXPY) Oct 06 04:06:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:06:47 PM: Your problem has 33 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:06:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:06:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:06:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:06:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:06:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:06:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:06:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:06:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:06:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:06:47 PM: Finished problem compilation (took 9.953e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 33
  constraints   = 38
  nnz(P)        = 0
  nnz(A)        = 118
  cones (total) = 1
    : Nonnegative = 1,  numel = 38

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4203e-01  +6.3370e+00  5.99e+00  8.05e-01  3.14e+00  1.00e+00  1.33e+00   ------   
  1  +2.4157e-01  +1.0503e+00  8.09e-01  3.04e-01  1.29e+00  3.63e-03  5.93e-01  7.41e-01  
  2  +5.1310e-02  +4.8157e-01  4.30e-01  1.22e-01  5.94e-01  1.46e-02  3.42e-01  5.85e-01  
  3  +1.1716e-02  +5.5693e-02  4.40e-02  1.31e-02  6.93e-02  4.15e-03  4.49e-02  8.96e-01  
  4  +4.0738e-04  +1.1988e-03  7.91e-04  2.39e-04  1.26e-03  7.27e-05  8.38e-04  9.82e-01  
  5  +2.2735e-04  +3.0383e-04  7.65e-05  2.61e-05  1.30e-04  4.43e-06  9.24e-05  8.94e-01  
  6  +2.0205e-04  +2.0606e-04  4.00e-06  1.46e-06  6.95e-06  1.55e-07  5.91e-06  9.64e-01  
  7  +2.0002e-04  +2.0006e-04  4.13e-08  1.50e-08  7.17e-08  1.59e-09  6.21e-08  9.90e-01  
  8  +2.0000e-04  +2.0000e-04  4.13e-10  1.50e-10  7.17e-10  1.59e-11  6.21e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 240.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:06:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:06:47 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:06:47 PM: Compilation took 9.953e-03 seconds
(CVXPY) Oct 06 04:06:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x1 = 0 AND x4 = 0 AND x7 = 1) <-- (term's our objective: 0.8)
 OR (x2 = 1 AND x4 = 1)            <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.3552799224853516
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 4
  Shortest hamming distance: 4
    Its our objective: 0.8
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

