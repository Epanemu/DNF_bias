Command:
python test_script.py -s constant_subclass -d 4 -n 50000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14412
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50000 remain. 
Dimension is 4.

Computed total variation: 0.14412
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:37 PM: Your problem has 25009 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:37 PM: Finished problem compilation (took 1.748e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25009
  constraints   = 50009
  nnz(P)        = 0
  nnz(A)        = 175009
  cones (total) = 1
    : Nonnegative = 1,  numel = 50009

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5004e+04  2.50e+04  9.93e-01  1.93e+02  1.00e+00  1.00e+00   ------   
  1  +6.0822e-01  +4.8427e+03  4.84e+03  3.41e-01  1.08e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5118e-01  +7.5399e+02  7.53e+02  1.44e-01  5.58e+01  8.21e-03  2.28e-01  7.23e-01  
  3  +5.1148e-01  +1.6833e+02  1.68e+02  1.31e-01  5.07e+01  1.84e-05  2.26e-01  5.78e-02  
  4  +5.0019e-01  +2.9494e+00  2.45e+00  7.32e-03  2.80e+00  1.59e-06  1.64e-01  8.69e-01  
  5  +5.0002e-01  +9.3096e-01  4.31e-01  1.30e-03  5.03e-01  8.96e-06  8.31e-02  9.90e-01  
  6  +5.0000e-01  +6.1539e-01  1.15e-01  3.47e-04  1.34e-01  8.21e-06  1.25e-02  8.67e-01  
  7  +4.9965e-01  +6.6141e-01  1.62e-01  1.45e-04  5.65e-02  2.90e-04  4.78e-04  9.71e-01  
  8  +4.9677e-01  +6.6774e-01  1.71e-01  2.32e-05  9.03e-03  1.89e-03  6.93e-05  9.54e-01  
  9  +4.9060e-01  +6.4573e-01  1.55e-01  8.55e-06  3.33e-03  4.00e-03  2.55e-05  6.84e-01  
 10  +4.8360e-01  +5.9600e-01  1.12e-01  6.73e-06  2.61e-03  1.65e-03  2.09e-05  3.36e-01  
 11  +4.6776e-01  +5.0955e-01  4.18e-02  2.21e-06  8.58e-04  1.11e-04  7.43e-06  8.09e-01  
 12  +4.5700e-01  +4.6061e-01  3.61e-03  1.74e-07  6.75e-05  4.28e-06  6.28e-07  9.29e-01  
 13  +4.5596e-01  +4.5647e-01  5.05e-04  2.25e-08  8.72e-06  5.21e-07  8.81e-08  8.78e-01  
 14  +4.5576e-01  +4.5577e-01  7.38e-06  3.07e-10  1.19e-07  5.85e-09  1.29e-09  9.89e-01  
 15  +4.5576e-01  +4.5576e-01  7.38e-08  3.07e-12  1.19e-09  5.86e-11  1.29e-11  9.90e-01  
 16  +4.5576e-01  +4.5576e-01  7.80e-10  3.22e-14  1.25e-11  2.26e-12  4.47e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 477.3837ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:38 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:38 PM: Optimal value: 4.558e-01
(CVXPY) Oct 06 03:51:38 PM: Compilation took 1.748e-01 seconds
(CVXPY) Oct 06 03:51:38 PM: Solver (including time spent in interface) took 5.196e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4558
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:51:38 PM: Your problem has 25019 variables, 25000 constraints, and 0 parameters.
(CVXPY) Oct 06 03:51:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:51:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:51:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:51:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:51:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:51:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:51:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:51:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:51:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:51:38 PM: Finished problem compilation (took 1.633e-01 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 25019
  constraints   = 50019
  nnz(P)        = 0
  nnz(A)        = 223329
  cones (total) = 1
    : Nonnegative = 1,  numel = 50019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5004e+04  2.50e+04  9.93e-01  2.07e+02  1.00e+00  1.00e+00   ------   
  1  +6.0819e-01  +4.8435e+03  4.84e+03  3.42e-01  1.15e+02  4.10e-03  4.73e-01  6.67e-01  
  2  +5.5112e-01  +7.5340e+02  7.53e+02  1.44e-01  5.97e+01  8.22e-03  2.28e-01  7.24e-01  
  3  +5.1145e-01  +1.6803e+02  1.68e+02  1.31e-01  5.42e+01  1.85e-05  2.26e-01  5.83e-02  
  4  +5.0016e-01  +2.5710e+00  2.07e+00  6.20e-03  2.54e+00  1.62e-06  1.55e-01  9.88e-01  
  5  +5.0007e-01  +1.4328e+00  9.33e-01  2.80e-03  1.16e+00  4.81e-06  1.13e-01  4.60e-01  
  6  +5.0002e-01  +7.9760e-01  2.98e-01  8.92e-04  3.69e-01  4.45e-06  4.35e-02  7.26e-01  
  7  +5.0000e-01  +7.4002e-01  2.40e-01  6.98e-04  2.89e-01  1.25e-05  7.61e-03  9.41e-01  
  8  +4.9959e-01  +7.3555e-01  2.36e-01  8.90e-05  3.71e-02  3.44e-04  2.49e-04  9.69e-01  
  9  +4.9855e-01  +7.1015e-01  2.12e-01  2.74e-05  1.15e-02  8.63e-04  7.47e-05  8.19e-01  
 10  +4.9807e-01  +7.0615e-01  2.08e-01  2.09e-05  8.73e-03  1.04e-03  5.66e-05  2.94e-01  
 11  +4.9706e-01  +6.8285e-01  1.86e-01  1.16e-05  4.84e-03  9.39e-04  3.11e-05  8.04e-01  
 12  +4.9606e-01  +6.7725e-01  1.81e-01  1.00e-05  4.18e-03  9.23e-04  2.69e-05  2.27e-01  
 13  +4.9368e-01  +6.6592e-01  1.72e-01  7.95e-06  3.32e-03  8.90e-04  2.14e-05  3.23e-01  
 14  +4.8984e-01  +6.4661e-01  1.57e-01  7.18e-06  2.99e-03  4.54e-04  1.95e-05  4.23e-01  
 15  +4.8759e-01  +6.3712e-01  1.50e-01  6.82e-06  2.84e-03  3.00e-04  1.87e-05  2.78e-01  
 16  +4.7927e-01  +6.0435e-01  1.25e-01  5.41e-06  2.25e-03  3.10e-06  1.51e-05  8.34e-01  
 17  +4.6890e-01  +5.6683e-01  9.79e-02  3.76e-06  1.56e-03  2.42e-06  1.08e-05  3.17e-01  
 18  +4.6824e-01  +5.6464e-01  9.64e-02  3.70e-06  1.54e-03  2.16e-06  1.06e-05  1.59e-01  
 19  +4.5644e-01  +5.2360e-01  6.72e-02  2.38e-06  9.89e-04  1.44e-06  7.02e-06  3.57e-01  
 20  +4.3315e-01  +4.4413e-01  1.10e-02  3.48e-07  1.44e-04  7.68e-08  1.08e-06  9.90e-01  
 21  +4.2810e-01  +4.2823e-01  1.28e-04  4.03e-09  1.67e-06  9.01e-10  1.27e-08  9.90e-01  
 22  +4.2804e-01  +4.2804e-01  1.28e-06  4.03e-11  1.67e-08  9.01e-12  1.27e-10  9.90e-01  
 23  +4.2804e-01  +4.2804e-01  1.28e-08  4.03e-13  1.67e-10  9.27e-14  1.31e-12  9.90e-01  
 24  +4.2804e-01  +4.2804e-01  1.29e-10  4.06e-15  1.67e-12  9.53e-16  1.34e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 842.1578ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:51:39 PM: Problem status: optimal
(CVXPY) Oct 06 03:51:39 PM: Optimal value: 4.280e-01
(CVXPY) Oct 06 03:51:39 PM: Compilation took 1.633e-01 seconds
(CVXPY) Oct 06 03:51:39 PM: Solver (including time spent in interface) took 8.967e-01 seconds
FULL MODEL:
  Accruacy: 0.57206
  Our objective: 0.14412000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0) <-- (term's our objective: 0.14412)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 6.447302341461182
Best over terms:
  Our final objective: 0.14412000000000003
    Its accruacy: 0.57206
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14412000000000003
  Highest accruacy: 0.57206
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

