Command:
python test_script.py -s constant_subclass -d 10 -n 1000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.158
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 10.

Computed total variation: 0.714
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:26 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:26 PM: Finished problem compilation (took 4.695e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 6521
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9998e-01  +5.0093e+02  5.00e+02  9.56e-01  3.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7791e-01  +1.1024e+02  1.10e+02  4.26e-01  2.44e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2781e-01  +1.2195e+01  1.17e+01  1.49e-01  1.08e+01  1.81e-02  2.83e-01  9.76e-01  
  3  +5.0577e-01  +3.0726e+00  2.57e+00  5.45e-02  3.90e+00  4.82e-05  2.34e-01  5.58e-01  
  4  +5.0075e-01  +8.3005e-01  3.29e-01  7.44e-03  5.59e-01  1.23e-05  7.64e-02  7.81e-01  
  5  +4.9977e-01  +7.2052e-01  2.21e-01  4.07e-03  3.10e-01  2.39e-05  1.79e-02  8.38e-01  
  6  +4.9175e-01  +6.6775e-01  1.76e-01  6.20e-04  4.80e-02  1.52e-04  1.87e-03  8.99e-01  
  7  +4.8055e-01  +5.9221e-01  1.12e-01  3.41e-04  2.62e-02  7.46e-05  1.10e-03  5.42e-01  
  8  +4.6763e-01  +5.2815e-01  6.05e-02  1.48e-04  1.13e-02  3.58e-05  5.25e-04  6.27e-01  
  9  +4.5493e-01  +4.6945e-01  1.45e-02  3.13e-05  2.39e-03  4.62e-06  1.26e-04  9.76e-01  
 10  +4.5024e-01  +4.5066e-01  4.21e-04  8.53e-07  6.52e-05  1.26e-07  3.66e-06  9.80e-01  
 11  +4.5010e-01  +4.5011e-01  4.22e-06  8.53e-09  6.52e-07  1.26e-09  3.67e-08  9.90e-01  
 12  +4.5010e-01  +4.5010e-01  4.22e-08  8.53e-11  6.52e-09  1.26e-11  3.67e-10  9.90e-01  
 13  +4.5010e-01  +4.5010e-01  4.22e-10  8.53e-13  6.52e-11  1.26e-13  3.68e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.3709ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:26 PM: Optimal value: 4.501e-01
(CVXPY) Oct 06 04:24:26 PM: Compilation took 4.695e-02 seconds
(CVXPY) Oct 06 04:24:26 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4501
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:26 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:26 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 7589
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9981e-01  +5.0108e+02  5.01e+02  9.57e-01  3.88e+01  1.00e+00  1.01e+00   ------   
  1  +5.7686e-01  +1.1040e+02  1.10e+02  4.29e-01  2.52e+01  3.75e-03  5.92e-01  5.75e-01  
  2  +5.2633e-01  +1.2022e+01  1.15e+01  1.48e-01  1.10e+01  1.85e-02  2.82e-01  9.90e-01  
  3  +5.0560e-01  +2.9643e+00  2.46e+00  5.37e-02  4.00e+00  5.27e-05  2.12e-01  6.61e-01  
  4  +5.0104e-01  +1.0410e+00  5.40e-01  1.25e-02  9.65e-01  1.93e-05  8.89e-02  6.53e-01  
  5  +4.9871e-01  +8.0032e-01  3.02e-01  4.48e-03  3.58e-01  4.23e-05  1.49e-02  9.33e-01  
  6  +4.8995e-01  +7.3008e-01  2.40e-01  1.14e-03  9.23e-02  1.30e-04  3.23e-03  7.90e-01  
  7  +4.8645e-01  +7.1376e-01  2.27e-01  8.82e-04  7.13e-02  1.37e-04  2.50e-03  2.96e-01  
  8  +4.8229e-01  +6.9221e-01  2.10e-01  6.92e-04  5.58e-02  1.32e-04  1.96e-03  3.17e-01  
  9  +4.8215e-01  +6.9147e-01  2.09e-01  6.80e-04  5.48e-02  1.23e-04  1.92e-03  1.61e-01  
 10  +4.7243e-01  +6.4475e-01  1.72e-01  4.10e-04  3.30e-02  1.26e-04  1.17e-03  4.35e-01  
 11  +4.6514e-01  +6.1660e-01  1.51e-01  3.14e-04  2.53e-02  1.16e-04  8.99e-04  2.97e-01  
 12  +4.4369e-01  +5.2422e-01  8.05e-02  1.54e-04  1.24e-02  3.57e-05  4.59e-04  9.53e-01  
 13  +4.2396e-01  +4.4914e-01  2.52e-02  4.41e-05  3.54e-03  1.07e-05  1.37e-04  7.45e-01  
 14  +4.1584e-01  +4.1964e-01  3.80e-03  6.42e-06  5.18e-04  2.29e-06  2.01e-05  9.32e-01  
 15  +4.1431e-01  +4.1446e-01  1.50e-04  2.52e-07  2.03e-05  9.43e-08  7.91e-07  9.69e-01  
 16  +4.1425e-01  +4.1425e-01  1.50e-06  2.52e-09  2.04e-07  9.44e-10  7.93e-09  9.90e-01  
 17  +4.1425e-01  +4.1425e-01  1.50e-08  2.52e-11  2.04e-09  9.45e-12  7.93e-11  9.90e-01  
 18  +4.1425e-01  +4.1425e-01  1.50e-10  2.52e-13  2.04e-11  9.45e-14  7.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.7042ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:26 PM: Optimal value: 4.143e-01
(CVXPY) Oct 06 04:24:26 PM: Compilation took 1.571e-02 seconds
(CVXPY) Oct 06 04:24:26 PM: Solver (including time spent in interface) took 1.661e-02 seconds
Iteration: 2, Objective: 0.4143
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:27 PM: Your problem has 541 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 1041
  nnz(P)        = 0
  nnz(A)        = 8027
  cones (total) = 1
    : Nonnegative = 1,  numel = 1041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0124e+02  5.01e+02  9.57e-01  3.89e+01  1.00e+00  1.01e+00   ------   
  1  +5.7582e-01  +1.1042e+02  1.10e+02  4.31e-01  2.51e+01  3.75e-03  5.93e-01  5.75e-01  
  2  +5.2539e-01  +1.2161e+01  1.16e+01  1.48e-01  1.09e+01  1.87e-02  2.82e-01  9.90e-01  
  3  +5.0585e-01  +2.6096e+00  2.10e+00  4.85e-02  3.69e+00  5.81e-05  1.65e-01  8.13e-01  
  4  +5.0065e-01  +1.0606e+00  5.60e-01  1.32e-02  1.02e+00  3.62e-05  6.29e-02  6.92e-01  
  5  +4.9303e-01  +1.0900e+00  5.97e-01  3.84e-03  3.14e-01  1.79e-04  1.03e-02  9.05e-01  
  6  +4.7403e-01  +8.4134e-01  3.67e-01  1.21e-03  9.86e-02  2.22e-04  3.30e-03  7.21e-01  
  7  +4.6239e-01  +7.7825e-01  3.16e-01  7.80e-04  6.34e-02  2.13e-04  2.14e-03  5.18e-01  
  8  +4.4912e-01  +7.0329e-01  2.54e-01  5.44e-04  4.40e-02  1.73e-04  1.53e-03  3.84e-01  
  9  +4.2137e-01  +5.3602e-01  1.15e-01  2.38e-04  1.92e-02  5.22e-05  7.25e-04  8.12e-01  
 10  +4.1008e-01  +4.7818e-01  6.81e-02  1.36e-04  1.09e-02  4.19e-05  4.22e-04  9.90e-01  
 11  +3.9331e-01  +4.0879e-01  1.55e-02  2.97e-05  2.39e-03  9.01e-06  9.69e-05  8.61e-01  
 12  +3.9006e-01  +3.9596e-01  5.90e-03  1.12e-05  9.01e-04  3.51e-06  3.69e-05  6.77e-01  
 13  +3.8857e-01  +3.9018e-01  1.60e-03  2.99e-06  2.42e-04  1.05e-06  9.83e-06  8.84e-01  
 14  +3.8797e-01  +3.8804e-01  6.37e-05  1.18e-07  9.60e-06  4.22e-08  3.89e-07  9.63e-01  
 15  +3.8795e-01  +3.8795e-01  6.38e-07  1.19e-09  9.62e-08  4.23e-10  3.90e-09  9.90e-01  
 16  +3.8795e-01  +3.8795e-01  6.38e-09  1.19e-11  9.62e-10  4.23e-12  3.90e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.5436ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:27 PM: Optimal value: 3.880e-01
(CVXPY) Oct 06 04:24:27 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:24:27 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 3, Objective: 0.3880
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:27 PM: Your problem has 551 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Finished problem compilation (took 8.311e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 1051
  nnz(P)        = 0
  nnz(A)        = 8340
  cones (total) = 1
    : Nonnegative = 1,  numel = 1051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0146e+02  5.01e+02  9.57e-01  3.89e+01  1.00e+00  1.01e+00   ------   
  1  +5.7466e-01  +1.1048e+02  1.10e+02  4.32e-01  2.50e+01  3.75e-03  5.93e-01  5.75e-01  
  2  +5.2458e-01  +1.2264e+01  1.17e+01  1.48e-01  1.09e+01  1.89e-02  2.81e-01  9.90e-01  
  3  +5.0617e-01  +2.3416e+00  1.84e+00  4.26e-02  3.30e+00  6.28e-05  1.33e-01  8.80e-01  
  4  +5.0022e-01  +1.0566e+00  5.56e-01  1.12e-02  8.87e-01  7.68e-05  3.80e-02  8.01e-01  
  5  +4.8832e-01  +1.0049e+00  5.17e-01  2.30e-03  1.90e-01  3.77e-04  5.98e-03  8.60e-01  
  6  +4.6923e-01  +8.4948e-01  3.80e-01  1.15e-03  9.39e-02  3.30e-04  3.12e-03  5.90e-01  
  7  +4.4651e-01  +7.2354e-01  2.77e-01  6.70e-04  5.42e-02  2.32e-04  1.89e-03  5.33e-01  
  8  +4.2468e-01  +6.1235e-01  1.88e-01  4.37e-04  3.52e-02  1.12e-04  1.31e-03  5.71e-01  
  9  +4.0235e-01  +5.0614e-01  1.04e-01  2.27e-04  1.81e-02  5.09e-05  7.15e-04  9.90e-01  
 10  +3.8208e-01  +4.1146e-01  2.94e-02  6.10e-05  4.88e-03  1.43e-05  2.04e-04  7.71e-01  
 11  +3.7600e-01  +3.8410e-01  8.10e-03  1.67e-05  1.33e-03  4.12e-06  5.67e-05  7.82e-01  
 12  +3.7480e-01  +3.7876e-01  3.96e-03  8.12e-06  6.51e-04  2.16e-06  2.77e-05  7.24e-01  
 13  +3.7421e-01  +3.7610e-01  1.89e-03  3.88e-06  3.11e-04  1.11e-06  1.33e-05  9.90e-01  
 14  +3.7363e-01  +3.7381e-01  1.89e-04  3.88e-07  3.11e-05  1.11e-07  1.33e-06  9.05e-01  
 15  +3.7356e-01  +3.7356e-01  2.05e-06  4.21e-09  3.38e-07  1.20e-09  1.45e-08  9.89e-01  
 16  +3.7356e-01  +3.7356e-01  2.05e-08  4.21e-11  3.38e-09  1.20e-11  1.45e-10  9.90e-01  
 17  +3.7356e-01  +3.7356e-01  2.05e-10  4.21e-13  3.38e-11  1.20e-13  1.45e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.5068ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:27 PM: Optimal value: 3.736e-01
(CVXPY) Oct 06 04:24:27 PM: Compilation took 8.311e-03 seconds
(CVXPY) Oct 06 04:24:27 PM: Solver (including time spent in interface) took 2.231e-02 seconds
Iteration: 4, Objective: 0.3736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:27 PM: Your problem has 561 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 1061
  nnz(P)        = 0
  nnz(A)        = 8582
  cones (total) = 1
    : Nonnegative = 1,  numel = 1061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0143e+02  5.01e+02  9.57e-01  3.88e+01  1.00e+00  1.01e+00   ------   
  1  +5.7343e-01  +1.1050e+02  1.10e+02  4.33e-01  2.48e+01  3.75e-03  5.93e-01  5.75e-01  
  2  +5.2375e-01  +1.2391e+01  1.19e+01  1.48e-01  1.08e+01  1.91e-02  2.81e-01  9.90e-01  
  3  +5.0682e-01  +2.3352e+00  1.83e+00  4.08e-02  3.19e+00  4.85e-04  1.16e-01  8.59e-01  
  4  +5.0526e-01  +2.1070e+00  1.60e+00  2.43e-02  1.96e+00  1.02e-03  6.26e-02  5.58e-01  
  5  +5.0159e-01  +1.8606e+00  1.36e+00  1.55e-02  1.25e+00  5.38e-04  4.13e-02  7.60e-01  
  6  +4.9010e-01  +1.4655e+00  9.75e-01  3.44e-03  2.85e-01  1.35e-03  8.49e-03  7.98e-01  
  7  +4.7570e-01  +1.2081e+00  7.32e-01  2.25e-03  1.84e-01  8.77e-04  5.78e-03  4.48e-01  
  8  +4.6315e-01  +1.0433e+00  5.80e-01  1.52e-03  1.24e-01  5.98e-04  4.02e-03  4.80e-01  
  9  +4.4991e-01  +8.8296e-01  4.33e-01  1.15e-03  9.34e-02  2.64e-04  3.16e-03  5.49e-01  
 10  +4.1005e-01  +5.9746e-01  1.87e-01  4.26e-04  3.42e-02  9.00e-05  1.28e-03  7.10e-01  
 11  +3.9495e-01  +5.2084e-01  1.26e-01  2.75e-04  2.20e-02  6.63e-05  8.58e-04  6.71e-01  
 12  +3.7409e-01  +4.1434e-01  4.02e-02  8.68e-05  6.95e-03  1.98e-05  2.90e-04  6.81e-01  
 13  +3.6756e-01  +3.8183e-01  1.43e-02  3.05e-05  2.45e-03  7.40e-06  1.04e-04  7.43e-01  
 14  +3.6521e-01  +3.7087e-01  5.66e-03  1.20e-05  9.68e-04  3.02e-06  4.16e-05  6.95e-01  
 15  +3.6422e-01  +3.6652e-01  2.30e-03  4.88e-06  3.93e-04  1.24e-06  1.69e-05  6.31e-01  
 16  +3.6361e-01  +3.6392e-01  3.08e-04  6.51e-07  5.25e-05  1.67e-07  2.26e-06  8.98e-01  
 17  +3.6352e-01  +3.6352e-01  3.53e-06  7.46e-09  6.01e-07  1.92e-09  2.60e-08  9.89e-01  
 18  +3.6352e-01  +3.6352e-01  3.53e-08  7.46e-11  6.01e-09  1.92e-11  2.60e-10  9.90e-01  
 19  +3.6352e-01  +3.6352e-01  3.53e-10  7.46e-13  6.01e-11  1.92e-13  2.60e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.57ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:27 PM: Optimal value: 3.635e-01
(CVXPY) Oct 06 04:24:27 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:24:27 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 5, Objective: 0.3635
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:27 PM: Your problem has 571 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 571
  constraints   = 1071
  nnz(P)        = 0
  nnz(A)        = 8840
  cones (total) = 1
    : Nonnegative = 1,  numel = 1071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9955e-01  +5.0176e+02  5.01e+02  9.57e-01  3.87e+01  1.00e+00  1.01e+00   ------   
  1  +5.7160e-01  +1.1054e+02  1.10e+02  4.34e-01  2.47e+01  3.76e-03  5.93e-01  5.75e-01  
  2  +5.2250e-01  +1.2583e+01  1.21e+01  1.48e-01  1.07e+01  1.93e-02  2.79e-01  9.90e-01  
  3  +5.0938e-01  +3.7637e+00  3.25e+00  6.10e-02  4.74e+00  3.60e-03  1.48e-01  6.01e-01  
  4  +4.9943e-01  +1.6474e+00  1.15e+00  1.84e-02  1.48e+00  4.52e-03  5.13e-02  9.90e-01  
  5  +4.8958e-01  +1.6299e+00  1.14e+00  6.87e-03  5.67e-01  9.95e-03  1.73e-02  7.52e-01  
  6  +4.6883e-01  +1.3975e+00  9.29e-01  2.86e-03  2.36e-01  1.39e-02  7.17e-03  6.61e-01  
  7  +4.4977e-01  +1.1111e+00  6.61e-01  1.81e-03  1.48e-01  7.18e-03  4.73e-03  4.89e-01  
  8  +4.3386e-01  +9.4944e-01  5.16e-01  1.36e-03  1.11e-01  3.94e-03  3.70e-03  3.75e-01  
  9  +4.1118e-01  +7.6486e-01  3.54e-01  8.93e-04  7.20e-02  1.74e-03  2.57e-03  4.82e-01  
 10  +3.7559e-01  +5.1962e-01  1.44e-01  3.48e-04  2.79e-02  3.92e-04  1.11e-03  6.82e-01  
 11  +3.6005e-01  +4.3199e-01  7.19e-02  1.71e-04  1.37e-02  1.72e-04  5.70e-04  5.52e-01  
 12  +3.4975e-01  +3.7614e-01  2.64e-02  6.07e-05  4.90e-03  3.99e-05  2.10e-04  8.24e-01  
 13  +3.4584e-01  +3.5703e-01  1.12e-02  2.54e-05  2.05e-03  1.20e-05  8.96e-05  7.70e-01  
 14  +3.4394e-01  +3.4834e-01  4.40e-03  9.83e-06  7.93e-04  3.80e-06  3.57e-05  7.52e-01  
 15  +3.4301e-01  +3.4460e-01  1.59e-03  3.37e-06  2.71e-04  8.24e-07  1.30e-05  9.90e-01  
 16  +3.4249e-01  +3.4259e-01  1.02e-04  2.11e-07  1.70e-05  5.12e-08  8.40e-07  9.44e-01  
 17  +3.4245e-01  +3.4245e-01  1.04e-06  2.14e-09  1.72e-07  5.19e-10  8.54e-09  9.90e-01  
 18  +3.4245e-01  +3.4245e-01  1.04e-08  2.14e-11  1.72e-09  5.19e-12  8.54e-11  9.90e-01  
 19  +3.4245e-01  +3.4245e-01  1.04e-10  2.14e-13  1.72e-11  5.25e-14  8.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.3429ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:27 PM: Optimal value: 3.425e-01
(CVXPY) Oct 06 04:24:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:27 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 6, Objective: 0.3425
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:27 PM: Your problem has 581 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:27 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 581
  constraints   = 1081
  nnz(P)        = 0
  nnz(A)        = 9066
  cones (total) = 1
    : Nonnegative = 1,  numel = 1081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0176e+02  5.01e+02  9.58e-01  3.86e+01  1.00e+00  1.01e+00   ------   
  1  +5.6976e-01  +1.1054e+02  1.10e+02  4.34e-01  2.45e+01  3.76e-03  5.92e-01  5.76e-01  
  2  +5.2149e-01  +1.2730e+01  1.22e+01  1.47e-01  1.06e+01  1.95e-02  2.77e-01  9.90e-01  
  3  +5.0959e-01  +3.9919e+00  3.48e+00  6.09e-02  4.74e+00  4.29e-03  1.43e-01  5.75e-01  
  4  +4.9909e-01  +1.7572e+00  1.26e+00  1.71e-02  1.39e+00  5.04e-03  4.47e-02  9.90e-01  
  5  +4.8948e-01  +1.8374e+00  1.35e+00  7.70e-03  6.37e-01  8.59e-03  1.88e-02  7.78e-01  
  6  +4.6829e-01  +1.5186e+00  1.05e+00  3.26e-03  2.70e-01  1.13e-02  7.98e-03  6.23e-01  
  7  +4.5140e-01  +1.2940e+00  8.43e-01  2.26e-03  1.86e-01  7.79e-03  5.72e-03  4.01e-01  
  8  +4.3420e-01  +1.1125e+00  6.78e-01  1.69e-03  1.38e-01  5.30e-03  4.43e-03  3.16e-01  
  9  +3.9717e-01  +7.3522e-01  3.38e-01  8.62e-04  6.91e-02  2.43e-04  2.50e-03  7.54e-01  
 10  +3.5728e-01  +4.8378e-01  1.26e-01  3.04e-04  2.42e-02  6.52e-05  9.84e-04  7.39e-01  
 11  +3.3724e-01  +3.8068e-01  4.34e-02  1.02e-04  8.15e-03  2.20e-05  3.52e-04  7.16e-01  
 12  +3.3165e-01  +3.5348e-01  2.18e-02  5.00e-05  4.04e-03  1.14e-05  1.76e-04  6.84e-01  
 13  +3.2742e-01  +3.3432e-01  6.90e-03  1.56e-05  1.27e-03  3.56e-06  5.61e-05  7.63e-01  
 14  +3.2558e-01  +3.2620e-01  6.23e-04  1.41e-06  1.14e-04  3.11e-07  5.13e-06  9.68e-01  
 15  +3.2539e-01  +3.2540e-01  1.12e-05  2.53e-08  2.05e-06  5.58e-09  9.24e-08  9.82e-01  
 16  +3.2538e-01  +3.2538e-01  1.12e-07  2.53e-10  2.05e-08  5.58e-11  9.24e-10  9.90e-01  
 17  +3.2538e-01  +3.2538e-01  1.12e-09  2.53e-12  2.05e-10  5.58e-13  9.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.5188ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:27 PM: Optimal value: 3.254e-01
(CVXPY) Oct 06 04:24:27 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:27 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 7, Objective: 0.3254
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:28 PM: Your problem has 591 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 591
  constraints   = 1091
  nnz(P)        = 0
  nnz(A)        = 9268
  cones (total) = 1
    : Nonnegative = 1,  numel = 1091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0190e+02  5.01e+02  9.58e-01  3.85e+01  1.00e+00  1.01e+00   ------   
  1  +5.6838e-01  +1.1060e+02  1.10e+02  4.35e-01  2.44e+01  3.76e-03  5.92e-01  5.76e-01  
  2  +5.2055e-01  +1.2831e+01  1.23e+01  1.47e-01  1.05e+01  1.97e-02  2.77e-01  9.90e-01  
  3  +5.0933e-01  +3.9757e+00  3.47e+00  5.81e-02  4.54e+00  4.48e-03  1.35e-01  5.80e-01  
  4  +5.0356e-01  +2.7659e+00  2.26e+00  3.03e-02  2.44e+00  4.95e-03  7.35e-02  5.89e-01  
  5  +4.9688e-01  +2.6942e+00  2.20e+00  1.52e-02  1.25e+00  4.42e-03  3.59e-02  8.81e-01  
  6  +4.7755e-01  +2.0727e+00  1.60e+00  5.32e-03  4.43e-01  6.45e-03  1.26e-02  6.52e-01  
  7  +4.5674e-01  +1.7018e+00  1.25e+00  3.25e-03  2.68e-01  4.84e-03  7.93e-03  4.90e-01  
  8  +4.3700e-01  +1.3624e+00  9.25e-01  2.26e-03  1.85e-01  2.76e-03  5.74e-03  4.02e-01  
  9  +3.9999e-01  +8.2732e-01  4.27e-01  1.11e-03  8.93e-02  2.34e-05  3.14e-03  8.10e-01  
 10  +3.4918e-01  +4.7138e-01  1.22e-01  2.99e-04  2.37e-02  1.75e-05  9.62e-04  7.60e-01  
 11  +3.3254e-01  +3.8996e-01  5.74e-02  1.37e-04  1.09e-02  1.29e-05  4.61e-04  6.21e-01  
 12  +3.2574e-01  +3.5735e-01  3.16e-02  7.29e-05  5.90e-03  9.68e-06  2.51e-04  5.95e-01  
 13  +3.2145e-01  +3.3820e-01  1.67e-02  3.77e-05  3.08e-03  5.65e-06  1.32e-04  5.42e-01  
 14  +3.1801e-01  +3.2325e-01  5.24e-03  1.16e-05  9.53e-04  2.09e-06  4.11e-05  7.90e-01  
 15  +3.1658e-01  +3.1734e-01  7.58e-04  1.66e-06  1.37e-04  3.27e-07  5.95e-06  8.95e-01  
 16  +3.1634e-01  +3.1635e-01  1.34e-05  2.94e-08  2.43e-06  5.86e-09  1.06e-07  9.84e-01  
 17  +3.1633e-01  +3.1633e-01  1.34e-07  2.94e-10  2.43e-08  5.87e-11  1.06e-09  9.90e-01  
 18  +3.1633e-01  +3.1633e-01  1.35e-09  2.95e-12  2.44e-10  5.88e-13  1.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.685ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:28 PM: Optimal value: 3.163e-01
(CVXPY) Oct 06 04:24:28 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:28 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 8, Objective: 0.3163
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:28 PM: Your problem has 601 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Finished problem compilation (took 1.575e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 601
  constraints   = 1101
  nnz(P)        = 0
  nnz(A)        = 9444
  cones (total) = 1
    : Nonnegative = 1,  numel = 1101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0207e+02  5.02e+02  9.58e-01  3.83e+01  1.00e+00  1.01e+00   ------   
  1  +5.6665e-01  +1.1067e+02  1.10e+02  4.36e-01  2.42e+01  3.77e-03  5.92e-01  5.76e-01  
  2  +5.1926e-01  +1.2987e+01  1.25e+01  1.47e-01  1.05e+01  1.99e-02  2.76e-01  9.90e-01  
  3  +5.0851e-01  +3.7592e+00  3.25e+00  5.18e-02  4.08e+00  4.42e-03  1.20e-01  6.10e-01  
  4  +5.0639e-01  +3.3519e+00  2.85e+00  3.84e-02  3.08e+00  4.80e-03  8.91e-02  2.72e-01  
  5  +5.0167e-01  +3.0447e+00  2.54e+00  2.96e-02  2.36e+00  2.82e-03  7.33e-02  5.07e-01  
  6  +4.8182e-01  +1.8861e+00  1.40e+00  5.31e-03  4.45e-01  5.96e-03  1.24e-02  8.41e-01  
  7  +4.6205e-01  +1.6259e+00  1.16e+00  3.43e-03  2.84e-01  4.86e-03  8.24e-03  4.43e-01  
  8  +4.4068e-01  +1.2924e+00  8.52e-01  2.33e-03  1.91e-01  1.74e-03  5.87e-03  5.78e-01  
  9  +4.1169e-01  +9.5409e-01  5.42e-01  1.58e-03  1.27e-01  2.46e-04  4.30e-03  6.78e-01  
 10  +3.6126e-01  +5.8304e-01  2.22e-01  5.57e-04  4.42e-02  8.89e-05  1.70e-03  7.15e-01  
 11  +3.3597e-01  +4.4373e-01  1.08e-01  2.62e-04  2.09e-02  4.44e-05  8.59e-04  5.74e-01  
 12  +3.2283e-01  +3.7878e-01  5.59e-02  1.31e-04  1.05e-02  2.48e-05  4.46e-04  5.78e-01  
 13  +3.1619e-01  +3.4738e-01  3.12e-02  7.07e-05  5.74e-03  1.48e-05  2.47e-04  6.31e-01  
 14  +3.1071e-01  +3.2290e-01  1.22e-02  2.71e-05  2.21e-03  6.05e-06  9.71e-05  7.64e-01  
 15  +3.0740e-01  +3.0907e-01  1.66e-03  3.66e-06  3.00e-04  8.09e-07  1.34e-05  8.82e-01  
 16  +3.0700e-01  +3.0739e-01  3.96e-04  8.68e-07  7.09e-05  1.93e-07  3.24e-06  8.41e-01  
 17  +3.0688e-01  +3.0694e-01  6.67e-05  1.43e-07  1.17e-05  3.22e-08  5.52e-07  8.85e-01  
 18  +3.0685e-01  +3.0685e-01  9.92e-07  2.12e-09  1.73e-07  4.78e-10  8.24e-09  9.90e-01  
 19  +3.0685e-01  +3.0685e-01  9.96e-09  2.13e-11  1.74e-09  4.80e-12  8.27e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.9312ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:28 PM: Optimal value: 3.069e-01
(CVXPY) Oct 06 04:24:28 PM: Compilation took 1.575e-02 seconds
(CVXPY) Oct 06 04:24:28 PM: Solver (including time spent in interface) took 3.112e-02 seconds
Iteration: 9, Objective: 0.3069
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:28 PM: Your problem has 611 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 611
  constraints   = 1111
  nnz(P)        = 0
  nnz(A)        = 9624
  cones (total) = 1
    : Nonnegative = 1,  numel = 1111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0200e+02  5.02e+02  9.58e-01  3.82e+01  1.00e+00  1.01e+00   ------   
  1  +5.6535e-01  +1.1067e+02  1.10e+02  4.37e-01  2.41e+01  3.77e-03  5.91e-01  5.76e-01  
  2  +5.1844e-01  +1.3093e+01  1.26e+01  1.46e-01  1.03e+01  2.01e-02  2.74e-01  9.90e-01  
  3  +5.0777e-01  +3.5350e+00  3.03e+00  4.67e-02  3.68e+00  4.26e-03  1.08e-01  6.41e-01  
  4  +5.0663e-01  +3.3814e+00  2.87e+00  3.81e-02  3.05e+00  4.68e-03  8.74e-02  2.00e-01  
  5  +5.0207e-01  +3.1770e+00  2.67e+00  3.11e-02  2.47e+00  2.98e-03  7.56e-02  4.44e-01  
  6  +4.8143e-01  +2.0116e+00  1.53e+00  5.61e-03  4.71e-01  6.56e-03  1.29e-02  8.40e-01  
  7  +4.5646e-01  +1.6603e+00  1.20e+00  3.35e-03  2.79e-01  5.36e-03  7.95e-03  4.69e-01  
  8  +4.3723e-01  +1.3743e+00  9.37e-01  2.58e-03  2.12e-01  2.46e-03  6.36e-03  4.28e-01  
  9  +3.7937e-01  +7.5491e-01  3.76e-01  9.78e-04  7.82e-02  2.30e-05  2.73e-03  8.31e-01  
 10  +3.3784e-01  +4.9568e-01  1.58e-01  4.06e-04  3.21e-02  2.03e-05  1.28e-03  6.02e-01  
 11  +3.1628e-01  +3.8347e-01  6.72e-02  1.66e-04  1.33e-02  1.55e-05  5.61e-04  6.77e-01  
 12  +3.0863e-01  +3.4678e-01  3.82e-02  8.91e-05  7.22e-03  1.60e-05  3.12e-04  8.19e-01  
 13  +3.0049e-01  +3.1090e-01  1.04e-02  2.34e-05  1.92e-03  4.57e-06  8.65e-05  7.80e-01  
 14  +2.9761e-01  +2.9902e-01  1.41e-03  3.10e-06  2.54e-04  6.32e-07  1.20e-05  9.31e-01  
 15  +2.9718e-01  +2.9741e-01  2.25e-04  4.92e-07  4.02e-05  9.97e-08  1.95e-06  8.63e-01  
 16  +2.9710e-01  +2.9710e-01  3.41e-06  7.45e-09  6.08e-07  1.44e-09  2.98e-08  9.87e-01  
 17  +2.9710e-01  +2.9710e-01  3.42e-08  7.45e-11  6.08e-09  1.44e-11  2.98e-10  9.90e-01  
 18  +2.9710e-01  +2.9710e-01  3.42e-10  7.45e-13  6.08e-11  1.46e-13  3.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.155ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:28 PM: Optimal value: 2.971e-01
(CVXPY) Oct 06 04:24:28 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:28 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 10, Objective: 0.2971
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:28 PM: Your problem has 621 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 621
  constraints   = 1121
  nnz(P)        = 0
  nnz(A)        = 9783
  cones (total) = 1
    : Nonnegative = 1,  numel = 1121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0209e+02  5.02e+02  9.58e-01  3.81e+01  1.00e+00  1.01e+00   ------   
  1  +5.6393e-01  +1.1070e+02  1.10e+02  4.37e-01  2.39e+01  3.78e-03  5.90e-01  5.76e-01  
  2  +5.1760e-01  +1.3180e+01  1.27e+01  1.46e-01  1.02e+01  2.02e-02  2.73e-01  9.90e-01  
  3  +5.0690e-01  +3.2484e+00  2.74e+00  4.10e-02  3.24e+00  3.98e-03  9.51e-02  6.84e-01  
  4  +5.0623e-01  +3.2341e+00  2.73e+00  3.52e-02  2.82e+00  4.40e-03  8.07e-02  1.75e-01  
  5  +5.0161e-01  +3.3299e+00  2.83e+00  2.84e-02  2.28e+00  3.39e-03  6.64e-02  5.26e-01  
  6  +4.8179e-01  +2.3356e+00  1.85e+00  6.78e-03  5.68e-01  6.47e-03  1.54e-02  7.76e-01  
  7  +4.5961e-01  +1.8939e+00  1.43e+00  4.33e-03  3.59e-01  4.75e-03  1.02e-02  4.29e-01  
  8  +4.3851e-01  +1.6173e+00  1.18e+00  3.03e-03  2.50e-01  3.60e-03  7.35e-03  3.79e-01  
  9  +4.0416e-01  +1.0494e+00  6.45e-01  1.87e-03  1.50e-01  2.92e-05  4.97e-03  7.35e-01  
 10  +3.4573e-01  +5.6125e-01  2.16e-01  5.60e-04  4.41e-02  3.40e-05  1.71e-03  7.46e-01  
 11  +3.1860e-01  +4.1908e-01  1.00e-01  2.51e-04  1.99e-02  2.49e-05  8.33e-04  6.29e-01  
 12  +3.0538e-01  +3.5368e-01  4.83e-02  1.16e-04  9.28e-03  1.43e-05  4.02e-04  5.96e-01  
 13  +2.9798e-01  +3.1861e-01  2.06e-02  4.82e-05  3.90e-03  7.59e-06  1.73e-04  7.19e-01  
 14  +2.9368e-01  +2.9964e-01  5.96e-03  1.36e-05  1.11e-03  2.29e-06  5.06e-05  7.50e-01  
 15  +2.9220e-01  +2.9325e-01  1.04e-03  2.37e-06  1.93e-04  4.75e-07  8.91e-06  9.53e-01  
 16  +2.9185e-01  +2.9187e-01  1.36e-05  3.08e-08  2.52e-06  6.24e-09  1.16e-07  9.90e-01  
 17  +2.9185e-01  +2.9185e-01  1.36e-07  3.08e-10  2.52e-08  6.24e-11  1.16e-09  9.90e-01  
 18  +2.9185e-01  +2.9185e-01  1.36e-09  3.08e-12  2.52e-10  6.25e-13  1.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.9623ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:28 PM: Optimal value: 2.919e-01
(CVXPY) Oct 06 04:24:28 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:28 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 11, Objective: 0.2919
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:28 PM: Your problem has 631 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:28 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 631
  constraints   = 1131
  nnz(P)        = 0
  nnz(A)        = 9965
  cones (total) = 1
    : Nonnegative = 1,  numel = 1131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0208e+02  5.02e+02  9.59e-01  3.80e+01  1.00e+00  1.01e+00   ------   
  1  +5.6195e-01  +1.1070e+02  1.10e+02  4.38e-01  2.37e+01  3.78e-03  5.90e-01  5.76e-01  
  2  +5.1632e-01  +1.3346e+01  1.28e+01  1.45e-01  1.01e+01  2.04e-02  2.71e-01  9.90e-01  
  3  +5.0538e-01  +2.7495e+00  2.24e+00  3.20e-02  2.56e+00  3.49e-03  7.45e-02  7.55e-01  
  4  +5.0491e-01  +2.9128e+00  2.41e+00  2.85e-02  2.30e+00  3.92e-03  6.49e-02  2.28e-01  
  5  +4.9671e-01  +3.4233e+00  2.93e+00  1.75e-02  1.44e+00  5.02e-03  3.89e-02  7.26e-01  
  6  +4.7366e-01  +2.4792e+00  2.01e+00  6.68e-03  5.59e-01  5.81e-03  1.51e-02  6.22e-01  
  7  +4.4706e-01  +1.9655e+00  1.52e+00  4.17e-03  3.45e-01  3.95e-03  9.81e-03  4.86e-01  
  8  +4.2610e-01  +1.6576e+00  1.23e+00  3.07e-03  2.52e-01  2.92e-03  7.43e-03  3.19e-01  
  9  +3.8063e-01  +9.0759e-01  5.27e-01  1.46e-03  1.17e-01  2.33e-05  4.00e-03  7.97e-01  
 10  +3.2884e-01  +5.0625e-01  1.77e-01  4.68e-04  3.69e-02  1.81e-05  1.46e-03  6.86e-01  
 11  +3.1252e-01  +4.3194e-01  1.19e-01  2.97e-04  2.38e-02  3.29e-05  9.54e-04  6.21e-01  
 12  +2.9642e-01  +3.5017e-01  5.38e-02  1.28e-04  1.04e-02  1.62e-05  4.37e-04  5.85e-01  
 13  +2.9275e-01  +3.3287e-01  4.01e-02  9.41e-05  7.71e-03  1.29e-05  3.25e-04  3.25e-01  
 14  +2.8684e-01  +3.0523e-01  1.84e-02  4.19e-05  3.47e-03  7.02e-06  1.50e-04  6.78e-01  
 15  +2.8503e-01  +2.9769e-01  1.27e-02  2.81e-05  2.35e-03  5.30e-06  1.02e-04  5.08e-01  
 16  +2.8143e-01  +2.8347e-01  2.04e-03  4.34e-06  3.69e-04  8.77e-07  1.66e-05  8.60e-01  
 17  +2.8072e-01  +2.8076e-01  4.23e-05  8.94e-08  7.60e-06  1.80e-08  3.46e-07  9.85e-01  
 18  +2.8070e-01  +2.8070e-01  4.24e-07  8.95e-10  7.62e-08  1.80e-10  3.47e-09  9.90e-01  
 19  +2.8070e-01  +2.8070e-01  4.24e-09  8.95e-12  7.62e-10  1.80e-12  3.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.8007ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:28 PM: Optimal value: 2.807e-01
(CVXPY) Oct 06 04:24:28 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:24:28 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 12, Objective: 0.2807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:29 PM: Your problem has 641 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:29 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 641
  constraints   = 1141
  nnz(P)        = 0
  nnz(A)        = 10062
  cones (total) = 1
    : Nonnegative = 1,  numel = 1141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0232e+02  5.02e+02  9.59e-01  3.78e+01  1.00e+00  1.01e+00   ------   
  1  +5.5931e-01  +1.1081e+02  1.10e+02  4.38e-01  2.36e+01  3.78e-03  5.90e-01  5.76e-01  
  2  +5.1522e-01  +1.3572e+01  1.31e+01  1.44e-01  1.00e+01  2.07e-02  2.69e-01  9.90e-01  
  3  +5.0437e-01  +2.6604e+00  2.16e+00  2.91e-02  2.33e+00  3.63e-03  6.73e-02  7.77e-01  
  4  +4.9373e-01  +3.1495e+00  2.66e+00  1.41e-02  1.18e+00  6.60e-03  3.11e-02  7.70e-01  
  5  +4.6635e-01  +2.3059e+00  1.84e+00  5.77e-03  4.84e-01  6.73e-03  1.30e-02  6.34e-01  
  6  +4.3736e-01  +1.9543e+00  1.52e+00  3.79e-03  3.15e-01  5.48e-03  8.81e-03  4.21e-01  
  7  +4.0812e-01  +1.2741e+00  8.66e-01  2.61e-03  2.12e-01  6.02e-04  6.61e-03  5.25e-01  
  8  +3.4353e-01  +6.5200e-01  3.08e-01  8.33e-04  6.58e-02  1.36e-04  2.40e-03  7.53e-01  
  9  +3.1260e-01  +4.7638e-01  1.64e-01  4.28e-04  3.41e-02  7.80e-05  1.35e-03  5.68e-01  
 10  +2.9728e-01  +3.9850e-01  1.01e-01  2.50e-04  2.02e-02  5.05e-05  8.30e-04  4.81e-01  
 11  +2.8272e-01  +3.2640e-01  4.37e-02  1.03e-04  8.40e-03  2.20e-05  3.65e-04  6.31e-01  
 12  +2.7817e-01  +3.0325e-01  2.51e-02  5.78e-05  4.74e-03  1.27e-05  2.12e-04  7.40e-01  
 13  +2.7489e-01  +2.8920e-01  1.43e-02  3.21e-05  2.67e-03  7.27e-06  1.21e-04  6.25e-01  
 14  +2.7101e-01  +2.7387e-01  2.85e-03  6.21e-06  5.21e-04  1.42e-06  2.44e-05  8.49e-01  
 15  +2.7003e-01  +2.7012e-01  8.57e-05  1.85e-07  1.56e-05  4.04e-08  7.38e-07  9.75e-01  
 16  +2.7000e-01  +2.7000e-01  8.62e-07  1.86e-09  1.57e-07  4.05e-10  7.43e-09  9.90e-01  
 17  +2.7000e-01  +2.7000e-01  8.62e-09  1.86e-11  1.57e-09  4.05e-12  7.43e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.991ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:29 PM: Optimal value: 2.700e-01
(CVXPY) Oct 06 04:24:29 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:24:29 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 13, Objective: 0.2700
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:29 PM: Your problem has 651 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:29 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 651
  constraints   = 1151
  nnz(P)        = 0
  nnz(A)        = 10172
  cones (total) = 1
    : Nonnegative = 1,  numel = 1151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +5.0231e+02  5.02e+02  9.59e-01  3.77e+01  1.00e+00  1.01e+00   ------   
  1  +5.5789e-01  +1.1084e+02  1.10e+02  4.39e-01  2.34e+01  3.79e-03  5.90e-01  5.76e-01  
  2  +5.1411e-01  +1.3698e+01  1.32e+01  1.44e-01  9.97e+00  2.09e-02  2.69e-01  9.90e-01  
  3  +5.0345e-01  +2.7191e+00  2.22e+00  2.85e-02  2.28e+00  3.98e-03  6.55e-02  7.79e-01  
  4  +4.8951e-01  +2.8112e+00  2.32e+00  1.16e-02  9.69e-01  7.74e-03  2.55e-02  7.33e-01  
  5  +4.6029e-01  +2.0886e+00  1.63e+00  5.28e-03  4.43e-01  6.69e-03  1.20e-02  6.11e-01  
  6  +4.3278e-01  +1.7528e+00  1.32e+00  3.54e-03  2.93e-01  5.21e-03  8.27e-03  3.97e-01  
  7  +3.9615e-01  +1.1326e+00  7.36e-01  2.23e-03  1.80e-01  3.05e-04  5.71e-03  6.39e-01  
  8  +3.3224e-01  +5.7159e-01  2.39e-01  6.65e-04  5.24e-02  7.49e-05  1.97e-03  7.98e-01  
  9  +3.0867e-01  +4.5606e-01  1.47e-01  3.84e-04  3.08e-02  5.69e-05  1.20e-03  5.59e-01  
 10  +2.9628e-01  +3.9595e-01  9.97e-02  2.47e-04  2.00e-02  4.13e-05  8.10e-04  4.36e-01  
 11  +2.8281e-01  +3.3096e-01  4.81e-02  1.14e-04  9.37e-03  2.14e-05  3.93e-04  6.30e-01  
 12  +2.7647e-01  +2.9992e-01  2.35e-02  5.39e-05  4.51e-03  1.16e-05  1.92e-04  8.45e-01  
 13  +2.7372e-01  +2.8891e-01  1.52e-02  3.40e-05  2.88e-03  7.62e-06  1.24e-04  5.33e-01  
 14  +2.6969e-01  +2.7360e-01  3.92e-03  8.35e-06  7.25e-04  1.99e-06  3.17e-05  8.47e-01  
 15  +2.6828e-01  +2.6846e-01  1.87e-04  3.94e-07  3.43e-05  9.09e-08  1.53e-06  9.78e-01  
 16  +2.6820e-01  +2.6820e-01  1.90e-06  3.99e-09  3.48e-07  9.18e-10  1.55e-08  9.90e-01  
 17  +2.6820e-01  +2.6820e-01  1.90e-08  3.99e-11  3.48e-09  9.18e-12  1.55e-10  9.90e-01  
 18  +2.6820e-01  +2.6820e-01  1.90e-10  3.99e-13  3.48e-11  9.20e-14  1.55e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 30.8244ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:29 PM: Optimal value: 2.682e-01
(CVXPY) Oct 06 04:24:29 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:29 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 14, Objective: 0.2682
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:29 PM: Your problem has 661 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:29 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 661
  constraints   = 1161
  nnz(P)        = 0
  nnz(A)        = 10237
  cones (total) = 1
    : Nonnegative = 1,  numel = 1161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9913e-01  +5.0236e+02  5.02e+02  9.59e-01  3.75e+01  1.00e+00  1.01e+00   ------   
  1  +5.5625e-01  +1.1087e+02  1.10e+02  4.40e-01  2.33e+01  3.79e-03  5.89e-01  5.76e-01  
  2  +5.1294e-01  +1.3799e+01  1.33e+01  1.43e-01  9.88e+00  2.10e-02  2.67e-01  9.90e-01  
  3  +5.0247e-01  +2.7984e+00  2.30e+00  2.82e-02  2.26e+00  4.35e-03  6.45e-02  7.79e-01  
  4  +4.8539e-01  +2.6531e+00  2.17e+00  1.02e-02  8.58e-01  8.58e-03  2.26e-02  7.20e-01  
  5  +4.5147e-01  +1.8915e+00  1.44e+00  4.72e-03  3.92e-01  6.09e-03  1.08e-02  6.25e-01  
  6  +4.2348e-01  +1.6020e+00  1.18e+00  3.21e-03  2.64e-01  4.50e-03  7.61e-03  4.17e-01  
  7  +3.9425e-01  +1.1136e+00  7.19e-01  2.36e-03  1.89e-01  3.32e-04  6.15e-03  5.76e-01  
  8  +3.4603e-01  +7.1793e-01  3.72e-01  1.08e-03  8.49e-02  1.60e-04  3.08e-03  6.05e-01  
  9  +3.1542e-01  +5.1420e-01  1.99e-01  5.47e-04  4.31e-02  8.46e-05  1.69e-03  5.17e-01  
 10  +2.9909e-01  +4.2833e-01  1.29e-01  3.33e-04  2.67e-02  5.80e-05  1.07e-03  4.50e-01  
 11  +2.8464e-01  +3.5611e-01  7.15e-02  1.72e-04  1.41e-02  3.47e-05  5.79e-04  7.32e-01  
 12  +2.7610e-01  +3.1492e-01  3.88e-02  9.13e-05  7.55e-03  1.90e-05  3.18e-04  5.80e-01  
 13  +2.7081e-01  +2.9057e-01  1.98e-02  4.56e-05  3.79e-03  9.74e-06  1.64e-04  5.55e-01  
 14  +2.6925e-01  +2.8336e-01  1.41e-02  3.19e-05  2.68e-03  7.05e-06  1.16e-04  5.44e-01  
 15  +2.6548e-01  +2.6820e-01  2.72e-03  5.92e-06  5.02e-04  1.37e-06  2.25e-05  9.18e-01  
 16  +2.6453e-01  +2.6486e-01  3.26e-04  6.93e-07  5.93e-05  1.62e-07  2.70e-06  9.08e-01  
 17  +2.6440e-01  +2.6441e-01  3.75e-06  7.96e-09  6.81e-07  1.84e-09  3.11e-08  9.89e-01  
 18  +2.6440e-01  +2.6440e-01  3.75e-08  7.97e-11  6.81e-09  1.84e-11  3.12e-10  9.90e-01  
 19  +2.6440e-01  +2.6440e-01  3.75e-10  7.96e-13  6.81e-11  1.85e-13  3.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.0553ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:29 PM: Optimal value: 2.644e-01
(CVXPY) Oct 06 04:24:29 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:29 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 15, Objective: 0.2644
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:29 PM: Your problem has 671 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:29 PM: Finished problem compilation (took 1.572e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 671
  constraints   = 1171
  nnz(P)        = 0
  nnz(A)        = 10358
  cones (total) = 1
    : Nonnegative = 1,  numel = 1171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9909e-01  +5.0238e+02  5.02e+02  9.59e-01  3.74e+01  1.00e+00  1.01e+00   ------   
  1  +5.5422e-01  +1.1099e+02  1.10e+02  4.40e-01  2.32e+01  3.80e-03  5.89e-01  5.76e-01  
  2  +5.1144e-01  +1.3960e+01  1.34e+01  1.43e-01  9.82e+00  2.13e-02  2.67e-01  9.90e-01  
  3  +5.0091e-01  +2.9242e+00  2.42e+00  2.80e-02  2.24e+00  4.92e-03  6.36e-02  7.78e-01  
  4  +4.8063e-01  +2.5901e+00  2.11e+00  9.74e-03  8.14e-01  9.36e-03  2.16e-02  6.99e-01  
  5  +4.4372e-01  +1.8774e+00  1.43e+00  4.65e-03  3.84e-01  6.67e-03  1.08e-02  6.00e-01  
  6  +4.1612e-01  +1.5957e+00  1.18e+00  3.25e-03  2.65e-01  5.08e-03  7.78e-03  3.76e-01  
  7  +3.7826e-01  +1.0753e+00  6.97e-01  2.19e-03  1.73e-01  4.02e-05  5.83e-03  7.39e-01  
  8  +3.2258e-01  +5.7159e-01  2.49e-01  7.10e-04  5.53e-02  2.20e-05  2.14e-03  6.70e-01  
  9  +3.0345e-01  +4.7686e-01  1.73e-01  4.64e-04  3.67e-02  3.53e-05  1.46e-03  5.11e-01  
 10  +2.8488e-01  +3.8022e-01  9.53e-02  2.40e-04  1.93e-02  2.42e-05  8.04e-04  5.37e-01  
 11  +2.7369e-01  +3.2367e-01  5.00e-02  1.22e-04  9.92e-03  1.57e-05  4.25e-04  5.97e-01  
 12  +2.6772e-01  +2.9413e-01  2.64e-02  6.28e-05  5.15e-03  1.05e-05  2.26e-04  7.12e-01  
 13  +2.6274e-01  +2.7256e-01  9.82e-03  2.27e-05  1.88e-03  4.18e-06  8.44e-05  7.31e-01  
 14  +2.6057e-01  +2.6425e-01  3.68e-03  8.10e-06  6.85e-04  1.66e-06  3.09e-05  7.47e-01  
 15  +2.5930e-01  +2.5941e-01  1.18e-04  2.59e-07  2.19e-05  5.24e-08  1.00e-06  9.88e-01  
 16  +2.5925e-01  +2.5925e-01  1.19e-06  2.60e-09  2.20e-07  5.24e-10  1.01e-08  9.90e-01  
 17  +2.5925e-01  +2.5925e-01  1.19e-08  2.61e-11  2.20e-09  5.24e-12  1.01e-10  9.90e-01  
 18  +2.5925e-01  +2.5925e-01  1.19e-10  2.61e-13  2.20e-11  5.25e-14  1.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.4264ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:29 PM: Optimal value: 2.593e-01
(CVXPY) Oct 06 04:24:29 PM: Compilation took 1.572e-02 seconds
(CVXPY) Oct 06 04:24:29 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 16, Objective: 0.2593
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:30 PM: Your problem has 681 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:30 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 681
  constraints   = 1181
  nnz(P)        = 0
  nnz(A)        = 10454
  cones (total) = 1
    : Nonnegative = 1,  numel = 1181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9908e-01  +5.0232e+02  5.02e+02  9.59e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.5301e-01  +1.1094e+02  1.10e+02  4.41e-01  2.30e+01  3.80e-03  5.88e-01  5.77e-01  
  2  +5.1043e-01  +1.4084e+01  1.36e+01  1.42e-01  9.70e+00  2.14e-02  2.65e-01  9.90e-01  
  3  +4.9954e-01  +2.9111e+00  2.41e+00  2.66e-02  2.13e+00  5.17e-03  6.02e-02  7.92e-01  
  4  +4.7589e-01  +2.5311e+00  2.06e+00  8.92e-03  7.45e-01  9.99e-03  1.98e-02  7.02e-01  
  5  +4.4203e-01  +1.9631e+00  1.52e+00  4.88e-03  4.03e-01  7.55e-03  1.12e-02  5.29e-01  
  6  +4.1744e-01  +1.6684e+00  1.25e+00  3.56e-03  2.92e-01  5.51e-03  8.46e-03  3.42e-01  
  7  +3.7264e-01  +1.0678e+00  6.95e-01  2.12e-03  1.68e-01  4.67e-05  5.58e-03  7.75e-01  
  8  +3.1702e-01  +5.5537e-01  2.38e-01  6.85e-04  5.34e-02  2.54e-05  2.05e-03  6.80e-01  
  9  +2.9684e-01  +4.6214e-01  1.65e-01  4.41e-04  3.50e-02  3.70e-05  1.38e-03  5.29e-01  
 10  +2.8241e-01  +3.8792e-01  1.06e-01  2.70e-04  2.18e-02  2.75e-05  8.88e-04  4.38e-01  
 11  +2.6894e-01  +3.1946e-01  5.05e-02  1.25e-04  1.02e-02  1.57e-05  4.31e-04  6.13e-01  
 12  +2.6309e-01  +2.9032e-01  2.72e-02  6.58e-05  5.42e-03  1.06e-05  2.34e-04  6.97e-01  
 13  +2.5872e-01  +2.7127e-01  1.25e-02  2.96e-05  2.46e-03  5.06e-06  1.08e-04  6.03e-01  
 14  +2.5654e-01  +2.6242e-01  5.88e-03  1.34e-05  1.13e-03  2.53e-06  5.02e-05  6.59e-01  
 15  +2.5476e-01  +2.5559e-01  8.26e-04  1.83e-06  1.55e-04  3.73e-07  7.06e-06  9.35e-01  
 16  +2.5445e-01  +2.5446e-01  9.69e-06  2.14e-08  1.81e-06  4.11e-09  8.32e-08  9.90e-01  
 17  +2.5445e-01  +2.5445e-01  9.69e-08  2.14e-10  1.82e-08  4.11e-11  8.33e-10  9.90e-01  
 18  +2.5445e-01  +2.5445e-01  9.69e-10  2.14e-12  1.82e-10  4.12e-13  8.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 36.8217ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:30 PM: Optimal value: 2.545e-01
(CVXPY) Oct 06 04:24:30 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:24:30 PM: Solver (including time spent in interface) took 3.123e-02 seconds
Iteration: 17, Objective: 0.2545
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:30 PM: Your problem has 691 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:30 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 691
  constraints   = 1191
  nnz(P)        = 0
  nnz(A)        = 10539
  cones (total) = 1
    : Nonnegative = 1,  numel = 1191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +5.0242e+02  5.02e+02  9.60e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.5069e-01  +1.1104e+02  1.10e+02  4.41e-01  2.28e+01  3.81e-03  5.88e-01  5.76e-01  
  2  +5.0889e-01  +1.4233e+01  1.37e+01  1.41e-01  9.62e+00  2.16e-02  2.63e-01  9.90e-01  
  3  +4.9766e-01  +2.9662e+00  2.47e+00  2.58e-02  2.06e+00  5.59e-03  5.81e-02  7.99e-01  
  4  +4.6995e-01  +2.4621e+00  1.99e+00  8.34e-03  6.95e-01  1.04e-02  1.85e-02  7.05e-01  
  5  +4.3512e-01  +1.9944e+00  1.56e+00  4.77e-03  3.94e-01  9.05e-03  1.10e-02  4.70e-01  
  6  +4.0964e-01  +1.6823e+00  1.27e+00  3.52e-03  2.87e-01  6.63e-03  8.33e-03  3.18e-01  
  7  +3.5669e-01  +9.4322e-01  5.87e-01  1.77e-03  1.39e-01  5.41e-05  4.74e-03  7.58e-01  
  8  +3.0402e-01  +5.0986e-01  2.06e-01  5.94e-04  4.62e-02  2.76e-05  1.82e-03  6.71e-01  
  9  +2.9043e-01  +4.4597e-01  1.56e-01  4.28e-04  3.38e-02  3.07e-05  1.35e-03  3.92e-01  
 10  +2.7778e-01  +3.8360e-01  1.06e-01  2.78e-04  2.23e-02  2.43e-05  9.17e-04  3.95e-01  
 11  +2.6364e-01  +3.1418e-01  5.05e-02  1.27e-04  1.03e-02  1.34e-05  4.43e-04  5.85e-01  
 12  +2.5668e-01  +2.8055e-01  2.39e-02  5.86e-05  4.81e-03  8.14e-06  2.12e-04  7.06e-01  
 13  +2.5349e-01  +2.6585e-01  1.24e-02  2.97e-05  2.45e-03  5.15e-06  1.10e-04  7.88e-01  
 14  +2.5001e-01  +2.5175e-01  1.74e-03  4.10e-06  3.40e-04  7.33e-07  1.56e-05  8.77e-01  
 15  +2.4949e-01  +2.4966e-01  1.72e-04  4.03e-07  3.34e-05  7.56e-08  1.55e-06  9.64e-01  
 16  +2.4943e-01  +2.4943e-01  1.91e-06  4.49e-09  3.72e-07  8.40e-10  1.73e-08  9.89e-01  
 17  +2.4943e-01  +2.4943e-01  1.91e-08  4.49e-11  3.72e-09  8.40e-12  1.73e-10  9.90e-01  
 18  +2.4943e-01  +2.4943e-01  1.91e-10  4.50e-13  3.73e-11  8.42e-14  1.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.2384ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:30 PM: Optimal value: 2.494e-01
(CVXPY) Oct 06 04:24:30 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:30 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 18, Objective: 0.2494
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:30 PM: Your problem has 701 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:30 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 701
  constraints   = 1201
  nnz(P)        = 0
  nnz(A)        = 10610
  cones (total) = 1
    : Nonnegative = 1,  numel = 1201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +5.0238e+02  5.02e+02  9.60e-01  3.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.4881e-01  +1.1093e+02  1.10e+02  4.40e-01  2.26e+01  3.82e-03  5.85e-01  5.78e-01  
  2  +5.0741e-01  +1.4401e+01  1.39e+01  1.39e-01  9.45e+00  2.18e-02  2.60e-01  9.90e-01  
  3  +4.9527e-01  +3.0511e+00  2.56e+00  2.49e-02  1.98e+00  6.18e-03  5.57e-02  8.04e-01  
  4  +4.5958e-01  +2.4479e+00  1.99e+00  7.39e-03  6.14e-01  1.18e-02  1.64e-02  7.27e-01  
  5  +4.2073e-01  +1.9670e+00  1.55e+00  4.38e-03  3.59e-01  9.72e-03  1.01e-02  4.55e-01  
  6  +3.8044e-01  +1.2098e+00  8.29e-01  2.68e-03  2.13e-01  4.68e-04  6.80e-03  6.13e-01  
  7  +3.3882e-01  +8.3103e-01  4.92e-01  1.50e-03  1.17e-01  2.50e-04  4.14e-03  4.39e-01  
  8  +3.1504e-01  +6.8806e-01  3.73e-01  1.11e-03  8.64e-02  1.85e-04  3.26e-03  6.60e-01  
  9  +2.7531e-01  +3.9009e-01  1.15e-01  3.22e-04  2.52e-02  5.17e-05  1.07e-03  7.19e-01  
 10  +2.6845e-01  +3.5890e-01  9.05e-02  2.44e-04  1.93e-02  4.15e-05  8.27e-04  3.44e-01  
 11  +2.5685e-01  +3.0240e-01  4.55e-02  1.16e-04  9.38e-03  2.11e-05  4.15e-04  6.41e-01  
 12  +2.4819e-01  +2.6166e-01  1.35e-02  3.26e-05  2.64e-03  6.05e-06  1.26e-04  9.61e-01  
 13  +2.4478e-01  +2.4769e-01  2.91e-03  6.91e-06  5.58e-04  1.27e-06  2.78e-05  9.27e-01  
 14  +2.4381e-01  +2.4398e-01  1.67e-04  3.96e-07  3.19e-05  7.01e-08  1.63e-06  9.90e-01  
 15  +2.4375e-01  +2.4375e-01  1.69e-06  4.01e-09  3.23e-07  7.06e-10  1.65e-08  9.90e-01  
 16  +2.4375e-01  +2.4375e-01  1.70e-08  4.01e-11  3.23e-09  7.07e-12  1.65e-10  9.90e-01  
 17  +2.4375e-01  +2.4375e-01  1.70e-10  4.01e-13  3.23e-11  7.07e-14  1.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 35.7574ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:30 PM: Optimal value: 2.438e-01
(CVXPY) Oct 06 04:24:30 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:30 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 19, Objective: 0.2438
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:30 PM: Your problem has 711 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:30 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 711
  constraints   = 1211
  nnz(P)        = 0
  nnz(A)        = 10752
  cones (total) = 1
    : Nonnegative = 1,  numel = 1211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0240e+02  5.02e+02  9.60e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.4786e-01  +1.1091e+02  1.10e+02  4.40e-01  2.25e+01  3.82e-03  5.85e-01  5.78e-01  
  2  +5.0658e-01  +1.4450e+01  1.39e+01  1.39e-01  9.34e+00  2.18e-02  2.59e-01  9.90e-01  
  3  +4.9394e-01  +3.1479e+00  2.65e+00  2.51e-02  1.98e+00  6.53e-03  5.60e-02  8.01e-01  
  4  +4.5507e-01  +2.4366e+00  1.98e+00  7.23e-03  5.98e-01  1.20e-02  1.61e-02  7.34e-01  
  5  +4.1161e-01  +1.8788e+00  1.47e+00  4.10e-03  3.34e-01  9.10e-03  9.52e-03  4.85e-01  
  6  +3.7698e-01  +1.1837e+00  8.07e-01  2.74e-03  2.16e-01  6.76e-05  7.09e-03  6.07e-01  
  7  +3.5336e-01  +9.8358e-01  6.30e-01  2.04e-03  1.59e-01  7.14e-05  5.52e-03  2.87e-01  
  8  +2.9928e-01  +5.8704e-01  2.88e-01  8.40e-04  6.48e-02  1.29e-04  2.57e-03  9.90e-01  
  9  +2.7057e-01  +3.8824e-01  1.18e-01  3.29e-04  2.56e-02  5.33e-05  1.10e-03  6.50e-01  
 10  +2.6207e-01  +3.4423e-01  8.22e-02  2.20e-04  1.74e-02  3.81e-05  7.57e-04  4.06e-01  
 11  +2.5129e-01  +2.8830e-01  3.70e-02  9.49e-05  7.61e-03  1.74e-05  3.41e-04  6.11e-01  
 12  +2.4776e-01  +2.6819e-01  2.04e-02  5.09e-05  4.13e-03  9.46e-06  1.85e-04  8.84e-01  
 13  +2.4524e-01  +2.5748e-01  1.22e-02  2.99e-05  2.45e-03  5.67e-06  1.10e-04  5.57e-01  
 14  +2.4315e-01  +2.4857e-01  5.43e-03  1.32e-05  1.08e-03  2.48e-06  4.94e-05  6.94e-01  
 15  +2.4162e-01  +2.4240e-01  7.77e-04  1.89e-06  1.54e-04  3.41e-07  7.18e-06  9.82e-01  
 16  +2.4135e-01  +2.4140e-01  4.67e-05  1.13e-07  9.24e-06  2.03e-08  4.35e-07  9.59e-01  
 17  +2.4133e-01  +2.4133e-01  4.78e-07  1.16e-09  9.45e-08  2.07e-10  4.45e-09  9.90e-01  
 18  +2.4133e-01  +2.4133e-01  4.79e-09  1.16e-11  9.48e-10  2.08e-12  4.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 38.0947ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:30 PM: Optimal value: 2.413e-01
(CVXPY) Oct 06 04:24:30 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:30 PM: Solver (including time spent in interface) took 4.689e-02 seconds
Iteration: 20, Objective: 0.2413
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:31 PM: Your problem has 721 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:31 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 721
  constraints   = 1221
  nnz(P)        = 0
  nnz(A)        = 10829
  cones (total) = 1
    : Nonnegative = 1,  numel = 1221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +5.0236e+02  5.02e+02  9.60e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.4621e-01  +1.1089e+02  1.10e+02  4.40e-01  2.23e+01  3.83e-03  5.84e-01  5.79e-01  
  2  +5.0526e-01  +1.4591e+01  1.41e+01  1.38e-01  9.23e+00  2.20e-02  2.57e-01  9.90e-01  
  3  +4.9180e-01  +3.1648e+00  2.67e+00  2.40e-02  1.90e+00  6.89e-03  5.36e-02  8.10e-01  
  4  +4.5058e-01  +2.4163e+00  1.97e+00  7.11e-03  5.85e-01  1.20e-02  1.59e-02  7.24e-01  
  5  +4.1030e-01  +1.9369e+00  1.53e+00  4.28e-03  3.48e-01  9.66e-03  9.89e-03  4.48e-01  
  6  +3.7075e-01  +1.2130e+00  8.42e-01  2.79e-03  2.19e-01  7.39e-05  7.19e-03  6.71e-01  
  7  +3.0328e-01  +5.5945e-01  2.56e-01  7.57e-04  5.81e-02  3.37e-05  2.23e-03  7.43e-01  
  8  +2.7464e-01  +4.1943e-01  1.45e-01  4.06e-04  3.16e-02  3.43e-05  1.29e-03  5.91e-01  
  9  +2.6441e-01  +3.6755e-01  1.03e-01  2.80e-04  2.20e-02  2.72e-05  9.20e-04  3.59e-01  
 10  +2.5160e-01  +3.0327e-01  5.17e-02  1.35e-04  1.08e-02  1.51e-05  4.65e-04  5.59e-01  
 11  +2.4364e-01  +2.6428e-01  2.06e-02  5.24e-05  4.24e-03  7.04e-06  1.88e-04  7.12e-01  
 12  +2.3983e-01  +2.4734e-01  7.50e-03  1.86e-05  1.53e-03  2.76e-06  6.85e-05  7.15e-01  
 13  +2.3792e-01  +2.3893e-01  1.01e-03  2.51e-06  2.06e-04  3.84e-07  9.40e-06  9.01e-01  
 14  +2.3762e-01  +2.3767e-01  5.09e-05  1.26e-07  1.03e-05  2.05e-08  4.75e-07  9.71e-01  
 15  +2.3760e-01  +2.3760e-01  5.14e-07  1.27e-09  1.04e-07  2.07e-10  4.80e-09  9.90e-01  
 16  +2.3760e-01  +2.3760e-01  5.16e-09  1.28e-11  1.05e-09  2.08e-12  4.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.8565ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:31 PM: Optimal value: 2.376e-01
(CVXPY) Oct 06 04:24:31 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:31 PM: Solver (including time spent in interface) took 3.126e-02 seconds
Iteration: 21, Objective: 0.2376
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:31 PM: Your problem has 731 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:31 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 731
  constraints   = 1231
  nnz(P)        = 0
  nnz(A)        = 10908
  cones (total) = 1
    : Nonnegative = 1,  numel = 1231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9904e-01  +5.0236e+02  5.02e+02  9.60e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.4497e-01  +1.1096e+02  1.10e+02  4.40e-01  2.22e+01  3.83e-03  5.83e-01  5.78e-01  
  2  +5.0458e-01  +1.4652e+01  1.41e+01  1.38e-01  9.14e+00  2.21e-02  2.56e-01  9.90e-01  
  3  +4.9071e-01  +3.2003e+00  2.71e+00  2.38e-02  1.87e+00  7.08e-03  5.31e-02  8.11e-01  
  4  +4.4920e-01  +2.4084e+00  1.96e+00  7.22e-03  5.91e-01  1.17e-02  1.62e-02  7.16e-01  
  5  +4.0656e-01  +1.9261e+00  1.52e+00  4.25e-03  3.44e-01  9.63e-03  9.86e-03  4.59e-01  
  6  +3.7100e-01  +1.2009e+00  8.30e-01  2.83e-03  2.20e-01  7.15e-05  7.29e-03  6.31e-01  
  7  +3.0172e-01  +5.7540e-01  2.74e-01  8.10e-04  6.19e-02  5.12e-05  2.38e-03  7.73e-01  
  8  +2.7230e-01  +4.2256e-01  1.50e-01  4.20e-04  3.26e-02  3.90e-05  1.34e-03  5.69e-01  
  9  +2.6206e-01  +3.6978e-01  1.08e-01  2.92e-04  2.28e-02  3.04e-05  9.62e-04  3.48e-01  
 10  +2.4898e-01  +3.0307e-01  5.41e-02  1.42e-04  1.12e-02  1.67e-05  4.91e-04  5.58e-01  
 11  +2.4333e-01  +2.7583e-01  3.25e-02  8.27e-05  6.64e-03  1.10e-05  2.94e-04  5.04e-01  
 12  +2.3722e-01  +2.4818e-01  1.10e-02  2.69e-05  2.20e-03  3.96e-06  9.98e-05  7.22e-01  
 13  +2.3443e-01  +2.3603e-01  1.60e-03  3.87e-06  3.17e-04  6.55e-07  1.48e-05  9.58e-01  
 14  +2.3389e-01  +2.3393e-01  3.75e-05  9.11e-08  7.44e-06  1.42e-08  3.53e-07  9.77e-01  
 15  +2.3388e-01  +2.3388e-01  3.76e-07  9.14e-10  7.46e-08  1.43e-10  3.54e-09  9.90e-01  
 16  +2.3388e-01  +2.3388e-01  3.76e-09  9.14e-12  7.46e-10  1.43e-12  3.54e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.7841ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:31 PM: Optimal value: 2.339e-01
(CVXPY) Oct 06 04:24:31 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:31 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 22, Objective: 0.2339
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:31 PM: Your problem has 741 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:31 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 741
  constraints   = 1241
  nnz(P)        = 0
  nnz(A)        = 10984
  cones (total) = 1
    : Nonnegative = 1,  numel = 1241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9903e-01  +5.0234e+02  5.02e+02  9.60e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.4409e-01  +1.1096e+02  1.10e+02  4.41e-01  2.21e+01  3.83e-03  5.83e-01  5.79e-01  
  2  +5.0363e-01  +1.4720e+01  1.42e+01  1.37e-01  9.07e+00  2.22e-02  2.55e-01  9.90e-01  
  3  +4.8924e-01  +3.2259e+00  2.74e+00  2.34e-02  1.84e+00  7.33e-03  5.22e-02  8.13e-01  
  4  +4.4331e-01  +2.3334e+00  1.89e+00  6.67e-03  5.46e-01  1.20e-02  1.50e-02  7.31e-01  
  5  +4.0544e-01  +1.9379e+00  1.53e+00  4.28e-03  3.47e-01  1.02e-02  9.90e-03  3.97e-01  
  6  +3.7142e-01  +1.2292e+00  8.58e-01  2.89e-03  2.26e-01  5.02e-04  7.38e-03  5.85e-01  
  7  +3.0197e-01  +6.0075e-01  2.99e-01  8.87e-04  6.78e-02  1.33e-04  2.58e-03  7.82e-01  
  8  +2.6832e-01  +4.1654e-01  1.48e-01  4.13e-04  3.20e-02  6.93e-05  1.31e-03  6.07e-01  
  9  +2.5803e-01  +3.6347e-01  1.05e-01  2.83e-04  2.22e-02  5.05e-05  9.31e-04  3.66e-01  
 10  +2.4593e-01  +3.0300e-01  5.71e-02  1.46e-04  1.16e-02  2.80e-05  5.02e-04  5.79e-01  
 11  +2.3876e-01  +2.7043e-01  3.17e-02  7.77e-05  6.30e-03  1.57e-05  2.76e-04  5.00e-01  
 12  +2.3240e-01  +2.4268e-01  1.03e-02  2.43e-05  1.99e-03  4.99e-06  9.05e-05  7.20e-01  
 13  +2.2977e-01  +2.3177e-01  2.00e-03  4.66e-06  3.81e-04  9.31e-07  1.80e-05  8.12e-01  
 14  +2.2927e-01  +2.2970e-01  4.24e-04  9.78e-07  7.98e-05  1.93e-07  3.87e-06  9.90e-01  
 15  +2.2910e-01  +2.2911e-01  5.03e-06  1.16e-08  9.43e-07  2.25e-09  4.60e-08  9.88e-01  
 16  +2.2910e-01  +2.2910e-01  5.03e-08  1.16e-10  9.43e-09  2.25e-11  4.60e-10  9.90e-01  
 17  +2.2910e-01  +2.2910e-01  5.03e-10  1.16e-12  9.43e-11  2.26e-13  4.61e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.8964ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:31 PM: Optimal value: 2.291e-01
(CVXPY) Oct 06 04:24:31 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:31 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 23, Objective: 0.2291
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:31 PM: Your problem has 751 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 751
  constraints   = 1251
  nnz(P)        = 0
  nnz(A)        = 11044
  cones (total) = 1
    : Nonnegative = 1,  numel = 1251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9902e-01  +5.0237e+02  5.02e+02  9.61e-01  3.63e+01  1.00e+00  1.01e+00   ------   
  1  +5.4307e-01  +1.1098e+02  1.10e+02  4.41e-01  2.19e+01  3.84e-03  5.82e-01  5.79e-01  
  2  +5.0247e-01  +1.4766e+01  1.43e+01  1.36e-01  9.00e+00  2.23e-02  2.55e-01  9.90e-01  
  3  +4.8747e-01  +3.1333e+00  2.65e+00  2.20e-02  1.73e+00  7.36e-03  4.93e-02  8.25e-01  
  4  +4.4062e-01  +2.2365e+00  1.80e+00  6.44e-03  5.25e-01  1.14e-02  1.45e-02  7.22e-01  
  5  +4.0307e-01  +1.8913e+00  1.49e+00  4.20e-03  3.39e-01  9.97e-03  9.75e-03  3.92e-01  
  6  +3.7320e-01  +1.2581e+00  8.85e-01  3.01e-03  2.35e-01  1.01e-03  7.65e-03  5.28e-01  
  7  +3.0337e-01  +6.2044e-01  3.17e-01  9.42e-04  7.19e-02  2.29e-04  2.72e-03  7.69e-01  
  8  +2.7180e-01  +4.4518e-01  1.73e-01  4.88e-04  3.75e-02  1.21e-04  1.53e-03  5.31e-01  
  9  +2.5849e-01  +3.7647e-01  1.18e-01  3.17e-04  2.46e-02  7.93e-05  1.04e-03  4.72e-01  
 10  +2.4321e-01  +2.9810e-01  5.49e-02  1.41e-04  1.11e-02  3.48e-05  4.88e-04  6.58e-01  
 11  +2.3702e-01  +2.7022e-01  3.32e-02  8.13e-05  6.59e-03  2.06e-05  2.90e-04  5.06e-01  
 12  +2.3088e-01  +2.4433e-01  1.35e-02  3.15e-05  2.60e-03  8.12e-06  1.17e-04  6.50e-01  
 13  +2.2726e-01  +2.2960e-01  2.34e-03  5.36e-06  4.46e-04  1.21e-06  2.08e-05  9.08e-01  
 14  +2.2642e-01  +2.2648e-01  5.86e-05  1.34e-07  1.11e-05  2.59e-08  5.30e-07  9.76e-01  
 15  +2.2640e-01  +2.2640e-01  5.87e-07  1.34e-09  1.11e-07  2.59e-10  5.31e-09  9.90e-01  
 16  +2.2640e-01  +2.2640e-01  5.87e-09  1.34e-11  1.11e-09  2.59e-12  5.32e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 41.8023ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:31 PM: Optimal value: 2.264e-01
(CVXPY) Oct 06 04:24:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:31 PM: Solver (including time spent in interface) took 5.670e-02 seconds
Iteration: 24, Objective: 0.2264
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:32 PM: Your problem has 761 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:32 PM: Finished problem compilation (took 1.565e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 761
  constraints   = 1261
  nnz(P)        = 0
  nnz(A)        = 11155
  cones (total) = 1
    : Nonnegative = 1,  numel = 1261

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +5.0254e+02  5.02e+02  9.61e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.4002e-01  +1.1109e+02  1.11e+02  4.41e-01  2.18e+01  3.84e-03  5.83e-01  5.79e-01  
  2  +5.0009e-01  +1.5034e+01  1.45e+01  1.35e-01  8.90e+00  2.27e-02  2.53e-01  9.90e-01  
  3  +4.8324e-01  +3.1869e+00  2.70e+00  2.11e-02  1.65e+00  7.95e-03  4.70e-02  8.34e-01  
  4  +4.3678e-01  +2.2979e+00  1.86e+00  6.99e-03  5.66e-01  1.08e-02  1.58e-02  6.82e-01  
  5  +3.9830e-01  +1.9336e+00  1.54e+00  4.45e-03  3.58e-01  9.79e-03  1.04e-02  3.95e-01  
  6  +3.5606e-01  +1.2186e+00  8.63e-01  2.88e-03  2.22e-01  7.69e-05  7.45e-03  7.13e-01  
  7  +2.9221e-01  +5.6056e-01  2.68e-01  8.19e-04  6.20e-02  3.30e-05  2.41e-03  7.23e-01  
  8  +2.6725e-01  +4.3767e-01  1.70e-01  4.91e-04  3.78e-02  3.37e-05  1.54e-03  4.97e-01  
  9  +2.5435e-01  +3.7151e-01  1.17e-01  3.24e-04  2.52e-02  2.63e-05  1.06e-03  3.73e-01  
 10  +2.4327e-01  +3.1676e-01  7.35e-02  1.95e-04  1.54e-02  1.92e-05  6.62e-04  4.62e-01  
 11  +2.3427e-01  +2.7406e-01  3.98e-02  1.00e-04  8.13e-03  1.37e-05  3.54e-04  6.69e-01  
 12  +2.2701e-01  +2.4285e-01  1.58e-02  3.79e-05  3.14e-03  5.92e-06  1.40e-04  6.92e-01  
 13  +2.2322e-01  +2.2756e-01  4.34e-03  1.00e-05  8.40e-04  1.78e-06  3.88e-05  8.52e-01  
 14  +2.2169e-01  +2.2191e-01  2.22e-04  5.07e-07  4.24e-05  8.50e-08  2.02e-06  9.65e-01  
 15  +2.2160e-01  +2.2160e-01  2.31e-06  5.27e-09  4.41e-07  8.71e-10  2.11e-08  9.90e-01  
 16  +2.2160e-01  +2.2160e-01  2.31e-08  5.28e-11  4.41e-09  8.72e-12  2.12e-10  9.90e-01  
 17  +2.2160e-01  +2.2160e-01  2.31e-10  5.28e-13  4.41e-11  8.73e-14  2.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 45.2598ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:32 PM: Optimal value: 2.216e-01
(CVXPY) Oct 06 04:24:32 PM: Compilation took 1.565e-02 seconds
(CVXPY) Oct 06 04:24:32 PM: Solver (including time spent in interface) took 4.686e-02 seconds
Iteration: 25, Objective: 0.2216
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:32 PM: Your problem has 771 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:32 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 771
  constraints   = 1271
  nnz(P)        = 0
  nnz(A)        = 11238
  cones (total) = 1
    : Nonnegative = 1,  numel = 1271

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +5.0254e+02  5.02e+02  9.61e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.3738e-01  +1.1106e+02  1.11e+02  4.40e-01  2.16e+01  3.85e-03  5.81e-01  5.79e-01  
  2  +4.9788e-01  +1.5241e+01  1.47e+01  1.34e-01  8.74e+00  2.29e-02  2.50e-01  9.90e-01  
  3  +4.7851e-01  +3.0260e+00  2.55e+00  1.84e-02  1.45e+00  8.22e-03  4.11e-02  8.66e-01  
  4  +4.2069e-01  +2.1045e+00  1.68e+00  5.69e-03  4.59e-01  1.13e-02  1.29e-02  7.07e-01  
  5  +3.9381e-01  +1.8305e+00  1.44e+00  4.36e-03  3.49e-01  8.74e-03  1.01e-02  3.00e-01  
  6  +3.3524e-01  +1.0456e+00  7.10e-01  2.27e-03  1.74e-01  7.43e-05  5.93e-03  7.77e-01  
  7  +2.8553e-01  +5.9096e-01  3.05e-01  9.47e-04  7.17e-02  4.61e-05  2.78e-03  6.05e-01  
  8  +2.5212e-01  +3.9519e-01  1.43e-01  4.11e-04  3.16e-02  3.21e-05  1.32e-03  6.32e-01  
  9  +2.4400e-01  +3.5513e-01  1.11e-01  3.07e-04  2.39e-02  2.79e-05  1.01e-03  3.11e-01  
 10  +2.3331e-01  +3.0294e-01  6.96e-02  1.83e-04  1.45e-02  2.01e-05  6.21e-04  4.79e-01  
 11  +2.2371e-01  +2.5848e-01  3.48e-02  8.57e-05  6.95e-03  1.22e-05  3.07e-04  6.67e-01  
 12  +2.1607e-01  +2.2610e-01  1.00e-02  2.36e-05  1.93e-03  3.69e-06  8.97e-05  7.78e-01  
 13  +2.1314e-01  +2.1434e-01  1.19e-03  2.77e-06  2.26e-04  4.28e-07  1.10e-05  9.05e-01  
 14  +2.1273e-01  +2.1279e-01  6.78e-05  1.56e-07  1.27e-05  2.56e-08  6.38e-07  9.62e-01  
 15  +2.1270e-01  +2.1270e-01  6.87e-07  1.57e-09  1.28e-07  2.59e-10  6.47e-09  9.90e-01  
 16  +2.1270e-01  +2.1270e-01  6.87e-09  1.57e-11  1.29e-09  2.59e-12  6.47e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.221ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:32 PM: Optimal value: 2.127e-01
(CVXPY) Oct 06 04:24:32 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:32 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 26, Objective: 0.2127
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:32 PM: Your problem has 781 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:32 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 781
  constraints   = 1281
  nnz(P)        = 0
  nnz(A)        = 11324
  cones (total) = 1
    : Nonnegative = 1,  numel = 1281

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9892e-01  +5.0255e+02  5.02e+02  9.61e-01  3.59e+01  1.00e+00  1.01e+00   ------   
  1  +5.3546e-01  +1.1120e+02  1.11e+02  4.40e-01  2.15e+01  3.86e-03  5.80e-01  5.79e-01  
  2  +4.9636e-01  +1.5372e+01  1.49e+01  1.33e-01  8.68e+00  2.31e-02  2.49e-01  9.90e-01  
  3  +4.7567e-01  +2.9948e+00  2.52e+00  1.77e-02  1.39e+00  8.40e-03  3.94e-02  8.72e-01  
  4  +4.1476e-01  +2.0409e+00  1.63e+00  5.48e-03  4.41e-01  1.08e-02  1.25e-02  7.10e-01  
  5  +3.8822e-01  +1.7573e+00  1.37e+00  4.23e-03  3.37e-01  7.85e-03  9.89e-03  3.09e-01  
  6  +3.2571e-01  +9.4046e-01  6.15e-01  1.97e-03  1.51e-01  6.74e-05  5.20e-03  7.89e-01  
  7  +2.8227e-01  +5.9665e-01  3.14e-01  9.75e-04  7.40e-02  5.73e-05  2.85e-03  5.67e-01  
  8  +2.5009e-01  +3.9853e-01  1.48e-01  4.31e-04  3.31e-02  3.43e-05  1.38e-03  5.98e-01  
  9  +2.4154e-01  +3.5549e-01  1.14e-01  3.18e-04  2.47e-02  2.92e-05  1.05e-03  3.14e-01  
 10  +2.2789e-01  +2.8634e-01  5.85e-02  1.55e-04  1.23e-02  1.68e-05  5.42e-04  5.62e-01  
 11  +2.1936e-01  +2.4542e-01  2.61e-02  6.64e-05  5.32e-03  8.25e-06  2.43e-04  6.32e-01  
 12  +2.1419e-01  +2.2142e-01  7.24e-03  1.80e-05  1.44e-03  2.60e-06  6.89e-05  8.21e-01  
 13  +2.1211e-01  +2.1329e-01  1.17e-03  2.81e-06  2.26e-04  4.25e-07  1.14e-05  8.73e-01  
 14  +2.1171e-01  +2.1173e-01  2.36e-05  5.61e-08  4.50e-06  8.22e-09  2.32e-07  9.82e-01  
 15  +2.1170e-01  +2.1170e-01  2.36e-07  5.61e-10  4.50e-08  8.22e-11  2.32e-09  9.90e-01  
 16  +2.1170e-01  +2.1170e-01  2.36e-09  5.61e-12  4.50e-10  8.24e-13  2.33e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 48.3939ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:32 PM: Optimal value: 2.117e-01
(CVXPY) Oct 06 04:24:32 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:32 PM: Solver (including time spent in interface) took 4.686e-02 seconds
Iteration: 27, Objective: 0.2117
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:32 PM: Your problem has 791 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:32 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 791
  constraints   = 1291
  nnz(P)        = 0
  nnz(A)        = 11396
  cones (total) = 1
    : Nonnegative = 1,  numel = 1291

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9891e-01  +5.0258e+02  5.02e+02  9.61e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.3436e-01  +1.1124e+02  1.11e+02  4.40e-01  2.14e+01  3.86e-03  5.80e-01  5.79e-01  
  2  +4.9535e-01  +1.5415e+01  1.49e+01  1.33e-01  8.59e+00  2.32e-02  2.48e-01  9.90e-01  
  3  +4.7373e-01  +2.9976e+00  2.52e+00  1.74e-02  1.36e+00  8.49e-03  3.88e-02  8.76e-01  
  4  +4.1063e-01  +1.9997e+00  1.59e+00  5.37e-03  4.29e-01  1.02e-02  1.23e-02  7.16e-01  
  5  +3.8611e-01  +1.7351e+00  1.35e+00  4.23e-03  3.36e-01  7.37e-03  9.94e-03  2.99e-01  
  6  +3.2425e-01  +9.4482e-01  6.21e-01  2.00e-03  1.53e-01  6.41e-05  5.29e-03  7.95e-01  
  7  +2.7356e-01  +5.3485e-01  2.61e-01  8.10e-04  6.12e-02  4.96e-05  2.42e-03  6.60e-01  
  8  +2.4779e-01  +3.9679e-01  1.49e-01  4.29e-04  3.29e-02  3.56e-05  1.38e-03  5.25e-01  
  9  +2.3787e-01  +3.4809e-01  1.10e-01  3.04e-04  2.36e-02  2.87e-05  1.01e-03  3.29e-01  
 10  +2.2454e-01  +2.8356e-01  5.90e-02  1.54e-04  1.22e-02  1.68e-05  5.46e-04  5.25e-01  
 11  +2.1496e-01  +2.3916e-01  2.42e-02  6.06e-05  4.85e-03  7.36e-06  2.28e-04  6.43e-01  
 12  +2.0981e-01  +2.1567e-01  5.87e-03  1.45e-05  1.16e-03  1.81e-06  5.72e-05  7.83e-01  
 13  +2.0836e-01  +2.0932e-01  9.62e-04  2.37e-06  1.88e-04  3.81e-07  9.70e-06  9.78e-01  
 14  +2.0801e-01  +2.0804e-01  2.90e-05  7.10e-08  5.62e-06  1.10e-08  2.97e-07  9.90e-01  
 15  +2.0800e-01  +2.0800e-01  2.93e-07  7.15e-10  5.67e-08  1.11e-10  3.00e-09  9.90e-01  
 16  +2.0800e-01  +2.0800e-01  2.93e-09  7.16e-12  5.67e-10  1.11e-12  3.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 51.3467ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:32 PM: Optimal value: 2.080e-01
(CVXPY) Oct 06 04:24:32 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:32 PM: Solver (including time spent in interface) took 6.251e-02 seconds
Iteration: 28, Objective: 0.2080
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:33 PM: Your problem has 801 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:33 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 801
  constraints   = 1301
  nnz(P)        = 0
  nnz(A)        = 11450
  cones (total) = 1
    : Nonnegative = 1,  numel = 1301

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9887e-01  +5.0255e+02  5.02e+02  9.61e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.3128e-01  +1.1145e+02  1.11e+02  4.40e-01  2.13e+01  3.87e-03  5.79e-01  5.79e-01  
  2  +4.9317e-01  +1.5549e+01  1.51e+01  1.32e-01  8.51e+00  2.34e-02  2.47e-01  9.90e-01  
  3  +4.7056e-01  +3.3282e+00  2.86e+00  1.92e-02  1.49e+00  8.99e-03  4.27e-02  8.61e-01  
  4  +4.0813e-01  +2.0247e+00  1.62e+00  5.71e-03  4.53e-01  9.14e-03  1.31e-02  7.24e-01  
  5  +3.8305e-01  +1.7984e+00  1.42e+00  4.46e-03  3.52e-01  7.32e-03  1.05e-02  2.96e-01  
  6  +3.3226e-01  +1.1016e+00  7.69e-01  2.58e-03  1.97e-01  6.21e-05  6.73e-03  7.78e-01  
  7  +2.7318e-01  +5.1863e-01  2.45e-01  7.80e-04  5.84e-02  3.21e-05  2.31e-03  7.18e-01  
  8  +2.5468e-01  +4.3754e-01  1.83e-01  5.47e-04  4.17e-02  3.48e-05  1.70e-03  3.99e-01  
  9  +2.3734e-01  +3.5316e-01  1.16e-01  3.24e-04  2.51e-02  2.54e-05  1.07e-03  4.32e-01  
 10  +2.2446e-01  +2.9299e-01  6.85e-02  1.82e-04  1.43e-02  1.71e-05  6.38e-04  4.83e-01  
 11  +2.1355e-01  +2.4315e-01  2.96e-02  7.52e-05  5.98e-03  7.84e-06  2.81e-04  6.01e-01  
 12  +2.0944e-01  +2.2447e-01  1.50e-02  3.75e-05  3.00e-03  4.63e-06  1.43e-04  6.13e-01  
 13  +2.0644e-01  +2.1188e-01  5.45e-03  1.32e-05  1.07e-03  1.83e-06  5.23e-05  7.11e-01  
 14  +2.0511e-01  +2.0679e-01  1.68e-03  3.97e-06  3.22e-04  5.89e-07  1.62e-05  7.49e-01  
 15  +2.0457e-01  +2.0475e-01  1.77e-04  4.16e-07  3.37e-05  7.28e-08  1.72e-06  9.90e-01  
 16  +2.0450e-01  +2.0450e-01  1.90e-06  4.48e-09  3.63e-07  7.80e-10  1.86e-08  9.89e-01  
 17  +2.0450e-01  +2.0450e-01  1.91e-08  4.49e-11  3.64e-09  7.82e-12  1.86e-10  9.90e-01  
 18  +2.0450e-01  +2.0450e-01  1.91e-10  4.49e-13  3.64e-11  7.83e-14  1.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.7537ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:33 PM: Optimal value: 2.045e-01
(CVXPY) Oct 06 04:24:33 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:33 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 29, Objective: 0.2045
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:33 PM: Your problem has 811 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:33 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 811
  constraints   = 1311
  nnz(P)        = 0
  nnz(A)        = 11514
  cones (total) = 1
    : Nonnegative = 1,  numel = 1311

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9886e-01  +5.0258e+02  5.02e+02  9.62e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.3013e-01  +1.1144e+02  1.11e+02  4.40e-01  2.12e+01  3.88e-03  5.78e-01  5.79e-01  
  2  +4.9177e-01  +1.5592e+01  1.51e+01  1.31e-01  8.44e+00  2.35e-02  2.46e-01  9.90e-01  
  3  +4.6812e-01  +3.2455e+00  2.78e+00  1.83e-02  1.42e+00  8.98e-03  4.08e-02  8.68e-01  
  4  +4.0285e-01  +2.0134e+00  1.61e+00  5.61e-03  4.43e-01  8.88e-03  1.30e-02  7.30e-01  
  5  +3.7793e-01  +1.7673e+00  1.39e+00  4.39e-03  3.45e-01  6.79e-03  1.03e-02  3.04e-01  
  6  +3.2339e-01  +9.8558e-01  6.62e-01  2.21e-03  1.68e-01  5.76e-05  5.83e-03  7.85e-01  
  7  +2.6718e-01  +4.9952e-01  2.32e-01  7.36e-04  5.50e-02  3.43e-05  2.20e-03  6.96e-01  
  8  +2.4710e-01  +4.0443e-01  1.57e-01  4.65e-04  3.53e-02  3.16e-05  1.47e-03  4.46e-01  
  9  +2.3384e-01  +3.4063e-01  1.07e-01  2.97e-04  2.29e-02  2.42e-05  9.89e-04  3.90e-01  
 10  +2.2310e-01  +2.9040e-01  6.73e-02  1.78e-04  1.40e-02  1.81e-05  6.25e-04  4.89e-01  
 11  +2.1147e-01  +2.3706e-01  2.56e-02  6.46e-05  5.12e-03  7.34e-06  2.42e-04  6.61e-01  
 12  +2.0893e-01  +2.2567e-01  1.67e-02  4.15e-05  3.31e-03  5.27e-06  1.58e-04  4.59e-01  
 13  +2.0518e-01  +2.0999e-01  4.81e-03  1.16e-05  9.29e-04  1.58e-06  4.59e-05  7.48e-01  
 14  +2.0409e-01  +2.0567e-01  1.58e-03  3.74e-06  3.00e-04  5.77e-07  1.53e-05  7.97e-01  
 15  +2.0352e-01  +2.0358e-01  5.53e-05  1.30e-07  1.04e-05  1.98e-08  5.41e-07  9.75e-01  
 16  +2.0350e-01  +2.0350e-01  5.55e-07  1.30e-09  1.04e-07  1.98e-10  5.44e-09  9.90e-01  
 17  +2.0350e-01  +2.0350e-01  5.56e-09  1.30e-11  1.05e-09  1.99e-12  5.45e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.8693ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:33 PM: Optimal value: 2.035e-01
(CVXPY) Oct 06 04:24:33 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:33 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 30, Objective: 0.2035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:33 PM: Your problem has 821 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:33 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 821
  constraints   = 1321
  nnz(P)        = 0
  nnz(A)        = 11545
  cones (total) = 1
    : Nonnegative = 1,  numel = 1321

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9885e-01  +5.0274e+02  5.02e+02  9.62e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.2844e-01  +1.1160e+02  1.11e+02  4.40e-01  2.11e+01  3.88e-03  5.78e-01  5.79e-01  
  2  +4.9038e-01  +1.5691e+01  1.52e+01  1.30e-01  8.39e+00  2.36e-02  2.45e-01  9.90e-01  
  3  +4.6576e-01  +3.2795e+00  2.81e+00  1.82e-02  1.40e+00  9.16e-03  4.06e-02  8.67e-01  
  4  +3.9800e-01  +2.0528e+00  1.65e+00  5.68e-03  4.45e-01  8.97e-03  1.31e-02  7.30e-01  
  5  +3.7136e-01  +1.7135e+00  1.34e+00  4.30e-03  3.35e-01  5.82e-03  1.02e-02  3.46e-01  
  6  +3.0818e-01  +8.1734e-01  5.09e-01  1.67e-03  1.26e-01  5.03e-05  4.50e-03  8.12e-01  
  7  +2.6370e-01  +5.2217e-01  2.58e-01  8.08e-04  6.04e-02  4.81e-05  2.42e-03  5.96e-01  
  8  +2.3857e-01  +3.7822e-01  1.40e-01  4.08e-04  3.09e-02  3.19e-05  1.33e-03  5.34e-01  
  9  +2.2974e-01  +3.3410e-01  1.04e-01  2.92e-04  2.24e-02  2.59e-05  9.83e-04  3.19e-01  
 10  +2.1884e-01  +2.8008e-01  6.12e-02  1.63e-04  1.27e-02  1.75e-05  5.78e-04  5.22e-01  
 11  +2.0925e-01  +2.3471e-01  2.55e-02  6.48e-05  5.10e-03  7.71e-06  2.44e-04  6.32e-01  
 12  +2.0538e-01  +2.1678e-01  1.14e-02  2.85e-05  2.25e-03  3.75e-06  1.10e-04  6.35e-01  
 13  +2.0316e-01  +2.0729e-01  4.13e-03  1.00e-05  8.00e-04  1.49e-06  4.00e-05  7.49e-01  
 14  +2.0204e-01  +2.0293e-01  8.85e-04  2.10e-06  1.68e-04  3.50e-07  8.65e-06  9.26e-01  
 15  +2.0171e-01  +2.0174e-01  3.18e-05  7.52e-08  6.02e-06  1.27e-08  3.14e-07  9.90e-01  
 16  +2.0170e-01  +2.0170e-01  3.19e-07  7.54e-10  6.04e-08  1.27e-10  3.15e-09  9.90e-01  
 17  +2.0170e-01  +2.0170e-01  3.20e-09  7.55e-12  6.04e-10  1.28e-12  3.16e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.9457ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:33 PM: Optimal value: 2.017e-01
(CVXPY) Oct 06 04:24:33 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:33 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Iteration: 31, Objective: 0.2017
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:33 PM: Your problem has 831 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:33 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 831
  constraints   = 1331
  nnz(P)        = 0
  nnz(A)        = 11603
  cones (total) = 1
    : Nonnegative = 1,  numel = 1331

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9885e-01  +5.0273e+02  5.02e+02  9.62e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.2806e-01  +1.1159e+02  1.11e+02  4.40e-01  2.10e+01  3.89e-03  5.78e-01  5.79e-01  
  2  +4.8999e-01  +1.5710e+01  1.52e+01  1.30e-01  8.33e+00  2.36e-02  2.45e-01  9.90e-01  
  3  +4.6509e-01  +3.2982e+00  2.83e+00  1.82e-02  1.40e+00  9.19e-03  4.07e-02  8.65e-01  
  4  +3.9803e-01  +2.0758e+00  1.68e+00  5.82e-03  4.55e-01  8.87e-03  1.35e-02  7.21e-01  
  5  +3.7210e-01  +1.7693e+00  1.40e+00  4.47e-03  3.47e-01  6.22e-03  1.06e-02  3.27e-01  
  6  +3.1349e-01  +8.9050e-01  5.77e-01  1.92e-03  1.44e-01  5.34e-05  5.12e-03  8.04e-01  
  7  +2.6526e-01  +5.2554e-01  2.60e-01  8.25e-04  6.14e-02  4.18e-05  2.46e-03  6.16e-01  
  8  +2.4089e-01  +3.9205e-01  1.51e-01  4.47e-04  3.37e-02  3.13e-05  1.44e-03  5.06e-01  
  9  +2.2970e-01  +3.3598e-01  1.06e-01  2.98e-04  2.28e-02  2.47e-05  1.00e-03  3.69e-01  
 10  +2.1937e-01  +2.8515e-01  6.58e-02  1.76e-04  1.37e-02  1.81e-05  6.21e-04  5.04e-01  
 11  +2.0765e-01  +2.2925e-01  2.16e-02  5.51e-05  4.34e-03  7.03e-06  2.08e-04  7.76e-01  
 12  +2.0457e-01  +2.1576e-01  1.12e-02  2.81e-05  2.21e-03  3.77e-06  1.09e-04  5.46e-01  
 13  +2.0318e-01  +2.0973e-01  6.55e-03  1.60e-05  1.27e-03  2.47e-06  6.31e-05  6.52e-01  
 14  +2.0118e-01  +2.0195e-01  7.78e-04  1.87e-06  1.48e-04  2.90e-07  7.58e-06  8.88e-01  
 15  +2.0090e-01  +2.0091e-01  9.31e-06  2.24e-08  1.77e-06  3.36e-09  9.12e-08  9.88e-01  
 16  +2.0090e-01  +2.0090e-01  9.31e-08  2.24e-10  1.77e-08  3.36e-11  9.13e-10  9.90e-01  
 17  +2.0090e-01  +2.0090e-01  9.32e-10  2.24e-12  1.77e-10  3.36e-13  9.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.3236ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:34 PM: Optimal value: 2.009e-01
(CVXPY) Oct 06 04:24:34 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:34 PM: Solver (including time spent in interface) took 6.251e-02 seconds
Iteration: 32, Objective: 0.2009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:34 PM: Your problem has 841 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:34 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 841
  constraints   = 1341
  nnz(P)        = 0
  nnz(A)        = 11668
  cones (total) = 1
    : Nonnegative = 1,  numel = 1341

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9884e-01  +5.0272e+02  5.02e+02  9.62e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.2775e-01  +1.1156e+02  1.11e+02  4.40e-01  2.08e+01  3.89e-03  5.77e-01  5.79e-01  
  2  +4.8947e-01  +1.5692e+01  1.52e+01  1.30e-01  8.26e+00  2.36e-02  2.44e-01  9.90e-01  
  3  +4.6403e-01  +3.2938e+00  2.83e+00  1.81e-02  1.39e+00  9.15e-03  4.06e-02  8.62e-01  
  4  +3.9869e-01  +2.1221e+00  1.72e+00  6.15e-03  4.78e-01  8.53e-03  1.43e-02  7.10e-01  
  5  +3.7317e-01  +1.8476e+00  1.47e+00  4.74e-03  3.67e-01  6.53e-03  1.12e-02  3.12e-01  
  6  +3.2087e-01  +9.9415e-01  6.73e-01  2.28e-03  1.71e-01  5.59e-05  6.02e-03  7.96e-01  
  7  +2.6766e-01  +5.2976e-01  2.62e-01  8.45e-04  6.25e-02  3.79e-05  2.51e-03  6.64e-01  
  8  +2.4483e-01  +4.1160e-01  1.67e-01  5.02e-04  3.77e-02  3.24e-05  1.59e-03  4.67e-01  
  9  +2.2990e-01  +3.3599e-01  1.06e-01  2.99e-04  2.28e-02  2.40e-05  9.99e-04  4.43e-01  
 10  +2.2082e-01  +2.9176e-01  7.09e-02  1.92e-04  1.49e-02  1.93e-05  6.68e-04  4.73e-01  
 11  +2.0824e-01  +2.3240e-01  2.42e-02  6.18e-05  4.86e-03  7.47e-06  2.31e-04  7.37e-01  
 12  +2.0435e-01  +2.1522e-01  1.09e-02  2.73e-05  2.15e-03  3.57e-06  1.05e-04  6.40e-01  
 13  +2.0297e-01  +2.0925e-01  6.28e-03  1.56e-05  1.23e-03  2.15e-06  6.13e-05  4.93e-01  
 14  +2.0176e-01  +2.0419e-01  2.42e-03  5.89e-06  4.68e-04  9.81e-07  2.34e-05  8.96e-01  
 15  +2.0102e-01  +2.0144e-01  4.22e-04  1.02e-06  8.10e-05  1.75e-07  4.10e-06  8.86e-01  
 16  +2.0086e-01  +2.0089e-01  2.57e-05  6.19e-08  4.93e-06  1.07e-08  2.51e-07  9.84e-01  
 17  +2.0085e-01  +2.0085e-01  2.61e-07  6.29e-10  5.00e-08  1.08e-10  2.54e-09  9.90e-01  
 18  +2.0085e-01  +2.0085e-01  2.61e-09  6.29e-12  5.01e-10  1.09e-12  2.55e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.8421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:34 PM: Optimal value: 2.009e-01
(CVXPY) Oct 06 04:24:34 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:34 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 33, Objective: 0.2009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:34 PM: Your problem has 851 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:34 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 851
  constraints   = 1351
  nnz(P)        = 0
  nnz(A)        = 11722
  cones (total) = 1
    : Nonnegative = 1,  numel = 1351

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9883e-01  +5.0271e+02  5.02e+02  9.62e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.2698e-01  +1.1165e+02  1.11e+02  4.40e-01  2.07e+01  3.89e-03  5.77e-01  5.79e-01  
  2  +4.8872e-01  +1.5717e+01  1.52e+01  1.29e-01  8.20e+00  2.36e-02  2.44e-01  9.90e-01  
  3  +4.6252e-01  +3.2509e+00  2.79e+00  1.77e-02  1.35e+00  9.10e-03  3.99e-02  8.67e-01  
  4  +3.9552e-01  +2.0814e+00  1.69e+00  6.00e-03  4.64e-01  8.22e-03  1.40e-02  7.16e-01  
  5  +3.7065e-01  +1.8334e+00  1.46e+00  4.69e-03  3.62e-01  6.45e-03  1.12e-02  2.99e-01  
  6  +3.2121e-01  +1.0082e+00  6.87e-01  2.36e-03  1.76e-01  5.44e-05  6.25e-03  7.89e-01  
  7  +2.6766e-01  +5.2952e-01  2.62e-01  8.50e-04  6.26e-02  3.37e-05  2.53e-03  6.61e-01  
  8  +2.4636e-01  +4.2166e-01  1.75e-01  5.34e-04  3.99e-02  3.11e-05  1.68e-03  4.37e-01  
  9  +2.3006e-01  +3.3847e-01  1.08e-01  3.08e-04  2.34e-02  2.29e-05  1.03e-03  4.58e-01  
 10  +2.2179e-01  +2.9805e-01  7.63e-02  2.09e-04  1.61e-02  1.95e-05  7.24e-04  4.34e-01  
 11  +2.1116e-01  +2.4767e-01  3.65e-02  9.56e-05  7.47e-03  1.01e-05  3.49e-04  5.76e-01  
 12  +2.0693e-01  +2.2831e-01  2.14e-02  5.49e-05  4.31e-03  6.15e-06  2.06e-04  4.58e-01  
 13  +2.0221e-01  +2.0672e-01  4.51e-03  1.15e-05  9.01e-04  1.50e-06  4.50e-05  8.77e-01  
 14  +2.0105e-01  +2.0194e-01  8.90e-04  2.25e-06  1.76e-04  3.50e-07  9.07e-06  9.61e-01  
 15  +2.0086e-01  +2.0120e-01  3.42e-04  8.68e-07  6.78e-05  1.36e-07  3.51e-06  8.47e-01  
 16  +2.0074e-01  +2.0076e-01  1.67e-05  4.24e-08  3.31e-06  6.66e-09  1.72e-07  9.56e-01  
 17  +2.0073e-01  +2.0073e-01  1.68e-07  4.26e-10  3.32e-08  6.69e-11  1.73e-09  9.90e-01  
 18  +2.0073e-01  +2.0073e-01  1.68e-09  4.26e-12  3.32e-10  6.70e-13  1.73e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 64.7216ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:34 PM: Optimal value: 2.007e-01
(CVXPY) Oct 06 04:24:34 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:34 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 34, Objective: 0.2007
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:34 PM: Your problem has 861 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:34 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 861
  constraints   = 1361
  nnz(P)        = 0
  nnz(A)        = 11788
  cones (total) = 1
    : Nonnegative = 1,  numel = 1361

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9882e-01  +5.0267e+02  5.02e+02  9.62e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.2510e-01  +1.1175e+02  1.11e+02  4.40e-01  2.06e+01  3.90e-03  5.76e-01  5.79e-01  
  2  +4.8695e-01  +1.5796e+01  1.53e+01  1.29e-01  8.12e+00  2.38e-02  2.43e-01  9.90e-01  
  3  +4.5870e-01  +3.1510e+00  2.69e+00  1.66e-02  1.27e+00  9.14e-03  3.75e-02  8.80e-01  
  4  +3.9537e-01  +2.1811e+00  1.79e+00  6.46e-03  4.98e-01  8.59e-03  1.51e-02  6.59e-01  
  5  +3.7243e-01  +1.9362e+00  1.56e+00  5.16e-03  3.97e-01  6.71e-03  1.23e-02  2.86e-01  
  6  +3.2534e-01  +1.1743e+00  8.49e-01  2.93e-03  2.19e-01  5.86e-05  7.67e-03  8.28e-01  
  7  +2.7101e-01  +5.5682e-01  2.86e-01  9.44e-04  6.92e-02  2.84e-05  2.77e-03  6.80e-01  
  8  +2.4939e-01  +4.4920e-01  2.00e-01  6.23e-04  4.63e-02  3.12e-05  1.93e-03  4.20e-01  
  9  +2.2635e-01  +3.2587e-01  9.95e-02  2.86e-04  2.16e-02  2.01e-05  9.65e-04  5.77e-01  
 10  +2.2088e-01  +2.9902e-01  7.81e-02  2.19e-04  1.67e-02  1.83e-05  7.58e-04  3.28e-01  
 11  +2.0965e-01  +2.4484e-01  3.52e-02  9.41e-05  7.25e-03  9.13e-06  3.43e-04  6.09e-01  
 12  +2.0608e-01  +2.2813e-01  2.20e-02  5.80e-05  4.48e-03  6.07e-06  2.16e-04  4.32e-01  
 13  +2.0149e-01  +2.0689e-01  5.39e-03  1.41e-05  1.08e-03  1.72e-06  5.48e-05  8.48e-01  
 14  +2.0002e-01  +2.0069e-01  6.76e-04  1.76e-06  1.35e-04  2.15e-07  7.06e-06  8.92e-01  
 15  +1.9982e-01  +1.9987e-01  5.31e-05  1.38e-07  1.06e-05  1.70e-08  5.58e-07  9.25e-01  
 16  +1.9980e-01  +1.9980e-01  5.39e-07  1.40e-09  1.08e-07  1.73e-10  5.68e-09  9.90e-01  
 17  +1.9980e-01  +1.9980e-01  5.40e-09  1.40e-11  1.08e-09  1.73e-12  5.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 62.8332ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:34 PM: Optimal value: 1.998e-01
(CVXPY) Oct 06 04:24:34 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:34 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 35, Objective: 0.1998
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:35 PM: Your problem has 871 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:35 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 871
  constraints   = 1371
  nnz(P)        = 0
  nnz(A)        = 11846
  cones (total) = 1
    : Nonnegative = 1,  numel = 1371

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9879e-01  +5.0274e+02  5.02e+02  9.62e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.2317e-01  +1.1187e+02  1.11e+02  4.41e-01  2.05e+01  3.90e-03  5.77e-01  5.78e-01  
  2  +4.8507e-01  +1.5936e+01  1.55e+01  1.29e-01  8.08e+00  2.40e-02  2.43e-01  9.90e-01  
  3  +4.5531e-01  +3.1230e+00  2.67e+00  1.61e-02  1.23e+00  9.19e-03  3.64e-02  8.87e-01  
  4  +3.9093e-01  +2.2760e+00  1.89e+00  6.73e-03  5.16e-01  8.85e-03  1.58e-02  6.40e-01  
  5  +3.7078e-01  +2.0064e+00  1.64e+00  5.50e-03  4.20e-01  6.44e-03  1.32e-02  2.86e-01  
  6  +3.2355e-01  +1.2367e+00  9.13e-01  3.16e-03  2.34e-01  5.77e-05  8.25e-03  8.52e-01  
  7  +2.6975e-01  +5.7096e-01  3.01e-01  1.00e-03  7.29e-02  2.88e-05  2.94e-03  6.86e-01  
  8  +2.4170e-01  +4.2808e-01  1.86e-01  5.75e-04  4.24e-02  3.46e-05  1.83e-03  5.44e-01  
  9  +2.2257e-01  +3.2247e-01  9.99e-02  2.87e-04  2.14e-02  2.25e-05  9.82e-04  5.41e-01  
 10  +2.1643e-01  +2.9089e-01  7.45e-02  2.09e-04  1.57e-02  1.92e-05  7.35e-04  3.74e-01  
 11  +2.0566e-01  +2.3763e-01  3.20e-02  8.54e-05  6.50e-03  8.76e-06  3.19e-04  6.13e-01  
 12  +2.0261e-01  +2.2347e-01  2.09e-02  5.37e-05  4.16e-03  6.65e-06  2.03e-04  5.36e-01  
 13  +1.9855e-01  +2.0613e-01  7.58e-03  1.89e-05  1.48e-03  2.52e-06  7.46e-05  7.05e-01  
 14  +1.9676e-01  +1.9856e-01  1.80e-03  4.47e-06  3.48e-04  6.68e-07  1.83e-05  8.90e-01  
 15  +1.9627e-01  +1.9673e-01  4.61e-04  1.13e-06  8.84e-05  1.72e-07  4.74e-06  7.86e-01  
 16  +1.9611e-01  +1.9615e-01  3.23e-05  7.91e-08  6.16e-06  1.27e-08  3.34e-07  9.90e-01  
 17  +1.9610e-01  +1.9610e-01  3.24e-07  7.95e-10  6.19e-08  1.27e-10  3.36e-09  9.90e-01  
 18  +1.9610e-01  +1.9610e-01  3.25e-09  7.96e-12  6.20e-10  1.27e-12  3.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 68.8856ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:35 PM: Optimal value: 1.961e-01
(CVXPY) Oct 06 04:24:35 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:35 PM: Solver (including time spent in interface) took 7.811e-02 seconds
Iteration: 36, Objective: 0.1961
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:35 PM: Your problem has 881 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:35 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 881
  constraints   = 1381
  nnz(P)        = 0
  nnz(A)        = 11927
  cones (total) = 1
    : Nonnegative = 1,  numel = 1381

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9879e-01  +5.0270e+02  5.02e+02  9.62e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.2254e-01  +1.1181e+02  1.11e+02  4.41e-01  2.04e+01  3.91e-03  5.76e-01  5.79e-01  
  2  +4.8430e-01  +1.6015e+01  1.55e+01  1.28e-01  7.95e+00  2.41e-02  2.42e-01  9.90e-01  
  3  +4.5187e-01  +2.8078e+00  2.36e+00  1.37e-02  1.04e+00  9.04e-03  3.11e-02  9.10e-01  
  4  +3.9228e-01  +2.3392e+00  1.95e+00  6.93e-03  5.29e-01  9.45e-03  1.62e-02  5.72e-01  
  5  +3.6958e-01  +2.0492e+00  1.68e+00  5.58e-03  4.24e-01  6.88e-03  1.34e-02  3.00e-01  
  6  +3.1619e-01  +1.1095e+00  7.93e-01  2.69e-03  1.99e-01  6.13e-05  7.11e-03  8.55e-01  
  7  +2.6332e-01  +5.4189e-01  2.79e-01  9.23e-04  6.69e-02  3.51e-05  2.75e-03  6.77e-01  
  8  +2.3568e-01  +3.9757e-01  1.62e-01  4.98e-04  3.67e-02  3.27e-05  1.61e-03  5.59e-01  
  9  +2.2326e-01  +3.3163e-01  1.08e-01  3.16e-04  2.35e-02  2.56e-05  1.07e-03  4.28e-01  
 10  +2.1528e-01  +2.8962e-01  7.43e-02  2.10e-04  1.58e-02  1.99e-05  7.37e-04  4.27e-01  
 11  +2.0446e-01  +2.3506e-01  3.06e-02  8.26e-05  6.27e-03  8.82e-06  3.07e-04  6.38e-01  
 12  +2.0149e-01  +2.2166e-01  2.02e-02  5.22e-05  4.04e-03  6.56e-06  1.96e-04  5.14e-01  
 13  +1.9745e-01  +2.0441e-01  6.96e-03  1.74e-05  1.36e-03  2.36e-06  6.84e-05  7.22e-01  
 14  +1.9588e-01  +1.9786e-01  1.98e-03  4.93e-06  3.85e-04  7.09e-07  1.99e-05  8.02e-01  
 15  +1.9524e-01  +1.9534e-01  1.06e-04  2.64e-07  2.05e-05  3.73e-08  1.08e-06  9.55e-01  
 16  +1.9520e-01  +1.9520e-01  1.19e-06  2.95e-09  2.29e-07  4.16e-10  1.21e-08  9.89e-01  
 17  +1.9520e-01  +1.9520e-01  1.19e-08  2.95e-11  2.30e-09  4.17e-12  1.22e-10  9.90e-01  
 18  +1.9520e-01  +1.9520e-01  1.19e-10  2.96e-13  2.31e-11  4.19e-14  1.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.222ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:35 PM: Optimal value: 1.952e-01
(CVXPY) Oct 06 04:24:35 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:35 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 37, Objective: 0.1952
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:35 PM: Your problem has 891 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:35 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 891
  constraints   = 1391
  nnz(P)        = 0
  nnz(A)        = 12008
  cones (total) = 1
    : Nonnegative = 1,  numel = 1391

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9877e-01  +5.0313e+02  5.03e+02  9.63e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.1968e-01  +1.1192e+02  1.11e+02  4.40e-01  2.03e+01  3.92e-03  5.75e-01  5.79e-01  
  2  +4.8107e-01  +1.6209e+01  1.57e+01  1.26e-01  7.81e+00  2.43e-02  2.39e-01  9.90e-01  
  3  +4.4579e-01  +2.8742e+00  2.43e+00  1.36e-02  1.03e+00  9.03e-03  3.11e-02  9.18e-01  
  4  +3.8859e-01  +2.5251e+00  2.14e+00  7.57e-03  5.76e-01  9.80e-03  1.77e-02  5.24e-01  
  5  +3.6344e-01  +2.0968e+00  1.73e+00  5.77e-03  4.37e-01  6.63e-03  1.38e-02  3.27e-01  
  6  +3.0369e-01  +9.5423e-01  6.51e-01  2.18e-03  1.60e-01  5.94e-05  5.82e-03  8.65e-01  
  7  +2.5696e-01  +5.5635e-01  2.99e-01  9.86e-04  7.16e-02  4.77e-05  2.93e-03  5.98e-01  
  8  +2.2548e-01  +3.6499e-01  1.40e-01  4.27e-04  3.14e-02  3.12e-05  1.41e-03  6.31e-01  
  9  +2.1771e-01  +3.2534e-01  1.08e-01  3.15e-04  2.34e-02  2.80e-05  1.07e-03  3.67e-01  
 10  +2.0894e-01  +2.7778e-01  6.88e-02  1.95e-04  1.46e-02  2.01e-05  6.90e-04  4.85e-01  
 11  +1.9919e-01  +2.2709e-01  2.79e-02  7.67e-05  5.79e-03  8.64e-06  2.85e-04  6.51e-01  
 12  +1.9626e-01  +2.1343e-01  1.72e-02  4.55e-05  3.50e-03  5.80e-06  1.72e-04  5.37e-01  
 13  +1.9317e-01  +1.9956e-01  6.39e-03  1.65e-05  1.28e-03  2.29e-06  6.53e-05  7.61e-01  
 14  +1.9180e-01  +1.9393e-01  2.13e-03  5.46e-06  4.22e-04  7.59e-07  2.23e-05  6.96e-01  
 15  +1.9128e-01  +1.9182e-01  5.32e-04  1.36e-06  1.05e-04  1.96e-07  5.64e-06  8.43e-01  
 16  +1.9110e-01  +1.9111e-01  1.02e-05  2.60e-08  2.00e-06  3.78e-09  1.08e-07  9.87e-01  
 17  +1.9110e-01  +1.9110e-01  1.02e-07  2.60e-10  2.00e-08  3.78e-11  1.08e-09  9.90e-01  
 18  +1.9110e-01  +1.9110e-01  1.02e-09  2.60e-12  2.00e-10  3.78e-13  1.08e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.5679ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:35 PM: Optimal value: 1.911e-01
(CVXPY) Oct 06 04:24:35 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:35 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 38, Objective: 0.1911
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:35 PM: Your problem has 901 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:35 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 901
  constraints   = 1401
  nnz(P)        = 0
  nnz(A)        = 12060
  cones (total) = 1
    : Nonnegative = 1,  numel = 1401

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9875e-01  +5.0318e+02  5.03e+02  9.63e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.1768e-01  +1.1213e+02  1.12e+02  4.40e-01  2.02e+01  3.92e-03  5.75e-01  5.78e-01  
  2  +4.7959e-01  +1.6286e+01  1.58e+01  1.26e-01  7.76e+00  2.45e-02  2.39e-01  9.90e-01  
  3  +4.4326e-01  +2.9161e+00  2.47e+00  1.37e-02  1.04e+00  9.04e-03  3.13e-02  9.17e-01  
  4  +3.8598e-01  +2.6174e+00  2.23e+00  7.88e-03  5.96e-01  9.93e-03  1.84e-02  5.13e-01  
  5  +3.5102e-01  +1.8626e+00  1.51e+00  5.07e-03  3.80e-01  4.19e-03  1.24e-02  5.05e-01  
  6  +2.8680e-01  +7.2486e-01  4.38e-01  1.46e-03  1.06e-01  4.34e-04  3.99e-03  7.76e-01  
  7  +2.6318e-01  +6.0902e-01  3.46e-01  1.12e-03  8.18e-02  3.18e-04  3.23e-03  3.34e-01  
  8  +2.2795e-01  +3.8649e-01  1.59e-01  4.88e-04  3.57e-02  1.35e-04  1.57e-03  5.80e-01  
  9  +2.1862e-01  +3.3780e-01  1.19e-01  3.51e-04  2.59e-02  9.64e-05  1.17e-03  3.75e-01  
 10  +2.0948e-01  +2.8828e-01  7.88e-02  2.26e-04  1.68e-02  5.73e-05  7.88e-04  4.68e-01  
 11  +1.9892e-01  +2.3311e-01  3.42e-02  9.47e-05  7.10e-03  2.35e-05  3.50e-04  6.04e-01  
 12  +1.9611e-01  +2.1903e-01  2.29e-02  6.15e-05  4.69e-03  1.43e-05  2.30e-04  5.37e-01  
 13  +1.9223e-01  +2.0188e-01  9.64e-03  2.50e-05  1.93e-03  5.65e-06  9.73e-05  6.44e-01  
 14  +1.8990e-01  +1.9158e-01  1.68e-03  4.34e-06  3.34e-04  6.62e-07  1.76e-05  9.90e-01  
 15  +1.8958e-01  +1.9039e-01  8.17e-04  2.10e-06  1.61e-04  3.22e-07  8.60e-06  7.19e-01  
 16  +1.8928e-01  +1.8931e-01  2.93e-05  7.52e-08  5.78e-06  1.14e-08  3.11e-07  9.73e-01  
 17  +1.8927e-01  +1.8927e-01  2.95e-07  7.55e-10  5.81e-08  1.15e-10  3.12e-09  9.90e-01  
 18  +1.8927e-01  +1.8927e-01  2.95e-09  7.56e-12  5.81e-10  1.15e-12  3.13e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.2407ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:35 PM: Optimal value: 1.893e-01
(CVXPY) Oct 06 04:24:35 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:35 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 39, Objective: 0.1893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:36 PM: Your problem has 911 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:36 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 911
  constraints   = 1411
  nnz(P)        = 0
  nnz(A)        = 12149
  cones (total) = 1
    : Nonnegative = 1,  numel = 1411

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9875e-01  +5.0318e+02  5.03e+02  9.63e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.1732e-01  +1.1215e+02  1.12e+02  4.40e-01  2.01e+01  3.93e-03  5.74e-01  5.79e-01  
  2  +4.7925e-01  +1.6282e+01  1.58e+01  1.26e-01  7.69e+00  2.45e-02  2.38e-01  9.90e-01  
  3  +4.4273e-01  +2.9701e+00  2.53e+00  1.40e-02  1.05e+00  9.01e-03  3.21e-02  9.14e-01  
  4  +3.8575e-01  +2.6595e+00  2.27e+00  8.10e-03  6.11e-01  9.77e-03  1.90e-02  5.11e-01  
  5  +3.5807e-01  +2.0841e+00  1.73e+00  5.83e-03  4.37e-01  5.51e-03  1.41e-02  4.01e-01  
  6  +2.9503e-01  +8.3032e-01  5.35e-01  1.79e-03  1.30e-01  1.80e-04  4.82e-03  8.46e-01  
  7  +2.5728e-01  +5.9045e-01  3.33e-01  1.09e-03  7.89e-02  1.21e-04  3.20e-03  4.84e-01  
  8  +2.2539e-01  +3.7810e-01  1.53e-01  4.74e-04  3.45e-02  5.75e-05  1.55e-03  5.92e-01  
  9  +2.1694e-01  +3.3288e-01  1.16e-01  3.44e-04  2.53e-02  4.55e-05  1.16e-03  3.75e-01  
 10  +2.0814e-01  +2.8384e-01  7.57e-02  2.18e-04  1.62e-02  3.00e-05  7.66e-04  4.76e-01  
 11  +1.9871e-01  +2.3386e-01  3.51e-02  9.81e-05  7.32e-03  1.38e-05  3.63e-04  5.72e-01  
 12  +1.9447e-01  +2.1221e-01  1.77e-02  4.83e-05  3.64e-03  7.09e-06  1.84e-04  6.16e-01  
 13  +1.9202e-01  +2.0120e-01  9.18e-03  2.43e-05  1.85e-03  3.64e-06  9.49e-05  6.34e-01  
 14  +1.8959e-01  +1.9073e-01  1.14e-03  2.97e-06  2.28e-04  4.19e-07  1.21e-05  9.04e-01  
 15  +1.8925e-01  +1.8939e-01  1.43e-04  3.72e-07  2.85e-05  5.38e-08  1.54e-06  9.32e-01  
 16  +1.8920e-01  +1.8920e-01  2.59e-06  6.71e-09  5.13e-07  9.70e-10  2.78e-08  9.85e-01  
 17  +1.8920e-01  +1.8920e-01  2.60e-08  6.75e-11  5.16e-09  9.76e-12  2.80e-10  9.90e-01  
 18  +1.8920e-01  +1.8920e-01  2.61e-10  6.77e-13  5.17e-11  9.80e-14  2.81e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.5935ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:36 PM: Optimal value: 1.892e-01
(CVXPY) Oct 06 04:24:36 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:36 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 40, Objective: 0.1892
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:36 PM: Your problem has 921 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:36 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 921
  constraints   = 1421
  nnz(P)        = 0
  nnz(A)        = 12237
  cones (total) = 1
    : Nonnegative = 1,  numel = 1421

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9869e-01  +5.0329e+02  5.03e+02  9.63e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.1456e-01  +1.1241e+02  1.12e+02  4.41e-01  2.00e+01  3.93e-03  5.75e-01  5.77e-01  
  2  +4.7682e-01  +1.6458e+01  1.60e+01  1.26e-01  7.67e+00  2.48e-02  2.39e-01  9.90e-01  
  3  +4.3916e-01  +3.1830e+00  2.74e+00  1.52e-02  1.13e+00  9.22e-03  3.46e-02  9.02e-01  
  4  +3.8103e-01  +2.8155e+00  2.43e+00  8.70e-03  6.52e-01  9.73e-03  2.04e-02  5.17e-01  
  5  +3.5266e-01  +2.2118e+00  1.86e+00  6.18e-03  4.62e-01  6.09e-03  1.49e-02  3.78e-01  
  6  +2.9501e-01  +8.6595e-01  5.71e-01  1.94e-03  1.41e-01  5.35e-05  5.23e-03  8.64e-01  
  7  +2.5147e-01  +5.7172e-01  3.20e-01  1.06e-03  7.61e-02  5.95e-05  3.14e-03  5.57e-01  
  8  +2.1935e-01  +3.6034e-01  1.41e-01  4.38e-04  3.17e-02  3.27e-05  1.44e-03  6.27e-01  
  9  +2.1094e-01  +3.1540e-01  1.04e-01  3.11e-04  2.28e-02  2.67e-05  1.06e-03  3.50e-01  
 10  +2.0330e-01  +2.7359e-01  7.03e-02  2.03e-04  1.50e-02  2.04e-05  7.14e-04  4.74e-01  
 11  +1.9429e-01  +2.2674e-01  3.24e-02  9.06e-05  6.76e-03  9.76e-06  3.36e-04  5.83e-01  
 12  +1.8992e-01  +2.0522e-01  1.53e-02  4.14e-05  3.13e-03  5.06e-06  1.59e-04  6.54e-01  
 13  +1.8707e-01  +1.9277e-01  5.70e-03  1.51e-05  1.15e-03  1.93e-06  6.02e-05  7.34e-01  
 14  +1.8553e-01  +1.8637e-01  8.39e-04  2.19e-06  1.67e-04  2.79e-07  9.09e-06  8.70e-01  
 15  +1.8526e-01  +1.8530e-01  4.09e-05  1.06e-07  8.11e-06  1.39e-08  4.46e-07  9.62e-01  
 16  +1.8525e-01  +1.8525e-01  4.10e-07  1.07e-09  8.13e-08  1.39e-10  4.48e-09  9.90e-01  
 17  +1.8525e-01  +1.8525e-01  4.10e-09  1.07e-11  8.13e-10  1.39e-12  4.48e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.2627ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:36 PM: Optimal value: 1.853e-01
(CVXPY) Oct 06 04:24:36 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:36 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 41, Objective: 0.1853
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:36 PM: Your problem has 929 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:36 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 929
  constraints   = 1429
  nnz(P)        = 0
  nnz(A)        = 12278
  cones (total) = 1
    : Nonnegative = 1,  numel = 1429

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +5.0326e+02  5.03e+02  9.63e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.1332e-01  +1.1252e+02  1.12e+02  4.41e-01  1.99e+01  3.94e-03  5.74e-01  5.77e-01  
  2  +4.7566e-01  +1.6482e+01  1.60e+01  1.26e-01  7.62e+00  2.49e-02  2.39e-01  9.90e-01  
  3  +4.3717e-01  +3.2508e+00  2.81e+00  1.55e-02  1.15e+00  9.21e-03  3.53e-02  9.06e-01  
  4  +3.7871e-01  +2.8398e+00  2.46e+00  8.84e-03  6.60e-01  9.47e-03  2.08e-02  5.20e-01  
  5  +3.5447e-01  +2.3515e+00  2.00e+00  6.70e-03  4.99e-01  6.53e-03  1.61e-02  3.30e-01  
  6  +3.0362e-01  +1.0857e+00  7.82e-01  2.70e-03  1.96e-01  5.78e-05  7.17e-03  8.72e-01  
  7  +2.4743e-01  +5.0790e-01  2.60e-01  8.84e-04  6.27e-02  4.22e-05  2.68e-03  7.26e-01  
  8  +2.2424e-01  +3.8817e-01  1.64e-01  5.20e-04  3.76e-02  3.58e-05  1.68e-03  5.05e-01  
  9  +2.0994e-01  +3.1094e-01  1.01e-01  3.03e-04  2.22e-02  2.49e-05  1.03e-03  4.65e-01  
 10  +2.0360e-01  +2.7740e-01  7.38e-02  2.15e-04  1.59e-02  2.06e-05  7.54e-04  4.13e-01  
 11  +1.9394e-01  +2.2795e-01  3.40e-02  9.57e-05  7.13e-03  9.96e-06  3.54e-04  5.94e-01  
 12  +1.8927e-01  +2.0523e-01  1.60e-02  4.35e-05  3.28e-03  5.19e-06  1.67e-04  6.62e-01  
 13  +1.8639e-01  +1.9273e-01  6.34e-03  1.69e-05  1.28e-03  2.13e-06  6.74e-05  7.23e-01  
 14  +1.8465e-01  +1.8553e-01  8.87e-04  2.33e-06  1.77e-04  2.90e-07  9.68e-06  8.78e-01  
 15  +1.8437e-01  +1.8441e-01  4.79e-05  1.25e-07  9.55e-06  1.61e-08  5.26e-07  9.60e-01  
 16  +1.8435e-01  +1.8435e-01  4.80e-07  1.26e-09  9.58e-08  1.62e-10  5.29e-09  9.90e-01  
 17  +1.8435e-01  +1.8435e-01  4.81e-09  1.26e-11  9.58e-10  1.62e-12  5.29e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.1455ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:36 PM: Optimal value: 1.844e-01
(CVXPY) Oct 06 04:24:36 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:24:36 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 42, Objective: 0.1844
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:37 PM: Your problem has 939 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:37 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 939
  constraints   = 1439
  nnz(P)        = 0
  nnz(A)        = 12339
  cones (total) = 1
    : Nonnegative = 1,  numel = 1439

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +5.0327e+02  5.03e+02  9.63e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.1244e-01  +1.1256e+02  1.12e+02  4.41e-01  1.98e+01  3.94e-03  5.74e-01  5.77e-01  
  2  +4.7443e-01  +1.6460e+01  1.60e+01  1.26e-01  7.56e+00  2.49e-02  2.39e-01  9.90e-01  
  3  +4.3615e-01  +3.3042e+00  2.87e+00  1.59e-02  1.18e+00  8.97e-03  3.66e-02  9.03e-01  
  4  +3.7648e-01  +2.8992e+00  2.52e+00  9.12e-03  6.77e-01  9.22e-03  2.15e-02  5.29e-01  
  5  +3.5314e-01  +2.4422e+00  2.09e+00  7.01e-03  5.19e-01  6.65e-03  1.69e-02  3.16e-01  
  6  +3.0953e-01  +1.2315e+00  9.22e-01  3.24e-03  2.34e-01  5.83e-05  8.54e-03  8.70e-01  
  7  +2.5598e-01  +5.6731e-01  3.11e-01  1.07e-03  7.57e-02  3.55e-05  3.18e-03  6.89e-01  
  8  +2.2545e-01  +4.0497e-01  1.80e-01  5.72e-04  4.11e-02  3.76e-05  1.85e-03  6.02e-01  
  9  +2.0830e-01  +3.0540e-01  9.71e-02  2.92e-04  2.13e-02  2.37e-05  1.00e-03  5.39e-01  
 10  +2.0391e-01  +2.8097e-01  7.71e-02  2.28e-04  1.67e-02  2.09e-05  8.00e-04  3.46e-01  
 11  +1.9404e-01  +2.2936e-01  3.53e-02  1.00e-04  7.42e-03  1.00e-05  3.72e-04  5.94e-01  
 12  +1.8932e-01  +2.0550e-01  1.62e-02  4.45e-05  3.34e-03  5.30e-06  1.71e-04  7.10e-01  
 13  +1.8662e-01  +1.9381e-01  7.19e-03  1.93e-05  1.46e-03  2.41e-06  7.67e-05  6.61e-01  
 14  +1.8464e-01  +1.8549e-01  8.56e-04  2.26e-06  1.71e-04  2.75e-07  9.39e-06  8.99e-01  
 15  +1.8437e-01  +1.8442e-01  5.38e-05  1.42e-07  1.07e-05  1.79e-08  5.95e-07  9.55e-01  
 16  +1.8435e-01  +1.8435e-01  5.41e-07  1.43e-09  1.08e-07  1.80e-10  5.99e-09  9.90e-01  
 17  +1.8435e-01  +1.8435e-01  5.42e-09  1.43e-11  1.08e-09  1.81e-12  6.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.8363ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:37 PM: Optimal value: 1.844e-01
(CVXPY) Oct 06 04:24:37 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:37 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 43, Objective: 0.1844
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:37 PM: Your problem has 940 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:37 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 940
  constraints   = 1440
  nnz(P)        = 0
  nnz(A)        = 12355
  cones (total) = 1
    : Nonnegative = 1,  numel = 1440

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +5.0327e+02  5.03e+02  9.63e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.1241e-01  +1.1256e+02  1.12e+02  4.41e-01  1.98e+01  3.94e-03  5.74e-01  5.77e-01  
  2  +4.7439e-01  +1.6458e+01  1.60e+01  1.26e-01  7.56e+00  2.48e-02  2.39e-01  9.90e-01  
  3  +4.3602e-01  +3.3065e+00  2.87e+00  1.60e-02  1.18e+00  8.96e-03  3.66e-02  9.02e-01  
  4  +3.7608e-01  +2.9011e+00  2.53e+00  9.13e-03  6.77e-01  9.20e-03  2.15e-02  5.30e-01  
  5  +3.5288e-01  +2.4476e+00  2.09e+00  7.02e-03  5.21e-01  6.65e-03  1.70e-02  3.15e-01  
  6  +3.0979e-01  +1.2400e+00  9.30e-01  3.27e-03  2.36e-01  5.82e-05  8.63e-03  8.69e-01  
  7  +2.5629e-01  +5.6925e-01  3.13e-01  1.08e-03  7.61e-02  3.54e-05  3.20e-03  6.91e-01  
  8  +2.2558e-01  +4.0615e-01  1.81e-01  5.76e-04  4.13e-02  3.78e-05  1.86e-03  6.03e-01  
  9  +2.0827e-01  +3.0533e-01  9.71e-02  2.92e-04  2.13e-02  2.37e-05  1.00e-03  5.42e-01  
 10  +2.0395e-01  +2.8128e-01  7.73e-02  2.29e-04  1.68e-02  2.10e-05  8.04e-04  3.42e-01  
 11  +1.9395e-01  +2.2899e-01  3.50e-02  9.96e-05  7.36e-03  9.95e-06  3.69e-04  6.01e-01  
 12  +1.8922e-01  +2.0513e-01  1.59e-02  4.38e-05  3.28e-03  5.22e-06  1.68e-04  7.16e-01  
 13  +1.8651e-01  +1.9343e-01  6.92e-03  1.86e-05  1.40e-03  2.32e-06  7.40e-05  6.73e-01  
 14  +1.8491e-01  +1.8681e-01  1.89e-03  4.99e-06  3.77e-04  6.48e-07  2.07e-05  8.00e-01  
 15  +1.8437e-01  +1.8473e-01  3.51e-04  9.18e-07  6.93e-05  1.20e-07  3.90e-06  8.33e-01  
 16  +1.8425e-01  +1.8426e-01  9.02e-06  2.35e-08  1.78e-06  3.06e-09  1.01e-07  9.78e-01  
 17  +1.8425e-01  +1.8425e-01  9.04e-08  2.36e-10  1.78e-08  3.06e-11  1.01e-09  9.90e-01  
 18  +1.8425e-01  +1.8425e-01  9.05e-10  2.36e-12  1.78e-10  3.08e-13  1.01e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 74.9066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:37 PM: Optimal value: 1.843e-01
(CVXPY) Oct 06 04:24:37 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:37 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Iteration: 44, Objective: 0.1843
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:37 PM: Your problem has 941 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:37 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Invoking solver CLARABEL  to obtain a solution.
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres   -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 941
  constraints   = 1441
  nnz(P)        = 0
  nnz(A)        = 12363
  cones (total) = 1
    : Nonnegative = 1,  numel = 1441

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9868e-01  +5.0327e+02  5.03e+02  9.63e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.1236e-01  +1.1256e+02  1.12e+02  4.41e-01  1.98e+01  3.94e-03  5.74e-01  5.77e-01  
  2  +4.7430e-01  +1.6454e+01  1.60e+01  1.26e-01  7.55e+00  2.48e-02  2.39e-01  9.90e-01  
  3  +4.3595e-01  +3.3103e+00  2.87e+00  1.60e-02  1.18e+00  8.94e-03  3.67e-02  9.02e-01  
  4  +3.7633e-01  +2.9055e+00  2.53e+00  9.17e-03  6.80e-01  9.17e-03  2.17e-02  5.28e-01  
  5  +3.5309e-01  +2.4571e+00  2.10e+00  7.07e-03  5.24e-01  6.67e-03  1.71e-02  3.15e-01  
  6  +3.1079e-01  +1.2636e+00  9.53e-01  3.36e-03  2.43e-01  5.84e-05  8.85e-03  8.69e-01  
  7  +2.5734e-01  +5.7574e-01  3.18e-01  1.10e-03  7.76e-02  3.38e-05  3.25e-03  6.88e-01  
  8  +2.2655e-01  +4.1272e-01  1.86e-01  5.96e-04  4.27e-02  3.81e-05  1.92e-03  5.98e-01  
  9  +2.0820e-01  +3.0491e-01  9.67e-02  2.91e-04  2.12e-02  2.33e-05  1.00e-03  5.58e-01  
 10  +2.0414e-01  +2.8237e-01  7.82e-02  2.32e-04  1.70e-02  2.08e-05  8.15e-04  3.24e-01  
 11  +1.9402e-01  +2.2953e-01  3.55e-02  1.01e-04  7.46e-03  9.96e-06  3.75e-04  6.02e-01  
 12  +1.8914e-01  +2.0479e-01  1.57e-02  4.31e-05  3.23e-03  5.11e-06  1.66e-04  7.26e-01  
 13  +1.8645e-01  +1.9321e-01  6.76e-03  1.82e-05  1.37e-03  2.26e-06  7.25e-05  6.71e-01  
 14  +1.8493e-01  +1.8687e-01  1.94e-03  5.15e-06  3.89e-04  6.63e-07  2.13e-05  7.85e-01  
 15  +1.8438e-01  +1.8475e-01  3.72e-04  9.76e-07  7.37e-05  1.26e-07  4.14e-06  8.30e-01  
 16  +1.8425e-01  +1.8426e-01  1.01e-05  2.63e-08  1.99e-06  3.40e-09  1.13e-07  9.76e-01  
 17  +1.8425e-01  +1.8425e-01  1.01e-07  2.64e-10  1.99e-08  3.41e-11  1.13e-09  9.90e-01  
 18  +1.8425e-01  +1.8425e-01  1.01e-09  2.65e-12  2.00e-10  3.43e-13  1.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 77.6764ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:37 PM: Optimal value: 1.843e-01
(CVXPY) Oct 06 04:24:37 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:37 PM: Solver (including time spent in interface) took 7.812e-02 seconds
FULL MODEL:
  Accruacy: 0.769
  Our objective: 0.538

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.158)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x9 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 0 AND x4 = 0 AND x6 = 0 AND x8 = 0 AND x9 = 1)                                             <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.02)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x3 = 1 AND x5 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)                                             <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.004)
 OR (x1 = 0 AND x2 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x7 = 0 AND x9 = 0)                                             <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.008)
 OR (x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.014)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 16.396789073944092
Best over terms:
  Our final objective: 0.15799999999999997
    Its accruacy: 0.579
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15799999999999997
  Highest accruacy: 0.579
   dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 130 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 131 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 132 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 133 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 134 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 135 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

