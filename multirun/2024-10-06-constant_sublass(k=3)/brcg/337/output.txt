Command:
python test_script.py -s constant_subclass -d 9 -n 500 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.176
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 9.

Computed total variation: 0.7080000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:59 PM: Your problem has 269 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:59 PM: Finished problem compilation (took 4.734e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 269
  constraints   = 519
  nnz(P)        = 0
  nnz(A)        = 3019
  cones (total) = 1
    : Nonnegative = 1,  numel = 519

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9972e-01  +2.5101e+02  2.51e+02  9.38e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.8010e-01  +5.4664e+01  5.41e+01  4.07e-01  1.59e+01  3.78e-03  5.78e-01  5.86e-01  
  2  +5.2821e-01  +6.2648e+00  5.74e+00  1.27e-01  6.29e+00  1.69e-02  2.62e-01  9.77e-01  
  3  +5.0209e-01  +1.4233e+00  9.21e-01  2.89e-02  1.42e+00  3.97e-05  1.79e-01  8.92e-01  
  4  +4.9924e-01  +7.3480e-01  2.36e-01  7.12e-03  3.61e-01  2.34e-05  4.01e-02  8.22e-01  
  5  +4.8229e-01  +6.9330e-01  2.11e-01  1.60e-03  8.34e-02  1.44e-04  5.01e-03  9.01e-01  
  6  +4.6474e-01  +5.7689e-01  1.12e-01  6.96e-04  3.59e-02  7.28e-05  2.36e-03  6.04e-01  
  7  +4.4725e-01  +4.9963e-01  5.24e-02  2.49e-04  1.28e-02  3.69e-05  9.66e-04  7.06e-01  
  8  +4.3634e-01  +4.5016e-01  1.38e-02  5.96e-05  3.06e-03  1.13e-05  2.59e-04  9.90e-01  
  9  +4.3222e-01  +4.3259e-01  3.78e-04  1.58e-06  8.10e-05  2.72e-07  7.17e-06  9.75e-01  
 10  +4.3210e-01  +4.3210e-01  3.78e-06  1.58e-08  8.10e-07  2.72e-09  7.18e-08  9.90e-01  
 11  +4.3210e-01  +4.3210e-01  3.78e-08  1.58e-10  8.10e-09  2.72e-11  7.18e-10  9.90e-01  
 12  +4.3210e-01  +4.3210e-01  3.78e-10  1.58e-12  8.10e-11  2.72e-13  7.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.0442ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:59 PM: Optimal value: 4.321e-01
(CVXPY) Oct 06 04:14:59 PM: Compilation took 4.734e-02 seconds
(CVXPY) Oct 06 04:14:59 PM: Solver (including time spent in interface) took 1.555e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4321
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:59 PM: Your problem has 279 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:59 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 279
  constraints   = 529
  nnz(P)        = 0
  nnz(A)        = 3520
  cones (total) = 1
    : Nonnegative = 1,  numel = 529

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +2.5124e+02  2.51e+02  9.39e-01  2.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.7762e-01  +5.4764e+01  5.42e+01  4.11e-01  1.63e+01  3.78e-03  5.80e-01  5.86e-01  
  2  +5.2572e-01  +6.2450e+00  5.72e+00  1.26e-01  6.35e+00  1.74e-02  2.58e-01  9.90e-01  
  3  +5.0358e-01  +1.3766e+00  8.73e-01  3.06e-02  1.58e+00  5.10e-04  1.18e-01  9.50e-01  
  4  +4.9704e-01  +9.1798e-01  4.21e-01  8.14e-03  4.43e-01  7.66e-04  2.40e-02  8.92e-01  
  5  +4.7821e-01  +8.0856e-01  3.30e-01  2.27e-03  1.26e-01  1.79e-03  6.31e-03  7.54e-01  
  6  +4.6484e-01  +7.3536e-01  2.71e-01  1.51e-03  8.32e-02  1.47e-03  4.28e-03  4.06e-01  
  7  +4.3858e-01  +6.1205e-01  1.73e-01  7.07e-04  3.87e-02  8.18e-04  2.10e-03  6.75e-01  
  8  +4.2599e-01  +5.5652e-01  1.31e-01  5.52e-04  3.02e-02  2.91e-04  1.71e-03  5.78e-01  
  9  +3.9341e-01  +4.2599e-01  3.26e-02  1.20e-04  6.52e-03  5.00e-05  4.00e-04  8.16e-01  
 10  +3.8357e-01  +3.8711e-01  3.54e-03  1.30e-05  7.06e-04  4.50e-06  4.64e-05  9.00e-01  
 11  +3.8232e-01  +3.8259e-01  2.73e-04  1.00e-06  5.39e-05  3.11e-07  3.75e-06  9.23e-01  
 12  +3.8220e-01  +3.8221e-01  3.57e-06  1.31e-08  6.98e-07  3.86e-09  4.97e-08  9.90e-01  
 13  +3.8220e-01  +3.8220e-01  3.57e-08  1.31e-10  6.98e-09  3.86e-11  4.98e-10  9.90e-01  
 14  +3.8220e-01  +3.8220e-01  3.57e-10  1.31e-12  6.98e-11  3.91e-13  5.03e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.5421ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:59 PM: Optimal value: 3.822e-01
(CVXPY) Oct 06 04:14:59 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:14:59 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:14:59 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:14:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:14:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:14:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:14:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:14:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:14:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:14:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:14:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:14:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:14:59 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 3755
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +2.5148e+02  2.51e+02  9.39e-01  2.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.7426e-01  +5.4848e+01  5.43e+01  4.13e-01  1.62e+01  3.78e-03  5.81e-01  5.85e-01  
  2  +5.2355e-01  +6.3819e+00  5.86e+00  1.26e-01  6.32e+00  1.78e-02  2.57e-01  9.90e-01  
  3  +5.0546e-01  +1.4731e+00  9.68e-01  3.14e-02  1.67e+00  1.81e-03  9.29e-02  8.33e-01  
  4  +5.0392e-01  +1.4628e+00  9.59e-01  2.14e-02  1.17e+00  2.52e-03  5.69e-02  4.28e-01  
  5  +4.9438e-01  +1.4503e+00  9.56e-01  9.07e-03  5.05e-01  3.97e-03  2.30e-02  7.81e-01  
  6  +4.7181e-01  +1.0206e+00  5.49e-01  3.61e-03  2.01e-01  2.49e-03  9.54e-03  6.70e-01  
  7  +4.5914e-01  +9.5831e-01  4.99e-01  2.47e-03  1.37e-01  2.53e-03  6.57e-03  3.91e-01  
  8  +4.4370e-01  +8.5539e-01  4.12e-01  1.74e-03  9.61e-02  1.80e-03  4.79e-03  4.20e-01  
  9  +4.1384e-01  +6.2607e-01  2.12e-01  9.69e-04  5.28e-02  1.54e-05  2.91e-03  8.29e-01  
 10  +3.7145e-01  +4.2609e-01  5.46e-02  2.18e-04  1.18e-02  1.28e-05  7.23e-04  7.92e-01  
 11  +3.6075e-01  +3.8377e-01  2.30e-02  8.99e-05  4.84e-03  8.73e-06  3.13e-04  6.32e-01  
 12  +3.5376e-01  +3.5688e-01  3.12e-03  1.19e-05  6.34e-04  2.30e-06  4.41e-05  9.22e-01  
 13  +3.5255e-01  +3.5269e-01  1.35e-04  5.07e-07  2.70e-05  1.23e-07  1.94e-06  9.79e-01  
 14  +3.5250e-01  +3.5250e-01  1.62e-06  6.10e-09  3.25e-07  1.48e-09  2.34e-08  9.88e-01  
 15  +3.5250e-01  +3.5250e-01  1.62e-08  6.11e-11  3.25e-09  1.48e-11  2.34e-10  9.90e-01  
 16  +3.5250e-01  +3.5250e-01  1.62e-10  6.11e-13  3.25e-11  1.48e-13  2.34e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 6.7547ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:14:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:14:59 PM: Optimal value: 3.525e-01
(CVXPY) Oct 06 04:14:59 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:14:59 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.3525
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:00 PM: Your problem has 299 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 299
  constraints   = 549
  nnz(P)        = 0
  nnz(A)        = 3940
  cones (total) = 1
    : Nonnegative = 1,  numel = 549

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9891e-01  +2.5181e+02  2.51e+02  9.40e-01  2.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.7035e-01  +5.4936e+01  5.44e+01  4.15e-01  1.60e+01  3.79e-03  5.81e-01  5.85e-01  
  2  +5.2117e-01  +6.5459e+00  6.02e+00  1.25e-01  6.25e+00  1.82e-02  2.55e-01  9.90e-01  
  3  +5.0592e-01  +1.6750e+00  1.17e+00  3.26e-02  1.75e+00  3.22e-03  8.64e-02  7.36e-01  
  4  +5.0499e-01  +1.7138e+00  1.21e+00  2.65e-02  1.44e+00  3.92e-03  6.71e-02  2.72e-01  
  5  +4.9829e-01  +1.9699e+00  1.47e+00  1.74e-02  9.65e-01  4.68e-03  4.25e-02  7.11e-01  
  6  +4.7677e-01  +1.4995e+00  1.02e+00  6.63e-03  3.71e-01  5.60e-03  1.64e-02  6.25e-01  
  7  +4.5403e-01  +1.2829e+00  8.29e-01  4.03e-03  2.25e-01  5.07e-03  1.02e-02  4.50e-01  
  8  +4.3492e-01  +1.0868e+00  6.52e-01  2.82e-03  1.57e-01  3.31e-03  7.39e-03  4.18e-01  
  9  +4.0397e-01  +7.4172e-01  3.38e-01  1.66e-03  9.10e-02  2.64e-05  4.82e-03  7.81e-01  
 10  +3.4745e-01  +4.3231e-01  8.49e-02  3.57e-04  1.93e-02  1.92e-05  1.17e-03  7.95e-01  
 11  +3.2841e-01  +3.5694e-01  2.85e-02  1.18e-04  6.41e-03  1.07e-05  4.33e-04  6.93e-01  
 12  +3.1961e-01  +3.2185e-01  2.23e-03  9.25e-06  4.98e-04  1.68e-06  3.63e-05  9.65e-01  
 13  +3.1883e-01  +3.1892e-01  8.89e-05  3.68e-07  1.98e-05  6.50e-08  1.47e-06  9.63e-01  
 14  +3.1880e-01  +3.1880e-01  9.61e-07  3.98e-09  2.14e-07  7.04e-10  1.59e-08  9.89e-01  
 15  +3.1880e-01  +3.1880e-01  9.61e-09  3.98e-11  2.14e-09  7.04e-12  1.59e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.2177ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:00 PM: Optimal value: 3.188e-01
(CVXPY) Oct 06 04:15:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:00 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 4, Objective: 0.3188
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:00 PM: Your problem has 309 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 309
  constraints   = 559
  nnz(P)        = 0
  nnz(A)        = 4064
  cones (total) = 1
    : Nonnegative = 1,  numel = 559

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9870e-01  +2.5186e+02  2.51e+02  9.40e-01  2.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.6643e-01  +5.5014e+01  5.44e+01  4.17e-01  1.58e+01  3.79e-03  5.82e-01  5.85e-01  
  2  +5.1847e-01  +6.6831e+00  6.16e+00  1.25e-01  6.19e+00  1.86e-02  2.53e-01  9.90e-01  
  3  +5.0486e-01  +1.7900e+00  1.29e+00  3.17e-02  1.72e+00  4.21e-03  8.03e-02  7.12e-01  
  4  +4.9662e-01  +1.7749e+00  1.28e+00  1.64e-02  9.15e-01  6.59e-03  3.93e-02  5.93e-01  
  5  +4.7407e-01  +1.4056e+00  9.32e-01  7.19e-03  4.03e-01  6.41e-03  1.75e-02  6.43e-01  
  6  +4.4298e-01  +1.2198e+00  7.77e-01  3.62e-03  2.02e-01  6.97e-03  9.10e-03  5.69e-01  
  7  +4.2233e-01  +9.8643e-01  5.64e-01  2.75e-03  1.52e-01  2.94e-03  7.25e-03  3.86e-01  
  8  +3.6653e-01  +5.7657e-01  2.10e-01  9.47e-04  5.15e-02  2.82e-05  2.82e-03  8.70e-01  
  9  +3.3077e-01  +4.1218e-01  8.14e-02  3.55e-04  1.93e-02  2.12e-05  1.18e-03  6.38e-01  
 10  +3.1267e-01  +3.3378e-01  2.11e-02  9.12e-05  4.94e-03  6.35e-06  3.30e-04  7.40e-01  
 11  +3.0657e-01  +3.0833e-01  1.75e-03  7.57e-06  4.08e-04  1.37e-06  2.88e-05  9.71e-01  
 12  +3.0597e-01  +3.0601e-01  4.59e-05  1.99e-07  1.07e-05  3.33e-08  7.68e-07  9.76e-01  
 13  +3.0595e-01  +3.0595e-01  4.68e-07  2.03e-09  1.09e-07  3.40e-10  7.85e-09  9.90e-01  
 14  +3.0595e-01  +3.0595e-01  4.69e-09  2.03e-11  1.09e-09  3.40e-12  7.85e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 7.4973ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:00 PM: Optimal value: 3.060e-01
(CVXPY) Oct 06 04:15:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:00 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 5, Objective: 0.3060
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:00 PM: Your problem has 319 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 319
  constraints   = 569
  nnz(P)        = 0
  nnz(A)        = 4240
  cones (total) = 1
    : Nonnegative = 1,  numel = 569

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9843e-01  +2.5190e+02  2.51e+02  9.41e-01  2.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.6155e-01  +5.5116e+01  5.46e+01  4.19e-01  1.57e+01  3.80e-03  5.82e-01  5.84e-01  
  2  +5.1490e-01  +6.8683e+00  6.35e+00  1.24e-01  6.13e+00  1.92e-02  2.51e-01  9.90e-01  
  3  +5.0168e-01  +1.9229e+00  1.42e+00  3.02e-02  1.65e+00  5.47e-03  7.37e-02  7.24e-01  
  4  +4.8256e-01  +1.7087e+00  1.23e+00  1.20e-02  6.76e-01  9.10e-03  2.82e-02  6.57e-01  
  5  +4.5140e-01  +1.1995e+00  7.48e-01  5.51e-03  3.07e-01  5.02e-03  1.37e-02  6.23e-01  
  6  +4.2729e-01  +1.0887e+00  6.61e-01  3.38e-03  1.87e-01  5.33e-03  8.57e-03  4.40e-01  
  7  +3.8775e-01  +7.5153e-01  3.64e-01  1.99e-03  1.09e-01  4.60e-05  5.51e-03  7.31e-01  
  8  +3.5186e-01  +5.6470e-01  2.13e-01  1.03e-03  5.65e-02  5.47e-05  3.07e-03  5.23e-01  
  9  +3.1181e-01  +3.7399e-01  6.22e-02  2.77e-04  1.54e-02  3.78e-05  9.11e-04  8.32e-01  
 10  +2.9801e-01  +3.1694e-01  1.89e-02  8.28e-05  4.63e-03  1.36e-05  2.87e-04  7.62e-01  
 11  +2.9346e-01  +2.9833e-01  4.87e-03  2.12e-05  1.18e-03  3.83e-06  7.53e-05  7.87e-01  
 12  +2.9194e-01  +2.9230e-01  3.66e-04  1.60e-06  8.90e-05  3.40e-07  5.75e-06  9.75e-01  
 13  +2.9180e-01  +2.9181e-01  6.12e-06  2.67e-08  1.49e-06  5.64e-09  9.65e-08  9.83e-01  
 14  +2.9180e-01  +2.9180e-01  6.12e-08  2.67e-10  1.49e-08  5.64e-11  9.65e-10  9.90e-01  
 15  +2.9180e-01  +2.9180e-01  6.12e-10  2.67e-12  1.49e-10  5.64e-13  9.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.0098ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:00 PM: Optimal value: 2.918e-01
(CVXPY) Oct 06 04:15:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:00 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 6, Objective: 0.2918
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:00 PM: Your problem has 329 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 329
  constraints   = 579
  nnz(P)        = 0
  nnz(A)        = 4334
  cones (total) = 1
    : Nonnegative = 1,  numel = 579

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9831e-01  +2.5178e+02  2.51e+02  9.41e-01  2.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.5821e-01  +5.5117e+01  5.46e+01  4.20e-01  1.55e+01  3.81e-03  5.80e-01  5.84e-01  
  2  +5.1257e-01  +6.9936e+00  6.48e+00  1.23e-01  6.02e+00  1.95e-02  2.48e-01  9.90e-01  
  3  +4.9861e-01  +1.8497e+00  1.35e+00  2.62e-02  1.43e+00  5.85e-03  6.30e-02  7.60e-01  
  4  +4.7228e-01  +1.6063e+00  1.13e+00  9.63e-03  5.43e-01  1.01e-02  2.25e-02  6.80e-01  
  5  +4.4297e-01  +1.3486e+00  9.06e-01  5.57e-03  3.11e-01  8.51e-03  1.35e-02  5.02e-01  
  6  +4.1465e-01  +1.1484e+00  7.34e-01  3.69e-03  2.03e-01  6.53e-03  9.29e-03  4.09e-01  
  7  +3.6887e-01  +7.6231e-01  3.93e-01  2.08e-03  1.13e-01  5.66e-05  5.79e-03  7.84e-01  
  8  +3.1521e-01  +4.4491e-01  1.30e-01  6.23e-04  3.37e-02  3.06e-05  1.94e-03  7.08e-01  
  9  +2.9943e-01  +3.8010e-01  8.07e-02  3.75e-04  2.06e-02  3.08e-05  1.21e-03  4.82e-01  
 10  +2.8231e-01  +3.0702e-01  2.47e-02  1.12e-04  6.18e-03  1.49e-05  3.84e-04  7.86e-01  
 11  +2.7867e-01  +2.9211e-01  1.34e-02  6.00e-05  3.35e-03  9.33e-06  2.09e-04  5.51e-01  
 12  +2.7580e-01  +2.8003e-01  4.23e-03  1.89e-05  1.05e-03  4.42e-06  6.67e-05  9.88e-01  
 13  +2.7424e-01  +2.7435e-01  1.09e-04  4.84e-07  2.69e-05  1.06e-07  1.73e-06  9.76e-01  
 14  +2.7420e-01  +2.7420e-01  1.26e-06  5.63e-09  3.13e-07  1.23e-09  2.02e-08  9.88e-01  
 15  +2.7420e-01  +2.7420e-01  1.26e-08  5.63e-11  3.13e-09  1.23e-11  2.02e-10  9.90e-01  
 16  +2.7420e-01  +2.7420e-01  1.26e-10  5.63e-13  3.13e-11  1.23e-13  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.7315ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:00 PM: Optimal value: 2.742e-01
(CVXPY) Oct 06 04:15:00 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:00 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 7, Objective: 0.2742
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:00 PM: Your problem has 339 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:00 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 339
  constraints   = 589
  nnz(P)        = 0
  nnz(A)        = 4456
  cones (total) = 1
    : Nonnegative = 1,  numel = 589

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9821e-01  +2.5189e+02  2.51e+02  9.42e-01  2.51e+01  1.00e+00  1.02e+00   ------   
  1  +5.5423e-01  +5.5164e+01  5.46e+01  4.20e-01  1.53e+01  3.82e-03  5.79e-01  5.85e-01  
  2  +5.0948e-01  +7.1205e+00  6.61e+00  1.22e-01  5.92e+00  1.99e-02  2.45e-01  9.90e-01  
  3  +4.9419e-01  +1.8545e+00  1.36e+00  2.36e-02  1.30e+00  6.56e-03  5.63e-02  7.87e-01  
  4  +4.6142e-01  +1.5115e+00  1.05e+00  8.52e-03  4.79e-01  1.01e-02  2.00e-02  6.73e-01  
  5  +4.2643e-01  +1.3596e+00  9.33e-01  4.81e-03  2.68e-01  1.14e-02  1.16e-02  4.87e-01  
  6  +3.7388e-01  +8.4322e-01  4.69e-01  2.58e-03  1.40e-01  9.75e-05  6.92e-03  7.06e-01  
  7  +3.2214e-01  +5.3794e-01  2.16e-01  1.08e-03  5.77e-02  6.25e-05  3.17e-03  5.94e-01  
  8  +2.9289e-01  +4.0348e-01  1.11e-01  5.21e-04  2.83e-02  5.03e-05  1.66e-03  5.85e-01  
  9  +2.7693e-01  +3.3284e-01  5.59e-02  2.57e-04  1.40e-02  2.79e-05  8.63e-04  5.22e-01  
 10  +2.6503e-01  +2.8080e-01  1.58e-02  7.10e-05  3.87e-03  1.19e-05  2.52e-04  8.42e-01  
 11  +2.6017e-01  +2.6101e-01  8.33e-04  3.75e-06  2.03e-04  5.91e-07  1.37e-05  9.49e-01  
 12  +2.5990e-01  +2.5992e-01  1.19e-05  5.38e-08  2.90e-06  8.26e-09  1.98e-07  9.86e-01  
 13  +2.5990e-01  +2.5990e-01  1.19e-07  5.38e-10  2.90e-08  8.26e-11  1.98e-09  9.90e-01  
 14  +2.5990e-01  +2.5990e-01  1.19e-09  5.38e-12  2.90e-10  8.26e-13  1.98e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 9.4152ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:00 PM: Optimal value: 2.599e-01
(CVXPY) Oct 06 04:15:00 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:00 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.2599
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:01 PM: Your problem has 349 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 349
  constraints   = 599
  nnz(P)        = 0
  nnz(A)        = 4542
  cones (total) = 1
    : Nonnegative = 1,  numel = 599

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9811e-01  +2.5188e+02  2.51e+02  9.42e-01  2.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.5028e-01  +5.5272e+01  5.47e+01  4.21e-01  1.51e+01  3.83e-03  5.79e-01  5.84e-01  
  2  +5.0642e-01  +7.2160e+00  6.71e+00  1.21e-01  5.85e+00  2.02e-02  2.45e-01  9.90e-01  
  3  +4.8991e-01  +1.9922e+00  1.50e+00  2.42e-02  1.32e+00  7.46e-03  5.72e-02  7.82e-01  
  4  +4.5458e-01  +1.5059e+00  1.05e+00  8.99e-03  4.98e-01  9.17e-03  2.14e-02  6.50e-01  
  5  +4.1703e-01  +1.3995e+00  9.83e-01  5.10e-03  2.80e-01  1.10e-02  1.24e-02  5.13e-01  
  6  +3.6365e-01  +8.4489e-01  4.81e-01  2.62e-03  1.40e-01  9.54e-05  7.06e-03  7.29e-01  
  7  +3.1911e-01  +5.7205e-01  2.53e-01  1.29e-03  6.84e-02  6.49e-05  3.80e-03  5.08e-01  
  8  +2.8162e-01  +3.7906e-01  9.74e-02  4.69e-04  2.50e-02  4.09e-05  1.52e-03  6.83e-01  
  9  +2.6737e-01  +3.1467e-01  4.73e-02  2.21e-04  1.19e-02  2.41e-05  7.56e-04  5.77e-01  
 10  +2.5768e-01  +2.7154e-01  1.39e-02  6.33e-05  3.39e-03  1.18e-05  2.27e-04  8.96e-01  
 11  +2.5385e-01  +2.5587e-01  2.01e-03  9.15e-06  4.88e-04  1.69e-06  3.40e-05  8.69e-01  
 12  +2.5318e-01  +2.5339e-01  2.13e-04  9.52e-07  5.09e-05  1.90e-07  3.65e-06  9.45e-01  
 13  +2.5310e-01  +2.5310e-01  2.30e-06  1.03e-08  5.49e-07  2.05e-09  3.95e-08  9.89e-01  
 14  +2.5310e-01  +2.5310e-01  2.30e-08  1.03e-10  5.49e-09  2.05e-11  3.95e-10  9.90e-01  
 15  +2.5310e-01  +2.5310e-01  2.30e-10  1.03e-12  5.49e-11  2.05e-13  3.95e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.7143ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:01 PM: Optimal value: 2.531e-01
(CVXPY) Oct 06 04:15:01 PM: Compilation took 1.501e-02 seconds
(CVXPY) Oct 06 04:15:01 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.2531
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:01 PM: Your problem has 359 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 359
  constraints   = 609
  nnz(P)        = 0
  nnz(A)        = 4598
  cones (total) = 1
    : Nonnegative = 1,  numel = 609

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9803e-01  +2.5185e+02  2.51e+02  9.43e-01  2.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.4711e-01  +5.5223e+01  5.47e+01  4.22e-01  1.49e+01  3.84e-03  5.78e-01  5.85e-01  
  2  +5.0406e-01  +7.3493e+00  6.85e+00  1.20e-01  5.72e+00  2.05e-02  2.40e-01  9.90e-01  
  3  +4.8552e-01  +1.9787e+00  1.49e+00  2.20e-02  1.20e+00  7.99e-03  5.18e-02  7.99e-01  
  4  +4.3326e-01  +1.4715e+00  1.04e+00  7.02e-03  3.86e-01  1.11e-02  1.66e-02  7.26e-01  
  5  +4.0097e-01  +1.2715e+00  8.70e-01  4.73e-03  2.58e-01  9.58e-03  1.15e-02  3.79e-01  
  6  +3.4140e-01  +7.6009e-01  4.19e-01  2.38e-03  1.26e-01  8.14e-05  6.56e-03  7.55e-01  
  7  +2.8723e-01  +4.3656e-01  1.49e-01  7.83e-04  4.11e-02  4.07e-05  2.45e-03  6.76e-01  
  8  +2.6947e-01  +3.5989e-01  9.04e-02  4.52e-04  2.41e-02  4.34e-05  1.49e-03  5.63e-01  
  9  +2.5455e-01  +2.9149e-01  3.69e-02  1.79e-04  9.54e-03  2.34e-05  6.29e-04  7.05e-01  
 10  +2.4542e-01  +2.5159e-01  6.17e-03  2.94e-05  1.56e-03  4.70e-06  1.09e-04  9.09e-01  
 11  +2.4364e-01  +2.4455e-01  9.14e-04  4.29e-06  2.27e-04  7.36e-07  1.66e-05  9.09e-01  
 12  +2.4331e-01  +2.4334e-01  2.78e-05  1.29e-07  6.87e-06  2.23e-08  5.08e-07  9.73e-01  
 13  +2.4330e-01  +2.4330e-01  2.78e-07  1.29e-09  6.87e-08  2.23e-10  5.09e-09  9.90e-01  
 14  +2.4330e-01  +2.4330e-01  2.78e-09  1.29e-11  6.87e-10  2.24e-12  5.09e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.3485ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:01 PM: Optimal value: 2.433e-01
(CVXPY) Oct 06 04:15:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:01 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.2433
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:01 PM: Your problem has 369 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 369
  constraints   = 619
  nnz(P)        = 0
  nnz(A)        = 4670
  cones (total) = 1
    : Nonnegative = 1,  numel = 619

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9786e-01  +2.5204e+02  2.52e+02  9.43e-01  2.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.4218e-01  +5.5357e+01  5.48e+01  4.23e-01  1.48e+01  3.84e-03  5.78e-01  5.84e-01  
  2  +4.9972e-01  +7.4944e+00  6.99e+00  1.18e-01  5.64e+00  2.09e-02  2.39e-01  9.90e-01  
  3  +4.7836e-01  +2.0206e+00  1.54e+00  2.09e-02  1.13e+00  8.65e-03  4.92e-02  8.09e-01  
  4  +4.2403e-01  +1.4928e+00  1.07e+00  7.29e-03  3.94e-01  1.03e-02  1.75e-02  7.02e-01  
  5  +3.7239e-01  +1.0898e+00  7.17e-01  3.87e-03  2.06e-01  5.63e-03  9.77e-03  5.87e-01  
  6  +3.1436e-01  +6.4039e-01  3.26e-01  1.77e-03  9.20e-02  1.55e-03  5.07e-03  5.74e-01  
  7  +2.7336e-01  +4.0448e-01  1.31e-01  6.96e-04  3.60e-02  5.10e-04  2.24e-03  6.13e-01  
  8  +2.6246e-01  +3.5204e-01  8.96e-02  4.64e-04  2.42e-02  3.07e-04  1.56e-03  4.25e-01  
  9  +2.4844e-01  +2.8386e-01  3.54e-02  1.78e-04  9.29e-03  1.08e-04  6.48e-04  6.37e-01  
 10  +2.4126e-01  +2.5098e-01  9.72e-03  4.75e-05  2.49e-03  2.49e-05  1.86e-04  7.67e-01  
 11  +2.3901e-01  +2.4147e-01  2.45e-03  1.18e-05  6.18e-04  5.09e-06  4.86e-05  8.05e-01  
 12  +2.3826e-01  +2.3841e-01  1.54e-04  7.35e-07  3.86e-05  1.92e-07  3.12e-06  9.74e-01  
 13  +2.3820e-01  +2.3820e-01  1.57e-06  7.46e-09  3.91e-07  1.94e-09  3.18e-08  9.90e-01  
 14  +2.3820e-01  +2.3820e-01  1.57e-08  7.47e-11  3.92e-09  1.94e-11  3.18e-10  9.90e-01  
 15  +2.3820e-01  +2.3820e-01  1.57e-10  7.47e-13  3.92e-11  1.94e-13  3.18e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.6086ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:01 PM: Optimal value: 2.382e-01
(CVXPY) Oct 06 04:15:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:01 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 11, Objective: 0.2382
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:01 PM: Your problem has 379 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 379
  constraints   = 629
  nnz(P)        = 0
  nnz(A)        = 4754
  cones (total) = 1
    : Nonnegative = 1,  numel = 629

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9780e-01  +2.5194e+02  2.51e+02  9.44e-01  2.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.3908e-01  +5.5455e+01  5.49e+01  4.24e-01  1.46e+01  3.85e-03  5.78e-01  5.83e-01  
  2  +4.9715e-01  +7.5672e+00  7.07e+00  1.18e-01  5.57e+00  2.12e-02  2.38e-01  9.90e-01  
  3  +4.7371e-01  +1.9792e+00  1.51e+00  1.97e-02  1.06e+00  8.77e-03  4.63e-02  8.21e-01  
  4  +4.1816e-01  +1.5266e+00  1.11e+00  7.52e-03  4.03e-01  1.00e-02  1.82e-02  6.90e-01  
  5  +3.7909e-01  +1.1819e+00  8.03e-01  4.74e-03  2.51e-01  5.47e-03  1.20e-02  4.90e-01  
  6  +3.1258e-01  +6.3113e-01  3.19e-01  1.77e-03  9.10e-02  1.01e-03  5.03e-03  6.88e-01  
  7  +2.7073e-01  +4.0642e-01  1.36e-01  7.26e-04  3.76e-02  3.61e-04  2.31e-03  6.00e-01  
  8  +2.5778e-01  +3.4646e-01  8.87e-02  4.63e-04  2.41e-02  2.22e-04  1.54e-03  3.97e-01  
  9  +2.4496e-01  +2.8663e-01  4.17e-02  2.12e-04  1.11e-02  9.57e-05  7.50e-04  5.71e-01  
 10  +2.3693e-01  +2.4931e-01  1.24e-02  6.17e-05  3.22e-03  1.68e-05  2.29e-04  9.06e-01  
 11  +2.3409e-01  +2.3831e-01  4.22e-03  2.02e-05  1.05e-03  5.24e-06  7.90e-05  7.36e-01  
 12  +2.3270e-01  +2.3299e-01  2.85e-04  1.34e-06  6.99e-05  3.11e-07  5.46e-06  9.43e-01  
 13  +2.3260e-01  +2.3261e-01  4.24e-06  1.99e-08  1.04e-06  4.33e-09  8.16e-08  9.89e-01  
 14  +2.3260e-01  +2.3260e-01  4.24e-08  1.99e-10  1.04e-08  4.33e-11  8.16e-10  9.90e-01  
 15  +2.3260e-01  +2.3260e-01  4.24e-10  1.99e-12  1.04e-10  4.34e-13  8.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.9703ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:01 PM: Optimal value: 2.326e-01
(CVXPY) Oct 06 04:15:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:01 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 12, Objective: 0.2326
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:01 PM: Your problem has 389 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:01 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 389
  constraints   = 639
  nnz(P)        = 0
  nnz(A)        = 4846
  cones (total) = 1
    : Nonnegative = 1,  numel = 639

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9777e-01  +2.5198e+02  2.51e+02  9.44e-01  2.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.3773e-01  +5.5570e+01  5.50e+01  4.25e-01  1.45e+01  3.86e-03  5.78e-01  5.82e-01  
  2  +4.9555e-01  +7.5760e+00  7.08e+00  1.18e-01  5.51e+00  2.13e-02  2.39e-01  9.90e-01  
  3  +4.7140e-01  +2.0809e+00  1.61e+00  2.10e-02  1.12e+00  8.94e-03  4.96e-02  8.09e-01  
  4  +4.1824e-01  +1.5419e+00  1.12e+00  8.19e-03  4.34e-01  9.13e-03  2.00e-02  6.69e-01  
  5  +3.7992e-01  +1.2629e+00  8.83e-01  5.10e-03  2.69e-01  6.73e-03  1.29e-02  4.76e-01  
  6  +3.1456e-01  +6.5988e-01  3.45e-01  1.95e-03  9.98e-02  6.71e-04  5.60e-03  7.36e-01  
  7  +2.7001e-01  +4.1138e-01  1.41e-01  7.65e-04  3.91e-02  2.29e-04  2.46e-03  6.29e-01  
  8  +2.5742e-01  +3.5134e-01  9.39e-02  4.96e-04  2.55e-02  1.48e-04  1.66e-03  3.77e-01  
  9  +2.4249e-01  +2.8194e-01  3.94e-02  1.99e-04  1.03e-02  5.51e-05  7.16e-04  7.04e-01  
 10  +2.3345e-01  +2.4205e-01  8.60e-03  4.21e-05  2.17e-03  1.01e-05  1.62e-04  8.53e-01  
 11  +2.3109e-01  +2.3261e-01  1.53e-03  7.33e-06  3.78e-04  1.52e-06  2.98e-05  8.99e-01  
 12  +2.3060e-01  +2.3072e-01  1.27e-04  6.10e-07  3.14e-05  1.21e-07  2.53e-06  9.23e-01  
 13  +2.3055e-01  +2.3055e-01  1.47e-06  7.03e-09  3.62e-07  1.39e-09  2.92e-08  9.89e-01  
 14  +2.3055e-01  +2.3055e-01  1.47e-08  7.04e-11  3.62e-09  1.39e-11  2.92e-10  9.90e-01  
 15  +2.3055e-01  +2.3055e-01  1.47e-10  7.04e-13  3.62e-11  1.39e-13  2.92e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.668ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:01 PM: Optimal value: 2.306e-01
(CVXPY) Oct 06 04:15:01 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:01 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 13, Objective: 0.2306
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:02 PM: Your problem has 399 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 399
  constraints   = 649
  nnz(P)        = 0
  nnz(A)        = 4920
  cones (total) = 1
    : Nonnegative = 1,  numel = 649

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9763e-01  +2.5236e+02  2.52e+02  9.45e-01  2.41e+01  1.00e+00  1.02e+00   ------   
  1  +5.3244e-01  +5.5623e+01  5.51e+01  4.25e-01  1.43e+01  3.87e-03  5.77e-01  5.83e-01  
  2  +4.8965e-01  +7.7838e+00  7.29e+00  1.16e-01  5.38e+00  2.18e-02  2.34e-01  9.90e-01  
  3  +4.6023e-01  +2.1965e+00  1.74e+00  2.05e-02  1.09e+00  9.86e-03  4.80e-02  8.10e-01  
  4  +4.0066e-01  +1.6656e+00  1.26e+00  8.53e-03  4.50e-01  9.88e-03  2.07e-02  6.58e-01  
  5  +3.7103e-01  +1.3867e+00  1.02e+00  6.25e-03  3.27e-01  5.96e-03  1.58e-02  4.16e-01  
  6  +3.0641e-01  +6.7661e-01  3.70e-01  2.19e-03  1.12e-01  5.49e-05  6.27e-03  8.61e-01  
  7  +2.6306e-01  +4.2071e-01  1.58e-01  8.86e-04  4.52e-02  4.20e-05  2.84e-03  6.18e-01  
  8  +2.4571e-01  +3.3529e-01  8.96e-02  4.83e-04  2.49e-02  2.91e-05  1.65e-03  4.73e-01  
  9  +2.3293e-01  +2.7414e-01  4.12e-02  2.14e-04  1.11e-02  1.85e-05  7.79e-04  6.31e-01  
 10  +2.2445e-01  +2.3581e-01  1.14e-02  5.66e-05  2.93e-03  7.91e-06  2.22e-04  8.82e-01  
 11  +2.2108e-01  +2.2241e-01  1.33e-03  6.42e-06  3.31e-04  8.91e-07  2.70e-05  9.08e-01  
 12  +2.2069e-01  +2.2093e-01  2.40e-04  1.15e-06  5.93e-05  1.80e-07  4.98e-06  9.22e-01  
 13  +2.2060e-01  +2.2060e-01  2.73e-06  1.31e-08  6.72e-07  2.03e-09  5.68e-08  9.89e-01  
 14  +2.2060e-01  +2.2060e-01  2.73e-08  1.31e-10  6.72e-09  2.03e-11  5.68e-10  9.90e-01  
 15  +2.2060e-01  +2.2060e-01  2.73e-10  1.31e-12  6.72e-11  2.03e-13  5.69e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.369ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:02 PM: Optimal value: 2.206e-01
(CVXPY) Oct 06 04:15:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:02 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 14, Objective: 0.2206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:02 PM: Your problem has 409 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 409
  constraints   = 659
  nnz(P)        = 0
  nnz(A)        = 5000
  cones (total) = 1
    : Nonnegative = 1,  numel = 659

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9759e-01  +2.5234e+02  2.52e+02  9.45e-01  2.40e+01  1.00e+00  1.02e+00   ------   
  1  +5.3003e-01  +5.5663e+01  5.51e+01  4.26e-01  1.42e+01  3.88e-03  5.76e-01  5.83e-01  
  2  +4.8722e-01  +7.8344e+00  7.35e+00  1.15e-01  5.28e+00  2.19e-02  2.33e-01  9.90e-01  
  3  +4.5563e-01  +2.1877e+00  1.73e+00  2.00e-02  1.05e+00  9.75e-03  4.72e-02  8.12e-01  
  4  +3.8777e-01  +1.6909e+00  1.30e+00  8.18e-03  4.28e-01  1.02e-02  2.00e-02  6.88e-01  
  5  +3.4095e-01  +1.0483e+00  7.07e-01  4.48e-03  2.29e-01  5.69e-04  1.20e-02  7.53e-01  
  6  +2.8047e-01  +5.3453e-01  2.54e-01  1.48e-03  7.46e-02  1.66e-04  4.49e-03  6.78e-01  
  7  +2.4869e-01  +3.7427e-01  1.26e-01  6.87e-04  3.51e-02  9.16e-05  2.31e-03  6.11e-01  
  8  +2.3120e-01  +2.8479e-01  5.36e-02  2.84e-04  1.45e-02  4.11e-05  1.04e-03  6.75e-01  
  9  +2.2274e-01  +2.4308e-01  2.03e-02  1.05e-04  5.36e-03  1.58e-05  4.07e-04  6.61e-01  
 10  +2.1901e-01  +2.2611e-01  7.10e-03  3.55e-05  1.81e-03  5.69e-06  1.46e-04  8.99e-01  
 11  +2.1767e-01  +2.2058e-01  2.91e-03  1.44e-05  7.32e-04  2.34e-06  6.12e-05  7.35e-01  
 12  +2.1726e-01  +2.1910e-01  1.84e-03  8.85e-06  4.57e-04  1.48e-06  3.83e-05  5.50e-01  
 13  +2.1663e-01  +2.1673e-01  9.20e-05  4.38e-07  2.26e-05  6.93e-08  1.95e-06  9.54e-01  
 14  +2.1660e-01  +2.1660e-01  9.75e-07  4.64e-09  2.40e-07  7.31e-10  2.07e-08  9.89e-01  
 15  +2.1660e-01  +2.1660e-01  9.75e-09  4.64e-11  2.40e-09  7.31e-12  2.07e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.4264ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:02 PM: Optimal value: 2.166e-01
(CVXPY) Oct 06 04:15:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:02 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 15, Objective: 0.2166
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:02 PM: Your problem has 419 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 419
  constraints   = 669
  nnz(P)        = 0
  nnz(A)        = 5040
  cones (total) = 1
    : Nonnegative = 1,  numel = 669

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9736e-01  +2.5243e+02  2.52e+02  9.45e-01  2.38e+01  1.00e+00  1.02e+00   ------   
  1  +5.2226e-01  +5.5898e+01  5.54e+01  4.26e-01  1.41e+01  3.90e-03  5.76e-01  5.82e-01  
  2  +4.7953e-01  +8.0518e+00  7.57e+00  1.14e-01  5.25e+00  2.26e-02  2.31e-01  9.90e-01  
  3  +4.4310e-01  +2.1143e+00  1.67e+00  1.85e-02  9.71e-01  9.60e-03  4.33e-02  8.25e-01  
  4  +3.9186e-01  +1.9517e+00  1.56e+00  1.07e-02  5.56e-01  1.08e-02  2.55e-02  5.41e-01  
  5  +3.3979e-01  +1.1828e+00  8.43e-01  5.16e-03  2.65e-01  3.23e-03  1.32e-02  6.41e-01  
  6  +2.8356e-01  +6.2058e-01  3.37e-01  2.01e-03  1.01e-01  9.60e-04  5.81e-03  6.10e-01  
  7  +2.4221e-01  +3.7148e-01  1.29e-01  7.26e-04  3.69e-02  3.04e-04  2.40e-03  6.82e-01  
  8  +2.2348e-01  +2.7755e-01  5.41e-02  2.87e-04  1.47e-02  1.08e-04  1.04e-03  6.83e-01  
  9  +2.1222e-01  +2.2316e-01  1.09e-02  5.65e-05  2.88e-03  1.79e-05  2.23e-04  8.28e-01  
 10  +2.1031e-01  +2.1437e-01  4.06e-03  2.08e-05  1.06e-03  5.03e-06  8.57e-05  7.90e-01  
 11  +2.0992e-01  +2.1285e-01  2.93e-03  1.47e-05  7.57e-04  3.43e-06  6.13e-05  4.27e-01  
 12  +2.0909e-01  +2.0960e-01  5.15e-04  2.53e-06  1.31e-04  5.54e-07  1.10e-05  8.47e-01  
 13  +2.0891e-01  +2.0895e-01  3.48e-05  1.70e-07  8.77e-06  2.94e-08  7.51e-07  9.82e-01  
 14  +2.0890e-01  +2.0890e-01  3.54e-07  1.73e-09  8.92e-08  2.99e-10  7.65e-09  9.90e-01  
 15  +2.0890e-01  +2.0890e-01  3.56e-09  1.73e-11  8.95e-10  3.00e-12  7.68e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.9039ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:02 PM: Optimal value: 2.089e-01
(CVXPY) Oct 06 04:15:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:02 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 16, Objective: 0.2089
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:02 PM: Your problem has 429 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 429
  constraints   = 679
  nnz(P)        = 0
  nnz(A)        = 5107
  cones (total) = 1
    : Nonnegative = 1,  numel = 679

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9733e-01  +2.5255e+02  2.52e+02  9.46e-01  2.36e+01  1.00e+00  1.02e+00   ------   
  1  +5.1984e-01  +5.6033e+01  5.55e+01  4.26e-01  1.39e+01  3.91e-03  5.76e-01  5.81e-01  
  2  +4.7707e-01  +8.0772e+00  7.60e+00  1.13e-01  5.17e+00  2.28e-02  2.31e-01  9.90e-01  
  3  +4.3978e-01  +2.1187e+00  1.68e+00  1.86e-02  9.67e-01  9.34e-03  4.39e-02  8.24e-01  
  4  +3.8927e-01  +2.0000e+00  1.61e+00  1.11e-02  5.76e-01  1.07e-02  2.68e-02  5.23e-01  
  5  +3.4677e-01  +1.3996e+00  1.05e+00  6.50e-03  3.32e-01  5.10e-03  1.64e-02  5.20e-01  
  6  +2.7878e-01  +5.6530e-01  2.87e-01  1.72e-03  8.55e-02  4.04e-04  5.03e-03  8.10e-01  
  7  +2.4055e-01  +3.8194e-01  1.41e-01  7.85e-04  3.97e-02  1.84e-04  2.60e-03  6.39e-01  
  8  +2.2220e-01  +2.8623e-01  6.40e-02  3.44e-04  1.74e-02  7.83e-05  1.23e-03  6.01e-01  
  9  +2.1384e-01  +2.4521e-01  3.14e-02  1.64e-04  8.27e-03  3.52e-05  6.22e-04  6.33e-01  
 10  +2.0669e-01  +2.1159e-01  4.90e-03  2.53e-05  1.27e-03  4.62e-06  1.03e-04  8.83e-01  
 11  +2.0554e-01  +2.0672e-01  1.18e-03  6.05e-06  3.00e-04  1.03e-06  2.59e-05  8.09e-01  
 12  +2.0520e-01  +2.0534e-01  1.40e-04  7.09e-07  3.51e-05  1.08e-07  3.11e-06  9.74e-01  
 13  +2.0515e-01  +2.0515e-01  1.48e-06  7.52e-09  3.72e-07  1.14e-09  3.30e-08  9.89e-01  
 14  +2.0515e-01  +2.0515e-01  1.48e-08  7.52e-11  3.72e-09  1.14e-11  3.30e-10  9.90e-01  
 15  +2.0515e-01  +2.0515e-01  1.48e-10  7.53e-13  3.73e-11  1.14e-13  3.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.1183ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:02 PM: Optimal value: 2.052e-01
(CVXPY) Oct 06 04:15:02 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:02 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 17, Objective: 0.2052
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:02 PM: Your problem has 439 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:02 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 439
  constraints   = 689
  nnz(P)        = 0
  nnz(A)        = 5155
  cones (total) = 1
    : Nonnegative = 1,  numel = 689

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9714e-01  +2.5249e+02  2.52e+02  9.46e-01  2.35e+01  1.00e+00  1.02e+00   ------   
  1  +5.1412e-01  +5.6084e+01  5.56e+01  4.26e-01  1.38e+01  3.91e-03  5.76e-01  5.81e-01  
  2  +4.7045e-01  +8.3255e+00  7.86e+00  1.11e-01  5.06e+00  2.33e-02  2.28e-01  9.88e-01  
  3  +4.3190e-01  +2.6902e+00  2.26e+00  2.41e-02  1.23e+00  1.10e-02  5.61e-02  7.64e-01  
  4  +3.6627e-01  +2.1239e+00  1.76e+00  1.17e-02  6.00e-01  1.10e-02  2.81e-02  5.85e-01  
  5  +3.2107e-01  +1.0651e+00  7.44e-01  5.15e-03  2.57e-01  9.76e-05  1.35e-02  8.05e-01  
  6  +2.7526e-01  +6.4143e-01  3.66e-01  2.39e-03  1.18e-01  6.38e-05  6.88e-03  5.25e-01  
  7  +2.3186e-01  +3.6150e-01  1.30e-01  7.76e-04  3.88e-02  5.55e-05  2.57e-03  7.64e-01  
  8  +2.1641e-01  +2.8352e-01  6.71e-02  3.79e-04  1.90e-02  3.53e-05  1.35e-03  6.00e-01  
  9  +2.0838e-01  +2.4382e-01  3.54e-02  1.91e-04  9.60e-03  2.33e-05  7.18e-04  6.94e-01  
 10  +2.0015e-01  +2.0545e-01  5.30e-03  2.79e-05  1.39e-03  3.43e-06  1.13e-04  8.94e-01  
 11  +1.9898e-01  +2.0045e-01  1.48e-03  7.70e-06  3.82e-04  1.00e-06  3.27e-05  8.15e-01  
 12  +1.9853e-01  +1.9860e-01  7.70e-05  4.01e-07  1.98e-05  5.12e-08  1.74e-06  9.54e-01  
 13  +1.9850e-01  +1.9850e-01  7.81e-07  4.07e-09  2.01e-07  5.19e-10  1.77e-08  9.90e-01  
 14  +1.9850e-01  +1.9850e-01  7.82e-09  4.07e-11  2.01e-09  5.20e-12  1.77e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.6566ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:02 PM: Optimal value: 1.985e-01
(CVXPY) Oct 06 04:15:02 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:02 PM: Solver (including time spent in interface) took 3.131e-02 seconds
Iteration: 18, Objective: 0.1985
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:03 PM: Your problem has 449 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 449
  constraints   = 699
  nnz(P)        = 0
  nnz(A)        = 5196
  cones (total) = 1
    : Nonnegative = 1,  numel = 699

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9714e-01  +2.5256e+02  2.52e+02  9.47e-01  2.33e+01  1.00e+00  1.02e+00   ------   
  1  +5.1199e-01  +5.6132e+01  5.56e+01  4.27e-01  1.36e+01  3.92e-03  5.75e-01  5.81e-01  
  2  +4.6697e-01  +8.3216e+00  7.85e+00  1.10e-01  4.97e+00  2.34e-02  2.27e-01  9.89e-01  
  3  +4.2792e-01  +2.7750e+00  2.35e+00  2.50e-02  1.26e+00  1.10e-02  5.87e-02  7.54e-01  
  4  +3.6420e-01  +2.1869e+00  1.82e+00  1.24e-02  6.31e-01  1.08e-02  2.99e-02  5.73e-01  
  5  +3.2546e-01  +1.3324e+00  1.01e+00  6.72e-03  3.37e-01  3.13e-03  1.72e-02  6.00e-01  
  6  +2.7148e-01  +6.3336e-01  3.62e-01  2.33e-03  1.15e-01  8.35e-04  6.68e-03  6.58e-01  
  7  +2.3666e-01  +4.2083e-01  1.84e-01  1.11e-03  5.49e-02  3.65e-04  3.54e-03  6.19e-01  
  8  +2.1198e-01  +2.8390e-01  7.19e-02  3.99e-04  1.99e-02  1.21e-04  1.43e-03  7.06e-01  
  9  +2.0405e-01  +2.4196e-01  3.79e-02  2.03e-04  1.01e-02  4.96e-05  7.65e-04  7.21e-01  
 10  +1.9545e-01  +2.0138e-01  5.93e-03  3.11e-05  1.54e-03  6.29e-06  1.26e-04  8.79e-01  
 11  +1.9424e-01  +1.9620e-01  1.97e-03  1.02e-05  5.03e-04  1.87e-06  4.37e-05  7.64e-01  
 12  +1.9364e-01  +1.9375e-01  1.09e-04  5.65e-07  2.77e-05  9.35e-08  2.49e-06  9.55e-01  
 13  +1.9360e-01  +1.9360e-01  1.15e-06  5.98e-09  2.93e-07  9.85e-10  2.63e-08  9.90e-01  
 14  +1.9360e-01  +1.9360e-01  1.16e-08  5.98e-11  2.93e-09  9.86e-12  2.64e-10  9.90e-01  
 15  +1.9360e-01  +1.9360e-01  1.16e-10  5.99e-13  2.94e-11  9.88e-14  2.64e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.7227ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:03 PM: Optimal value: 1.936e-01
(CVXPY) Oct 06 04:15:03 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:03 PM: Solver (including time spent in interface) took 1.151e-02 seconds
Iteration: 19, Objective: 0.1936
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:03 PM: Your problem has 459 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 459
  constraints   = 709
  nnz(P)        = 0
  nnz(A)        = 5252
  cones (total) = 1
    : Nonnegative = 1,  numel = 709

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9712e-01  +2.5261e+02  2.52e+02  9.47e-01  2.32e+01  1.00e+00  1.02e+00   ------   
  1  +5.1126e-01  +5.6141e+01  5.56e+01  4.27e-01  1.35e+01  3.93e-03  5.74e-01  5.81e-01  
  2  +4.6524e-01  +8.3268e+00  7.86e+00  1.09e-01  4.89e+00  2.35e-02  2.25e-01  9.90e-01  
  3  +4.2515e-01  +2.7704e+00  2.35e+00  2.47e-02  1.24e+00  1.10e-02  5.81e-02  7.53e-01  
  4  +3.5872e-01  +2.2003e+00  1.84e+00  1.23e-02  6.22e-01  1.11e-02  2.97e-02  5.68e-01  
  5  +3.1654e-01  +1.0811e+00  7.65e-01  5.31e-03  2.64e-01  9.82e-05  1.40e-02  7.95e-01  
  6  +2.6704e-01  +6.1458e-01  3.48e-01  2.28e-03  1.12e-01  6.10e-05  6.61e-03  5.64e-01  
  7  +2.3065e-01  +3.9269e-01  1.62e-01  9.80e-04  4.83e-02  5.55e-05  3.16e-03  6.36e-01  
  8  +2.1046e-01  +2.8825e-01  7.78e-02  4.39e-04  2.19e-02  3.22e-05  1.54e-03  5.82e-01  
  9  +2.0042e-01  +2.3449e-01  3.41e-02  1.89e-04  9.36e-03  1.74e-05  7.01e-04  6.58e-01  
 10  +1.9367e-01  +2.0056e-01  6.90e-03  3.80e-05  1.86e-03  3.96e-06  1.50e-04  8.59e-01  
 11  +1.9256e-01  +1.9555e-01  2.99e-03  1.64e-05  7.99e-04  1.88e-06  6.75e-05  7.00e-01  
 12  +1.9177e-01  +1.9216e-01  3.87e-04  2.12e-06  1.03e-04  2.37e-07  9.04e-06  8.87e-01  
 13  +1.9165e-01  +1.9166e-01  8.61e-06  4.72e-08  2.28e-06  5.20e-09  2.03e-07  9.78e-01  
 14  +1.9165e-01  +1.9165e-01  8.62e-08  4.73e-10  2.29e-08  5.20e-11  2.03e-09  9.90e-01  
 15  +1.9165e-01  +1.9165e-01  8.63e-10  4.74e-12  2.29e-10  5.22e-13  2.04e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.0834ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:03 PM: Optimal value: 1.917e-01
(CVXPY) Oct 06 04:15:03 PM: Compilation took 1.501e-02 seconds
(CVXPY) Oct 06 04:15:03 PM: Solver (including time spent in interface) took 1.571e-02 seconds
Iteration: 20, Objective: 0.1917
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:03 PM: Your problem has 469 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Finished problem compilation (took 1.508e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 469
  constraints   = 719
  nnz(P)        = 0
  nnz(A)        = 5297
  cones (total) = 1
    : Nonnegative = 1,  numel = 719

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9708e-01  +2.5248e+02  2.52e+02  9.47e-01  2.30e+01  1.00e+00  1.02e+00   ------   
  1  +5.0703e-01  +5.6059e+01  5.56e+01  4.26e-01  1.33e+01  3.94e-03  5.71e-01  5.83e-01  
  2  +4.5908e-01  +8.5118e+00  8.05e+00  1.07e-01  4.76e+00  2.37e-02  2.21e-01  9.87e-01  
  3  +4.1101e-01  +2.2780e+00  1.87e+00  1.81e-02  9.08e-01  1.01e-02  4.30e-02  8.17e-01  
  4  +3.5421e-01  +2.0152e+00  1.66e+00  1.10e-02  5.54e-01  1.07e-02  2.65e-02  4.65e-01  
  5  +3.0555e-01  +1.0051e+00  7.00e-01  4.94e-03  2.41e-01  9.13e-05  1.32e-02  8.06e-01  
  6  +2.5490e-01  +5.5571e-01  3.01e-01  1.99e-03  9.58e-02  5.01e-05  5.87e-03  5.84e-01  
  7  +2.2599e-01  +3.9917e-01  1.73e-01  1.05e-03  5.12e-02  5.23e-05  3.38e-03  5.36e-01  
  8  +2.0331e-01  +2.8154e-01  7.82e-02  4.41e-04  2.16e-02  2.87e-05  1.55e-03  5.97e-01  
  9  +1.9038e-01  +2.1716e-01  2.68e-02  1.46e-04  7.16e-03  1.34e-05  5.49e-04  7.51e-01  
 10  +1.8888e-01  +2.1002e-01  2.11e-02  1.09e-04  5.49e-03  1.31e-05  4.14e-04  4.73e-01  
 11  +1.8388e-01  +1.8875e-01  4.87e-03  2.47e-05  1.24e-03  3.28e-06  9.90e-05  8.66e-01  
 12  +1.8263e-01  +1.8383e-01  1.19e-03  6.03e-06  3.01e-04  8.40e-07  2.52e-05  8.34e-01  
 13  +1.8223e-01  +1.8230e-01  7.39e-05  3.73e-07  1.86e-05  5.11e-08  1.58e-06  9.42e-01  
 14  +1.8220e-01  +1.8220e-01  7.48e-07  3.77e-09  1.88e-07  5.17e-10  1.61e-08  9.90e-01  
 15  +1.8220e-01  +1.8220e-01  7.48e-09  3.78e-11  1.88e-09  5.17e-12  1.61e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.5155ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:03 PM: Optimal value: 1.822e-01
(CVXPY) Oct 06 04:15:03 PM: Compilation took 1.508e-02 seconds
(CVXPY) Oct 06 04:15:03 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 21, Objective: 0.1822
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:03 PM: Your problem has 479 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 479
  constraints   = 729
  nnz(P)        = 0
  nnz(A)        = 5413
  cones (total) = 1
    : Nonnegative = 1,  numel = 729

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9697e-01  +2.5267e+02  2.52e+02  9.48e-01  2.29e+01  1.00e+00  1.02e+00   ------   
  1  +5.0228e-01  +5.6214e+01  5.57e+01  4.26e-01  1.32e+01  3.96e-03  5.71e-01  5.82e-01  
  2  +4.5300e-01  +8.5494e+00  8.10e+00  1.05e-01  4.65e+00  2.40e-02  2.19e-01  9.90e-01  
  3  +4.0415e-01  +2.5437e+00  2.14e+00  2.08e-02  1.03e+00  1.04e-02  4.96e-02  7.86e-01  
  4  +3.4134e-01  +2.1596e+00  1.82e+00  1.19e-02  5.89e-01  1.09e-02  2.88e-02  4.90e-01  
  5  +3.0609e-01  +1.1251e+00  8.19e-01  6.04e-03  2.91e-01  8.78e-05  1.62e-02  7.95e-01  
  6  +2.4910e-01  +5.3577e-01  2.87e-01  1.94e-03  9.18e-02  4.57e-05  5.82e-03  6.74e-01  
  7  +2.2411e-01  +4.0602e-01  1.82e-01  1.14e-03  5.42e-02  5.25e-05  3.67e-03  4.89e-01  
  8  +2.0171e-01  +2.8308e-01  8.14e-02  4.78e-04  2.29e-02  2.90e-05  1.69e-03  6.01e-01  
  9  +1.9174e-01  +2.2962e-01  3.79e-02  2.18e-04  1.04e-02  1.46e-05  8.10e-04  5.56e-01  
 10  +1.8779e-01  +2.0884e-01  2.11e-02  1.16e-04  5.61e-03  1.15e-05  4.46e-04  6.64e-01  
 11  +1.8421e-01  +1.9152e-01  7.31e-03  4.01e-05  1.93e-03  4.60e-06  1.62e-04  8.12e-01  
 12  +1.8243e-01  +1.8382e-01  1.39e-03  7.58e-06  3.64e-04  8.26e-07  3.23e-05  8.16e-01  
 13  +1.8204e-01  +1.8218e-01  1.33e-04  7.25e-07  3.47e-05  9.25e-08  3.16e-06  9.89e-01  
 14  +1.8200e-01  +1.8200e-01  1.38e-06  7.48e-09  3.58e-07  9.52e-10  3.27e-08  9.90e-01  
 15  +1.8200e-01  +1.8200e-01  1.38e-08  7.48e-11  3.58e-09  9.53e-12  3.27e-10  9.90e-01  
 16  +1.8200e-01  +1.8200e-01  1.38e-10  7.49e-13  3.58e-11  9.54e-14  3.28e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.482ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:03 PM: Optimal value: 1.820e-01
(CVXPY) Oct 06 04:15:03 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:03 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 22, Objective: 0.1820
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:03 PM: Your problem has 489 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:03 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 489
  constraints   = 739
  nnz(P)        = 0
  nnz(A)        = 5457
  cones (total) = 1
    : Nonnegative = 1,  numel = 739

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9691e-01  +2.5273e+02  2.52e+02  9.48e-01  2.28e+01  1.00e+00  1.02e+00   ------   
  1  +4.9881e-01  +5.6373e+01  5.59e+01  4.27e-01  1.31e+01  3.97e-03  5.72e-01  5.81e-01  
  2  +4.4987e-01  +8.5659e+00  8.12e+00  1.05e-01  4.61e+00  2.42e-02  2.19e-01  9.90e-01  
  3  +4.0041e-01  +2.4457e+00  2.05e+00  2.01e-02  9.85e-01  1.00e-02  4.82e-02  7.95e-01  
  4  +3.3875e-01  +2.1674e+00  1.83e+00  1.21e-02  5.94e-01  1.08e-02  2.94e-02  4.73e-01  
  5  +3.0452e-01  +1.2049e+00  9.00e-01  6.72e-03  3.21e-01  8.74e-05  1.80e-02  8.29e-01  
  6  +2.4635e-01  +5.1210e-01  2.66e-01  1.83e-03  8.59e-02  3.60e-05  5.52e-03  7.18e-01  
  7  +2.2357e-01  +4.0812e-01  1.85e-01  1.17e-03  5.52e-02  5.27e-05  3.76e-03  4.68e-01  
  8  +2.0121e-01  +2.8483e-01  8.36e-02  4.99e-04  2.37e-02  2.88e-05  1.77e-03  5.88e-01  
  9  +1.9132e-01  +2.3111e-01  3.98e-02  2.33e-04  1.10e-02  1.44e-05  8.75e-04  5.33e-01  
 10  +1.8455e-01  +1.9339e-01  8.84e-03  5.16e-05  2.43e-03  6.33e-06  2.07e-04  9.90e-01  
 11  +1.8284e-01  +1.8589e-01  3.05e-03  1.76e-05  8.24e-04  2.09e-06  7.53e-05  7.06e-01  
 12  +1.8211e-01  +1.8276e-01  6.51e-04  3.73e-06  1.74e-04  4.24e-07  1.68e-05  8.10e-01  
 13  +1.8194e-01  +1.8207e-01  1.32e-04  7.46e-07  3.48e-05  8.38e-08  3.49e-06  8.14e-01  
 14  +1.8190e-01  +1.8191e-01  6.74e-06  3.81e-08  1.78e-06  4.20e-09  1.80e-07  9.90e-01  
 15  +1.8190e-01  +1.8190e-01  6.76e-08  3.82e-10  1.78e-08  4.21e-11  1.81e-09  9.90e-01  
 16  +1.8190e-01  +1.8190e-01  6.79e-10  3.84e-12  1.79e-10  4.25e-13  1.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.4162ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:03 PM: Optimal value: 1.819e-01
(CVXPY) Oct 06 04:15:03 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:15:03 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 23, Objective: 0.1819
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:04 PM: Your problem has 499 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:04 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 499
  constraints   = 749
  nnz(P)        = 0
  nnz(A)        = 5527
  cones (total) = 1
    : Nonnegative = 1,  numel = 749

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9691e-01  +2.5274e+02  2.52e+02  9.48e-01  2.26e+01  1.00e+00  1.02e+00   ------   
  1  +4.9692e-01  +5.6399e+01  5.59e+01  4.26e-01  1.30e+01  3.98e-03  5.70e-01  5.82e-01  
  2  +4.4758e-01  +8.5424e+00  8.09e+00  1.05e-01  4.54e+00  2.40e-02  2.19e-01  9.88e-01  
  3  +3.9901e-01  +2.5800e+00  2.18e+00  2.18e-02  1.06e+00  1.00e-02  5.25e-02  7.76e-01  
  4  +3.3660e-01  +2.2457e+00  1.91e+00  1.28e-02  6.23e-01  1.07e-02  3.15e-02  4.72e-01  
  5  +3.2107e-01  +1.3169e+00  9.96e-01  8.06e-03  3.82e-01  8.16e-05  2.17e-02  7.16e-01  
  6  +2.5576e-01  +6.1006e-01  3.54e-01  2.50e-03  1.16e-01  5.97e-05  7.43e-03  7.05e-01  
  7  +2.2459e-01  +4.2298e-01  1.98e-01  1.29e-03  6.01e-02  5.97e-05  4.19e-03  5.53e-01  
  8  +2.0382e-01  +3.0338e-01  9.96e-02  6.07e-04  2.86e-02  3.57e-05  2.15e-03  5.51e-01  
  9  +1.8967e-01  +2.2285e-01  3.32e-02  1.96e-04  9.21e-03  1.33e-05  7.44e-04  6.98e-01  
 10  +1.8456e-01  +1.9336e-01  8.80e-03  5.19e-05  2.42e-03  6.22e-06  2.10e-04  9.90e-01  
 11  +1.8277e-01  +1.8555e-01  2.78e-03  1.62e-05  7.53e-04  1.87e-06  7.00e-05  7.38e-01  
 12  +1.8213e-01  +1.8284e-01  7.15e-04  4.13e-06  1.91e-04  4.64e-07  1.88e-05  7.74e-01  
 13  +1.8195e-01  +1.8209e-01  1.40e-04  8.01e-07  3.71e-05  8.87e-08  3.77e-06  8.13e-01  
 14  +1.8190e-01  +1.8191e-01  8.77e-06  4.99e-08  2.31e-06  5.39e-09  2.38e-07  9.90e-01  
 15  +1.8190e-01  +1.8190e-01  8.83e-08  5.02e-10  2.33e-08  5.43e-11  2.39e-09  9.90e-01  
 16  +1.8190e-01  +1.8190e-01  8.85e-10  5.03e-12  2.33e-10  5.44e-13  2.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.2651ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:04 PM: Optimal value: 1.819e-01
(CVXPY) Oct 06 04:15:04 PM: Compilation took 1.571e-02 seconds
(CVXPY) Oct 06 04:15:04 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 24, Objective: 0.1819
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:04 PM: Your problem has 509 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:04 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 509
  constraints   = 759
  nnz(P)        = 0
  nnz(A)        = 5576
  cones (total) = 1
    : Nonnegative = 1,  numel = 759

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9687e-01  +2.5292e+02  2.52e+02  9.49e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +4.9332e-01  +5.6578e+01  5.61e+01  4.27e-01  1.29e+01  3.99e-03  5.70e-01  5.81e-01  
  2  +4.4396e-01  +9.1515e+00  8.71e+00  1.11e-01  4.71e+00  2.40e-02  2.29e-01  9.59e-01  
  3  +3.9848e-01  +2.7712e+00  2.37e+00  2.42e-02  1.16e+00  9.74e-03  5.83e-02  7.60e-01  
  4  +3.3318e-01  +2.3778e+00  2.04e+00  1.40e-02  6.72e-01  1.02e-02  3.44e-02  4.91e-01  
  5  +3.1315e-01  +1.3586e+00  1.05e+00  8.33e-03  3.92e-01  8.07e-05  2.24e-02  7.90e-01  
  6  +2.4852e-01  +5.4887e-01  3.00e-01  2.12e-03  9.79e-02  4.01e-05  6.37e-03  7.43e-01  
  7  +2.2822e-01  +4.4397e-01  2.16e-01  1.44e-03  6.67e-02  5.11e-05  4.61e-03  3.88e-01  
  8  +2.0672e-01  +3.2031e-01  1.14e-01  7.15e-04  3.32e-02  3.27e-05  2.51e-03  5.08e-01  
  9  +1.8973e-01  +2.2391e-01  3.42e-02  2.05e-04  9.55e-03  1.27e-05  7.94e-04  7.48e-01  
 10  +1.8557e-01  +1.9937e-01  1.38e-02  8.35e-05  3.85e-03  8.05e-06  3.41e-04  8.57e-01  
 11  +1.8274e-01  +1.8583e-01  3.09e-03  1.85e-05  8.50e-04  1.70e-06  8.08e-05  8.05e-01  
 12  +1.8219e-01  +1.8345e-01  1.26e-03  7.42e-06  3.39e-04  7.05e-07  3.45e-05  6.83e-01  
 13  +1.8187e-01  +1.8209e-01  2.20e-04  1.27e-06  5.82e-05  1.18e-07  6.29e-06  8.37e-01  
 14  +1.8180e-01  +1.8182e-01  1.48e-05  8.47e-08  3.88e-06  8.38e-09  4.29e-07  9.90e-01  
 15  +1.8180e-01  +1.8180e-01  1.50e-07  8.56e-10  3.92e-08  8.47e-11  4.34e-09  9.90e-01  
 16  +1.8180e-01  +1.8180e-01  1.50e-09  8.60e-12  3.94e-10  8.51e-13  4.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.2002ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:04 PM: Optimal value: 1.818e-01
(CVXPY) Oct 06 04:15:04 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:15:04 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 25, Objective: 0.1818
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:04 PM: Your problem has 510 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:04 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 510
  constraints   = 760
  nnz(P)        = 0
  nnz(A)        = 5596
  cones (total) = 1
    : Nonnegative = 1,  numel = 760

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9687e-01  +2.5293e+02  2.52e+02  9.49e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +4.9299e-01  +5.6594e+01  5.61e+01  4.26e-01  1.29e+01  4.00e-03  5.70e-01  5.81e-01  
  2  +4.4337e-01  +8.9166e+00  8.47e+00  1.08e-01  4.61e+00  2.41e-02  2.25e-01  9.70e-01  
  3  +3.9740e-01  +2.7583e+00  2.36e+00  2.41e-02  1.15e+00  9.83e-03  5.82e-02  7.56e-01  
  4  +3.3246e-01  +2.3861e+00  2.05e+00  1.40e-02  6.75e-01  1.04e-02  3.47e-02  4.85e-01  
  5  +3.1410e-01  +1.3807e+00  1.07e+00  8.55e-03  4.02e-01  8.20e-05  2.30e-02  7.83e-01  
  6  +2.4919e-01  +5.5857e-01  3.09e-01  2.19e-03  1.01e-01  4.11e-05  6.56e-03  7.42e-01  
  7  +2.2807e-01  +4.4687e-01  2.19e-01  1.47e-03  6.78e-02  5.24e-05  4.70e-03  3.98e-01  
  8  +2.0375e-01  +3.0435e-01  1.01e-01  6.31e-04  2.93e-02  3.13e-05  2.25e-03  5.88e-01  
  9  +1.9039e-01  +2.2823e-01  3.78e-02  2.29e-04  1.06e-02  1.51e-05  8.85e-04  6.92e-01  
 10  +1.8458e-01  +1.9417e-01  9.60e-03  5.81e-05  2.68e-03  6.48e-06  2.39e-04  9.90e-01  
 11  +1.8262e-01  +1.8529e-01  2.67e-03  1.60e-05  7.33e-04  1.69e-06  7.07e-05  7.75e-01  
 12  +1.8209e-01  +1.8301e-01  9.23e-04  5.45e-06  2.49e-04  5.67e-07  2.55e-05  7.16e-01  
 13  +1.8187e-01  +1.8207e-01  2.06e-04  1.19e-06  5.44e-05  1.22e-07  5.88e-06  7.96e-01  
 14  +1.8180e-01  +1.8182e-01  1.34e-05  7.70e-08  3.53e-06  7.72e-09  3.90e-07  9.90e-01  
 15  +1.8180e-01  +1.8180e-01  1.36e-07  7.82e-10  3.58e-08  7.83e-11  3.97e-09  9.90e-01  
 16  +1.8180e-01  +1.8180e-01  1.37e-09  7.86e-12  3.60e-10  7.88e-13  3.99e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.6493ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:04 PM: Optimal value: 1.818e-01
(CVXPY) Oct 06 04:15:04 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:04 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 26, Objective: 0.1818
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:15:04 PM: Your problem has 512 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 04:15:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:15:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:15:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:15:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:15:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:15:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:15:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:15:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:15:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:15:04 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 512
  constraints   = 762
  nnz(P)        = 0
  nnz(A)        = 5611
  cones (total) = 1
    : Nonnegative = 1,  numel = 762

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9686e-01  +2.5293e+02  2.52e+02  9.49e-01  2.25e+01  1.00e+00  1.02e+00   ------   
  1  +4.9288e-01  +5.6595e+01  5.61e+01  4.27e-01  1.28e+01  4.00e-03  5.70e-01  5.81e-01  
  2  +4.4325e-01  +8.9839e+00  8.54e+00  1.09e-01  4.63e+00  2.40e-02  2.27e-01  9.66e-01  
  3  +3.9745e-01  +2.7551e+00  2.36e+00  2.41e-02  1.15e+00  9.74e-03  5.83e-02  7.57e-01  
  4  +3.3241e-01  +2.3872e+00  2.05e+00  1.41e-02  6.76e-01  1.03e-02  3.48e-02  4.84e-01  
  5  +3.1393e-01  +1.3795e+00  1.07e+00  8.55e-03  4.01e-01  8.16e-05  2.30e-02  7.82e-01  
  6  +2.4909e-01  +5.5887e-01  3.10e-01  2.19e-03  1.01e-01  4.11e-05  6.59e-03  7.41e-01  
  7  +2.2803e-01  +4.4680e-01  2.19e-01  1.47e-03  6.77e-02  5.12e-05  4.72e-03  3.93e-01  
  8  +2.0457e-01  +3.0956e-01  1.05e-01  6.61e-04  3.06e-02  3.20e-05  2.36e-03  5.69e-01  
  9  +1.8975e-01  +2.2469e-01  3.49e-02  2.11e-04  9.80e-03  1.40e-05  8.22e-04  7.36e-01  
 10  +1.8414e-01  +1.9212e-01  7.97e-03  4.83e-05  2.22e-03  5.31e-06  2.01e-04  9.90e-01  
 11  +1.8254e-01  +1.8495e-01  2.41e-03  1.45e-05  6.60e-04  1.52e-06  6.44e-05  7.52e-01  
 12  +1.8199e-01  +1.8259e-01  6.02e-04  3.54e-06  1.61e-04  3.63e-07  1.68e-05  8.11e-01  
 13  +1.8181e-01  +1.8186e-01  4.19e-05  2.44e-07  1.11e-05  2.35e-08  1.21e-06  9.90e-01  
 14  +1.8180e-01  +1.8180e-01  4.37e-07  2.54e-09  1.15e-07  2.44e-10  1.26e-08  9.90e-01  
 15  +1.8180e-01  +1.8180e-01  4.42e-09  2.56e-11  1.16e-09  2.46e-12  1.27e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.0817ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:15:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:15:04 PM: Optimal value: 1.818e-01
(CVXPY) Oct 06 04:15:04 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:15:04 PM: Solver (including time spent in interface) took 2.964e-02 seconds
FULL MODEL:
  Accruacy: 0.768
  Our objective: 0.536

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.176)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.04)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.052)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x8 = 1)                                             <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 0)                       <-- (term's our objective: 0.032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x5 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.028)
 OR (x0 = 1 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x4 = 0 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.02)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.008)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.016)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x6 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.032)
 OR (x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.50124478340149
Best over terms:
  Our final objective: 0.176
    Its accruacy: 0.588
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.176
  Highest accruacy: 0.588
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

