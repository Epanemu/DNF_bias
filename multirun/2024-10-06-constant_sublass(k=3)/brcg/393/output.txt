Command:
python test_script.py -s constant_subclass -d 10 -n 10000 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1488
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10000 remain. 
Dimension is 10.

Computed total variation: 0.3024
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:15 PM: Your problem has 5021 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:15 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:15 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:15 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:15 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:15 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:15 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:15 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:15 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:15 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:15 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:15 PM: Finished problem compilation (took 7.719e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:15 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5021
  constraints   = 10021
  nnz(P)        = 0
  nnz(A)        = 65021
  cones (total) = 1
    : Nonnegative = 1,  numel = 10021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0015e-01  +5.0012e+03  5.00e+03  9.86e-01  1.21e+02  1.00e+00  1.00e+00   ------   
  1  +5.7824e-01  +1.0987e+03  1.10e+03  4.43e-01  8.03e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2940e-01  +1.2045e+02  1.20e+02  1.78e-01  4.15e+01  1.78e-02  2.90e-01  9.54e-01  
  3  +5.0838e-01  +3.1281e+01  3.08e+01  1.24e-01  2.90e+01  5.02e-05  2.63e-01  3.42e-01  
  4  +5.0115e-01  +3.4035e+00  2.90e+00  1.98e-02  4.69e+00  6.13e-06  1.69e-01  5.91e-01  
  5  +5.0013e-01  +1.0563e+00  5.56e-01  3.73e-03  9.04e-01  4.60e-05  9.77e-02  9.90e-01  
  6  +4.9998e-01  +6.2668e-01  1.27e-01  8.41e-04  2.05e-01  3.19e-05  1.56e-02  8.55e-01  
  7  +4.9691e-01  +7.3466e-01  2.38e-01  1.94e-04  4.76e-02  1.49e-03  5.94e-04  9.81e-01  
  8  +4.8935e-01  +6.9184e-01  2.02e-01  6.03e-05  1.48e-02  3.62e-03  1.82e-04  7.07e-01  
  9  +4.8214e-01  +6.2260e-01  1.40e-01  4.23e-05  1.04e-02  1.53e-03  1.33e-04  4.10e-01  
 10  +4.7430e-01  +5.6941e-01  9.51e-02  2.67e-05  6.54e-03  7.05e-04  8.75e-05  4.82e-01  
 11  +4.6409e-01  +5.0743e-01  4.33e-02  1.11e-05  2.73e-03  7.36e-06  3.85e-05  9.08e-01  
 12  +4.5372e-01  +4.5719e-01  3.47e-03  8.38e-07  2.05e-04  1.87e-07  3.09e-06  9.55e-01  
 13  +4.5257e-01  +4.5278e-01  2.17e-04  4.55e-08  1.11e-05  1.05e-08  1.94e-07  9.76e-01  
 14  +4.5250e-01  +4.5250e-01  2.19e-06  4.59e-10  1.12e-07  1.06e-10  1.96e-09  9.90e-01  
 15  +4.5250e-01  +4.5250e-01  2.19e-08  4.59e-12  1.12e-09  1.06e-12  1.96e-11  9.90e-01  
 16  +4.5250e-01  +4.5250e-01  2.20e-10  4.60e-14  1.12e-11  1.12e-14  2.07e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 118.7417ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:16 PM: Optimal value: 4.525e-01
(CVXPY) Oct 06 04:30:16 PM: Compilation took 7.719e-02 seconds
(CVXPY) Oct 06 04:30:16 PM: Solver (including time spent in interface) took 1.410e-01 seconds
Initial LP solved
Iteration: 1, Objective: 0.4525
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:16 PM: Your problem has 5031 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:16 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5031
  constraints   = 10031
  nnz(P)        = 0
  nnz(A)        = 73957
  cones (total) = 1
    : Nonnegative = 1,  numel = 10031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7820e-01  +1.0990e+03  1.10e+03  4.43e-01  8.29e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2927e-01  +1.2025e+02  1.20e+02  1.78e-01  4.28e+01  1.78e-02  2.90e-01  9.55e-01  
  3  +5.0832e-01  +3.1162e+01  3.07e+01  1.24e-01  2.98e+01  5.03e-05  2.63e-01  3.47e-01  
  4  +5.0112e-01  +3.3322e+00  2.83e+00  1.93e-02  4.73e+00  6.20e-06  1.65e-01  6.08e-01  
  5  +5.0027e-01  +1.3836e+00  8.83e-01  5.95e-03  1.48e+00  3.76e-05  1.10e-01  7.13e-01  
  6  +5.0003e-01  +6.9284e-01  1.93e-01  1.29e-03  3.23e-01  2.38e-05  2.69e-02  8.49e-01  
  7  +4.9982e-01  +7.1977e-01  2.20e-01  1.09e-03  2.76e-01  1.27e-04  4.90e-03  8.40e-01  
  8  +4.9622e-01  +7.0861e-01  2.12e-01  1.17e-04  2.98e-02  1.74e-03  3.27e-04  9.33e-01  
  9  +4.9180e-01  +6.8185e-01  1.90e-01  5.53e-05  1.41e-02  2.49e-03  1.53e-04  6.84e-01  
 10  +4.9029e-01  +6.6978e-01  1.79e-01  4.67e-05  1.19e-02  1.67e-03  1.29e-04  4.48e-01  
 11  +4.8840e-01  +6.5998e-01  1.72e-01  4.51e-05  1.15e-02  1.34e-03  1.28e-04  1.08e-01  
 12  +4.8481e-01  +6.3534e-01  1.51e-01  3.93e-05  9.98e-03  7.95e-04  1.11e-04  3.50e-01  
 13  +4.7352e-01  +5.9196e-01  1.18e-01  2.44e-05  6.17e-03  1.49e-04  6.97e-05  8.60e-01  
 14  +4.5124e-01  +5.0929e-01  5.80e-02  1.00e-05  2.53e-03  4.57e-05  3.00e-05  6.96e-01  
 15  +4.4826e-01  +4.9825e-01  5.00e-02  8.89e-06  2.24e-03  2.04e-05  2.90e-05  3.72e-01  
 16  +4.4329e-01  +4.7958e-01  3.63e-02  6.36e-06  1.61e-03  1.31e-05  2.09e-05  3.87e-01  
 17  +4.4009e-01  +4.6912e-01  2.90e-02  5.01e-06  1.26e-03  9.72e-06  1.61e-05  3.33e-01  
 18  +4.3529e-01  +4.5760e-01  2.23e-02  3.55e-06  8.96e-04  7.18e-06  1.10e-05  4.38e-01  
 19  +4.2593e-01  +4.2644e-01  5.04e-04  7.94e-08  2.00e-05  7.07e-08  2.53e-07  9.85e-01  
 20  +4.2570e-01  +4.2571e-01  5.05e-06  7.93e-10  2.00e-07  7.07e-10  2.54e-09  9.90e-01  
 21  +4.2570e-01  +4.2570e-01  5.05e-08  7.94e-12  2.00e-09  7.10e-12  2.55e-11  9.90e-01  
 22  +4.2570e-01  +4.2570e-01  5.05e-10  7.93e-14  2.00e-11  7.14e-14  2.56e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 181.1655ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:16 PM: Optimal value: 4.257e-01
(CVXPY) Oct 06 04:30:16 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:30:16 PM: Solver (including time spent in interface) took 2.031e-01 seconds
Iteration: 2, Objective: 0.4257
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:16 PM: Your problem has 5041 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:16 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5041
  constraints   = 10041
  nnz(P)        = 0
  nnz(A)        = 75853
  cones (total) = 1
    : Nonnegative = 1,  numel = 10041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7814e-01  +1.0991e+03  1.10e+03  4.44e-01  8.29e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2921e-01  +1.2014e+02  1.20e+02  1.78e-01  4.28e+01  1.78e-02  2.90e-01  9.56e-01  
  3  +5.0831e-01  +3.1121e+01  3.06e+01  1.24e-01  2.98e+01  5.04e-05  2.63e-01  3.50e-01  
  4  +5.0112e-01  +3.3218e+00  2.82e+00  1.93e-02  4.72e+00  6.22e-06  1.64e-01  6.12e-01  
  5  +5.0017e-01  +1.1422e+00  6.42e-01  4.31e-03  1.08e+00  4.21e-05  8.95e-02  9.55e-01  
  6  +5.0002e-01  +7.4149e-01  2.41e-01  1.60e-03  4.02e-01  3.56e-05  2.34e-02  7.79e-01  
  7  +4.9833e-01  +8.5879e-01  3.60e-01  4.18e-04  1.06e-01  8.50e-04  1.21e-03  9.84e-01  
  8  +4.9185e-01  +8.1361e-01  3.22e-01  9.66e-05  2.46e-02  3.16e-03  2.68e-04  7.82e-01  
  9  +4.8929e-01  +7.7980e-01  2.91e-01  7.88e-05  2.01e-02  2.79e-03  2.19e-04  2.53e-01  
 10  +4.9078e-01  +7.3836e-01  2.48e-01  7.14e-05  1.82e-02  1.09e-03  1.96e-04  4.50e-01  
 11  +4.8287e-01  +6.8286e-01  2.00e-01  4.37e-05  1.11e-02  8.87e-04  1.22e-04  5.14e-01  
 12  +4.8268e-01  +6.8167e-01  1.99e-01  4.36e-05  1.11e-02  8.75e-04  1.21e-04  3.31e-03  
 13  +4.7994e-01  +6.6315e-01  1.83e-01  4.10e-05  1.04e-02  6.42e-04  1.15e-04  1.73e-01  
 14  +4.6215e-01  +5.8126e-01  1.19e-01  2.18e-05  5.53e-03  3.82e-04  6.36e-05  5.19e-01  
 15  +4.5925e-01  +5.6722e-01  1.08e-01  1.99e-05  5.05e-03  2.59e-04  5.88e-05  2.52e-01  
 16  +4.5449e-01  +5.4206e-01  8.76e-02  1.55e-05  3.93e-03  3.25e-05  4.63e-05  8.28e-01  
 17  +4.2842e-01  +4.4468e-01  1.63e-02  2.73e-06  6.90e-04  1.03e-06  8.75e-06  8.97e-01  
 18  +4.2639e-01  +4.3787e-01  1.15e-02  1.91e-06  4.82e-04  7.48e-07  6.16e-06  4.05e-01  
 19  +4.2630e-01  +4.3757e-01  1.13e-02  1.86e-06  4.70e-04  7.50e-07  6.01e-06  1.42e-01  
 20  +4.2346e-01  +4.2803e-01  4.57e-03  7.47e-07  1.89e-04  3.47e-07  2.45e-06  9.90e-01  
 21  +4.2154e-01  +4.2185e-01  3.07e-04  5.03e-08  1.27e-05  2.24e-08  1.67e-07  9.64e-01  
 22  +4.2140e-01  +4.2140e-01  3.33e-06  5.45e-10  1.38e-07  2.38e-10  1.82e-09  9.90e-01  
 23  +4.2140e-01  +4.2140e-01  3.33e-08  5.45e-12  1.38e-09  2.38e-12  1.82e-11  9.90e-01  
 24  +4.2140e-01  +4.2140e-01  3.33e-10  5.46e-14  1.38e-11  2.38e-14  1.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 207.4635ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:16 PM: Optimal value: 4.214e-01
(CVXPY) Oct 06 04:30:16 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:30:16 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 3, Objective: 0.4214
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:17 PM: Your problem has 5051 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:17 PM: Finished problem compilation (took 4.696e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5051
  constraints   = 10051
  nnz(P)        = 0
  nnz(A)        = 77285
  cones (total) = 1
    : Nonnegative = 1,  numel = 10051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0012e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7804e-01  +1.0993e+03  1.10e+03  4.44e-01  8.30e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2911e-01  +1.1997e+02  1.19e+02  1.78e-01  4.27e+01  1.79e-02  2.90e-01  9.57e-01  
  3  +5.0829e-01  +3.1073e+01  3.06e+01  1.24e-01  2.97e+01  5.06e-05  2.62e-01  3.53e-01  
  4  +5.0111e-01  +3.3154e+00  2.81e+00  1.92e-02  4.72e+00  6.24e-06  1.63e-01  6.15e-01  
  5  +5.0016e-01  +1.1374e+00  6.37e-01  4.28e-03  1.07e+00  4.34e-05  8.48e-02  9.90e-01  
  6  +5.0001e-01  +7.5915e-01  2.59e-01  1.70e-03  4.27e-01  4.45e-05  1.93e-02  8.46e-01  
  7  +4.9739e-01  +8.0375e-01  3.06e-01  2.46e-04  6.28e-02  1.27e-03  6.93e-04  9.75e-01  
  8  +4.9106e-01  +7.5551e-01  2.64e-01  8.33e-05  2.13e-02  2.88e-03  2.31e-04  6.90e-01  
  9  +4.9149e-01  +7.4736e-01  2.56e-01  7.12e-05  1.82e-02  2.02e-03  1.95e-04  4.43e-01  
 10  +4.8993e-01  +7.2576e-01  2.36e-01  6.42e-05  1.64e-02  1.38e-03  1.76e-04  3.02e-01  
 11  +4.8963e-01  +7.1520e-01  2.26e-01  6.28e-05  1.60e-02  9.28e-04  1.73e-04  2.46e-01  
 12  +4.8555e-01  +6.9529e-01  2.10e-01  5.10e-05  1.30e-02  8.43e-04  1.41e-04  2.69e-01  
 13  +4.7461e-01  +6.3038e-01  1.56e-01  3.57e-05  9.06e-03  8.73e-06  1.02e-04  8.35e-01  
 14  +4.6782e-01  +6.0391e-01  1.36e-01  2.90e-05  7.35e-03  7.59e-06  8.41e-05  2.69e-01  
 15  +4.4997e-01  +5.3401e-01  8.40e-02  1.59e-05  4.03e-03  4.20e-06  4.85e-05  9.90e-01  
 16  +4.3987e-01  +4.9653e-01  5.67e-02  1.02e-05  2.57e-03  3.28e-06  3.17e-05  7.47e-01  
 17  +4.2426e-01  +4.4045e-01  1.62e-02  2.77e-06  7.00e-04  8.61e-07  9.09e-06  7.39e-01  
 18  +4.2065e-01  +4.2806e-01  7.41e-03  1.25e-06  3.15e-04  4.00e-07  4.16e-06  5.66e-01  
 19  +4.2066e-01  +4.2805e-01  7.39e-03  1.24e-06  3.13e-04  4.04e-07  4.14e-06  3.58e-02  
 20  +4.1935e-01  +4.2324e-01  3.89e-03  6.48e-07  1.64e-04  2.81e-07  2.17e-06  9.90e-01  
 21  +4.1773e-01  +4.1803e-01  2.94e-04  4.89e-08  1.23e-05  2.11e-08  1.66e-07  9.90e-01  
 22  +4.1760e-01  +4.1760e-01  2.99e-06  4.99e-10  1.26e-07  2.15e-10  1.69e-09  9.90e-01  
 23  +4.1760e-01  +4.1760e-01  2.99e-08  4.99e-12  1.26e-09  2.15e-12  1.69e-11  9.90e-01  
 24  +4.1760e-01  +4.1760e-01  2.99e-10  4.98e-14  1.26e-11  2.16e-14  1.69e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.8039ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:17 PM: Optimal value: 4.176e-01
(CVXPY) Oct 06 04:30:17 PM: Compilation took 4.696e-02 seconds
(CVXPY) Oct 06 04:30:17 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 4, Objective: 0.4176
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:17 PM: Your problem has 5061 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:17 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:17 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:17 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:17 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:17 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:17 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:17 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:17 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:17 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:17 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:17 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:17 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5061
  constraints   = 10061
  nnz(P)        = 0
  nnz(A)        = 78139
  cones (total) = 1
    : Nonnegative = 1,  numel = 10061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7798e-01  +1.0992e+03  1.10e+03  4.44e-01  8.29e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2906e-01  +1.1986e+02  1.19e+02  1.78e-01  4.26e+01  1.79e-02  2.90e-01  9.58e-01  
  3  +5.0827e-01  +3.1029e+01  3.05e+01  1.24e-01  2.96e+01  5.06e-05  2.62e-01  3.55e-01  
  4  +5.0111e-01  +3.3025e+00  2.80e+00  1.91e-02  4.70e+00  6.26e-06  1.62e-01  6.19e-01  
  5  +5.0020e-01  +1.2315e+00  7.31e-01  4.92e-03  1.23e+00  4.31e-05  8.77e-02  9.27e-01  
  6  +5.0004e-01  +8.3592e-01  3.36e-01  2.21e-03  5.54e-01  4.53e-05  2.46e-02  7.73e-01  
  7  +4.9805e-01  +8.6623e-01  3.68e-01  3.61e-04  9.21e-02  9.79e-04  1.02e-03  9.83e-01  
  8  +4.9183e-01  +8.2069e-01  3.29e-01  1.02e-04  2.60e-02  2.92e-03  2.79e-04  7.38e-01  
  9  +4.8972e-01  +7.9232e-01  3.03e-01  8.75e-05  2.23e-02  2.42e-03  2.40e-04  2.46e-01  
 10  +4.8575e-01  +7.6536e-01  2.80e-01  6.87e-05  1.75e-02  2.31e-03  1.90e-04  2.76e-01  
 11  +4.8350e-01  +7.3650e-01  2.53e-01  5.92e-05  1.51e-02  1.45e-03  1.64e-04  3.72e-01  
 12  +4.8280e-01  +7.2869e-01  2.46e-01  5.83e-05  1.49e-02  1.25e-03  1.62e-04  8.81e-02  
 13  +4.6759e-01  +6.4405e-01  1.76e-01  3.60e-05  9.13e-03  5.75e-04  1.04e-04  5.67e-01  
 14  +4.4163e-01  +5.2723e-01  8.56e-02  1.60e-05  4.04e-03  1.65e-04  4.96e-05  6.11e-01  
 15  +4.3135e-01  +4.8614e-01  5.48e-02  9.97e-06  2.52e-03  9.64e-05  3.20e-05  3.88e-01  
 16  +4.2044e-01  +4.4158e-01  2.11e-02  3.70e-06  9.32e-04  2.26e-06  1.23e-05  9.90e-01  
 17  +4.1380e-01  +4.1807e-01  4.26e-03  7.40e-07  1.87e-04  4.36e-07  2.55e-06  8.21e-01  
 18  +4.1380e-01  +4.1812e-01  4.32e-03  7.41e-07  1.87e-04  4.44e-07  2.54e-06  1.53e-02  
 19  +4.1350e-01  +4.1685e-01  3.35e-03  5.82e-07  1.47e-04  2.23e-07  2.02e-06  9.90e-01  
 20  +4.1293e-01  +4.1504e-01  2.11e-03  3.61e-07  9.11e-05  1.44e-07  1.25e-06  5.10e-01  
 21  +4.1202e-01  +4.1206e-01  4.22e-05  7.22e-09  1.82e-06  2.85e-09  2.51e-08  9.90e-01  
 22  +4.1200e-01  +4.1200e-01  4.22e-07  7.22e-11  1.82e-08  2.85e-11  2.51e-10  9.90e-01  
 23  +4.1200e-01  +4.1200e-01  4.22e-09  7.22e-13  1.82e-10  2.86e-13  2.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 214.3546ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:17 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:17 PM: Optimal value: 4.120e-01
(CVXPY) Oct 06 04:30:17 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:30:17 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 5, Objective: 0.4120
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:18 PM: Your problem has 5071 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:18 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5071
  constraints   = 10071
  nnz(P)        = 0
  nnz(A)        = 78912
  cones (total) = 1
    : Nonnegative = 1,  numel = 10071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0014e-01  +5.0013e+03  5.00e+03  9.86e-01  1.26e+02  1.00e+00  1.00e+00   ------   
  1  +5.7791e-01  +1.0993e+03  1.10e+03  4.44e-01  8.28e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2900e-01  +1.1976e+02  1.19e+02  1.78e-01  4.25e+01  1.79e-02  2.89e-01  9.59e-01  
  3  +5.0826e-01  +3.0996e+01  3.05e+01  1.24e-01  2.96e+01  5.07e-05  2.62e-01  3.57e-01  
  4  +5.0111e-01  +3.2967e+00  2.80e+00  1.91e-02  4.69e+00  6.27e-06  1.61e-01  6.21e-01  
  5  +5.0021e-01  +1.2543e+00  7.54e-01  5.08e-03  1.27e+00  4.33e-05  8.67e-02  9.24e-01  
  6  +5.0002e-01  +8.1406e-01  3.14e-01  2.05e-03  5.14e-01  4.87e-05  2.04e-02  8.13e-01  
  7  +4.9722e-01  +8.9895e-01  4.02e-01  2.87e-04  7.34e-02  1.37e-03  7.97e-04  9.85e-01  
  8  +4.9014e-01  +8.4339e-01  3.53e-01  9.53e-05  2.43e-02  3.28e-03  2.60e-04  6.94e-01  
  9  +4.8641e-01  +7.8053e-01  2.94e-01  7.60e-05  1.94e-02  1.73e-03  2.09e-04  4.38e-01  
 10  +4.8495e-01  +7.6672e-01  2.82e-01  7.16e-05  1.83e-02  1.50e-03  1.98e-04  1.30e-01  
 11  +4.8150e-01  +7.4094e-01  2.59e-01  6.32e-05  1.61e-02  1.19e-03  1.76e-04  2.24e-01  
 12  +4.6873e-01  +6.5157e-01  1.83e-01  4.15e-05  1.05e-02  1.36e-04  1.20e-04  7.50e-01  
 13  +4.4932e-01  +5.6608e-01  1.17e-01  2.35e-05  5.94e-03  7.64e-05  7.15e-05  4.45e-01  
 14  +4.3754e-01  +5.1610e-01  7.86e-02  1.50e-05  3.80e-03  2.93e-05  4.75e-05  5.97e-01  
 15  +4.2765e-01  +4.7487e-01  4.72e-02  8.57e-06  2.16e-03  2.99e-06  2.78e-05  9.90e-01  
 16  +4.1889e-01  +4.4217e-01  2.33e-02  4.17e-06  1.05e-03  1.46e-06  1.40e-05  5.44e-01  
 17  +4.1669e-01  +4.3385e-01  1.72e-02  3.04e-06  7.67e-04  1.11e-06  1.03e-05  4.42e-01  
 18  +4.1519e-01  +4.2766e-01  1.25e-02  2.19e-06  5.53e-04  8.62e-07  7.45e-06  9.90e-01  
 19  +4.1337e-01  +4.2144e-01  8.06e-03  1.40e-06  3.53e-04  5.64e-07  4.81e-06  3.86e-01  
 20  +4.1307e-01  +4.2037e-01  7.29e-03  1.29e-06  3.25e-04  4.86e-07  4.51e-06  5.44e-01  
 21  +4.1225e-01  +4.1746e-01  5.21e-03  9.19e-07  2.32e-04  3.49e-07  3.21e-06  7.59e-01  
 22  +4.1134e-01  +4.1440e-01  3.06e-03  5.36e-07  1.35e-04  2.09e-07  1.87e-06  5.11e-01  
 23  +4.1019e-01  +4.1065e-01  4.57e-04  7.95e-08  2.01e-05  2.69e-08  2.79e-07  9.90e-01  
 24  +4.1000e-01  +4.1001e-01  9.19e-06  1.59e-09  4.02e-07  5.58e-10  5.60e-09  9.81e-01  
 25  +4.1000e-01  +4.1000e-01  9.20e-08  1.59e-11  4.02e-09  5.58e-12  5.60e-11  9.90e-01  
 26  +4.1000e-01  +4.1000e-01  9.21e-10  1.60e-13  4.02e-11  5.95e-14  5.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 229.447ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:18 PM: Optimal value: 4.100e-01
(CVXPY) Oct 06 04:30:18 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:30:18 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 6, Objective: 0.4100
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:18 PM: Your problem has 5081 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:18 PM: Finished problem compilation (took 6.313e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5081
  constraints   = 10081
  nnz(P)        = 0
  nnz(A)        = 79529
  cones (total) = 1
    : Nonnegative = 1,  numel = 10081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7783e-01  +1.0994e+03  1.10e+03  4.44e-01  8.28e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2893e-01  +1.1963e+02  1.19e+02  1.78e-01  4.24e+01  1.79e-02  2.89e-01  9.60e-01  
  3  +5.0824e-01  +3.0962e+01  3.05e+01  1.23e-01  2.95e+01  5.08e-05  2.61e-01  3.59e-01  
  4  +5.0111e-01  +3.2953e+00  2.79e+00  1.91e-02  4.68e+00  6.28e-06  1.61e-01  6.22e-01  
  5  +5.0019e-01  +1.2003e+00  7.00e-01  4.71e-03  1.18e+00  4.51e-05  8.02e-02  9.90e-01  
  6  +5.0000e-01  +8.3293e-01  3.33e-01  2.13e-03  5.33e-01  6.09e-05  1.72e-02  8.58e-01  
  7  +4.9680e-01  +8.6613e-01  3.69e-01  2.39e-04  6.12e-02  1.55e-03  6.59e-04  9.77e-01  
  8  +4.9057e-01  +8.2538e-01  3.35e-01  9.70e-05  2.48e-02  3.13e-03  2.65e-04  6.20e-01  
  9  +4.8654e-01  +7.7541e-01  2.89e-01  7.52e-05  1.92e-02  1.96e-03  2.06e-04  4.52e-01  
 10  +4.8492e-01  +7.6286e-01  2.78e-01  7.09e-05  1.81e-02  1.73e-03  1.95e-04  1.22e-01  
 11  +4.7971e-01  +7.3060e-01  2.51e-01  5.96e-05  1.52e-02  1.38e-03  1.66e-04  2.52e-01  
 12  +4.6675e-01  +6.4450e-01  1.78e-01  4.12e-05  1.05e-02  1.37e-05  1.20e-04  7.89e-01  
 13  +4.5168e-01  +5.8049e-01  1.29e-01  2.68e-05  6.78e-03  9.40e-06  8.08e-05  3.84e-01  
 14  +4.3236e-01  +5.0087e-01  6.85e-02  1.29e-05  3.27e-03  3.38e-06  4.12e-05  9.90e-01  
 15  +4.2578e-01  +4.7495e-01  4.92e-02  8.90e-06  2.24e-03  3.11e-06  2.88e-05  8.37e-01  
 16  +4.1653e-01  +4.4065e-01  2.41e-02  4.31e-06  1.09e-03  1.52e-06  1.45e-05  5.58e-01  
 17  +4.1407e-01  +4.3139e-01  1.73e-02  3.06e-06  7.71e-04  1.12e-06  1.04e-05  4.72e-01  
 18  +4.1251e-01  +4.2502e-01  1.25e-02  2.20e-06  5.54e-04  8.63e-07  7.52e-06  9.90e-01  
 19  +4.0966e-01  +4.1532e-01  5.66e-03  9.90e-07  2.50e-04  3.92e-07  3.45e-06  5.90e-01  
 20  +4.0736e-01  +4.0751e-01  1.47e-04  2.56e-08  6.45e-06  9.75e-09  9.07e-08  9.90e-01  
 21  +4.0730e-01  +4.0730e-01  1.47e-06  2.56e-10  6.46e-08  9.77e-11  9.09e-10  9.90e-01  
 22  +4.0730e-01  +4.0730e-01  1.47e-08  2.56e-12  6.46e-10  9.77e-13  9.09e-12  9.90e-01  
 23  +4.0730e-01  +4.0730e-01  1.47e-10  2.56e-14  6.46e-12  9.83e-15  9.14e-14  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 206.8831ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:18 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:18 PM: Optimal value: 4.073e-01
(CVXPY) Oct 06 04:30:18 PM: Compilation took 6.313e-02 seconds
(CVXPY) Oct 06 04:30:18 PM: Solver (including time spent in interface) took 2.190e-01 seconds
Iteration: 7, Objective: 0.4073
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:19 PM: Your problem has 5091 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:19 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5091
  constraints   = 10091
  nnz(P)        = 0
  nnz(A)        = 80428
  cones (total) = 1
    : Nonnegative = 1,  numel = 10091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7778e-01  +1.0994e+03  1.10e+03  4.45e-01  8.27e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2889e-01  +1.1956e+02  1.19e+02  1.78e-01  4.23e+01  1.79e-02  2.89e-01  9.60e-01  
  3  +5.0824e-01  +3.0939e+01  3.04e+01  1.23e-01  2.95e+01  5.08e-05  2.61e-01  3.61e-01  
  4  +5.0110e-01  +3.2917e+00  2.79e+00  1.91e-02  4.68e+00  6.29e-06  1.60e-01  6.24e-01  
  5  +5.0019e-01  +1.2115e+00  7.11e-01  4.79e-03  1.20e+00  4.53e-05  7.93e-02  9.90e-01  
  6  +5.0001e-01  +8.4807e-01  3.48e-01  2.22e-03  5.57e-01  6.35e-05  1.75e-02  8.34e-01  
  7  +4.9677e-01  +8.7294e-01  3.76e-01  2.45e-04  6.27e-02  1.56e-03  6.73e-04  9.74e-01  
  8  +4.9082e-01  +8.3623e-01  3.45e-01  1.02e-04  2.62e-02  3.13e-03  2.79e-04  6.06e-01  
  9  +4.8722e-01  +7.9097e-01  3.04e-01  8.19e-05  2.09e-02  2.16e-03  2.24e-04  3.93e-01  
 10  +4.7997e-01  +7.3450e-01  2.55e-01  6.10e-05  1.56e-02  1.25e-03  1.69e-04  4.87e-01  
 11  +4.7083e-01  +6.7081e-01  2.00e-01  4.93e-05  1.25e-02  1.17e-05  1.42e-04  7.48e-01  
 12  +4.5002e-01  +5.7576e-01  1.26e-01  2.64e-05  6.68e-03  7.14e-06  7.97e-05  5.11e-01  
 13  +4.4583e-01  +5.5963e-01  1.14e-01  2.33e-05  5.89e-03  6.42e-06  7.10e-05  2.94e-01  
 14  +4.3539e-01  +5.1847e-01  8.31e-02  1.61e-05  4.08e-03  4.66e-06  5.07e-05  5.29e-01  
 15  +4.2581e-01  +4.8098e-01  5.52e-02  1.04e-05  2.62e-03  3.06e-06  3.36e-05  4.07e-01  
 16  +4.1962e-01  +4.5706e-01  3.74e-02  6.88e-06  1.74e-03  2.13e-06  2.28e-05  4.31e-01  
 17  +4.1251e-01  +4.3022e-01  1.77e-02  3.19e-06  8.04e-04  1.02e-06  1.08e-05  5.84e-01  
 18  +4.1165e-01  +4.2700e-01  1.53e-02  2.74e-06  6.93e-04  8.95e-07  9.38e-06  1.90e-01  
 19  +4.0864e-01  +4.1545e-01  6.80e-03  1.20e-06  3.02e-04  4.57e-07  4.16e-06  9.90e-01  
 20  +4.0602e-01  +4.0653e-01  5.16e-04  9.05e-08  2.28e-05  3.41e-08  3.20e-07  9.53e-01  
 21  +4.0580e-01  +4.0581e-01  5.46e-06  9.57e-10  2.42e-07  3.60e-10  3.40e-09  9.89e-01  
 22  +4.0580e-01  +4.0580e-01  5.46e-08  9.57e-12  2.42e-09  3.60e-12  3.40e-11  9.90e-01  
 23  +4.0580e-01  +4.0580e-01  5.46e-10  9.57e-14  2.42e-11  3.62e-14  3.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.5909ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:19 PM: Optimal value: 4.058e-01
(CVXPY) Oct 06 04:30:19 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:30:19 PM: Solver (including time spent in interface) took 2.360e-01 seconds
Iteration: 8, Objective: 0.4058
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:19 PM: Your problem has 5101 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:19 PM: Finished problem compilation (took 6.243e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5101
  constraints   = 10101
  nnz(P)        = 0
  nnz(A)        = 80794
  cones (total) = 1
    : Nonnegative = 1,  numel = 10101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7768e-01  +1.0995e+03  1.10e+03  4.45e-01  8.27e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2883e-01  +1.1945e+02  1.19e+02  1.78e-01  4.22e+01  1.80e-02  2.89e-01  9.61e-01  
  3  +5.0823e-01  +3.0912e+01  3.04e+01  1.23e-01  2.94e+01  5.09e-05  2.60e-01  3.63e-01  
  4  +5.0110e-01  +3.2903e+00  2.79e+00  1.91e-02  4.68e+00  6.30e-06  1.59e-01  6.25e-01  
  5  +5.0020e-01  +1.2286e+00  7.28e-01  4.91e-03  1.22e+00  4.59e-05  7.83e-02  9.90e-01  
  6  +5.0000e-01  +8.6405e-01  3.64e-01  2.30e-03  5.77e-01  6.81e-05  1.69e-02  8.33e-01  
  7  +4.9671e-01  +8.7975e-01  3.83e-01  2.46e-04  6.29e-02  1.58e-03  6.73e-04  9.70e-01  
  8  +4.9123e-01  +8.4812e-01  3.57e-01  1.09e-04  2.79e-02  3.06e-03  2.96e-04  5.83e-01  
  9  +4.8744e-01  +8.0169e-01  3.14e-01  8.62e-05  2.20e-02  2.15e-03  2.35e-04  4.05e-01  
 10  +4.7910e-01  +7.4350e-01  2.64e-01  6.28e-05  1.60e-02  1.49e-03  1.74e-04  4.26e-01  
 11  +4.7407e-01  +7.1603e-01  2.42e-01  5.53e-05  1.41e-02  1.22e-03  1.55e-04  1.84e-01  
 12  +4.5489e-01  +6.0821e-01  1.53e-01  3.35e-05  8.49e-03  1.21e-05  9.97e-05  7.92e-01  
 13  +4.4603e-01  +5.7120e-01  1.25e-01  2.61e-05  6.61e-03  9.29e-06  7.98e-05  2.80e-01  
 14  +4.3181e-01  +5.1275e-01  8.09e-02  1.59e-05  4.01e-03  5.24e-06  5.05e-05  5.68e-01  
 15  +4.2081e-01  +4.6937e-01  4.86e-02  9.18e-06  2.32e-03  3.03e-06  3.03e-05  4.43e-01  
 16  +4.1580e-01  +4.5001e-01  3.42e-02  6.35e-06  1.60e-03  2.14e-06  2.13e-05  3.48e-01  
 17  +4.0875e-01  +4.2323e-01  1.45e-02  2.61e-06  6.57e-04  9.14e-07  8.97e-06  6.59e-01  
 18  +4.0762e-01  +4.1888e-01  1.13e-02  2.01e-06  5.07e-04  7.19e-07  6.95e-06  4.67e-01  
 19  +4.0408e-01  +4.0629e-01  2.21e-03  3.89e-07  9.82e-05  1.42e-07  1.37e-06  8.27e-01  
 20  +4.0322e-01  +4.0326e-01  4.50e-05  7.89e-09  1.99e-06  2.89e-09  2.80e-08  9.90e-01  
 21  +4.0320e-01  +4.0320e-01  4.50e-07  7.90e-11  1.99e-08  2.89e-11  2.80e-10  9.90e-01  
 22  +4.0320e-01  +4.0320e-01  4.50e-09  7.90e-13  1.99e-10  2.90e-13  2.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 203.3582ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:19 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:19 PM: Optimal value: 4.032e-01
(CVXPY) Oct 06 04:30:19 PM: Compilation took 6.243e-02 seconds
(CVXPY) Oct 06 04:30:19 PM: Solver (including time spent in interface) took 2.196e-01 seconds
Iteration: 9, Objective: 0.4032
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:20 PM: Your problem has 5111 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:20 PM: Finished problem compilation (took 6.252e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5111
  constraints   = 10111
  nnz(P)        = 0
  nnz(A)        = 81623
  cones (total) = 1
    : Nonnegative = 1,  numel = 10111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7761e-01  +1.0995e+03  1.10e+03  4.45e-01  8.26e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2878e-01  +1.1936e+02  1.19e+02  1.78e-01  4.21e+01  1.80e-02  2.89e-01  9.62e-01  
  3  +5.0822e-01  +3.0889e+01  3.04e+01  1.23e-01  2.93e+01  5.10e-05  2.60e-01  3.64e-01  
  4  +5.0110e-01  +3.2872e+00  2.79e+00  1.91e-02  4.67e+00  6.31e-06  1.59e-01  6.27e-01  
  5  +5.0021e-01  +1.2589e+00  7.59e-01  5.11e-03  1.27e+00  4.61e-05  7.84e-02  9.77e-01  
  6  +5.0001e-01  +8.8057e-01  3.81e-01  2.40e-03  6.02e-01  6.84e-05  1.73e-02  8.18e-01  
  7  +4.9682e-01  +8.9082e-01  3.94e-01  2.59e-04  6.62e-02  1.53e-03  7.05e-04  9.68e-01  
  8  +4.9156e-01  +8.6141e-01  3.70e-01  1.16e-04  2.96e-02  2.98e-03  3.13e-04  5.74e-01  
  9  +4.8855e-01  +8.1535e-01  3.27e-01  9.42e-05  2.41e-02  2.00e-03  2.56e-04  4.02e-01  
 10  +4.8234e-01  +7.6615e-01  2.84e-01  7.07e-05  1.81e-02  1.30e-03  1.94e-04  4.74e-01  
 11  +4.6714e-01  +6.7144e-01  2.04e-01  4.79e-05  1.22e-02  1.85e-04  1.38e-04  7.15e-01  
 12  +4.4222e-01  +5.6105e-01  1.19e-01  2.40e-05  6.08e-03  8.55e-05  7.37e-05  5.34e-01  
 13  +4.4035e-01  +5.5363e-01  1.13e-01  2.27e-05  5.76e-03  7.50e-05  7.02e-05  1.20e-01  
 14  +4.3013e-01  +5.1311e-01  8.30e-02  1.60e-05  4.04e-03  3.03e-05  5.10e-05  5.94e-01  
 15  +4.1097e-01  +4.3779e-01  2.68e-02  4.93e-06  1.24e-03  5.47e-06  1.69e-05  8.04e-01  
 16  +4.0925e-01  +4.3099e-01  2.17e-02  3.96e-06  1.00e-03  3.44e-06  1.37e-05  4.59e-01  
 17  +4.0899e-01  +4.2995e-01  2.10e-02  3.80e-06  9.60e-04  3.06e-06  1.31e-05  1.80e-01  
 18  +4.0653e-01  +4.2115e-01  1.46e-02  2.62e-06  6.62e-04  1.91e-06  9.14e-06  4.51e-01  
 19  +4.0166e-01  +4.0376e-01  2.11e-03  3.75e-07  9.47e-05  1.88e-07  1.34e-06  9.46e-01  
 20  +4.0081e-01  +4.0083e-01  2.28e-05  4.07e-09  1.03e-06  1.97e-09  1.46e-08  9.90e-01  
 21  +4.0080e-01  +4.0080e-01  2.28e-07  4.07e-11  1.03e-08  1.97e-11  1.46e-10  9.90e-01  
 22  +4.0080e-01  +4.0080e-01  2.28e-09  4.07e-13  1.03e-10  1.97e-13  1.47e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 206.6862ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:20 PM: Optimal value: 4.008e-01
(CVXPY) Oct 06 04:30:20 PM: Compilation took 6.252e-02 seconds
(CVXPY) Oct 06 04:30:20 PM: Solver (including time spent in interface) took 2.187e-01 seconds
Iteration: 10, Objective: 0.4008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:20 PM: Your problem has 5121 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:20 PM: Finished problem compilation (took 6.262e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5121
  constraints   = 10121
  nnz(P)        = 0
  nnz(A)        = 82308
  cones (total) = 1
    : Nonnegative = 1,  numel = 10121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7756e-01  +1.0995e+03  1.10e+03  4.45e-01  8.25e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2874e-01  +1.1928e+02  1.19e+02  1.78e-01  4.20e+01  1.80e-02  2.88e-01  9.62e-01  
  3  +5.0821e-01  +3.0865e+01  3.04e+01  1.23e-01  2.93e+01  5.11e-05  2.60e-01  3.66e-01  
  4  +5.0110e-01  +3.2848e+00  2.78e+00  1.91e-02  4.67e+00  6.32e-06  1.58e-01  6.28e-01  
  5  +5.0020e-01  +1.2570e+00  7.57e-01  5.10e-03  1.27e+00  4.67e-05  7.65e-02  9.90e-01  
  6  +4.9999e-01  +8.8010e-01  3.80e-01  2.35e-03  5.90e-01  7.57e-05  1.53e-02  8.43e-01  
  7  +4.9666e-01  +8.8566e-01  3.89e-01  2.45e-04  6.28e-02  1.60e-03  6.68e-04  9.63e-01  
  8  +4.9149e-01  +8.5588e-01  3.64e-01  1.14e-04  2.92e-02  2.95e-03  3.08e-04  5.65e-01  
  9  +4.8924e-01  +8.2232e-01  3.33e-01  9.85e-05  2.52e-02  2.14e-03  2.66e-04  3.27e-01  
 10  +4.8790e-01  +8.1058e-01  3.23e-01  9.20e-05  2.35e-02  1.91e-03  2.49e-04  1.49e-01  
 11  +4.8620e-01  +7.7977e-01  2.94e-01  8.48e-05  2.17e-02  6.51e-04  2.31e-04  5.39e-01  
 12  +4.6643e-01  +6.7215e-01  2.06e-01  4.39e-05  1.12e-02  2.93e-04  1.25e-04  7.39e-01  
 13  +4.4327e-01  +5.6851e-01  1.25e-01  2.53e-05  6.41e-03  1.28e-04  7.71e-05  4.57e-01  
 14  +4.3998e-01  +5.5544e-01  1.15e-01  2.31e-05  5.85e-03  1.02e-04  7.12e-05  1.92e-01  
 15  +4.2719e-01  +5.0398e-01  7.68e-02  1.48e-05  3.74e-03  4.31e-05  4.76e-05  5.51e-01  
 16  +4.1008e-01  +4.3630e-01  2.62e-02  4.83e-06  1.22e-03  6.56e-06  1.66e-05  8.44e-01  
 17  +4.0671e-01  +4.2314e-01  1.64e-02  2.97e-06  7.48e-04  1.82e-06  1.03e-05  8.74e-01  
 18  +4.0467e-01  +4.1563e-01  1.10e-02  1.97e-06  4.98e-04  7.44e-07  6.93e-06  9.90e-01  
 19  +4.0191e-01  +4.0609e-01  4.18e-03  7.50e-07  1.89e-04  2.84e-07  2.68e-06  6.41e-01  
 20  +4.0024e-01  +4.0033e-01  8.89e-05  1.59e-08  4.02e-06  5.92e-09  5.76e-08  9.81e-01  
 21  +4.0020e-01  +4.0020e-01  8.89e-07  1.59e-10  4.02e-08  5.93e-11  5.76e-10  9.90e-01  
 22  +4.0020e-01  +4.0020e-01  8.89e-09  1.59e-12  4.02e-10  5.93e-13  5.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 220.9772ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:20 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:20 PM: Optimal value: 4.002e-01
(CVXPY) Oct 06 04:30:20 PM: Compilation took 6.262e-02 seconds
(CVXPY) Oct 06 04:30:20 PM: Solver (including time spent in interface) took 2.342e-01 seconds
Iteration: 11, Objective: 0.4002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:21 PM: Your problem has 5131 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:21 PM: Finished problem compilation (took 6.204e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5131
  constraints   = 10131
  nnz(P)        = 0
  nnz(A)        = 82737
  cones (total) = 1
    : Nonnegative = 1,  numel = 10131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7749e-01  +1.0995e+03  1.10e+03  4.45e-01  8.25e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2869e-01  +1.1920e+02  1.19e+02  1.78e-01  4.20e+01  1.80e-02  2.88e-01  9.63e-01  
  3  +5.0820e-01  +3.0847e+01  3.03e+01  1.23e-01  2.92e+01  5.11e-05  2.59e-01  3.67e-01  
  4  +5.0110e-01  +3.2851e+00  2.78e+00  1.91e-02  4.67e+00  6.33e-06  1.58e-01  6.29e-01  
  5  +5.0021e-01  +1.2694e+00  7.69e-01  5.19e-03  1.29e+00  4.72e-05  7.59e-02  9.90e-01  
  6  +4.9999e-01  +8.9532e-01  3.95e-01  2.43e-03  6.10e-01  7.82e-05  1.54e-02  8.39e-01  
  7  +4.9667e-01  +8.9674e-01  4.00e-01  2.52e-04  6.46e-02  1.59e-03  6.85e-04  9.61e-01  
  8  +4.9167e-01  +8.6752e-01  3.76e-01  1.21e-04  3.09e-02  2.88e-03  3.26e-04  5.48e-01  
  9  +4.8893e-01  +8.2467e-01  3.36e-01  1.00e-04  2.57e-02  1.92e-03  2.71e-04  3.94e-01  
 10  +4.8804e-01  +8.1550e-01  3.27e-01  9.57e-05  2.45e-02  1.71e-03  2.59e-04  1.27e-01  
 11  +4.8603e-01  +7.8202e-01  2.96e-01  8.62e-05  2.20e-02  5.28e-04  2.35e-04  5.87e-01  
 12  +4.7429e-01  +7.0935e-01  2.35e-01  5.90e-05  1.50e-02  5.96e-06  1.66e-04  9.28e-01  
 13  +4.4869e-01  +5.9223e-01  1.44e-01  2.98e-05  7.55e-03  4.23e-06  8.91e-05  5.45e-01  
 14  +4.4290e-01  +5.6894e-01  1.26e-01  2.57e-05  6.50e-03  3.97e-06  7.83e-05  1.90e-01  
 15  +4.3065e-01  +5.2018e-01  8.95e-02  1.77e-05  4.46e-03  3.85e-06  5.60e-05  5.83e-01  
 16  +4.1939e-01  +4.7526e-01  5.59e-02  1.07e-05  2.70e-03  2.43e-06  3.54e-05  4.28e-01  
 17  +4.1442e-01  +4.5581e-01  4.14e-02  7.81e-06  1.97e-03  1.89e-06  2.63e-05  3.37e-01  
 18  +4.0763e-01  +4.2904e-01  2.14e-02  3.94e-06  9.93e-04  1.21e-06  1.36e-05  7.69e-01  
 19  +4.0591e-01  +4.2259e-01  1.67e-02  3.05e-06  7.68e-04  9.59e-07  1.06e-05  3.05e-01  
 20  +4.0288e-01  +4.1100e-01  8.12e-03  1.47e-06  3.72e-04  5.27e-07  5.21e-06  9.90e-01  
 21  +4.0002e-01  +4.0107e-01  1.04e-03  1.89e-07  4.77e-05  6.65e-08  6.83e-07  9.01e-01  
 22  +3.9961e-01  +3.9962e-01  1.27e-05  2.29e-09  5.78e-07  7.98e-10  8.32e-09  9.88e-01  
 23  +3.9960e-01  +3.9960e-01  1.27e-07  2.29e-11  5.78e-09  7.98e-12  8.32e-11  9.90e-01  
 24  +3.9960e-01  +3.9960e-01  1.27e-09  2.29e-13  5.78e-11  7.99e-14  8.33e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 228.1387ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:21 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:21 PM: Optimal value: 3.996e-01
(CVXPY) Oct 06 04:30:21 PM: Compilation took 6.204e-02 seconds
(CVXPY) Oct 06 04:30:21 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 12, Objective: 0.3996
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:21 PM: Your problem has 5141 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:21 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:21 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:21 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:21 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:21 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:21 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:21 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:21 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:21 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:21 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:21 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:21 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5141
  constraints   = 10141
  nnz(P)        = 0
  nnz(A)        = 83125
  cones (total) = 1
    : Nonnegative = 1,  numel = 10141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7746e-01  +1.0995e+03  1.10e+03  4.45e-01  8.24e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2867e-01  +1.1915e+02  1.19e+02  1.77e-01  4.19e+01  1.80e-02  2.88e-01  9.63e-01  
  3  +5.0820e-01  +3.0834e+01  3.03e+01  1.23e-01  2.92e+01  5.12e-05  2.59e-01  3.68e-01  
  4  +5.0110e-01  +3.2856e+00  2.78e+00  1.91e-02  4.67e+00  6.33e-06  1.58e-01  6.29e-01  
  5  +5.0021e-01  +1.2728e+00  7.73e-01  5.21e-03  1.30e+00  4.73e-05  7.57e-02  9.90e-01  
  6  +4.9998e-01  +8.8016e-01  3.80e-01  2.31e-03  5.81e-01  8.03e-05  1.42e-02  8.55e-01  
  7  +4.9659e-01  +8.8310e-01  3.87e-01  2.38e-04  6.10e-02  1.62e-03  6.47e-04  9.59e-01  
  8  +4.9193e-01  +8.5823e-01  3.66e-01  1.19e-04  3.06e-02  2.83e-03  3.22e-04  5.28e-01  
  9  +4.8859e-01  +8.1408e-01  3.25e-01  9.57e-05  2.45e-02  1.82e-03  2.59e-04  4.57e-01  
 10  +4.8301e-01  +7.7169e-01  2.89e-01  7.59e-05  1.94e-02  1.11e-03  2.08e-04  4.66e-01  
 11  +4.7562e-01  +7.2769e-01  2.52e-01  6.43e-05  1.64e-02  5.24e-04  1.80e-04  4.41e-01  
 12  +4.5131e-01  +6.0775e-01  1.56e-01  3.31e-05  8.38e-03  2.72e-04  9.84e-05  5.35e-01  
 13  +4.4051e-01  +5.6283e-01  1.22e-01  2.49e-05  6.30e-03  1.86e-04  7.66e-05  2.87e-01  
 14  +4.3478e-01  +5.3951e-01  1.05e-01  2.10e-05  5.29e-03  1.16e-04  6.56e-05  3.54e-01  
 15  +4.2004e-01  +4.7983e-01  5.98e-02  1.15e-05  2.89e-03  4.64e-05  3.76e-05  5.75e-01  
 16  +4.1585e-01  +4.6310e-01  4.72e-02  8.87e-06  2.24e-03  2.96e-05  2.95e-05  3.89e-01  
 17  +4.0806e-01  +4.3274e-01  2.47e-02  4.52e-06  1.14e-03  9.80e-06  1.55e-05  6.96e-01  
 18  +4.0608e-01  +4.2503e-01  1.90e-02  3.43e-06  8.63e-04  5.51e-06  1.18e-05  4.97e-01  
 19  +4.0313e-01  +4.1377e-01  1.06e-02  1.91e-06  4.81e-04  8.19e-07  6.68e-06  9.90e-01  
 20  +3.9976e-01  +4.0212e-01  2.36e-03  4.22e-07  1.06e-04  1.79e-07  1.51e-06  7.90e-01  
 21  +3.9882e-01  +3.9885e-01  3.85e-05  6.87e-09  1.73e-06  2.89e-09  2.47e-08  9.84e-01  
 22  +3.9880e-01  +3.9880e-01  3.85e-07  6.87e-11  1.73e-08  2.89e-11  2.47e-10  9.90e-01  
 23  +3.9880e-01  +3.9880e-01  3.85e-09  6.87e-13  1.73e-10  2.90e-13  2.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 219.2556ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:22 PM: Optimal value: 3.988e-01
(CVXPY) Oct 06 04:30:22 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:30:22 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 13, Objective: 0.3988
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:22 PM: Your problem has 5151 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:22 PM: Finished problem compilation (took 4.696e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5151
  constraints   = 10151
  nnz(P)        = 0
  nnz(A)        = 83426
  cones (total) = 1
    : Nonnegative = 1,  numel = 10151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0012e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7743e-01  +1.0995e+03  1.10e+03  4.45e-01  8.23e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2865e-01  +1.1911e+02  1.19e+02  1.77e-01  4.18e+01  1.80e-02  2.88e-01  9.64e-01  
  3  +5.0819e-01  +3.0817e+01  3.03e+01  1.23e-01  2.91e+01  5.12e-05  2.59e-01  3.69e-01  
  4  +5.0110e-01  +3.2839e+00  2.78e+00  1.91e-02  4.66e+00  6.34e-06  1.57e-01  6.30e-01  
  5  +5.0021e-01  +1.2779e+00  7.78e-01  5.25e-03  1.30e+00  4.74e-05  7.52e-02  9.90e-01  
  6  +4.9998e-01  +8.8416e-01  3.84e-01  2.33e-03  5.86e-01  8.10e-05  1.41e-02  8.50e-01  
  7  +4.9658e-01  +8.8649e-01  3.90e-01  2.39e-04  6.12e-02  1.63e-03  6.48e-04  9.59e-01  
  8  +4.9165e-01  +8.5984e-01  3.68e-01  1.17e-04  2.99e-02  2.89e-03  3.15e-04  5.40e-01  
  9  +4.8897e-01  +8.2794e-01  3.39e-01  9.94e-05  2.54e-02  2.18e-03  2.68e-04  3.31e-01  
 10  +4.8086e-01  +7.6812e-01  2.87e-01  7.03e-05  1.79e-02  1.43e-03  1.93e-04  5.12e-01  
 11  +4.6533e-01  +6.7614e-01  2.11e-01  4.99e-05  1.27e-02  8.50e-05  1.43e-04  7.55e-01  
 12  +4.4515e-01  +5.8571e-01  1.41e-01  2.96e-05  7.47e-03  4.97e-05  8.96e-05  4.23e-01  
 13  +4.3963e-01  +5.6287e-01  1.23e-01  2.53e-05  6.40e-03  3.73e-05  7.81e-05  2.53e-01  
 14  +4.1783e-01  +4.7260e-01  5.48e-02  1.05e-05  2.63e-03  8.52e-07  3.45e-05  9.90e-01  
 15  +4.1424e-01  +4.5883e-01  4.46e-02  8.41e-06  2.12e-03  8.05e-07  2.81e-05  2.27e-01  
 16  +4.0605e-01  +4.2704e-01  2.10e-02  3.83e-06  9.64e-04  1.14e-06  1.32e-05  8.96e-01  
 17  +4.0416e-01  +4.2015e-01  1.60e-02  2.90e-06  7.29e-04  8.77e-07  1.01e-05  2.65e-01  
 18  +4.0210e-01  +4.1214e-01  1.00e-02  1.81e-06  4.56e-04  6.49e-07  6.35e-06  9.61e-01  
 19  +3.9897e-01  +4.0136e-01  2.39e-03  4.28e-07  1.08e-04  1.54e-07  1.53e-06  7.78e-01  
 20  +3.9802e-01  +3.9805e-01  3.80e-05  6.82e-09  1.72e-06  2.44e-09  2.46e-08  9.84e-01  
 21  +3.9800e-01  +3.9800e-01  3.81e-07  6.82e-11  1.72e-08  2.44e-11  2.46e-10  9.90e-01  
 22  +3.9800e-01  +3.9800e-01  3.81e-09  6.82e-13  1.72e-10  2.44e-13  2.46e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 210.5888ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:22 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:22 PM: Optimal value: 3.980e-01
(CVXPY) Oct 06 04:30:22 PM: Compilation took 4.696e-02 seconds
(CVXPY) Oct 06 04:30:22 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 14, Objective: 0.3980
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:22 PM: Your problem has 5161 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:22 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:22 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:22 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:22 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:22 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:22 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:22 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:22 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:22 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:22 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:22 PM: Finished problem compilation (took 6.307e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:22 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5161
  constraints   = 10161
  nnz(P)        = 0
  nnz(A)        = 83724
  cones (total) = 1
    : Nonnegative = 1,  numel = 10161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7734e-01  +1.0994e+03  1.10e+03  4.45e-01  8.22e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2858e-01  +1.1897e+02  1.18e+02  1.77e-01  4.17e+01  1.80e-02  2.87e-01  9.65e-01  
  3  +5.0818e-01  +3.0780e+01  3.03e+01  1.22e-01  2.90e+01  5.13e-05  2.58e-01  3.71e-01  
  4  +5.0110e-01  +3.2790e+00  2.78e+00  1.91e-02  4.65e+00  6.35e-06  1.56e-01  6.31e-01  
  5  +5.0023e-01  +1.3219e+00  8.22e-01  5.54e-03  1.38e+00  4.78e-05  7.51e-02  9.75e-01  
  6  +4.9997e-01  +8.7493e-01  3.75e-01  2.22e-03  5.57e-01  8.67e-05  1.23e-02  8.74e-01  
  7  +4.9651e-01  +8.7741e-01  3.81e-01  2.25e-04  5.76e-02  1.65e-03  6.07e-04  9.54e-01  
  8  +4.9158e-01  +8.5084e-01  3.59e-01  1.14e-04  2.91e-02  2.81e-03  3.04e-04  5.31e-01  
  9  +4.8876e-01  +8.2499e-01  3.36e-01  9.82e-05  2.51e-02  2.23e-03  2.64e-04  2.98e-01  
 10  +4.8189e-01  +7.8048e-01  2.99e-01  7.50e-05  1.91e-02  1.67e-03  2.05e-04  4.07e-01  
 11  +4.7797e-01  +7.5702e-01  2.79e-01  6.90e-05  1.76e-02  1.24e-03  1.90e-04  2.17e-01  
 12  +4.6069e-01  +6.6081e-01  2.00e-01  4.74e-05  1.20e-02  1.23e-05  1.38e-04  7.95e-01  
 13  +4.3302e-01  +5.3938e-01  1.06e-01  2.17e-05  5.48e-03  5.56e-06  6.80e-05  6.37e-01  
 14  +4.2282e-01  +4.9893e-01  7.61e-02  1.49e-05  3.76e-03  4.21e-06  4.84e-05  6.38e-01  
 15  +4.1364e-01  +4.6229e-01  4.86e-02  9.34e-06  2.35e-03  2.66e-06  3.13e-05  3.87e-01  
 16  +4.1066e-01  +4.5028e-01  3.96e-02  7.48e-06  1.88e-03  2.27e-06  2.53e-05  3.90e-01  
 17  +4.0094e-01  +4.1265e-01  1.17e-02  2.15e-06  5.41e-04  7.38e-07  7.57e-06  9.14e-01  
 18  +4.0050e-01  +4.1098e-01  1.05e-02  1.93e-06  4.86e-04  6.47e-07  6.86e-06  2.96e-01  
 19  +4.0012e-01  +4.0950e-01  9.38e-03  1.72e-06  4.34e-04  5.83e-07  6.13e-06  2.96e-01  
 20  +3.9859e-01  +4.0405e-01  5.46e-03  9.98e-07  2.51e-04  3.41e-07  3.57e-06  5.25e-01  
 21  +3.9734e-01  +3.9970e-01  2.35e-03  4.27e-07  1.07e-04  1.47e-07  1.54e-06  7.17e-01  
 22  +3.9642e-01  +3.9647e-01  4.70e-05  8.52e-09  2.14e-06  2.91e-09  3.08e-08  9.81e-01  
 23  +3.9640e-01  +3.9640e-01  4.70e-07  8.52e-11  2.15e-08  2.91e-11  3.09e-10  9.90e-01  
 24  +3.9640e-01  +3.9640e-01  4.74e-09  8.59e-13  2.16e-10  2.95e-13  3.12e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 232.994ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:23 PM: Optimal value: 3.964e-01
(CVXPY) Oct 06 04:30:23 PM: Compilation took 6.307e-02 seconds
(CVXPY) Oct 06 04:30:23 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 15, Objective: 0.3964
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:23 PM: Your problem has 5171 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:23 PM: Finished problem compilation (took 7.379e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:23 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5171
  constraints   = 10171
  nnz(P)        = 0
  nnz(A)        = 84242
  cones (total) = 1
    : Nonnegative = 1,  numel = 10171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7729e-01  +1.0994e+03  1.10e+03  4.46e-01  8.22e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2855e-01  +1.1891e+02  1.18e+02  1.77e-01  4.16e+01  1.80e-02  2.87e-01  9.65e-01  
  3  +5.0817e-01  +3.0762e+01  3.03e+01  1.22e-01  2.90e+01  5.13e-05  2.58e-01  3.72e-01  
  4  +5.0110e-01  +3.2764e+00  2.78e+00  1.91e-02  4.65e+00  6.36e-06  1.56e-01  6.33e-01  
  5  +5.0022e-01  +1.3134e+00  8.13e-01  5.49e-03  1.36e+00  4.84e-05  7.32e-02  9.90e-01  
  6  +4.9995e-01  +8.7209e-01  3.72e-01  2.14e-03  5.37e-01  9.58e-05  1.10e-02  8.87e-01  
  7  +4.9626e-01  +8.7090e-01  3.75e-01  2.10e-04  5.37e-02  1.75e-03  5.64e-04  9.52e-01  
  8  +4.9143e-01  +8.4786e-01  3.56e-01  1.10e-04  2.82e-02  2.90e-03  2.94e-04  5.12e-01  
  9  +4.8477e-01  +7.9658e-01  3.12e-01  8.02e-05  2.05e-02  1.79e-03  2.17e-04  5.67e-01  
 10  +4.7741e-01  +7.5635e-01  2.79e-01  6.75e-05  1.72e-02  1.30e-03  1.86e-04  2.87e-01  
 11  +4.5518e-01  +6.4341e-01  1.88e-01  4.08e-05  1.03e-02  5.76e-04  1.19e-04  5.06e-01  
 12  +4.3689e-01  +5.6249e-01  1.26e-01  2.61e-05  6.60e-03  2.01e-04  8.10e-05  5.46e-01  
 13  +4.2785e-01  +5.2488e-01  9.70e-02  1.96e-05  4.94e-03  1.20e-04  6.26e-05  3.80e-01  
 14  +4.1300e-01  +4.6370e-01  5.07e-02  9.83e-06  2.47e-03  4.58e-05  3.30e-05  5.93e-01  
 15  +4.0990e-01  +4.5126e-01  4.14e-02  7.91e-06  1.99e-03  3.29e-05  2.68e-05  2.98e-01  
 16  +4.0134e-01  +4.1704e-01  1.57e-02  2.90e-06  7.29e-04  1.88e-06  1.02e-05  9.90e-01  
 17  +4.0079e-01  +4.1507e-01  1.43e-02  2.62e-06  6.60e-04  1.67e-06  9.22e-06  1.44e-01  
 18  +3.9859e-01  +4.0688e-01  8.29e-03  1.52e-06  3.82e-04  6.50e-07  5.40e-06  8.48e-01  
 19  +3.9575e-01  +3.9686e-01  1.11e-03  2.03e-07  5.10e-05  7.99e-08  7.35e-07  9.16e-01  
 20  +3.9531e-01  +3.9532e-01  1.43e-05  2.60e-09  6.54e-07  1.02e-09  9.46e-09  9.87e-01  
 21  +3.9530e-01  +3.9530e-01  1.43e-07  2.61e-11  6.56e-09  1.02e-11  9.48e-11  9.90e-01  
 22  +3.9530e-01  +3.9530e-01  1.44e-09  2.63e-13  6.62e-11  1.04e-13  9.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 216.4122ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:23 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:23 PM: Optimal value: 3.953e-01
(CVXPY) Oct 06 04:30:23 PM: Compilation took 7.379e-02 seconds
(CVXPY) Oct 06 04:30:23 PM: Solver (including time spent in interface) took 2.250e-01 seconds
Iteration: 16, Objective: 0.3953
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:23 PM: Your problem has 5181 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:23 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:23 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:23 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:23 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:23 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:23 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:23 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:23 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:23 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:23 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:24 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5181
  constraints   = 10181
  nnz(P)        = 0
  nnz(A)        = 84676
  cones (total) = 1
    : Nonnegative = 1,  numel = 10181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7726e-01  +1.0994e+03  1.10e+03  4.46e-01  8.21e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2853e-01  +1.1886e+02  1.18e+02  1.77e-01  4.15e+01  1.80e-02  2.87e-01  9.65e-01  
  3  +5.0817e-01  +3.0744e+01  3.02e+01  1.22e-01  2.89e+01  5.13e-05  2.57e-01  3.73e-01  
  4  +5.0110e-01  +3.2730e+00  2.77e+00  1.91e-02  4.64e+00  6.36e-06  1.55e-01  6.34e-01  
  5  +5.0024e-01  +1.3440e+00  8.44e-01  5.69e-03  1.41e+00  4.84e-05  7.37e-02  9.75e-01  
  6  +4.9996e-01  +8.9552e-01  3.96e-01  2.27e-03  5.72e-01  9.36e-05  1.17e-02  8.80e-01  
  7  +4.9640e-01  +8.9431e-01  3.98e-01  2.25e-04  5.76e-02  1.69e-03  6.03e-04  9.51e-01  
  8  +4.9040e-01  +8.6097e-01  3.71e-01  1.05e-04  2.69e-02  3.05e-03  2.80e-04  5.67e-01  
  9  +4.8348e-01  +8.1122e-01  3.28e-01  8.05e-05  2.06e-02  2.39e-03  2.17e-04  3.77e-01  
 10  +4.7902e-01  +7.8474e-01  3.06e-01  7.28e-05  1.86e-02  1.99e-03  1.99e-04  1.67e-01  
 11  +4.5767e-01  +6.5727e-01  2.00e-01  4.66e-05  1.18e-02  1.91e-05  1.36e-04  7.62e-01  
 12  +4.4183e-01  +5.8786e-01  1.46e-01  3.16e-05  7.98e-03  1.11e-05  9.66e-05  4.86e-01  
 13  +4.3557e-01  +5.6167e-01  1.26e-01  2.65e-05  6.68e-03  8.90e-06  8.25e-05  3.25e-01  
 14  +4.1905e-01  +4.9266e-01  7.36e-02  1.46e-05  3.67e-03  4.52e-06  4.79e-05  6.48e-01  
 15  +4.1137e-01  +4.6151e-01  5.01e-02  9.64e-06  2.43e-03  3.08e-06  3.25e-05  5.43e-01  
 16  +4.0584e-01  +4.3975e-01  3.39e-02  6.41e-06  1.61e-03  2.09e-06  2.21e-05  4.26e-01  
 17  +3.9832e-01  +4.1089e-01  1.26e-02  2.33e-06  5.86e-04  7.74e-07  8.33e-06  6.65e-01  
 18  +3.9762e-01  +4.0795e-01  1.03e-02  1.92e-06  4.82e-04  6.27e-07  6.90e-06  4.33e-01  
 19  +3.9530e-01  +3.9938e-01  4.08e-03  7.51e-07  1.89e-04  2.51e-07  2.73e-06  7.06e-01  
 20  +3.9387e-01  +3.9427e-01  4.06e-04  7.43e-08  1.87e-05  2.39e-08  2.73e-07  9.90e-01  
 21  +3.9370e-01  +3.9371e-01  4.41e-06  8.06e-10  2.03e-07  2.60e-10  2.96e-09  9.89e-01  
 22  +3.9370e-01  +3.9370e-01  4.41e-08  8.06e-12  2.03e-09  2.60e-12  2.96e-11  9.90e-01  
 23  +3.9370e-01  +3.9370e-01  4.41e-10  8.06e-14  2.03e-11  2.61e-14  2.98e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 233.2327ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:24 PM: Optimal value: 3.937e-01
(CVXPY) Oct 06 04:30:24 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:30:24 PM: Solver (including time spent in interface) took 2.504e-01 seconds
Iteration: 17, Objective: 0.3937
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:24 PM: Your problem has 5191 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:24 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:24 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:24 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:24 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:24 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:24 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:24 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:24 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:24 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:24 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:24 PM: Finished problem compilation (took 4.686e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:24 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5191
  constraints   = 10191
  nnz(P)        = 0
  nnz(A)        = 84907
  cones (total) = 1
    : Nonnegative = 1,  numel = 10191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7720e-01  +1.0994e+03  1.10e+03  4.46e-01  8.20e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2850e-01  +1.1881e+02  1.18e+02  1.77e-01  4.14e+01  1.80e-02  2.87e-01  9.66e-01  
  3  +5.0816e-01  +3.0732e+01  3.02e+01  1.22e-01  2.89e+01  5.14e-05  2.57e-01  3.74e-01  
  4  +5.0110e-01  +3.2723e+00  2.77e+00  1.91e-02  4.64e+00  6.37e-06  1.55e-01  6.34e-01  
  5  +5.0023e-01  +1.3341e+00  8.34e-01  5.63e-03  1.40e+00  4.91e-05  7.20e-02  9.90e-01  
  6  +4.9994e-01  +9.0023e-01  4.00e-01  2.24e-03  5.63e-01  1.02e-04  1.09e-02  8.90e-01  
  7  +4.9623e-01  +8.9645e-01  4.00e-01  2.17e-04  5.57e-02  1.76e-03  5.82e-04  9.50e-01  
  8  +4.8973e-01  +8.5977e-01  3.70e-01  1.01e-04  2.58e-02  3.17e-03  2.68e-04  5.72e-01  
  9  +4.8208e-01  +8.0835e-01  3.26e-01  7.75e-05  1.98e-02  2.59e-03  2.10e-04  3.33e-01  
 10  +4.7687e-01  +7.7797e-01  3.01e-01  6.97e-05  1.78e-02  2.10e-03  1.91e-04  1.70e-01  
 11  +4.5513e-01  +6.5136e-01  1.96e-01  4.48e-05  1.13e-02  2.33e-04  1.32e-04  6.69e-01  
 12  +4.4250e-01  +5.9489e-01  1.52e-01  3.31e-05  8.35e-03  1.10e-04  1.01e-04  4.72e-01  
 13  +4.3457e-01  +5.6079e-01  1.26e-01  2.65e-05  6.68e-03  7.17e-05  8.27e-05  3.36e-01  
 14  +4.1618e-01  +4.8304e-01  6.69e-02  1.31e-05  3.30e-03  1.66e-05  4.34e-05  7.50e-01  
 15  +4.0981e-01  +4.5681e-01  4.70e-02  8.90e-06  2.24e-03  6.80e-06  3.01e-05  7.16e-01  
 16  +4.0177e-01  +4.2509e-01  2.33e-02  4.32e-06  1.09e-03  1.68e-06  1.51e-05  9.90e-01  
 17  +3.9501e-01  +4.0030e-01  5.29e-03  9.72e-07  2.45e-04  3.71e-07  3.54e-06  8.05e-01  
 18  +3.9303e-01  +3.9312e-01  8.87e-05  1.63e-08  4.10e-06  5.91e-09  6.02e-08  9.87e-01  
 19  +3.9300e-01  +3.9300e-01  8.89e-07  1.63e-10  4.11e-08  5.92e-11  6.03e-10  9.90e-01  
 20  +3.9300e-01  +3.9300e-01  8.89e-09  1.63e-12  4.11e-10  5.94e-13  6.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 198.3521ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:24 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:24 PM: Optimal value: 3.930e-01
(CVXPY) Oct 06 04:30:24 PM: Compilation took 4.686e-02 seconds
(CVXPY) Oct 06 04:30:24 PM: Solver (including time spent in interface) took 2.188e-01 seconds
Iteration: 18, Objective: 0.3930
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:25 PM: Your problem has 5201 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:25 PM: Finished problem compilation (took 4.685e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5201
  constraints   = 10201
  nnz(P)        = 0
  nnz(A)        = 85146
  cones (total) = 1
    : Nonnegative = 1,  numel = 10201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0013e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7713e-01  +1.0994e+03  1.10e+03  4.46e-01  8.19e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2847e-01  +1.1876e+02  1.18e+02  1.77e-01  4.13e+01  1.80e-02  2.87e-01  9.66e-01  
  3  +5.0816e-01  +3.0719e+01  3.02e+01  1.22e-01  2.88e+01  5.14e-05  2.57e-01  3.75e-01  
  4  +5.0110e-01  +3.2709e+00  2.77e+00  1.91e-02  4.64e+00  6.38e-06  1.55e-01  6.35e-01  
  5  +5.0023e-01  +1.3463e+00  8.46e-01  5.71e-03  1.42e+00  4.96e-05  7.15e-02  9.90e-01  
  6  +4.9993e-01  +8.9989e-01  4.00e-01  2.19e-03  5.51e-01  1.06e-04  1.02e-02  8.98e-01  
  7  +4.9618e-01  +8.9452e-01  3.98e-01  2.13e-04  5.46e-02  1.78e-03  5.71e-04  9.46e-01  
  8  +4.8950e-01  +8.5760e-01  3.68e-01  9.86e-05  2.52e-02  3.17e-03  2.63e-04  5.77e-01  
  9  +4.7962e-01  +7.9229e-01  3.13e-01  7.20e-05  1.84e-02  2.34e-03  1.96e-04  4.05e-01  
 10  +4.6337e-01  +7.0177e-01  2.38e-01  5.43e-05  1.38e-02  6.87e-04  1.55e-04  5.34e-01  
 11  +4.3986e-01  +5.8726e-01  1.47e-01  3.12e-05  7.88e-03  2.75e-04  9.54e-05  5.07e-01  
 12  +4.3287e-01  +5.5702e-01  1.24e-01  2.57e-05  6.48e-03  1.76e-04  8.04e-05  3.39e-01  
 13  +4.1913e-01  +4.9799e-01  7.89e-02  1.56e-05  3.93e-03  5.43e-05  5.11e-05  6.72e-01  
 14  +4.1255e-01  +4.7009e-01  5.75e-02  1.11e-05  2.79e-03  2.25e-05  3.71e-05  6.32e-01  
 15  +4.0009e-01  +4.2073e-01  2.06e-02  3.90e-06  9.80e-04  6.53e-06  1.38e-05  7.00e-01  
 16  +3.9634e-01  +4.0630e-01  9.95e-03  1.86e-06  4.67e-04  2.64e-06  6.71e-06  6.15e-01  
 17  +3.9317e-01  +3.9432e-01  1.16e-03  2.14e-07  5.38e-05  9.37e-08  7.91e-07  9.90e-01  
 18  +3.9271e-01  +3.9272e-01  1.37e-05  2.53e-09  6.37e-07  1.10e-09  9.39e-09  9.88e-01  
 19  +3.9270e-01  +3.9270e-01  1.37e-07  2.53e-11  6.37e-09  1.11e-11  9.40e-11  9.90e-01  
 20  +3.9270e-01  +3.9270e-01  1.37e-09  2.53e-13  6.37e-11  1.11e-13  9.43e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 204.1197ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:25 PM: Optimal value: 3.927e-01
(CVXPY) Oct 06 04:30:25 PM: Compilation took 4.685e-02 seconds
(CVXPY) Oct 06 04:30:25 PM: Solver (including time spent in interface) took 2.349e-01 seconds
Iteration: 19, Objective: 0.3927
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:25 PM: Your problem has 5211 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:25 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5211
  constraints   = 10211
  nnz(P)        = 0
  nnz(A)        = 85448
  cones (total) = 1
    : Nonnegative = 1,  numel = 10211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7708e-01  +1.0994e+03  1.10e+03  4.46e-01  8.19e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2844e-01  +1.1868e+02  1.18e+02  1.77e-01  4.12e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0815e-01  +3.0698e+01  3.02e+01  1.22e-01  2.88e+01  5.15e-05  2.57e-01  3.76e-01  
  4  +5.0109e-01  +3.2686e+00  2.77e+00  1.90e-02  4.63e+00  6.38e-06  1.54e-01  6.36e-01  
  5  +5.0029e-01  +1.4676e+00  9.67e-01  6.54e-03  1.62e+00  4.73e-05  7.79e-02  9.07e-01  
  6  +5.0000e-01  +9.3232e-01  4.32e-01  2.57e-03  6.45e-01  7.97e-05  1.41e-02  8.52e-01  
  7  +4.9704e-01  +9.3669e-01  4.40e-01  2.77e-04  7.09e-02  1.41e-03  7.42e-04  9.51e-01  
  8  +4.8884e-01  +8.8408e-01  3.95e-01  9.37e-05  2.40e-02  3.37e-03  2.48e-04  6.99e-01  
  9  +4.8207e-01  +8.2683e-01  3.45e-01  8.27e-05  2.11e-02  2.13e-03  2.23e-04  2.65e-01  
 10  +4.7609e-01  +7.9101e-01  3.15e-01  7.21e-05  1.84e-02  1.81e-03  1.98e-04  1.70e-01  
 11  +4.6065e-01  +6.8666e-01  2.26e-01  5.61e-05  1.42e-02  1.58e-05  1.63e-04  6.83e-01  
 12  +4.4113e-01  +5.9583e-01  1.55e-01  3.40e-05  8.57e-03  9.18e-06  1.04e-04  5.57e-01  
 13  +4.3268e-01  +5.5894e-01  1.26e-01  2.67e-05  6.73e-03  7.19e-06  8.39e-05  3.81e-01  
 14  +4.1444e-01  +4.8058e-01  6.61e-02  1.31e-05  3.28e-03  3.58e-06  4.34e-05  8.02e-01  
 15  +4.0840e-01  +4.5554e-01  4.71e-02  9.07e-06  2.28e-03  2.74e-06  3.09e-05  6.10e-01  
 16  +3.9879e-01  +4.1804e-01  1.93e-02  3.64e-06  9.14e-04  1.12e-06  1.30e-05  6.34e-01  
 17  +3.9511e-01  +4.0392e-01  8.81e-03  1.65e-06  4.14e-04  5.15e-07  6.00e-06  6.16e-01  
 18  +3.9218e-01  +3.9287e-01  6.91e-04  1.28e-07  3.23e-05  4.10e-08  4.77e-07  9.90e-01  
 19  +3.9190e-01  +3.9191e-01  7.37e-06  1.37e-09  3.44e-07  4.37e-10  5.10e-09  9.89e-01  
 20  +3.9190e-01  +3.9190e-01  7.37e-08  1.37e-11  3.44e-09  4.37e-12  5.10e-11  9.90e-01  
 21  +3.9190e-01  +3.9190e-01  7.37e-10  1.37e-13  3.44e-11  4.38e-14  5.12e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 214.8518ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:25 PM: Optimal value: 3.919e-01
(CVXPY) Oct 06 04:30:25 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:30:25 PM: Solver (including time spent in interface) took 2.344e-01 seconds
Iteration: 20, Objective: 0.3919
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:26 PM: Your problem has 5221 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:26 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5221
  constraints   = 10221
  nnz(P)        = 0
  nnz(A)        = 85790
  cones (total) = 1
    : Nonnegative = 1,  numel = 10221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0014e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7702e-01  +1.0994e+03  1.10e+03  4.46e-01  8.18e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2838e-01  +1.1856e+02  1.18e+02  1.76e-01  4.12e+01  1.80e-02  2.86e-01  9.67e-01  
  3  +5.0814e-01  +3.0669e+01  3.02e+01  1.22e-01  2.87e+01  5.15e-05  2.56e-01  3.77e-01  
  4  +5.0109e-01  +3.2675e+00  2.77e+00  1.91e-02  4.63e+00  6.38e-06  1.54e-01  6.36e-01  
  5  +5.0034e-01  +1.5790e+00  1.08e+00  7.30e-03  1.80e+00  4.59e-05  8.26e-02  8.44e-01  
  6  +5.0005e-01  +9.9519e-01  4.95e-01  3.06e-03  7.65e-01  6.86e-05  1.87e-02  8.00e-01  
  7  +4.9755e-01  +1.0023e+00  5.05e-01  3.57e-04  9.15e-02  1.19e-03  9.61e-04  9.57e-01  
  8  +4.9109e-01  +9.4443e-01  4.53e-01  1.27e-04  3.24e-02  2.74e-03  3.36e-04  6.82e-01  
  9  +4.8659e-01  +8.9754e-01  4.11e-01  1.05e-04  2.68e-02  2.23e-03  2.81e-04  2.81e-01  
 10  +4.7507e-01  +7.9508e-01  3.20e-01  7.72e-05  1.96e-02  1.05e-03  2.13e-04  4.69e-01  
 11  +4.7241e-01  +7.7461e-01  3.02e-01  7.47e-05  1.90e-02  8.04e-04  2.08e-04  1.37e-01  
 12  +4.6111e-01  +7.1095e-01  2.50e-01  5.81e-05  1.47e-02  5.29e-04  1.67e-04  3.15e-01  
 13  +4.5708e-01  +6.8344e-01  2.26e-01  5.33e-05  1.35e-02  1.81e-04  1.56e-04  5.25e-01  
 14  +4.3552e-01  +5.7836e-01  1.43e-01  3.05e-05  7.68e-03  9.36e-05  9.47e-05  4.53e-01  
 15  +4.2965e-01  +5.5134e-01  1.22e-01  2.53e-05  6.37e-03  5.67e-05  7.99e-05  4.01e-01  
 16  +4.1338e-01  +4.8028e-01  6.69e-02  1.33e-05  3.34e-03  2.28e-05  4.45e-05  5.74e-01  
 17  +4.0419e-01  +4.4101e-01  3.68e-02  7.03e-06  1.77e-03  6.21e-06  2.43e-05  8.04e-01  
 18  +3.9669e-01  +4.1182e-01  1.51e-02  2.85e-06  7.16e-04  2.35e-06  1.03e-05  6.25e-01  
 19  +3.9227e-01  +3.9486e-01  2.60e-03  4.85e-07  1.22e-04  3.26e-07  1.80e-06  8.78e-01  
 20  +3.9133e-01  +3.9141e-01  8.01e-05  1.49e-08  3.75e-06  9.13e-09  5.59e-08  9.73e-01  
 21  +3.9130e-01  +3.9130e-01  8.06e-07  1.50e-10  3.77e-08  9.19e-11  5.63e-10  9.90e-01  
 22  +3.9130e-01  +3.9130e-01  8.07e-09  1.50e-12  3.77e-10  9.19e-13  5.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 228.17ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:26 PM: Optimal value: 3.913e-01
(CVXPY) Oct 06 04:30:26 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:30:26 PM: Solver (including time spent in interface) took 2.499e-01 seconds
Iteration: 21, Objective: 0.3913
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:26 PM: Your problem has 5231 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:26 PM: Finished problem compilation (took 6.249e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5231
  constraints   = 10231
  nnz(P)        = 0
  nnz(A)        = 86049
  cones (total) = 1
    : Nonnegative = 1,  numel = 10231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7697e-01  +1.0994e+03  1.10e+03  4.46e-01  8.17e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2833e-01  +1.1845e+02  1.18e+02  1.76e-01  4.11e+01  1.80e-02  2.86e-01  9.68e-01  
  3  +5.0813e-01  +3.0642e+01  3.01e+01  1.22e-01  2.87e+01  5.16e-05  2.56e-01  3.79e-01  
  4  +5.0109e-01  +3.2646e+00  2.76e+00  1.90e-02  4.63e+00  6.39e-06  1.54e-01  6.37e-01  
  5  +5.0035e-01  +1.6074e+00  1.11e+00  7.49e-03  1.85e+00  4.58e-05  8.25e-02  8.36e-01  
  6  +5.0005e-01  +9.9696e-01  4.97e-01  3.05e-03  7.63e-01  6.96e-05  1.82e-02  8.07e-01  
  7  +4.9756e-01  +1.0038e+00  5.06e-01  3.57e-04  9.13e-02  1.19e-03  9.57e-04  9.54e-01  
  8  +4.9349e-01  +9.6858e-01  4.75e-01  1.70e-04  4.35e-02  2.17e-03  4.50e-04  5.55e-01  
  9  +4.8883e-01  +9.2782e-01  4.39e-01  1.23e-04  3.15e-02  2.33e-03  3.29e-04  3.24e-01  
 10  +4.8300e-01  +8.6101e-01  3.78e-01  1.00e-04  2.56e-02  1.43e-03  2.71e-04  3.85e-01  
 11  +4.7429e-01  +7.9364e-01  3.19e-01  8.02e-05  2.04e-02  8.24e-04  2.22e-04  3.87e-01  
 12  +4.6290e-01  +7.1049e-01  2.48e-01  6.35e-05  1.61e-02  7.75e-06  1.83e-04  7.52e-01  
 13  +4.4342e-01  +6.1645e-01  1.73e-01  3.89e-05  9.83e-03  5.84e-06  1.18e-04  4.69e-01  
 14  +4.3109e-01  +5.6077e-01  1.30e-01  2.77e-05  6.99e-03  5.05e-06  8.76e-05  4.86e-01  
 15  +4.1958e-01  +5.1044e-01  9.09e-02  1.86e-05  4.67e-03  4.07e-06  6.08e-05  5.58e-01  
 16  +4.0622e-01  +4.5440e-01  4.82e-02  9.51e-06  2.39e-03  2.16e-06  3.27e-05  5.26e-01  
 17  +3.9882e-01  +4.2332e-01  2.45e-02  4.70e-06  1.18e-03  1.34e-06  1.66e-05  8.01e-01  
 18  +3.9204e-01  +3.9720e-01  5.15e-03  9.77e-07  2.45e-04  2.90e-07  3.60e-06  8.62e-01  
 19  +3.9099e-01  +3.9332e-01  2.33e-03  4.39e-07  1.10e-04  1.32e-07  1.64e-06  6.01e-01  
 20  +3.9019e-01  +3.9042e-01  2.24e-04  4.20e-08  1.06e-05  1.29e-08  1.58e-07  9.85e-01  
 21  +3.9010e-01  +3.9010e-01  2.34e-06  4.38e-10  1.10e-07  1.34e-10  1.65e-09  9.90e-01  
 22  +3.9010e-01  +3.9010e-01  2.35e-08  4.39e-12  1.10e-09  1.34e-12  1.66e-11  9.90e-01  
 23  +3.9010e-01  +3.9010e-01  2.35e-10  4.40e-14  1.10e-11  1.36e-14  1.67e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 232.0997ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:26 PM: Optimal value: 3.901e-01
(CVXPY) Oct 06 04:30:26 PM: Compilation took 6.249e-02 seconds
(CVXPY) Oct 06 04:30:26 PM: Solver (including time spent in interface) took 2.504e-01 seconds
Iteration: 22, Objective: 0.3901
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:27 PM: Your problem has 5241 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:27 PM: Finished problem compilation (took 6.250e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:27 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5241
  constraints   = 10241
  nnz(P)        = 0
  nnz(A)        = 86336
  cones (total) = 1
    : Nonnegative = 1,  numel = 10241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7693e-01  +1.0994e+03  1.10e+03  4.46e-01  8.17e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2829e-01  +1.1837e+02  1.18e+02  1.76e-01  4.10e+01  1.80e-02  2.86e-01  9.69e-01  
  3  +5.0813e-01  +3.0619e+01  3.01e+01  1.22e-01  2.86e+01  5.16e-05  2.55e-01  3.80e-01  
  4  +5.0109e-01  +3.2617e+00  2.76e+00  1.90e-02  4.62e+00  6.39e-06  1.53e-01  6.38e-01  
  5  +5.0036e-01  +1.6490e+00  1.15e+00  7.77e-03  1.92e+00  4.56e-05  8.33e-02  8.20e-01  
  6  +5.0005e-01  +9.9039e-01  4.90e-01  3.00e-03  7.51e-01  6.95e-05  1.76e-02  8.16e-01  
  7  +4.9758e-01  +1.0002e+00  5.03e-01  3.55e-04  9.08e-02  1.18e-03  9.49e-04  9.52e-01  
  8  +4.9326e-01  +9.6399e-01  4.71e-01  1.64e-04  4.19e-02  2.21e-03  4.33e-04  5.71e-01  
  9  +4.8884e-01  +9.2669e-01  4.38e-01  1.23e-04  3.14e-02  2.31e-03  3.27e-04  3.03e-01  
 10  +4.7954e-01  +8.2619e-01  3.47e-01  8.90e-05  2.27e-02  9.46e-04  2.42e-04  5.78e-01  
 11  +4.7268e-01  +7.8527e-01  3.13e-01  7.62e-05  1.94e-02  7.89e-04  2.11e-04  1.82e-01  
 12  +4.5836e-01  +6.9248e-01  2.34e-01  5.82e-05  1.47e-02  2.97e-05  1.70e-04  7.23e-01  
 13  +4.4091e-01  +6.0841e-01  1.68e-01  3.78e-05  9.54e-03  1.68e-05  1.16e-04  4.69e-01  
 14  +4.2988e-01  +5.5871e-01  1.29e-01  2.78e-05  6.99e-03  1.09e-05  8.82e-05  4.26e-01  
 15  +4.1773e-01  +5.0545e-01  8.77e-02  1.80e-05  4.53e-03  6.26e-06  5.96e-05  5.69e-01  
 16  +4.0608e-01  +4.5659e-01  5.05e-02  1.00e-05  2.52e-03  3.44e-06  3.48e-05  4.72e-01  
 17  +3.9790e-01  +4.2235e-01  2.44e-02  4.71e-06  1.18e-03  1.56e-06  1.69e-05  7.89e-01  
 18  +3.9098e-01  +3.9532e-01  4.34e-03  8.26e-07  2.07e-04  2.60e-07  3.08e-06  9.90e-01  
 19  +3.8962e-01  +3.9043e-01  8.10e-04  1.53e-07  3.85e-05  4.74e-08  5.81e-07  9.17e-01  
 20  +3.8930e-01  +3.8932e-01  1.10e-05  2.09e-09  5.24e-07  6.41e-10  7.93e-09  9.89e-01  
 21  +3.8930e-01  +3.8930e-01  1.11e-07  2.09e-11  5.26e-09  6.43e-12  7.95e-11  9.90e-01  
 22  +3.8930e-01  +3.8930e-01  1.11e-09  2.09e-13  5.26e-11  6.46e-14  7.99e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 224.4285ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:27 PM: Optimal value: 3.893e-01
(CVXPY) Oct 06 04:30:27 PM: Compilation took 6.250e-02 seconds
(CVXPY) Oct 06 04:30:27 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 23, Objective: 0.3893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:27 PM: Your problem has 5250 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:27 PM: Finished problem compilation (took 7.832e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5250
  constraints   = 10250
  nnz(P)        = 0
  nnz(A)        = 86680
  cones (total) = 1
    : Nonnegative = 1,  numel = 10250

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7689e-01  +1.0994e+03  1.10e+03  4.46e-01  8.16e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2825e-01  +1.1829e+02  1.18e+02  1.76e-01  4.09e+01  1.81e-02  2.86e-01  9.69e-01  
  3  +5.0812e-01  +3.0596e+01  3.01e+01  1.21e-01  2.86e+01  5.17e-05  2.55e-01  3.81e-01  
  4  +5.0109e-01  +3.2625e+00  2.76e+00  1.90e-02  4.62e+00  6.39e-06  1.53e-01  6.39e-01  
  5  +5.0037e-01  +1.6750e+00  1.17e+00  7.95e-03  1.96e+00  4.52e-05  8.39e-02  8.08e-01  
  6  +5.0005e-01  +1.0001e+00  5.00e-01  3.07e-03  7.69e-01  6.80e-05  1.82e-02  8.09e-01  
  7  +4.9767e-01  +1.0092e+00  5.12e-01  3.69e-04  9.45e-02  1.14e-03  9.87e-04  9.52e-01  
  8  +4.9381e-01  +9.7613e-01  4.82e-01  1.78e-04  4.55e-02  2.07e-03  4.70e-04  5.50e-01  
  9  +4.8974e-01  +9.3410e-01  4.44e-01  1.30e-04  3.33e-02  2.09e-03  3.46e-04  3.56e-01  
 10  +4.8287e-01  +8.4954e-01  3.67e-01  9.92e-05  2.53e-02  9.35e-04  2.68e-04  5.52e-01  
 11  +4.7337e-01  +7.8785e-01  3.14e-01  7.83e-05  1.99e-02  6.65e-04  2.17e-04  3.14e-01  
 12  +4.6087e-01  +7.0545e-01  2.45e-01  6.26e-05  1.58e-02  6.17e-06  1.82e-04  7.45e-01  
 13  +4.3589e-01  +5.8541e-01  1.50e-01  3.27e-05  8.24e-03  4.79e-06  1.01e-04  6.23e-01  
 14  +4.2625e-01  +5.4339e-01  1.17e-01  2.48e-05  6.24e-03  3.81e-06  7.95e-05  2.57e-01  
 15  +4.1579e-01  +4.9884e-01  8.31e-02  1.69e-05  4.24e-03  3.32e-06  5.60e-05  5.15e-01  
 16  +4.0668e-01  +4.6089e-01  5.42e-02  1.07e-05  2.69e-03  2.38e-06  3.69e-05  4.85e-01  
 17  +3.9704e-01  +4.2168e-01  2.46e-02  4.75e-06  1.19e-03  1.18e-06  1.71e-05  6.67e-01  
 18  +3.9174e-01  +4.0058e-01  8.84e-03  1.68e-06  4.23e-04  4.71e-07  6.25e-06  8.09e-01  
 19  +3.8893e-01  +3.9000e-01  1.08e-03  2.04e-07  5.12e-05  6.17e-08  7.74e-07  9.90e-01  
 20  +3.8850e-01  +3.8852e-01  1.14e-05  2.15e-09  5.41e-07  6.50e-10  8.20e-09  9.90e-01  
 21  +3.8850e-01  +3.8850e-01  1.14e-07  2.16e-11  5.42e-09  6.52e-12  8.23e-11  9.90e-01  
 22  +3.8850e-01  +3.8850e-01  1.14e-09  2.16e-13  5.42e-11  6.53e-14  8.24e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 237.7068ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:28 PM: Optimal value: 3.885e-01
(CVXPY) Oct 06 04:30:28 PM: Compilation took 7.832e-02 seconds
(CVXPY) Oct 06 04:30:28 PM: Solver (including time spent in interface) took 2.505e-01 seconds
Iteration: 24, Objective: 0.3885
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:28 PM: Your problem has 5260 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:28 PM: Finished problem compilation (took 7.866e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5260
  constraints   = 10260
  nnz(P)        = 0
  nnz(A)        = 87064
  cones (total) = 1
    : Nonnegative = 1,  numel = 10260

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7680e-01  +1.0995e+03  1.10e+03  4.47e-01  8.15e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2820e-01  +1.1819e+02  1.18e+02  1.76e-01  4.08e+01  1.81e-02  2.86e-01  9.70e-01  
  3  +5.0811e-01  +3.0571e+01  3.01e+01  1.21e-01  2.85e+01  5.18e-05  2.55e-01  3.83e-01  
  4  +5.0109e-01  +3.2609e+00  2.76e+00  1.90e-02  4.62e+00  6.40e-06  1.52e-01  6.40e-01  
  5  +5.0038e-01  +1.6961e+00  1.20e+00  8.09e-03  1.99e+00  4.62e-05  8.23e-02  8.16e-01  
  6  +5.0006e-01  +1.0372e+00  5.37e-01  3.25e-03  8.12e-01  7.24e-05  1.81e-02  8.11e-01  
  7  +4.9772e-01  +1.0376e+00  5.40e-01  3.90e-04  9.99e-02  1.11e-03  1.04e-03  9.51e-01  
  8  +4.9300e-01  +9.8812e-01  4.95e-01  1.67e-04  4.28e-02  2.15e-03  4.41e-04  6.11e-01  
  9  +4.8870e-01  +9.4235e-01  4.54e-01  1.26e-04  3.21e-02  2.01e-03  3.34e-04  3.57e-01  
 10  +4.8144e-01  +8.4859e-01  3.67e-01  1.02e-04  2.60e-02  7.20e-04  2.77e-04  5.16e-01  
 11  +4.7272e-01  +7.8897e-01  3.16e-01  8.24e-05  2.09e-02  4.56e-04  2.29e-04  3.51e-01  
 12  +4.5480e-01  +6.8237e-01  2.28e-01  5.52e-05  1.40e-02  4.64e-06  1.62e-04  8.23e-01  
 13  +4.2694e-01  +5.4912e-01  1.22e-01  2.62e-05  6.60e-03  6.03e-06  8.38e-05  9.90e-01  
 14  +4.1506e-01  +4.9890e-01  8.38e-02  1.73e-05  4.35e-03  4.09e-06  5.77e-05  3.87e-01  
 15  +4.0549e-01  +4.5909e-01  5.36e-02  1.07e-05  2.68e-03  2.74e-06  3.70e-05  5.44e-01  
 16  +3.9655e-01  +4.2254e-01  2.60e-02  5.05e-06  1.27e-03  1.42e-06  1.82e-05  7.22e-01  
 17  +3.9082e-01  +3.9992e-01  9.11e-03  1.75e-06  4.39e-04  5.16e-07  6.53e-06  8.12e-01  
 18  +3.8804e-01  +3.8942e-01  1.38e-03  2.64e-07  6.62e-05  7.88e-08  1.01e-06  9.90e-01  
 19  +3.8751e-01  +3.8752e-01  1.51e-05  2.88e-09  7.24e-07  8.57e-10  1.11e-08  9.89e-01  
 20  +3.8750e-01  +3.8750e-01  1.51e-07  2.89e-11  7.25e-09  8.60e-12  1.11e-10  9.90e-01  
 21  +3.8750e-01  +3.8750e-01  1.51e-09  2.89e-13  7.25e-11  8.61e-14  1.11e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 221.8102ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:28 PM: Optimal value: 3.875e-01
(CVXPY) Oct 06 04:30:28 PM: Compilation took 7.866e-02 seconds
(CVXPY) Oct 06 04:30:28 PM: Solver (including time spent in interface) took 2.345e-01 seconds
Iteration: 25, Objective: 0.3875
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:28 PM: Your problem has 5270 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:29 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5270
  constraints   = 10270
  nnz(P)        = 0
  nnz(A)        = 87261
  cones (total) = 1
    : Nonnegative = 1,  numel = 10270

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.25e+02  1.00e+00  1.00e+00   ------   
  1  +5.7675e-01  +1.0995e+03  1.10e+03  4.47e-01  8.15e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2818e-01  +1.1816e+02  1.18e+02  1.76e-01  4.07e+01  1.81e-02  2.85e-01  9.70e-01  
  3  +5.0810e-01  +3.0563e+01  3.01e+01  1.21e-01  2.85e+01  5.18e-05  2.54e-01  3.84e-01  
  4  +5.0109e-01  +3.2613e+00  2.76e+00  1.91e-02  4.62e+00  6.41e-06  1.52e-01  6.41e-01  
  5  +5.0039e-01  +1.7174e+00  1.22e+00  8.24e-03  2.03e+00  4.60e-05  8.28e-02  8.07e-01  
  6  +5.0007e-01  +1.0453e+00  5.45e-01  3.31e-03  8.27e-01  7.13e-05  1.86e-02  8.03e-01  
  7  +4.9777e-01  +1.0452e+00  5.47e-01  4.00e-04  1.02e-01  1.09e-03  1.07e-03  9.52e-01  
  8  +4.9301e-01  +9.9399e-01  5.01e-01  1.69e-04  4.31e-02  2.15e-03  4.44e-04  6.18e-01  
  9  +4.8887e-01  +9.4939e-01  4.61e-01  1.28e-04  3.26e-02  2.01e-03  3.38e-04  3.50e-01  
 10  +4.8085e-01  +8.4734e-01  3.66e-01  1.00e-04  2.55e-02  7.10e-04  2.72e-04  5.36e-01  
 11  +4.7163e-01  +7.8554e-01  3.14e-01  8.09e-05  2.06e-02  4.52e-04  2.26e-04  3.41e-01  
 12  +4.5136e-01  +6.7257e-01  2.21e-01  5.11e-05  1.29e-02  1.88e-04  1.51e-04  5.34e-01  
 13  +4.3609e-01  +5.9767e-01  1.62e-01  3.58e-05  9.02e-03  4.48e-05  1.11e-04  6.69e-01  
 14  +4.1412e-01  +4.9790e-01  8.38e-02  1.73e-05  4.35e-03  1.79e-05  5.79e-05  5.58e-01  
 15  +4.0403e-01  +4.5471e-01  5.07e-02  1.01e-05  2.54e-03  8.14e-06  3.52e-05  5.91e-01  
 16  +3.9608e-01  +4.2171e-01  2.56e-02  5.00e-06  1.25e-03  3.04e-06  1.80e-05  7.07e-01  
 17  +3.9039e-01  +3.9916e-01  8.77e-03  1.69e-06  4.23e-04  8.07e-07  6.32e-06  8.11e-01  
 18  +3.8767e-01  +3.8888e-01  1.21e-03  2.32e-07  5.81e-05  7.25e-08  8.86e-07  9.90e-01  
 19  +3.8721e-01  +3.8722e-01  1.67e-05  3.20e-09  8.03e-07  9.95e-10  1.23e-08  9.87e-01  
 20  +3.8720e-01  +3.8720e-01  1.68e-07  3.21e-11  8.05e-09  9.98e-12  1.23e-10  9.90e-01  
 21  +3.8720e-01  +3.8720e-01  1.68e-09  3.21e-13  8.05e-11  1.00e-13  1.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 215.3728ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:29 PM: Optimal value: 3.872e-01
(CVXPY) Oct 06 04:30:29 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:30:29 PM: Solver (including time spent in interface) took 2.188e-01 seconds
Iteration: 26, Objective: 0.3872
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:29 PM: Your problem has 5280 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:29 PM: Finished problem compilation (took 7.836e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5280
  constraints   = 10280
  nnz(P)        = 0
  nnz(A)        = 87537
  cones (total) = 1
    : Nonnegative = 1,  numel = 10280

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7667e-01  +1.0996e+03  1.10e+03  4.47e-01  8.14e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2812e-01  +1.1806e+02  1.18e+02  1.76e-01  4.07e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0810e-01  +3.0539e+01  3.00e+01  1.21e-01  2.84e+01  5.19e-05  2.54e-01  3.86e-01  
  4  +5.0109e-01  +3.2589e+00  2.76e+00  1.90e-02  4.61e+00  6.42e-06  1.51e-01  6.42e-01  
  5  +5.0036e-01  +1.6641e+00  1.16e+00  7.86e-03  1.94e+00  4.88e-05  7.73e-02  8.61e-01  
  6  +5.0004e-01  +1.0576e+00  5.58e-01  3.19e-03  7.98e-01  8.61e-05  1.54e-02  8.30e-01  
  7  +4.9752e-01  +1.0503e+00  5.53e-01  3.73e-04  9.54e-02  1.19e-03  9.90e-04  9.41e-01  
  8  +4.9267e-01  +1.0026e+00  5.10e-01  1.65e-04  4.23e-02  2.24e-03  4.35e-04  5.95e-01  
  9  +4.8884e-01  +9.5464e-01  4.66e-01  1.32e-04  3.37e-02  1.91e-03  3.49e-04  3.35e-01  
 10  +4.8214e-01  +8.8187e-01  4.00e-01  1.07e-04  2.73e-02  1.15e-03  2.89e-04  3.82e-01  
 11  +4.7122e-01  +8.0538e-01  3.34e-01  8.22e-05  2.09e-02  8.14e-04  2.28e-04  3.15e-01  
 12  +4.6213e-01  +7.3625e-01  2.74e-01  7.16e-05  1.81e-02  1.40e-04  2.07e-04  5.78e-01  
 13  +4.4657e-01  +6.5519e-01  2.09e-01  4.94e-05  1.25e-02  9.57e-05  1.49e-04  3.35e-01  
 14  +4.2857e-01  +5.6881e-01  1.40e-01  3.06e-05  7.69e-03  2.40e-05  9.72e-05  7.16e-01  
 15  +4.1498e-01  +5.0761e-01  9.26e-02  1.94e-05  4.86e-03  1.36e-05  6.46e-05  4.30e-01  
 16  +4.0224e-01  +4.5175e-01  4.95e-02  9.95e-06  2.49e-03  5.61e-06  3.49e-05  6.43e-01  
 17  +3.9518e-01  +4.2164e-01  2.65e-02  5.20e-06  1.30e-03  2.32e-06  1.88e-05  7.29e-01  
 18  +3.8937e-01  +3.9841e-01  9.04e-03  1.75e-06  4.40e-04  6.66e-07  6.60e-06  8.25e-01  
 19  +3.8664e-01  +3.8803e-01  1.39e-03  2.68e-07  6.72e-05  8.00e-08  1.03e-06  9.90e-01  
 20  +3.8611e-01  +3.8613e-01  2.21e-05  4.26e-09  1.07e-06  1.26e-09  1.65e-08  9.85e-01  
 21  +3.8610e-01  +3.8610e-01  2.22e-07  4.27e-11  1.07e-08  1.27e-11  1.66e-10  9.90e-01  
 22  +3.8610e-01  +3.8610e-01  2.22e-09  4.27e-13  1.07e-10  1.27e-13  1.66e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 231.1448ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:29 PM: Optimal value: 3.861e-01
(CVXPY) Oct 06 04:30:29 PM: Compilation took 7.836e-02 seconds
(CVXPY) Oct 06 04:30:29 PM: Solver (including time spent in interface) took 2.495e-01 seconds
Iteration: 27, Objective: 0.3861
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:30 PM: Your problem has 5290 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:30 PM: Finished problem compilation (took 7.804e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5290
  constraints   = 10290
  nnz(P)        = 0
  nnz(A)        = 87825
  cones (total) = 1
    : Nonnegative = 1,  numel = 10290

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7664e-01  +1.0996e+03  1.10e+03  4.47e-01  8.13e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2812e-01  +1.1807e+02  1.18e+02  1.76e-01  4.06e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0810e-01  +3.0539e+01  3.00e+01  1.21e-01  2.84e+01  5.19e-05  2.54e-01  3.86e-01  
  4  +5.0109e-01  +3.2603e+00  2.76e+00  1.91e-02  4.62e+00  6.42e-06  1.51e-01  6.42e-01  
  5  +5.0037e-01  +1.6730e+00  1.17e+00  7.93e-03  1.95e+00  4.87e-05  7.77e-02  8.56e-01  
  6  +5.0004e-01  +1.0600e+00  5.60e-01  3.21e-03  8.04e-01  8.51e-05  1.56e-02  8.27e-01  
  7  +4.9755e-01  +1.0530e+00  5.55e-01  3.77e-04  9.65e-02  1.18e-03  1.00e-03  9.41e-01  
  8  +4.9267e-01  +1.0045e+00  5.12e-01  1.66e-04  4.24e-02  2.24e-03  4.37e-04  5.99e-01  
  9  +4.8902e-01  +9.5826e-01  4.69e-01  1.34e-04  3.41e-02  1.92e-03  3.54e-04  3.20e-01  
 10  +4.8214e-01  +8.7634e-01  3.94e-01  1.07e-04  2.74e-02  9.62e-04  2.90e-04  4.54e-01  
 11  +4.7221e-01  +8.0813e-01  3.36e-01  8.40e-05  2.13e-02  7.01e-04  2.33e-04  3.02e-01  
 12  +4.6180e-01  +7.3085e-01  2.69e-01  7.10e-05  1.80e-02  4.40e-05  2.06e-04  6.76e-01  
 13  +4.4604e-01  +6.5026e-01  2.04e-01  4.86e-05  1.23e-02  3.05e-05  1.47e-04  3.49e-01  
 14  +4.2736e-01  +5.6268e-01  1.35e-01  2.94e-05  7.39e-03  9.93e-06  9.38e-05  7.44e-01  
 15  +4.1389e-01  +5.0263e-01  8.87e-02  1.85e-05  4.65e-03  6.06e-06  6.20e-05  4.13e-01  
 16  +4.0201e-01  +4.5108e-01  4.91e-02  9.89e-06  2.48e-03  3.15e-06  3.47e-05  5.75e-01  
 17  +3.9765e-01  +4.3251e-01  3.49e-02  6.92e-06  1.73e-03  2.20e-06  2.47e-05  4.42e-01  
 18  +3.9049e-01  +4.0338e-01  1.29e-02  2.52e-06  6.31e-04  7.94e-07  9.36e-06  6.89e-01  
 19  +3.8751e-01  +3.9159e-01  4.08e-03  7.93e-07  1.98e-04  2.48e-07  3.01e-06  7.08e-01  
 20  +3.8614e-01  +3.8624e-01  1.01e-04  1.95e-08  4.89e-06  5.73e-09  7.49e-08  9.88e-01  
 21  +3.8610e-01  +3.8610e-01  1.01e-06  1.95e-10  4.89e-08  5.73e-11  7.50e-10  9.90e-01  
 22  +3.8610e-01  +3.8610e-01  1.01e-08  1.96e-12  4.90e-10  5.74e-13  7.50e-12  9.90e-01  
 23  +3.8610e-01  +3.8610e-01  1.11e-10  2.15e-14  5.39e-12  6.33e-15  8.28e-14  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 242.5443ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:30 PM: Optimal value: 3.861e-01
(CVXPY) Oct 06 04:30:30 PM: Compilation took 7.804e-02 seconds
(CVXPY) Oct 06 04:30:30 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 28, Objective: 0.3861
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:30 PM: Your problem has 5292 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:30 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5292
  constraints   = 10292
  nnz(P)        = 0
  nnz(A)        = 87874
  cones (total) = 1
    : Nonnegative = 1,  numel = 10292

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7661e-01  +1.0996e+03  1.10e+03  4.47e-01  8.13e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2811e-01  +1.1805e+02  1.18e+02  1.76e-01  4.06e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0810e-01  +3.0539e+01  3.00e+01  1.21e-01  2.83e+01  5.20e-05  2.54e-01  3.87e-01  
  4  +5.0109e-01  +3.2613e+00  2.76e+00  1.91e-02  4.62e+00  6.42e-06  1.51e-01  6.42e-01  
  5  +5.0036e-01  +1.6615e+00  1.16e+00  7.85e-03  1.93e+00  4.92e-05  7.67e-02  8.67e-01  
  6  +5.0003e-01  +1.0503e+00  5.50e-01  3.10e-03  7.77e-01  8.89e-05  1.46e-02  8.43e-01  
  7  +4.9746e-01  +1.0433e+00  5.46e-01  3.62e-04  9.25e-02  1.21e-03  9.61e-04  9.39e-01  
  8  +4.9267e-01  +9.9766e-01  5.05e-01  1.65e-04  4.21e-02  2.23e-03  4.34e-04  5.83e-01  
  9  +4.8891e-01  +9.5386e-01  4.65e-01  1.32e-04  3.38e-02  1.96e-03  3.51e-04  3.10e-01  
 10  +4.8105e-01  +8.6253e-01  3.81e-01  1.03e-04  2.63e-02  8.35e-04  2.80e-04  5.21e-01  
 11  +4.7251e-01  +8.0734e-01  3.35e-01  8.42e-05  2.14e-02  6.63e-04  2.33e-04  2.41e-01  
 12  +4.6093e-01  +7.2471e-01  2.64e-01  6.96e-05  1.76e-02  6.02e-06  2.02e-04  7.27e-01  
 13  +4.4568e-01  +6.4811e-01  2.02e-01  4.83e-05  1.22e-02  4.99e-06  1.46e-04  3.36e-01  
 14  +4.2555e-01  +5.5394e-01  1.28e-01  2.78e-05  6.98e-03  4.97e-06  8.93e-05  7.31e-01  
 15  +4.1289e-01  +4.9807e-01  8.52e-02  1.78e-05  4.45e-03  3.37e-06  5.96e-05  4.15e-01  
 16  +4.0212e-01  +4.5175e-01  4.96e-02  1.00e-05  2.51e-03  2.08e-06  3.51e-05  5.12e-01  
 17  +3.9737e-01  +4.3149e-01  3.41e-02  6.78e-06  1.70e-03  1.56e-06  2.42e-05  4.68e-01  
 18  +3.9183e-01  +4.0895e-01  1.71e-02  3.36e-06  8.42e-04  7.96e-07  1.24e-05  5.37e-01  
 19  +3.8713e-01  +3.9004e-01  2.91e-03  5.66e-07  1.42e-04  1.45e-07  2.15e-06  8.94e-01  
 20  +3.8612e-01  +3.8617e-01  4.98e-05  9.68e-09  2.42e-06  2.49e-09  3.70e-08  9.86e-01  
 21  +3.8610e-01  +3.8610e-01  5.01e-07  9.74e-11  2.44e-08  2.51e-11  3.72e-10  9.90e-01  
 22  +3.8610e-01  +3.8610e-01  5.39e-09  1.05e-12  2.62e-10  2.71e-13  4.02e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.1679ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:31 PM: Optimal value: 3.861e-01
(CVXPY) Oct 06 04:30:31 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:30:31 PM: Solver (including time spent in interface) took 2.500e-01 seconds
Iteration: 29, Objective: 0.3861
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:31 PM: Your problem has 5302 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:31 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5302
  constraints   = 10302
  nnz(P)        = 0
  nnz(A)        = 88047
  cones (total) = 1
    : Nonnegative = 1,  numel = 10302

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7663e-01  +1.0996e+03  1.10e+03  4.47e-01  8.13e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2810e-01  +1.1802e+02  1.17e+02  1.76e-01  4.05e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0809e-01  +3.0530e+01  3.00e+01  1.21e-01  2.83e+01  5.20e-05  2.54e-01  3.87e-01  
  4  +5.0109e-01  +3.2592e+00  2.76e+00  1.91e-02  4.61e+00  6.42e-06  1.51e-01  6.42e-01  
  5  +5.0038e-01  +1.6978e+00  1.20e+00  8.10e-03  1.99e+00  4.83e-05  7.85e-02  8.45e-01  
  6  +5.0004e-01  +1.0483e+00  5.48e-01  3.15e-03  7.87e-01  8.42e-05  1.53e-02  8.37e-01  
  7  +4.9757e-01  +1.0441e+00  5.47e-01  3.73e-04  9.53e-02  1.17e-03  9.92e-04  9.40e-01  
  8  +4.9287e-01  +9.9826e-01  5.05e-01  1.68e-04  4.29e-02  2.17e-03  4.42e-04  5.89e-01  
  9  +4.8929e-01  +9.5467e-01  4.65e-01  1.34e-04  3.42e-02  1.88e-03  3.55e-04  3.32e-01  
 10  +4.8151e-01  +8.5967e-01  3.78e-01  1.04e-04  2.66e-02  6.75e-04  2.82e-04  5.71e-01  
 11  +4.7290e-01  +8.0489e-01  3.32e-01  8.45e-05  2.14e-02  5.25e-04  2.34e-04  2.63e-01  
 12  +4.6132e-01  +7.2588e-01  2.65e-01  7.03e-05  1.78e-02  4.79e-06  2.05e-04  7.34e-01  
 13  +4.4535e-01  +6.4566e-01  2.00e-01  4.78e-05  1.20e-02  4.21e-06  1.45e-04  3.63e-01  
 14  +4.2258e-01  +5.4001e-01  1.17e-01  2.53e-05  6.34e-03  3.68e-06  8.19e-05  6.45e-01  
 15  +4.1080e-01  +4.8885e-01  7.81e-02  1.62e-05  4.06e-03  2.58e-06  5.49e-05  4.02e-01  
 16  +4.0209e-01  +4.5203e-01  4.99e-02  1.01e-05  2.53e-03  1.74e-06  3.54e-05  4.12e-01  
 17  +3.9756e-01  +4.3287e-01  3.53e-02  7.03e-06  1.76e-03  1.38e-06  2.51e-05  4.26e-01  
 18  +3.9199e-01  +4.1007e-01  1.81e-02  3.54e-06  8.85e-04  7.79e-07  1.30e-05  5.93e-01  
 19  +3.8854e-01  +3.9627e-01  7.73e-03  1.50e-06  3.75e-04  3.66e-07  5.63e-06  6.98e-01  
 20  +3.8596e-01  +3.8638e-01  4.29e-04  8.26e-08  2.07e-05  2.05e-08  3.16e-07  9.53e-01  
 21  +3.8580e-01  +3.8581e-01  4.41e-06  8.49e-10  2.12e-07  2.11e-10  3.25e-09  9.90e-01  
 22  +3.8580e-01  +3.8580e-01  4.43e-08  8.53e-12  2.13e-09  2.12e-12  3.27e-11  9.90e-01  
 23  +3.8580e-01  +3.8580e-01  4.74e-10  9.13e-14  2.28e-11  2.28e-14  3.52e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 239.9904ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:31 PM: Optimal value: 3.858e-01
(CVXPY) Oct 06 04:30:31 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:30:31 PM: Solver (including time spent in interface) took 2.657e-01 seconds
Iteration: 30, Objective: 0.3858
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:31 PM: Your problem has 5312 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:31 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5312
  constraints   = 10312
  nnz(P)        = 0
  nnz(A)        = 88245
  cones (total) = 1
    : Nonnegative = 1,  numel = 10312

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7656e-01  +1.0998e+03  1.10e+03  4.48e-01  8.12e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2805e-01  +1.1794e+02  1.17e+02  1.76e-01  4.05e+01  1.81e-02  2.85e-01  9.72e-01  
  3  +5.0809e-01  +3.0515e+01  3.00e+01  1.21e-01  2.83e+01  5.21e-05  2.54e-01  3.88e-01  
  4  +5.0109e-01  +3.2618e+00  2.76e+00  1.91e-02  4.62e+00  6.43e-06  1.51e-01  6.42e-01  
  5  +5.0042e-01  +1.7941e+00  1.29e+00  8.76e-03  2.15e+00  4.68e-05  8.23e-02  7.96e-01  
  6  +5.0007e-01  +1.0792e+00  5.79e-01  3.45e-03  8.61e-01  7.56e-05  1.81e-02  8.06e-01  
  7  +4.9780e-01  +1.0780e+00  5.80e-01  4.22e-04  1.08e-01  1.07e-03  1.12e-03  9.45e-01  
  8  +4.9300e-01  +1.0245e+00  5.32e-01  1.77e-04  4.53e-02  2.13e-03  4.66e-04  6.21e-01  
  9  +4.8915e-01  +9.7365e-01  4.84e-01  1.38e-04  3.52e-02  1.83e-03  3.65e-04  3.56e-01  
 10  +4.8125e-01  +8.8043e-01  3.99e-01  1.08e-04  2.76e-02  9.14e-04  2.93e-04  4.55e-01  
 11  +4.7194e-01  +8.1133e-01  3.39e-01  8.70e-05  2.21e-02  5.67e-04  2.42e-04  3.48e-01  
 12  +4.6060e-01  +7.2875e-01  2.68e-01  7.09e-05  1.79e-02  5.26e-06  2.06e-04  7.46e-01  
 13  +4.4438e-01  +6.4661e-01  2.02e-01  4.81e-05  1.21e-02  4.34e-06  1.46e-04  3.43e-01  
 14  +4.2282e-01  +5.4457e-01  1.22e-01  2.64e-05  6.62e-03  3.92e-06  8.56e-05  6.43e-01  
 15  +4.1120e-01  +4.9340e-01  8.22e-02  1.72e-05  4.31e-03  2.73e-06  5.83e-05  3.79e-01  
 16  +4.0218e-01  +4.5470e-01  5.25e-02  1.07e-05  2.67e-03  1.87e-06  3.75e-05  4.34e-01  
 17  +3.9761e-01  +4.3537e-01  3.78e-02  7.56e-06  1.89e-03  1.47e-06  2.71e-05  3.86e-01  
 18  +3.9224e-01  +4.1316e-01  2.09e-02  4.12e-06  1.03e-03  8.71e-07  1.52e-05  5.25e-01  
 19  +3.8959e-01  +4.0233e-01  1.27e-02  2.49e-06  6.21e-04  5.73e-07  9.27e-06  5.24e-01  
 20  +3.8586e-01  +3.8768e-01  1.82e-03  3.53e-07  8.82e-05  8.80e-08  1.35e-06  9.02e-01  
 21  +3.8521e-01  +3.8524e-01  2.58e-05  4.99e-09  1.25e-06  1.25e-09  1.92e-08  9.86e-01  
 22  +3.8520e-01  +3.8520e-01  2.59e-07  5.00e-11  1.25e-08  1.25e-11  1.92e-10  9.90e-01  
 23  +3.8520e-01  +3.8520e-01  2.70e-09  5.23e-13  1.31e-10  1.31e-13  2.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 245.2605ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:32 PM: Optimal value: 3.852e-01
(CVXPY) Oct 06 04:30:32 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:30:32 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 31, Objective: 0.3852
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:32 PM: Your problem has 5322 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:32 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5322
  constraints   = 10322
  nnz(P)        = 0
  nnz(A)        = 88435
  cones (total) = 1
    : Nonnegative = 1,  numel = 10322

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7647e-01  +1.0998e+03  1.10e+03  4.48e-01  8.11e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2799e-01  +1.1783e+02  1.17e+02  1.76e-01  4.04e+01  1.81e-02  2.85e-01  9.73e-01  
  3  +5.0808e-01  +3.0492e+01  3.00e+01  1.21e-01  2.82e+01  5.21e-05  2.53e-01  3.90e-01  
  4  +5.0109e-01  +3.2597e+00  2.76e+00  1.91e-02  4.61e+00  6.44e-06  1.50e-01  6.44e-01  
  5  +5.0042e-01  +1.7937e+00  1.29e+00  8.75e-03  2.15e+00  4.81e-05  7.99e-02  8.14e-01  
  6  +5.0006e-01  +1.0891e+00  5.89e-01  3.40e-03  8.49e-01  8.23e-05  1.65e-02  8.20e-01  
  7  +4.9772e-01  +1.0849e+00  5.87e-01  4.12e-04  1.05e-01  1.10e-03  1.10e-03  9.39e-01  
  8  +4.9282e-01  +1.0314e+00  5.39e-01  1.76e-04  4.49e-02  2.15e-03  4.62e-04  6.15e-01  
  9  +4.8855e-01  +9.8184e-01  4.93e-01  1.38e-04  3.53e-02  1.94e-03  3.66e-04  3.09e-01  
 10  +4.7979e-01  +8.7492e-01  3.95e-01  1.07e-04  2.72e-02  7.86e-04  2.90e-04  5.16e-01  
 11  +4.7360e-01  +8.2928e-01  3.56e-01  9.33e-05  2.37e-02  5.40e-04  2.58e-04  2.71e-01  
 12  +4.5718e-01  +7.1560e-01  2.58e-01  6.62e-05  1.67e-02  5.23e-06  1.94e-04  7.82e-01  
 13  +4.4069e-01  +6.3290e-01  1.92e-01  4.52e-05  1.14e-02  4.33e-06  1.39e-04  3.58e-01  
 14  +4.2079e-01  +5.3911e-01  1.18e-01  2.58e-05  6.46e-03  3.64e-06  8.43e-05  5.88e-01  
 15  +4.0985e-01  +4.9097e-01  8.11e-02  1.71e-05  4.28e-03  2.57e-06  5.82e-05  3.60e-01  
 16  +4.0176e-01  +4.5609e-01  5.43e-02  1.11e-05  2.78e-03  1.95e-06  3.91e-05  4.45e-01  
 17  +3.9729e-01  +4.3721e-01  3.99e-02  8.04e-06  2.01e-03  1.56e-06  2.88e-05  3.76e-01  
 18  +3.9142e-01  +4.1297e-01  2.16e-02  4.27e-06  1.07e-03  8.92e-07  1.57e-05  5.30e-01  
 19  +3.8875e-01  +4.0201e-01  1.33e-02  2.60e-06  6.50e-04  5.92e-07  9.74e-06  5.15e-01  
 20  +3.8489e-01  +3.8681e-01  1.92e-03  3.74e-07  9.33e-05  9.28e-08  1.44e-06  9.06e-01  
 21  +3.8421e-01  +3.8424e-01  2.81e-05  5.47e-09  1.37e-06  1.36e-09  2.11e-08  9.86e-01  
 22  +3.8420e-01  +3.8420e-01  2.82e-07  5.48e-11  1.37e-08  1.36e-11  2.11e-10  9.90e-01  
 23  +3.8420e-01  +3.8420e-01  2.94e-09  5.72e-13  1.43e-10  1.42e-13  2.22e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 245.8031ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:32 PM: Optimal value: 3.842e-01
(CVXPY) Oct 06 04:30:32 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:30:32 PM: Solver (including time spent in interface) took 2.660e-01 seconds
Iteration: 32, Objective: 0.3842
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:33 PM: Your problem has 5332 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:33 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5332
  constraints   = 10332
  nnz(P)        = 0
  nnz(A)        = 88894
  cones (total) = 1
    : Nonnegative = 1,  numel = 10332

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7643e-01  +1.0997e+03  1.10e+03  4.48e-01  8.10e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2794e-01  +1.1771e+02  1.17e+02  1.75e-01  4.03e+01  1.81e-02  2.84e-01  9.74e-01  
  3  +5.0807e-01  +3.0460e+01  3.00e+01  1.21e-01  2.81e+01  5.22e-05  2.53e-01  3.92e-01  
  4  +5.0109e-01  +3.2559e+00  2.75e+00  1.91e-02  4.61e+00  6.44e-06  1.50e-01  6.45e-01  
  5  +5.0043e-01  +1.8373e+00  1.34e+00  9.04e-03  2.22e+00  4.77e-05  8.00e-02  8.02e-01  
  6  +5.0006e-01  +1.0980e+00  5.98e-01  3.43e-03  8.58e-01  8.21e-05  1.64e-02  8.20e-01  
  7  +4.9777e-01  +1.0933e+00  5.96e-01  4.21e-04  1.08e-01  1.08e-03  1.11e-03  9.38e-01  
  8  +4.9285e-01  +1.0392e+00  5.46e-01  1.77e-04  4.52e-02  2.14e-03  4.62e-04  6.22e-01  
  9  +4.8876e-01  +9.8969e-01  5.01e-01  1.41e-04  3.60e-02  1.89e-03  3.71e-04  3.10e-01  
 10  +4.7818e-01  +8.6291e-01  3.85e-01  1.05e-04  2.66e-02  6.03e-04  2.84e-04  5.76e-01  
 11  +4.7204e-01  +8.2222e-01  3.50e-01  9.17e-05  2.33e-02  4.65e-04  2.53e-04  2.15e-01  
 12  +4.5225e-01  +6.9508e-01  2.43e-01  6.04e-05  1.52e-02  4.60e-06  1.78e-04  8.01e-01  
 13  +4.2334e-01  +5.5221e-01  1.29e-01  2.84e-05  7.12e-03  4.34e-06  9.12e-05  7.57e-01  
 14  +4.1180e-01  +5.0177e-01  9.00e-02  1.91e-05  4.79e-03  3.13e-06  6.41e-05  3.62e-01  
 15  +4.0149e-01  +4.5744e-01  5.59e-02  1.14e-05  2.86e-03  2.42e-06  3.98e-05  6.24e-01  
 16  +3.9698e-01  +4.3875e-01  4.18e-02  8.41e-06  2.10e-03  1.88e-06  2.99e-05  3.31e-01  
 17  +3.9056e-01  +4.1226e-01  2.17e-02  4.30e-06  1.08e-03  1.04e-06  1.58e-05  6.03e-01  
 18  +3.8813e-01  +4.0231e-01  1.42e-02  2.79e-06  6.97e-04  7.13e-07  1.04e-05  5.03e-01  
 19  +3.8401e-01  +3.8620e-01  2.19e-03  4.28e-07  1.07e-04  1.16e-07  1.64e-06  9.23e-01  
 20  +3.8321e-01  +3.8325e-01  3.55e-05  6.90e-09  1.73e-06  1.87e-09  2.66e-08  9.84e-01  
 21  +3.8320e-01  +3.8320e-01  3.55e-07  6.92e-11  1.73e-08  1.87e-11  2.67e-10  9.90e-01  
 22  +3.8320e-01  +3.8320e-01  3.68e-09  7.17e-13  1.79e-10  1.95e-13  2.77e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 238.5761ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:33 PM: Optimal value: 3.832e-01
(CVXPY) Oct 06 04:30:33 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:30:33 PM: Solver (including time spent in interface) took 2.502e-01 seconds
Iteration: 33, Objective: 0.3832
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:33 PM: Your problem has 5342 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:33 PM: Finished problem compilation (took 7.852e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5342
  constraints   = 10342
  nnz(P)        = 0
  nnz(A)        = 89182
  cones (total) = 1
    : Nonnegative = 1,  numel = 10342

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7640e-01  +1.0997e+03  1.10e+03  4.48e-01  8.10e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2791e-01  +1.1765e+02  1.17e+02  1.75e-01  4.02e+01  1.81e-02  2.84e-01  9.74e-01  
  3  +5.0806e-01  +3.0445e+01  2.99e+01  1.21e-01  2.81e+01  5.22e-05  2.52e-01  3.93e-01  
  4  +5.0109e-01  +3.2545e+00  2.75e+00  1.91e-02  4.60e+00  6.45e-06  1.49e-01  6.46e-01  
  5  +5.0043e-01  +1.8201e+00  1.32e+00  8.91e-03  2.19e+00  4.88e-05  7.80e-02  8.21e-01  
  6  +5.0005e-01  +1.0908e+00  5.91e-01  3.29e-03  8.23e-01  8.82e-05  1.49e-02  8.34e-01  
  7  +4.9768e-01  +1.0846e+00  5.87e-01  4.02e-04  1.03e-01  1.11e-03  1.06e-03  9.32e-01  
  8  +4.9296e-01  +1.0345e+00  5.41e-01  1.79e-04  4.58e-02  2.09e-03  4.68e-04  5.97e-01  
  9  +4.8860e-01  +9.8494e-01  4.96e-01  1.40e-04  3.57e-02  1.89e-03  3.68e-04  3.25e-01  
 10  +4.8060e-01  +8.7719e-01  3.97e-01  1.14e-04  2.89e-02  4.76e-04  3.07e-04  5.86e-01  
 11  +4.7354e-01  +8.2691e-01  3.53e-01  9.57e-05  2.43e-02  2.26e-04  2.64e-04  4.80e-01  
 12  +4.4869e-01  +6.7755e-01  2.29e-01  5.49e-05  1.38e-02  2.75e-05  1.63e-04  7.71e-01  
 13  +4.3420e-01  +6.0736e-01  1.73e-01  3.96e-05  9.95e-03  1.77e-05  1.23e-04  3.52e-01  
 14  +4.1655e-01  +5.2555e-01  1.09e-01  2.36e-05  5.92e-03  9.25e-06  7.80e-05  4.95e-01  
 15  +4.0496e-01  +4.7474e-01  6.98e-02  1.46e-05  3.65e-03  5.47e-06  5.02e-05  4.57e-01  
 16  +3.9938e-01  +4.5091e-01  5.15e-02  1.05e-05  2.63e-03  3.87e-06  3.71e-05  3.86e-01  
 17  +3.9212e-01  +4.2004e-01  2.79e-02  5.56e-06  1.39e-03  1.86e-06  2.02e-05  7.34e-01  
 18  +3.8867e-01  +4.0610e-01  1.74e-02  3.43e-06  8.58e-04  1.13e-06  1.27e-05  5.18e-01  
 19  +3.8408e-01  +3.8813e-01  4.05e-03  7.89e-07  1.97e-04  2.44e-07  3.03e-06  8.83e-01  
 20  +3.8263e-01  +3.8271e-01  8.27e-05  1.61e-08  4.02e-06  4.85e-09  6.25e-08  9.82e-01  
 21  +3.8260e-01  +3.8260e-01  8.28e-07  1.61e-10  4.02e-08  4.86e-11  6.26e-10  9.90e-01  
 22  +3.8260e-01  +3.8260e-01  8.29e-09  1.61e-12  4.03e-10  4.86e-13  6.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 247.2878ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:34 PM: Optimal value: 3.826e-01
(CVXPY) Oct 06 04:30:34 PM: Compilation took 7.852e-02 seconds
(CVXPY) Oct 06 04:30:34 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 34, Objective: 0.3826
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:34 PM: Your problem has 5352 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:34 PM: Finished problem compilation (took 7.820e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5352
  constraints   = 10352
  nnz(P)        = 0
  nnz(A)        = 89404
  cones (total) = 1
    : Nonnegative = 1,  numel = 10352

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7636e-01  +1.0996e+03  1.10e+03  4.48e-01  8.09e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2786e-01  +1.1754e+02  1.17e+02  1.75e-01  4.01e+01  1.81e-02  2.84e-01  9.75e-01  
  3  +5.0806e-01  +3.0416e+01  2.99e+01  1.20e-01  2.80e+01  5.23e-05  2.52e-01  3.94e-01  
  4  +5.0109e-01  +3.2521e+00  2.75e+00  1.91e-02  4.60e+00  6.45e-06  1.49e-01  6.47e-01  
  5  +5.0043e-01  +1.8271e+00  1.33e+00  8.96e-03  2.20e+00  4.90e-05  7.71e-02  8.24e-01  
  6  +5.0007e-01  +1.1528e+00  6.53e-01  3.66e-03  9.14e-01  8.72e-05  1.66e-02  8.04e-01  
  7  +4.9783e-01  +1.1397e+00  6.42e-01  4.53e-04  1.16e-01  1.06e-03  1.20e-03  9.31e-01  
  8  +4.9322e-01  +1.0786e+00  5.85e-01  1.96e-04  5.01e-02  2.00e-03  5.12e-04  6.11e-01  
  9  +4.8873e-01  +1.0154e+00  5.27e-01  1.49e-04  3.81e-02  1.76e-03  3.92e-04  3.52e-01  
 10  +4.7795e-01  +8.6614e-01  3.88e-01  1.07e-04  2.72e-02  3.74e-04  2.91e-04  6.60e-01  
 11  +4.6692e-01  +7.8657e-01  3.20e-01  8.65e-05  2.19e-02  7.24e-05  2.44e-04  6.52e-01  
 12  +4.3601e-01  +6.1801e-01  1.82e-01  4.07e-05  1.02e-02  3.40e-05  1.24e-04  5.62e-01  
 13  +4.1920e-01  +5.4017e-01  1.21e-01  2.61e-05  6.54e-03  1.89e-05  8.47e-05  4.12e-01  
 14  +4.1027e-01  +5.0097e-01  9.07e-02  1.91e-05  4.79e-03  1.29e-05  6.41e-05  3.28e-01  
 15  +3.9984e-01  +4.5570e-01  5.59e-02  1.14e-05  2.86e-03  6.72e-06  3.99e-05  5.33e-01  
 16  +3.9523e-01  +4.3629e-01  4.11e-02  8.28e-06  2.07e-03  4.59e-06  2.95e-05  3.66e-01  
 17  +3.8744e-01  +4.0398e-01  1.65e-02  3.27e-06  8.18e-04  1.57e-06  1.22e-05  7.12e-01  
 18  +3.8356e-01  +3.8831e-01  4.75e-03  9.29e-07  2.32e-04  3.11e-07  3.56e-06  9.34e-01  
 19  +3.8198e-01  +3.8248e-01  4.96e-04  9.66e-08  2.41e-05  3.22e-08  3.75e-07  8.97e-01  
 20  +3.8180e-01  +3.8181e-01  5.38e-06  1.05e-09  2.62e-07  3.49e-10  4.08e-09  9.89e-01  
 21  +3.8180e-01  +3.8180e-01  5.41e-08  1.05e-11  2.63e-09  3.50e-12  4.10e-11  9.90e-01  
 22  +3.8180e-01  +3.8180e-01  5.85e-10  1.14e-13  2.85e-11  3.81e-14  4.46e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 243.4165ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:34 PM: Optimal value: 3.818e-01
(CVXPY) Oct 06 04:30:34 PM: Compilation took 7.820e-02 seconds
(CVXPY) Oct 06 04:30:34 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 35, Objective: 0.3818
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:34 PM: Your problem has 5361 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:35 PM: Finished problem compilation (took 7.812e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5361
  constraints   = 10361
  nnz(P)        = 0
  nnz(A)        = 89551
  cones (total) = 1
    : Nonnegative = 1,  numel = 10361

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7633e-01  +1.0996e+03  1.10e+03  4.48e-01  8.08e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2786e-01  +1.1753e+02  1.17e+02  1.75e-01  4.01e+01  1.82e-02  2.84e-01  9.75e-01  
  3  +5.0805e-01  +3.0414e+01  2.99e+01  1.20e-01  2.80e+01  5.23e-05  2.52e-01  3.94e-01  
  4  +5.0109e-01  +3.2512e+00  2.75e+00  1.91e-02  4.60e+00  6.45e-06  1.49e-01  6.47e-01  
  5  +5.0040e-01  +1.7726e+00  1.27e+00  8.58e-03  2.10e+00  5.11e-05  7.35e-02  8.62e-01  
  6  +5.0002e-01  +1.1089e+00  6.09e-01  3.17e-03  7.94e-01  1.02e-04  1.30e-02  8.47e-01  
  7  +4.9752e-01  +1.0969e+00  5.99e-01  3.88e-04  9.93e-02  1.17e-03  1.02e-03  9.24e-01  
  8  +4.9322e-01  +1.0483e+00  5.55e-01  1.91e-04  4.88e-02  1.98e-03  5.00e-04  5.51e-01  
  9  +4.8858e-01  +9.9514e-01  5.07e-01  1.44e-04  3.67e-02  1.86e-03  3.78e-04  3.52e-01  
 10  +4.8026e-01  +8.7235e-01  3.92e-01  1.15e-04  2.93e-02  2.73e-04  3.12e-04  6.58e-01  
 11  +4.6741e-01  +7.8928e-01  3.22e-01  8.62e-05  2.18e-02  1.17e-04  2.42e-04  5.46e-01  
 12  +4.3929e-01  +6.3532e-01  1.96e-01  4.47e-05  1.12e-02  5.82e-05  1.36e-04  5.09e-01  
 13  +4.2044e-01  +5.4698e-01  1.27e-01  2.76e-05  6.91e-03  2.86e-05  8.94e-05  4.61e-01  
 14  +4.1165e-01  +5.0832e-01  9.67e-02  2.05e-05  5.13e-03  1.88e-05  6.86e-05  3.60e-01  
 15  +4.0066e-01  +4.6039e-01  5.97e-02  1.23e-05  3.07e-03  8.89e-06  4.28e-05  5.78e-01  
 16  +3.9696e-01  +4.4466e-01  4.77e-02  9.68e-06  2.42e-03  6.55e-06  3.43e-05  3.05e-01  
 17  +3.8780e-01  +4.0635e-01  1.86e-02  3.69e-06  9.21e-04  1.88e-06  1.37e-05  7.81e-01  
 18  +3.8297e-01  +3.8706e-01  4.09e-03  8.06e-07  2.01e-04  3.24e-07  3.10e-06  8.84e-01  
 19  +3.8155e-01  +3.8168e-01  1.27e-04  2.50e-08  6.25e-06  8.32e-09  9.77e-08  9.85e-01  
 20  +3.8150e-01  +3.8150e-01  1.28e-06  2.51e-10  6.27e-08  8.35e-11  9.82e-10  9.90e-01  
 21  +3.8150e-01  +3.8150e-01  1.28e-08  2.52e-12  6.29e-10  8.37e-13  9.84e-12  9.90e-01  
 22  +3.8150e-01  +3.8150e-01  1.41e-10  2.76e-14  6.89e-12  9.22e-15  1.08e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 244.5141ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:35 PM: Optimal value: 3.815e-01
(CVXPY) Oct 06 04:30:35 PM: Compilation took 7.812e-02 seconds
(CVXPY) Oct 06 04:30:35 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 36, Objective: 0.3815
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:35 PM: Your problem has 5370 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:35 PM: Finished problem compilation (took 9.374e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5370
  constraints   = 10370
  nnz(P)        = 0
  nnz(A)        = 89711
  cones (total) = 1
    : Nonnegative = 1,  numel = 10370

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7631e-01  +1.0996e+03  1.10e+03  4.48e-01  8.08e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2784e-01  +1.1750e+02  1.17e+02  1.75e-01  4.00e+01  1.82e-02  2.84e-01  9.75e-01  
  3  +5.0805e-01  +3.0402e+01  2.99e+01  1.20e-01  2.80e+01  5.23e-05  2.52e-01  3.95e-01  
  4  +5.0109e-01  +3.2498e+00  2.75e+00  1.91e-02  4.59e+00  6.46e-06  1.49e-01  6.47e-01  
  5  +5.0039e-01  +1.7610e+00  1.26e+00  8.50e-03  2.08e+00  5.19e-05  7.22e-02  8.75e-01  
  6  +5.0001e-01  +1.1038e+00  6.04e-01  3.04e-03  7.63e-01  1.08e-04  1.21e-02  8.58e-01  
  7  +4.9741e-01  +1.0913e+00  5.94e-01  3.72e-04  9.50e-02  1.21e-03  9.80e-04  9.21e-01  
  8  +4.9240e-01  +1.0368e+00  5.44e-01  1.73e-04  4.41e-02  2.13e-03  4.52e-04  5.81e-01  
  9  +4.8854e-01  +9.9558e-01  5.07e-01  1.42e-04  3.61e-02  1.94e-03  3.72e-04  2.70e-01  
 10  +4.8183e-01  +9.1199e-01  4.30e-01  1.19e-04  3.03e-02  9.88e-04  3.19e-04  4.03e-01  
 11  +4.7488e-01  +8.6216e-01  3.87e-01  1.01e-04  2.57e-02  7.72e-04  2.77e-04  2.34e-01  
 12  +4.5591e-01  +7.2628e-01  2.70e-01  6.93e-05  1.75e-02  7.40e-06  2.02e-04  7.69e-01  
 13  +4.3316e-01  +6.0920e-01  1.76e-01  4.06e-05  1.02e-02  4.78e-06  1.27e-04  4.22e-01  
 14  +4.1753e-01  +5.3637e-01  1.19e-01  2.61e-05  6.52e-03  3.42e-06  8.57e-05  3.99e-01  
 15  +4.0781e-01  +4.9335e-01  8.55e-02  1.82e-05  4.55e-03  2.63e-06  6.20e-05  3.45e-01  
 16  +3.9972e-01  +4.5824e-01  5.85e-02  1.21e-05  3.03e-03  1.99e-06  4.26e-05  4.06e-01  
 17  +3.9420e-01  +4.3464e-01  4.04e-02  8.21e-06  2.05e-03  1.55e-06  2.96e-05  4.41e-01  
 18  +3.8533e-01  +3.9793e-01  1.26e-02  2.51e-06  6.26e-04  5.20e-07  9.49e-06  7.50e-01  
 19  +3.8197e-01  +3.8439e-01  2.41e-03  4.77e-07  1.19e-04  1.15e-07  1.85e-06  9.03e-01  
 20  +3.8113e-01  +3.8122e-01  8.71e-05  1.71e-08  4.28e-06  4.46e-09  6.72e-08  9.90e-01  
 21  +3.8110e-01  +3.8110e-01  8.73e-07  1.72e-10  4.29e-08  4.47e-11  6.73e-10  9.90e-01  
 22  +3.8110e-01  +3.8110e-01  9.09e-09  1.79e-12  4.47e-10  4.68e-13  7.04e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 249.6059ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:35 PM: Optimal value: 3.811e-01
(CVXPY) Oct 06 04:30:35 PM: Compilation took 9.374e-02 seconds
(CVXPY) Oct 06 04:30:35 PM: Solver (including time spent in interface) took 2.656e-01 seconds
Iteration: 37, Objective: 0.3811
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:36 PM: Your problem has 5380 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:36 PM: Finished problem compilation (took 9.374e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5380
  constraints   = 10380
  nnz(P)        = 0
  nnz(A)        = 89932
  cones (total) = 1
    : Nonnegative = 1,  numel = 10380

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7628e-01  +1.0997e+03  1.10e+03  4.48e-01  8.07e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2782e-01  +1.1747e+02  1.17e+02  1.75e-01  3.99e+01  1.82e-02  2.84e-01  9.75e-01  
  3  +5.0805e-01  +3.0395e+01  2.99e+01  1.20e-01  2.79e+01  5.24e-05  2.51e-01  3.96e-01  
  4  +5.0109e-01  +3.2516e+00  2.75e+00  1.91e-02  4.60e+00  6.46e-06  1.48e-01  6.47e-01  
  5  +5.0040e-01  +1.7802e+00  1.28e+00  8.63e-03  2.11e+00  5.17e-05  7.27e-02  8.67e-01  
  6  +5.0004e-01  +1.1533e+00  6.53e-01  3.40e-03  8.50e-01  1.03e-04  1.39e-02  8.32e-01  
  7  +4.9760e-01  +1.1369e+00  6.39e-01  4.19e-04  1.07e-01  1.14e-03  1.11e-03  9.23e-01  
  8  +4.9323e-01  +1.0801e+00  5.87e-01  2.00e-04  5.11e-02  1.96e-03  5.24e-04  5.66e-01  
  9  +4.8792e-01  +1.0165e+00  5.29e-01  1.46e-04  3.73e-02  1.87e-03  3.86e-04  3.57e-01  
 10  +4.8216e-01  +9.3812e-01  4.56e-01  1.25e-04  3.19e-02  1.06e-03  3.36e-04  3.50e-01  
 11  +4.7589e-01  +8.8869e-01  4.13e-01  1.08e-04  2.74e-02  8.67e-04  2.94e-04  2.00e-01  
 12  +4.5976e-01  +7.6070e-01  3.01e-01  7.69e-05  1.94e-02  1.88e-04  2.21e-04  6.05e-01  
 13  +4.3332e-01  +6.1566e-01  1.82e-01  4.14e-05  1.04e-02  9.22e-05  1.29e-04  4.70e-01  
 14  +4.1841e-01  +5.4443e-01  1.26e-01  2.75e-05  6.87e-03  5.10e-05  8.98e-05  4.13e-01  
 15  +4.0873e-01  +5.0041e-01  9.17e-02  1.94e-05  4.85e-03  3.24e-05  6.58e-05  3.59e-01  
 16  +3.9879e-01  +4.5608e-01  5.73e-02  1.18e-05  2.94e-03  1.64e-05  4.15e-05  5.11e-01  
 17  +3.9405e-01  +4.3560e-01  4.15e-02  8.41e-06  2.10e-03  1.04e-05  3.02e-05  3.88e-01  
 18  +3.8483e-01  +3.9688e-01  1.20e-02  2.39e-06  5.95e-04  2.04e-06  9.01e-06  8.26e-01  
 19  +3.8153e-01  +3.8379e-01  2.27e-03  4.45e-07  1.11e-04  2.50e-07  1.72e-06  9.08e-01  
 20  +3.8071e-01  +3.8074e-01  3.19e-05  6.25e-09  1.56e-06  3.35e-09  2.44e-08  9.87e-01  
 21  +3.8070e-01  +3.8070e-01  3.20e-07  6.26e-11  1.56e-08  3.36e-11  2.44e-10  9.90e-01  
 22  +3.8070e-01  +3.8070e-01  3.46e-09  6.78e-13  1.69e-10  3.66e-13  2.66e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 255.0537ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:36 PM: Optimal value: 3.807e-01
(CVXPY) Oct 06 04:30:36 PM: Compilation took 9.374e-02 seconds
(CVXPY) Oct 06 04:30:36 PM: Solver (including time spent in interface) took 2.660e-01 seconds
Iteration: 38, Objective: 0.3807
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:36 PM: Your problem has 5385 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:36 PM: Finished problem compilation (took 9.384e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5385
  constraints   = 10385
  nnz(P)        = 0
  nnz(A)        = 90115
  cones (total) = 1
    : Nonnegative = 1,  numel = 10385

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7626e-01  +1.0997e+03  1.10e+03  4.48e-01  8.07e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2780e-01  +1.1743e+02  1.17e+02  1.75e-01  3.99e+01  1.82e-02  2.84e-01  9.76e-01  
  3  +5.0804e-01  +3.0381e+01  2.99e+01  1.20e-01  2.79e+01  5.24e-05  2.51e-01  3.97e-01  
  4  +5.0109e-01  +3.2505e+00  2.75e+00  1.91e-02  4.59e+00  6.46e-06  1.48e-01  6.48e-01  
  5  +5.0040e-01  +1.7884e+00  1.29e+00  8.67e-03  2.13e+00  5.23e-05  7.19e-02  8.72e-01  
  6  +5.0001e-01  +1.1252e+00  6.25e-01  3.12e-03  7.83e-01  1.09e-04  1.22e-02  8.55e-01  
  7  +4.9747e-01  +1.1110e+00  6.14e-01  3.87e-04  9.88e-02  1.19e-03  1.02e-03  9.19e-01  
  8  +4.9331e-01  +1.0614e+00  5.68e-01  1.98e-04  5.06e-02  1.92e-03  5.18e-04  5.32e-01  
  9  +4.8827e-01  +1.0067e+00  5.18e-01  1.47e-04  3.74e-02  1.89e-03  3.87e-04  3.37e-01  
 10  +4.8116e-01  +8.9864e-01  4.17e-01  1.21e-04  3.08e-02  4.91e-04  3.27e-04  5.73e-01  
 11  +4.7411e-01  +8.5005e-01  3.76e-01  1.02e-04  2.59e-02  3.62e-04  2.81e-04  2.84e-01  
 12  +4.4619e-01  +6.7196e-01  2.26e-01  5.38e-05  1.35e-02  3.80e-06  1.61e-04  8.50e-01  
 13  +4.2362e-01  +5.6294e-01  1.39e-01  3.11e-05  7.79e-03  2.78e-06  1.00e-04  4.58e-01  
 14  +4.1330e-01  +5.1731e-01  1.04e-01  2.25e-05  5.63e-03  2.36e-06  7.50e-05  3.17e-01  
 15  +4.0206e-01  +4.6859e-01  6.65e-02  1.39e-05  3.46e-03  2.16e-06  4.81e-05  5.54e-01  
 16  +3.9573e-01  +4.4201e-01  4.63e-02  9.43e-06  2.35e-03  1.67e-06  3.36e-05  4.02e-01  
 17  +3.8707e-01  +4.0591e-01  1.88e-02  3.74e-06  9.34e-04  8.94e-07  1.39e-05  8.20e-01  
 18  +3.8169e-01  +3.8474e-01  3.04e-03  5.99e-07  1.49e-04  1.51e-07  2.31e-06  8.94e-01  
 19  +3.8066e-01  +3.8082e-01  1.57e-04  3.09e-08  7.69e-06  8.25e-09  1.21e-07  9.90e-01  
 20  +3.8060e-01  +3.8060e-01  1.59e-06  3.13e-10  7.80e-08  8.36e-11  1.22e-09  9.90e-01  
 21  +3.8060e-01  +3.8060e-01  1.60e-08  3.13e-12  7.81e-10  8.38e-13  1.22e-11  9.90e-01  
 22  +3.8060e-01  +3.8060e-01  1.73e-10  3.39e-14  8.44e-12  9.09e-15  1.33e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 248.5416ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:37 PM: Optimal value: 3.806e-01
(CVXPY) Oct 06 04:30:37 PM: Compilation took 9.384e-02 seconds
(CVXPY) Oct 06 04:30:37 PM: Solver (including time spent in interface) took 2.664e-01 seconds
Iteration: 39, Objective: 0.3806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:37 PM: Your problem has 5386 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:37 PM: Finished problem compilation (took 9.313e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5386
  constraints   = 10386
  nnz(P)        = 0
  nnz(A)        = 90138
  cones (total) = 1
    : Nonnegative = 1,  numel = 10386

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7626e-01  +1.0997e+03  1.10e+03  4.48e-01  8.07e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2779e-01  +1.1741e+02  1.17e+02  1.75e-01  3.99e+01  1.82e-02  2.84e-01  9.76e-01  
  3  +5.0804e-01  +3.0377e+01  2.99e+01  1.20e-01  2.79e+01  5.24e-05  2.51e-01  3.97e-01  
  4  +5.0109e-01  +3.2505e+00  2.75e+00  1.91e-02  4.59e+00  6.46e-06  1.48e-01  6.48e-01  
  5  +5.0041e-01  +1.7890e+00  1.29e+00  8.68e-03  2.13e+00  5.24e-05  7.18e-02  8.73e-01  
  6  +5.0002e-01  +1.1315e+00  6.31e-01  3.16e-03  7.92e-01  1.09e-04  1.24e-02  8.51e-01  
  7  +4.9748e-01  +1.1168e+00  6.19e-01  3.92e-04  1.00e-01  1.18e-03  1.03e-03  9.19e-01  
  8  +4.9329e-01  +1.0660e+00  5.73e-01  1.99e-04  5.08e-02  1.93e-03  5.21e-04  5.36e-01  
  9  +4.8824e-01  +1.0102e+00  5.22e-01  1.48e-04  3.77e-02  1.88e-03  3.89e-04  3.37e-01  
 10  +4.8058e-01  +9.0378e-01  4.23e-01  1.19e-04  3.03e-02  6.85e-04  3.22e-04  5.14e-01  
 11  +4.7362e-01  +8.5338e-01  3.80e-01  1.02e-04  2.58e-02  5.02e-04  2.81e-04  2.59e-01  
 12  +4.4879e-01  +6.8895e-01  2.40e-01  5.86e-05  1.47e-02  5.14e-06  1.74e-04  8.24e-01  
 13  +4.2802e-01  +5.8594e-01  1.58e-01  3.59e-05  8.99e-03  3.53e-06  1.14e-04  4.04e-01  
 14  +4.1257e-01  +5.1543e-01  1.03e-01  2.23e-05  5.57e-03  2.56e-06  7.47e-05  4.15e-01  
 15  +4.0354e-01  +4.7584e-01  7.23e-02  1.52e-05  3.78e-03  2.40e-06  5.24e-05  4.92e-01  
 16  +3.9662e-01  +4.4658e-01  5.00e-02  1.03e-05  2.56e-03  1.73e-06  3.66e-05  3.54e-01  
 17  +3.9230e-01  +4.2859e-01  3.63e-02  7.36e-06  1.84e-03  1.31e-06  2.68e-05  3.17e-01  
 18  +3.8429e-01  +3.9535e-01  1.11e-02  2.20e-06  5.47e-04  4.79e-07  8.36e-06  8.12e-01  
 19  +3.8094e-01  +3.8211e-01  1.16e-03  2.29e-07  5.71e-05  6.12e-08  8.94e-07  9.90e-01  
 20  +3.8051e-01  +3.8052e-01  1.31e-05  2.58e-09  6.44e-07  6.88e-10  1.01e-08  9.90e-01  
 21  +3.8050e-01  +3.8050e-01  1.31e-07  2.59e-11  6.45e-09  6.90e-12  1.02e-10  9.90e-01  
 22  +3.8050e-01  +3.8050e-01  1.39e-09  2.74e-13  6.83e-11  7.33e-14  1.08e-12  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 246.9727ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:37 PM: Optimal value: 3.805e-01
(CVXPY) Oct 06 04:30:37 PM: Compilation took 9.313e-02 seconds
(CVXPY) Oct 06 04:30:37 PM: Solver (including time spent in interface) took 2.677e-01 seconds
Iteration: 40, Objective: 0.3805
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:37 PM: Your problem has 5396 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:38 PM: Finished problem compilation (took 9.415e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5396
  constraints   = 10396
  nnz(P)        = 0
  nnz(A)        = 90275
  cones (total) = 1
    : Nonnegative = 1,  numel = 10396

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7620e-01  +1.0997e+03  1.10e+03  4.49e-01  8.06e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2776e-01  +1.1737e+02  1.17e+02  1.75e-01  3.98e+01  1.82e-02  2.83e-01  9.76e-01  
  3  +5.0804e-01  +3.0369e+01  2.99e+01  1.20e-01  2.79e+01  5.25e-05  2.51e-01  3.98e-01  
  4  +5.0109e-01  +3.2509e+00  2.75e+00  1.91e-02  4.59e+00  6.47e-06  1.48e-01  6.48e-01  
  5  +5.0039e-01  +1.7689e+00  1.27e+00  8.53e-03  2.09e+00  5.37e-05  6.98e-02  8.92e-01  
  6  +4.9999e-01  +1.1202e+00  6.20e-01  2.94e-03  7.37e-01  1.20e-04  1.10e-02  8.69e-01  
  7  +4.9730e-01  +1.1044e+00  6.07e-01  3.65e-04  9.31e-02  1.25e-03  9.60e-04  9.14e-01  
  8  +4.9318e-01  +1.0570e+00  5.64e-01  1.94e-04  4.96e-02  1.94e-03  5.09e-04  5.13e-01  
  9  +4.8863e-01  +1.0061e+00  5.18e-01  1.49e-04  3.80e-02  1.83e-03  3.93e-04  3.22e-01  
 10  +4.8198e-01  +8.9560e-01  4.14e-01  1.25e-04  3.17e-02  2.71e-04  3.37e-04  6.56e-01  
 11  +4.7512e-01  +8.5223e-01  3.77e-01  1.04e-04  2.63e-02  2.21e-04  2.85e-04  2.64e-01  
 12  +4.4979e-01  +6.9410e-01  2.44e-01  5.94e-05  1.49e-02  2.82e-05  1.75e-04  7.73e-01  
 13  +4.2950e-01  +5.9377e-01  1.64e-01  3.74e-05  9.37e-03  1.62e-05  1.18e-04  3.90e-01  
 14  +4.1300e-01  +5.1825e-01  1.05e-01  2.29e-05  5.70e-03  9.29e-06  7.63e-05  4.23e-01  
 15  +4.0431e-01  +4.8029e-01  7.60e-02  1.60e-05  3.99e-03  6.00e-06  5.50e-05  4.76e-01  
 16  +3.9789e-01  +4.5305e-01  5.52e-02  1.14e-05  2.84e-03  4.24e-06  4.03e-05  3.22e-01  
 17  +3.9308e-01  +4.3286e-01  3.98e-02  8.11e-06  2.02e-03  2.99e-06  2.93e-05  3.27e-01  
 18  +3.8470e-01  +3.9754e-01  1.28e-02  2.56e-06  6.37e-04  7.96e-07  9.67e-06  9.05e-01  
 19  +3.8082e-01  +3.8249e-01  1.67e-03  3.30e-07  8.23e-05  9.46e-08  1.29e-06  9.54e-01  
 20  +3.8023e-01  +3.8032e-01  8.36e-05  1.65e-08  4.11e-06  4.45e-09  6.48e-08  9.90e-01  
 21  +3.8020e-01  +3.8020e-01  8.42e-07  1.66e-10  4.14e-08  4.47e-11  6.53e-10  9.90e-01  
 22  +3.8020e-01  +3.8020e-01  8.43e-09  1.66e-12  4.14e-10  4.48e-13  6.53e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 250.9278ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:38 PM: Optimal value: 3.802e-01
(CVXPY) Oct 06 04:30:38 PM: Compilation took 9.415e-02 seconds
(CVXPY) Oct 06 04:30:38 PM: Solver (including time spent in interface) took 2.668e-01 seconds
Iteration: 41, Objective: 0.3802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:38 PM: Your problem has 5397 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:38 PM: Finished problem compilation (took 9.439e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5397
  constraints   = 10397
  nnz(P)        = 0
  nnz(A)        = 90286
  cones (total) = 1
    : Nonnegative = 1,  numel = 10397

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7618e-01  +1.0997e+03  1.10e+03  4.49e-01  8.06e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2776e-01  +1.1736e+02  1.17e+02  1.75e-01  3.98e+01  1.82e-02  2.83e-01  9.76e-01  
  3  +5.0804e-01  +3.0368e+01  2.99e+01  1.20e-01  2.79e+01  5.25e-05  2.51e-01  3.98e-01  
  4  +5.0109e-01  +3.2509e+00  2.75e+00  1.91e-02  4.59e+00  6.47e-06  1.48e-01  6.48e-01  
  5  +5.0039e-01  +1.7663e+00  1.27e+00  8.51e-03  2.09e+00  5.41e-05  6.93e-02  8.96e-01  
  6  +4.9999e-01  +1.1326e+00  6.33e-01  2.99e-03  7.51e-01  1.22e-04  1.12e-02  8.59e-01  
  7  +4.9729e-01  +1.1157e+00  6.18e-01  3.72e-04  9.50e-02  1.25e-03  9.80e-04  9.14e-01  
  8  +4.9302e-01  +1.0644e+00  5.71e-01  1.95e-04  4.97e-02  1.97e-03  5.10e-04  5.23e-01  
  9  +4.8842e-01  +1.0102e+00  5.22e-01  1.50e-04  3.83e-02  1.81e-03  3.96e-04  3.24e-01  
 10  +4.8213e-01  +8.9851e-01  4.16e-01  1.27e-04  3.22e-02  2.27e-04  3.42e-04  6.63e-01  
 11  +4.7565e-01  +8.5763e-01  3.82e-01  1.06e-04  2.69e-02  1.90e-04  2.91e-04  2.54e-01  
 12  +4.5299e-01  +7.1419e-01  2.61e-01  6.45e-05  1.62e-02  4.43e-05  1.89e-04  6.94e-01  
 13  +4.3132e-01  +6.0398e-01  1.73e-01  3.95e-05  9.90e-03  2.46e-05  1.24e-04  4.01e-01  
 14  +4.1600e-01  +5.3286e-01  1.17e-01  2.56e-05  6.39e-03  1.46e-05  8.45e-05  3.93e-01  
 15  +4.0490e-01  +4.8365e-01  7.87e-02  1.66e-05  4.15e-03  8.36e-06  5.72e-05  4.86e-01  
 16  +3.9848e-01  +4.5603e-01  5.75e-02  1.19e-05  2.97e-03  5.83e-06  4.21e-05  3.31e-01  
 17  +3.9325e-01  +4.3375e-01  4.05e-02  8.25e-06  2.06e-03  3.87e-06  2.98e-05  3.83e-01  
 18  +3.8501e-01  +3.9865e-01  1.36e-02  2.72e-06  6.77e-04  8.78e-07  1.02e-05  9.43e-01  
 19  +3.8087e-01  +3.8267e-01  1.80e-03  3.55e-07  8.86e-05  1.04e-07  1.38e-06  9.52e-01  
 20  +3.8025e-01  +3.8039e-01  1.40e-04  2.76e-08  6.87e-06  7.45e-09  1.08e-07  9.86e-01  
 21  +3.8020e-01  +3.8020e-01  1.42e-06  2.80e-10  6.97e-08  7.56e-11  1.10e-09  9.90e-01  
 22  +3.8020e-01  +3.8020e-01  1.42e-08  2.80e-12  6.99e-10  7.58e-13  1.10e-11  9.90e-01  
 23  +3.8020e-01  +3.8020e-01  1.54e-10  3.04e-14  7.57e-12  8.25e-15  1.20e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 263.4664ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:38 PM: Optimal value: 3.802e-01
(CVXPY) Oct 06 04:30:38 PM: Compilation took 9.439e-02 seconds
(CVXPY) Oct 06 04:30:38 PM: Solver (including time spent in interface) took 2.831e-01 seconds
Iteration: 42, Objective: 0.3802
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:30:39 PM: Your problem has 5399 variables, 5000 constraints, and 0 parameters.
(CVXPY) Oct 06 04:30:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:30:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:30:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:30:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:30:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:30:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:30:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:30:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:30:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:30:39 PM: Finished problem compilation (took 9.436e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 5399
  constraints   = 10399
  nnz(P)        = 0
  nnz(A)        = 90305
  cones (total) = 1
    : Nonnegative = 1,  numel = 10399

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +5.0015e+03  5.00e+03  9.86e-01  1.24e+02  1.00e+00  1.00e+00   ------   
  1  +5.7618e-01  +1.0997e+03  1.10e+03  4.49e-01  8.06e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2775e-01  +1.1735e+02  1.17e+02  1.75e-01  3.98e+01  1.82e-02  2.83e-01  9.76e-01  
  3  +5.0804e-01  +3.0364e+01  2.99e+01  1.20e-01  2.79e+01  5.25e-05  2.51e-01  3.98e-01  
  4  +5.0109e-01  +3.2506e+00  2.75e+00  1.91e-02  4.59e+00  6.47e-06  1.48e-01  6.48e-01  
  5  +5.0039e-01  +1.7672e+00  1.27e+00  8.52e-03  2.09e+00  5.41e-05  6.93e-02  8.97e-01  
  6  +4.9999e-01  +1.1328e+00  6.33e-01  2.98e-03  7.48e-01  1.22e-04  1.11e-02  8.60e-01  
  7  +4.9728e-01  +1.1159e+00  6.19e-01  3.71e-04  9.47e-02  1.26e-03  9.77e-04  9.14e-01  
  8  +4.9292e-01  +1.0636e+00  5.71e-01  1.93e-04  4.92e-02  1.98e-03  5.05e-04  5.27e-01  
  9  +4.8855e-01  +1.0119e+00  5.23e-01  1.51e-04  3.86e-02  1.81e-03  3.99e-04  3.09e-01  
 10  +4.8196e-01  +8.9789e-01  4.16e-01  1.26e-04  3.19e-02  2.48e-04  3.39e-04  6.65e-01  
 11  +4.7452e-01  +8.5016e-01  3.76e-01  1.03e-04  2.62e-02  1.97e-04  2.84e-04  2.84e-01  
 12  +4.4732e-01  +6.8161e-01  2.34e-01  5.61e-05  1.41e-02  2.60e-05  1.67e-04  7.77e-01  
 13  +4.2796e-01  +5.8691e-01  1.59e-01  3.60e-05  9.01e-03  1.51e-05  1.14e-04  3.84e-01  
 14  +4.1287e-01  +5.1811e-01  1.05e-01  2.28e-05  5.70e-03  9.13e-06  7.63e-05  3.94e-01  
 15  +4.0365e-01  +4.7785e-01  7.42e-02  1.56e-05  3.88e-03  5.70e-06  5.36e-05  5.18e-01  
 16  +3.9690e-01  +4.4930e-01  5.24e-02  1.08e-05  2.69e-03  3.94e-06  3.83e-05  3.23e-01  
 17  +3.9256e-01  +4.3108e-01  3.85e-02  7.84e-06  1.95e-03  2.83e-06  2.84e-05  3.13e-01  
 18  +3.8425e-01  +3.9621e-01  1.20e-02  2.38e-06  5.94e-04  7.58e-07  9.03e-06  8.67e-01  
 19  +3.8104e-01  +3.8364e-01  2.60e-03  5.15e-07  1.28e-04  1.57e-07  2.00e-06  8.51e-01  
 20  +3.8015e-01  +3.8028e-01  1.28e-04  2.52e-08  6.27e-06  7.17e-09  9.88e-08  9.76e-01  
 21  +3.8010e-01  +3.8010e-01  1.29e-06  2.54e-10  6.33e-08  7.23e-11  9.97e-10  9.90e-01  
 22  +3.8010e-01  +3.8010e-01  1.29e-08  2.54e-12  6.34e-10  7.24e-13  9.98e-12  9.90e-01  
 23  +3.8010e-01  +3.8010e-01  1.41e-10  2.77e-14  6.91e-12  7.94e-15  1.09e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 260.8462ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:30:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:30:39 PM: Optimal value: 3.801e-01
(CVXPY) Oct 06 04:30:39 PM: Compilation took 9.436e-02 seconds
(CVXPY) Oct 06 04:30:39 PM: Solver (including time spent in interface) took 2.661e-01 seconds
FULL MODEL:
  Accruacy: 0.5964
  Our objective: 0.19280000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1488)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0018)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x9 = 1)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.001)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0022)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.0006)
 OR (x0 = 1 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0032)
 OR (x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.0044)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.001)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.0068)
 OR (x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.002)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 36.641021966934204
Best over terms:
  Our final objective: 0.14880000000000004
    Its accruacy: 0.5744
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.14880000000000004
  Highest accruacy: 0.5744
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 127 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 128 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 129 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

