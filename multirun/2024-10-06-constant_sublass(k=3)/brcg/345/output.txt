Command:
python test_script.py -s constant_subclass -d 9 -n 5000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1372
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 9.

Computed total variation: 0.2876
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:30 PM: Your problem has 2519 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:30 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2519
  constraints   = 5019
  nnz(P)        = 0
  nnz(A)        = 30019
  cones (total) = 1
    : Nonnegative = 1,  numel = 5019

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5008e+03  2.50e+03  9.80e-01  8.18e+01  1.00e+00  1.00e+00   ------   
  1  +5.8090e-01  +5.4279e+02  5.42e+02  4.28e-01  5.31e+01  3.78e-03  5.74e-01  5.86e-01  
  2  +5.3178e-01  +6.1640e+01  6.11e+01  1.65e-01  2.63e+01  1.63e-02  2.77e-01  9.32e-01  
  3  +5.0849e-01  +1.5945e+01  1.54e+01  1.06e-01  1.66e+01  4.44e-05  2.57e-01  2.92e-01  
  4  +5.0070e-01  +1.3923e+00  8.92e-01  8.69e-03  1.41e+00  6.53e-06  1.25e-01  8.32e-01  
  5  +5.0009e-01  +6.3112e-01  1.31e-01  1.24e-03  2.04e-01  1.07e-05  2.70e-02  9.78e-01  
  6  +4.9996e-01  +6.7933e-01  1.79e-01  9.13e-04  1.51e-01  9.91e-05  3.35e-03  9.07e-01  
  7  +4.9867e-01  +6.7402e-01  1.75e-01  1.46e-04  2.43e-02  7.12e-04  4.35e-04  8.71e-01  
  8  +4.9555e-01  +6.4435e-01  1.49e-01  8.65e-05  1.44e-02  7.11e-04  2.58e-04  5.63e-01  
  9  +4.8946e-01  +6.0167e-01  1.12e-01  6.97e-05  1.16e-02  3.32e-04  2.16e-04  3.02e-01  
 10  +4.7998e-01  +5.4599e-01  6.60e-02  3.69e-05  6.11e-03  7.35e-05  1.20e-04  6.87e-01  
 11  +4.7705e-01  +5.2901e-01  5.20e-02  2.78e-05  4.61e-03  7.54e-07  9.24e-05  9.32e-01  
 12  +4.6752e-01  +4.8375e-01  1.62e-02  7.81e-06  1.29e-03  4.54e-07  2.78e-05  7.60e-01  
 13  +4.6324e-01  +4.6521e-01  1.97e-03  8.45e-07  1.40e-04  1.71e-07  3.36e-06  9.90e-01  
 14  +4.6251e-01  +4.6254e-01  2.64e-05  1.08e-08  1.78e-06  2.28e-09  4.53e-08  9.88e-01  
 15  +4.6250e-01  +4.6250e-01  2.64e-07  1.08e-10  1.78e-08  2.28e-11  4.53e-10  9.90e-01  
 16  +4.6250e-01  +4.6250e-01  2.64e-09  1.08e-12  1.78e-10  2.40e-13  4.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 70.0824ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:30 PM: Optimal value: 4.625e-01
(CVXPY) Oct 06 04:16:30 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:16:30 PM: Solver (including time spent in interface) took 7.851e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:30 PM: Your problem has 2529 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:30 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2529
  constraints   = 5029
  nnz(P)        = 0
  nnz(A)        = 34492
  cones (total) = 1
    : Nonnegative = 1,  numel = 5029

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5013e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8076e-01  +5.4315e+02  5.43e+02  4.29e-01  5.49e+01  3.78e-03  5.75e-01  5.86e-01  
  2  +5.3148e-01  +6.1392e+01  6.09e+01  1.65e-01  2.70e+01  1.64e-02  2.77e-01  9.35e-01  
  3  +5.0835e-01  +1.5803e+01  1.53e+01  1.05e-01  1.70e+01  4.46e-05  2.56e-01  3.04e-01  
  4  +5.0084e-01  +1.6844e+00  1.18e+00  1.15e-02  1.93e+00  7.66e-06  1.39e-01  7.25e-01  
  5  +5.0008e-01  +7.5482e-01  2.55e-01  2.41e-03  4.08e-01  7.93e-06  4.99e-02  8.56e-01  
  6  +4.9994e-01  +7.3457e-01  2.35e-01  2.09e-03  3.54e-01  1.62e-05  1.57e-02  7.71e-01  
  7  +4.9748e-01  +6.9575e-01  1.98e-01  3.76e-04  6.46e-02  1.65e-04  1.10e-03  9.33e-01  
  8  +4.9596e-01  +6.8534e-01  1.89e-01  2.43e-04  4.18e-02  2.21e-04  6.95e-04  4.17e-01  
  9  +4.9403e-01  +6.6878e-01  1.75e-01  1.50e-04  2.58e-02  2.32e-04  4.20e-04  5.99e-01  
 10  +4.9317e-01  +6.6058e-01  1.67e-01  1.18e-04  2.03e-02  1.82e-04  3.28e-04  4.89e-01  
 11  +4.9197e-01  +6.4497e-01  1.53e-01  8.94e-05  1.54e-02  2.03e-05  2.48e-04  9.90e-01  
 12  +4.8737e-01  +6.2592e-01  1.39e-01  6.56e-05  1.13e-02  2.05e-05  1.83e-04  3.82e-01  
 13  +4.8283e-01  +6.0938e-01  1.27e-01  5.73e-05  9.83e-03  1.54e-05  1.62e-04  5.26e-01  
 14  +4.7158e-01  +5.6900e-01  9.74e-02  3.70e-05  6.34e-03  1.22e-05  1.07e-04  5.06e-01  
 15  +4.4459e-01  +4.7372e-01  2.91e-02  9.44e-06  1.61e-03  2.78e-06  2.90e-05  8.55e-01  
 16  +4.3247e-01  +4.3450e-01  2.04e-03  6.36e-07  1.08e-04  2.65e-07  2.02e-06  9.90e-01  
 17  +4.3151e-01  +4.3153e-01  2.06e-05  6.41e-09  1.09e-06  2.66e-09  2.04e-08  9.90e-01  
 18  +4.3150e-01  +4.3150e-01  2.06e-07  6.41e-11  1.09e-08  2.66e-11  2.05e-10  9.90e-01  
 19  +4.3150e-01  +4.3150e-01  2.06e-09  6.41e-13  1.09e-10  2.67e-13  2.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.9029ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:30 PM: Optimal value: 4.315e-01
(CVXPY) Oct 06 04:16:30 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:30 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 2, Objective: 0.4315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:30 PM: Your problem has 2539 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:30 PM: Finished problem compilation (took 3.165e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2539
  constraints   = 5039
  nnz(P)        = 0
  nnz(A)        = 35387
  cones (total) = 1
    : Nonnegative = 1,  numel = 5039

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5013e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8070e-01  +5.4310e+02  5.43e+02  4.30e-01  5.48e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3140e-01  +6.1319e+01  6.08e+01  1.65e-01  2.69e+01  1.64e-02  2.77e-01  9.36e-01  
  3  +5.0832e-01  +1.5765e+01  1.53e+01  1.05e-01  1.69e+01  4.47e-05  2.55e-01  3.07e-01  
  4  +5.0080e-01  +1.6258e+00  1.12e+00  1.10e-02  1.84e+00  7.58e-06  1.34e-01  7.50e-01  
  5  +5.0010e-01  +7.7644e-01  2.76e-01  2.62e-03  4.44e-01  8.41e-06  4.75e-02  8.51e-01  
  6  +4.9997e-01  +8.1715e-01  3.17e-01  2.67e-03  4.51e-01  2.05e-05  1.55e-02  8.24e-01  
  7  +4.9440e-01  +7.0044e-01  2.06e-01  1.57e-04  2.72e-02  3.92e-04  4.37e-04  9.74e-01  
  8  +4.8975e-01  +6.7637e-01  1.87e-01  1.04e-04  1.79e-02  4.28e-04  2.88e-04  4.13e-01  
  9  +4.8809e-01  +6.6890e-01  1.81e-01  9.14e-05  1.57e-02  3.29e-04  2.53e-04  3.38e-01  
 10  +4.8532e-01  +6.5472e-01  1.69e-01  8.28e-05  1.42e-02  2.53e-04  2.31e-04  2.35e-01  
 11  +4.7546e-01  +6.1420e-01  1.39e-01  5.63e-05  9.65e-03  2.14e-04  1.61e-04  3.55e-01  
 12  +4.7172e-01  +5.9634e-01  1.25e-01  5.16e-05  8.84e-03  1.14e-04  1.49e-04  3.60e-01  
 13  +4.5233e-01  +5.2229e-01  7.00e-02  2.49e-05  4.26e-03  4.65e-05  7.54e-05  6.09e-01  
 14  +4.3228e-01  +4.4956e-01  1.73e-02  5.72e-06  9.76e-04  6.81e-06  1.82e-05  8.24e-01  
 15  +4.2988e-01  +4.4163e-01  1.17e-02  3.83e-06  6.53e-04  4.03e-06  1.22e-05  4.61e-01  
 16  +4.2540e-01  +4.2668e-01  1.28e-03  4.12e-07  7.02e-05  3.74e-07  1.34e-06  9.16e-01  
 17  +4.2486e-01  +4.2487e-01  1.32e-05  4.24e-09  7.22e-07  3.78e-09  1.38e-08  9.90e-01  
 18  +4.2485e-01  +4.2485e-01  1.32e-07  4.24e-11  7.22e-09  3.79e-11  1.38e-10  9.90e-01  
 19  +4.2485e-01  +4.2485e-01  1.32e-09  4.24e-13  7.22e-11  3.79e-13  1.38e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 99.426ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:30 PM: Optimal value: 4.249e-01
(CVXPY) Oct 06 04:16:30 PM: Compilation took 3.165e-02 seconds
(CVXPY) Oct 06 04:16:30 PM: Solver (including time spent in interface) took 9.376e-02 seconds
Iteration: 3, Objective: 0.4249
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:30 PM: Your problem has 2549 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:30 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2549
  constraints   = 5049
  nnz(P)        = 0
  nnz(A)        = 36463
  cones (total) = 1
    : Nonnegative = 1,  numel = 5049

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5012e+03  2.50e+03  9.80e-01  8.47e+01  1.00e+00  1.00e+00   ------   
  1  +5.8053e-01  +5.4318e+02  5.43e+02  4.30e-01  5.48e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3125e-01  +6.1170e+01  6.06e+01  1.65e-01  2.68e+01  1.65e-02  2.76e-01  9.38e-01  
  3  +5.0828e-01  +1.5715e+01  1.52e+01  1.05e-01  1.69e+01  4.48e-05  2.54e-01  3.12e-01  
  4  +5.0090e-01  +1.8075e+00  1.31e+00  1.28e-02  2.13e+00  8.14e-06  1.42e-01  6.91e-01  
  5  +5.0018e-01  +9.3216e-01  4.32e-01  4.12e-03  6.96e-01  8.45e-06  6.84e-02  6.99e-01  
  6  +5.0002e-01  +8.8631e-01  3.86e-01  3.42e-03  5.80e-01  1.48e-05  2.35e-02  7.79e-01  
  7  +4.9697e-01  +8.1971e-01  3.23e-01  5.01e-04  8.65e-02  1.60e-04  1.47e-03  9.50e-01  
  8  +4.9063e-01  +7.5505e-01  2.64e-01  1.95e-04  3.37e-02  2.84e-04  5.57e-04  6.43e-01  
  9  +4.8123e-01  +6.8851e-01  2.07e-01  1.02e-04  1.77e-02  2.76e-04  2.90e-04  5.74e-01  
 10  +4.7994e-01  +6.7981e-01  2.00e-01  9.01e-05  1.55e-02  1.86e-04  2.56e-04  4.05e-01  
 11  +4.7637e-01  +6.5756e-01  1.81e-01  8.08e-05  1.39e-02  1.22e-04  2.31e-04  3.06e-01  
 12  +4.6258e-01  +5.8594e-01  1.23e-01  5.30e-05  9.08e-03  2.33e-05  1.58e-04  7.05e-01  
 13  +4.5102e-01  +5.4078e-01  8.98e-02  3.52e-05  6.03e-03  1.52e-05  1.08e-04  4.37e-01  
 14  +4.3729e-01  +4.8761e-01  5.03e-02  1.82e-05  3.11e-03  7.26e-06  5.79e-05  6.56e-01  
 15  +4.3503e-01  +4.7862e-01  4.36e-02  1.55e-05  2.64e-03  6.27e-06  4.93e-05  3.39e-01  
 16  +4.3324e-01  +4.7157e-01  3.83e-02  1.33e-05  2.27e-03  5.55e-06  4.25e-05  3.80e-01  
 17  +4.2796e-01  +4.5285e-01  2.49e-02  8.46e-06  1.44e-03  3.60e-06  2.75e-05  3.69e-01  
 18  +4.2171e-01  +4.3021e-01  8.50e-03  2.84e-06  4.84e-04  1.24e-06  9.42e-06  9.90e-01  
 19  +4.1829e-01  +4.1886e-01  5.64e-04  1.88e-07  3.20e-05  8.13e-08  6.32e-07  9.55e-01  
 20  +4.1805e-01  +4.1806e-01  5.71e-06  1.90e-09  3.24e-07  8.24e-10  6.41e-09  9.90e-01  
 21  +4.1805e-01  +4.1805e-01  5.71e-08  1.90e-11  3.24e-09  8.24e-12  6.41e-11  9.90e-01  
 22  +4.1805e-01  +4.1805e-01  5.71e-10  1.90e-13  3.24e-11  8.24e-14  6.41e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 110.7538ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:31 PM: Optimal value: 4.181e-01
(CVXPY) Oct 06 04:16:31 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:16:31 PM: Solver (including time spent in interface) took 1.252e-01 seconds
Iteration: 4, Objective: 0.4181
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:31 PM: Your problem has 2559 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:31 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2559
  constraints   = 5059
  nnz(P)        = 0
  nnz(A)        = 36950
  cones (total) = 1
    : Nonnegative = 1,  numel = 5059

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5012e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8039e-01  +5.4324e+02  5.43e+02  4.30e-01  5.48e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3113e-01  +6.1060e+01  6.05e+01  1.65e-01  2.67e+01  1.65e-02  2.76e-01  9.39e-01  
  3  +5.0825e-01  +1.5684e+01  1.52e+01  1.05e-01  1.68e+01  4.50e-05  2.54e-01  3.15e-01  
  4  +5.0089e-01  +1.8010e+00  1.30e+00  1.27e-02  2.12e+00  8.17e-06  1.41e-01  6.96e-01  
  5  +5.0018e-01  +9.3274e-01  4.33e-01  4.13e-03  6.97e-01  8.53e-06  6.54e-02  7.02e-01  
  6  +4.9996e-01  +9.0610e-01  4.06e-01  3.40e-03  5.76e-01  1.88e-05  1.87e-02  8.34e-01  
  7  +4.9437e-01  +8.0159e-01  3.07e-01  2.80e-04  4.84e-02  2.79e-04  7.91e-04  9.65e-01  
  8  +4.9107e-01  +7.7509e-01  2.84e-01  2.02e-04  3.50e-02  3.01e-04  5.67e-04  3.33e-01  
  9  +4.8992e-01  +7.2204e-01  2.32e-01  1.44e-04  2.48e-02  5.67e-06  4.00e-04  9.73e-01  
 10  +4.8883e-01  +7.1462e-01  2.26e-01  1.41e-04  2.44e-02  7.02e-06  3.93e-04  1.23e-01  
 11  +4.8025e-01  +6.7570e-01  1.95e-01  9.10e-05  1.57e-02  1.03e-05  2.57e-04  5.01e-01  
 12  +4.6449e-01  +6.0120e-01  1.37e-01  6.14e-05  1.05e-02  1.40e-05  1.83e-04  9.90e-01  
 13  +4.4047e-01  +5.0984e-01  6.94e-02  2.59e-05  4.42e-03  7.05e-06  8.14e-05  6.05e-01  
 14  +4.2668e-01  +4.5962e-01  3.29e-02  1.18e-05  2.00e-03  3.22e-06  3.87e-05  5.64e-01  
 15  +4.2088e-01  +4.3897e-01  1.81e-02  6.31e-06  1.07e-03  1.81e-06  2.12e-05  4.87e-01  
 16  +4.1909e-01  +4.3171e-01  1.26e-02  4.33e-06  7.37e-04  1.76e-06  1.46e-05  9.90e-01  
 17  +4.1578e-01  +4.2076e-01  4.98e-03  1.70e-06  2.89e-04  6.98e-07  5.82e-06  6.37e-01  
 18  +4.1369e-01  +4.1377e-01  8.21e-05  2.81e-08  4.78e-06  1.14e-08  9.71e-08  9.85e-01  
 19  +4.1365e-01  +4.1365e-01  8.21e-07  2.81e-10  4.78e-08  1.14e-10  9.71e-10  9.90e-01  
 20  +4.1365e-01  +4.1365e-01  8.21e-09  2.81e-12  4.78e-10  1.14e-12  9.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 108.3256ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:31 PM: Optimal value: 4.137e-01
(CVXPY) Oct 06 04:16:31 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:31 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 5, Objective: 0.4137
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:31 PM: Your problem has 2569 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:31 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2569
  constraints   = 5069
  nnz(P)        = 0
  nnz(A)        = 37302
  cones (total) = 1
    : Nonnegative = 1,  numel = 5069

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8025e-01  +5.4323e+02  5.43e+02  4.31e-01  5.47e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3104e-01  +6.0972e+01  6.04e+01  1.64e-01  2.66e+01  1.65e-02  2.75e-01  9.40e-01  
  3  +5.0823e-01  +1.5657e+01  1.51e+01  1.05e-01  1.68e+01  4.50e-05  2.53e-01  3.18e-01  
  4  +5.0090e-01  +1.8151e+00  1.31e+00  1.29e-02  2.14e+00  8.24e-06  1.40e-01  6.93e-01  
  5  +5.0018e-01  +9.3984e-01  4.40e-01  4.20e-03  7.08e-01  8.71e-06  6.41e-02  7.12e-01  
  6  +4.9987e-01  +9.1891e-01  4.19e-01  3.22e-03  5.48e-01  2.34e-05  1.50e-02  8.90e-01  
  7  +4.9322e-01  +8.2323e-01  3.30e-01  2.64e-04  4.57e-02  3.21e-04  7.36e-04  9.55e-01  
  8  +4.8948e-01  +7.9302e-01  3.04e-01  1.92e-04  3.32e-02  3.30e-04  5.32e-04  3.47e-01  
  9  +4.8735e-01  +7.6084e-01  2.73e-01  1.48e-04  2.55e-02  2.05e-04  4.09e-04  5.32e-01  
 10  +4.8522e-01  +7.4476e-01  2.60e-01  1.46e-04  2.52e-02  1.77e-04  4.08e-04  3.96e-02  
 11  +4.7058e-01  +6.6346e-01  1.93e-01  8.11e-05  1.39e-02  1.35e-04  2.32e-04  5.39e-01  
 12  +4.6451e-01  +6.2432e-01  1.60e-01  7.17e-05  1.23e-02  4.35e-05  2.18e-04  4.76e-01  
 13  +4.5096e-01  +5.6041e-01  1.09e-01  4.66e-05  7.95e-03  2.28e-05  1.45e-04  4.83e-01  
 14  +4.3882e-01  +5.1791e-01  7.91e-02  2.99e-05  5.10e-03  1.31e-05  9.44e-05  6.67e-01  
 15  +4.1895e-01  +4.4044e-01  2.15e-02  7.65e-06  1.30e-03  2.63e-06  2.58e-05  8.63e-01  
 16  +4.1771e-01  +4.3598e-01  1.83e-02  6.44e-06  1.10e-03  2.26e-06  2.18e-05  2.05e-01  
 17  +4.1427e-01  +4.2310e-01  8.83e-03  3.07e-06  5.22e-04  1.22e-06  1.06e-05  9.90e-01  
 18  +4.1097e-01  +4.1196e-01  9.91e-04  3.44e-07  5.86e-05  1.35e-07  1.21e-06  9.10e-01  
 19  +4.1056e-01  +4.1057e-01  1.23e-05  4.26e-09  7.25e-07  1.66e-09  1.50e-08  9.90e-01  
 20  +4.1055e-01  +4.1055e-01  1.23e-07  4.26e-11  7.25e-09  1.66e-11  1.50e-10  9.90e-01  
 21  +4.1055e-01  +4.1055e-01  1.23e-09  4.26e-13  7.25e-11  1.66e-13  1.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 114.0267ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:31 PM: Optimal value: 4.106e-01
(CVXPY) Oct 06 04:16:31 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:31 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 6, Objective: 0.4106
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:31 PM: Your problem has 2575 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:32 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2575
  constraints   = 5075
  nnz(P)        = 0
  nnz(A)        = 37727
  cones (total) = 1
    : Nonnegative = 1,  numel = 5075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5014e+03  2.50e+03  9.80e-01  8.46e+01  1.00e+00  1.00e+00   ------   
  1  +5.8011e-01  +5.4323e+02  5.43e+02  4.31e-01  5.46e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3090e-01  +6.0823e+01  6.03e+01  1.64e-01  2.65e+01  1.65e-02  2.75e-01  9.42e-01  
  3  +5.0819e-01  +1.5609e+01  1.51e+01  1.04e-01  1.67e+01  4.52e-05  2.52e-01  3.23e-01  
  4  +5.0099e-01  +1.9902e+00  1.49e+00  1.46e-02  2.42e+00  8.80e-06  1.47e-01  6.45e-01  
  5  +5.0017e-01  +9.7854e-01  4.78e-01  4.57e-03  7.70e-01  8.77e-06  6.82e-02  7.08e-01  
  6  +4.9948e-01  +9.7824e-01  4.79e-01  2.86e-03  4.88e-01  3.67e-05  1.05e-02  9.73e-01  
  7  +4.9052e-01  +8.7764e-01  3.87e-01  2.85e-04  4.93e-02  3.48e-04  7.92e-04  9.26e-01  
  8  +4.8061e-01  +7.9205e-01  3.11e-01  1.66e-04  2.87e-02  3.26e-04  4.69e-04  4.79e-01  
  9  +4.7971e-01  +7.6829e-01  2.89e-01  1.61e-04  2.77e-02  2.33e-04  4.55e-04  1.77e-01  
 10  +4.6731e-01  +6.7968e-01  2.12e-01  9.69e-05  1.66e-02  6.87e-05  2.81e-04  7.73e-01  
 11  +4.6301e-01  +6.5872e-01  1.96e-01  8.61e-05  1.48e-02  5.82e-05  2.53e-04  1.87e-01  
 12  +4.4263e-01  +5.5180e-01  1.09e-01  4.49e-05  7.66e-03  2.97e-06  1.41e-04  9.90e-01  
 13  +4.2059e-01  +4.6245e-01  4.19e-02  1.58e-05  2.69e-03  3.50e-06  5.31e-05  8.59e-01  
 14  +4.1057e-01  +4.2431e-01  1.37e-02  5.00e-06  8.50e-04  1.47e-06  1.74e-05  8.40e-01  
 15  +4.1048e-01  +4.2385e-01  1.34e-02  4.89e-06  8.32e-04  1.41e-06  1.72e-05  4.85e-02  
 16  +4.1045e-01  +4.2377e-01  1.33e-02  4.87e-06  8.28e-04  1.41e-06  1.71e-05  2.60e-02  
 17  +4.0993e-01  +4.2197e-01  1.20e-02  4.33e-06  7.37e-04  1.36e-06  1.51e-05  3.17e-01  
 18  +4.0687e-01  +4.1106e-01  4.19e-03  1.49e-06  2.54e-04  5.24e-07  5.29e-06  8.79e-01  
 19  +4.0519e-01  +4.0529e-01  1.00e-04  3.56e-08  6.06e-06  1.25e-08  1.28e-07  9.90e-01  
 20  +4.0515e-01  +4.0515e-01  1.01e-06  3.57e-10  6.06e-08  1.25e-10  1.28e-09  9.90e-01  
 21  +4.0515e-01  +4.0515e-01  1.01e-08  3.57e-12  6.06e-10  1.26e-12  1.28e-11  9.90e-01  
 22  +4.0515e-01  +4.0515e-01  1.01e-10  3.56e-14  6.06e-12  1.26e-14  1.29e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 124.2759ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:32 PM: Optimal value: 4.052e-01
(CVXPY) Oct 06 04:16:32 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:16:32 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 7, Objective: 0.4052
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:32 PM: Your problem has 2585 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:32 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2585
  constraints   = 5085
  nnz(P)        = 0
  nnz(A)        = 38309
  cones (total) = 1
    : Nonnegative = 1,  numel = 5085

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7998e-01  +5.4327e+02  5.43e+02  4.31e-01  5.45e+01  3.78e-03  5.76e-01  5.86e-01  
  2  +5.3078e-01  +6.0709e+01  6.02e+01  1.64e-01  2.64e+01  1.65e-02  2.74e-01  9.44e-01  
  3  +5.0816e-01  +1.5572e+01  1.51e+01  1.04e-01  1.66e+01  4.53e-05  2.51e-01  3.26e-01  
  4  +5.0103e-01  +2.0769e+00  1.58e+00  1.54e-02  2.56e+00  9.09e-06  1.50e-01  6.24e-01  
  5  +5.0013e-01  +9.4700e-01  4.47e-01  4.27e-03  7.20e-01  8.73e-06  6.37e-02  7.50e-01  
  6  +4.9893e-01  +1.0730e+00  5.74e-01  2.65e-03  4.54e-01  5.65e-05  8.67e-03  9.72e-01  
  7  +4.8991e-01  +9.5599e-01  4.66e-01  3.84e-04  6.64e-02  3.28e-04  1.07e-03  8.79e-01  
  8  +4.8403e-01  +8.2689e-01  3.43e-01  2.02e-04  3.49e-02  2.05e-04  5.62e-04  7.39e-01  
  9  +4.8242e-01  +7.8919e-01  3.07e-01  1.90e-04  3.28e-02  1.15e-04  5.38e-04  3.07e-01  
 10  +4.7320e-01  +7.2182e-01  2.49e-01  1.31e-04  2.25e-02  4.32e-05  3.77e-04  7.42e-01  
 11  +4.4578e-01  +5.8684e-01  1.41e-01  5.87e-05  1.00e-02  2.43e-05  1.81e-04  5.64e-01  
 12  +4.3922e-01  +5.5804e-01  1.19e-01  4.86e-05  8.30e-03  1.93e-05  1.54e-04  2.43e-01  
 13  +4.2986e-01  +5.1707e-01  8.72e-02  3.48e-05  5.93e-03  1.23e-05  1.13e-04  5.58e-01  
 14  +4.1228e-01  +4.4374e-01  3.15e-02  1.21e-05  2.06e-03  3.91e-06  4.24e-05  7.01e-01  
 15  +4.0699e-01  +4.2288e-01  1.59e-02  5.96e-06  1.01e-03  2.02e-06  2.12e-05  5.64e-01  
 16  +4.0666e-01  +4.2133e-01  1.47e-02  5.42e-06  9.21e-04  1.87e-06  1.92e-05  3.19e-01  
 17  +4.0577e-01  +4.1729e-01  1.15e-02  4.31e-06  7.33e-04  1.35e-06  1.56e-05  9.90e-01  
 18  +4.0346e-01  +4.0895e-01  5.49e-03  2.04e-06  3.46e-04  6.64e-07  7.42e-06  6.35e-01  
 19  +4.0318e-01  +4.0821e-01  5.03e-03  1.83e-06  3.11e-04  6.21e-07  6.60e-06  2.48e-01  
 20  +4.0130e-01  +4.0167e-01  3.71e-04  1.34e-07  2.28e-05  4.53e-08  4.89e-07  9.36e-01  
 21  +4.0115e-01  +4.0116e-01  3.75e-06  1.36e-09  2.30e-07  4.58e-10  4.96e-09  9.90e-01  
 22  +4.0115e-01  +4.0115e-01  3.75e-08  1.36e-11  2.30e-09  4.58e-12  4.96e-11  9.90e-01  
 23  +4.0115e-01  +4.0115e-01  3.75e-10  1.36e-13  2.30e-11  4.59e-14  4.96e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 123.3066ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:32 PM: Optimal value: 4.012e-01
(CVXPY) Oct 06 04:16:32 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:32 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 8, Objective: 0.4012
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:32 PM: Your problem has 2594 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:32 PM: Finished problem compilation (took 3.127e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2594
  constraints   = 5094
  nnz(P)        = 0
  nnz(A)        = 38595
  cones (total) = 1
    : Nonnegative = 1,  numel = 5094

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.45e+01  1.00e+00  1.00e+00   ------   
  1  +5.7976e-01  +5.4341e+02  5.43e+02  4.31e-01  5.45e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3064e-01  +6.0599e+01  6.01e+01  1.64e-01  2.63e+01  1.66e-02  2.74e-01  9.46e-01  
  3  +5.0813e-01  +1.5545e+01  1.50e+01  1.04e-01  1.66e+01  4.55e-05  2.50e-01  3.31e-01  
  4  +5.0091e-01  +1.8607e+00  1.36e+00  1.34e-02  2.22e+00  8.55e-06  1.38e-01  6.89e-01  
  5  +5.0016e-01  +9.6925e-01  4.69e-01  4.48e-03  7.54e-01  1.01e-05  5.56e-02  7.69e-01  
  6  +4.9845e-01  +1.1699e+00  6.71e-01  2.01e-03  3.46e-01  9.61e-05  5.94e-03  9.80e-01  
  7  +4.9003e-01  +1.0506e+00  5.61e-01  4.14e-04  7.15e-02  3.69e-04  1.14e-03  8.10e-01  
  8  +4.8298e-01  +9.1044e-01  4.27e-01  2.49e-04  4.29e-02  2.58e-04  6.92e-04  5.50e-01  
  9  +4.7958e-01  +7.9134e-01  3.12e-01  1.83e-04  3.15e-02  2.88e-05  5.18e-04  7.60e-01  
 10  +4.7155e-01  +7.4106e-01  2.70e-01  1.43e-04  2.46e-02  2.50e-05  4.14e-04  3.34e-01  
 11  +4.4319e-01  +5.8867e-01  1.45e-01  6.18e-05  1.05e-02  1.31e-05  1.92e-04  7.18e-01  
 12  +4.3164e-01  +5.3663e-01  1.05e-01  4.34e-05  7.39e-03  9.27e-06  1.41e-04  3.29e-01  
 13  +4.2285e-01  +4.9534e-01  7.25e-02  2.88e-05  4.90e-03  8.64e-06  9.65e-05  9.90e-01  
 14  +4.0985e-01  +4.4172e-01  3.19e-02  1.24e-05  2.11e-03  3.73e-06  4.39e-05  6.29e-01  
 15  +4.0452e-01  +4.2054e-01  1.60e-02  6.06e-06  1.03e-03  1.93e-06  2.19e-05  5.77e-01  
 16  +4.0399e-01  +4.1838e-01  1.44e-02  5.39e-06  9.13e-04  1.75e-06  1.95e-05  2.49e-01  
 17  +4.0306e-01  +4.1464e-01  1.16e-02  4.40e-06  7.46e-04  1.32e-06  1.63e-05  5.28e-01  
 18  +4.0167e-01  +4.0918e-01  7.51e-03  2.84e-06  4.81e-04  8.69e-07  1.06e-05  6.21e-01  
 19  +4.0082e-01  +4.0609e-01  5.27e-03  1.98e-06  3.35e-04  6.20e-07  7.33e-06  4.50e-01  
 20  +3.9986e-01  +4.0285e-01  2.98e-03  1.10e-06  1.87e-04  3.53e-07  4.08e-06  5.73e-01  
 21  +3.9872e-01  +3.9878e-01  5.98e-05  2.20e-08  3.73e-06  6.96e-09  8.23e-08  9.82e-01  
 22  +3.9870e-01  +3.9870e-01  5.98e-07  2.20e-10  3.73e-08  6.96e-11  8.24e-10  9.90e-01  
 23  +3.9870e-01  +3.9870e-01  5.98e-09  2.20e-12  3.73e-10  6.98e-13  8.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.1355ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:32 PM: Optimal value: 3.987e-01
(CVXPY) Oct 06 04:16:32 PM: Compilation took 3.127e-02 seconds
(CVXPY) Oct 06 04:16:32 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 9, Objective: 0.3987
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:33 PM: Your problem has 2604 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:33 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2604
  constraints   = 5104
  nnz(P)        = 0
  nnz(A)        = 38886
  cones (total) = 1
    : Nonnegative = 1,  numel = 5104

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.44e+01  1.00e+00  1.00e+00   ------   
  1  +5.7955e-01  +5.4347e+02  5.43e+02  4.32e-01  5.44e+01  3.78e-03  5.76e-01  5.85e-01  
  2  +5.3051e-01  +6.0463e+01  5.99e+01  1.63e-01  2.62e+01  1.66e-02  2.73e-01  9.47e-01  
  3  +5.0811e-01  +1.5521e+01  1.50e+01  1.04e-01  1.65e+01  4.57e-05  2.49e-01  3.34e-01  
  4  +5.0100e-01  +2.0280e+00  1.53e+00  1.50e-02  2.48e+00  9.04e-06  1.45e-01  6.42e-01  
  5  +5.0014e-01  +9.8008e-01  4.80e-01  4.59e-03  7.72e-01  9.73e-06  5.98e-02  7.70e-01  
  6  +4.9840e-01  +1.1108e+00  6.12e-01  2.18e-03  3.74e-01  8.09e-05  6.63e-03  9.60e-01  
  7  +4.9028e-01  +1.0160e+00  5.26e-01  4.65e-04  8.02e-02  3.21e-04  1.29e-03  8.08e-01  
  8  +4.8265e-01  +9.2818e-01  4.46e-01  2.79e-04  4.81e-02  3.36e-04  7.78e-04  4.66e-01  
  9  +4.7656e-01  +8.3205e-01  3.55e-01  2.00e-04  3.43e-02  1.80e-04  5.65e-04  5.15e-01  
 10  +4.5543e-01  +6.8253e-01  2.27e-01  1.03e-04  1.77e-02  8.88e-05  3.09e-04  6.02e-01  
 11  +4.2310e-01  +5.0994e-01  8.68e-02  3.59e-05  6.11e-03  1.93e-05  1.19e-04  6.85e-01  
 12  +4.2048e-01  +4.9913e-01  7.87e-02  3.20e-05  5.43e-03  1.64e-05  1.07e-04  2.25e-01  
 13  +4.0331e-01  +4.2470e-01  2.14e-02  8.37e-06  1.42e-03  2.60e-06  3.04e-05  9.40e-01  
 14  +4.0037e-01  +4.1363e-01  1.33e-02  5.05e-06  8.55e-04  1.63e-06  1.86e-05  4.77e-01  
 15  +4.0001e-01  +4.1228e-01  1.23e-02  4.62e-06  7.82e-04  1.52e-06  1.70e-05  1.21e-01  
 16  +3.9922e-01  +4.0857e-01  9.35e-03  3.56e-06  6.02e-04  1.08e-06  1.32e-05  9.90e-01  
 17  +3.9743e-01  +4.0231e-01  4.88e-03  1.82e-06  3.08e-04  5.76e-07  6.83e-06  5.43e-01  
 18  +3.9556e-01  +3.9572e-01  1.60e-04  5.95e-08  1.01e-05  1.84e-08  2.27e-07  9.90e-01  
 19  +3.9550e-01  +3.9550e-01  1.60e-06  5.96e-10  1.01e-07  1.85e-10  2.27e-09  9.90e-01  
 20  +3.9550e-01  +3.9550e-01  1.60e-08  5.96e-12  1.01e-09  1.85e-12  2.28e-11  9.90e-01  
 21  +3.9550e-01  +3.9550e-01  1.60e-10  5.96e-14  1.01e-11  1.85e-14  2.28e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 119.8564ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:33 PM: Optimal value: 3.955e-01
(CVXPY) Oct 06 04:16:33 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:33 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 10, Objective: 0.3955
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:33 PM: Your problem has 2614 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:33 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2614
  constraints   = 5114
  nnz(P)        = 0
  nnz(A)        = 39176
  cones (total) = 1
    : Nonnegative = 1,  numel = 5114

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.80e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7936e-01  +5.4358e+02  5.43e+02  4.32e-01  5.43e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.3039e-01  +6.0366e+01  5.98e+01  1.63e-01  2.60e+01  1.67e-02  2.73e-01  9.49e-01  
  3  +5.0809e-01  +1.5499e+01  1.50e+01  1.03e-01  1.65e+01  4.59e-05  2.48e-01  3.37e-01  
  4  +5.0097e-01  +1.9656e+00  1.46e+00  1.44e-02  2.38e+00  8.91e-06  1.41e-01  6.62e-01  
  5  +5.0016e-01  +1.0038e+00  5.04e-01  4.82e-03  8.09e-01  1.03e-05  5.76e-02  7.70e-01  
  6  +4.9789e-01  +1.2130e+00  7.15e-01  1.88e-03  3.24e-01  1.10e-04  5.44e-03  9.89e-01  
  7  +4.8863e-01  +1.0851e+00  5.96e-01  4.38e-04  7.57e-02  3.66e-04  1.20e-03  7.81e-01  
  8  +4.7917e-01  +9.6680e-01  4.88e-01  2.71e-04  4.66e-02  3.47e-04  7.54e-04  4.22e-01  
  9  +4.7652e-01  +8.6647e-01  3.90e-01  2.16e-04  3.71e-02  1.45e-04  6.08e-04  4.92e-01  
 10  +4.4824e-01  +6.5206e-01  2.04e-01  8.81e-05  1.50e-02  5.82e-05  2.66e-04  6.90e-01  
 11  +4.2139e-01  +5.1159e-01  9.02e-02  3.74e-05  6.35e-03  1.73e-05  1.25e-04  6.29e-01  
 12  +4.1603e-01  +4.8780e-01  7.18e-02  2.89e-05  4.91e-03  1.20e-05  9.86e-05  4.58e-01  
 13  +4.0431e-01  +4.3704e-01  3.27e-02  1.27e-05  2.16e-03  4.93e-06  4.58e-05  6.84e-01  
 14  +3.9691e-01  +4.0589e-01  8.98e-03  3.42e-06  5.78e-04  1.16e-06  1.28e-05  9.46e-01  
 15  +3.9687e-01  +4.0586e-01  8.99e-03  3.38e-06  5.72e-04  1.16e-06  1.26e-05  5.44e-02  
 16  +3.9538e-01  +4.0005e-01  4.67e-03  1.76e-06  2.97e-04  5.48e-07  6.63e-06  9.90e-01  
 17  +3.9360e-01  +3.9385e-01  2.50e-04  9.34e-08  1.58e-05  2.72e-08  3.58e-07  9.90e-01  
 18  +3.9350e-01  +3.9350e-01  2.64e-06  9.86e-10  1.67e-07  2.87e-10  3.78e-09  9.89e-01  
 19  +3.9350e-01  +3.9350e-01  2.64e-08  9.86e-12  1.67e-09  2.87e-12  3.78e-11  9.90e-01  
 20  +3.9350e-01  +3.9350e-01  2.64e-10  9.86e-14  1.67e-11  2.90e-14  3.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 132.8156ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:33 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:33 PM: Optimal value: 3.935e-01
(CVXPY) Oct 06 04:16:33 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:33 PM: Solver (including time spent in interface) took 1.417e-01 seconds
Iteration: 11, Objective: 0.3935
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:33 PM: Your problem has 2624 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:33 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:33 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:33 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:33 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:33 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:33 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:33 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:33 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:33 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:33 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:33 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:33 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2624
  constraints   = 5124
  nnz(P)        = 0
  nnz(A)        = 39518
  cones (total) = 1
    : Nonnegative = 1,  numel = 5124

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.43e+01  1.00e+00  1.00e+00   ------   
  1  +5.7927e-01  +5.4357e+02  5.43e+02  4.32e-01  5.42e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.3032e-01  +6.0295e+01  5.98e+01  1.63e-01  2.59e+01  1.67e-02  2.73e-01  9.50e-01  
  3  +5.0808e-01  +1.5477e+01  1.50e+01  1.03e-01  1.64e+01  4.59e-05  2.48e-01  3.40e-01  
  4  +5.0096e-01  +1.9605e+00  1.46e+00  1.44e-02  2.37e+00  8.93e-06  1.40e-01  6.65e-01  
  5  +5.0018e-01  +1.0327e+00  5.32e-01  5.10e-03  8.56e-01  1.04e-05  5.86e-02  7.48e-01  
  6  +4.9821e-01  +1.1226e+00  6.24e-01  1.85e-03  3.19e-01  9.40e-05  5.41e-03  9.76e-01  
  7  +4.8939e-01  +1.0215e+00  5.32e-01  4.05e-04  7.00e-02  3.51e-04  1.11e-03  7.98e-01  
  8  +4.8071e-01  +9.2919e-01  4.48e-01  2.57e-04  4.42e-02  3.40e-04  7.11e-04  4.24e-01  
  9  +4.7478e-01  +8.3292e-01  3.58e-01  1.95e-04  3.35e-02  1.50e-04  5.49e-04  5.18e-01  
 10  +4.4873e-01  +6.5799e-01  2.09e-01  9.29e-05  1.58e-02  7.07e-05  2.80e-04  5.95e-01  
 11  +4.2478e-01  +5.3176e-01  1.07e-01  4.50e-05  7.64e-03  1.82e-05  1.48e-04  7.13e-01  
 12  +4.2001e-01  +5.1108e-01  9.11e-02  3.74e-05  6.35e-03  1.50e-05  1.25e-04  2.38e-01  
 13  +4.0848e-01  +4.6049e-01  5.20e-02  2.06e-05  3.49e-03  7.80e-06  7.20e-05  5.70e-01  
 14  +3.9709e-01  +4.1304e-01  1.59e-02  6.13e-06  1.04e-03  2.15e-06  2.27e-05  7.93e-01  
 15  +3.9380e-01  +3.9990e-01  6.10e-03  2.32e-06  3.92e-04  7.85e-07  8.80e-06  7.43e-01  
 16  +3.9172e-01  +3.9203e-01  3.08e-04  1.16e-07  1.97e-05  3.76e-08  4.50e-07  9.66e-01  
 17  +3.9160e-01  +3.9160e-01  3.11e-06  1.18e-09  1.99e-07  3.80e-10  4.56e-09  9.90e-01  
 18  +3.9160e-01  +3.9160e-01  3.11e-08  1.18e-11  1.99e-09  3.80e-12  4.56e-11  9.90e-01  
 19  +3.9160e-01  +3.9160e-01  3.12e-10  1.18e-13  1.99e-11  3.83e-14  4.58e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 113.3467ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:34 PM: Optimal value: 3.916e-01
(CVXPY) Oct 06 04:16:34 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:34 PM: Solver (including time spent in interface) took 1.094e-01 seconds
Iteration: 12, Objective: 0.3916
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:34 PM: Your problem has 2634 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:34 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2634
  constraints   = 5134
  nnz(P)        = 0
  nnz(A)        = 39754
  cones (total) = 1
    : Nonnegative = 1,  numel = 5134

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.80e-01  8.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.7918e-01  +5.4350e+02  5.43e+02  4.33e-01  5.41e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.3024e-01  +6.0208e+01  5.97e+01  1.62e-01  2.58e+01  1.67e-02  2.72e-01  9.51e-01  
  3  +5.0806e-01  +1.5448e+01  1.49e+01  1.03e-01  1.63e+01  4.60e-05  2.47e-01  3.43e-01  
  4  +5.0094e-01  +1.9176e+00  1.42e+00  1.40e-02  2.31e+00  8.86e-06  1.37e-01  6.79e-01  
  5  +5.0019e-01  +1.0462e+00  5.46e-01  5.23e-03  8.76e-01  1.10e-05  5.54e-02  7.56e-01  
  6  +4.9786e-01  +1.1876e+00  6.90e-01  1.71e-03  2.95e-01  1.15e-04  4.89e-03  9.71e-01  
  7  +4.8813e-01  +1.0504e+00  5.62e-01  3.90e-04  6.74e-02  3.78e-04  1.06e-03  7.88e-01  
  8  +4.7950e-01  +9.5922e-01  4.80e-01  2.64e-04  4.54e-02  3.52e-04  7.28e-04  3.73e-01  
  9  +4.7212e-01  +8.7081e-01  3.99e-01  2.06e-04  3.53e-02  2.33e-04  5.80e-04  3.42e-01  
 10  +4.4336e-01  +6.3345e-01  1.90e-01  8.45e-05  1.44e-02  3.23e-05  2.59e-04  7.86e-01  
 11  +4.3285e-01  +5.8151e-01  1.49e-01  6.41e-05  1.09e-02  2.28e-05  2.04e-04  3.52e-01  
 12  +4.2609e-01  +5.4867e-01  1.23e-01  5.14e-05  8.72e-03  1.71e-05  1.68e-04  4.31e-01  
 13  +4.1406e-01  +4.9136e-01  7.73e-02  3.11e-05  5.27e-03  9.11e-06  1.06e-04  9.24e-01  
 14  +3.9818e-01  +4.2491e-01  2.67e-02  1.04e-05  1.76e-03  2.98e-06  3.85e-05  7.01e-01  
 15  +3.9095e-01  +3.9535e-01  4.40e-03  1.69e-06  2.85e-04  5.05e-07  6.52e-06  9.90e-01  
 16  +3.8933e-01  +3.8942e-01  8.71e-05  3.34e-08  5.63e-06  9.70e-09  1.31e-07  9.89e-01  
 17  +3.8930e-01  +3.8930e-01  8.71e-07  3.34e-10  5.63e-08  9.70e-11  1.31e-09  9.90e-01  
 18  +3.8930e-01  +3.8930e-01  8.71e-09  3.34e-12  5.63e-10  9.70e-13  1.31e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 109.9488ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:34 PM: Optimal value: 3.893e-01
(CVXPY) Oct 06 04:16:34 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:34 PM: Solver (including time spent in interface) took 1.099e-01 seconds
Iteration: 13, Objective: 0.3893
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:34 PM: Your problem has 2644 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:34 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:34 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:34 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:34 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:34 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:34 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:34 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:34 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:34 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:34 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:34 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:34 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2644
  constraints   = 5144
  nnz(P)        = 0
  nnz(A)        = 39986
  cones (total) = 1
    : Nonnegative = 1,  numel = 5144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7884e-01  +5.4377e+02  5.43e+02  4.33e-01  5.41e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.3006e-01  +6.0094e+01  5.96e+01  1.62e-01  2.57e+01  1.68e-02  2.72e-01  9.54e-01  
  3  +5.0803e-01  +1.5422e+01  1.49e+01  1.03e-01  1.63e+01  4.64e-05  2.46e-01  3.49e-01  
  4  +5.0082e-01  +1.6930e+00  1.19e+00  1.18e-02  1.95e+00  8.30e-06  1.24e-01  7.54e-01  
  5  +5.0023e-01  +1.0515e+00  5.51e-01  5.25e-03  8.78e-01  1.26e-05  4.33e-02  7.52e-01  
  6  +4.9802e-01  +1.3667e+00  8.69e-01  1.55e-03  2.68e-01  1.51e-04  4.23e-03  9.90e-01  
  7  +4.9038e-01  +1.1870e+00  6.97e-01  4.79e-04  8.29e-02  3.33e-04  1.29e-03  7.08e-01  
  8  +4.8551e-01  +1.0786e+00  5.93e-01  3.54e-04  6.11e-02  2.57e-04  9.58e-04  3.79e-01  
  9  +4.8071e-01  +9.5664e-01  4.76e-01  2.73e-04  4.70e-02  1.38e-04  7.49e-04  4.49e-01  
 10  +4.7539e-01  +8.8006e-01  4.05e-01  2.22e-04  3.82e-02  8.71e-05  6.21e-04  3.93e-01  
 11  +4.7467e-01  +8.6300e-01  3.88e-01  2.19e-04  3.76e-02  7.41e-05  6.15e-04  1.11e-01  
 12  +4.5641e-01  +7.3871e-01  2.82e-01  1.36e-04  2.32e-02  5.29e-05  3.99e-04  3.95e-01  
 13  +4.3255e-01  +5.9914e-01  1.67e-01  7.35e-05  1.25e-02  2.62e-05  2.33e-04  4.69e-01  
 14  +4.2655e-01  +5.6800e-01  1.41e-01  6.10e-05  1.03e-02  2.13e-05  1.98e-04  2.48e-01  
 15  +4.1346e-01  +5.0188e-01  8.84e-02  3.67e-05  6.21e-03  1.19e-05  1.25e-04  5.40e-01  
 16  +4.0274e-01  +4.5299e-01  5.03e-02  2.03e-05  3.42e-03  6.56e-06  7.27e-05  4.80e-01  
 17  +3.9226e-01  +4.0675e-01  1.45e-02  5.65e-06  9.53e-04  1.77e-06  2.14e-05  8.44e-01  
 18  +3.8848e-01  +3.9143e-01  2.95e-03  1.14e-06  1.92e-04  3.41e-07  4.44e-06  9.27e-01  
 19  +3.8743e-01  +3.8750e-01  7.25e-05  2.80e-08  4.72e-06  8.04e-09  1.10e-07  9.90e-01  
 20  +3.8740e-01  +3.8740e-01  7.25e-07  2.80e-10  4.72e-08  8.04e-11  1.10e-09  9.90e-01  
 21  +3.8740e-01  +3.8740e-01  7.25e-09  2.80e-12  4.72e-10  8.05e-13  1.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 125.5986ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:34 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:34 PM: Optimal value: 3.874e-01
(CVXPY) Oct 06 04:16:34 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:34 PM: Solver (including time spent in interface) took 1.254e-01 seconds
Iteration: 14, Objective: 0.3874
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:35 PM: Your problem has 2653 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:35 PM: Finished problem compilation (took 3.134e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2653
  constraints   = 5153
  nnz(P)        = 0
  nnz(A)        = 40303
  cones (total) = 1
    : Nonnegative = 1,  numel = 5153

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.41e+01  1.00e+00  1.00e+00   ------   
  1  +5.7870e-01  +5.4378e+02  5.43e+02  4.34e-01  5.40e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2995e-01  +5.9978e+01  5.94e+01  1.62e-01  2.56e+01  1.68e-02  2.71e-01  9.55e-01  
  3  +5.0800e-01  +1.5390e+01  1.49e+01  1.02e-01  1.62e+01  4.65e-05  2.45e-01  3.52e-01  
  4  +5.0080e-01  +1.6624e+00  1.16e+00  1.15e-02  1.90e+00  8.27e-06  1.21e-01  7.67e-01  
  5  +5.0030e-01  +1.1366e+00  6.36e-01  6.04e-03  1.01e+00  1.33e-05  4.56e-02  7.23e-01  
  6  +4.9858e-01  +1.3446e+00  8.46e-01  1.71e-03  2.96e-01  1.24e-04  4.66e-03  9.90e-01  
  7  +4.9174e-01  +1.2014e+00  7.10e-01  4.92e-04  8.51e-02  3.22e-04  1.30e-03  7.31e-01  
  8  +4.8540e-01  +1.0771e+00  5.92e-01  3.51e-04  6.05e-02  2.54e-04  9.44e-04  3.80e-01  
  9  +4.8012e-01  +9.4094e-01  4.61e-01  2.70e-04  4.65e-02  1.09e-04  7.41e-04  5.08e-01  
 10  +4.6924e-01  +8.5100e-01  3.82e-01  1.98e-04  3.39e-02  8.57e-05  5.58e-04  3.32e-01  
 11  +4.5183e-01  +6.8972e-01  2.38e-01  1.20e-04  2.05e-02  3.94e-06  3.62e-04  9.90e-01  
 12  +4.2882e-01  +5.7630e-01  1.47e-01  6.64e-05  1.13e-02  3.75e-06  2.15e-04  4.75e-01  
 13  +4.1917e-01  +5.3359e-01  1.14e-01  4.96e-05  8.39e-03  4.56e-06  1.67e-04  3.64e-01  
 14  +3.9742e-01  +4.3750e-01  4.01e-02  1.62e-05  2.73e-03  3.88e-06  5.94e-05  9.50e-01  
 15  +3.8873e-01  +4.0266e-01  1.39e-02  5.51e-06  9.30e-04  1.36e-06  2.14e-05  6.94e-01  
 16  +3.8495e-01  +3.8749e-01  2.54e-03  9.98e-07  1.68e-04  2.73e-07  3.96e-06  9.90e-01  
 17  +3.8401e-01  +3.8404e-01  2.94e-05  1.16e-08  1.95e-06  3.15e-09  4.63e-08  9.88e-01  
 18  +3.8400e-01  +3.8400e-01  2.94e-07  1.16e-10  1.95e-08  3.15e-11  4.63e-10  9.90e-01  
 19  +3.8400e-01  +3.8400e-01  2.94e-09  1.16e-12  1.95e-10  3.15e-13  4.63e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 124.7217ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:35 PM: Optimal value: 3.840e-01
(CVXPY) Oct 06 04:16:35 PM: Compilation took 3.134e-02 seconds
(CVXPY) Oct 06 04:16:35 PM: Solver (including time spent in interface) took 1.253e-01 seconds
Iteration: 15, Objective: 0.3840
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:35 PM: Your problem has 2663 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:35 PM: Finished problem compilation (took 3.132e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2663
  constraints   = 5163
  nnz(P)        = 0
  nnz(A)        = 40743
  cones (total) = 1
    : Nonnegative = 1,  numel = 5163

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.80e-01  8.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.7860e-01  +5.4378e+02  5.43e+02  4.34e-01  5.39e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2987e-01  +5.9902e+01  5.94e+01  1.62e-01  2.55e+01  1.68e-02  2.71e-01  9.56e-01  
  3  +5.0799e-01  +1.5373e+01  1.49e+01  1.02e-01  1.62e+01  4.66e-05  2.45e-01  3.54e-01  
  4  +5.0087e-01  +1.7919e+00  1.29e+00  1.28e-02  2.11e+00  8.66e-06  1.27e-01  7.25e-01  
  5  +5.0026e-01  +1.1293e+00  6.29e-01  6.01e-03  1.00e+00  1.23e-05  4.96e-02  7.10e-01  
  6  +4.9709e-01  +1.3541e+00  8.57e-01  1.31e-03  2.26e-01  1.74e-04  3.54e-03  9.88e-01  
  7  +4.8709e-01  +1.1369e+00  6.50e-01  4.02e-04  6.95e-02  3.46e-04  1.08e-03  7.17e-01  
  8  +4.8179e-01  +1.0525e+00  5.71e-01  3.16e-04  5.45e-02  2.73e-04  8.53e-04  3.26e-01  
  9  +4.7564e-01  +9.6193e-01  4.86e-01  2.56e-04  4.40e-02  1.90e-04  7.03e-04  3.15e-01  
 10  +4.6140e-01  +8.3107e-01  3.70e-01  1.77e-04  3.02e-02  1.20e-04  5.05e-04  3.90e-01  
 11  +4.4742e-01  +7.1129e-01  2.64e-01  1.25e-04  2.13e-02  5.13e-05  3.77e-04  5.09e-01  
 12  +4.2264e-01  +5.6688e-01  1.44e-01  6.29e-05  1.06e-02  2.25e-05  2.05e-04  5.40e-01  
 13  +4.1294e-01  +5.1632e-01  1.03e-01  4.38e-05  7.40e-03  1.46e-05  1.48e-04  4.64e-01  
 14  +3.9536e-01  +4.3277e-01  3.74e-02  1.52e-05  2.57e-03  4.70e-06  5.57e-05  7.13e-01  
 15  +3.8843e-01  +4.0251e-01  1.41e-02  5.63e-06  9.49e-04  1.72e-06  2.14e-05  6.98e-01  
 16  +3.8481e-01  +3.8702e-01  2.20e-03  8.76e-07  1.48e-04  2.42e-07  3.42e-06  9.90e-01  
 17  +3.8401e-01  +3.8403e-01  2.45e-05  9.74e-09  1.64e-06  2.68e-09  3.83e-08  9.89e-01  
 18  +3.8400e-01  +3.8400e-01  2.45e-07  9.75e-11  1.64e-08  2.69e-11  3.83e-10  9.90e-01  
 19  +3.8400e-01  +3.8400e-01  2.46e-09  9.76e-13  1.65e-10  2.69e-13  3.84e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 121.0262ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:35 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:35 PM: Optimal value: 3.840e-01
(CVXPY) Oct 06 04:16:35 PM: Compilation took 3.132e-02 seconds
(CVXPY) Oct 06 04:16:35 PM: Solver (including time spent in interface) took 1.353e-01 seconds
Iteration: 16, Objective: 0.3840
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:35 PM: Your problem has 2673 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:35 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:35 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:35 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:35 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:35 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:35 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:35 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:35 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:35 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:35 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:35 PM: Finished problem compilation (took 3.128e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:35 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2673
  constraints   = 5173
  nnz(P)        = 0
  nnz(A)        = 40952
  cones (total) = 1
    : Nonnegative = 1,  numel = 5173

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5013e+03  2.50e+03  9.80e-01  8.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.7839e-01  +5.4382e+02  5.43e+02  4.34e-01  5.38e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2978e-01  +5.9819e+01  5.93e+01  1.61e-01  2.54e+01  1.68e-02  2.70e-01  9.57e-01  
  3  +5.0798e-01  +1.5355e+01  1.48e+01  1.02e-01  1.61e+01  4.67e-05  2.44e-01  3.57e-01  
  4  +5.0090e-01  +1.8420e+00  1.34e+00  1.33e-02  2.19e+00  8.84e-06  1.29e-01  7.11e-01  
  5  +5.0031e-01  +1.2042e+00  7.04e-01  6.75e-03  1.12e+00  1.22e-05  5.58e-02  6.66e-01  
  6  +4.9804e-01  +1.4060e+00  9.08e-01  1.84e-03  3.18e-01  1.23e-04  5.06e-03  9.90e-01  
  7  +4.8931e-01  +1.2249e+00  7.36e-01  4.98e-04  8.61e-02  3.22e-04  1.33e-03  7.44e-01  
  8  +4.7901e-01  +1.0330e+00  5.54e-01  3.15e-04  5.43e-02  2.20e-04  8.63e-04  4.64e-01  
  9  +4.7712e-01  +9.7942e-01  5.02e-01  2.92e-04  5.01e-02  1.61e-04  8.04e-04  2.06e-01  
 10  +4.6393e-01  +8.5716e-01  3.93e-01  1.96e-04  3.35e-02  1.13e-04  5.58e-04  4.23e-01  
 11  +4.6137e-01  +8.1174e-01  3.50e-01  1.82e-04  3.11e-02  6.91e-05  5.25e-04  3.34e-01  
 12  +4.3596e-01  +6.4896e-01  2.13e-01  9.65e-05  1.64e-02  3.72e-05  2.99e-04  4.79e-01  
 13  +4.2016e-01  +5.6186e-01  1.42e-01  6.16e-05  1.04e-02  2.17e-05  2.02e-04  4.36e-01  
 14  +4.0597e-01  +4.8619e-01  8.02e-02  3.34e-05  5.63e-03  9.92e-06  1.16e-04  7.96e-01  
 15  +3.9355e-01  +4.3073e-01  3.72e-02  1.51e-05  2.55e-03  4.43e-06  5.59e-05  5.55e-01  
 16  +3.8925e-01  +4.1207e-01  2.28e-02  9.17e-06  1.55e-03  2.70e-06  3.48e-05  4.35e-01  
 17  +3.8428e-01  +3.9096e-01  6.68e-03  2.65e-06  4.47e-04  7.68e-07  1.04e-05  7.63e-01  
 18  +3.8227e-01  +3.8277e-01  4.97e-04  1.96e-07  3.31e-05  5.50e-08  7.89e-07  9.38e-01  
 19  +3.8210e-01  +3.8211e-01  5.43e-06  2.14e-09  3.61e-07  5.92e-10  8.64e-09  9.90e-01  
 20  +3.8210e-01  +3.8210e-01  5.48e-08  2.16e-11  3.64e-09  5.98e-12  8.73e-11  9.90e-01  
 21  +3.8210e-01  +3.8210e-01  5.49e-10  2.16e-13  3.64e-11  6.04e-14  8.81e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 130.4692ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:36 PM: Optimal value: 3.821e-01
(CVXPY) Oct 06 04:16:36 PM: Compilation took 3.128e-02 seconds
(CVXPY) Oct 06 04:16:36 PM: Solver (including time spent in interface) took 1.407e-01 seconds
Iteration: 17, Objective: 0.3821
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:36 PM: Your problem has 2683 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:36 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2683
  constraints   = 5183
  nnz(P)        = 0
  nnz(A)        = 41126
  cones (total) = 1
    : Nonnegative = 1,  numel = 5183

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.80e-01  8.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.7814e-01  +5.4399e+02  5.43e+02  4.35e-01  5.37e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2967e-01  +5.9752e+01  5.92e+01  1.61e-01  2.53e+01  1.69e-02  2.70e-01  9.59e-01  
  3  +5.0796e-01  +1.5340e+01  1.48e+01  1.02e-01  1.61e+01  4.70e-05  2.43e-01  3.61e-01  
  4  +5.0082e-01  +1.7014e+00  1.20e+00  1.19e-02  1.96e+00  8.48e-06  1.20e-01  7.59e-01  
  5  +5.0033e-01  +1.2071e+00  7.07e-01  6.71e-03  1.12e+00  1.38e-05  4.71e-02  6.93e-01  
  6  +4.9832e-01  +1.4156e+00  9.17e-01  1.69e-03  2.93e-01  1.32e-04  4.57e-03  9.90e-01  
  7  +4.9102e-01  +1.2496e+00  7.59e-01  5.21e-04  9.01e-02  3.08e-04  1.38e-03  7.13e-01  
  8  +4.8255e-01  +1.0785e+00  5.96e-01  3.52e-04  6.06e-02  2.20e-04  9.50e-04  4.23e-01  
  9  +4.7767e-01  +9.8186e-01  5.04e-01  2.89e-04  4.97e-02  1.38e-04  7.93e-04  3.62e-01  
 10  +4.6065e-01  +8.3100e-01  3.70e-01  1.81e-04  3.10e-02  9.32e-05  5.19e-04  4.30e-01  
 11  +4.4930e-01  +7.1963e-01  2.70e-01  1.37e-04  2.33e-02  2.66e-05  4.15e-04  6.86e-01  
 12  +4.2252e-01  +5.7157e-01  1.49e-01  6.67e-05  1.13e-02  1.35e-05  2.18e-04  5.24e-01  
 13  +4.1067e-01  +5.1290e-01  1.02e-01  4.41e-05  7.44e-03  9.62e-06  1.51e-04  5.56e-01  
 14  +3.9906e-01  +4.5942e-01  6.04e-02  2.53e-05  4.25e-03  5.65e-06  9.14e-05  4.60e-01  
 15  +3.8872e-01  +4.1291e-01  2.42e-02  9.82e-06  1.65e-03  2.39e-06  3.76e-05  7.45e-01  
 16  +3.8514e-01  +3.9751e-01  1.24e-02  4.97e-06  8.35e-04  1.26e-06  1.95e-05  6.69e-01  
 17  +3.8130e-01  +3.8210e-01  8.05e-04  3.21e-07  5.39e-05  8.20e-08  1.30e-06  9.90e-01  
 18  +3.8100e-01  +3.8101e-01  8.16e-06  3.25e-09  5.46e-07  8.29e-10  1.32e-08  9.90e-01  
 19  +3.8100e-01  +3.8100e-01  8.17e-08  3.26e-11  5.47e-09  8.31e-12  1.33e-10  9.90e-01  
 20  +3.8100e-01  +3.8100e-01  8.17e-10  3.26e-13  5.47e-11  8.32e-14  1.33e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 124.3802ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:36 PM: Optimal value: 3.810e-01
(CVXPY) Oct 06 04:16:36 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:16:36 PM: Solver (including time spent in interface) took 1.409e-01 seconds
Iteration: 18, Objective: 0.3810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:36 PM: Your problem has 2693 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:36 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:36 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:36 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:36 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:36 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:36 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:36 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:36 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:36 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:36 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:36 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:36 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2693
  constraints   = 5193
  nnz(P)        = 0
  nnz(A)        = 41606
  cones (total) = 1
    : Nonnegative = 1,  numel = 5193

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.7807e-01  +5.4398e+02  5.43e+02  4.35e-01  5.37e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2963e-01  +5.9706e+01  5.92e+01  1.61e-01  2.52e+01  1.69e-02  2.70e-01  9.60e-01  
  3  +5.0795e-01  +1.5325e+01  1.48e+01  1.02e-01  1.60e+01  4.70e-05  2.43e-01  3.63e-01  
  4  +5.0078e-01  +1.6240e+00  1.12e+00  1.12e-02  1.84e+00  8.28e-06  1.15e-01  7.87e-01  
  5  +5.0038e-01  +1.2533e+00  7.53e-01  7.06e-03  1.18e+00  1.53e-05  4.41e-02  7.06e-01  
  6  +4.9831e-01  +1.3244e+00  8.26e-01  1.38e-03  2.39e-01  1.45e-04  3.70e-03  9.81e-01  
  7  +4.9116e-01  +1.1727e+00  6.82e-01  4.51e-04  7.81e-02  3.13e-04  1.19e-03  7.06e-01  
  8  +4.8373e-01  +1.0459e+00  5.62e-01  3.33e-04  5.73e-02  2.21e-04  8.92e-04  3.84e-01  
  9  +4.7760e-01  +9.5073e-01  4.73e-01  2.71e-04  4.66e-02  1.36e-04  7.43e-04  3.69e-01  
 10  +4.6467e-01  +8.4245e-01  3.78e-01  1.93e-04  3.29e-02  9.45e-05  5.46e-04  3.85e-01  
 11  +4.5511e-01  +7.6222e-01  3.07e-01  1.57e-04  2.68e-02  5.10e-05  4.62e-04  4.25e-01  
 12  +4.2696e-01  +5.9356e-01  1.67e-01  7.54e-05  1.27e-02  1.98e-05  2.42e-04  6.42e-01  
 13  +4.1645e-01  +5.4181e-01  1.25e-01  5.51e-05  9.29e-03  1.43e-05  1.84e-04  3.27e-01  
 14  +3.9706e-01  +4.4921e-01  5.22e-02  2.19e-05  3.67e-03  5.43e-06  7.95e-05  6.87e-01  
 15  +3.8998e-01  +4.1782e-01  2.78e-02  1.14e-05  1.91e-03  2.95e-06  4.31e-05  6.65e-01  
 16  +3.8596e-01  +4.0083e-01  1.49e-02  5.99e-06  1.01e-03  1.59e-06  2.34e-05  6.29e-01  
 17  +3.8150e-01  +3.8285e-01  1.35e-03  5.39e-07  9.05e-05  1.40e-07  2.18e-06  9.83e-01  
 18  +3.8101e-01  +3.8102e-01  1.41e-05  5.64e-09  9.47e-07  1.45e-09  2.30e-08  9.90e-01  
 19  +3.8100e-01  +3.8100e-01  1.41e-07  5.64e-11  9.48e-09  1.46e-11  2.30e-10  9.90e-01  
 20  +3.8100e-01  +3.8100e-01  1.42e-09  5.64e-13  9.48e-11  1.46e-13  2.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.8861ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:36 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:36 PM: Optimal value: 3.810e-01
(CVXPY) Oct 06 04:16:36 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:36 PM: Solver (including time spent in interface) took 1.255e-01 seconds
Iteration: 19, Objective: 0.3810
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:37 PM: Your problem has 2698 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:37 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2698
  constraints   = 5198
  nnz(P)        = 0
  nnz(A)        = 41881
  cones (total) = 1
    : Nonnegative = 1,  numel = 5198

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.7800e-01  +5.4397e+02  5.43e+02  4.35e-01  5.36e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2958e-01  +5.9657e+01  5.91e+01  1.61e-01  2.52e+01  1.69e-02  2.69e-01  9.60e-01  
  3  +5.0794e-01  +1.5311e+01  1.48e+01  1.02e-01  1.60e+01  4.71e-05  2.42e-01  3.64e-01  
  4  +5.0079e-01  +1.6446e+00  1.14e+00  1.14e-02  1.87e+00  8.36e-06  1.16e-01  7.80e-01  
  5  +5.0035e-01  +1.2396e+00  7.39e-01  6.92e-03  1.15e+00  1.55e-05  4.28e-02  7.20e-01  
  6  +4.9808e-01  +1.3091e+00  8.11e-01  1.32e-03  2.28e-01  1.52e-04  3.52e-03  9.74e-01  
  7  +4.9035e-01  +1.1543e+00  6.64e-01  4.29e-04  7.42e-02  3.24e-04  1.13e-03  7.09e-01  
  8  +4.8312e-01  +1.0396e+00  5.56e-01  3.22e-04  5.56e-02  2.31e-04  8.64e-04  3.76e-01  
  9  +4.7622e-01  +9.4040e-01  4.64e-01  2.64e-04  4.53e-02  1.37e-04  7.24e-04  3.61e-01  
 10  +4.6218e-01  +8.2980e-01  3.68e-01  1.86e-04  3.18e-02  9.62e-05  5.31e-04  3.69e-01  
 11  +4.4684e-01  +7.0328e-01  2.56e-01  1.30e-04  2.20e-02  1.69e-05  3.94e-04  8.26e-01  
 12  +4.2624e-01  +5.9371e-01  1.67e-01  7.74e-05  1.31e-02  1.07e-05  2.52e-04  4.16e-01  
 13  +4.0940e-01  +5.1005e-01  1.01e-01  4.41e-05  7.43e-03  7.20e-06  1.53e-04  5.60e-01  
 14  +3.9849e-01  +4.5960e-01  6.11e-02  2.59e-05  4.36e-03  4.63e-06  9.45e-05  4.81e-01  
 15  +3.8695e-01  +4.0803e-01  2.11e-02  8.64e-06  1.45e-03  1.88e-06  3.35e-05  8.13e-01  
 16  +3.8340e-01  +3.9290e-01  9.50e-03  3.85e-06  6.46e-04  9.43e-07  1.53e-05  8.32e-01  
 17  +3.8034e-01  +3.8103e-01  6.84e-04  2.75e-07  4.63e-05  6.73e-08  1.13e-06  9.49e-01  
 18  +3.8010e-01  +3.8011e-01  6.93e-06  2.79e-09  4.68e-07  6.81e-10  1.15e-08  9.90e-01  
 19  +3.8010e-01  +3.8010e-01  6.93e-08  2.79e-11  4.69e-09  6.81e-12  1.15e-10  9.90e-01  
 20  +3.8010e-01  +3.8010e-01  6.93e-10  2.79e-13  4.69e-11  6.83e-14  1.15e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 128.1082ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:37 PM: Optimal value: 3.801e-01
(CVXPY) Oct 06 04:16:37 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:37 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 20, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:37 PM: Your problem has 2699 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:37 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2699
  constraints   = 5199
  nnz(P)        = 0
  nnz(A)        = 41907
  cones (total) = 1
    : Nonnegative = 1,  numel = 5199

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5012e+03  2.50e+03  9.80e-01  8.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.7800e-01  +5.4397e+02  5.43e+02  4.35e-01  5.36e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2958e-01  +5.9652e+01  5.91e+01  1.61e-01  2.51e+01  1.69e-02  2.69e-01  9.61e-01  
  3  +5.0794e-01  +1.5310e+01  1.48e+01  1.02e-01  1.60e+01  4.71e-05  2.42e-01  3.64e-01  
  4  +5.0079e-01  +1.6434e+00  1.14e+00  1.14e-02  1.87e+00  8.36e-06  1.16e-01  7.81e-01  
  5  +5.0035e-01  +1.2371e+00  7.37e-01  6.89e-03  1.15e+00  1.55e-05  4.24e-02  7.23e-01  
  6  +4.9806e-01  +1.3062e+00  8.08e-01  1.31e-03  2.27e-01  1.53e-04  3.50e-03  9.73e-01  
  7  +4.9037e-01  +1.1520e+00  6.62e-01  4.28e-04  7.41e-02  3.24e-04  1.13e-03  7.08e-01  
  8  +4.8312e-01  +1.0386e+00  5.55e-01  3.22e-04  5.55e-02  2.33e-04  8.63e-04  3.73e-01  
  9  +4.7620e-01  +9.3985e-01  4.64e-01  2.63e-04  4.52e-02  1.39e-04  7.22e-04  3.61e-01  
 10  +4.6224e-01  +8.2989e-01  3.68e-01  1.86e-04  3.18e-02  9.71e-05  5.31e-04  3.68e-01  
 11  +4.4664e-01  +7.0174e-01  2.55e-01  1.29e-04  2.19e-02  1.61e-05  3.92e-04  8.34e-01  
 12  +4.2608e-01  +5.9261e-01  1.67e-01  7.69e-05  1.30e-02  1.03e-05  2.50e-04  4.18e-01  
 13  +4.0954e-01  +5.1053e-01  1.01e-01  4.43e-05  7.45e-03  7.20e-06  1.53e-04  5.72e-01  
 14  +3.9849e-01  +4.5955e-01  6.11e-02  2.59e-05  4.36e-03  4.60e-06  9.44e-05  4.81e-01  
 15  +3.8700e-01  +4.0827e-01  2.13e-02  8.71e-06  1.46e-03  1.89e-06  3.38e-05  8.08e-01  
 16  +3.8351e-01  +3.9344e-01  9.93e-03  4.02e-06  6.75e-04  9.70e-07  1.60e-05  7.87e-01  
 17  +3.8030e-01  +3.8086e-01  5.61e-04  2.26e-07  3.80e-05  5.46e-08  9.28e-07  9.69e-01  
 18  +3.8010e-01  +3.8011e-01  5.65e-06  2.28e-09  3.82e-07  5.50e-10  9.37e-09  9.90e-01  
 19  +3.8010e-01  +3.8010e-01  5.66e-08  2.28e-11  3.83e-09  5.50e-12  9.38e-11  9.90e-01  
 20  +3.8010e-01  +3.8010e-01  5.66e-10  2.28e-13  3.83e-11  5.51e-14  9.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.1814ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:37 PM: Optimal value: 3.801e-01
(CVXPY) Oct 06 04:16:37 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:37 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 21, Objective: 0.3801
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:37 PM: Your problem has 2709 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:37 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:37 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:37 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:37 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:37 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:37 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:37 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:37 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:37 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:37 PM: Finished problem compilation (took 4.679e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2709
  constraints   = 5209
  nnz(P)        = 0
  nnz(A)        = 42201
  cones (total) = 1
    : Nonnegative = 1,  numel = 5209

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.37e+01  1.00e+00  1.01e+00   ------   
  1  +5.7790e-01  +5.4395e+02  5.43e+02  4.35e-01  5.35e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2953e-01  +5.9606e+01  5.91e+01  1.61e-01  2.50e+01  1.69e-02  2.69e-01  9.61e-01  
  3  +5.0793e-01  +1.5300e+01  1.48e+01  1.02e-01  1.59e+01  4.71e-05  2.42e-01  3.66e-01  
  4  +5.0079e-01  +1.6476e+00  1.15e+00  1.14e-02  1.88e+00  8.39e-06  1.16e-01  7.80e-01  
  5  +5.0035e-01  +1.2415e+00  7.41e-01  6.92e-03  1.15e+00  1.56e-05  4.20e-02  7.25e-01  
  6  +4.9804e-01  +1.3126e+00  8.15e-01  1.31e-03  2.27e-01  1.53e-04  3.50e-03  9.74e-01  
  7  +4.9040e-01  +1.1632e+00  6.73e-01  4.36e-04  7.54e-02  3.24e-04  1.14e-03  7.01e-01  
  8  +4.8121e-01  +1.0141e+00  5.33e-01  3.03e-04  5.21e-02  2.08e-04  8.15e-04  4.52e-01  
  9  +4.7577e-01  +9.2742e-01  4.52e-01  2.60e-04  4.45e-02  1.07e-04  7.13e-04  4.12e-01  
 10  +4.6102e-01  +8.1365e-01  3.53e-01  1.81e-04  3.08e-02  7.23e-05  5.18e-04  3.95e-01  
 11  +4.3567e-01  +6.4469e-01  2.09e-01  9.93e-05  1.68e-02  2.11e-05  3.10e-04  7.14e-01  
 12  +4.1215e-01  +5.2442e-01  1.12e-01  4.98e-05  8.39e-03  1.00e-05  1.70e-04  5.94e-01  
 13  +3.9564e-01  +4.4791e-01  5.23e-02  2.21e-05  3.72e-03  4.73e-06  8.11e-05  6.61e-01  
 14  +3.8915e-01  +4.1962e-01  3.05e-02  1.26e-05  2.12e-03  2.90e-06  4.77e-05  5.65e-01  
 15  +3.8454e-01  +4.0038e-01  1.58e-02  6.43e-06  1.09e-03  1.55e-06  2.49e-05  5.70e-01  
 16  +3.8041e-01  +3.8353e-01  3.12e-03  1.25e-06  2.12e-04  3.15e-07  5.00e-06  9.25e-01  
 17  +3.7934e-01  +3.7946e-01  1.15e-04  4.62e-08  7.81e-06  1.16e-08  1.86e-07  9.68e-01  
 18  +3.7930e-01  +3.7930e-01  1.15e-06  4.62e-10  7.81e-08  1.16e-10  1.86e-09  9.90e-01  
 19  +3.7930e-01  +3.7930e-01  1.15e-08  4.62e-12  7.81e-10  1.16e-12  1.86e-11  9.90e-01  
 20  +3.7930e-01  +3.7930e-01  1.15e-10  4.63e-14  7.82e-12  1.16e-14  1.87e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.2191ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:37 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:37 PM: Optimal value: 3.793e-01
(CVXPY) Oct 06 04:16:37 PM: Compilation took 4.679e-02 seconds
(CVXPY) Oct 06 04:16:37 PM: Solver (including time spent in interface) took 1.250e-01 seconds
Iteration: 22, Objective: 0.3793
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:38 PM: Your problem has 2719 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:38 PM: Finished problem compilation (took 4.680e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:38 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2719
  constraints   = 5219
  nnz(P)        = 0
  nnz(A)        = 42519
  cones (total) = 1
    : Nonnegative = 1,  numel = 5219

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.7777e-01  +5.4397e+02  5.43e+02  4.35e-01  5.35e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2948e-01  +5.9568e+01  5.90e+01  1.61e-01  2.49e+01  1.69e-02  2.69e-01  9.62e-01  
  3  +5.0792e-01  +1.5290e+01  1.48e+01  1.02e-01  1.59e+01  4.72e-05  2.41e-01  3.68e-01  
  4  +5.0078e-01  +1.6329e+00  1.13e+00  1.13e-02  1.85e+00  8.38e-06  1.14e-01  7.86e-01  
  5  +5.0036e-01  +1.2577e+00  7.57e-01  7.02e-03  1.17e+00  1.63e-05  4.07e-02  7.30e-01  
  6  +4.9810e-01  +1.3089e+00  8.11e-01  1.31e-03  2.27e-01  1.51e-04  3.48e-03  9.70e-01  
  7  +4.9030e-01  +1.1634e+00  6.73e-01  4.28e-04  7.40e-02  3.31e-04  1.12e-03  7.04e-01  
  8  +4.8224e-01  +1.0304e+00  5.48e-01  3.15e-04  5.42e-02  2.09e-04  8.43e-04  4.28e-01  
  9  +4.7563e-01  +9.3506e-01  4.59e-01  2.65e-04  4.54e-02  1.17e-04  7.28e-04  3.68e-01  
 10  +4.6243e-01  +8.3398e-01  3.72e-01  1.92e-04  3.28e-02  8.27e-05  5.48e-04  3.66e-01  
 11  +4.3553e-01  +6.5340e-01  2.18e-01  1.03e-04  1.74e-02  2.78e-05  3.20e-04  6.45e-01  
 12  +4.1085e-01  +5.2399e-01  1.13e-01  5.03e-05  8.46e-03  1.16e-05  1.72e-04  6.27e-01  
 13  +3.9511e-01  +4.5032e-01  5.52e-02  2.35e-05  3.95e-03  5.54e-06  8.62e-05  6.51e-01  
 14  +3.8826e-01  +4.1980e-01  3.15e-02  1.31e-05  2.20e-03  3.25e-06  4.99e-05  6.00e-01  
 15  +3.8394e-01  +4.0152e-01  1.76e-02  7.20e-06  1.21e-03  1.83e-06  2.80e-05  5.35e-01  
 16  +3.7962e-01  +3.8366e-01  4.04e-03  1.64e-06  2.76e-04  4.17e-07  6.55e-06  9.24e-01  
 17  +3.7823e-01  +3.7833e-01  9.67e-05  3.91e-08  6.60e-06  9.82e-09  1.58e-07  9.80e-01  
 18  +3.7820e-01  +3.7820e-01  9.67e-07  3.91e-10  6.60e-08  9.82e-11  1.58e-09  9.90e-01  
 19  +3.7820e-01  +3.7820e-01  9.68e-09  3.91e-12  6.60e-10  9.82e-13  1.58e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 126.2304ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:38 PM: Optimal value: 3.782e-01
(CVXPY) Oct 06 04:16:38 PM: Compilation took 4.680e-02 seconds
(CVXPY) Oct 06 04:16:38 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 23, Objective: 0.3782
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:38 PM: Your problem has 2729 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:38 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:38 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2729
  constraints   = 5229
  nnz(P)        = 0
  nnz(A)        = 42685
  cones (total) = 1
    : Nonnegative = 1,  numel = 5229

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.36e+01  1.00e+00  1.01e+00   ------   
  1  +5.7766e-01  +5.4397e+02  5.43e+02  4.36e-01  5.34e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2939e-01  +5.9480e+01  5.90e+01  1.60e-01  2.48e+01  1.69e-02  2.68e-01  9.63e-01  
  3  +5.0791e-01  +1.5268e+01  1.48e+01  1.01e-01  1.58e+01  4.73e-05  2.40e-01  3.70e-01  
  4  +5.0077e-01  +1.6013e+00  1.10e+00  1.10e-02  1.80e+00  8.32e-06  1.12e-01  7.99e-01  
  5  +5.0039e-01  +1.3183e+00  8.18e-01  7.40e-03  1.24e+00  1.84e-05  3.83e-02  7.55e-01  
  6  +4.9816e-01  +1.2903e+00  7.92e-01  1.27e-03  2.20e-01  1.54e-04  3.37e-03  9.50e-01  
  7  +4.9091e-01  +1.1545e+00  6.64e-01  4.37e-04  7.55e-02  3.21e-04  1.14e-03  6.94e-01  
  8  +4.8392e-01  +1.0466e+00  5.63e-01  3.36e-04  5.78e-02  2.27e-04  8.95e-04  3.66e-01  
  9  +4.7363e-01  +9.2149e-01  4.48e-01  2.49e-04  4.27e-02  1.25e-04  6.86e-04  4.53e-01  
 10  +4.6337e-01  +8.4277e-01  3.79e-01  1.99e-04  3.39e-02  8.68e-05  5.66e-04  3.27e-01  
 11  +4.3794e-01  +6.6842e-01  2.30e-01  1.11e-04  1.87e-02  2.26e-05  3.43e-04  7.46e-01  
 12  +4.1135e-01  +5.2949e-01  1.18e-01  5.28e-05  8.88e-03  9.95e-06  1.80e-04  6.29e-01  
 13  +4.0150e-01  +4.8401e-01  8.25e-02  3.58e-05  6.02e-03  7.11e-06  1.28e-04  3.96e-01  
 14  +3.9390e-01  +4.4992e-01  5.60e-02  2.38e-05  4.00e-03  4.86e-06  8.81e-05  3.60e-01  
 15  +3.8611e-01  +4.1573e-01  2.96e-02  1.23e-05  2.06e-03  2.62e-06  4.72e-05  5.12e-01  
 16  +3.8197e-01  +3.9780e-01  1.58e-02  6.45e-06  1.09e-03  1.49e-06  2.52e-05  6.14e-01  
 17  +3.7753e-01  +3.7952e-01  2.00e-03  8.05e-07  1.36e-04  2.01e-07  3.24e-06  9.90e-01  
 18  +3.7681e-01  +3.7684e-01  2.88e-05  1.16e-08  1.95e-06  2.88e-09  4.70e-08  9.87e-01  
 19  +3.7680e-01  +3.7680e-01  2.88e-07  1.16e-10  1.95e-08  2.88e-11  4.70e-10  9.90e-01  
 20  +3.7680e-01  +3.7680e-01  2.88e-09  1.16e-12  1.95e-10  2.88e-13  4.71e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 129.4822ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:38 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:38 PM: Optimal value: 3.768e-01
(CVXPY) Oct 06 04:16:38 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:38 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 24, Objective: 0.3768
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:38 PM: Your problem has 2735 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:38 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:38 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:38 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:38 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:38 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:38 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:38 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:38 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:38 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:38 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:39 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2735
  constraints   = 5235
  nnz(P)        = 0
  nnz(A)        = 42857
  cones (total) = 1
    : Nonnegative = 1,  numel = 5235

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5013e+03  2.50e+03  9.80e-01  8.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.7765e-01  +5.4392e+02  5.43e+02  4.36e-01  5.33e+01  3.78e-03  5.77e-01  5.85e-01  
  2  +5.2937e-01  +5.9451e+01  5.89e+01  1.60e-01  2.48e+01  1.69e-02  2.68e-01  9.63e-01  
  3  +5.0790e-01  +1.5256e+01  1.47e+01  1.01e-01  1.58e+01  4.73e-05  2.40e-01  3.71e-01  
  4  +5.0077e-01  +1.6133e+00  1.11e+00  1.11e-02  1.82e+00  8.36e-06  1.12e-01  7.95e-01  
  5  +5.0038e-01  +1.3077e+00  8.07e-01  7.33e-03  1.22e+00  1.82e-05  3.83e-02  7.54e-01  
  6  +4.9807e-01  +1.2932e+00  7.95e-01  1.26e-03  2.18e-01  1.55e-04  3.34e-03  9.52e-01  
  7  +4.9048e-01  +1.1580e+00  6.67e-01  4.30e-04  7.44e-02  3.29e-04  1.12e-03  6.91e-01  
  8  +4.8310e-01  +1.0435e+00  5.60e-01  3.27e-04  5.63e-02  2.25e-04  8.73e-04  3.85e-01  
  9  +4.7428e-01  +9.3512e-01  4.61e-01  2.58e-04  4.42e-02  1.32e-04  7.08e-04  3.92e-01  
 10  +4.6365e-01  +8.4843e-01  3.85e-01  2.03e-04  3.46e-02  8.72e-05  5.76e-04  3.57e-01  
 11  +4.3621e-01  +6.5870e-01  2.22e-01  1.07e-04  1.80e-02  2.10e-05  3.31e-04  7.55e-01  
 12  +4.1038e-01  +5.2624e-01  1.16e-01  5.18e-05  8.70e-03  9.65e-06  1.77e-04  6.11e-01  
 13  +4.0111e-01  +4.8385e-01  8.27e-02  3.60e-05  6.03e-03  7.06e-06  1.29e-04  3.79e-01  
 14  +3.9325e-01  +4.4876e-01  5.55e-02  2.37e-05  3.96e-03  4.76e-06  8.81e-05  3.65e-01  
 15  +3.8160e-01  +3.9743e-01  1.58e-02  6.57e-06  1.10e-03  1.38e-06  2.62e-05  7.76e-01  
 16  +3.7805e-01  +3.8231e-01  4.27e-03  1.76e-06  2.95e-04  3.88e-07  7.15e-06  7.90e-01  
 17  +3.7769e-01  +3.8084e-01  3.15e-03  1.30e-06  2.18e-04  2.85e-07  5.30e-06  4.29e-01  
 18  +3.7701e-01  +3.7820e-01  1.19e-03  4.87e-07  8.22e-05  1.10e-07  1.99e-06  6.89e-01  
 19  +3.7661e-01  +3.7664e-01  3.18e-05  1.30e-08  2.19e-06  3.03e-09  5.31e-08  9.90e-01  
 20  +3.7660e-01  +3.7660e-01  3.18e-07  1.30e-10  2.19e-08  3.03e-11  5.32e-10  9.90e-01  
 21  +3.7660e-01  +3.7660e-01  3.18e-09  1.30e-12  2.19e-10  3.03e-13  5.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.7048ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:39 PM: Optimal value: 3.766e-01
(CVXPY) Oct 06 04:16:39 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:39 PM: Solver (including time spent in interface) took 1.406e-01 seconds
Iteration: 25, Objective: 0.3766
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:39 PM: Your problem has 2745 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:39 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2745
  constraints   = 5245
  nnz(P)        = 0
  nnz(A)        = 43019
  cones (total) = 1
    : Nonnegative = 1,  numel = 5245

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.35e+01  1.00e+00  1.01e+00   ------   
  1  +5.7736e-01  +5.4417e+02  5.44e+02  4.36e-01  5.33e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2924e-01  +5.9359e+01  5.88e+01  1.60e-01  2.47e+01  1.70e-02  2.68e-01  9.66e-01  
  3  +5.0789e-01  +1.5242e+01  1.47e+01  1.01e-01  1.58e+01  4.76e-05  2.39e-01  3.75e-01  
  4  +5.0081e-01  +1.6824e+00  1.18e+00  1.18e-02  1.93e+00  8.60e-06  1.15e-01  7.73e-01  
  5  +5.0038e-01  +1.3590e+00  8.59e-01  7.82e-03  1.30e+00  1.82e-05  4.14e-02  7.52e-01  
  6  +4.9764e-01  +1.2764e+00  7.79e-01  1.22e-03  2.11e-01  1.61e-04  3.23e-03  9.42e-01  
  7  +4.9032e-01  +1.1235e+00  6.33e-01  4.44e-04  7.66e-02  2.87e-04  1.16e-03  7.08e-01  
  8  +4.8477e-01  +1.0372e+00  5.52e-01  3.50e-04  6.02e-02  2.14e-04  9.31e-04  3.61e-01  
  9  +4.7173e-01  +9.1478e-01  4.43e-01  2.37e-04  4.06e-02  1.54e-04  6.53e-04  4.30e-01  
 10  +4.6819e-01  +8.8384e-01  4.16e-01  2.29e-04  3.91e-02  1.25e-04  6.51e-04  7.80e-02  
 11  +4.6064e-01  +8.2948e-01  3.69e-01  1.96e-04  3.34e-02  9.51e-05  5.71e-04  2.47e-01  
 12  +4.4910e-01  +7.5267e-01  3.04e-01  1.56e-04  2.64e-02  6.21e-05  4.69e-04  3.52e-01  
 13  +4.2473e-01  +6.0944e-01  1.85e-01  8.67e-05  1.46e-02  1.94e-05  2.82e-04  7.68e-01  
 14  +4.0080e-01  +4.8804e-01  8.72e-02  3.87e-05  6.48e-03  8.03e-06  1.38e-04  5.59e-01  
 15  +3.9584e-01  +4.6505e-01  6.92e-02  3.01e-05  5.04e-03  6.50e-06  1.10e-04  3.09e-01  
 16  +3.8750e-01  +4.2650e-01  3.90e-02  1.65e-05  2.76e-03  3.86e-06  6.32e-05  6.72e-01  
 17  +3.7835e-01  +3.8700e-01  8.64e-03  3.60e-06  6.01e-04  8.41e-07  1.47e-05  8.32e-01  
 18  +3.7589e-01  +3.7677e-01  8.79e-04  3.64e-07  6.07e-05  8.34e-08  1.52e-06  9.02e-01  
 19  +3.7561e-01  +3.7564e-01  2.77e-05  1.14e-08  1.91e-06  2.58e-09  4.83e-08  9.83e-01  
 20  +3.7560e-01  +3.7560e-01  2.77e-07  1.14e-10  1.91e-08  2.58e-11  4.83e-10  9.90e-01  
 21  +3.7560e-01  +3.7560e-01  2.77e-09  1.15e-12  1.91e-10  2.59e-13  4.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 137.649ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:39 PM: Optimal value: 3.756e-01
(CVXPY) Oct 06 04:16:39 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:39 PM: Solver (including time spent in interface) took 1.612e-01 seconds
Iteration: 26, Objective: 0.3756
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:39 PM: Your problem has 2748 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:39 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:39 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:39 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:39 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:39 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:39 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:39 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:39 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:39 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:39 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:39 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:39 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2748
  constraints   = 5248
  nnz(P)        = 0
  nnz(A)        = 43059
  cones (total) = 1
    : Nonnegative = 1,  numel = 5248

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.7731e-01  +5.4420e+02  5.44e+02  4.36e-01  5.32e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2923e-01  +5.9350e+01  5.88e+01  1.60e-01  2.47e+01  1.70e-02  2.68e-01  9.66e-01  
  3  +5.0789e-01  +1.5243e+01  1.47e+01  1.01e-01  1.58e+01  4.76e-05  2.39e-01  3.76e-01  
  4  +5.0080e-01  +1.6684e+00  1.17e+00  1.17e-02  1.91e+00  8.57e-06  1.14e-01  7.78e-01  
  5  +5.0040e-01  +1.3778e+00  8.77e-01  7.94e-03  1.32e+00  1.89e-05  4.07e-02  7.59e-01  
  6  +4.9772e-01  +1.2801e+00  7.82e-01  1.23e-03  2.12e-01  1.60e-04  3.25e-03  9.39e-01  
  7  +4.8989e-01  +1.1127e+00  6.23e-01  4.16e-04  7.19e-02  2.97e-04  1.09e-03  7.39e-01  
  8  +4.8477e-01  +1.0359e+00  5.51e-01  3.44e-04  5.92e-02  2.21e-04  9.14e-04  3.14e-01  
  9  +4.7490e-01  +9.4764e-01  4.73e-01  2.59e-04  4.43e-02  1.80e-04  7.05e-04  3.19e-01  
 10  +4.7279e-01  +9.2626e-01  4.53e-01  2.54e-04  4.35e-02  1.58e-04  7.03e-04  4.71e-02  
 11  +4.6099e-01  +8.3845e-01  3.77e-01  1.97e-04  3.36e-02  1.15e-04  5.66e-04  2.88e-01  
 12  +4.4608e-01  +7.3444e-01  2.88e-01  1.46e-04  2.48e-02  3.80e-05  4.42e-04  6.65e-01  
 13  +4.1779e-01  +5.7361e-01  1.56e-01  7.20e-05  1.21e-02  1.63e-05  2.40e-04  5.51e-01  
 14  +4.0028e-01  +4.8769e-01  8.74e-02  3.87e-05  6.48e-03  8.57e-06  1.39e-04  4.83e-01  
 15  +3.9462e-01  +4.6151e-01  6.69e-02  2.90e-05  4.86e-03  6.59e-06  1.07e-04  3.15e-01  
 16  +3.8691e-01  +4.2583e-01  3.89e-02  1.65e-05  2.76e-03  3.91e-06  6.36e-05  5.95e-01  
 17  +3.7738e-01  +3.8412e-01  6.74e-03  2.81e-06  4.69e-04  6.56e-07  1.15e-05  9.08e-01  
 18  +3.7545e-01  +3.7622e-01  7.67e-04  3.19e-07  5.32e-05  7.33e-08  1.34e-06  8.91e-01  
 19  +3.7521e-01  +3.7523e-01  2.17e-05  8.98e-09  1.50e-06  2.03e-09  3.80e-08  9.83e-01  
 20  +3.7520e-01  +3.7520e-01  2.17e-07  8.98e-11  1.50e-08  2.03e-11  3.80e-10  9.90e-01  
 21  +3.7520e-01  +3.7520e-01  2.17e-09  8.98e-13  1.50e-10  2.04e-13  3.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 136.1614ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:39 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:39 PM: Optimal value: 3.752e-01
(CVXPY) Oct 06 04:16:39 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:16:39 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 27, Objective: 0.3752
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:16:40 PM: Your problem has 2751 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:16:40 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:16:40 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:16:40 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:16:40 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:40 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:16:40 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:16:40 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:16:40 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:16:40 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:16:40 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:16:40 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:40 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2751
  constraints   = 5251
  nnz(P)        = 0
  nnz(A)        = 43085
  cones (total) = 1
    : Nonnegative = 1,  numel = 5251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5016e+03  2.50e+03  9.80e-01  8.34e+01  1.00e+00  1.01e+00   ------   
  1  +5.7728e-01  +5.4419e+02  5.44e+02  4.36e-01  5.32e+01  3.78e-03  5.78e-01  5.85e-01  
  2  +5.2922e-01  +5.9336e+01  5.88e+01  1.60e-01  2.46e+01  1.70e-02  2.68e-01  9.66e-01  
  3  +5.0788e-01  +1.5241e+01  1.47e+01  1.01e-01  1.58e+01  4.77e-05  2.39e-01  3.76e-01  
  4  +5.0080e-01  +1.6720e+00  1.17e+00  1.17e-02  1.92e+00  8.58e-06  1.14e-01  7.77e-01  
  5  +5.0039e-01  +1.3745e+00  8.74e-01  7.91e-03  1.32e+00  1.88e-05  4.06e-02  7.58e-01  
  6  +4.9770e-01  +1.2835e+00  7.86e-01  1.23e-03  2.13e-01  1.60e-04  3.25e-03  9.40e-01  
  7  +4.8978e-01  +1.1135e+00  6.24e-01  4.16e-04  7.18e-02  2.97e-04  1.09e-03  7.39e-01  
  8  +4.8494e-01  +1.0402e+00  5.55e-01  3.48e-04  6.00e-02  2.23e-04  9.25e-04  2.98e-01  
  9  +4.7495e-01  +9.4944e-01  4.74e-01  2.60e-04  4.45e-02  1.80e-04  7.08e-04  3.30e-01  
 10  +4.7281e-01  +9.2763e-01  4.55e-01  2.55e-04  4.36e-02  1.57e-04  7.07e-04  5.13e-02  
 11  +4.6094e-01  +8.3860e-01  3.78e-01  1.98e-04  3.36e-02  1.13e-04  5.67e-04  2.94e-01  
 12  +4.4605e-01  +7.3430e-01  2.88e-01  1.47e-04  2.48e-02  3.64e-05  4.43e-04  6.78e-01  
 13  +4.1766e-01  +5.7307e-01  1.55e-01  7.18e-05  1.21e-02  1.58e-05  2.39e-04  5.48e-01  
 14  +4.0015e-01  +4.8714e-01  8.70e-02  3.85e-05  6.45e-03  8.32e-06  1.38e-04  4.85e-01  
 15  +3.9460e-01  +4.6143e-01  6.68e-02  2.90e-05  4.85e-03  6.45e-06  1.07e-04  3.11e-01  
 16  +3.8507e-01  +4.1735e-01  3.23e-02  1.36e-05  2.27e-03  3.23e-06  5.29e-05  7.36e-01  
 17  +3.7737e-01  +3.8397e-01  6.60e-03  2.75e-06  4.59e-04  6.60e-07  1.13e-05  9.15e-01  
 18  +3.7527e-01  +3.7546e-01  1.95e-04  8.12e-08  1.35e-05  1.87e-08  3.40e-07  9.82e-01  
 19  +3.7520e-01  +3.7520e-01  1.97e-06  8.20e-10  1.37e-07  1.89e-10  3.44e-09  9.90e-01  
 20  +3.7520e-01  +3.7520e-01  1.98e-08  8.21e-12  1.37e-09  1.89e-12  3.44e-11  9.90e-01  
 21  +3.7520e-01  +3.7520e-01  1.98e-10  8.23e-14  1.37e-11  1.90e-14  3.45e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 139.5277ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:16:40 PM: Problem status: optimal
(CVXPY) Oct 06 04:16:40 PM: Optimal value: 3.752e-01
(CVXPY) Oct 06 04:16:40 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:16:40 PM: Solver (including time spent in interface) took 1.406e-01 seconds
FULL MODEL:
  Accruacy: 0.5936
  Our objective: 0.18720000000000003

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                   <-- (term's our objective: 0.1372)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0) <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1)            <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 0)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x2 = 1 AND x4 = 0 AND x6 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)            <-- (term's our objective: 0.0044)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 18.79673671722412
Best over terms:
  Our final objective: 0.13719999999999996
    Its accruacy: 0.5686
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.13719999999999996
  Highest accruacy: 0.5686
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

