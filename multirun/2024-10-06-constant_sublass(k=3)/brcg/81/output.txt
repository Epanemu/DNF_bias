Command:
python test_script.py -s constant_subclass -d 3 -n 10 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 3.

Computed total variation: 0.6000000000000001
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:45:47 PM: Your problem has 12 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:45:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:45:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:45:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:45:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:45:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:45:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:45:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:45:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:45:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:45:47 PM: Finished problem compilation (took 4.041e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 12
  constraints   = 17
  nnz(P)        = 0
  nnz(A)        = 37
  cones (total) = 1
    : Nonnegative = 1,  numel = 17

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6677e-01  +5.7165e+00  5.25e+00  7.00e-01  2.16e+00  1.00e+00  1.25e+00   ------   
  1  +5.6432e-01  +1.3115e+00  7.47e-01  2.21e-01  8.96e-01  4.15e-03  5.28e-01  7.14e-01  
  2  +4.4497e-01  +5.5565e-01  1.11e-01  3.51e-02  1.57e-01  8.53e-03  1.24e-01  8.73e-01  
  3  +4.0215e-01  +4.0826e-01  6.11e-03  1.76e-03  8.04e-03  4.28e-04  7.24e-03  9.57e-01  
  4  +4.0024e-01  +4.0051e-01  2.61e-04  7.47e-05  3.41e-04  1.93e-05  3.08e-04  9.57e-01  
  5  +4.0016e-01  +4.0028e-01  1.27e-04  3.14e-05  1.46e-04  9.47e-06  1.41e-04  6.61e-01  
  6  +4.0010e-01  +4.0010e-01  2.97e-06  7.33e-07  3.41e-06  2.08e-07  3.33e-06  9.77e-01  
  7  +4.0010e-01  +4.0010e-01  2.98e-08  7.37e-09  3.43e-08  2.09e-09  3.35e-08  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  2.98e-10  7.37e-11  3.43e-10  2.09e-11  3.35e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 214.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:45:47 PM: Optimal value: 4.001e-01
(CVXPY) Oct 06 03:45:47 PM: Compilation took 4.041e-02 seconds
(CVXPY) Oct 06 03:45:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:45:47 PM: Your problem has 13 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:45:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:45:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:45:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:45:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:45:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:45:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:45:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:45:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:45:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:45:47 PM: Finished problem compilation (took 9.473e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 13
  constraints   = 18
  nnz(P)        = 0
  nnz(A)        = 41
  cones (total) = 1
    : Nonnegative = 1,  numel = 18

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4546e-01  +6.0354e+00  5.59e+00  7.10e-01  2.28e+00  1.00e+00  1.33e+00   ------   
  1  +5.1783e-01  +1.3118e+00  7.94e-01  2.26e-01  9.65e-01  4.04e-03  5.66e-01  7.18e-01  
  2  +3.3755e-01  +4.2879e-01  9.12e-02  2.32e-02  1.10e-01  9.36e-03  9.34e-02  9.48e-01  
  3  +3.0211e-01  +3.0726e-01  5.15e-03  1.31e-03  6.24e-03  4.79e-04  6.09e-03  9.43e-01  
  4  +3.0031e-01  +3.0067e-01  3.58e-04  9.10e-05  4.33e-04  3.44e-05  4.26e-04  9.30e-01  
  5  +3.0023e-01  +3.0048e-01  2.53e-04  5.39e-05  2.64e-04  2.34e-05  2.80e-04  4.83e-01  
  6  +3.0011e-01  +3.0012e-01  1.35e-05  2.84e-06  1.39e-05  1.07e-06  1.56e-05  9.46e-01  
  7  +3.0010e-01  +3.0010e-01  1.36e-07  2.84e-08  1.40e-07  1.07e-08  1.59e-07  9.90e-01  
  8  +3.0010e-01  +3.0010e-01  1.36e-09  2.84e-10  1.40e-09  1.07e-10  1.59e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 131.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:47 PM: Problem status: optimal
(CVXPY) Oct 06 03:45:47 PM: Optimal value: 3.001e-01
(CVXPY) Oct 06 03:45:47 PM: Compilation took 9.473e-03 seconds
(CVXPY) Oct 06 03:45:47 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:45:48 PM: Your problem has 15 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:45:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:45:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:45:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:45:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:45:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:45:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:45:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:45:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:45:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:45:48 PM: Finished problem compilation (took 8.366e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 15
  constraints   = 20
  nnz(P)        = 0
  nnz(A)        = 46
  cones (total) = 1
    : Nonnegative = 1,  numel = 20

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2300e-01  +6.0555e+00  5.63e+00  7.19e-01  2.30e+00  1.00e+00  1.31e+00   ------   
  1  +4.6063e-01  +1.2757e+00  8.15e-01  2.36e-01  9.92e-01  4.03e-03  5.67e-01  7.10e-01  
  2  +2.5152e-01  +4.4809e-01  1.97e-01  5.01e-02  2.29e-01  1.10e-02  1.84e-01  7.96e-01  
  3  +2.0388e-01  +2.2009e-01  1.62e-02  4.12e-03  1.91e-02  1.30e-03  1.91e-02  9.13e-01  
  4  +2.0025e-01  +2.0046e-01  2.08e-04  5.40e-05  2.49e-04  1.59e-05  2.57e-04  9.87e-01  
  5  +2.0020e-01  +2.0021e-01  9.55e-06  2.59e-06  1.19e-05  5.69e-07  1.26e-05  9.52e-01  
  6  +2.0020e-01  +2.0020e-01  1.00e-07  2.73e-08  1.25e-07  5.98e-09  1.33e-07  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  1.00e-09  2.73e-10  1.25e-09  5.99e-11  1.33e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 137.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:48 PM: Problem status: optimal
(CVXPY) Oct 06 03:45:48 PM: Optimal value: 2.002e-01
(CVXPY) Oct 06 03:45:48 PM: Compilation took 8.366e-03 seconds
(CVXPY) Oct 06 03:45:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:45:48 PM: Your problem has 16 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:45:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:45:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:45:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:45:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:45:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:45:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:45:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:45:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:45:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:45:48 PM: Finished problem compilation (took 8.073e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 16
  constraints   = 21
  nnz(P)        = 0
  nnz(A)        = 48
  cones (total) = 1
    : Nonnegative = 1,  numel = 21

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2069e-01  +6.0388e+00  5.62e+00  7.24e-01  2.29e+00  1.00e+00  1.30e+00   ------   
  1  +4.5056e-01  +1.2672e+00  8.17e-01  2.39e-01  9.89e-01  4.03e-03  5.66e-01  7.08e-01  
  2  +2.5326e-01  +4.1579e-01  1.63e-01  4.34e-02  1.98e-01  9.65e-03  1.55e-01  8.31e-01  
  3  +2.0263e-01  +2.1340e-01  1.08e-02  2.78e-03  1.28e-02  8.33e-04  1.23e-02  9.31e-01  
  4  +2.0025e-01  +2.0040e-01  1.52e-04  4.05e-05  1.86e-04  9.42e-06  1.82e-04  9.85e-01  
  5  +2.0020e-01  +2.0021e-01  6.89e-06  1.97e-06  8.90e-06  2.47e-07  9.59e-06  9.50e-01  
  6  +2.0020e-01  +2.0020e-01  6.92e-08  1.98e-08  8.96e-08  2.49e-09  9.79e-08  9.90e-01  
  7  +2.0020e-01  +2.0020e-01  6.92e-10  1.98e-10  8.97e-10  2.49e-11  9.79e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 193.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:45:48 PM: Problem status: optimal
(CVXPY) Oct 06 03:45:48 PM: Optimal value: 2.002e-01
(CVXPY) Oct 06 03:45:48 PM: Compilation took 8.073e-03 seconds
(CVXPY) Oct 06 03:45:48 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6000000000000001

IF 
    (x0 = 0 AND x2 = 0) <-- (term's our objective: 0.4)
 OR (x1 = 0 AND x2 = 1) <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.7805604934692383
Best over terms:
  Our final objective: 0.39999999999999997
    Its accruacy: 0.7
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.39999999999999997
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

