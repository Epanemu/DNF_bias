Command:
python test_script.py -s constant_subclass -d 10 -n 50 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.16
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 50 remain. 
Dimension is 10.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:30 PM: Your problem has 46 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:30 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:30 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:30 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:30 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:30 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:30 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:30 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:30 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:30 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:30 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:30 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:30 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 71
  nnz(P)        = 0
  nnz(A)        = 346
  cones (total) = 1
    : Nonnegative = 1,  numel = 71

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9439e-01  +2.6058e+01  2.56e+01  8.41e-01  7.21e+00  1.00e+00  1.07e+00   ------   
  1  +5.6681e-01  +5.8738e+00  5.31e+00  3.83e-01  4.28e+00  3.71e-03  6.25e-01  5.82e-01  
  2  +4.9141e-01  +1.2336e+00  7.42e-01  9.52e-02  1.32e+00  2.26e-02  2.64e-01  9.90e-01  
  3  +4.4109e-01  +7.5862e-01  3.18e-01  2.29e-02  3.36e-01  1.49e-02  8.13e-02  8.03e-01  
  4  +4.1919e-01  +5.3953e-01  1.20e-01  7.79e-03  1.14e-01  3.92e-03  3.26e-02  7.22e-01  
  5  +4.0497e-01  +4.2993e-01  2.50e-02  1.50e-03  2.20e-02  4.82e-04  7.35e-03  8.80e-01  
  6  +4.0021e-01  +4.0074e-01  5.36e-04  3.18e-05  4.64e-04  8.98e-06  1.64e-04  9.79e-01  
  7  +4.0010e-01  +4.0011e-01  5.36e-06  3.18e-07  4.64e-06  8.98e-08  1.64e-06  9.90e-01  
  8  +4.0010e-01  +4.0010e-01  5.36e-08  3.18e-09  4.64e-08  8.98e-10  1.64e-08  9.90e-01  
  9  +4.0010e-01  +4.0010e-01  5.36e-10  3.18e-11  4.64e-10  8.98e-12  1.64e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 617.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:30 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:30 PM: Optimal value: 4.001e-01
(CVXPY) Oct 06 04:22:30 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:22:30 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:31 PM: Your problem has 56 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 56
  constraints   = 81
  nnz(P)        = 0
  nnz(A)        = 438
  cones (total) = 1
    : Nonnegative = 1,  numel = 81

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.7711e-01  +2.6866e+01  2.64e+01  8.52e-01  7.51e+00  1.00e+00  1.11e+00   ------   
  1  +4.8944e-01  +5.9823e+00  5.49e+00  3.87e-01  4.28e+00  3.82e-03  6.29e-01  5.88e-01  
  2  +3.8090e-01  +1.3000e+00  9.19e-01  8.79e-02  1.23e+00  2.64e-02  2.26e-01  9.90e-01  
  3  +3.1820e-01  +7.3272e-01  4.15e-01  2.70e-02  3.93e-01  1.52e-02  8.37e-02  7.23e-01  
  4  +2.6521e-01  +4.4782e-01  1.83e-01  9.09e-03  1.37e-01  6.24e-03  3.05e-02  7.52e-01  
  5  +2.3557e-01  +3.2712e-01  9.16e-02  4.02e-03  6.42e-02  3.27e-03  1.34e-02  6.10e-01  
  6  +2.1455e-01  +2.5160e-01  3.71e-02  1.52e-03  2.51e-02  1.23e-03  5.09e-03  6.75e-01  
  7  +2.0081e-01  +2.0178e-01  9.72e-04  3.98e-05  6.57e-04  1.71e-05  1.36e-04  9.80e-01  
  8  +2.0041e-01  +2.0043e-01  2.18e-05  9.09e-07  1.49e-05  2.60e-07  3.14e-06  9.77e-01  
  9  +2.0040e-01  +2.0040e-01  2.37e-07  9.95e-09  1.62e-07  2.83e-09  3.44e-08  9.89e-01  
 10  +2.0040e-01  +2.0040e-01  2.37e-09  9.96e-11  1.62e-09  2.83e-11  3.45e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 630.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:31 PM: Optimal value: 2.004e-01
(CVXPY) Oct 06 04:22:31 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:22:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2004
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:31 PM: Your problem has 66 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 66
  constraints   = 91
  nnz(P)        = 0
  nnz(A)        = 483
  cones (total) = 1
    : Nonnegative = 1,  numel = 91

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6414e-01  +2.7696e+01  2.72e+01  8.59e-01  7.30e+00  1.00e+00  1.14e+00   ------   
  1  +4.1102e-01  +6.2030e+00  5.79e+00  3.88e-01  4.06e+00  3.98e-03  6.31e-01  5.84e-01  
  2  +2.3933e-01  +1.4142e+00  1.17e+00  8.53e-02  1.11e+00  2.82e-02  2.17e-01  9.41e-01  
  3  +1.7126e-01  +4.8731e-01  3.16e-01  2.03e-02  2.72e-01  8.18e-03  6.24e-02  7.98e-01  
  4  +1.4249e-01  +2.6355e-01  1.21e-01  7.62e-03  1.04e-01  3.10e-03  2.46e-02  6.57e-01  
  5  +1.2533e-01  +1.5238e-01  2.70e-02  1.68e-03  2.31e-02  6.24e-04  5.71e-03  7.92e-01  
  6  +1.2056e-01  +1.2105e-01  4.91e-04  3.09e-05  4.22e-04  8.25e-06  1.07e-04  9.81e-01  
  7  +1.2046e-01  +1.2050e-01  4.27e-05  2.82e-06  3.74e-05  4.71e-07  1.06e-05  9.06e-01  
  8  +1.2045e-01  +1.2045e-01  5.47e-07  3.64e-08  4.81e-07  5.50e-09  1.41e-07  9.88e-01  
  9  +1.2045e-01  +1.2045e-01  5.47e-09  3.64e-10  4.81e-09  5.50e-11  1.41e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 677.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:31 PM: Optimal value: 1.205e-01
(CVXPY) Oct 06 04:22:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:31 PM: Your problem has 76 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 76
  constraints   = 101
  nnz(P)        = 0
  nnz(A)        = 514
  cones (total) = 1
    : Nonnegative = 1,  numel = 101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5000e-01  +2.8328e+01  2.79e+01  8.66e-01  7.05e+00  1.00e+00  1.16e+00   ------   
  1  +3.0699e-01  +6.3689e+00  6.06e+00  3.84e-01  3.77e+00  4.20e-03  6.23e-01  5.83e-01  
  2  +1.2209e-01  +1.2672e+00  1.15e+00  8.50e-02  1.02e+00  2.42e-02  2.05e-01  9.13e-01  
  3  +1.1388e-01  +3.2063e-01  2.07e-01  1.76e-02  2.10e-01  5.98e-03  4.91e-02  7.79e-01  
  4  +9.7605e-02  +2.2141e-01  1.24e-01  9.58e-03  1.22e-01  3.22e-03  2.81e-02  5.71e-01  
  5  +8.2246e-02  +9.4124e-02  1.19e-02  9.01e-04  1.15e-02  2.69e-04  2.86e-03  9.03e-01  
  6  +8.0608e-02  +8.0894e-02  2.86e-04  2.23e-05  2.82e-04  3.64e-06  7.22e-05  9.75e-01  
  7  +8.0554e-02  +8.0571e-02  1.70e-05  1.40e-06  1.71e-05  1.52e-07  5.00e-06  9.60e-01  
  8  +8.0550e-02  +8.0550e-02  1.72e-07  1.42e-08  1.73e-07  1.52e-09  5.10e-08  9.90e-01  
  9  +8.0550e-02  +8.0550e-02  1.72e-09  1.42e-10  1.73e-09  1.52e-11  5.10e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 817.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:31 PM: Optimal value: 8.055e-02
(CVXPY) Oct 06 04:22:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:31 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 4, Objective: 0.0806
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:31 PM: Your problem has 86 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 86
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 547
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.4012e-01  +2.8142e+01  2.77e+01  8.73e-01  6.83e+00  1.00e+00  1.16e+00   ------   
  1  +2.0937e-01  +6.6081e+00  6.40e+00  3.87e-01  3.56e+00  4.54e-03  6.11e-01  5.63e-01  
  2  +7.2045e-02  +1.1543e+00  1.08e+00  8.90e-02  9.69e-01  2.39e-02  2.08e-01  9.10e-01  
  3  +7.3712e-02  +2.5945e-01  1.86e-01  1.76e-02  1.91e-01  5.75e-03  4.77e-02  7.91e-01  
  4  +5.4295e-02  +1.3016e-01  7.59e-02  6.34e-03  7.16e-02  2.20e-03  1.94e-02  6.60e-01  
  5  +4.2497e-02  +5.3653e-02  1.12e-02  8.62e-04  9.97e-03  2.68e-04  2.87e-03  8.79e-01  
  6  +4.0723e-02  +4.1093e-02  3.70e-04  2.90e-05  3.33e-04  5.60e-06  9.93e-05  9.66e-01  
  7  +4.0656e-02  +4.0685e-02  2.89e-05  2.39e-06  2.66e-05  2.80e-07  9.01e-06  9.44e-01  
  8  +4.0650e-02  +4.0650e-02  2.98e-07  2.48e-08  2.74e-07  2.80e-09  9.42e-08  9.90e-01  
  9  +4.0650e-02  +4.0650e-02  2.98e-09  2.48e-10  2.74e-09  2.80e-11  9.42e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 762.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:31 PM: Optimal value: 4.065e-02
(CVXPY) Oct 06 04:22:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.0407
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:31 PM: Your problem has 96 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 96
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 601
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3622e-01  +2.8031e+01  2.76e+01  8.77e-01  6.73e+00  1.00e+00  1.15e+00   ------   
  1  +1.9573e-01  +6.9363e+00  6.74e+00  4.13e-01  3.59e+00  4.66e-03  6.24e-01  5.36e-01  
  2  +5.8133e-02  +1.3291e+00  1.27e+00  1.05e-01  1.12e+00  2.77e-02  2.35e-01  8.88e-01  
  3  +6.5752e-02  +3.1612e-01  2.50e-01  2.42e-02  2.62e-01  7.57e-03  6.38e-02  7.55e-01  
  4  +4.8167e-02  +1.7139e-01  1.23e-01  1.08e-02  1.22e-01  3.50e-03  3.12e-02  6.02e-01  
  5  +3.9505e-02  +1.1777e-01  7.83e-02  5.27e-03  6.97e-02  2.24e-03  1.63e-02  6.41e-01  
  6  +3.1994e-02  +8.3295e-02  5.13e-02  3.16e-03  4.37e-02  1.23e-03  1.00e-02  5.32e-01  
  7  +2.1800e-02  +2.5608e-02  3.81e-03  2.31e-04  3.22e-03  1.33e-05  7.62e-04  9.90e-01  
  8  +2.0861e-02  +2.1077e-02  2.15e-04  1.34e-05  1.83e-04  4.15e-07  4.56e-05  9.40e-01  
  9  +2.0802e-02  +2.0810e-02  8.01e-06  5.20e-07  6.94e-06  3.14e-08  1.86e-06  9.72e-01  
 10  +2.0800e-02  +2.0800e-02  8.07e-08  5.25e-09  7.00e-08  3.16e-10  1.88e-08  9.90e-01  
 11  +2.0800e-02  +2.0800e-02  8.07e-10  5.26e-11  7.00e-10  3.16e-12  1.88e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0275ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:31 PM: Optimal value: 2.080e-02
(CVXPY) Oct 06 04:22:31 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 6, Objective: 0.0208
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:31 PM: Your problem has 106 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Finished problem compilation (took 1.501e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 106
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 636
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.3269e-01  +2.7754e+01  2.73e+01  8.82e-01  6.56e+00  1.00e+00  1.13e+00   ------   
  1  +1.6627e-01  +7.4334e+00  7.27e+00  4.37e-01  3.58e+00  4.95e-03  6.31e-01  5.21e-01  
  2  +4.7928e-02  +1.5896e+00  1.54e+00  1.28e-01  1.31e+00  3.27e-02  2.75e-01  8.42e-01  
  3  +5.9688e-02  +2.7739e-01  2.18e-01  2.16e-02  2.29e-01  7.83e-03  5.68e-02  8.26e-01  
  4  +3.3738e-02  +1.5844e-01  1.25e-01  1.01e-02  1.18e-01  4.08e-03  2.93e-02  6.22e-01  
  5  +2.3254e-02  +1.0875e-01  8.55e-02  5.65e-03  7.39e-02  2.71e-03  1.73e-02  5.55e-01  
  6  +1.4087e-02  +6.9207e-02  5.51e-02  3.35e-03  4.55e-02  1.48e-03  1.05e-02  5.29e-01  
  7  +1.9274e-03  +5.8197e-03  3.89e-03  2.32e-04  3.18e-03  1.49e-05  7.58e-04  9.90e-01  
  8  +9.4126e-04  +1.0913e-03  1.50e-04  9.25e-06  1.24e-04  1.53e-07  3.13e-05  9.59e-01  
  9  +9.0104e-04  +9.0415e-04  3.11e-06  2.03e-07  2.64e-06  4.61e-09  7.12e-07  9.78e-01  
 10  +9.0001e-04  +9.0004e-04  3.11e-08  2.03e-09  2.64e-08  4.61e-11  7.13e-09  9.90e-01  
 11  +9.0000e-04  +9.0000e-04  3.12e-10  2.04e-11  2.65e-10  4.62e-13  7.14e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 986.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:31 PM: Optimal value: 9.000e-04
(CVXPY) Oct 06 04:22:31 PM: Compilation took 1.501e-02 seconds
(CVXPY) Oct 06 04:22:31 PM: Solver (including time spent in interface) took 5.263e-03 seconds
Iteration: 7, Objective: 0.0009
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:31 PM: Your problem has 116 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Finished problem compilation (took 1.554e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 116
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 677
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2072e-01  +2.7676e+01  2.73e+01  8.85e-01  6.44e+00  1.00e+00  1.12e+00   ------   
  1  +7.7084e-02  +7.7407e+00  7.66e+00  4.44e-01  3.47e+00  5.28e-03  6.22e-01  5.41e-01  
  2  +3.7843e-02  +1.4766e+00  1.44e+00  1.35e-01  1.31e+00  3.31e-02  2.80e-01  8.47e-01  
  3  +3.9628e-02  +2.4710e-01  2.07e-01  2.20e-02  2.22e-01  6.75e-03  5.75e-02  8.28e-01  
  4  +2.1172e-02  +1.5587e-01  1.35e-01  1.22e-02  1.32e-01  3.96e-03  3.51e-02  5.10e-01  
  5  +6.6544e-03  +4.7199e-02  4.05e-02  3.37e-03  3.75e-02  1.16e-03  1.06e-02  7.13e-01  
  6  +9.5424e-04  +1.9979e-03  1.04e-03  8.75e-05  9.70e-04  1.14e-05  2.85e-04  9.86e-01  
  7  +8.1316e-04  +9.0695e-04  9.38e-05  8.46e-06  8.93e-05  6.70e-07  2.96e-05  8.99e-01  
  8  +8.0057e-04  +8.0505e-04  4.48e-06  4.12e-07  4.30e-06  3.10e-08  1.47e-06  9.56e-01  
  9  +8.0001e-04  +8.0005e-04  4.48e-08  4.12e-09  4.31e-08  3.11e-10  1.47e-08  9.90e-01  
 10  +8.0000e-04  +8.0000e-04  4.49e-10  4.13e-11  4.31e-10  3.11e-12  1.47e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.1259ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:31 PM: Optimal value: 8.000e-04
(CVXPY) Oct 06 04:22:31 PM: Compilation took 1.554e-02 seconds
(CVXPY) Oct 06 04:22:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 8, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:31 PM: Your problem has 117 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:31 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:31 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:31 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:31 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:31 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:31 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:31 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:31 PM: Finished problem compilation (took 1.503e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 117
  constraints   = 142
  nnz(P)        = 0
  nnz(A)        = 683
  cones (total) = 1
    : Nonnegative = 1,  numel = 142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2050e-01  +2.7715e+01  2.73e+01  8.86e-01  6.44e+00  1.00e+00  1.13e+00   ------   
  1  +7.3027e-02  +7.7404e+00  7.67e+00  4.44e-01  3.47e+00  5.28e-03  6.21e-01  5.42e-01  
  2  +3.4773e-02  +1.4870e+00  1.45e+00  1.36e-01  1.32e+00  3.29e-02  2.83e-01  8.41e-01  
  3  +3.8752e-02  +2.4571e-01  2.07e-01  2.21e-02  2.23e-01  6.75e-03  5.78e-02  8.31e-01  
  4  +2.1208e-02  +1.5819e-01  1.37e-01  1.25e-02  1.35e-01  4.05e-03  3.60e-02  4.99e-01  
  5  +7.2816e-03  +5.2776e-02  4.55e-02  3.79e-03  4.23e-02  1.33e-03  1.19e-02  6.85e-01  
  6  +1.0247e-03  +2.6455e-03  1.62e-03  1.36e-04  1.52e-03  1.29e-05  4.46e-04  9.88e-01  
  7  +8.1733e-04  +9.5404e-04  1.37e-04  1.23e-05  1.31e-04  6.26e-07  4.28e-05  9.06e-01  
  8  +8.0360e-04  +8.3082e-04  2.72e-05  2.50e-06  2.62e-05  1.52e-07  8.93e-06  9.47e-01  
  9  +8.0004e-04  +8.0031e-04  2.77e-07  2.55e-08  2.67e-07  1.54e-09  9.14e-08  9.90e-01  
 10  +8.0000e-04  +8.0000e-04  2.77e-09  2.55e-10  2.67e-09  1.54e-11  9.14e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 971.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:31 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:31 PM: Optimal value: 8.000e-04
(CVXPY) Oct 06 04:22:31 PM: Compilation took 1.503e-02 seconds
(CVXPY) Oct 06 04:22:31 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 9, Objective: 0.0008
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:32 PM: Your problem has 118 variables, 25 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:32 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:32 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:32 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:32 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:32 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:32 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:32 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:32 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:32 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:32 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:32 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:32 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 118
  constraints   = 143
  nnz(P)        = 0
  nnz(A)        = 689
  cones (total) = 1
    : Nonnegative = 1,  numel = 143

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2048e-01  +2.7752e+01  2.73e+01  8.86e-01  6.43e+00  1.00e+00  1.13e+00   ------   
  1  +6.6804e-02  +7.7248e+00  7.66e+00  4.42e-01  3.45e+00  5.29e-03  6.20e-01  5.45e-01  
  2  +3.2085e-02  +1.5448e+00  1.51e+00  1.40e-01  1.37e+00  3.22e-02  2.91e-01  8.17e-01  
  3  +3.6573e-02  +2.7766e-01  2.41e-01  2.57e-02  2.61e-01  7.31e-03  6.65e-02  8.01e-01  
  4  +1.6102e-02  +1.2497e-01  1.09e-01  1.01e-02  1.08e-01  3.18e-03  2.95e-02  6.17e-01  
  5  +4.0925e-03  +3.3589e-02  2.95e-02  2.57e-03  2.83e-02  6.44e-04  8.05e-03  8.23e-01  
  6  +8.8351e-04  +1.5407e-03  6.57e-04  5.80e-05  6.32e-04  9.27e-06  1.86e-04  9.77e-01  
  7  +8.2262e-04  +1.0478e-03  2.25e-04  2.09e-05  2.19e-04  2.79e-06  7.23e-05  6.65e-01  
  8  +8.0250e-04  +8.2168e-04  1.92e-05  1.83e-06  1.89e-05  1.27e-07  6.47e-06  9.90e-01  
  9  +8.0003e-04  +8.0023e-04  2.01e-07  1.92e-08  1.98e-07  1.33e-09  6.80e-08  9.89e-01  
 10  +8.0000e-04  +8.0000e-04  2.01e-09  1.92e-10  1.98e-09  1.33e-11  6.80e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 985.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:32 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:32 PM: Optimal value: 8.000e-04
(CVXPY) Oct 06 04:22:32 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:32 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x2 = 0 AND x6 = 1)                                  <-- (term's our objective: 0.28)
 OR (x0 = 0 AND x3 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.36)
 OR (x0 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x4 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.16)
 OR (x1 = 1 AND x2 = 0 AND x3 = 1 AND x5 = 1)                       <-- (term's our objective: 0.16)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x7 = 1)            <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x3 = 0 AND x6 = 0)                                  <-- (term's our objective: 0.12)
 OR (x2 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0)                       <-- (term's our objective: 0.08)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.2775473594665527
Best over terms:
  Our final objective: 0.36
    Its accruacy: 0.68
    Its hamming distance: 4
  Shortest hamming distance: 2
    Its our objective: 0.28
  Highest accruacy: 0.68
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

