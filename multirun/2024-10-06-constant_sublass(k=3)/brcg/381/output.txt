Command:
python test_script.py -s constant_subclass -d 10 -n 1000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.18
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 10.

Computed total variation: 0.71
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:44 PM: Your problem has 521 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:44 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 521
  constraints   = 1021
  nnz(P)        = 0
  nnz(A)        = 6521
  cones (total) = 1
    : Nonnegative = 1,  numel = 1021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9997e-01  +5.0094e+02  5.00e+02  9.56e-01  3.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7788e-01  +1.1024e+02  1.10e+02  4.26e-01  2.44e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2768e-01  +1.2168e+01  1.16e+01  1.48e-01  1.08e+01  1.81e-02  2.82e-01  9.77e-01  
  3  +5.0554e-01  +3.0283e+00  2.52e+00  5.35e-02  3.84e+00  4.81e-05  2.30e-01  5.81e-01  
  4  +5.0071e-01  +8.4220e-01  3.41e-01  7.70e-03  5.79e-01  1.29e-05  7.24e-02  7.80e-01  
  5  +4.9867e-01  +8.2250e-01  3.24e-01  4.01e-03  3.08e-01  4.92e-05  1.33e-02  8.81e-01  
  6  +4.8870e-01  +7.4406e-01  2.55e-01  9.02e-04  6.99e-02  1.61e-04  2.66e-03  8.01e-01  
  7  +4.7167e-01  +6.2485e-01  1.53e-01  4.23e-04  3.25e-02  8.83e-05  1.36e-03  5.98e-01  
  8  +4.4956e-01  +4.9931e-01  4.97e-02  1.24e-04  9.48e-03  7.55e-06  4.54e-04  9.77e-01  
  9  +4.3627e-01  +4.4261e-01  6.34e-03  1.35e-05  1.03e-03  2.48e-06  5.72e-05  9.88e-01  
 10  +4.3413e-01  +4.3422e-01  8.86e-05  1.83e-07  1.40e-05  3.33e-08  8.06e-07  9.86e-01  
 11  +4.3410e-01  +4.3410e-01  8.86e-07  1.83e-09  1.40e-07  3.33e-10  8.06e-09  9.90e-01  
 12  +4.3410e-01  +4.3410e-01  8.86e-09  1.83e-11  1.40e-09  3.34e-12  8.07e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 11.796ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:44 PM: Optimal value: 4.341e-01
(CVXPY) Oct 06 04:24:44 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:24:44 PM: Solver (including time spent in interface) took 1.560e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4341
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:44 PM: Your problem has 531 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:44 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 531
  constraints   = 1031
  nnz(P)        = 0
  nnz(A)        = 7378
  cones (total) = 1
    : Nonnegative = 1,  numel = 1031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9996e-01  +5.0124e+02  5.01e+02  9.56e-01  3.84e+01  1.00e+00  1.01e+00   ------   
  1  +5.7729e-01  +1.1033e+02  1.10e+02  4.28e-01  2.49e+01  3.75e-03  5.88e-01  5.76e-01  
  2  +5.2686e-01  +1.2016e+01  1.15e+01  1.47e-01  1.09e+01  1.83e-02  2.80e-01  9.88e-01  
  3  +5.0526e-01  +2.9610e+00  2.46e+00  5.24e-02  3.86e+00  4.95e-05  2.21e-01  6.32e-01  
  4  +5.0076e-01  +8.9270e-01  3.92e-01  8.88e-03  6.83e-01  1.41e-05  7.20e-02  7.49e-01  
  5  +4.9891e-01  +9.1045e-01  4.12e-01  5.50e-03  4.32e-01  4.64e-05  1.79e-02  8.22e-01  
  6  +4.8809e-01  +8.0562e-01  3.18e-01  1.13e-03  9.04e-02  1.62e-04  3.22e-03  8.22e-01  
  7  +4.8123e-01  +7.3295e-01  2.52e-01  8.18e-04  6.49e-02  1.14e-04  2.35e-03  4.75e-01  
  8  +4.8069e-01  +7.2043e-01  2.40e-01  7.68e-04  6.09e-02  1.01e-04  2.21e-03  2.68e-01  
  9  +4.6750e-01  +6.3293e-01  1.65e-01  3.95e-04  3.12e-02  8.57e-05  1.15e-03  5.22e-01  
 10  +4.6223e-01  +6.1622e-01  1.54e-01  3.01e-04  2.38e-02  9.18e-05  8.70e-04  3.41e-01  
 11  +4.4635e-01  +5.3994e-01  9.36e-02  1.85e-04  1.45e-02  4.18e-05  5.61e-04  9.13e-01  
 12  +4.2232e-01  +4.5391e-01  3.16e-02  5.04e-05  3.95e-03  1.68e-05  1.60e-04  7.58e-01  
 13  +4.1075e-01  +4.1224e-01  1.49e-03  2.36e-06  1.85e-04  6.31e-07  7.85e-06  9.57e-01  
 14  +4.1011e-01  +4.1012e-01  1.51e-05  2.40e-08  1.87e-06  6.36e-09  8.00e-08  9.90e-01  
 15  +4.1010e-01  +4.1010e-01  1.51e-07  2.40e-10  1.87e-08  6.36e-11  8.00e-10  9.90e-01  
 16  +4.1010e-01  +4.1010e-01  1.51e-09  2.40e-12  1.87e-10  6.36e-13  8.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.1612ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:44 PM: Optimal value: 4.101e-01
(CVXPY) Oct 06 04:24:44 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:44 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 2, Objective: 0.4101
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:44 PM: Your problem has 541 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:44 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 541
  constraints   = 1041
  nnz(P)        = 0
  nnz(A)        = 7849
  cones (total) = 1
    : Nonnegative = 1,  numel = 1041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9987e-01  +5.0107e+02  5.01e+02  9.57e-01  3.86e+01  1.00e+00  1.01e+00   ------   
  1  +5.7582e-01  +1.1039e+02  1.10e+02  4.30e-01  2.49e+01  3.76e-03  5.89e-01  5.75e-01  
  2  +5.2572e-01  +1.2119e+01  1.16e+01  1.47e-01  1.09e+01  1.86e-02  2.79e-01  9.90e-01  
  3  +5.0584e-01  +2.7210e+00  2.22e+00  5.04e-02  3.79e+00  5.63e-05  1.76e-01  7.74e-01  
  4  +5.0081e-01  +1.0582e+00  5.57e-01  1.32e-02  1.01e+00  2.94e-05  7.14e-02  6.71e-01  
  5  +4.9411e-01  +1.1153e+00  6.21e-01  4.18e-03  3.35e-01  1.53e-04  1.16e-02  9.18e-01  
  6  +4.7651e-01  +8.7798e-01  4.01e-01  1.29e-03  1.03e-01  2.18e-04  3.56e-03  7.19e-01  
  7  +4.6517e-01  +8.1859e-01  3.53e-01  8.02e-04  6.43e-02  2.35e-04  2.21e-03  5.42e-01  
  8  +4.5281e-01  +7.4659e-01  2.94e-01  5.76e-04  4.61e-02  2.04e-04  1.61e-03  3.49e-01  
  9  +4.2365e-01  +5.5119e-01  1.28e-01  2.52e-04  1.99e-02  4.95e-05  7.59e-04  9.06e-01  
 10  +3.9295e-01  +4.2511e-01  3.22e-02  5.74e-05  4.53e-03  1.14e-05  1.85e-04  7.90e-01  
 11  +3.8621e-01  +4.0044e-01  1.42e-02  2.49e-05  1.96e-03  8.30e-06  8.40e-05  8.70e-01  
 12  +3.8266e-01  +3.8808e-01  5.42e-03  9.42e-06  7.43e-04  3.36e-06  3.22e-05  7.15e-01  
 13  +3.8044e-01  +3.8065e-01  2.07e-04  3.58e-07  2.83e-05  1.30e-07  1.24e-06  9.81e-01  
 14  +3.8035e-01  +3.8035e-01  3.01e-06  5.21e-09  4.11e-07  1.88e-09  1.80e-08  9.86e-01  
 15  +3.8035e-01  +3.8035e-01  3.01e-08  5.21e-11  4.11e-09  1.88e-11  1.80e-10  9.90e-01  
 16  +3.8035e-01  +3.8035e-01  3.01e-10  5.21e-13  4.11e-11  1.88e-13  1.80e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.3783ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:44 PM: Optimal value: 3.804e-01
(CVXPY) Oct 06 04:24:44 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:44 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 3, Objective: 0.3804
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:44 PM: Your problem has 551 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:44 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 551
  constraints   = 1051
  nnz(P)        = 0
  nnz(A)        = 8051
  cones (total) = 1
    : Nonnegative = 1,  numel = 1051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9982e-01  +5.0159e+02  5.01e+02  9.57e-01  3.84e+01  1.00e+00  1.01e+00   ------   
  1  +5.7384e-01  +1.1045e+02  1.10e+02  4.30e-01  2.47e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2464e-01  +1.2308e+01  1.18e+01  1.46e-01  1.07e+01  1.88e-02  2.77e-01  9.90e-01  
  3  +5.0620e-01  +2.3068e+00  1.80e+00  4.13e-02  3.20e+00  6.30e-05  1.26e-01  8.87e-01  
  4  +5.0004e-01  +1.0672e+00  5.67e-01  1.01e-02  8.07e-01  9.42e-05  3.16e-02  8.33e-01  
  5  +4.8722e-01  +1.0167e+00  5.30e-01  2.13e-03  1.74e-01  4.39e-04  5.48e-03  8.38e-01  
  6  +4.6562e-01  +8.6752e-01  4.02e-01  1.07e-03  8.65e-02  4.26e-04  2.84e-03  5.76e-01  
  7  +4.4115e-01  +7.5384e-01  3.13e-01  6.84e-04  5.48e-02  3.30e-04  1.89e-03  4.27e-01  
  8  +4.0546e-01  +5.8615e-01  1.81e-01  3.72e-04  2.96e-02  1.41e-04  1.12e-03  5.10e-01  
  9  +3.7014e-01  +4.3998e-01  6.98e-02  1.37e-04  1.08e-02  3.33e-05  4.60e-04  9.88e-01  
 10  +3.5024e-01  +3.6200e-01  1.18e-02  2.22e-05  1.75e-03  5.18e-06  8.13e-05  8.58e-01  
 11  +3.4604e-01  +3.4668e-01  6.37e-04  1.19e-06  9.39e-05  2.71e-07  4.53e-06  9.48e-01  
 12  +3.4580e-01  +3.4581e-01  6.41e-06  1.20e-08  9.45e-07  2.73e-09  4.57e-08  9.90e-01  
 13  +3.4580e-01  +3.4580e-01  6.41e-08  1.20e-10  9.45e-09  2.73e-11  4.57e-10  9.90e-01  
 14  +3.4580e-01  +3.4580e-01  6.41e-10  1.20e-12  9.45e-11  2.73e-13  4.57e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.0335ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:44 PM: Optimal value: 3.458e-01
(CVXPY) Oct 06 04:24:44 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:24:44 PM: Solver (including time spent in interface) took 1.563e-02 seconds
Iteration: 4, Objective: 0.3458
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:45 PM: Your problem has 561 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:45 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 561
  constraints   = 1061
  nnz(P)        = 0
  nnz(A)        = 8250
  cones (total) = 1
    : Nonnegative = 1,  numel = 1061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9978e-01  +5.0174e+02  5.01e+02  9.57e-01  3.83e+01  1.00e+00  1.01e+00   ------   
  1  +5.7251e-01  +1.1045e+02  1.10e+02  4.31e-01  2.45e+01  3.76e-03  5.88e-01  5.76e-01  
  2  +5.2369e-01  +1.2438e+01  1.19e+01  1.46e-01  1.06e+01  1.90e-02  2.76e-01  9.90e-01  
  3  +5.0762e-01  +2.7626e+00  2.25e+00  4.75e-02  3.70e+00  1.39e-03  1.27e-01  7.65e-01  
  4  +5.0271e-01  +1.9715e+00  1.47e+00  2.06e-02  1.65e+00  2.90e-03  5.37e-02  7.51e-01  
  5  +5.0078e-01  +1.9872e+00  1.49e+00  1.38e-02  1.11e+00  1.43e-03  3.53e-02  8.51e-01  
  6  +4.8663e-01  +1.6439e+00  1.16e+00  3.48e-03  2.86e-01  3.48e-03  8.47e-03  7.62e-01  
  7  +4.6897e-01  +1.3072e+00  8.38e-01  2.26e-03  1.84e-01  1.92e-03  5.74e-03  4.80e-01  
  8  +4.5179e-01  +1.0627e+00  6.11e-01  1.43e-03  1.16e-01  9.05e-04  3.77e-03  5.94e-01  
  9  +4.3498e-01  +9.0332e-01  4.68e-01  1.12e-03  8.99e-02  4.64e-04  3.07e-03  4.01e-01  
 10  +3.9083e-01  +6.0891e-01  2.18e-01  4.57e-04  3.63e-02  1.59e-04  1.37e-03  6.56e-01  
 11  +3.6418e-01  +4.7263e-01  1.08e-01  2.23e-04  1.76e-02  7.29e-05  7.25e-04  5.01e-01  
 12  +3.4292e-01  +3.7382e-01  3.09e-02  6.11e-05  4.84e-03  1.94e-05  2.17e-04  8.98e-01  
 13  +3.3918e-01  +3.5885e-01  1.97e-02  3.81e-05  3.03e-03  1.22e-05  1.39e-04  6.36e-01  
 14  +3.3271e-01  +3.3438e-01  1.67e-03  3.21e-06  2.56e-04  9.85e-07  1.23e-05  9.16e-01  
 15  +3.3211e-01  +3.3212e-01  1.70e-05  3.26e-08  2.60e-06  9.92e-09  1.25e-07  9.90e-01  
 16  +3.3210e-01  +3.3210e-01  1.70e-07  3.26e-10  2.60e-08  9.92e-11  1.25e-09  9.90e-01  
 17  +3.3210e-01  +3.3210e-01  1.70e-09  3.26e-12  2.60e-10  9.92e-13  1.25e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.6667ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:45 PM: Optimal value: 3.321e-01
(CVXPY) Oct 06 04:24:45 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:45 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 5, Objective: 0.3321
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:45 PM: Your problem has 571 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:45 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 571
  constraints   = 1071
  nnz(P)        = 0
  nnz(A)        = 8479
  cones (total) = 1
    : Nonnegative = 1,  numel = 1071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9975e-01  +5.0177e+02  5.01e+02  9.57e-01  3.82e+01  1.00e+00  1.01e+00   ------   
  1  +5.7162e-01  +1.1041e+02  1.10e+02  4.32e-01  2.44e+01  3.76e-03  5.87e-01  5.77e-01  
  2  +5.2297e-01  +1.2541e+01  1.20e+01  1.46e-01  1.05e+01  1.91e-02  2.74e-01  9.90e-01  
  3  +5.0904e-01  +3.5522e+00  3.04e+00  5.81e-02  4.50e+00  3.10e-03  1.43e-01  6.31e-01  
  4  +4.9942e-01  +1.5954e+00  1.10e+00  1.69e-02  1.35e+00  4.41e-03  4.66e-02  9.90e-01  
  5  +4.8498e-01  +1.6387e+00  1.15e+00  5.01e-03  4.12e-01  1.20e-02  1.24e-02  8.83e-01  
  6  +4.6095e-01  +1.2863e+00  8.25e-01  2.14e-03  1.76e-01  1.20e-02  5.37e-03  6.69e-01  
  7  +4.3945e-01  +1.0713e+00  6.32e-01  1.45e-03  1.18e-01  7.93e-03  3.75e-03  3.93e-01  
  8  +4.2164e-01  +9.2787e-01  5.06e-01  1.11e-03  8.97e-02  5.63e-03  2.98e-03  2.62e-01  
  9  +3.8608e-01  +6.3721e-01  2.51e-01  5.83e-04  4.65e-02  4.82e-05  1.75e-03  8.08e-01  
 10  +3.5184e-01  +4.5357e-01  1.02e-01  2.22e-04  1.77e-02  2.03e-05  7.31e-04  6.16e-01  
 11  +3.3467e-01  +3.7470e-01  4.00e-02  8.33e-05  6.65e-03  1.50e-05  2.91e-04  7.89e-01  
 12  +3.2752e-01  +3.4536e-01  1.78e-02  3.58e-05  2.87e-03  8.55e-06  1.31e-04  7.81e-01  
 13  +3.2175e-01  +3.2303e-01  1.28e-03  2.53e-06  2.03e-04  6.00e-07  9.60e-06  9.43e-01  
 14  +3.2130e-01  +3.2132e-01  1.33e-05  2.63e-08  2.12e-06  6.25e-09  1.00e-07  9.90e-01  
 15  +3.2130e-01  +3.2130e-01  1.33e-07  2.63e-10  2.12e-08  6.25e-11  1.00e-09  9.90e-01  
 16  +3.2130e-01  +3.2130e-01  1.33e-09  2.63e-12  2.12e-10  6.25e-13  1.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.2243ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:45 PM: Optimal value: 3.213e-01
(CVXPY) Oct 06 04:24:45 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:45 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 6, Objective: 0.3213
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:45 PM: Your problem has 581 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:45 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 581
  constraints   = 1081
  nnz(P)        = 0
  nnz(A)        = 8634
  cones (total) = 1
    : Nonnegative = 1,  numel = 1081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9974e-01  +5.0166e+02  5.01e+02  9.57e-01  3.81e+01  1.00e+00  1.01e+00   ------   
  1  +5.7051e-01  +1.1036e+02  1.10e+02  4.33e-01  2.42e+01  3.77e-03  5.86e-01  5.77e-01  
  2  +5.2228e-01  +1.2624e+01  1.21e+01  1.46e-01  1.04e+01  1.92e-02  2.73e-01  9.90e-01  
  3  +5.0951e-01  +3.8555e+00  3.35e+00  6.03e-02  4.66e+00  3.83e-03  1.43e-01  5.90e-01  
  4  +4.9931e-01  +1.7201e+00  1.22e+00  1.78e-02  1.43e+00  4.82e-03  4.77e-02  9.90e-01  
  5  +4.8501e-01  +1.7488e+00  1.26e+00  5.75e-03  4.72e-01  1.16e-02  1.41e-02  8.54e-01  
  6  +4.5807e-01  +1.3197e+00  8.62e-01  2.20e-03  1.81e-01  1.19e-02  5.44e-03  7.17e-01  
  7  +4.4082e-01  +1.1752e+00  7.34e-01  1.61e-03  1.32e-01  9.23e-03  4.06e-03  3.66e-01  
  8  +4.1351e-01  +9.0127e-01  4.88e-01  1.15e-03  9.29e-02  2.57e-03  3.11e-03  4.73e-01  
  9  +3.5885e-01  +5.2837e-01  1.70e-01  3.72e-04  2.96e-02  4.08e-04  1.14e-03  7.17e-01  
 10  +3.3520e-01  +4.1893e-01  8.37e-02  1.78e-04  1.43e-02  1.63e-04  5.88e-04  6.19e-01  
 11  +3.2532e-01  +3.7508e-01  4.98e-02  1.04e-04  8.34e-03  8.53e-05  3.58e-04  5.06e-01  
 12  +3.1426e-01  +3.2760e-01  1.33e-02  2.71e-05  2.20e-03  1.58e-05  1.00e-04  8.55e-01  
 13  +3.0986e-01  +3.1058e-01  7.20e-04  1.45e-06  1.18e-04  5.76e-07  5.55e-06  9.70e-01  
 14  +3.0960e-01  +3.0961e-01  7.38e-06  1.49e-08  1.21e-06  5.86e-09  5.70e-08  9.90e-01  
 15  +3.0960e-01  +3.0960e-01  7.38e-08  1.49e-10  1.21e-08  5.86e-11  5.70e-10  9.90e-01  
 16  +3.0960e-01  +3.0960e-01  7.38e-10  1.49e-12  1.21e-10  5.86e-13  5.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.9966ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:45 PM: Optimal value: 3.096e-01
(CVXPY) Oct 06 04:24:45 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:24:45 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 7, Objective: 0.3096
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:45 PM: Your problem has 591 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:45 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:45 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:45 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:45 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:45 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:45 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:45 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:45 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:45 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:45 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 591
  constraints   = 1091
  nnz(P)        = 0
  nnz(A)        = 8816
  cones (total) = 1
    : Nonnegative = 1,  numel = 1091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9973e-01  +5.0171e+02  5.01e+02  9.58e-01  3.79e+01  1.00e+00  1.01e+00   ------   
  1  +5.6969e-01  +1.1036e+02  1.10e+02  4.34e-01  2.40e+01  3.77e-03  5.86e-01  5.77e-01  
  2  +5.2180e-01  +1.2685e+01  1.22e+01  1.45e-01  1.03e+01  1.93e-02  2.72e-01  9.90e-01  
  3  +5.0959e-01  +3.9496e+00  3.44e+00  6.02e-02  4.63e+00  4.12e-03  1.41e-01  5.79e-01  
  4  +4.9919e-01  +1.7632e+00  1.26e+00  1.73e-02  1.39e+00  4.99e-03  4.53e-02  9.90e-01  
  5  +4.8760e-01  +1.8273e+00  1.34e+00  6.82e-03  5.60e-01  9.72e-03  1.66e-02  8.14e-01  
  6  +4.6208e-01  +1.4328e+00  9.71e-01  2.59e-03  2.13e-01  1.21e-02  6.31e-03  6.95e-01  
  7  +4.3939e-01  +1.2545e+00  8.15e-01  1.71e-03  1.40e-01  1.09e-02  4.25e-03  3.81e-01  
  8  +4.1267e-01  +9.3931e-01  5.27e-01  1.25e-03  1.00e-01  2.99e-03  3.33e-03  4.25e-01  
  9  +3.5110e-01  +5.0797e-01  1.57e-01  3.39e-04  2.70e-02  2.94e-04  1.04e-03  7.73e-01  
 10  +3.2362e-01  +3.8580e-01  6.22e-02  1.32e-04  1.07e-02  9.69e-05  4.39e-04  6.94e-01  
 11  +3.1296e-01  +3.3839e-01  2.54e-02  5.34e-05  4.35e-03  3.13e-05  1.87e-04  7.32e-01  
 12  +3.0725e-01  +3.1477e-01  7.52e-03  1.56e-05  1.27e-03  8.25e-06  5.65e-05  7.60e-01  
 13  +3.0538e-01  +3.0730e-01  1.92e-03  3.96e-06  3.23e-04  1.99e-06  1.47e-05  7.60e-01  
 14  +3.0480e-01  +3.0505e-01  2.55e-04  5.19e-07  4.21e-05  1.57e-07  1.98e-06  9.74e-01  
 15  +3.0470e-01  +3.0470e-01  2.93e-06  5.94e-09  4.83e-07  1.80e-09  2.28e-08  9.89e-01  
 16  +3.0470e-01  +3.0470e-01  2.94e-08  5.96e-11  4.84e-09  1.80e-11  2.28e-10  9.90e-01  
 17  +3.0470e-01  +3.0470e-01  2.96e-10  6.01e-13  4.88e-11  1.82e-13  2.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.1175ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:45 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:45 PM: Optimal value: 3.047e-01
(CVXPY) Oct 06 04:24:45 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:45 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 8, Objective: 0.3047
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:46 PM: Your problem has 601 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 601
  constraints   = 1101
  nnz(P)        = 0
  nnz(A)        = 8966
  cones (total) = 1
    : Nonnegative = 1,  numel = 1101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9969e-01  +5.0159e+02  5.01e+02  9.58e-01  3.78e+01  1.00e+00  1.01e+00   ------   
  1  +5.6811e-01  +1.1039e+02  1.10e+02  4.35e-01  2.39e+01  3.77e-03  5.86e-01  5.77e-01  
  2  +5.2085e-01  +1.2816e+01  1.23e+01  1.45e-01  1.02e+01  1.95e-02  2.71e-01  9.90e-01  
  3  +5.0945e-01  +3.9840e+00  3.47e+00  5.80e-02  4.47e+00  4.40e-03  1.34e-01  5.79e-01  
  4  +5.0248e-01  +2.5419e+00  2.04e+00  2.65e-02  2.12e+00  5.00e-03  6.46e-02  6.93e-01  
  5  +4.9311e-01  +2.6408e+00  2.15e+00  1.10e-02  8.99e-01  5.74e-03  2.56e-02  9.75e-01  
  6  +4.6685e-01  +1.9236e+00  1.46e+00  3.60e-03  2.98e-01  7.65e-03  8.46e-03  7.04e-01  
  7  +4.3956e-01  +1.4768e+00  1.04e+00  2.27e-03  1.86e-01  4.62e-03  5.56e-03  4.40e-01  
  8  +4.1215e-01  +1.0361e+00  6.24e-01  1.53e-03  1.23e-01  8.16e-04  4.02e-03  5.91e-01  
  9  +3.5295e-01  +5.5282e-01  2.00e-01  4.55e-04  3.61e-02  1.39e-04  1.36e-03  7.24e-01  
 10  +3.2202e-01  +4.0113e-01  7.91e-02  1.76e-04  1.42e-02  5.25e-05  5.83e-04  6.72e-01  
 11  +3.1105e-01  +3.5046e-01  3.94e-02  8.65e-05  7.01e-03  2.55e-05  3.00e-04  5.70e-01  
 12  +3.0216e-01  +3.1029e-01  8.13e-03  1.77e-05  1.43e-03  5.05e-06  6.44e-05  8.01e-01  
 13  +3.0003e-01  +3.0084e-01  8.12e-04  1.77e-06  1.43e-04  4.91e-07  6.55e-06  9.03e-01  
 14  +2.9982e-01  +2.9994e-01  1.23e-04  2.67e-07  2.16e-05  7.42e-08  9.92e-07  8.59e-01  
 15  +2.9978e-01  +2.9979e-01  5.82e-06  1.26e-08  1.02e-06  3.04e-09  4.69e-08  9.90e-01  
 16  +2.9978e-01  +2.9978e-01  5.82e-08  1.26e-10  1.02e-08  3.05e-11  4.70e-10  9.90e-01  
 17  +2.9978e-01  +2.9978e-01  5.83e-10  1.26e-12  1.02e-10  3.05e-13  4.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.4482ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:46 PM: Optimal value: 2.998e-01
(CVXPY) Oct 06 04:24:46 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:46 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 9, Objective: 0.2998
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:46 PM: Your problem has 611 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 611
  constraints   = 1111
  nnz(P)        = 0
  nnz(A)        = 9051
  cones (total) = 1
    : Nonnegative = 1,  numel = 1111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9965e-01  +5.0177e+02  5.01e+02  9.58e-01  3.76e+01  1.00e+00  1.01e+00   ------   
  1  +5.6616e-01  +1.1047e+02  1.10e+02  4.36e-01  2.37e+01  3.77e-03  5.87e-01  5.77e-01  
  2  +5.1970e-01  +1.3003e+01  1.25e+01  1.45e-01  1.02e+01  1.97e-02  2.70e-01  9.90e-01  
  3  +5.0888e-01  +3.8518e+00  3.34e+00  5.30e-02  4.12e+00  4.43e-03  1.22e-01  6.00e-01  
  4  +5.0585e-01  +3.2268e+00  2.72e+00  3.59e-02  2.85e+00  4.79e-03  8.36e-02  3.44e-01  
  5  +5.0059e-01  +2.9772e+00  2.48e+00  2.49e-02  1.98e+00  2.89e-03  6.02e-02  6.65e-01  
  6  +4.7500e-01  +1.9106e+00  1.44e+00  4.02e-03  3.34e-01  7.30e-03  9.24e-03  8.50e-01  
  7  +4.5443e-01  +1.6140e+00  1.16e+00  2.89e-03  2.38e-01  5.31e-03  6.85e-03  3.42e-01  
  8  +4.3546e-01  +1.3499e+00  9.14e-01  2.25e-03  1.84e-01  3.09e-03  5.52e-03  3.30e-01  
  9  +3.9327e-01  +8.7379e-01  4.81e-01  1.22e-03  9.76e-02  2.74e-05  3.29e-03  8.09e-01  
 10  +3.3855e-01  +5.0483e-01  1.66e-01  3.95e-04  3.14e-02  1.73e-05  1.21e-03  6.76e-01  
 11  +3.1116e-01  +3.7464e-01  6.35e-02  1.45e-04  1.17e-02  1.21e-05  4.87e-04  6.77e-01  
 12  +3.0004e-01  +3.2395e-01  2.39e-02  5.39e-05  4.37e-03  7.12e-06  1.90e-04  7.34e-01  
 13  +2.9394e-01  +2.9707e-01  3.13e-03  7.01e-06  5.68e-04  9.50e-07  2.59e-05  8.76e-01  
 14  +2.9306e-01  +2.9330e-01  2.41e-04  5.40e-07  4.37e-05  7.60e-08  2.01e-06  9.28e-01  
 15  +2.9300e-01  +2.9305e-01  5.14e-05  1.15e-07  9.30e-06  1.75e-08  4.28e-07  8.20e-01  
 16  +2.9298e-01  +2.9298e-01  5.76e-07  1.29e-09  1.04e-07  2.04e-10  4.81e-09  9.90e-01  
 17  +2.9298e-01  +2.9298e-01  5.77e-09  1.29e-11  1.05e-09  2.05e-12  4.82e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.5751ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:46 PM: Optimal value: 2.930e-01
(CVXPY) Oct 06 04:24:46 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:46 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 10, Objective: 0.2930
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:46 PM: Your problem has 621 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 621
  constraints   = 1121
  nnz(P)        = 0
  nnz(A)        = 9197
  cones (total) = 1
    : Nonnegative = 1,  numel = 1121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9961e-01  +5.0169e+02  5.01e+02  9.58e-01  3.75e+01  1.00e+00  1.01e+00   ------   
  1  +5.6509e-01  +1.1049e+02  1.10e+02  4.37e-01  2.35e+01  3.78e-03  5.87e-01  5.77e-01  
  2  +5.1904e-01  +1.3096e+01  1.26e+01  1.45e-01  1.01e+01  1.99e-02  2.70e-01  9.90e-01  
  3  +5.0834e-01  +3.6972e+00  3.19e+00  4.92e-02  3.82e+00  4.34e-03  1.13e-01  6.21e-01  
  4  +5.0653e-01  +3.3669e+00  2.86e+00  3.75e-02  2.96e+00  4.74e-03  8.61e-02  2.45e-01  
  5  +5.0171e-01  +3.0675e+00  2.57e+00  2.97e-02  2.33e+00  2.73e-03  7.33e-02  4.71e-01  
  6  +4.7503e-01  +1.7126e+00  1.24e+00  3.55e-03  2.96e-01  7.71e-03  8.14e-03  8.95e-01  
  7  +4.4625e-01  +1.4288e+00  9.83e-01  2.31e-03  1.91e-01  5.81e-03  5.48e-03  4.20e-01  
  8  +4.0959e-01  +9.9975e-01  5.90e-01  1.68e-03  1.35e-01  4.36e-05  4.41e-03  5.96e-01  
  9  +3.4629e-01  +5.7939e-01  2.33e-01  5.64e-04  4.48e-02  5.24e-05  1.66e-03  7.56e-01  
 10  +3.1274e-01  +4.0953e-01  9.68e-02  2.29e-04  1.84e-02  2.80e-05  7.52e-04  6.47e-01  
 11  +3.0029e-01  +3.5021e-01  4.99e-02  1.15e-04  9.36e-03  1.70e-05  3.97e-04  5.72e-01  
 12  +2.9197e-01  +3.0984e-01  1.79e-02  4.12e-05  3.33e-03  8.74e-06  1.49e-04  9.74e-01  
 13  +2.8913e-01  +2.9780e-01  8.67e-03  1.97e-05  1.59e-03  4.37e-06  7.26e-05  8.60e-01  
 14  +2.8704e-01  +2.8934e-01  2.30e-03  5.19e-06  4.20e-04  1.14e-06  1.97e-05  7.85e-01  
 15  +2.8645e-01  +2.8712e-01  6.73e-04  1.49e-06  1.20e-04  3.26e-07  5.85e-06  7.98e-01  
 16  +2.8621e-01  +2.8623e-01  1.94e-05  4.23e-08  3.42e-06  9.12e-09  1.69e-07  9.75e-01  
 17  +2.8620e-01  +2.8620e-01  1.94e-07  4.24e-10  3.42e-08  9.13e-11  1.70e-09  9.90e-01  
 18  +2.8620e-01  +2.8620e-01  1.94e-09  4.24e-12  3.42e-10  9.14e-13  1.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.3113ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:46 PM: Optimal value: 2.862e-01
(CVXPY) Oct 06 04:24:46 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:46 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 11, Objective: 0.2862
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:46 PM: Your problem has 631 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 631
  constraints   = 1131
  nnz(P)        = 0
  nnz(A)        = 9309
  cones (total) = 1
    : Nonnegative = 1,  numel = 1131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9960e-01  +5.0156e+02  5.01e+02  9.58e-01  3.74e+01  1.00e+00  1.01e+00   ------   
  1  +5.6405e-01  +1.1054e+02  1.10e+02  4.38e-01  2.34e+01  3.78e-03  5.86e-01  5.77e-01  
  2  +5.1844e-01  +1.3183e+01  1.27e+01  1.45e-01  9.99e+00  2.00e-02  2.69e-01  9.90e-01  
  3  +5.0789e-01  +3.5624e+00  3.05e+00  4.61e-02  3.58e+00  4.25e-03  1.06e-01  6.40e-01  
  4  +5.0660e-01  +3.3613e+00  2.85e+00  3.69e-02  2.91e+00  4.65e-03  8.45e-02  2.08e-01  
  5  +5.0173e-01  +3.1175e+00  2.62e+00  2.97e-02  2.32e+00  2.79e-03  7.25e-02  4.64e-01  
  6  +4.7510e-01  +1.7997e+00  1.32e+00  3.80e-03  3.16e-01  7.71e-03  8.69e-03  8.87e-01  
  7  +4.5020e-01  +1.5544e+00  1.10e+00  2.64e-03  2.18e-01  6.34e-03  6.20e-03  3.60e-01  
  8  +4.0983e-01  +1.0304e+00  6.21e-01  1.72e-03  1.38e-01  5.00e-05  4.44e-03  6.28e-01  
  9  +3.4528e-01  +5.9157e-01  2.46e-01  6.04e-04  4.77e-02  7.74e-05  1.78e-03  8.12e-01  
 10  +3.0911e-01  +4.0629e-01  9.72e-02  2.31e-04  1.84e-02  3.49e-05  7.59e-04  6.77e-01  
 11  +2.9675e-01  +3.4898e-01  5.22e-02  1.20e-04  9.73e-03  2.13e-05  4.12e-04  5.89e-01  
 12  +2.8785e-01  +3.0794e-01  2.01e-02  4.58e-05  3.69e-03  9.16e-06  1.65e-04  8.20e-01  
 13  +2.8284e-01  +2.8679e-01  3.95e-03  8.81e-06  7.12e-04  1.83e-06  3.35e-05  9.02e-01  
 14  +2.8182e-01  +2.8295e-01  1.13e-03  2.48e-06  2.00e-04  5.27e-07  9.75e-06  7.89e-01  
 15  +2.8142e-01  +2.8146e-01  4.31e-05  9.38e-08  7.56e-06  2.00e-08  3.75e-07  9.70e-01  
 16  +2.8140e-01  +2.8140e-01  4.36e-07  9.49e-10  7.64e-08  2.02e-10  3.79e-09  9.90e-01  
 17  +2.8140e-01  +2.8140e-01  4.36e-09  9.49e-12  7.64e-10  2.02e-12  3.80e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.1358ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:46 PM: Optimal value: 2.814e-01
(CVXPY) Oct 06 04:24:46 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:46 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 12, Objective: 0.2814
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:46 PM: Your problem has 641 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:46 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:46 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:46 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:46 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:46 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:46 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:46 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:46 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 641
  constraints   = 1141
  nnz(P)        = 0
  nnz(A)        = 9440
  cones (total) = 1
    : Nonnegative = 1,  numel = 1141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0163e+02  5.01e+02  9.59e-01  3.72e+01  1.00e+00  1.01e+00   ------   
  1  +5.6196e-01  +1.1060e+02  1.10e+02  4.38e-01  2.33e+01  3.78e-03  5.87e-01  5.77e-01  
  2  +5.1723e-01  +1.3356e+01  1.28e+01  1.44e-01  9.92e+00  2.03e-02  2.68e-01  9.90e-01  
  3  +5.0673e-01  +3.1830e+00  2.68e+00  3.87e-02  3.03e+00  3.88e-03  8.92e-02  6.99e-01  
  4  +5.0613e-01  +3.1934e+00  2.69e+00  3.35e-02  2.65e+00  4.29e-03  7.62e-02  1.76e-01  
  5  +5.0072e-01  +3.3899e+00  2.89e+00  2.54e-02  2.02e+00  3.54e-03  5.84e-02  6.12e-01  
  6  +4.7728e-01  +2.3530e+00  1.88e+00  5.74e-03  4.76e-01  7.06e-03  1.29e-02  7.83e-01  
  7  +4.5165e-01  +1.9051e+00  1.45e+00  3.77e-03  3.10e-01  5.03e-03  8.77e-03  4.18e-01  
  8  +4.2783e-01  +1.5286e+00  1.10e+00  2.69e-03  2.18e-01  2.86e-03  6.47e-03  4.04e-01  
  9  +3.6918e-01  +7.8141e-01  4.12e-01  1.04e-03  8.20e-02  2.46e-05  2.83e-03  8.05e-01  
 10  +3.2178e-01  +4.8575e-01  1.64e-01  4.07e-04  3.21e-02  1.94e-05  1.25e-03  6.13e-01  
 11  +3.0892e-01  +4.2372e-01  1.15e-01  2.80e-04  2.23e-02  2.06e-05  8.93e-04  3.91e-01  
 12  +2.9309e-01  +3.4661e-01  5.35e-02  1.27e-04  1.03e-02  1.25e-05  4.28e-04  5.94e-01  
 13  +2.8433e-01  +3.0473e-01  2.04e-02  4.75e-05  3.87e-03  9.34e-06  1.67e-04  9.30e-01  
 14  +2.8041e-01  +2.8741e-01  6.99e-03  1.60e-05  1.31e-03  3.43e-06  5.79e-05  8.56e-01  
 15  +2.7850e-01  +2.7984e-01  1.35e-03  3.05e-06  2.49e-04  6.61e-07  1.12e-05  8.64e-01  
 16  +2.7804e-01  +2.7807e-01  2.58e-05  5.84e-08  4.76e-06  1.25e-08  2.16e-07  9.83e-01  
 17  +2.7803e-01  +2.7803e-01  2.58e-07  5.84e-10  4.76e-08  1.25e-10  2.16e-09  9.90e-01  
 18  +2.7803e-01  +2.7803e-01  2.58e-09  5.84e-12  4.77e-10  1.25e-12  2.17e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.9036ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:46 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:46 PM: Optimal value: 2.780e-01
(CVXPY) Oct 06 04:24:46 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:46 PM: Solver (including time spent in interface) took 3.134e-02 seconds
Iteration: 13, Objective: 0.2780
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:47 PM: Your problem has 651 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:47 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 651
  constraints   = 1151
  nnz(P)        = 0
  nnz(A)        = 9530
  cones (total) = 1
    : Nonnegative = 1,  numel = 1151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0166e+02  5.01e+02  9.59e-01  3.71e+01  1.00e+00  1.01e+00   ------   
  1  +5.6007e-01  +1.1070e+02  1.10e+02  4.40e-01  2.31e+01  3.78e-03  5.87e-01  5.76e-01  
  2  +5.1603e-01  +1.3522e+01  1.30e+01  1.44e-01  9.86e+00  2.05e-02  2.68e-01  9.90e-01  
  3  +5.0550e-01  +2.7827e+00  2.28e+00  3.16e-02  2.49e+00  3.50e-03  7.31e-02  7.56e-01  
  4  +5.0500e-01  +2.9315e+00  2.43e+00  2.80e-02  2.23e+00  3.93e-03  6.35e-02  2.24e-01  
  5  +4.9639e-01  +3.4336e+00  2.94e+00  1.66e-02  1.35e+00  5.14e-03  3.67e-02  7.45e-01  
  6  +4.7141e-01  +2.5441e+00  2.07e+00  6.02e-03  4.97e-01  6.70e-03  1.35e-02  6.41e-01  
  7  +4.4245e-01  +2.0013e+00  1.56e+00  3.84e-03  3.14e-01  4.70e-03  8.91e-03  4.33e-01  
  8  +4.2257e-01  +1.6433e+00  1.22e+00  2.97e-03  2.41e-01  2.86e-03  7.14e-03  3.21e-01  
  9  +3.6827e-01  +8.3916e-01  4.71e-01  1.21e-03  9.50e-02  2.43e-05  3.25e-03  8.33e-01  
 10  +3.1992e-01  +5.0503e-01  1.85e-01  4.70e-04  3.67e-02  1.93e-05  1.43e-03  6.10e-01  
 11  +3.0349e-01  +4.2307e-01  1.20e-01  2.95e-04  2.34e-02  2.10e-05  9.42e-04  4.52e-01  
 12  +2.8902e-01  +3.5045e-01  6.14e-02  1.48e-04  1.19e-02  1.30e-05  4.96e-04  5.27e-01  
 13  +2.8283e-01  +3.1999e-01  3.72e-02  8.78e-05  7.08e-03  1.04e-05  3.03e-04  5.30e-01  
 14  +2.7619e-01  +2.8853e-01  1.23e-02  2.88e-05  2.32e-03  4.17e-06  1.03e-04  7.50e-01  
 15  +2.7384e-01  +2.7807e-01  4.23e-03  9.78e-06  7.88e-04  1.66e-06  3.59e-05  7.80e-01  
 16  +2.7264e-01  +2.7309e-01  4.46e-04  1.03e-06  8.26e-05  1.79e-07  3.83e-06  9.12e-01  
 17  +2.7250e-01  +2.7251e-01  7.41e-06  1.70e-08  1.37e-06  2.99e-09  6.37e-08  9.84e-01  
 18  +2.7250e-01  +2.7250e-01  7.41e-08  1.70e-10  1.37e-08  2.99e-11  6.38e-10  9.90e-01  
 19  +2.7250e-01  +2.7250e-01  7.42e-10  1.71e-12  1.37e-10  3.00e-13  6.39e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.543ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:47 PM: Optimal value: 2.725e-01
(CVXPY) Oct 06 04:24:47 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:47 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 14, Objective: 0.2725
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:47 PM: Your problem has 661 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:47 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 661
  constraints   = 1161
  nnz(P)        = 0
  nnz(A)        = 9646
  cones (total) = 1
    : Nonnegative = 1,  numel = 1161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9948e-01  +5.0168e+02  5.01e+02  9.59e-01  3.69e+01  1.00e+00  1.01e+00   ------   
  1  +5.5873e-01  +1.1076e+02  1.10e+02  4.40e-01  2.30e+01  3.78e-03  5.87e-01  5.76e-01  
  2  +5.1522e-01  +1.3630e+01  1.31e+01  1.44e-01  9.77e+00  2.07e-02  2.67e-01  9.90e-01  
  3  +5.0456e-01  +2.4746e+00  1.97e+00  2.65e-02  2.09e+00  3.21e-03  6.16e-02  7.97e-01  
  4  +5.0308e-01  +2.8294e+00  2.33e+00  2.19e-02  1.75e+00  3.94e-03  4.90e-02  4.21e-01  
  5  +4.8739e-01  +2.7789e+00  2.29e+00  8.98e-03  7.39e-01  6.60e-03  1.99e-02  7.31e-01  
  6  +4.5649e-01  +1.9514e+00  1.49e+00  4.44e-03  3.63e-01  4.22e-03  1.02e-02  5.81e-01  
  7  +4.2816e-01  +1.6047e+00  1.18e+00  2.95e-03  2.39e-01  2.71e-03  7.03e-03  4.79e-01  
  8  +3.9354e-01  +1.0842e+00  6.91e-01  2.01e-03  1.58e-01  2.14e-05  5.24e-03  7.81e-01  
  9  +3.2945e-01  +5.6422e-01  2.35e-01  5.95e-04  4.62e-02  1.83e-05  1.74e-03  7.03e-01  
 10  +3.0346e-01  +4.3556e-01  1.32e-01  3.26e-04  2.57e-02  2.35e-05  1.03e-03  5.34e-01  
 11  +2.8501e-01  +3.4437e-01  5.94e-02  1.41e-04  1.13e-02  1.64e-05  4.75e-04  6.62e-01  
 12  +2.7815e-01  +3.1288e-01  3.47e-02  8.07e-05  6.53e-03  1.12e-05  2.81e-04  5.23e-01  
 13  +2.7292e-01  +2.8935e-01  1.64e-02  3.76e-05  3.06e-03  5.63e-06  1.35e-04  5.73e-01  
 14  +2.6984e-01  +2.7542e-01  5.58e-03  1.27e-05  1.03e-03  1.99e-06  4.67e-05  6.91e-01  
 15  +2.6837e-01  +2.6902e-01  6.46e-04  1.46e-06  1.19e-04  2.46e-07  5.48e-06  9.12e-01  
 16  +2.6817e-01  +2.6819e-01  2.24e-05  5.06e-08  4.11e-06  9.57e-09  1.90e-07  9.82e-01  
 17  +2.6816e-01  +2.6816e-01  2.26e-07  5.11e-10  4.15e-08  9.66e-11  1.92e-09  9.90e-01  
 18  +2.6816e-01  +2.6816e-01  2.26e-09  5.12e-12  4.16e-10  9.67e-13  1.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 29.4337ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:47 PM: Optimal value: 2.682e-01
(CVXPY) Oct 06 04:24:47 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:47 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 15, Objective: 0.2682
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:47 PM: Your problem has 671 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:47 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 671
  constraints   = 1171
  nnz(P)        = 0
  nnz(A)        = 9748
  cones (total) = 1
    : Nonnegative = 1,  numel = 1171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9946e-01  +5.0167e+02  5.01e+02  9.59e-01  3.68e+01  1.00e+00  1.01e+00   ------   
  1  +5.5725e-01  +1.1082e+02  1.10e+02  4.41e-01  2.28e+01  3.79e-03  5.87e-01  5.76e-01  
  2  +5.1442e-01  +1.3727e+01  1.32e+01  1.43e-01  9.68e+00  2.08e-02  2.66e-01  9.90e-01  
  3  +5.0359e-01  +2.1607e+00  1.66e+00  2.16e-02  1.71e+00  2.92e-03  5.05e-02  8.36e-01  
  4  +4.9809e-01  +3.0086e+00  2.51e+00  1.57e-02  1.27e+00  4.51e-03  3.48e-02  7.39e-01  
  5  +4.7392e-01  +2.3835e+00  1.91e+00  5.67e-03  4.67e-01  6.81e-03  1.26e-02  6.54e-01  
  6  +4.4551e-01  +2.0089e+00  1.56e+00  3.94e-03  3.22e-01  5.17e-03  9.03e-03  3.88e-01  
  7  +4.2674e-01  +1.7159e+00  1.29e+00  3.23e-03  2.61e-01  3.32e-03  7.64e-03  2.86e-01  
  8  +3.8173e-01  +1.0415e+00  6.60e-01  1.81e-03  1.43e-01  2.75e-05  4.74e-03  8.01e-01  
  9  +3.2271e-01  +5.5056e-01  2.28e-01  5.99e-04  4.64e-02  2.38e-05  1.77e-03  6.80e-01  
 10  +2.9722e-01  +4.2265e-01  1.25e-01  3.18e-04  2.50e-02  2.54e-05  1.01e-03  5.60e-01  
 11  +2.7990e-01  +3.3721e-01  5.73e-02  1.39e-04  1.12e-02  1.75e-05  4.70e-04  6.83e-01  
 12  +2.7379e-01  +3.0894e-01  3.52e-02  8.36e-05  6.75e-03  1.19e-05  2.90e-04  4.79e-01  
 13  +2.6841e-01  +2.8430e-01  1.59e-02  3.70e-05  3.01e-03  6.04e-06  1.33e-04  6.63e-01  
 14  +2.6540e-01  +2.7095e-01  5.55e-03  1.28e-05  1.04e-03  2.40e-06  4.68e-05  8.19e-01  
 15  +2.6385e-01  +2.6485e-01  1.01e-03  2.29e-06  1.87e-04  4.42e-07  8.55e-06  8.51e-01  
 16  +2.6351e-01  +2.6353e-01  1.96e-05  4.45e-08  3.64e-06  8.63e-09  1.67e-07  9.85e-01  
 17  +2.6350e-01  +2.6350e-01  1.96e-07  4.45e-10  3.64e-08  8.64e-11  1.67e-09  9.90e-01  
 18  +2.6350e-01  +2.6350e-01  1.96e-09  4.46e-12  3.64e-10  8.65e-13  1.67e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 32.144ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:47 PM: Optimal value: 2.635e-01
(CVXPY) Oct 06 04:24:47 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:47 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 16, Objective: 0.2635
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:47 PM: Your problem has 681 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:47 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:47 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:47 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:47 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:47 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:47 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:47 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:47 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:47 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:47 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 681
  constraints   = 1181
  nnz(P)        = 0
  nnz(A)        = 9839
  cones (total) = 1
    : Nonnegative = 1,  numel = 1181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0196e+02  5.01e+02  9.59e-01  3.67e+01  1.00e+00  1.01e+00   ------   
  1  +5.5483e-01  +1.1095e+02  1.10e+02  4.42e-01  2.27e+01  3.79e-03  5.87e-01  5.76e-01  
  2  +5.1299e-01  +1.3917e+01  1.34e+01  1.42e-01  9.62e+00  2.11e-02  2.65e-01  9.90e-01  
  3  +5.0251e-01  +2.3766e+00  1.87e+00  2.29e-02  1.81e+00  3.58e-03  5.29e-02  8.24e-01  
  4  +4.9084e-01  +2.6132e+00  2.12e+00  1.09e-02  8.94e-01  6.84e-03  2.42e-02  6.85e-01  
  5  +4.5864e-01  +2.0031e+00  1.54e+00  4.62e-03  3.79e-01  7.33e-03  1.04e-02  6.39e-01  
  6  +4.2953e-01  +1.7437e+00  1.31e+00  3.20e-03  2.60e-01  6.11e-03  7.41e-03  3.81e-01  
  7  +3.8996e-01  +1.0932e+00  7.03e-01  2.11e-03  1.66e-01  6.19e-05  5.40e-03  5.91e-01  
  8  +3.2170e-01  +5.7942e-01  2.58e-01  6.80e-04  5.26e-02  5.36e-05  1.97e-03  7.51e-01  
  9  +2.9072e-01  +4.1545e-01  1.25e-01  3.22e-04  2.52e-02  3.61e-05  1.02e-03  6.05e-01  
 10  +2.7497e-01  +3.3608e-01  6.11e-02  1.52e-04  1.21e-02  2.17e-05  5.07e-04  6.33e-01  
 11  +2.6649e-01  +2.9626e-01  2.98e-02  7.11e-05  5.74e-03  1.21e-05  2.47e-04  6.95e-01  
 12  +2.6041e-01  +2.6824e-01  7.84e-03  1.85e-05  1.49e-03  3.32e-06  6.71e-05  8.05e-01  
 13  +2.5858e-01  +2.6031e-01  1.73e-03  4.05e-06  3.26e-04  7.34e-07  1.51e-05  8.10e-01  
 14  +2.5840e-01  +2.5950e-01  1.10e-03  2.57e-06  2.07e-04  4.90e-07  9.60e-06  6.38e-01  
 15  +2.5805e-01  +2.5808e-01  3.80e-05  8.87e-08  7.15e-06  1.73e-08  3.34e-07  9.86e-01  
 16  +2.5803e-01  +2.5803e-01  3.83e-07  8.94e-10  7.20e-08  1.74e-10  3.36e-09  9.90e-01  
 17  +2.5803e-01  +2.5803e-01  3.84e-09  8.95e-12  7.21e-10  1.74e-12  3.37e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 34.0447ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:47 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:47 PM: Optimal value: 2.580e-01
(CVXPY) Oct 06 04:24:47 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:47 PM: Solver (including time spent in interface) took 3.122e-02 seconds
Iteration: 17, Objective: 0.2580
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:48 PM: Your problem has 691 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:48 PM: Finished problem compilation (took 1.564e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 691
  constraints   = 1191
  nnz(P)        = 0
  nnz(A)        = 9931
  cones (total) = 1
    : Nonnegative = 1,  numel = 1191

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9939e-01  +5.0197e+02  5.01e+02  9.59e-01  3.65e+01  1.00e+00  1.01e+00   ------   
  1  +5.5387e-01  +1.1096e+02  1.10e+02  4.42e-01  2.26e+01  3.79e-03  5.87e-01  5.76e-01  
  2  +5.1215e-01  +1.4018e+01  1.35e+01  1.42e-01  9.53e+00  2.12e-02  2.64e-01  9.90e-01  
  3  +5.0155e-01  +2.3916e+00  1.89e+00  2.22e-02  1.76e+00  3.84e-03  5.10e-02  8.31e-01  
  4  +4.8627e-01  +2.4944e+00  2.01e+00  9.22e-03  7.56e-01  8.01e-03  2.04e-02  6.96e-01  
  5  +4.4706e-01  +1.8516e+00  1.40e+00  3.98e-03  3.25e-01  7.26e-03  9.05e-03  6.49e-01  
  6  +4.2353e-01  +1.6286e+00  1.21e+00  3.09e-03  2.50e-01  5.14e-03  7.22e-03  3.45e-01  
  7  +3.7401e-01  +1.0247e+00  6.51e-01  1.84e-03  1.44e-01  4.21e-05  4.78e-03  7.29e-01  
  8  +3.1443e-01  +5.4826e-01  2.34e-01  6.28e-04  4.85e-02  2.44e-05  1.85e-03  6.60e-01  
  9  +2.8833e-01  +4.1591e-01  1.28e-01  3.31e-04  2.59e-02  2.61e-05  1.04e-03  5.69e-01  
 10  +2.7393e-01  +3.4495e-01  7.10e-02  1.78e-04  1.41e-02  1.87e-05  5.85e-04  5.42e-01  
 11  +2.6902e-01  +3.2246e-01  5.34e-02  1.31e-04  1.05e-02  1.51e-05  4.35e-04  3.07e-01  
 12  +2.6124e-01  +2.8576e-01  2.45e-02  5.88e-05  4.74e-03  8.69e-06  2.03e-04  6.86e-01  
 13  +2.5646e-01  +2.6478e-01  8.32e-03  1.97e-05  1.59e-03  3.05e-06  7.02e-05  7.00e-01  
 14  +2.5432e-01  +2.5571e-01  1.38e-03  3.25e-06  2.62e-04  5.32e-07  1.19e-05  8.74e-01  
 15  +2.5389e-01  +2.5397e-01  7.78e-05  1.82e-07  1.47e-05  3.23e-08  6.79e-07  9.69e-01  
 16  +2.5387e-01  +2.5387e-01  8.03e-07  1.88e-09  1.52e-07  3.34e-10  7.02e-09  9.90e-01  
 17  +2.5387e-01  +2.5387e-01  8.03e-09  1.88e-11  1.52e-09  3.34e-12  7.03e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 33.4296ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:48 PM: Optimal value: 2.539e-01
(CVXPY) Oct 06 04:24:48 PM: Compilation took 1.564e-02 seconds
(CVXPY) Oct 06 04:24:48 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 18, Objective: 0.2539
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:48 PM: Your problem has 701 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:48 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 701
  constraints   = 1201
  nnz(P)        = 0
  nnz(A)        = 10042
  cones (total) = 1
    : Nonnegative = 1,  numel = 1201

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0201e+02  5.02e+02  9.60e-01  3.64e+01  1.00e+00  1.01e+00   ------   
  1  +5.5253e-01  +1.1105e+02  1.10e+02  4.43e-01  2.25e+01  3.80e-03  5.87e-01  5.75e-01  
  2  +5.1129e-01  +1.4115e+01  1.36e+01  1.42e-01  9.45e+00  2.14e-02  2.64e-01  9.90e-01  
  3  +5.0064e-01  +2.4903e+00  1.99e+00  2.25e-02  1.78e+00  4.21e-03  5.16e-02  8.27e-01  
  4  +4.8231e-01  +2.4388e+00  1.96e+00  8.61e-03  7.05e-01  8.74e-03  1.91e-02  6.93e-01  
  5  +4.4369e-01  +1.8334e+00  1.39e+00  4.20e-03  3.41e-01  6.78e-03  9.65e-03  6.00e-01  
  6  +4.1998e-01  +1.5961e+00  1.18e+00  3.17e-03  2.55e-01  4.70e-03  7.48e-03  3.74e-01  
  7  +3.6041e-01  +9.0426e-01  5.44e-01  1.50e-03  1.17e-01  4.13e-05  3.95e-03  7.72e-01  
  8  +3.0530e-01  +5.1181e-01  2.07e-01  5.60e-04  4.31e-02  2.79e-05  1.68e-03  6.42e-01  
  9  +2.8482e-01  +4.0849e-01  1.24e-01  3.25e-04  2.54e-02  2.53e-05  1.03e-03  4.98e-01  
 10  +2.7007e-01  +3.3470e-01  6.46e-02  1.64e-04  1.30e-02  1.61e-05  5.43e-04  5.46e-01  
 11  +2.6627e-01  +3.1723e-01  5.10e-02  1.27e-04  1.01e-02  1.37e-05  4.25e-04  2.71e-01  
 12  +2.5884e-01  +2.8211e-01  2.33e-02  5.66e-05  4.57e-03  7.68e-06  1.96e-04  6.64e-01  
 13  +2.5528e-01  +2.6577e-01  1.05e-02  2.52e-05  2.04e-03  3.93e-06  8.95e-05  6.79e-01  
 14  +2.5290e-01  +2.5564e-01  2.74e-03  6.55e-06  5.29e-04  1.06e-06  2.39e-05  7.83e-01  
 15  +2.5210e-01  +2.5235e-01  2.47e-04  5.89e-07  4.76e-05  1.04e-07  2.17e-06  9.56e-01  
 16  +2.5202e-01  +2.5202e-01  3.12e-06  7.43e-09  6.00e-07  1.32e-09  2.75e-08  9.88e-01  
 17  +2.5202e-01  +2.5202e-01  3.13e-08  7.44e-11  6.01e-09  1.32e-11  2.75e-10  9.90e-01  
 18  +2.5202e-01  +2.5202e-01  3.13e-10  7.45e-13  6.02e-11  1.33e-13  2.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 37.5893ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:48 PM: Optimal value: 2.520e-01
(CVXPY) Oct 06 04:24:48 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:48 PM: Solver (including time spent in interface) took 3.125e-02 seconds
Iteration: 19, Objective: 0.2520
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:48 PM: Your problem has 711 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:48 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 711
  constraints   = 1211
  nnz(P)        = 0
  nnz(A)        = 10114
  cones (total) = 1
    : Nonnegative = 1,  numel = 1211

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9936e-01  +5.0201e+02  5.02e+02  9.60e-01  3.62e+01  1.00e+00  1.01e+00   ------   
  1  +5.5004e-01  +1.1100e+02  1.10e+02  4.42e-01  2.23e+01  3.81e-03  5.85e-01  5.76e-01  
  2  +5.0974e-01  +1.4303e+01  1.38e+01  1.41e-01  9.31e+00  2.16e-02  2.61e-01  9.90e-01  
  3  +4.9873e-01  +2.5376e+00  2.04e+00  2.15e-02  1.70e+00  4.67e-03  4.89e-02  8.37e-01  
  4  +4.7507e-01  +2.3676e+00  1.89e+00  7.63e-03  6.24e-01  9.93e-03  1.68e-02  6.95e-01  
  5  +4.4198e-01  +1.9691e+00  1.53e+00  4.55e-03  3.70e-01  8.85e-03  1.03e-02  4.58e-01  
  6  +4.1518e-01  +1.6596e+00  1.24e+00  3.37e-03  2.71e-01  6.08e-03  7.89e-03  3.44e-01  
  7  +3.5637e-01  +9.5292e-01  5.97e-01  1.68e-03  1.30e-01  5.28e-05  4.38e-03  7.73e-01  
  8  +3.0241e-01  +5.2899e-01  2.27e-01  6.31e-04  4.84e-02  2.88e-05  1.87e-03  6.28e-01  
  9  +2.7810e-01  +3.9965e-01  1.22e-01  3.27e-04  2.55e-02  2.60e-05  1.03e-03  5.72e-01  
 10  +2.6589e-01  +3.3579e-01  6.99e-02  1.83e-04  1.44e-02  1.86e-05  5.98e-04  5.22e-01  
 11  +2.6180e-01  +3.1584e-01  5.40e-02  1.38e-04  1.10e-02  1.53e-05  4.59e-04  2.83e-01  
 12  +2.5414e-01  +2.7745e-01  2.33e-02  5.86e-05  4.69e-03  8.46e-06  2.01e-04  7.35e-01  
 13  +2.5029e-01  +2.5876e-01  8.48e-03  2.12e-05  1.70e-03  3.56e-06  7.48e-05  8.32e-01  
 14  +2.4848e-01  +2.5100e-01  2.51e-03  6.27e-06  5.00e-04  1.09e-06  2.26e-05  8.19e-01  
 15  +2.4799e-01  +2.4893e-01  9.43e-04  2.35e-06  1.88e-04  4.14e-07  8.53e-06  7.15e-01  
 16  +2.4777e-01  +2.4802e-01  2.53e-04  6.28e-07  5.02e-05  1.13e-07  2.29e-06  9.06e-01  
 17  +2.4768e-01  +2.4769e-01  7.74e-06  1.92e-08  1.54e-06  3.45e-09  7.04e-08  9.72e-01  
 18  +2.4768e-01  +2.4768e-01  7.76e-08  1.93e-10  1.54e-08  3.45e-11  7.05e-10  9.90e-01  
 19  +2.4768e-01  +2.4768e-01  7.76e-10  1.93e-12  1.54e-10  3.46e-13  7.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.3284ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:48 PM: Optimal value: 2.477e-01
(CVXPY) Oct 06 04:24:48 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:48 PM: Solver (including time spent in interface) took 4.686e-02 seconds
Iteration: 20, Objective: 0.2477
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:48 PM: Your problem has 721 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:48 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:48 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:48 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:48 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:48 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:48 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:48 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:48 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:48 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:48 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 721
  constraints   = 1221
  nnz(P)        = 0
  nnz(A)        = 10195
  cones (total) = 1
    : Nonnegative = 1,  numel = 1221

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9935e-01  +5.0206e+02  5.02e+02  9.60e-01  3.61e+01  1.00e+00  1.01e+00   ------   
  1  +5.4909e-01  +1.1102e+02  1.10e+02  4.43e-01  2.21e+01  3.81e-03  5.85e-01  5.76e-01  
  2  +5.0902e-01  +1.4366e+01  1.39e+01  1.40e-01  9.22e+00  2.17e-02  2.60e-01  9.90e-01  
  3  +4.9786e-01  +2.5797e+00  2.08e+00  2.14e-02  1.68e+00  4.89e-03  4.85e-02  8.39e-01  
  4  +4.7204e-01  +2.3459e+00  1.87e+00  7.40e-03  6.04e-01  1.02e-02  1.64e-02  6.94e-01  
  5  +4.3753e-01  +1.9636e+00  1.53e+00  4.47e-03  3.62e-01  9.19e-03  1.02e-02  4.47e-01  
  6  +4.1181e-01  +1.6550e+00  1.24e+00  3.39e-03  2.72e-01  6.09e-03  7.97e-03  3.33e-01  
  7  +3.4955e-01  +9.1039e-01  5.61e-01  1.56e-03  1.21e-01  5.36e-05  4.11e-03  7.83e-01  
  8  +2.9407e-01  +4.9546e-01  2.01e-01  5.60e-04  4.28e-02  3.18e-05  1.68e-03  6.66e-01  
  9  +2.7701e-01  +4.0979e-01  1.33e-01  3.57e-04  2.77e-02  2.95e-05  1.12e-03  4.55e-01  
 10  +2.6017e-01  +3.2489e-01  6.47e-02  1.66e-04  1.32e-02  1.76e-05  5.44e-04  5.88e-01  
 11  +2.5622e-01  +3.0766e-01  5.14e-02  1.28e-04  1.03e-02  1.52e-05  4.24e-04  2.95e-01  
 12  +2.4800e-01  +2.7024e-01  2.22e-02  5.37e-05  4.36e-03  7.83e-06  1.85e-04  6.91e-01  
 13  +2.4505e-01  +2.5732e-01  1.23e-02  2.93e-05  2.38e-03  4.50e-06  1.04e-04  5.10e-01  
 14  +2.4258e-01  +2.4653e-01  3.95e-03  9.34e-06  7.59e-04  1.67e-06  3.40e-05  8.42e-01  
 15  +2.4177e-01  +2.4338e-01  1.61e-03  3.78e-06  3.07e-04  6.92e-07  1.40e-05  6.54e-01  
 16  +2.4134e-01  +2.4170e-01  3.61e-04  8.48e-07  6.87e-05  1.69e-07  3.16e-06  9.90e-01  
 17  +2.4120e-01  +2.4121e-01  6.55e-06  1.54e-08  1.24e-06  3.05e-09  5.74e-08  9.83e-01  
 18  +2.4120e-01  +2.4120e-01  6.55e-08  1.54e-10  1.25e-08  3.05e-11  5.74e-10  9.90e-01  
 19  +2.4120e-01  +2.4120e-01  6.56e-10  1.54e-12  1.25e-10  3.06e-13  5.76e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.6942ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:48 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:48 PM: Optimal value: 2.412e-01
(CVXPY) Oct 06 04:24:48 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:48 PM: Solver (including time spent in interface) took 4.686e-02 seconds
Iteration: 21, Objective: 0.2412
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:49 PM: Your problem has 731 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:49 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 731
  constraints   = 1231
  nnz(P)        = 0
  nnz(A)        = 10270
  cones (total) = 1
    : Nonnegative = 1,  numel = 1231

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9929e-01  +5.0231e+02  5.02e+02  9.60e-01  3.60e+01  1.00e+00  1.01e+00   ------   
  1  +5.4646e-01  +1.1122e+02  1.11e+02  4.44e-01  2.20e+01  3.81e-03  5.85e-01  5.76e-01  
  2  +5.0719e-01  +1.4598e+01  1.41e+01  1.40e-01  9.16e+00  2.20e-02  2.59e-01  9.90e-01  
  3  +4.9546e-01  +2.7825e+00  2.29e+00  2.20e-02  1.72e+00  5.65e-03  4.95e-02  8.32e-01  
  4  +4.6454e-01  +2.3495e+00  1.88e+00  7.27e-03  5.92e-01  1.08e-02  1.61e-02  6.95e-01  
  5  +4.2833e-01  +1.9656e+00  1.54e+00  4.40e-03  3.55e-01  9.92e-03  1.00e-02  4.34e-01  
  6  +4.0212e-01  +1.6394e+00  1.24e+00  3.31e-03  2.65e-01  6.95e-03  7.78e-03  3.00e-01  
  7  +3.4411e-01  +9.2445e-01  5.80e-01  1.66e-03  1.28e-01  5.86e-05  4.35e-03  7.75e-01  
  8  +2.8992e-01  +4.9521e-01  2.05e-01  5.78e-04  4.42e-02  3.02e-05  1.72e-03  6.66e-01  
  9  +2.6900e-01  +3.9049e-01  1.21e-01  3.27e-04  2.54e-02  2.76e-05  1.03e-03  5.36e-01  
 10  +2.5349e-01  +3.1402e-01  6.05e-02  1.54e-04  1.23e-02  1.71e-05  5.08e-04  5.92e-01  
 11  +2.4802e-01  +2.8965e-01  4.16e-02  1.03e-04  8.27e-03  1.31e-05  3.47e-04  4.26e-01  
 12  +2.4045e-01  +2.5586e-01  1.54e-02  3.71e-05  3.00e-03  5.06e-06  1.31e-04  6.61e-01  
 13  +2.3729e-01  +2.4192e-01  4.63e-03  1.10e-05  8.90e-04  1.78e-06  3.98e-05  8.13e-01  
 14  +2.3639e-01  +2.3830e-01  1.90e-03  4.50e-06  3.63e-04  7.38e-07  1.65e-05  6.10e-01  
 15  +2.3588e-01  +2.3619e-01  3.16e-04  7.45e-07  6.01e-05  1.39e-07  2.76e-06  9.42e-01  
 16  +2.3577e-01  +2.3582e-01  4.31e-05  1.02e-07  8.20e-06  1.91e-08  3.78e-07  8.81e-01  
 17  +2.3576e-01  +2.3576e-01  4.46e-07  1.05e-09  8.48e-08  1.98e-10  3.91e-09  9.90e-01  
 18  +2.3576e-01  +2.3576e-01  4.46e-09  1.05e-11  8.48e-10  1.98e-12  3.91e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 43.2635ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:49 PM: Optimal value: 2.358e-01
(CVXPY) Oct 06 04:24:49 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:49 PM: Solver (including time spent in interface) took 3.124e-02 seconds
Iteration: 22, Objective: 0.2358
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:49 PM: Your problem has 741 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 741
  constraints   = 1241
  nnz(P)        = 0
  nnz(A)        = 10385
  cones (total) = 1
    : Nonnegative = 1,  numel = 1241

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9926e-01  +5.0257e+02  5.02e+02  9.60e-01  3.58e+01  1.00e+00  1.01e+00   ------   
  1  +5.4403e-01  +1.1136e+02  1.11e+02  4.44e-01  2.19e+01  3.82e-03  5.85e-01  5.76e-01  
  2  +5.0535e-01  +1.4759e+01  1.43e+01  1.39e-01  9.06e+00  2.23e-02  2.58e-01  9.90e-01  
  3  +4.9265e-01  +2.8801e+00  2.39e+00  2.16e-02  1.68e+00  6.23e-03  4.83e-02  8.38e-01  
  4  +4.5497e-01  +2.2695e+00  1.81e+00  6.67e-03  5.41e-01  1.12e-02  1.49e-02  7.09e-01  
  5  +4.1321e-01  +1.8918e+00  1.48e+00  3.97e-03  3.18e-01  1.03e-02  9.10e-03  4.49e-01  
  6  +3.8598e-01  +1.5598e+00  1.17e+00  3.08e-03  2.44e-01  6.33e-03  7.35e-03  3.16e-01  
  7  +3.2161e-01  +7.7205e-01  4.50e-01  1.28e-03  9.75e-02  5.16e-05  3.47e-03  7.92e-01  
  8  +2.7714e-01  +4.7298e-01  1.96e-01  5.46e-04  4.16e-02  3.61e-05  1.67e-03  6.12e-01  
  9  +2.5423e-01  +3.5331e-01  9.91e-02  2.62e-04  2.03e-02  2.52e-05  8.60e-04  5.97e-01  
 10  +2.4352e-01  +3.0176e-01  5.82e-02  1.47e-04  1.15e-02  1.80e-05  5.01e-04  5.44e-01  
 11  +2.3716e-01  +2.7291e-01  3.57e-02  8.69e-05  6.87e-03  1.29e-05  3.09e-04  5.78e-01  
 12  +2.2867e-01  +2.3652e-01  7.85e-03  1.83e-05  1.46e-03  2.75e-06  7.02e-05  7.94e-01  
 13  +2.2668e-01  +2.2815e-01  1.47e-03  3.38e-06  2.66e-04  6.40e-07  1.37e-05  9.76e-01  
 14  +2.2612e-01  +2.2616e-01  4.25e-05  9.70e-08  7.63e-06  1.78e-08  3.99e-07  9.73e-01  
 15  +2.2610e-01  +2.2610e-01  4.26e-07  9.72e-10  7.64e-08  1.78e-10  4.00e-09  9.90e-01  
 16  +2.2610e-01  +2.2610e-01  4.26e-09  9.72e-12  7.64e-10  1.78e-12  4.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 42.9736ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:49 PM: Optimal value: 2.261e-01
(CVXPY) Oct 06 04:24:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:49 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 23, Objective: 0.2261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:49 PM: Your problem has 751 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:49 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 751
  constraints   = 1251
  nnz(P)        = 0
  nnz(A)        = 10500
  cones (total) = 1
    : Nonnegative = 1,  numel = 1251

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9918e-01  +5.0255e+02  5.02e+02  9.60e-01  3.57e+01  1.00e+00  1.01e+00   ------   
  1  +5.4150e-01  +1.1143e+02  1.11e+02  4.44e-01  2.18e+01  3.82e-03  5.85e-01  5.76e-01  
  2  +5.0332e-01  +1.4984e+01  1.45e+01  1.38e-01  8.99e+00  2.26e-02  2.56e-01  9.90e-01  
  3  +4.8936e-01  +2.9387e+00  2.45e+00  2.07e-02  1.62e+00  6.80e-03  4.62e-02  8.49e-01  
  4  +4.4449e-01  +2.2230e+00  1.78e+00  6.17e-03  4.98e-01  1.18e-02  1.38e-02  7.17e-01  
  5  +4.0758e-01  +1.8907e+00  1.48e+00  4.09e-03  3.26e-01  9.56e-03  9.40e-03  4.20e-01  
  6  +3.4666e-01  +1.0307e+00  6.84e-01  1.97e-03  1.52e-01  8.33e-05  5.01e-03  7.48e-01  
  7  +2.8568e-01  +5.4338e-01  2.58e-01  7.39e-04  5.59e-02  6.04e-05  2.17e-03  7.07e-01  
  8  +2.5996e-01  +4.0321e-01  1.43e-01  3.94e-04  3.02e-02  4.21e-05  1.25e-03  5.45e-01  
  9  +2.4259e-01  +3.1076e-01  6.82e-02  1.79e-04  1.39e-02  2.40e-05  6.03e-04  6.45e-01  
 10  +2.3919e-01  +2.9423e-01  5.50e-02  1.42e-04  1.11e-02  2.02e-05  4.84e-04  2.85e-01  
 11  +2.2920e-01  +2.4599e-01  1.68e-02  4.17e-05  3.28e-03  6.53e-06  1.52e-04  7.82e-01  
 12  +2.2557e-01  +2.3031e-01  4.74e-03  1.15e-05  9.02e-04  1.85e-06  4.44e-05  7.67e-01  
 13  +2.2438e-01  +2.2544e-01  1.06e-03  2.52e-06  1.97e-04  4.17e-07  1.02e-05  8.28e-01  
 14  +2.2406e-01  +2.2420e-01  1.49e-04  3.50e-07  2.73e-05  6.03e-08  1.44e-06  9.26e-01  
 15  +2.2400e-01  +2.2400e-01  1.54e-06  3.63e-09  2.83e-07  6.22e-10  1.50e-08  9.90e-01  
 16  +2.2400e-01  +2.2400e-01  1.55e-08  3.64e-11  2.84e-09  6.24e-12  1.51e-10  9.90e-01  
 17  +2.2400e-01  +2.2400e-01  1.55e-10  3.64e-13  2.84e-11  6.27e-14  1.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.1307ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:49 PM: Optimal value: 2.240e-01
(CVXPY) Oct 06 04:24:49 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:49 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 24, Objective: 0.2240
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:49 PM: Your problem has 760 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:49 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 760
  constraints   = 1260
  nnz(P)        = 0
  nnz(A)        = 10594
  cones (total) = 1
    : Nonnegative = 1,  numel = 1260

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9917e-01  +5.0255e+02  5.02e+02  9.61e-01  3.56e+01  1.00e+00  1.01e+00   ------   
  1  +5.4053e-01  +1.1147e+02  1.11e+02  4.45e-01  2.17e+01  3.83e-03  5.84e-01  5.76e-01  
  2  +5.0227e-01  +1.5061e+01  1.46e+01  1.38e-01  8.93e+00  2.27e-02  2.56e-01  9.90e-01  
  3  +4.8760e-01  +3.1001e+00  2.61e+00  2.14e-02  1.67e+00  7.28e-03  4.77e-02  8.44e-01  
  4  +4.4033e-01  +2.2591e+00  1.82e+00  6.29e-03  5.06e-01  1.18e-02  1.41e-02  7.19e-01  
  5  +4.0322e-01  +1.9074e+00  1.50e+00  4.17e-03  3.31e-01  9.44e-03  9.63e-03  4.18e-01  
  6  +3.4687e-01  +1.0616e+00  7.15e-01  2.12e-03  1.63e-01  8.04e-05  5.41e-03  7.35e-01  
  7  +2.8494e-01  +5.5113e-01  2.66e-01  7.68e-04  5.79e-02  5.60e-05  2.25e-03  7.04e-01  
  8  +2.5993e-01  +4.1801e-01  1.58e-01  4.37e-04  3.33e-02  4.22e-05  1.38e-03  5.01e-01  
  9  +2.3943e-01  +3.0962e-01  7.02e-02  1.84e-04  1.42e-02  2.27e-05  6.29e-04  6.53e-01  
 10  +2.3617e-01  +2.9402e-01  5.78e-02  1.49e-04  1.15e-02  1.98e-05  5.13e-04  2.70e-01  
 11  +2.2803e-01  +2.5488e-01  2.69e-02  6.73e-05  5.25e-03  9.84e-06  2.43e-04  6.41e-01  
 12  +2.2284e-01  +2.3064e-01  7.80e-03  1.93e-05  1.50e-03  3.05e-06  7.37e-05  8.36e-01  
 13  +2.2068e-01  +2.2200e-01  1.33e-03  3.19e-06  2.48e-04  5.05e-07  1.32e-05  8.93e-01  
 14  +2.2022e-01  +2.2027e-01  5.23e-05  1.25e-07  9.72e-06  1.94e-08  5.30e-07  9.77e-01  
 15  +2.2020e-01  +2.2020e-01  5.25e-07  1.25e-09  9.75e-08  1.95e-10  5.33e-09  9.90e-01  
 16  +2.2020e-01  +2.2020e-01  5.26e-09  1.26e-11  9.76e-10  1.95e-12  5.34e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.8108ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:49 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:49 PM: Optimal value: 2.202e-01
(CVXPY) Oct 06 04:24:49 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:49 PM: Solver (including time spent in interface) took 4.687e-02 seconds
Iteration: 25, Objective: 0.2202
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:50 PM: Your problem has 770 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:50 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 770
  constraints   = 1270
  nnz(P)        = 0
  nnz(A)        = 10666
  cones (total) = 1
    : Nonnegative = 1,  numel = 1270

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +5.0261e+02  5.02e+02  9.61e-01  3.55e+01  1.00e+00  1.01e+00   ------   
  1  +5.3951e-01  +1.1144e+02  1.11e+02  4.44e-01  2.15e+01  3.83e-03  5.84e-01  5.76e-01  
  2  +5.0138e-01  +1.5145e+01  1.46e+01  1.37e-01  8.80e+00  2.28e-02  2.54e-01  9.90e-01  
  3  +4.8582e-01  +3.1535e+00  2.67e+00  2.11e-02  1.63e+00  7.58e-03  4.70e-02  8.47e-01  
  4  +4.3672e-01  +2.2694e+00  1.83e+00  6.29e-03  5.03e-01  1.18e-02  1.41e-02  7.14e-01  
  5  +4.0001e-01  +1.9177e+00  1.52e+00  4.20e-03  3.32e-01  9.35e-03  9.73e-03  4.16e-01  
  6  +3.4382e-01  +1.0479e+00  7.04e-01  2.09e-03  1.60e-01  7.92e-05  5.36e-03  7.37e-01  
  7  +2.8147e-01  +5.3820e-01  2.57e-01  7.41e-04  5.56e-02  5.42e-05  2.18e-03  7.11e-01  
  8  +2.5785e-01  +4.1519e-01  1.57e-01  4.35e-04  3.29e-02  4.29e-05  1.38e-03  4.99e-01  
  9  +2.3712e-01  +3.0393e-01  6.68e-02  1.76e-04  1.35e-02  2.28e-05  6.04e-04  6.94e-01  
 10  +2.3188e-01  +2.7810e-01  4.62e-02  1.19e-04  9.19e-03  1.68e-05  4.17e-04  4.23e-01  
 11  +2.2492e-01  +2.4468e-01  1.98e-02  5.00e-05  3.87e-03  7.26e-06  1.83e-04  6.11e-01  
 12  +2.2116e-01  +2.2695e-01  5.79e-03  1.45e-05  1.12e-03  2.13e-06  5.58e-05  7.57e-01  
 13  +2.1960e-01  +2.2044e-01  8.43e-04  2.06e-06  1.59e-04  3.18e-07  8.45e-06  9.22e-01  
 14  +2.1931e-01  +2.1934e-01  3.17e-05  7.70e-08  5.94e-06  1.20e-08  3.23e-07  9.82e-01  
 15  +2.1930e-01  +2.1930e-01  3.18e-07  7.72e-10  5.95e-08  1.21e-10  3.24e-09  9.90e-01  
 16  +2.1930e-01  +2.1930e-01  3.18e-09  7.72e-12  5.95e-10  1.21e-12  3.24e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 47.7652ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:50 PM: Optimal value: 2.193e-01
(CVXPY) Oct 06 04:24:50 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:50 PM: Solver (including time spent in interface) took 4.689e-02 seconds
Iteration: 26, Objective: 0.2193
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:50 PM: Your problem has 780 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:50 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 780
  constraints   = 1280
  nnz(P)        = 0
  nnz(A)        = 10722
  cones (total) = 1
    : Nonnegative = 1,  numel = 1280

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +5.0261e+02  5.02e+02  9.61e-01  3.54e+01  1.00e+00  1.01e+00   ------   
  1  +5.3825e-01  +1.1147e+02  1.11e+02  4.45e-01  2.14e+01  3.84e-03  5.83e-01  5.76e-01  
  2  +5.0025e-01  +1.5224e+01  1.47e+01  1.36e-01  8.73e+00  2.29e-02  2.53e-01  9.90e-01  
  3  +4.8393e-01  +3.1619e+00  2.68e+00  2.06e-02  1.59e+00  7.78e-03  4.59e-02  8.53e-01  
  4  +4.3075e-01  +2.2119e+00  1.78e+00  5.97e-03  4.75e-01  1.17e-02  1.35e-02  7.25e-01  
  5  +3.9168e-01  +1.8335e+00  1.44e+00  3.91e-03  3.09e-01  8.68e-03  9.13e-03  4.41e-01  
  6  +3.3330e-01  +1.0155e+00  6.82e-01  2.03e-03  1.54e-01  7.10e-05  5.31e-03  7.66e-01  
  7  +2.7573e-01  +5.1164e-01  2.36e-01  6.95e-04  5.17e-02  4.21e-05  2.08e-03  7.02e-01  
  8  +2.5367e-01  +4.0262e-01  1.49e-01  4.16e-04  3.13e-02  3.81e-05  1.33e-03  5.18e-01  
  9  +2.3810e-01  +3.2017e-01  8.21e-02  2.20e-04  1.68e-02  2.50e-05  7.43e-04  5.53e-01  
 10  +2.3060e-01  +2.8303e-01  5.24e-02  1.36e-04  1.05e-02  1.73e-05  4.73e-04  4.47e-01  
 11  +2.2425e-01  +2.5242e-01  2.82e-02  7.18e-05  5.54e-03  9.46e-06  2.58e-04  4.98e-01  
 12  +2.1860e-01  +2.2539e-01  6.79e-03  1.71e-05  1.31e-03  2.40e-06  6.46e-05  8.24e-01  
 13  +2.1691e-01  +2.1839e-01  1.48e-03  3.65e-06  2.80e-04  5.43e-07  1.47e-05  8.47e-01  
 14  +2.1643e-01  +2.1651e-01  8.07e-05  1.97e-07  1.51e-05  2.89e-08  8.13e-07  9.57e-01  
 15  +2.1640e-01  +2.1640e-01  8.19e-07  2.00e-09  1.54e-07  2.93e-10  8.27e-09  9.90e-01  
 16  +2.1640e-01  +2.1640e-01  8.20e-09  2.00e-11  1.54e-09  2.93e-12  8.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 46.6728ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:50 PM: Optimal value: 2.164e-01
(CVXPY) Oct 06 04:24:50 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:50 PM: Solver (including time spent in interface) took 4.688e-02 seconds
Iteration: 27, Objective: 0.2164
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:50 PM: Your problem has 790 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:50 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 790
  constraints   = 1290
  nnz(P)        = 0
  nnz(A)        = 10802
  cones (total) = 1
    : Nonnegative = 1,  numel = 1290

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9916e-01  +5.0261e+02  5.02e+02  9.61e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.3799e-01  +1.1141e+02  1.11e+02  4.45e-01  2.13e+01  3.84e-03  5.83e-01  5.77e-01  
  2  +4.9981e-01  +1.5264e+01  1.48e+01  1.36e-01  8.62e+00  2.29e-02  2.52e-01  9.90e-01  
  3  +4.8262e-01  +3.0784e+00  2.60e+00  1.95e-02  1.50e+00  7.83e-03  4.35e-02  8.63e-01  
  4  +4.2482e-01  +2.1422e+00  1.72e+00  5.48e-03  4.35e-01  1.21e-02  1.24e-02  7.36e-01  
  5  +3.9031e-01  +1.7636e+00  1.37e+00  3.81e-03  2.99e-01  8.12e-03  8.93e-03  4.05e-01  
  6  +3.3161e-01  +9.7938e-01  6.48e-01  1.90e-03  1.44e-01  8.27e-04  4.95e-03  6.84e-01  
  7  +2.7272e-01  +5.0331e-01  2.31e-01  6.75e-04  5.01e-02  1.79e-04  2.03e-03  7.12e-01  
  8  +2.5119e-01  +3.9618e-01  1.45e-01  4.02e-04  3.02e-02  1.06e-04  1.30e-03  5.10e-01  
  9  +2.3589e-01  +3.1510e-01  7.92e-02  2.11e-04  1.60e-02  5.59e-05  7.16e-04  5.44e-01  
 10  +2.3105e-01  +2.9130e-01  6.02e-02  1.57e-04  1.20e-02  4.18e-05  5.41e-04  3.08e-01  
 11  +2.2349e-01  +2.5342e-01  2.99e-02  7.63e-05  5.86e-03  1.87e-05  2.73e-04  6.32e-01  
 12  +2.2040e-01  +2.3834e-01  1.79e-02  4.54e-05  3.49e-03  1.05e-05  1.66e-04  5.38e-01  
 13  +2.1747e-01  +2.2482e-01  7.35e-03  1.85e-05  1.42e-03  3.87e-06  6.93e-05  7.46e-01  
 14  +2.1651e-01  +2.2072e-01  4.21e-03  1.05e-05  8.10e-04  2.15e-06  4.01e-05  5.30e-01  
 15  +2.1573e-01  +2.1751e-01  1.77e-03  4.38e-06  3.38e-04  7.87e-07  1.68e-05  9.49e-01  
 16  +2.1525e-01  +2.1564e-01  3.94e-04  9.74e-07  7.50e-05  1.67e-07  3.77e-06  9.90e-01  
 17  +2.1510e-01  +2.1511e-01  9.52e-06  2.35e-08  1.81e-06  3.96e-09  9.13e-08  9.77e-01  
 18  +2.1510e-01  +2.1510e-01  9.56e-08  2.36e-10  1.82e-08  3.98e-11  9.18e-10  9.90e-01  
 19  +2.1510e-01  +2.1510e-01  9.57e-10  2.36e-12  1.82e-10  3.99e-13  9.20e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.3582ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:50 PM: Optimal value: 2.151e-01
(CVXPY) Oct 06 04:24:50 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:50 PM: Solver (including time spent in interface) took 6.252e-02 seconds
Iteration: 28, Objective: 0.2151
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:50 PM: Your problem has 800 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:50 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 800
  constraints   = 1300
  nnz(P)        = 0
  nnz(A)        = 10944
  cones (total) = 1
    : Nonnegative = 1,  numel = 1300

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9914e-01  +5.0274e+02  5.02e+02  9.61e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.3646e-01  +1.1161e+02  1.11e+02  4.46e-01  2.12e+01  3.84e-03  5.83e-01  5.76e-01  
  2  +4.9874e-01  +1.5375e+01  1.49e+01  1.36e-01  8.55e+00  2.31e-02  2.52e-01  9.90e-01  
  3  +4.8074e-01  +3.1988e+00  2.72e+00  2.00e-02  1.53e+00  8.17e-03  4.47e-02  8.56e-01  
  4  +4.2244e-01  +2.1349e+00  1.71e+00  5.66e-03  4.46e-01  1.13e-02  1.29e-02  7.34e-01  
  5  +3.8848e-01  +1.7835e+00  1.40e+00  3.94e-03  3.08e-01  7.76e-03  9.29e-03  4.16e-01  
  6  +3.2789e-01  +9.7943e-01  6.52e-01  1.95e-03  1.47e-01  6.58e-05  5.14e-03  7.75e-01  
  7  +2.6956e-01  +4.9583e-01  2.26e-01  6.68e-04  4.94e-02  4.95e-05  2.02e-03  7.40e-01  
  8  +2.4940e-01  +3.9246e-01  1.43e-01  4.02e-04  3.02e-02  4.00e-05  1.29e-03  5.03e-01  
  9  +2.3337e-01  +3.0858e-01  7.52e-02  2.00e-04  1.54e-02  2.49e-05  6.71e-04  5.91e-01  
 10  +2.2878e-01  +2.8711e-01  5.83e-02  1.51e-04  1.17e-02  2.01e-05  5.14e-04  2.94e-01  
 11  +2.2001e-01  +2.4495e-01  2.49e-02  6.27e-05  4.88e-03  9.27e-06  2.24e-04  6.91e-01  
 12  +2.1566e-01  +2.2473e-01  9.07e-03  2.25e-05  1.75e-03  3.52e-06  8.38e-05  7.38e-01  
 13  +2.1345e-01  +2.1536e-01  1.91e-03  4.70e-06  3.64e-04  7.34e-07  1.84e-05  8.44e-01  
 14  +2.1299e-01  +2.1352e-01  5.33e-04  1.31e-06  1.01e-04  2.07e-07  5.25e-06  7.76e-01  
 15  +2.1280e-01  +2.1281e-01  9.57e-06  2.35e-08  1.80e-06  3.60e-09  9.51e-08  9.86e-01  
 16  +2.1280e-01  +2.1280e-01  9.57e-08  2.35e-10  1.80e-08  3.61e-11  9.52e-10  9.90e-01  
 17  +2.1280e-01  +2.1280e-01  9.61e-10  2.36e-12  1.81e-10  3.63e-13  9.58e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 54.6243ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:50 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:50 PM: Optimal value: 2.128e-01
(CVXPY) Oct 06 04:24:50 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:50 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 29, Objective: 0.2128
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:51 PM: Your problem has 810 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:51 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 810
  constraints   = 1310
  nnz(P)        = 0
  nnz(A)        = 10988
  cones (total) = 1
    : Nonnegative = 1,  numel = 1310

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9913e-01  +5.0277e+02  5.02e+02  9.61e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.3456e-01  +1.1175e+02  1.11e+02  4.46e-01  2.11e+01  3.85e-03  5.83e-01  5.76e-01  
  2  +4.9700e-01  +1.5480e+01  1.50e+01  1.35e-01  8.49e+00  2.33e-02  2.52e-01  9.90e-01  
  3  +4.7809e-01  +3.1679e+00  2.69e+00  1.92e-02  1.47e+00  8.31e-03  4.30e-02  8.64e-01  
  4  +4.1589e-01  +2.0681e+00  1.65e+00  5.42e-03  4.25e-01  1.07e-02  1.24e-02  7.43e-01  
  5  +3.8618e-01  +1.7254e+00  1.34e+00  3.93e-03  3.05e-01  6.94e-03  9.30e-03  3.94e-01  
  6  +3.2567e-01  +9.7808e-01  6.52e-01  1.98e-03  1.48e-01  6.06e-05  5.22e-03  7.90e-01  
  7  +2.6928e-01  +4.9810e-01  2.29e-01  6.81e-04  5.02e-02  3.95e-05  2.05e-03  7.02e-01  
  8  +2.4742e-01  +3.8927e-01  1.42e-01  3.99e-04  2.98e-02  3.60e-05  1.27e-03  5.40e-01  
  9  +2.3212e-01  +3.0981e-01  7.77e-02  2.07e-04  1.58e-02  2.40e-05  6.91e-04  5.73e-01  
 10  +2.2683e-01  +2.8486e-01  5.80e-02  1.50e-04  1.16e-02  1.88e-05  5.10e-04  3.26e-01  
 11  +2.1838e-01  +2.4434e-01  2.60e-02  6.54e-05  5.06e-03  9.00e-06  2.32e-04  6.39e-01  
 12  +2.1281e-01  +2.1871e-01  5.90e-03  1.47e-05  1.13e-03  2.01e-06  5.50e-05  7.99e-01  
 13  +2.1144e-01  +2.1293e-01  1.49e-03  3.65e-06  2.80e-04  6.15e-07  1.45e-05  9.51e-01  
 14  +2.1096e-01  +2.1114e-01  1.75e-04  4.27e-07  3.27e-05  7.06e-08  1.74e-06  8.84e-01  
 15  +2.1090e-01  +2.1090e-01  1.86e-06  4.53e-09  3.47e-07  7.43e-10  1.85e-08  9.89e-01  
 16  +2.1090e-01  +2.1090e-01  1.86e-08  4.54e-11  3.47e-09  7.44e-12  1.85e-10  9.90e-01  
 17  +2.1090e-01  +2.1090e-01  1.87e-10  4.57e-13  3.49e-11  7.50e-14  1.87e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 57.5257ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:51 PM: Optimal value: 2.109e-01
(CVXPY) Oct 06 04:24:51 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:51 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 30, Objective: 0.2109
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:51 PM: Your problem has 820 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:51 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 820
  constraints   = 1320
  nnz(P)        = 0
  nnz(A)        = 11046
  cones (total) = 1
    : Nonnegative = 1,  numel = 1320

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9912e-01  +5.0285e+02  5.02e+02  9.62e-01  3.49e+01  1.00e+00  1.01e+00   ------   
  1  +5.3215e-01  +1.1174e+02  1.11e+02  4.45e-01  2.09e+01  3.86e-03  5.82e-01  5.76e-01  
  2  +4.9472e-01  +1.5640e+01  1.51e+01  1.33e-01  8.40e+00  2.35e-02  2.49e-01  9.90e-01  
  3  +4.7359e-01  +3.0051e+00  2.53e+00  1.71e-02  1.31e+00  8.49e-03  3.84e-02  8.79e-01  
  4  +4.0996e-01  +2.0653e+00  1.66e+00  5.45e-03  4.24e-01  1.06e-02  1.25e-02  7.11e-01  
  5  +3.7450e-01  +1.6926e+00  1.32e+00  3.82e-03  2.95e-01  6.75e-03  9.10e-03  4.16e-01  
  6  +3.0725e-01  +7.7855e-01  4.71e-01  1.42e-03  1.05e-01  1.62e-04  3.84e-03  7.83e-01  
  7  +2.5689e-01  +4.7236e-01  2.15e-01  6.35e-04  4.68e-02  8.78e-05  1.96e-03  7.45e-01  
  8  +2.3948e-01  +3.6985e-01  1.30e-01  3.69e-04  2.75e-02  5.50e-05  1.21e-03  4.67e-01  
  9  +2.2461e-01  +2.8820e-01  6.36e-02  1.71e-04  1.30e-02  2.83e-05  5.83e-04  5.80e-01  
 10  +2.1840e-01  +2.5748e-01  3.91e-02  1.01e-04  7.79e-03  1.74e-05  3.56e-04  5.25e-01  
 11  +2.1225e-01  +2.2789e-01  1.56e-02  3.98e-05  3.06e-03  6.78e-06  1.46e-04  6.32e-01  
 12  +2.0996e-01  +2.1704e-01  7.08e-03  1.77e-05  1.37e-03  3.08e-06  6.72e-05  7.18e-01  
 13  +2.0834e-01  +2.1018e-01  1.84e-03  4.53e-06  3.50e-04  7.83e-07  1.79e-05  9.90e-01  
 14  +2.0774e-01  +2.0799e-01  2.48e-04  6.09e-07  4.69e-05  1.03e-07  2.45e-06  8.88e-01  
 15  +2.0765e-01  +2.0765e-01  2.85e-06  7.01e-09  5.39e-07  1.17e-09  2.84e-08  9.89e-01  
 16  +2.0765e-01  +2.0765e-01  2.86e-08  7.01e-11  5.40e-09  1.17e-11  2.84e-10  9.90e-01  
 17  +2.0765e-01  +2.0765e-01  2.88e-10  7.06e-13  5.44e-11  1.18e-13  2.86e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 61.8086ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:51 PM: Optimal value: 2.077e-01
(CVXPY) Oct 06 04:24:51 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:51 PM: Solver (including time spent in interface) took 6.250e-02 seconds
Iteration: 31, Objective: 0.2077
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:51 PM: Your problem has 830 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:51 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 830
  constraints   = 1330
  nnz(P)        = 0
  nnz(A)        = 11095
  cones (total) = 1
    : Nonnegative = 1,  numel = 1330

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9912e-01  +5.0285e+02  5.02e+02  9.62e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.3171e-01  +1.1170e+02  1.11e+02  4.45e-01  2.08e+01  3.86e-03  5.81e-01  5.77e-01  
  2  +4.9405e-01  +1.5661e+01  1.52e+01  1.33e-01  8.33e+00  2.35e-02  2.49e-01  9.90e-01  
  3  +4.7234e-01  +3.0178e+00  2.55e+00  1.70e-02  1.30e+00  8.57e-03  3.82e-02  8.81e-01  
  4  +4.1080e-01  +2.1111e+00  1.70e+00  5.71e-03  4.43e-01  1.04e-02  1.32e-02  6.93e-01  
  5  +3.7672e-01  +1.7373e+00  1.36e+00  4.01e-03  3.09e-01  6.85e-03  9.56e-03  4.05e-01  
  6  +3.1013e-01  +8.1305e-01  5.03e-01  1.52e-03  1.13e-01  5.95e-05  4.09e-03  8.03e-01  
  7  +2.5741e-01  +4.6910e-01  2.12e-01  6.29e-04  4.62e-02  5.77e-05  1.94e-03  7.29e-01  
  8  +2.4018e-01  +3.7366e-01  1.33e-01  3.80e-04  2.82e-02  4.12e-05  1.24e-03  4.69e-01  
  9  +2.2541e-01  +2.9419e-01  6.88e-02  1.87e-04  1.41e-02  2.30e-05  6.36e-04  5.43e-01  
 10  +2.1817e-01  +2.5864e-01  4.05e-02  1.06e-04  8.07e-03  1.44e-05  3.72e-04  5.16e-01  
 11  +2.1203e-01  +2.2924e-01  1.72e-02  4.41e-05  3.37e-03  6.20e-06  1.61e-04  6.13e-01  
 12  +2.0993e-01  +2.1935e-01  9.42e-03  2.36e-05  1.81e-03  3.72e-06  8.87e-05  6.94e-01  
 13  +2.0754e-01  +2.0957e-01  2.03e-03  4.98e-06  3.83e-04  8.13e-07  1.96e-05  8.76e-01  
 14  +2.0685e-01  +2.0696e-01  1.18e-04  2.87e-07  2.20e-05  4.57e-08  1.16e-06  9.76e-01  
 15  +2.0680e-01  +2.0680e-01  1.21e-06  2.96e-09  2.27e-07  4.69e-10  1.20e-08  9.90e-01  
 16  +2.0680e-01  +2.0680e-01  1.22e-08  2.97e-11  2.28e-09  4.72e-12  1.21e-10  9.90e-01  
 17  +2.0680e-01  +2.0680e-01  1.22e-10  2.98e-13  2.29e-11  4.73e-14  1.21e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 60.1353ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:51 PM: Optimal value: 2.068e-01
(CVXPY) Oct 06 04:24:51 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:51 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 32, Objective: 0.2068
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:51 PM: Your problem has 840 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:51 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:51 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:51 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:51 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 840
  constraints   = 1340
  nnz(P)        = 0
  nnz(A)        = 11143
  cones (total) = 1
    : Nonnegative = 1,  numel = 1340

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9908e-01  +5.0299e+02  5.02e+02  9.62e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.2937e-01  +1.1177e+02  1.11e+02  4.45e-01  2.07e+01  3.86e-03  5.81e-01  5.77e-01  
  2  +4.9158e-01  +1.5840e+01  1.53e+01  1.31e-01  8.23e+00  2.37e-02  2.47e-01  9.90e-01  
  3  +4.6738e-01  +2.9949e+00  2.53e+00  1.60e-02  1.22e+00  8.89e-03  3.61e-02  8.89e-01  
  4  +4.1392e-01  +2.2913e+00  1.88e+00  6.79e-03  5.24e-01  9.94e-03  1.57e-02  6.14e-01  
  5  +3.7691e-01  +1.8553e+00  1.48e+00  4.46e-03  3.42e-01  7.17e-03  1.06e-02  4.22e-01  
  6  +3.1346e-01  +9.1335e-01  6.00e-01  1.84e-03  1.36e-01  6.35e-05  4.90e-03  8.23e-01  
  7  +2.5810e-01  +4.6718e-01  2.09e-01  6.37e-04  4.63e-02  4.04e-05  1.95e-03  7.09e-01  
  8  +2.4253e-01  +3.9105e-01  1.49e-01  4.33e-04  3.19e-02  3.74e-05  1.38e-03  4.41e-01  
  9  +2.2636e-01  +3.0585e-01  7.95e-02  2.20e-04  1.65e-02  2.20e-05  7.41e-04  5.14e-01  
 10  +2.1785e-01  +2.6461e-01  4.68e-02  1.25e-04  9.46e-03  1.41e-05  4.34e-04  4.99e-01  
 11  +2.1115e-01  +2.3249e-01  2.13e-02  5.55e-05  4.23e-03  6.71e-06  2.02e-04  5.92e-01  
 12  +2.0752e-01  +2.1560e-01  8.07e-03  2.05e-05  1.56e-03  3.02e-06  7.77e-05  8.18e-01  
 13  +2.0545e-01  +2.0730e-01  1.86e-03  4.61e-06  3.51e-04  6.83e-07  1.84e-05  7.93e-01  
 14  +2.0484e-01  +2.0493e-01  9.72e-05  2.40e-07  1.82e-05  3.60e-08  9.85e-07  9.78e-01  
 15  +2.0480e-01  +2.0480e-01  9.90e-07  2.45e-09  1.86e-07  3.66e-10  1.01e-08  9.90e-01  
 16  +2.0480e-01  +2.0480e-01  9.97e-09  2.46e-11  1.87e-09  3.68e-12  1.01e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.7714ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:51 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:51 PM: Optimal value: 2.048e-01
(CVXPY) Oct 06 04:24:51 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:51 PM: Solver (including time spent in interface) took 6.251e-02 seconds
Iteration: 33, Objective: 0.2048
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:52 PM: Your problem has 850 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:52 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 850
  constraints   = 1350
  nnz(P)        = 0
  nnz(A)        = 11193
  cones (total) = 1
    : Nonnegative = 1,  numel = 1350

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9908e-01  +5.0301e+02  5.03e+02  9.62e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.2801e-01  +1.1185e+02  1.11e+02  4.45e-01  2.06e+01  3.87e-03  5.80e-01  5.77e-01  
  2  +4.9057e-01  +1.5895e+01  1.54e+01  1.31e-01  8.16e+00  2.38e-02  2.46e-01  9.90e-01  
  3  +4.6562e-01  +3.0342e+00  2.57e+00  1.61e-02  1.22e+00  8.94e-03  3.64e-02  8.87e-01  
  4  +4.1218e-01  +2.3006e+00  1.89e+00  6.95e-03  5.33e-01  9.53e-03  1.61e-02  6.08e-01  
  5  +3.7508e-01  +1.8851e+00  1.51e+00  4.57e-03  3.48e-01  7.17e-03  1.09e-02  4.20e-01  
  6  +3.1577e-01  +9.7253e-01  6.57e-01  2.04e-03  1.51e-01  6.31e-05  5.42e-03  8.21e-01  
  7  +2.6210e-01  +4.9944e-01  2.37e-01  7.30e-04  5.29e-02  3.66e-05  2.20e-03  6.72e-01  
  8  +2.3917e-01  +3.8308e-01  1.44e-01  4.17e-04  3.06e-02  3.48e-05  1.34e-03  5.62e-01  
  9  +2.2398e-01  +3.0200e-01  7.80e-02  2.15e-04  1.61e-02  2.09e-05  7.28e-04  5.09e-01  
 10  +2.1539e-01  +2.5965e-01  4.43e-02  1.17e-04  8.89e-03  1.31e-05  4.11e-04  5.25e-01  
 11  +2.0970e-01  +2.3225e-01  2.26e-02  5.82e-05  4.44e-03  7.19e-06  2.11e-04  5.66e-01  
 12  +2.0605e-01  +2.1506e-01  9.02e-03  2.27e-05  1.73e-03  3.53e-06  8.58e-05  8.54e-01  
 13  +2.0367e-01  +2.0561e-01  1.94e-03  4.81e-06  3.66e-04  7.31e-07  1.91e-05  8.00e-01  
 14  +2.0303e-01  +2.0310e-01  7.24e-05  1.80e-07  1.36e-05  2.51e-08  7.30e-07  9.70e-01  
 15  +2.0300e-01  +2.0300e-01  7.31e-07  1.81e-09  1.37e-07  2.52e-10  7.38e-09  9.90e-01  
 16  +2.0300e-01  +2.0300e-01  7.36e-09  1.83e-11  1.38e-09  2.54e-12  7.44e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 59.7116ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:52 PM: Optimal value: 2.030e-01
(CVXPY) Oct 06 04:24:52 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:52 PM: Solver (including time spent in interface) took 6.249e-02 seconds
Iteration: 34, Objective: 0.2030
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:52 PM: Your problem has 860 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 860
  constraints   = 1360
  nnz(P)        = 0
  nnz(A)        = 11246
  cones (total) = 1
    : Nonnegative = 1,  numel = 1360

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0304e+02  5.03e+02  9.62e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.2719e-01  +1.1192e+02  1.11e+02  4.46e-01  2.05e+01  3.87e-03  5.80e-01  5.76e-01  
  2  +4.8971e-01  +1.5953e+01  1.55e+01  1.31e-01  8.09e+00  2.39e-02  2.46e-01  9.90e-01  
  3  +4.6374e-01  +3.0322e+00  2.57e+00  1.59e-02  1.20e+00  8.98e-03  3.60e-02  8.89e-01  
  4  +4.1383e-01  +2.3697e+00  1.96e+00  7.45e-03  5.68e-01  9.23e-03  1.73e-02  5.77e-01  
  5  +3.7257e-01  +1.9255e+00  1.55e+00  4.66e-03  3.54e-01  7.28e-03  1.12e-02  4.45e-01  
  6  +3.1498e-01  +9.9980e-01  6.85e-01  2.14e-03  1.57e-01  6.31e-05  5.72e-03  8.27e-01  
  7  +2.6294e-01  +5.1221e-01  2.49e-01  7.71e-04  5.56e-02  3.29e-05  2.33e-03  6.51e-01  
  8  +2.3766e-01  +3.8158e-01  1.44e-01  4.18e-04  3.06e-02  3.37e-05  1.36e-03  6.00e-01  
  9  +2.2311e-01  +3.0267e-01  7.96e-02  2.21e-04  1.64e-02  2.09e-05  7.52e-04  5.06e-01  
 10  +2.1442e-01  +2.5921e-01  4.48e-02  1.19e-04  9.01e-03  1.30e-05  4.20e-04  5.26e-01  
 11  +2.0905e-01  +2.3291e-01  2.39e-02  6.20e-05  4.71e-03  7.53e-06  2.26e-04  5.53e-01  
 12  +2.0526e-01  +2.1495e-01  9.69e-03  2.46e-05  1.88e-03  3.60e-06  9.30e-05  7.94e-01  
 13  +2.0283e-01  +2.0500e-01  2.16e-03  5.43e-06  4.13e-04  7.81e-07  2.14e-05  7.98e-01  
 14  +2.0217e-01  +2.0235e-01  1.86e-04  4.66e-07  3.52e-05  6.42e-08  1.89e-06  9.20e-01  
 15  +2.0210e-01  +2.0210e-01  2.09e-06  5.22e-09  3.94e-07  7.13e-10  2.13e-08  9.89e-01  
 16  +2.0210e-01  +2.0210e-01  2.10e-08  5.25e-11  3.97e-09  7.17e-12  2.15e-10  9.90e-01  
 17  +2.0210e-01  +2.0210e-01  2.13e-10  5.34e-13  4.03e-11  7.31e-14  2.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 63.6591ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:52 PM: Optimal value: 2.021e-01
(CVXPY) Oct 06 04:24:52 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:52 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Iteration: 35, Objective: 0.2021
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:52 PM: Your problem has 870 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:52 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 870
  constraints   = 1370
  nnz(P)        = 0
  nnz(A)        = 11316
  cones (total) = 1
    : Nonnegative = 1,  numel = 1370

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0310e+02  5.03e+02  9.62e-01  3.43e+01  1.00e+00  1.01e+00   ------   
  1  +5.2659e-01  +1.1192e+02  1.11e+02  4.46e-01  2.04e+01  3.88e-03  5.80e-01  5.77e-01  
  2  +4.8885e-01  +1.5966e+01  1.55e+01  1.30e-01  8.04e+00  2.39e-02  2.45e-01  9.90e-01  
  3  +4.6271e-01  +3.2275e+00  2.76e+00  1.71e-02  1.28e+00  9.22e-03  3.87e-02  8.72e-01  
  4  +4.0991e-01  +2.4064e+00  2.00e+00  7.54e-03  5.72e-01  9.11e-03  1.76e-02  6.01e-01  
  5  +3.7026e-01  +1.9940e+00  1.62e+00  4.90e-03  3.70e-01  6.74e-03  1.18e-02  4.67e-01  
  6  +3.1680e-01  +1.0561e+00  7.39e-01  2.33e-03  1.70e-01  5.87e-05  6.18e-03  8.39e-01  
  7  +2.6385e-01  +5.2572e-01  2.62e-01  8.14e-04  5.85e-02  3.59e-05  2.45e-03  6.76e-01  
  8  +2.3899e-01  +3.9899e-01  1.60e-01  4.67e-04  3.41e-02  3.85e-05  1.50e-03  5.83e-01  
  9  +2.2412e-01  +3.1706e-01  9.29e-02  2.59e-04  1.93e-02  2.51e-05  8.71e-04  4.87e-01  
 10  +2.1444e-01  +2.6825e-01  5.38e-02  1.42e-04  1.08e-02  1.76e-05  4.95e-04  6.07e-01  
 11  +2.0605e-01  +2.2779e-01  2.17e-02  5.56e-05  4.26e-03  7.29e-06  2.03e-04  6.32e-01  
 12  +2.0386e-01  +2.1672e-01  1.29e-02  3.23e-05  2.48e-03  5.01e-06  1.21e-04  7.15e-01  
 13  +2.0167e-01  +2.0783e-01  6.16e-03  1.52e-05  1.17e-03  2.38e-06  5.91e-05  5.43e-01  
 14  +2.0065e-01  +2.0357e-01  2.92e-03  7.18e-06  5.52e-04  1.18e-06  2.86e-05  7.42e-01  
 15  +1.9983e-01  +2.0046e-01  6.25e-04  1.53e-06  1.17e-04  2.49e-07  6.22e-06  8.12e-01  
 16  +1.9973e-01  +2.0006e-01  3.32e-04  8.08e-07  6.20e-05  1.36e-07  3.31e-06  8.87e-01  
 17  +1.9960e-01  +1.9961e-01  8.47e-06  2.06e-08  1.58e-06  3.43e-09  8.49e-08  9.75e-01  
 18  +1.9960e-01  +1.9960e-01  8.49e-08  2.06e-10  1.58e-08  3.43e-11  8.50e-10  9.90e-01  
 19  +1.9960e-01  +1.9960e-01  8.58e-10  2.08e-12  1.60e-10  3.48e-13  8.62e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 76.5299ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:52 PM: Optimal value: 1.996e-01
(CVXPY) Oct 06 04:24:52 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:52 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Iteration: 36, Objective: 0.1996
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:53 PM: Your problem has 880 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:53 PM: Finished problem compilation (took 1.562e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 880
  constraints   = 1380
  nnz(P)        = 0
  nnz(A)        = 11380
  cones (total) = 1
    : Nonnegative = 1,  numel = 1380

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9907e-01  +5.0311e+02  5.03e+02  9.62e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.2559e-01  +1.1194e+02  1.11e+02  4.46e-01  2.02e+01  3.88e-03  5.79e-01  5.77e-01  
  2  +4.8776e-01  +1.5994e+01  1.55e+01  1.30e-01  7.97e+00  2.40e-02  2.45e-01  9.90e-01  
  3  +4.6064e-01  +3.1011e+00  2.64e+00  1.61e-02  1.21e+00  9.03e-03  3.67e-02  8.80e-01  
  4  +4.1178e-01  +2.4676e+00  2.06e+00  7.99e-03  6.03e-01  9.04e-03  1.87e-02  5.57e-01  
  5  +3.6992e-01  +2.0173e+00  1.65e+00  4.99e-03  3.76e-01  7.06e-03  1.20e-02  4.64e-01  
  6  +3.1807e-01  +1.0729e+00  7.55e-01  2.41e-03  1.76e-01  6.11e-05  6.40e-03  8.25e-01  
  7  +2.6436e-01  +5.3555e-01  2.71e-01  8.44e-04  6.05e-02  3.50e-05  2.53e-03  6.69e-01  
  8  +2.4006e-01  +4.1169e-01  1.72e-01  5.04e-04  3.66e-02  3.89e-05  1.61e-03  5.53e-01  
  9  +2.2269e-01  +3.1511e-01  9.24e-02  2.58e-04  1.91e-02  2.40e-05  8.68e-04  5.27e-01  
 10  +2.1331e-01  +2.6884e-01  5.55e-02  1.46e-04  1.11e-02  1.77e-05  5.08e-04  5.94e-01  
 11  +2.0453e-01  +2.2685e-01  2.23e-02  5.68e-05  4.36e-03  7.48e-06  2.07e-04  6.51e-01  
 12  +2.0265e-01  +2.1748e-01  1.48e-02  3.73e-05  2.87e-03  5.56e-06  1.39e-04  5.97e-01  
 13  +1.9949e-01  +2.0446e-01  4.97e-03  1.22e-05  9.47e-04  1.88e-06  4.74e-05  7.25e-01  
 14  +1.9894e-01  +2.0219e-01  3.25e-03  7.98e-06  6.17e-04  1.26e-06  3.13e-05  4.94e-01  
 15  +1.9798e-01  +1.9846e-01  4.88e-04  1.19e-06  9.20e-05  1.90e-07  4.79e-06  8.84e-01  
 16  +1.9780e-01  +1.9781e-01  6.30e-06  1.54e-08  1.19e-06  2.42e-09  6.22e-08  9.89e-01  
 17  +1.9780e-01  +1.9780e-01  6.30e-08  1.54e-10  1.19e-08  2.43e-11  6.22e-10  9.90e-01  
 18  +1.9780e-01  +1.9780e-01  6.31e-10  1.54e-12  1.19e-10  2.43e-13  6.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 71.499ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:53 PM: Optimal value: 1.978e-01
(CVXPY) Oct 06 04:24:53 PM: Compilation took 1.562e-02 seconds
(CVXPY) Oct 06 04:24:53 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 37, Objective: 0.1978
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:53 PM: Your problem has 890 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:53 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 890
  constraints   = 1390
  nnz(P)        = 0
  nnz(A)        = 11449
  cones (total) = 1
    : Nonnegative = 1,  numel = 1390

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +5.0310e+02  5.03e+02  9.62e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.2508e-01  +1.1192e+02  1.11e+02  4.46e-01  2.01e+01  3.88e-03  5.79e-01  5.77e-01  
  2  +4.8692e-01  +1.6015e+01  1.55e+01  1.29e-01  7.90e+00  2.40e-02  2.44e-01  9.90e-01  
  3  +4.5920e-01  +3.0732e+00  2.61e+00  1.58e-02  1.18e+00  8.96e-03  3.62e-02  8.81e-01  
  4  +4.0990e-01  +2.4834e+00  2.07e+00  8.04e-03  6.05e-01  8.97e-03  1.88e-02  5.54e-01  
  5  +3.6866e-01  +2.0340e+00  1.67e+00  5.07e-03  3.81e-01  6.81e-03  1.22e-02  4.72e-01  
  6  +3.1782e-01  +1.1106e+00  7.93e-01  2.52e-03  1.84e-01  5.96e-05  6.69e-03  8.44e-01  
  7  +2.6448e-01  +5.3699e-01  2.73e-01  8.52e-04  6.09e-02  3.76e-05  2.55e-03  6.94e-01  
  8  +2.3699e-01  +3.9554e-01  1.59e-01  4.64e-04  3.37e-02  3.98e-05  1.49e-03  6.21e-01  
  9  +2.2199e-01  +3.1268e-01  9.07e-02  2.52e-04  1.87e-02  2.56e-05  8.47e-04  5.01e-01  
 10  +2.1245e-01  +2.6502e-01  5.26e-02  1.38e-04  1.05e-02  1.76e-05  4.80e-04  6.03e-01  
 11  +2.0411e-01  +2.2492e-01  2.08e-02  5.30e-05  4.06e-03  7.27e-06  1.92e-04  6.65e-01  
 12  +2.0235e-01  +2.1615e-01  1.38e-02  3.46e-05  2.67e-03  5.36e-06  1.29e-04  6.11e-01  
 13  +1.9945e-01  +2.0425e-01  4.80e-03  1.18e-05  9.14e-04  1.87e-06  4.59e-05  7.27e-01  
 14  +1.9884e-01  +2.0170e-01  2.86e-03  7.02e-06  5.42e-04  1.17e-06  2.77e-05  6.82e-01  
 15  +1.9792e-01  +1.9823e-01  3.15e-04  7.71e-07  5.95e-05  1.27e-07  3.11e-06  9.41e-01  
 16  +1.9780e-01  +1.9781e-01  3.66e-06  8.96e-09  6.90e-07  1.47e-09  3.63e-08  9.90e-01  
 17  +1.9780e-01  +1.9780e-01  3.67e-08  8.97e-11  6.91e-09  1.47e-11  3.64e-10  9.90e-01  
 18  +1.9780e-01  +1.9780e-01  3.68e-10  9.00e-13  6.94e-11  1.47e-13  3.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 75.4698ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:53 PM: Optimal value: 1.978e-01
(CVXPY) Oct 06 04:24:53 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:53 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 38, Objective: 0.1978
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:53 PM: Your problem has 900 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:53 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 900
  constraints   = 1400
  nnz(P)        = 0
  nnz(A)        = 11533
  cones (total) = 1
    : Nonnegative = 1,  numel = 1400

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9906e-01  +5.0313e+02  5.03e+02  9.63e-01  3.39e+01  1.00e+00  1.01e+00   ------   
  1  +5.2442e-01  +1.1198e+02  1.11e+02  4.47e-01  2.00e+01  3.88e-03  5.79e-01  5.77e-01  
  2  +4.8614e-01  +1.6012e+01  1.55e+01  1.29e-01  7.86e+00  2.40e-02  2.44e-01  9.90e-01  
  3  +4.5825e-01  +3.1241e+00  2.67e+00  1.62e-02  1.21e+00  8.89e-03  3.72e-02  8.77e-01  
  4  +4.0685e-01  +2.5016e+00  2.09e+00  8.08e-03  6.05e-01  8.81e-03  1.90e-02  5.69e-01  
  5  +3.6913e-01  +2.0902e+00  1.72e+00  5.34e-03  3.99e-01  6.39e-03  1.29e-02  4.73e-01  
  6  +3.2175e-01  +1.1353e+00  8.14e-01  2.64e-03  1.92e-01  5.61e-05  6.98e-03  8.28e-01  
  7  +2.6565e-01  +5.4443e-01  2.79e-01  8.74e-04  6.24e-02  3.56e-05  2.60e-03  6.95e-01  
  8  +2.3861e-01  +4.0682e-01  1.68e-01  4.95e-04  3.59e-02  3.99e-05  1.58e-03  5.93e-01  
  9  +2.2121e-01  +3.1159e-01  9.04e-02  2.51e-04  1.86e-02  2.56e-05  8.44e-04  5.63e-01  
 10  +2.1226e-01  +2.6774e-01  5.55e-02  1.47e-04  1.11e-02  1.80e-05  5.10e-04  5.48e-01  
 11  +2.0322e-01  +2.2449e-01  2.13e-02  5.43e-05  4.14e-03  7.13e-06  1.99e-04  6.62e-01  
 12  +2.0079e-01  +2.1283e-01  1.20e-02  3.03e-05  2.32e-03  4.49e-06  1.14e-04  6.40e-01  
 13  +1.9807e-01  +2.0147e-01  3.39e-03  8.47e-06  6.46e-04  1.28e-06  3.32e-05  7.83e-01  
 14  +1.9736e-01  +1.9860e-01  1.24e-03  3.08e-06  2.35e-04  5.00e-07  1.23e-05  8.61e-01  
 15  +1.9691e-01  +1.9694e-01  2.74e-05  6.79e-08  5.18e-06  1.05e-08  2.75e-07  9.79e-01  
 16  +1.9690e-01  +1.9690e-01  2.74e-07  6.80e-10  5.18e-08  1.06e-10  2.75e-09  9.90e-01  
 17  +1.9690e-01  +1.9690e-01  2.75e-09  6.81e-12  5.19e-10  1.06e-12  2.76e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 79.7587ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:53 PM: Optimal value: 1.969e-01
(CVXPY) Oct 06 04:24:53 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:53 PM: Solver (including time spent in interface) took 9.373e-02 seconds
Iteration: 39, Objective: 0.1969
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:53 PM: Your problem has 910 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:53 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 910
  constraints   = 1410
  nnz(P)        = 0
  nnz(A)        = 11623
  cones (total) = 1
    : Nonnegative = 1,  numel = 1410

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +5.0311e+02  5.03e+02  9.63e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.2388e-01  +1.1205e+02  1.12e+02  4.48e-01  2.00e+01  3.89e-03  5.79e-01  5.77e-01  
  2  +4.8573e-01  +1.6082e+01  1.56e+01  1.29e-01  7.81e+00  2.41e-02  2.44e-01  9.90e-01  
  3  +4.5702e-01  +3.1464e+00  2.69e+00  1.62e-02  1.20e+00  9.03e-03  3.71e-02  8.75e-01  
  4  +4.0360e-01  +2.5215e+00  2.12e+00  8.02e-03  5.98e-01  8.89e-03  1.89e-02  5.78e-01  
  5  +3.6685e-01  +2.0954e+00  1.73e+00  5.36e-03  3.99e-01  6.22e-03  1.30e-02  4.71e-01  
  6  +3.1379e-01  +1.0233e+00  7.10e-01  2.25e-03  1.63e-01  5.55e-05  6.00e-03  8.44e-01  
  7  +2.6103e-01  +5.2255e-01  2.62e-01  8.20e-04  5.84e-02  3.87e-05  2.47e-03  6.74e-01  
  8  +2.3412e-01  +3.8429e-01  1.50e-01  4.39e-04  3.18e-02  3.87e-05  1.42e-03  6.29e-01  
  9  +2.2205e-01  +3.2071e-01  9.87e-02  2.73e-04  2.03e-02  3.03e-05  9.10e-04  4.94e-01  
 10  +2.1030e-01  +2.6217e-01  5.19e-02  1.35e-04  1.03e-02  1.76e-05  4.72e-04  5.92e-01  
 11  +2.0526e-01  +2.3724e-01  3.20e-02  8.20e-05  6.27e-03  1.14e-05  2.94e-04  4.92e-01  
 12  +1.9944e-01  +2.1053e-01  1.11e-02  2.79e-05  2.14e-03  3.95e-06  1.05e-04  6.74e-01  
 13  +1.9772e-01  +2.0284e-01  5.11e-03  1.27e-05  9.77e-04  1.95e-06  4.92e-05  7.11e-01  
 14  +1.9636e-01  +1.9737e-01  1.02e-03  2.52e-06  1.92e-04  3.84e-07  1.00e-05  8.22e-01  
 15  +1.9603e-01  +1.9612e-01  8.44e-05  2.08e-07  1.59e-05  3.24e-08  8.41e-07  9.42e-01  
 16  +1.9600e-01  +1.9600e-01  8.79e-07  2.17e-09  1.66e-07  3.37e-10  8.77e-09  9.90e-01  
 17  +1.9600e-01  +1.9600e-01  8.80e-09  2.17e-11  1.66e-09  3.37e-12  8.78e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.2339ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:53 PM: Optimal value: 1.960e-01
(CVXPY) Oct 06 04:24:53 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:24:53 PM: Solver (including time spent in interface) took 7.812e-02 seconds
Iteration: 40, Objective: 0.1960
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:54 PM: Your problem has 913 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:54 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 913
  constraints   = 1413
  nnz(P)        = 0
  nnz(A)        = 11673
  cones (total) = 1
    : Nonnegative = 1,  numel = 1413

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9904e-01  +5.0312e+02  5.03e+02  9.63e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.2336e-01  +1.1207e+02  1.12e+02  4.48e-01  1.99e+01  3.89e-03  5.79e-01  5.77e-01  
  2  +4.8515e-01  +1.6088e+01  1.56e+01  1.29e-01  7.78e+00  2.41e-02  2.44e-01  9.90e-01  
  3  +4.5637e-01  +3.2408e+00  2.78e+00  1.68e-02  1.24e+00  9.05e-03  3.86e-02  8.66e-01  
  4  +4.0168e-01  +2.4980e+00  2.10e+00  7.99e-03  5.94e-01  8.58e-03  1.89e-02  5.95e-01  
  5  +3.6489e-01  +2.1064e+00  1.74e+00  5.37e-03  3.99e-01  6.16e-03  1.31e-02  4.73e-01  
  6  +3.1366e-01  +1.0276e+00  7.14e-01  2.28e-03  1.65e-01  5.43e-05  6.09e-03  8.38e-01  
  7  +2.6096e-01  +5.2193e-01  2.61e-01  8.20e-04  5.83e-02  3.17e-05  2.47e-03  6.54e-01  
  8  +2.3645e-01  +3.9939e-01  1.63e-01  4.81e-04  3.46e-02  3.62e-05  1.54e-03  5.67e-01  
  9  +2.2054e-01  +3.1396e-01  9.34e-02  2.61e-04  1.92e-02  2.45e-05  8.76e-04  5.17e-01  
 10  +2.1081e-01  +2.6514e-01  5.43e-02  1.45e-04  1.08e-02  1.66e-05  5.06e-04  5.62e-01  
 11  +2.0125e-01  +2.1865e-01  1.74e-02  4.49e-05  3.37e-03  5.86e-06  1.67e-04  7.71e-01  
 12  +1.9891e-01  +2.0816e-01  9.24e-03  2.35e-05  1.77e-03  3.41e-06  9.05e-05  6.68e-01  
 13  +1.9644e-01  +1.9801e-01  1.57e-03  3.95e-06  2.95e-04  5.46e-07  1.60e-05  8.47e-01  
 14  +1.9601e-01  +1.9632e-01  3.05e-04  7.67e-07  5.71e-05  1.13e-07  3.18e-06  8.96e-01  
 15  +1.9590e-01  +1.9591e-01  6.73e-06  1.69e-08  1.26e-06  2.49e-09  7.06e-08  9.81e-01  
 16  +1.9590e-01  +1.9590e-01  6.73e-08  1.69e-10  1.26e-08  2.49e-11  7.06e-10  9.90e-01  
 17  +1.9590e-01  +1.9590e-01  6.76e-10  1.70e-12  1.26e-10  2.50e-13  7.10e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 73.632ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:54 PM: Optimal value: 1.959e-01
(CVXPY) Oct 06 04:24:54 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:24:54 PM: Solver (including time spent in interface) took 7.813e-02 seconds
Iteration: 41, Objective: 0.1959
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:24:54 PM: Your problem has 914 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:24:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:24:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:24:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:24:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:24:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:24:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:24:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:24:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:24:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:24:54 PM: Finished problem compilation (took 5.090e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 914
  constraints   = 1414
  nnz(P)        = 0
  nnz(A)        = 11685
  cones (total) = 1
    : Nonnegative = 1,  numel = 1414

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9905e-01  +5.0310e+02  5.03e+02  9.63e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.2330e-01  +1.1206e+02  1.12e+02  4.48e-01  1.99e+01  3.89e-03  5.79e-01  5.77e-01  
  2  +4.8503e-01  +1.6090e+01  1.56e+01  1.29e-01  7.77e+00  2.41e-02  2.44e-01  9.90e-01  
  3  +4.5606e-01  +3.2283e+00  2.77e+00  1.67e-02  1.23e+00  9.04e-03  3.84e-02  8.67e-01  
  4  +4.0102e-01  +2.5008e+00  2.10e+00  7.97e-03  5.92e-01  8.61e-03  1.89e-02  5.95e-01  
  5  +3.6502e-01  +2.1045e+00  1.74e+00  5.39e-03  4.01e-01  6.09e-03  1.31e-02  4.70e-01  
  6  +3.1368e-01  +1.0321e+00  7.18e-01  2.29e-03  1.66e-01  5.40e-05  6.13e-03  8.40e-01  
  7  +2.6084e-01  +5.2204e-01  2.61e-01  8.21e-04  5.83e-02  3.16e-05  2.47e-03  6.56e-01  
  8  +2.3510e-01  +3.8793e-01  1.53e-01  4.53e-04  3.25e-02  3.11e-05  1.46e-03  5.58e-01  
  9  +2.2137e-01  +3.1721e-01  9.58e-02  2.69e-04  1.98e-02  2.35e-05  8.98e-04  4.78e-01  
 10  +2.1095e-01  +2.6551e-01  5.46e-02  1.45e-04  1.09e-02  1.59e-05  5.08e-04  5.64e-01  
 11  +2.0126e-01  +2.1861e-01  1.74e-02  4.49e-05  3.37e-03  5.71e-06  1.66e-04  7.78e-01  
 12  +1.9895e-01  +2.0828e-01  9.33e-03  2.38e-05  1.79e-03  3.40e-06  9.13e-05  6.61e-01  
 13  +1.9644e-01  +1.9802e-01  1.58e-03  3.99e-06  2.98e-04  5.43e-07  1.61e-05  8.47e-01  
 14  +1.9601e-01  +1.9631e-01  3.03e-04  7.62e-07  5.67e-05  1.11e-07  3.15e-06  8.95e-01  
 15  +1.9590e-01  +1.9591e-01  6.76e-06  1.70e-08  1.27e-06  2.48e-09  7.09e-08  9.81e-01  
 16  +1.9590e-01  +1.9590e-01  6.77e-08  1.70e-10  1.27e-08  2.48e-11  7.09e-10  9.90e-01  
 17  +1.9590e-01  +1.9590e-01  6.80e-10  1.71e-12  1.27e-10  2.50e-13  7.13e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 69.0375ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:24:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:24:54 PM: Optimal value: 1.959e-01
(CVXPY) Oct 06 04:24:54 PM: Compilation took 5.090e-03 seconds
(CVXPY) Oct 06 04:24:54 PM: Solver (including time spent in interface) took 7.822e-02 seconds
FULL MODEL:
  Accruacy: 0.766
  Our objective: 0.532

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.18)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x7 = 0 AND x8 = 0)                                             <-- (term's our objective: 0.022)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x3 = 0 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1)                                             <-- (term's our objective: 0.018)
 OR (x0 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x9 = 1)                                  <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1)                                  <-- (term's our objective: 0.012)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)                                  <-- (term's our objective: 0.014)
 OR (x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1)                                  <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0)                       <-- (term's our objective: 0.006)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x1 = 0 AND x2 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.016)
 OR (x1 = 0 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0)                                             <-- (term's our objective: 0.022)
 OR (x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)                                  <-- (term's our objective: 0.014)
 OR (x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x7 = 1 AND x9 = 1)                                             <-- (term's our objective: 0.02)
 OR (x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.006)
 OR (x1 = 1 AND x2 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.01)
 OR (x1 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.008)
 OR (x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)                                  <-- (term's our objective: 0.006)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 15.733458995819092
Best over terms:
  Our final objective: 0.17999999999999997
    Its accruacy: 0.59
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.17999999999999997
  Highest accruacy: 0.59
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 103 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 104 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 105 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 106 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 107 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 108 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 109 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 110 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 111 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 112 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 113 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 114 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 115 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 116 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 117 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 118 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 119 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 120 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 121 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 122 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 123 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 124 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 125 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 126 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

