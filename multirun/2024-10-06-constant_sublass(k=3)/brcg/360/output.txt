Command:
python test_script.py -s constant_subclass -d 10 -n 10 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 10.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:09 PM: Your problem has 26 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:09 PM: Finished problem compilation (took 6.251e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 26
  constraints   = 31
  nnz(P)        = 0
  nnz(A)        = 86
  cones (total) = 1
    : Nonnegative = 1,  numel = 31

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.5376e-01  +6.3215e+00  5.87e+00  7.79e-01  2.81e+00  1.00e+00  1.30e+00   ------   
  1  +4.7062e-01  +1.3578e+00  8.87e-01  3.26e-01  1.38e+00  3.49e-03  6.75e-01  6.72e-01  
  2  +2.8019e-01  +5.7137e-01  2.91e-01  9.49e-02  4.48e-01  1.43e-02  3.05e-01  7.04e-01  
  3  +2.1229e-01  +2.5410e-01  4.18e-02  1.15e-02  5.94e-02  3.51e-03  5.31e-02  9.46e-01  
  4  +2.0035e-01  +2.0120e-01  8.46e-04  2.43e-04  1.25e-03  6.04e-05  1.19e-03  9.78e-01  
  5  +2.0010e-01  +2.0011e-01  8.44e-06  2.43e-06  1.25e-05  6.02e-07  1.19e-05  9.90e-01  
  6  +2.0010e-01  +2.0010e-01  8.44e-08  2.43e-08  1.25e-07  6.02e-09  1.19e-07  9.90e-01  
  7  +2.0010e-01  +2.0010e-01  8.44e-10  2.43e-10  1.25e-09  6.02e-11  1.19e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 260.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:09 PM: Optimal value: 2.001e-01
(CVXPY) Oct 06 04:22:09 PM: Compilation took 6.251e-02 seconds
(CVXPY) Oct 06 04:22:09 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:09 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:09 PM: Finished problem compilation (took 9.594e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 106
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2588e-01  +6.6889e+00  6.26e+00  8.05e-01  2.68e+00  1.00e+00  1.35e+00   ------   
  1  +3.4123e-01  +1.3097e+00  9.68e-01  3.28e-01  1.23e+00  3.78e-03  6.55e-01  6.78e-01  
  2  +2.9922e-02  +4.5856e-01  4.29e-01  1.15e-01  4.71e-01  2.13e-02  3.52e-01  6.85e-01  
  3  +1.0380e-01  +1.3590e-01  3.21e-02  9.78e-03  4.27e-02  6.62e-03  3.79e-02  9.57e-01  
  4  +1.0028e-01  +1.0077e-01  4.88e-04  1.60e-04  6.92e-04  8.25e-05  6.41e-04  9.83e-01  
  5  +1.0020e-01  +1.0021e-01  1.16e-05  4.37e-06  1.86e-05  8.00e-07  1.80e-05  9.72e-01  
  6  +1.0020e-01  +1.0020e-01  1.33e-07  4.99e-08  2.12e-07  9.71e-09  2.09e-07  9.88e-01  
  7  +1.0020e-01  +1.0020e-01  1.33e-09  4.99e-10  2.12e-09  9.71e-11  2.09e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 221.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:09 PM: Optimal value: 1.002e-01
(CVXPY) Oct 06 04:22:09 PM: Compilation took 9.594e-04 seconds
(CVXPY) Oct 06 04:22:09 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:09 PM: Your problem has 46 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:09 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:09 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:09 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:09 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:09 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:09 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:09 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:09 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:09 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:09 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 46
  constraints   = 51
  nnz(P)        = 0
  nnz(A)        = 143
  cones (total) = 1
    : Nonnegative = 1,  numel = 51

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4296e-01  +6.3127e+00  5.97e+00  8.27e-01  2.87e+00  1.00e+00  1.28e+00   ------   
  1  +1.3582e-01  +1.1638e+00  1.03e+00  3.62e-01  1.25e+00  4.43e-03  5.96e-01  6.40e-01  
  2  +8.6236e-02  +3.0446e-01  2.18e-01  9.95e-02  4.02e-01  1.36e-02  2.28e-01  7.68e-01  
  3  +3.1334e-02  +1.6782e-01  1.36e-01  4.54e-02  2.20e-01  9.61e-03  1.30e-01  5.52e-01  
  4  +1.8004e-03  +9.5850e-03  7.78e-03  2.56e-03  1.27e-02  5.29e-04  8.27e-03  9.43e-01  
  5  +3.0371e-04  +4.3999e-04  1.36e-04  4.71e-05  2.31e-04  5.30e-06  1.53e-04  9.81e-01  
  6  +2.9722e-04  +3.1024e-04  1.30e-05  5.01e-06  2.29e-05  5.28e-07  1.68e-05  8.93e-01  
  7  +2.9997e-04  +3.0011e-04  1.41e-07  5.47e-08  2.49e-07  5.69e-09  1.83e-07  9.89e-01  
  8  +3.0000e-04  +3.0000e-04  1.41e-09  5.47e-10  2.49e-09  5.69e-11  1.83e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 320.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:09 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:09 PM: Optimal value: 3.000e-04
(CVXPY) Oct 06 04:22:09 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:09 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x0 = 0 AND x2 = 0 AND x8 = 0)            <-- (term's our objective: 0.4)
 OR (x0 = 0 AND x7 = 1)                       <-- (term's our objective: 0.6)
 OR (x0 = 1 AND x5 = 0 AND x7 = 0 AND x9 = 0) <-- (term's our objective: 0.2)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.1158223152160645
Best over terms:
  Our final objective: 0.6
    Its accruacy: 0.8
    Its hamming distance: 3
  Shortest hamming distance: 2
    Its our objective: 0.4
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

