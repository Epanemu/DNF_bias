Command:
python test_script.py -s constant_subclass -d 10 -n 5000 --seed 43 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.1372
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 10.

Computed total variation: 0.3768
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:51 PM: Your problem has 2521 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:51 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:51 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:51 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:51 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:51 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:51 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:51 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:52 PM: Finished problem compilation (took 7.813e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2521
  constraints   = 5021
  nnz(P)        = 0
  nnz(A)        = 32521
  cones (total) = 1
    : Nonnegative = 1,  numel = 5021

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0013e-01  +2.5008e+03  2.50e+03  9.80e-01  8.54e+01  1.00e+00  1.00e+00   ------   
  1  +5.7822e-01  +5.4952e+02  5.49e+02  4.39e-01  5.63e+01  3.76e-03  5.85e-01  5.76e-01  
  2  +5.2924e-01  +6.0325e+01  5.98e+01  1.72e-01  2.83e+01  1.78e-02  2.89e-01  9.56e-01  
  3  +5.0811e-01  +1.5630e+01  1.51e+01  1.06e-01  1.73e+01  4.99e-05  2.61e-01  3.60e-01  
  4  +5.0087e-01  +1.6020e+00  1.10e+00  1.08e-02  1.82e+00  6.72e-06  1.34e-01  7.57e-01  
  5  +5.0012e-01  +6.8076e-01  1.81e-01  1.71e-03  2.94e-01  1.48e-05  3.77e-02  9.90e-01  
  6  +5.0001e-01  +6.5563e-01  1.56e-01  1.21e-03  2.09e-01  5.52e-05  6.40e-03  8.57e-01  
  7  +4.9851e-01  +6.5207e-01  1.54e-01  1.42e-04  2.47e-02  7.61e-04  4.27e-04  9.34e-01  
  8  +4.9539e-01  +6.3266e-01  1.37e-01  8.01e-05  1.39e-02  9.54e-04  2.39e-04  5.45e-01  
  9  +4.8989e-01  +5.9874e-01  1.09e-01  6.53e-05  1.13e-02  5.37e-04  2.02e-04  2.75e-01  
 10  +4.8136e-01  +5.5189e-01  7.05e-02  3.96e-05  6.85e-03  1.74e-04  1.28e-04  5.70e-01  
 11  +4.7709e-01  +5.2926e-01  5.22e-02  2.80e-05  4.84e-03  1.77e-06  9.31e-05  8.89e-01  
 12  +4.6739e-01  +4.8305e-01  1.57e-02  7.53e-06  1.30e-03  5.84e-07  2.69e-05  7.53e-01  
 13  +4.6315e-01  +4.6484e-01  1.70e-03  7.26e-07  1.25e-04  1.46e-07  2.90e-06  9.90e-01  
 14  +4.6251e-01  +4.6253e-01  2.16e-05  8.85e-09  1.53e-06  1.86e-09  3.72e-08  9.88e-01  
 15  +4.6250e-01  +4.6250e-01  2.16e-07  8.84e-11  1.53e-08  1.86e-11  3.72e-10  9.90e-01  
 16  +4.6250e-01  +4.6250e-01  2.17e-09  8.85e-13  1.53e-10  1.97e-13  3.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 86.2691ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:52 PM: Optimal value: 4.625e-01
(CVXPY) Oct 06 04:25:52 PM: Compilation took 7.813e-02 seconds
(CVXPY) Oct 06 04:25:52 PM: Solver (including time spent in interface) took 9.375e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4625
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:52 PM: Your problem has 2531 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:52 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2531
  constraints   = 5031
  nnz(P)        = 0
  nnz(A)        = 36845
  cones (total) = 1
    : Nonnegative = 1,  numel = 5031

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0012e-01  +2.5012e+03  2.50e+03  9.80e-01  8.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.7810e-01  +5.4981e+02  5.49e+02  4.40e-01  5.80e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2897e-01  +6.0108e+01  5.96e+01  1.72e-01  2.91e+01  1.79e-02  2.90e-01  9.59e-01  
  3  +5.0799e-01  +1.5504e+01  1.50e+01  1.06e-01  1.77e+01  5.02e-05  2.60e-01  3.73e-01  
  4  +5.0081e-01  +1.5311e+00  1.03e+00  1.01e-02  1.76e+00  6.88e-06  1.25e-01  7.98e-01  
  5  +5.0031e-01  +9.1355e-01  4.13e-01  3.96e-03  6.95e-01  1.24e-05  6.00e-02  7.56e-01  
  6  +5.0018e-01  +7.6154e-01  2.61e-01  2.40e-03  4.23e-01  1.62e-05  1.92e-02  7.52e-01  
  7  +4.9972e-01  +7.0512e-01  2.05e-01  3.21e-04  5.74e-02  2.17e-04  9.01e-04  9.60e-01  
  8  +4.9876e-01  +6.9248e-01  1.94e-01  1.73e-04  3.10e-02  3.16e-04  4.76e-04  6.05e-01  
  9  +4.9760e-01  +6.8335e-01  1.86e-01  1.35e-04  2.42e-02  3.46e-04  3.71e-04  2.79e-01  
 10  +4.9553e-01  +6.6866e-01  1.73e-01  1.03e-04  1.84e-02  3.09e-04  2.82e-04  4.19e-01  
 11  +4.9353e-01  +6.5650e-01  1.63e-01  8.85e-05  1.58e-02  2.10e-04  2.43e-04  4.12e-01  
 12  +4.9187e-01  +6.4584e-01  1.54e-01  8.31e-05  1.49e-02  1.27e-04  2.30e-04  3.60e-01  
 13  +4.8784e-01  +6.2818e-01  1.40e-01  6.83e-05  1.22e-02  4.82e-05  1.91e-04  6.81e-01  
 14  +4.8633e-01  +6.2281e-01  1.36e-01  6.36e-05  1.14e-02  4.25e-05  1.78e-04  1.95e-01  
 15  +4.7455e-01  +5.7955e-01  1.05e-01  4.17e-05  7.42e-03  1.45e-05  1.20e-04  8.34e-01  
 16  +4.5528e-01  +5.1169e-01  5.64e-02  1.93e-05  3.42e-03  7.12e-06  5.77e-05  6.39e-01  
 17  +4.4852e-01  +4.8733e-01  3.88e-02  1.25e-05  2.22e-03  5.79e-06  3.79e-05  9.90e-01  
 18  +4.3418e-01  +4.4012e-01  5.94e-03  1.86e-06  3.30e-04  7.49e-07  5.89e-06  8.68e-01  
 19  +4.3153e-01  +4.3159e-01  6.51e-05  2.03e-08  3.60e-06  7.69e-09  6.46e-08  9.89e-01  
 20  +4.3150e-01  +4.3150e-01  6.51e-07  2.03e-10  3.60e-08  7.68e-11  6.46e-10  9.90e-01  
 21  +4.3150e-01  +4.3150e-01  6.51e-09  2.03e-12  3.60e-10  7.71e-13  6.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 133.4144ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:52 PM: Optimal value: 4.315e-01
(CVXPY) Oct 06 04:25:52 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:25:52 PM: Solver (including time spent in interface) took 1.414e-01 seconds
Iteration: 2, Objective: 0.4315
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:52 PM: Your problem has 2541 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:52 PM: Finished problem compilation (took 3.147e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2541
  constraints   = 5041
  nnz(P)        = 0
  nnz(A)        = 38010
  cones (total) = 1
    : Nonnegative = 1,  numel = 5041

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5012e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7795e-01  +5.4978e+02  5.49e+02  4.40e-01  5.80e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2884e-01  +5.9975e+01  5.94e+01  1.72e-01  2.90e+01  1.79e-02  2.89e-01  9.61e-01  
  3  +5.0795e-01  +1.5447e+01  1.49e+01  1.05e-01  1.76e+01  5.03e-05  2.59e-01  3.79e-01  
  4  +5.0079e-01  +1.5066e+00  1.01e+00  9.89e-03  1.72e+00  6.94e-06  1.21e-01  8.13e-01  
  5  +5.0034e-01  +9.5861e-01  4.58e-01  4.41e-03  7.74e-01  1.17e-05  5.65e-02  6.89e-01  
  6  +5.0017e-01  +7.7038e-01  2.70e-01  2.14e-03  3.79e-01  2.60e-05  9.90e-03  8.77e-01  
  7  +4.9977e-01  +7.7055e-01  2.71e-01  4.16e-04  7.49e-02  2.06e-04  1.15e-03  8.86e-01  
  8  +4.9851e-01  +7.4944e-01  2.51e-01  1.87e-04  3.38e-02  3.37e-04  5.07e-04  7.36e-01  
  9  +4.9545e-01  +7.2557e-01  2.30e-01  1.32e-04  2.37e-02  3.55e-04  3.57e-04  3.98e-01  
 10  +4.9158e-01  +7.0379e-01  2.12e-01  1.07e-04  1.92e-02  3.02e-04  2.93e-04  3.10e-01  
 11  +4.8821e-01  +6.8679e-01  1.99e-01  9.66e-05  1.73e-02  2.44e-04  2.67e-04  2.09e-01  
 12  +4.8082e-01  +6.5324e-01  1.72e-01  7.57e-05  1.36e-02  1.80e-04  2.14e-04  3.33e-01  
 13  +4.7701e-01  +6.3711e-01  1.60e-01  6.83e-05  1.22e-02  1.40e-04  1.95e-04  2.16e-01  
 14  +4.6441e-01  +5.8170e-01  1.17e-01  5.02e-05  8.94e-03  1.34e-06  1.50e-04  8.33e-01  
 15  +4.4946e-01  +5.2512e-01  7.57e-02  2.89e-05  5.13e-03  1.51e-06  8.96e-05  4.48e-01  
 16  +4.3406e-01  +4.6780e-01  3.37e-02  1.18e-05  2.09e-03  4.40e-06  3.81e-05  9.90e-01  
 17  +4.2340e-01  +4.3008e-01  6.68e-03  2.28e-06  4.04e-04  8.32e-07  7.68e-06  8.40e-01  
 18  +4.2074e-01  +4.2107e-01  3.26e-04  1.10e-07  1.96e-05  3.91e-08  3.81e-07  9.61e-01  
 19  +4.2060e-01  +4.2060e-01  3.30e-06  1.12e-09  1.98e-07  3.94e-10  3.86e-09  9.90e-01  
 20  +4.2060e-01  +4.2060e-01  3.30e-08  1.12e-11  1.98e-09  3.94e-12  3.86e-11  9.90e-01  
 21  +4.2060e-01  +4.2060e-01  3.30e-10  1.12e-13  1.98e-11  3.98e-14  3.89e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 135.3437ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:52 PM: Optimal value: 4.206e-01
(CVXPY) Oct 06 04:25:52 PM: Compilation took 3.147e-02 seconds
(CVXPY) Oct 06 04:25:52 PM: Solver (including time spent in interface) took 1.414e-01 seconds
Iteration: 3, Objective: 0.4206
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:52 PM: Your problem has 2551 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:53 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2551
  constraints   = 5051
  nnz(P)        = 0
  nnz(A)        = 39062
  cones (total) = 1
    : Nonnegative = 1,  numel = 5051

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5012e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7780e-01  +5.4981e+02  5.49e+02  4.41e-01  5.80e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2872e-01  +5.9869e+01  5.93e+01  1.72e-01  2.89e+01  1.80e-02  2.88e-01  9.63e-01  
  3  +5.0792e-01  +1.5413e+01  1.49e+01  1.05e-01  1.76e+01  5.05e-05  2.58e-01  3.83e-01  
  4  +5.0078e-01  +1.4950e+00  9.94e-01  9.79e-03  1.71e+00  6.98e-06  1.19e-01  8.20e-01  
  5  +5.0028e-01  +8.8032e-01  3.80e-01  3.63e-03  6.39e-01  1.43e-05  4.02e-02  8.86e-01  
  6  +5.0014e-01  +8.5581e-01  3.56e-01  1.71e-03  3.07e-01  7.21e-05  5.47e-03  9.03e-01  
  7  +4.9948e-01  +8.4887e-01  3.49e-01  4.26e-04  7.68e-02  3.15e-04  1.16e-03  7.94e-01  
  8  +4.9696e-01  +7.9364e-01  2.97e-01  1.65e-04  2.98e-02  5.34e-04  4.43e-04  7.67e-01  
  9  +4.9199e-01  +7.5106e-01  2.59e-01  1.40e-04  2.53e-02  3.77e-04  3.83e-04  2.72e-01  
 10  +4.8863e-01  +7.2423e-01  2.36e-01  1.24e-04  2.23e-02  2.26e-04  3.40e-04  3.83e-01  
 11  +4.8164e-01  +6.8261e-01  2.01e-01  9.84e-05  1.77e-02  1.05e-04  2.75e-04  5.37e-01  
 12  +4.7822e-01  +6.6644e-01  1.88e-01  9.00e-05  1.61e-02  7.58e-05  2.54e-04  2.75e-01  
 13  +4.5372e-01  +5.5936e-01  1.06e-01  4.09e-05  7.30e-03  3.75e-06  1.23e-04  9.90e-01  
 14  +4.4320e-01  +5.1956e-01  7.64e-02  2.84e-05  5.05e-03  3.24e-06  8.78e-05  3.42e-01  
 15  +4.3228e-01  +4.7841e-01  4.61e-02  1.63e-05  2.90e-03  5.02e-06  5.22e-05  8.23e-01  
 16  +4.1877e-01  +4.3013e-01  1.14e-02  3.87e-06  6.88e-04  1.19e-06  1.31e-05  7.82e-01  
 17  +4.1445e-01  +4.1502e-01  5.71e-04  1.93e-07  3.43e-05  7.49e-08  6.64e-07  9.90e-01  
 18  +4.1420e-01  +4.1421e-01  5.75e-06  1.94e-09  3.45e-07  7.54e-10  6.69e-09  9.90e-01  
 19  +4.1420e-01  +4.1420e-01  5.75e-08  1.94e-11  3.45e-09  7.54e-12  6.69e-11  9.90e-01  
 20  +4.1420e-01  +4.1420e-01  5.75e-10  1.94e-13  3.45e-11  7.54e-14  6.70e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 127.8281ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:53 PM: Optimal value: 4.142e-01
(CVXPY) Oct 06 04:25:53 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:25:53 PM: Solver (including time spent in interface) took 1.285e-01 seconds
Iteration: 4, Objective: 0.4142
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:53 PM: Your problem has 2561 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:53 PM: Finished problem compilation (took 3.401e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2561
  constraints   = 5061
  nnz(P)        = 0
  nnz(A)        = 39502
  cones (total) = 1
    : Nonnegative = 1,  numel = 5061

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5012e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7764e-01  +5.4982e+02  5.49e+02  4.41e-01  5.79e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2860e-01  +5.9744e+01  5.92e+01  1.71e-01  2.87e+01  1.80e-02  2.88e-01  9.64e-01  
  3  +5.0789e-01  +1.5373e+01  1.49e+01  1.05e-01  1.75e+01  5.07e-05  2.56e-01  3.88e-01  
  4  +5.0077e-01  +1.4843e+00  9.84e-01  9.70e-03  1.69e+00  7.02e-06  1.16e-01  8.27e-01  
  5  +5.0033e-01  +9.4563e-01  4.45e-01  4.26e-03  7.50e-01  1.39e-05  4.26e-02  8.14e-01  
  6  +5.0015e-01  +8.7288e-01  3.73e-01  1.61e-03  2.89e-01  7.29e-05  4.90e-03  9.18e-01  
  7  +4.9958e-01  +8.6368e-01  3.64e-01  4.66e-04  8.43e-02  2.60e-04  1.26e-03  7.60e-01  
  8  +4.9701e-01  +8.1070e-01  3.14e-01  1.72e-04  3.12e-02  4.73e-04  4.57e-04  7.95e-01  
  9  +4.9192e-01  +7.6935e-01  2.77e-01  1.51e-04  2.73e-02  3.44e-04  4.09e-04  2.24e-01  
 10  +4.8503e-01  +7.2835e-01  2.43e-01  1.16e-04  2.08e-02  2.66e-04  3.19e-04  3.64e-01  
 11  +4.8363e-01  +7.1958e-01  2.36e-01  1.14e-04  2.05e-02  2.32e-04  3.15e-04  7.68e-02  
 12  +4.6267e-01  +6.1333e-01  1.51e-01  6.22e-05  1.11e-02  6.71e-05  1.81e-04  7.03e-01  
 13  +4.5791e-01  +5.9175e-01  1.34e-01  5.76e-05  1.03e-02  4.21e-05  1.77e-04  2.30e-01  
 14  +4.5406e-01  +5.7675e-01  1.23e-01  5.16e-05  9.21e-03  3.40e-05  1.58e-04  2.62e-01  
 15  +4.4917e-01  +5.5851e-01  1.09e-01  4.42e-05  7.88e-03  2.68e-05  1.35e-04  3.17e-01  
 16  +4.3654e-01  +5.1016e-01  7.36e-02  2.78e-05  4.94e-03  1.68e-05  8.75e-05  4.24e-01  
 17  +4.2494e-01  +4.6637e-01  4.14e-02  1.49e-05  2.65e-03  8.62e-06  4.88e-05  5.21e-01  
 18  +4.1347e-01  +4.2404e-01  1.06e-02  3.66e-06  6.49e-04  2.00e-06  1.25e-05  7.74e-01  
 19  +4.0974e-01  +4.1053e-01  7.88e-04  2.70e-07  4.79e-05  1.12e-07  9.41e-07  9.90e-01  
 20  +4.0940e-01  +4.0941e-01  7.94e-06  2.72e-09  4.83e-07  1.13e-09  9.50e-09  9.90e-01  
 21  +4.0940e-01  +4.0940e-01  7.94e-08  2.72e-11  4.83e-09  1.13e-11  9.50e-11  9.90e-01  
 22  +4.0940e-01  +4.0940e-01  7.94e-10  2.72e-13  4.83e-11  1.13e-13  9.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 145.8398ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:53 PM: Optimal value: 4.094e-01
(CVXPY) Oct 06 04:25:53 PM: Compilation took 3.401e-02 seconds
(CVXPY) Oct 06 04:25:53 PM: Solver (including time spent in interface) took 1.545e-01 seconds
Iteration: 5, Objective: 0.4094
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:53 PM: Your problem has 2571 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:53 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:53 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:53 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:53 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:53 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:53 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:53 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:53 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:53 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:53 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:53 PM: Finished problem compilation (took 4.706e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:53 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2571
  constraints   = 5071
  nnz(P)        = 0
  nnz(A)        = 40286
  cones (total) = 1
    : Nonnegative = 1,  numel = 5071

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5012e+03  2.50e+03  9.80e-01  8.81e+01  1.00e+00  1.00e+00   ------   
  1  +5.7749e-01  +5.4986e+02  5.49e+02  4.41e-01  5.78e+01  3.76e-03  5.86e-01  5.76e-01  
  2  +5.2850e-01  +5.9654e+01  5.91e+01  1.71e-01  2.86e+01  1.80e-02  2.87e-01  9.66e-01  
  3  +5.0787e-01  +1.5345e+01  1.48e+01  1.05e-01  1.74e+01  5.08e-05  2.55e-01  3.92e-01  
  4  +5.0077e-01  +1.4764e+00  9.76e-01  9.63e-03  1.68e+00  7.05e-06  1.15e-01  8.33e-01  
  5  +5.0034e-01  +9.5473e-01  4.54e-01  4.36e-03  7.66e-01  1.34e-05  4.11e-02  7.75e-01  
  6  +5.0017e-01  +9.6355e-01  4.63e-01  1.44e-03  2.59e-01  9.86e-05  4.10e-03  9.53e-01  
  7  +4.9901e-01  +8.8680e-01  3.88e-01  3.30e-04  5.99e-02  3.23e-04  8.79e-04  8.72e-01  
  8  +4.9495e-01  +8.2948e-01  3.35e-01  1.74e-04  3.15e-02  4.00e-04  4.62e-04  6.12e-01  
  9  +4.9069e-01  +7.9914e-01  3.08e-01  1.50e-04  2.72e-02  3.37e-04  4.04e-04  2.17e-01  
 10  +4.8450e-01  +7.5245e-01  2.68e-01  1.33e-04  2.40e-02  1.72e-04  3.65e-04  3.76e-01  
 11  +4.6916e-01  +6.6608e-01  1.97e-01  8.88e-05  1.59e-02  7.68e-05  2.53e-04  5.46e-01  
 12  +4.6086e-01  +6.2937e-01  1.69e-01  7.09e-05  1.27e-02  6.38e-05  2.07e-04  2.15e-01  
 13  +4.5045e-01  +5.7898e-01  1.29e-01  5.56e-05  9.92e-03  1.62e-06  1.72e-04  9.90e-01  
 14  +4.3763e-01  +5.2650e-01  8.89e-02  3.58e-05  6.37e-03  1.79e-06  1.13e-04  3.87e-01  
 15  +4.2513e-01  +4.7980e-01  5.47e-02  2.02e-05  3.59e-03  4.07e-06  6.57e-05  7.19e-01  
 16  +4.0938e-01  +4.1931e-01  9.93e-03  3.53e-06  6.27e-04  1.04e-06  1.22e-05  9.35e-01  
 17  +4.0587e-01  +4.0700e-01  1.12e-03  3.94e-07  7.00e-05  1.46e-07  1.40e-06  9.90e-01  
 18  +4.0540e-01  +4.0542e-01  1.18e-05  4.13e-09  7.34e-07  1.53e-09  1.48e-08  9.89e-01  
 19  +4.0540e-01  +4.0540e-01  1.18e-07  4.13e-11  7.34e-09  1.53e-11  1.48e-10  9.90e-01  
 20  +4.0540e-01  +4.0540e-01  1.18e-09  4.13e-13  7.34e-11  1.53e-13  1.48e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.3563ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:53 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:53 PM: Optimal value: 4.054e-01
(CVXPY) Oct 06 04:25:53 PM: Compilation took 4.706e-02 seconds
(CVXPY) Oct 06 04:25:53 PM: Solver (including time spent in interface) took 1.409e-01 seconds
Iteration: 6, Objective: 0.4054
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:54 PM: Your problem has 2581 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:54 PM: Finished problem compilation (took 3.132e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2581
  constraints   = 5081
  nnz(P)        = 0
  nnz(A)        = 40753
  cones (total) = 1
    : Nonnegative = 1,  numel = 5081

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.7723e-01  +5.4995e+02  5.49e+02  4.42e-01  5.77e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2832e-01  +5.9495e+01  5.90e+01  1.71e-01  2.85e+01  1.81e-02  2.86e-01  9.68e-01  
  3  +5.0783e-01  +1.5306e+01  1.48e+01  1.04e-01  1.73e+01  5.11e-05  2.54e-01  3.98e-01  
  4  +5.0077e-01  +1.4909e+00  9.90e-01  9.79e-03  1.70e+00  7.18e-06  1.14e-01  8.30e-01  
  5  +5.0036e-01  +9.9685e-01  4.96e-01  4.75e-03  8.35e-01  1.35e-05  4.11e-02  7.55e-01  
  6  +4.9997e-01  +9.5374e-01  4.54e-01  1.13e-03  2.04e-01  1.21e-04  3.12e-03  9.50e-01  
  7  +4.9839e-01  +9.0524e-01  4.07e-01  3.66e-04  6.63e-02  2.97e-04  9.65e-04  7.79e-01  
  8  +4.9321e-01  +8.4733e-01  3.54e-01  1.76e-04  3.19e-02  4.30e-04  4.65e-04  6.14e-01  
  9  +4.8829e-01  +8.0731e-01  3.19e-01  1.60e-04  2.88e-02  2.79e-04  4.28e-04  2.84e-01  
 10  +4.7892e-01  +7.4239e-01  2.63e-01  1.32e-04  2.38e-02  1.08e-04  3.66e-04  5.00e-01  
 11  +4.5599e-01  +6.2619e-01  1.70e-01  7.51e-05  1.34e-02  1.15e-06  2.22e-04  9.76e-01  
 12  +4.3850e-01  +5.5102e-01  1.13e-01  4.61e-05  8.21e-03  1.44e-06  1.43e-04  3.90e-01  
 13  +4.2664e-01  +5.0326e-01  7.66e-02  2.98e-05  5.30e-03  3.94e-06  9.62e-05  5.60e-01  
 14  +4.2215e-01  +4.8448e-01  6.23e-02  2.36e-05  4.20e-03  6.09e-06  7.74e-05  6.78e-01  
 15  +4.0628e-01  +4.2343e-01  1.71e-02  6.31e-06  1.12e-03  1.63e-06  2.22e-05  7.62e-01  
 16  +4.0118e-01  +4.0454e-01  3.35e-03  1.22e-06  2.16e-04  3.34e-07  4.44e-06  8.38e-01  
 17  +4.0005e-01  +4.0039e-01  3.48e-04  1.26e-07  2.24e-05  4.19e-08  4.64e-07  9.90e-01  
 18  +3.9990e-01  +3.9991e-01  3.63e-06  1.32e-09  2.34e-07  4.36e-10  4.84e-09  9.90e-01  
 19  +3.9990e-01  +3.9990e-01  3.63e-08  1.32e-11  2.34e-09  4.36e-12  4.84e-11  9.90e-01  
 20  +3.9990e-01  +3.9990e-01  3.63e-10  1.32e-13  2.34e-11  4.37e-14  4.85e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 147.1498ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:54 PM: Optimal value: 3.999e-01
(CVXPY) Oct 06 04:25:54 PM: Compilation took 3.132e-02 seconds
(CVXPY) Oct 06 04:25:54 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 7, Objective: 0.3999
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:54 PM: Your problem has 2591 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:54 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:54 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:54 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:54 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:54 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:54 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:54 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:54 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:54 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:54 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:54 PM: Finished problem compilation (took 3.147e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:54 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2591
  constraints   = 5091
  nnz(P)        = 0
  nnz(A)        = 41333
  cones (total) = 1
    : Nonnegative = 1,  numel = 5091

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5013e+03  2.50e+03  9.80e-01  8.80e+01  1.00e+00  1.00e+00   ------   
  1  +5.7716e-01  +5.4982e+02  5.49e+02  4.42e-01  5.76e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2827e-01  +5.9448e+01  5.89e+01  1.70e-01  2.83e+01  1.81e-02  2.86e-01  9.69e-01  
  3  +5.0781e-01  +1.5276e+01  1.48e+01  1.04e-01  1.73e+01  5.12e-05  2.53e-01  4.02e-01  
  4  +5.0075e-01  +1.4637e+00  9.63e-01  9.53e-03  1.66e+00  7.17e-06  1.11e-01  8.43e-01  
  5  +5.0042e-01  +1.0645e+00  5.64e-01  5.38e-03  9.44e-01  1.47e-05  4.07e-02  7.56e-01  
  6  +5.0006e-01  +9.8837e-01  4.88e-01  1.10e-03  1.99e-01  1.26e-04  2.99e-03  9.56e-01  
  7  +4.9901e-01  +9.1458e-01  4.16e-01  4.57e-04  8.28e-02  1.91e-04  1.21e-03  7.92e-01  
  8  +4.9464e-01  +8.6704e-01  3.72e-01  1.81e-04  3.28e-02  3.80e-04  4.71e-04  6.76e-01  
  9  +4.8977e-01  +8.3422e-01  3.44e-01  1.60e-04  2.89e-02  3.08e-04  4.22e-04  2.15e-01  
 10  +4.7994e-01  +7.6711e-01  2.87e-01  1.41e-04  2.53e-02  1.44e-04  3.83e-04  3.57e-01  
 11  +4.7318e-01  +7.3209e-01  2.59e-01  1.21e-04  2.17e-02  1.18e-04  3.36e-04  2.00e-01  
 12  +4.4760e-01  +6.0037e-01  1.53e-01  6.67e-05  1.19e-02  1.17e-06  2.01e-04  8.94e-01  
 13  +4.2925e-01  +5.2218e-01  9.29e-02  3.74e-05  6.64e-03  5.94e-06  1.19e-04  7.04e-01  
 14  +4.1528e-01  +4.6424e-01  4.90e-02  1.86e-05  3.30e-03  5.96e-06  6.18e-05  9.90e-01  
 15  +4.0107e-01  +4.0875e-01  7.68e-03  2.87e-06  5.09e-04  8.42e-07  1.02e-05  8.62e-01  
 16  +3.9901e-01  +4.0101e-01  2.01e-03  7.48e-07  1.33e-04  2.28e-07  2.70e-06  8.36e-01  
 17  +3.9832e-01  +3.9849e-01  1.78e-04  6.64e-08  1.18e-05  2.01e-08  2.41e-07  9.14e-01  
 18  +3.9825e-01  +3.9825e-01  1.85e-06  6.90e-10  1.22e-07  2.09e-10  2.51e-09  9.90e-01  
 19  +3.9825e-01  +3.9825e-01  1.85e-08  6.91e-12  1.22e-09  2.09e-12  2.51e-11  9.90e-01  
 20  +3.9825e-01  +3.9825e-01  1.85e-10  6.90e-14  1.22e-11  2.09e-14  2.51e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 155.5844ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:54 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:54 PM: Optimal value: 3.983e-01
(CVXPY) Oct 06 04:25:54 PM: Compilation took 3.147e-02 seconds
(CVXPY) Oct 06 04:25:54 PM: Solver (including time spent in interface) took 1.563e-01 seconds
Iteration: 8, Objective: 0.3983
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:55 PM: Your problem has 2601 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:55 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2601
  constraints   = 5101
  nnz(P)        = 0
  nnz(A)        = 41613
  cones (total) = 1
    : Nonnegative = 1,  numel = 5101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.79e+01  1.00e+00  1.00e+00   ------   
  1  +5.7693e-01  +5.5001e+02  5.49e+02  4.42e-01  5.76e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2813e-01  +5.9354e+01  5.88e+01  1.70e-01  2.82e+01  1.81e-02  2.85e-01  9.71e-01  
  3  +5.0779e-01  +1.5254e+01  1.47e+01  1.04e-01  1.72e+01  5.15e-05  2.52e-01  4.07e-01  
  4  +5.0076e-01  +1.4859e+00  9.85e-01  9.76e-03  1.70e+00  7.29e-06  1.11e-01  8.36e-01  
  5  +5.0039e-01  +1.0601e+00  5.60e-01  5.30e-03  9.31e-01  1.54e-05  3.75e-02  7.78e-01  
  6  +4.9992e-01  +1.0373e+00  5.37e-01  1.17e-03  2.11e-01  1.34e-04  3.17e-03  9.34e-01  
  7  +4.9783e-01  +9.5099e-01  4.53e-01  3.62e-04  6.56e-02  3.02e-04  9.46e-04  8.21e-01  
  8  +4.9227e-01  +8.8105e-01  3.89e-01  2.18e-04  3.94e-02  3.17e-04  5.72e-04  5.23e-01  
  9  +4.8542e-01  +8.2940e-01  3.44e-01  1.71e-04  3.09e-02  2.47e-04  4.58e-04  3.43e-01  
 10  +4.7841e-01  +7.8016e-01  3.02e-01  1.53e-04  2.74e-02  1.52e-04  4.17e-04  2.90e-01  
 11  +4.7026e-01  +7.3748e-01  2.67e-01  1.25e-04  2.23e-02  1.29e-04  3.48e-04  2.14e-01  
 12  +4.5050e-01  +6.2927e-01  1.79e-01  8.28e-05  1.48e-02  1.21e-06  2.48e-04  8.66e-01  
 13  +4.2869e-01  +5.3229e-01  1.04e-01  4.30e-05  7.64e-03  1.80e-06  1.37e-04  5.05e-01  
 14  +4.1635e-01  +4.8027e-01  6.39e-02  2.55e-05  4.51e-03  1.68e-06  8.42e-05  4.40e-01  
 15  +4.1053e-01  +4.5371e-01  4.32e-02  1.64e-05  2.91e-03  5.26e-06  5.50e-05  9.90e-01  
 16  +4.0117e-01  +4.1741e-01  1.62e-02  6.14e-06  1.09e-03  1.97e-06  2.15e-05  6.56e-01  
 17  +3.9722e-01  +4.0223e-01  5.01e-03  1.89e-06  3.34e-04  6.10e-07  6.74e-06  7.37e-01  
 18  +3.9549e-01  +3.9574e-01  2.43e-04  9.12e-08  1.61e-05  2.91e-08  3.30e-07  9.90e-01  
 19  +3.9540e-01  +3.9540e-01  2.47e-06  9.27e-10  1.64e-07  2.95e-10  3.35e-09  9.90e-01  
 20  +3.9540e-01  +3.9540e-01  2.47e-08  9.28e-12  1.64e-09  2.96e-12  3.36e-11  9.90e-01  
 21  +3.9540e-01  +3.9540e-01  2.47e-10  9.30e-14  1.64e-11  2.96e-14  3.37e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.6762ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:55 PM: Optimal value: 3.954e-01
(CVXPY) Oct 06 04:25:55 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:25:55 PM: Solver (including time spent in interface) took 1.728e-01 seconds
Iteration: 9, Objective: 0.3954
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:55 PM: Your problem has 2611 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:55 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2611
  constraints   = 5111
  nnz(P)        = 0
  nnz(A)        = 41865
  cones (total) = 1
    : Nonnegative = 1,  numel = 5111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0010e-01  +2.5013e+03  2.50e+03  9.80e-01  8.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.7666e-01  +5.5007e+02  5.49e+02  4.43e-01  5.75e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2798e-01  +5.9225e+01  5.87e+01  1.70e-01  2.81e+01  1.82e-02  2.85e-01  9.74e-01  
  3  +5.0777e-01  +1.5225e+01  1.47e+01  1.03e-01  1.71e+01  5.18e-05  2.51e-01  4.12e-01  
  4  +5.0076e-01  +1.4867e+00  9.86e-01  9.78e-03  1.70e+00  7.36e-06  1.09e-01  8.39e-01  
  5  +5.0040e-01  +1.0843e+00  5.84e-01  5.45e-03  9.58e-01  1.70e-05  3.42e-02  8.12e-01  
  6  +4.9986e-01  +1.0573e+00  5.57e-01  1.19e-03  2.15e-01  1.36e-04  3.19e-03  9.19e-01  
  7  +4.9729e-01  +9.7059e-01  4.73e-01  3.42e-04  6.20e-02  3.41e-04  8.84e-04  8.28e-01  
  8  +4.8957e-01  +8.7698e-01  3.87e-01  2.06e-04  3.73e-02  3.04e-04  5.42e-04  5.47e-01  
  9  +4.8212e-01  +8.2438e-01  3.42e-01  1.70e-04  3.06e-02  2.19e-04  4.55e-04  3.18e-01  
 10  +4.7557e-01  +7.8468e-01  3.09e-01  1.49e-04  2.68e-02  1.65e-04  4.07e-04  2.30e-01  
 11  +4.6716e-01  +7.3973e-01  2.73e-01  1.25e-04  2.25e-02  1.29e-04  3.50e-04  2.29e-01  
 12  +4.4564e-01  +6.2266e-01  1.77e-01  8.06e-05  1.43e-02  1.21e-06  2.43e-04  8.76e-01  
 13  +4.1192e-01  +4.7247e-01  6.06e-02  2.41e-05  4.26e-03  1.65e-06  7.94e-05  7.38e-01  
 14  +4.1036e-01  +4.6670e-01  5.63e-02  2.21e-05  3.91e-03  2.00e-06  7.31e-05  1.57e-01  
 15  +4.0220e-01  +4.3507e-01  3.29e-02  1.25e-05  2.20e-03  2.19e-06  4.26e-05  6.19e-01  
 16  +3.9429e-01  +4.0501e-01  1.07e-02  3.97e-06  7.02e-04  8.64e-07  1.42e-05  7.49e-01  
 17  +3.9102e-01  +3.9278e-01  1.76e-03  6.46e-07  1.14e-04  2.13e-07  2.36e-06  9.90e-01  
 18  +3.9031e-01  +3.9034e-01  2.49e-05  9.11e-09  1.61e-06  2.98e-09  3.35e-08  9.87e-01  
 19  +3.9030e-01  +3.9030e-01  2.49e-07  9.11e-11  1.61e-08  2.98e-11  3.35e-10  9.90e-01  
 20  +3.9030e-01  +3.9030e-01  2.49e-09  9.12e-13  1.61e-10  2.99e-13  3.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.7313ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:55 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:55 PM: Optimal value: 3.903e-01
(CVXPY) Oct 06 04:25:55 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:25:55 PM: Solver (including time spent in interface) took 1.576e-01 seconds
Iteration: 10, Objective: 0.3903
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:55 PM: Your problem has 2621 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:55 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:55 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:55 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:55 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:55 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:55 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:55 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:55 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:55 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:55 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:55 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:55 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2621
  constraints   = 5121
  nnz(P)        = 0
  nnz(A)        = 42192
  cones (total) = 1
    : Nonnegative = 1,  numel = 5121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.78e+01  1.00e+00  1.00e+00   ------   
  1  +5.7639e-01  +5.5012e+02  5.50e+02  4.43e-01  5.74e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2780e-01  +5.9064e+01  5.85e+01  1.69e-01  2.79e+01  1.82e-02  2.84e-01  9.76e-01  
  3  +5.0774e-01  +1.5183e+01  1.47e+01  1.03e-01  1.71e+01  5.21e-05  2.49e-01  4.19e-01  
  4  +5.0077e-01  +1.5027e+00  1.00e+00  9.95e-03  1.72e+00  7.50e-06  1.09e-01  8.35e-01  
  5  +5.0042e-01  +1.1419e+00  6.41e-01  5.91e-03  1.04e+00  1.80e-05  3.37e-02  8.02e-01  
  6  +4.9974e-01  +1.1252e+00  6.25e-01  1.30e-03  2.36e-01  1.34e-04  3.47e-03  9.11e-01  
  7  +4.9606e-01  +1.0264e+00  5.30e-01  3.32e-04  6.04e-02  3.91e-04  8.54e-04  8.29e-01  
  8  +4.8609e-01  +9.0736e-01  4.21e-01  2.14e-04  3.87e-02  2.93e-04  5.63e-04  5.04e-01  
  9  +4.7561e-01  +8.2696e-01  3.51e-01  1.74e-04  3.13e-02  1.74e-04  4.72e-04  3.46e-01  
 10  +4.6132e-01  +7.3727e-01  2.76e-01  1.31e-04  2.34e-02  8.21e-05  3.71e-04  4.72e-01  
 11  +4.5140e-01  +6.7730e-01  2.26e-01  1.12e-04  1.99e-02  2.34e-05  3.34e-04  6.70e-01  
 12  +4.2695e-01  +5.5902e-01  1.32e-01  5.76e-05  1.02e-02  1.23e-05  1.82e-04  7.64e-01  
 13  +4.0432e-01  +4.6106e-01  5.67e-02  2.30e-05  4.07e-03  4.90e-06  7.84e-05  6.35e-01  
 14  +4.0304e-01  +4.5601e-01  5.30e-02  2.13e-05  3.76e-03  4.78e-06  7.26e-05  1.84e-01  
 15  +4.0060e-01  +4.4592e-01  4.53e-02  1.76e-05  3.12e-03  4.75e-06  6.06e-05  5.26e-01  
 16  +3.9238e-01  +4.1378e-01  2.14e-02  8.15e-06  1.44e-03  2.26e-06  2.92e-05  5.66e-01  
 17  +3.8620e-01  +3.9000e-01  3.80e-03  1.42e-06  2.51e-04  4.10e-07  5.29e-06  8.68e-01  
 18  +3.8484e-01  +3.8493e-01  9.07e-05  3.38e-08  5.97e-06  1.01e-08  1.27e-07  9.90e-01  
 19  +3.8480e-01  +3.8480e-01  9.08e-07  3.38e-10  5.97e-08  1.01e-10  1.28e-09  9.90e-01  
 20  +3.8480e-01  +3.8480e-01  9.08e-09  3.38e-12  5.97e-10  1.01e-12  1.28e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 148.4678ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:56 PM: Optimal value: 3.848e-01
(CVXPY) Oct 06 04:25:56 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:25:56 PM: Solver (including time spent in interface) took 1.564e-01 seconds
Iteration: 11, Objective: 0.3848
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:56 PM: Your problem has 2631 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:56 PM: Finished problem compilation (took 3.294e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2631
  constraints   = 5131
  nnz(P)        = 0
  nnz(A)        = 42499
  cones (total) = 1
    : Nonnegative = 1,  numel = 5131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.80e-01  8.77e+01  1.00e+00  1.00e+00   ------   
  1  +5.7625e-01  +5.5013e+02  5.50e+02  4.43e-01  5.73e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2769e-01  +5.8959e+01  5.84e+01  1.69e-01  2.78e+01  1.83e-02  2.83e-01  9.78e-01  
  3  +5.0772e-01  +1.5155e+01  1.46e+01  1.03e-01  1.70e+01  5.23e-05  2.48e-01  4.23e-01  
  4  +5.0079e-01  +1.5546e+00  1.05e+00  1.05e-02  1.81e+00  7.73e-06  1.11e-01  8.17e-01  
  5  +5.0044e-01  +1.2315e+00  7.31e-01  6.62e-03  1.16e+00  2.03e-05  3.53e-02  8.48e-01  
  6  +4.9924e-01  +1.1369e+00  6.38e-01  1.17e-03  2.11e-01  1.56e-04  3.08e-03  9.22e-01  
  7  +4.9350e-01  +1.0489e+00  5.55e-01  3.00e-04  5.45e-02  4.81e-04  7.68e-04  7.89e-01  
  8  +4.8395e-01  +9.3867e-01  4.55e-01  2.35e-04  4.24e-02  3.10e-04  6.18e-04  3.35e-01  
  9  +4.7551e-01  +8.7500e-01  3.99e-01  1.92e-04  3.46e-02  2.53e-04  5.17e-04  2.26e-01  
 10  +4.5055e-01  +6.9184e-01  2.41e-01  1.13e-04  2.02e-02  2.54e-05  3.29e-04  7.32e-01  
 11  +4.2593e-01  +5.7036e-01  1.44e-01  6.24e-05  1.11e-02  1.35e-05  1.95e-04  4.81e-01  
 12  +4.0338e-01  +4.6742e-01  6.40e-02  2.62e-05  4.64e-03  5.73e-06  8.84e-05  6.58e-01  
 13  +4.0133e-01  +4.5899e-01  5.77e-02  2.33e-05  4.11e-03  5.31e-06  7.88e-05  1.67e-01  
 14  +3.9645e-01  +4.3840e-01  4.20e-02  1.66e-05  2.93e-03  4.14e-06  5.72e-05  4.39e-01  
 15  +3.8708e-01  +4.0020e-01  1.31e-02  5.03e-06  8.90e-04  1.39e-06  1.82e-05  7.98e-01  
 16  +3.8346e-01  +3.8623e-01  2.77e-03  1.05e-06  1.85e-04  3.15e-07  3.90e-06  9.33e-01  
 17  +3.8247e-01  +3.8263e-01  1.67e-04  6.29e-08  1.11e-05  1.88e-08  2.38e-07  9.51e-01  
 18  +3.8240e-01  +3.8240e-01  1.71e-06  6.42e-10  1.14e-07  1.91e-10  2.43e-09  9.90e-01  
 19  +3.8240e-01  +3.8240e-01  1.71e-08  6.43e-12  1.14e-09  1.92e-12  2.43e-11  9.90e-01  
 20  +3.8240e-01  +3.8240e-01  1.91e-10  7.19e-14  1.27e-11  2.16e-14  2.74e-13  9.89e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 144.847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:56 PM: Optimal value: 3.824e-01
(CVXPY) Oct 06 04:25:56 PM: Compilation took 3.294e-02 seconds
(CVXPY) Oct 06 04:25:56 PM: Solver (including time spent in interface) took 1.555e-01 seconds
Iteration: 12, Objective: 0.3824
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:56 PM: Your problem has 2641 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:56 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:56 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:56 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:56 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:56 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:56 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:56 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:56 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:56 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:56 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:56 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:56 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2641
  constraints   = 5141
  nnz(P)        = 0
  nnz(A)        = 42756
  cones (total) = 1
    : Nonnegative = 1,  numel = 5141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.76e+01  1.00e+00  1.00e+00   ------   
  1  +5.7607e-01  +5.5019e+02  5.50e+02  4.44e-01  5.72e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2756e-01  +5.8846e+01  5.83e+01  1.69e-01  2.77e+01  1.83e-02  2.83e-01  9.80e-01  
  3  +5.0770e-01  +1.5125e+01  1.46e+01  1.02e-01  1.69e+01  5.25e-05  2.47e-01  4.28e-01  
  4  +5.0081e-01  +1.5922e+00  1.09e+00  1.09e-02  1.88e+00  7.91e-06  1.12e-01  8.05e-01  
  5  +5.0044e-01  +1.2547e+00  7.54e-01  6.93e-03  1.21e+00  1.85e-05  3.86e-02  7.97e-01  
  6  +4.9905e-01  +1.1475e+00  6.48e-01  1.19e-03  2.16e-01  1.48e-04  3.14e-03  9.32e-01  
  7  +4.9266e-01  +1.0618e+00  5.69e-01  3.10e-04  5.64e-02  4.59e-04  7.94e-04  7.78e-01  
  8  +4.7978e-01  +9.1087e-01  4.31e-01  2.21e-04  3.98e-02  2.45e-04  5.86e-04  4.43e-01  
  9  +4.6482e-01  +7.9460e-01  3.30e-01  1.61e-04  2.89e-02  1.12e-04  4.47e-04  4.79e-01  
 10  +4.5606e-01  +7.3432e-01  2.78e-01  1.41e-04  2.51e-02  4.22e-05  4.06e-04  5.53e-01  
 11  +4.2874e-01  +5.9253e-01  1.64e-01  7.23e-05  1.28e-02  2.19e-05  2.23e-04  5.22e-01  
 12  +4.0762e-01  +4.9586e-01  8.82e-02  3.69e-05  6.52e-03  1.03e-05  1.22e-04  5.59e-01  
 13  +4.0204e-01  +4.7179e-01  6.97e-02  2.86e-05  5.06e-03  8.15e-06  9.64e-05  2.53e-01  
 14  +3.9636e-01  +4.4707e-01  5.07e-02  2.03e-05  3.59e-03  5.97e-06  7.00e-05  4.30e-01  
 15  +3.8654e-01  +4.0595e-01  1.94e-02  7.59e-06  1.34e-03  2.28e-06  2.73e-05  7.49e-01  
 16  +3.8126e-01  +3.8505e-01  3.79e-03  1.46e-06  2.58e-04  4.40e-07  5.44e-06  8.85e-01  
 17  +3.7989e-01  +3.8001e-01  1.16e-04  4.40e-08  7.78e-06  1.30e-08  1.67e-07  9.90e-01  
 18  +3.7985e-01  +3.7985e-01  1.16e-06  4.41e-10  7.81e-08  1.30e-10  1.68e-09  9.90e-01  
 19  +3.7985e-01  +3.7985e-01  1.16e-08  4.41e-12  7.81e-10  1.30e-12  1.68e-11  9.90e-01  
 20  +3.7985e-01  +3.7985e-01  1.20e-10  4.58e-14  8.10e-12  1.36e-14  1.75e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.017ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:56 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:56 PM: Optimal value: 3.799e-01
(CVXPY) Oct 06 04:25:56 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:25:56 PM: Solver (including time spent in interface) took 1.567e-01 seconds
Iteration: 13, Objective: 0.3799
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:57 PM: Your problem has 2651 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:57 PM: Finished problem compilation (took 2.164e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2651
  constraints   = 5151
  nnz(P)        = 0
  nnz(A)        = 42971
  cones (total) = 1
    : Nonnegative = 1,  numel = 5151

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7592e-01  +5.5021e+02  5.50e+02  4.44e-01  5.71e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2746e-01  +5.8746e+01  5.82e+01  1.68e-01  2.76e+01  1.83e-02  2.82e-01  9.81e-01  
  3  +5.0769e-01  +1.5104e+01  1.46e+01  1.02e-01  1.69e+01  5.27e-05  2.46e-01  4.31e-01  
  4  +5.0082e-01  +1.6106e+00  1.11e+00  1.10e-02  1.91e+00  8.01e-06  1.12e-01  8.00e-01  
  5  +5.0042e-01  +1.2573e+00  7.57e-01  6.91e-03  1.21e+00  1.90e-05  3.74e-02  8.11e-01  
  6  +4.9886e-01  +1.1622e+00  6.63e-01  1.18e-03  2.13e-01  1.54e-04  3.09e-03  9.30e-01  
  7  +4.9174e-01  +1.0695e+00  5.78e-01  3.06e-04  5.56e-02  4.71e-04  7.83e-04  7.74e-01  
  8  +4.8005e-01  +9.3568e-01  4.56e-01  2.32e-04  4.19e-02  2.65e-04  6.13e-04  3.89e-01  
  9  +4.6658e-01  +8.2777e-01  3.61e-01  1.75e-04  3.15e-02  1.50e-04  4.81e-04  3.89e-01  
 10  +4.5208e-01  +7.1705e-01  2.65e-01  1.35e-04  2.41e-02  1.34e-06  3.95e-04  8.71e-01  
 11  +4.2422e-01  +5.7730e-01  1.53e-01  6.76e-05  1.20e-02  2.40e-06  2.11e-04  5.21e-01  
 12  +4.0069e-01  +4.7111e-01  7.04e-02  2.91e-05  5.14e-03  2.43e-06  9.83e-05  6.30e-01  
 13  +3.9360e-01  +4.4185e-01  4.82e-02  1.93e-05  3.40e-03  3.01e-06  6.66e-05  5.51e-01  
 14  +3.8410e-01  +4.0313e-01  1.90e-02  7.37e-06  1.30e-03  1.78e-06  2.67e-05  8.21e-01  
 15  +3.7830e-01  +3.8080e-01  2.50e-03  9.54e-07  1.69e-04  2.61e-07  3.61e-06  9.37e-01  
 16  +3.7736e-01  +3.7740e-01  3.45e-05  1.31e-08  2.32e-06  3.60e-09  5.00e-08  9.87e-01  
 17  +3.7735e-01  +3.7735e-01  3.45e-07  1.31e-10  2.32e-08  3.60e-11  5.00e-10  9.90e-01  
 18  +3.7735e-01  +3.7735e-01  3.45e-09  1.31e-12  2.32e-10  3.61e-13  5.02e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 141.7024ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:57 PM: Optimal value: 3.774e-01
(CVXPY) Oct 06 04:25:57 PM: Compilation took 2.164e-02 seconds
(CVXPY) Oct 06 04:25:57 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 14, Objective: 0.3774
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:57 PM: Your problem has 2661 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:57 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:57 PM: Finished problem compilation (took 3.124e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:57 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2661
  constraints   = 5161
  nnz(P)        = 0
  nnz(A)        = 43116
  cones (total) = 1
    : Nonnegative = 1,  numel = 5161

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5014e+03  2.50e+03  9.80e-01  8.75e+01  1.00e+00  1.00e+00   ------   
  1  +5.7579e-01  +5.5024e+02  5.50e+02  4.44e-01  5.70e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2738e-01  +5.8676e+01  5.81e+01  1.68e-01  2.74e+01  1.83e-02  2.82e-01  9.82e-01  
  3  +5.0768e-01  +1.5088e+01  1.46e+01  1.02e-01  1.68e+01  5.28e-05  2.45e-01  4.34e-01  
  4  +5.0078e-01  +1.5518e+00  1.05e+00  1.05e-02  1.81e+00  7.84e-06  1.08e-01  8.23e-01  
  5  +5.0048e-01  +1.2884e+00  7.88e-01  7.06e-03  1.24e+00  2.01e-05  3.47e-02  8.04e-01  
  6  +4.9939e-01  +1.2202e+00  7.21e-01  1.40e-03  2.54e-01  1.35e-04  3.67e-03  9.05e-01  
  7  +4.9357e-01  +1.1049e+00  6.11e-01  3.34e-04  6.07e-02  4.32e-04  8.48e-04  8.14e-01  
  8  +4.8370e-01  +9.7488e-01  4.91e-01  2.58e-04  4.66e-02  2.62e-04  6.73e-04  3.69e-01  
  9  +4.6370e-01  +8.0894e-01  3.45e-01  1.61e-04  2.88e-02  1.23e-04  4.42e-04  5.41e-01  
 10  +4.5619e-01  +7.5662e-01  3.00e-01  1.47e-04  2.63e-02  6.80e-05  4.20e-04  3.37e-01  
 11  +4.2957e-01  +6.1282e-01  1.83e-01  8.13e-05  1.44e-02  3.39e-05  2.49e-04  4.90e-01  
 12  +4.1305e-01  +5.3559e-01  1.23e-01  5.21e-05  9.22e-03  1.99e-05  1.68e-04  4.30e-01  
 13  +3.9365e-01  +4.4808e-01  5.44e-02  2.22e-05  3.91e-03  7.90e-06  7.66e-05  5.99e-01  
 14  +3.9014e-01  +4.3317e-01  4.30e-02  1.73e-05  3.04e-03  6.14e-06  6.05e-05  2.97e-01  
 15  +3.8358e-01  +4.0568e-01  2.21e-02  8.71e-06  1.53e-03  3.03e-06  3.15e-05  5.87e-01  
 16  +3.7799e-01  +3.8273e-01  4.75e-03  1.84e-06  3.24e-04  5.61e-07  6.88e-06  9.90e-01  
 17  +3.7644e-01  +3.7720e-01  7.57e-04  2.90e-07  5.11e-05  8.85e-08  1.11e-06  8.77e-01  
 18  +3.7615e-01  +3.7616e-01  9.32e-06  3.56e-09  6.29e-07  1.09e-09  1.37e-08  9.88e-01  
 19  +3.7615e-01  +3.7615e-01  9.33e-08  3.57e-11  6.29e-09  1.09e-11  1.37e-10  9.90e-01  
 20  +3.7615e-01  +3.7615e-01  9.33e-10  3.57e-13  6.30e-11  1.09e-13  1.37e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 160.1956ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:57 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:57 PM: Optimal value: 3.762e-01
(CVXPY) Oct 06 04:25:57 PM: Compilation took 3.124e-02 seconds
(CVXPY) Oct 06 04:25:57 PM: Solver (including time spent in interface) took 1.719e-01 seconds
Iteration: 15, Objective: 0.3762
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:57 PM: Your problem has 2671 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:57 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:57 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:57 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:57 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:57 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:57 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:57 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:57 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:57 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:58 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2671
  constraints   = 5171
  nnz(P)        = 0
  nnz(A)        = 43360
  cones (total) = 1
    : Nonnegative = 1,  numel = 5171

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.81e-01  8.74e+01  1.00e+00  1.00e+00   ------   
  1  +5.7566e-01  +5.5031e+02  5.50e+02  4.45e-01  5.69e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2732e-01  +5.8637e+01  5.81e+01  1.68e-01  2.74e+01  1.84e-02  2.82e-01  9.83e-01  
  3  +5.0767e-01  +1.5079e+01  1.46e+01  1.02e-01  1.68e+01  5.30e-05  2.45e-01  4.36e-01  
  4  +5.0076e-01  +1.5069e+00  1.01e+00  1.00e-02  1.73e+00  7.71e-06  1.05e-01  8.41e-01  
  5  +5.0053e-01  +1.3108e+00  8.10e-01  7.22e-03  1.27e+00  2.02e-05  3.40e-02  7.80e-01  
  6  +4.9979e-01  +1.2581e+00  7.58e-01  1.63e-03  2.95e-01  1.18e-04  4.27e-03  8.83e-01  
  7  +4.9545e-01  +1.1017e+00  6.06e-01  3.72e-04  6.75e-02  3.52e-04  9.40e-04  8.59e-01  
  8  +4.8486e-01  +9.6545e-01  4.81e-01  2.41e-04  4.36e-02  2.60e-04  6.24e-04  5.06e-01  
  9  +4.6711e-01  +8.2127e-01  3.54e-01  1.72e-04  3.09e-02  9.87e-05  4.70e-04  5.28e-01  
 10  +4.5704e-01  +7.5979e-01  3.03e-01  1.50e-04  2.67e-02  5.69e-05  4.25e-04  3.60e-01  
 11  +4.3629e-01  +6.4881e-01  2.13e-01  9.70e-05  1.72e-02  3.55e-05  2.91e-04  3.78e-01  
 12  +4.0994e-01  +5.2445e-01  1.15e-01  4.82e-05  8.51e-03  1.51e-05  1.56e-04  6.10e-01  
 13  +3.9436e-01  +4.5555e-01  6.12e-02  2.49e-05  4.39e-03  7.60e-06  8.58e-05  5.20e-01  
 14  +3.8899e-01  +4.3285e-01  4.39e-02  1.76e-05  3.10e-03  5.43e-06  6.19e-05  3.19e-01  
 15  +3.8222e-01  +4.0427e-01  2.20e-02  8.66e-06  1.52e-03  2.70e-06  3.14e-05  6.26e-01  
 16  +3.7813e-01  +3.8756e-01  9.43e-03  3.62e-06  6.39e-04  1.14e-06  1.35e-05  8.30e-01  
 17  +3.7536e-01  +3.7729e-01  1.93e-03  7.33e-07  1.29e-04  2.31e-07  2.79e-06  8.04e-01  
 18  +3.7466e-01  +3.7469e-01  2.79e-05  1.06e-08  1.87e-06  3.33e-09  4.06e-08  9.86e-01  
 19  +3.7465e-01  +3.7465e-01  2.79e-07  1.06e-10  1.87e-08  3.33e-11  4.06e-10  9.90e-01  
 20  +3.7465e-01  +3.7465e-01  2.79e-09  1.06e-12  1.87e-10  3.34e-13  4.07e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.3432ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:58 PM: Optimal value: 3.747e-01
(CVXPY) Oct 06 04:25:58 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:25:58 PM: Solver (including time spent in interface) took 1.721e-01 seconds
Iteration: 16, Objective: 0.3747
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:58 PM: Your problem has 2681 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:58 PM: Finished problem compilation (took 3.183e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2681
  constraints   = 5181
  nnz(P)        = 0
  nnz(A)        = 43622
  cones (total) = 1
    : Nonnegative = 1,  numel = 5181

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.81e-01  8.73e+01  1.00e+00  1.00e+00   ------   
  1  +5.7548e-01  +5.5041e+02  5.50e+02  4.45e-01  5.68e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2721e-01  +5.8552e+01  5.80e+01  1.68e-01  2.73e+01  1.84e-02  2.81e-01  9.85e-01  
  3  +5.0765e-01  +1.5057e+01  1.45e+01  1.02e-01  1.67e+01  5.33e-05  2.44e-01  4.41e-01  
  4  +5.0078e-01  +1.5389e+00  1.04e+00  1.04e-02  1.79e+00  7.87e-06  1.06e-01  8.30e-01  
  5  +5.0050e-01  +1.3258e+00  8.25e-01  7.15e-03  1.26e+00  2.22e-05  3.16e-02  8.14e-01  
  6  +4.9948e-01  +1.2748e+00  7.75e-01  1.53e-03  2.77e-01  1.31e-04  3.99e-03  8.82e-01  
  7  +4.9429e-01  +1.1432e+00  6.49e-01  3.93e-04  7.13e-02  3.74e-04  9.96e-04  8.04e-01  
  8  +4.8334e-01  +9.8157e-01  4.98e-01  2.72e-04  4.90e-02  2.17e-04  7.10e-04  4.81e-01  
  9  +4.7263e-01  +8.8136e-01  4.09e-01  2.11e-04  3.79e-02  1.20e-04  5.70e-04  4.39e-01  
 10  +4.6366e-01  +8.2432e-01  3.61e-01  1.77e-04  3.16e-02  9.87e-05  4.88e-04  2.05e-01  
 11  +4.4006e-01  +6.7008e-01  2.30e-01  1.10e-04  1.94e-02  9.45e-06  3.27e-04  8.90e-01  
 12  +4.1443e-01  +5.4607e-01  1.32e-01  5.70e-05  1.00e-02  1.05e-05  1.83e-04  8.00e-01  
 13  +3.9566e-01  +4.6279e-01  6.71e-02  2.77e-05  4.87e-03  5.38e-06  9.51e-05  5.61e-01  
 14  +3.9046e-01  +4.4071e-01  5.03e-02  2.02e-05  3.54e-03  4.56e-06  7.05e-05  4.60e-01  
 15  +3.8276e-01  +4.0936e-01  2.66e-02  1.04e-05  1.83e-03  2.64e-06  3.77e-05  6.24e-01  
 16  +3.7630e-01  +3.8355e-01  7.25e-03  2.78e-06  4.89e-04  8.46e-07  1.05e-05  9.90e-01  
 17  +3.7363e-01  +3.7385e-01  2.16e-04  8.22e-08  1.45e-05  2.47e-08  3.17e-07  9.73e-01  
 18  +3.7355e-01  +3.7355e-01  2.16e-06  8.23e-10  1.45e-07  2.47e-10  3.17e-09  9.90e-01  
 19  +3.7355e-01  +3.7355e-01  2.16e-08  8.23e-12  1.45e-09  2.47e-12  3.18e-11  9.90e-01  
 20  +3.7355e-01  +3.7355e-01  2.16e-10  8.23e-14  1.45e-11  2.48e-14  3.18e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 157.9816ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:58 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:58 PM: Optimal value: 3.736e-01
(CVXPY) Oct 06 04:25:58 PM: Compilation took 3.183e-02 seconds
(CVXPY) Oct 06 04:25:58 PM: Solver (including time spent in interface) took 1.723e-01 seconds
Iteration: 17, Objective: 0.3736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:58 PM: Your problem has 2684 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:58 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:58 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:58 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:58 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:58 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:58 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:58 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:58 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:58 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:58 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:58 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:58 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2684
  constraints   = 5184
  nnz(P)        = 0
  nnz(A)        = 43690
  cones (total) = 1
    : Nonnegative = 1,  numel = 5184

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.81e-01  8.73e+01  1.00e+00  1.00e+00   ------   
  1  +5.7546e-01  +5.5039e+02  5.50e+02  4.45e-01  5.68e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2719e-01  +5.8532e+01  5.80e+01  1.68e-01  2.72e+01  1.84e-02  2.81e-01  9.85e-01  
  3  +5.0765e-01  +1.5051e+01  1.45e+01  1.02e-01  1.67e+01  5.33e-05  2.44e-01  4.42e-01  
  4  +5.0078e-01  +1.5411e+00  1.04e+00  1.04e-02  1.79e+00  7.88e-06  1.06e-01  8.30e-01  
  5  +5.0051e-01  +1.3350e+00  8.34e-01  7.31e-03  1.28e+00  2.14e-05  3.30e-02  7.96e-01  
  6  +4.9951e-01  +1.2792e+00  7.80e-01  1.56e-03  2.82e-01  1.27e-04  4.07e-03  8.87e-01  
  7  +4.9442e-01  +1.1479e+00  6.53e-01  4.00e-04  7.26e-02  3.65e-04  1.01e-03  8.05e-01  
  8  +4.8502e-01  +1.0088e+00  5.24e-01  2.94e-04  5.30e-02  2.37e-04  7.65e-04  4.03e-01  
  9  +4.7499e-01  +9.1405e-01  4.39e-01  2.26e-04  4.05e-02  1.62e-04  6.03e-04  3.69e-01  
 10  +4.6571e-01  +8.4444e-01  3.79e-01  1.88e-04  3.36e-02  1.13e-04  5.16e-04  2.94e-01  
 11  +4.4689e-01  +7.0441e-01  2.58e-01  1.30e-04  2.30e-02  1.04e-06  3.81e-04  9.54e-01  
 12  +4.1817e-01  +5.6444e-01  1.46e-01  6.37e-05  1.12e-02  7.47e-06  2.02e-04  7.11e-01  
 13  +3.9677e-01  +4.6785e-01  7.11e-02  2.94e-05  5.17e-03  4.11e-06  1.01e-04  5.88e-01  
 14  +3.8932e-01  +4.3626e-01  4.69e-02  1.89e-05  3.31e-03  3.48e-06  6.62e-05  5.23e-01  
 15  +3.8389e-01  +4.1400e-01  3.01e-02  1.18e-05  2.08e-03  2.57e-06  4.26e-05  5.19e-01  
 16  +3.7616e-01  +3.8331e-01  7.14e-03  2.75e-06  4.84e-04  7.26e-07  1.04e-05  8.91e-01  
 17  +3.7362e-01  +3.7380e-01  1.79e-04  6.81e-08  1.20e-05  1.90e-08  2.62e-07  9.90e-01  
 18  +3.7355e-01  +3.7355e-01  1.79e-06  6.81e-10  1.20e-07  1.90e-10  2.63e-09  9.90e-01  
 19  +3.7355e-01  +3.7355e-01  1.79e-08  6.81e-12  1.20e-09  1.91e-12  2.63e-11  9.90e-01  
 20  +3.7355e-01  +3.7355e-01  1.79e-10  6.81e-14  1.20e-11  1.91e-14  2.64e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 153.2682ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:59 PM: Optimal value: 3.736e-01
(CVXPY) Oct 06 04:25:59 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:25:59 PM: Solver (including time spent in interface) took 1.562e-01 seconds
Iteration: 18, Objective: 0.3736
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:59 PM: Your problem has 2694 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:59 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2694
  constraints   = 5194
  nnz(P)        = 0
  nnz(A)        = 43836
  cones (total) = 1
    : Nonnegative = 1,  numel = 5194

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.81e-01  8.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.7531e-01  +5.5029e+02  5.50e+02  4.45e-01  5.67e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2709e-01  +5.8432e+01  5.79e+01  1.67e-01  2.71e+01  1.84e-02  2.80e-01  9.87e-01  
  3  +5.0764e-01  +1.5026e+01  1.45e+01  1.01e-01  1.66e+01  5.34e-05  2.42e-01  4.45e-01  
  4  +5.0078e-01  +1.5602e+00  1.06e+00  1.06e-02  1.82e+00  8.01e-06  1.06e-01  8.24e-01  
  5  +5.0053e-01  +1.3763e+00  8.76e-01  7.75e-03  1.36e+00  2.06e-05  3.54e-02  7.67e-01  
  6  +4.9943e-01  +1.3065e+00  8.07e-01  1.60e-03  2.90e-01  1.24e-04  4.17e-03  9.00e-01  
  7  +4.9408e-01  +1.1782e+00  6.84e-01  4.23e-04  7.68e-02  3.52e-04  1.07e-03  7.89e-01  
  8  +4.8421e-01  +1.0264e+00  5.42e-01  3.11e-04  5.61e-02  2.23e-04  8.11e-04  3.90e-01  
  9  +4.7368e-01  +9.2060e-01  4.47e-01  2.35e-04  4.22e-02  1.48e-04  6.31e-04  3.82e-01  
 10  +4.6525e-01  +8.5020e-01  3.85e-01  1.98e-04  3.54e-02  9.29e-05  5.45e-04  3.56e-01  
 11  +4.4719e-01  +7.1313e-01  2.66e-01  1.36e-04  2.41e-02  4.71e-06  3.99e-04  9.90e-01  
 12  +4.1808e-01  +5.6980e-01  1.52e-01  6.69e-05  1.18e-02  7.78e-06  2.12e-04  6.80e-01  
 13  +3.9673e-01  +4.7220e-01  7.55e-02  3.17e-05  5.56e-03  4.35e-06  1.08e-04  5.76e-01  
 14  +3.8895e-01  +4.3895e-01  5.00e-02  2.04e-05  3.58e-03  3.45e-06  7.20e-05  4.68e-01  
 15  +3.8173e-01  +4.0890e-01  2.72e-02  1.08e-05  1.90e-03  2.17e-06  3.95e-05  5.85e-01  
 16  +3.7656e-01  +3.8714e-01  1.06e-02  4.15e-06  7.29e-04  1.20e-06  1.56e-05  9.90e-01  
 17  +3.7314e-01  +3.7443e-01  1.29e-03  5.05e-07  8.87e-05  1.44e-07  1.95e-06  8.90e-01  
 18  +3.7266e-01  +3.7270e-01  3.42e-05  1.33e-08  2.34e-06  3.68e-09  5.20e-08  9.88e-01  
 19  +3.7265e-01  +3.7265e-01  3.44e-07  1.34e-10  2.35e-08  3.70e-11  5.23e-10  9.90e-01  
 20  +3.7265e-01  +3.7265e-01  3.45e-09  1.34e-12  2.36e-10  3.71e-13  5.24e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.4637ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:59 PM: Optimal value: 3.727e-01
(CVXPY) Oct 06 04:25:59 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:25:59 PM: Solver (including time spent in interface) took 1.723e-01 seconds
Iteration: 19, Objective: 0.3727
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:25:59 PM: Your problem has 2704 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:25:59 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:25:59 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:25:59 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:25:59 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:59 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:25:59 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:25:59 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:25:59 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:25:59 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:25:59 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:25:59 PM: Finished problem compilation (took 3.117e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:59 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2704
  constraints   = 5204
  nnz(P)        = 0
  nnz(A)        = 43993
  cones (total) = 1
    : Nonnegative = 1,  numel = 5204

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.81e-01  8.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.7522e-01  +5.5031e+02  5.50e+02  4.45e-01  5.66e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2703e-01  +5.8374e+01  5.78e+01  1.67e-01  2.70e+01  1.84e-02  2.80e-01  9.88e-01  
  3  +5.0763e-01  +1.5016e+01  1.45e+01  1.01e-01  1.66e+01  5.36e-05  2.42e-01  4.47e-01  
  4  +5.0078e-01  +1.5608e+00  1.06e+00  1.06e-02  1.82e+00  8.03e-06  1.05e-01  8.24e-01  
  5  +5.0055e-01  +1.4048e+00  9.04e-01  7.95e-03  1.39e+00  2.11e-05  3.55e-02  7.71e-01  
  6  +4.9944e-01  +1.3211e+00  8.22e-01  1.63e-03  2.94e-01  1.23e-04  4.23e-03  8.98e-01  
  7  +4.9411e-01  +1.1892e+00  6.95e-01  4.30e-04  7.80e-02  3.49e-04  1.09e-03  7.90e-01  
  8  +4.8409e-01  +1.0321e+00  5.48e-01  3.12e-04  5.62e-02  2.21e-04  8.12e-04  4.01e-01  
  9  +4.7411e-01  +9.3411e-01  4.60e-01  2.41e-04  4.31e-02  1.57e-04  6.42e-04  3.43e-01  
 10  +4.6174e-01  +8.3904e-01  3.77e-01  1.86e-04  3.33e-02  1.03e-04  5.16e-04  3.43e-01  
 11  +4.4479e-01  +7.0771e-01  2.63e-01  1.34e-04  2.37e-02  1.03e-06  3.97e-04  9.90e-01  
 12  +4.1543e-01  +5.6078e-01  1.45e-01  6.43e-05  1.13e-02  2.39e-06  2.06e-04  5.46e-01  
 13  +3.9102e-01  +4.5049e-01  5.95e-02  2.47e-05  4.32e-03  2.63e-06  8.59e-05  7.09e-01  
 14  +3.8636e-01  +4.3148e-01  4.51e-02  1.82e-05  3.20e-03  2.64e-06  6.47e-05  3.98e-01  
 15  +3.7810e-01  +3.9768e-01  1.96e-02  7.74e-06  1.36e-03  1.59e-06  2.87e-05  7.41e-01  
 16  +3.7319e-01  +3.7840e-01  5.21e-03  2.04e-06  3.58e-04  4.46e-07  7.81e-06  7.72e-01  
 17  +3.7158e-01  +3.7218e-01  5.94e-04  2.31e-07  4.06e-05  6.33e-08  8.98e-07  9.90e-01  
 18  +3.7135e-01  +3.7136e-01  6.49e-06  2.52e-09  4.43e-07  6.91e-10  9.83e-09  9.89e-01  
 19  +3.7135e-01  +3.7135e-01  6.54e-08  2.54e-11  4.47e-09  6.97e-12  9.91e-11  9.90e-01  
 20  +3.7135e-01  +3.7135e-01  6.64e-10  2.58e-13  4.54e-11  7.09e-14  1.01e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 164.3871ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:25:59 PM: Problem status: optimal
(CVXPY) Oct 06 04:25:59 PM: Optimal value: 3.714e-01
(CVXPY) Oct 06 04:25:59 PM: Compilation took 3.117e-02 seconds
(CVXPY) Oct 06 04:25:59 PM: Solver (including time spent in interface) took 1.721e-01 seconds
Iteration: 20, Objective: 0.3714
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:00 PM: Your problem has 2714 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:00 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2714
  constraints   = 5214
  nnz(P)        = 0
  nnz(A)        = 44256
  cones (total) = 1
    : Nonnegative = 1,  numel = 5214

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.7503e-01  +5.5035e+02  5.50e+02  4.45e-01  5.65e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2689e-01  +5.8237e+01  5.77e+01  1.67e-01  2.69e+01  1.85e-02  2.79e-01  9.89e-01  
  3  +5.0761e-01  +1.4988e+01  1.45e+01  1.01e-01  1.65e+01  5.38e-05  2.41e-01  4.52e-01  
  4  +5.0077e-01  +1.5442e+00  1.04e+00  1.05e-02  1.80e+00  8.03e-06  1.03e-01  8.32e-01  
  5  +5.0059e-01  +1.4857e+00  9.85e-01  8.22e-03  1.44e+00  2.42e-05  3.28e-02  7.99e-01  
  6  +4.9951e-01  +1.3935e+00  8.94e-01  1.76e-03  3.18e-01  1.23e-04  4.55e-03  8.73e-01  
  7  +4.9414e-01  +1.2356e+00  7.41e-01  4.51e-04  8.17e-02  3.47e-04  1.13e-03  8.01e-01  
  8  +4.8382e-01  +1.0628e+00  5.79e-01  3.21e-04  5.79e-02  2.24e-04  8.32e-04  4.06e-01  
  9  +4.7421e-01  +9.7080e-01  4.97e-01  2.52e-04  4.53e-02  1.74e-04  6.70e-04  2.95e-01  
 10  +4.5264e-01  +7.6254e-01  3.10e-01  1.63e-04  2.90e-02  2.72e-06  4.69e-04  8.36e-01  
 11  +4.2448e-01  +6.1568e-01  1.91e-01  8.76e-05  1.54e-02  5.82e-06  2.71e-04  5.54e-01  
 12  +3.9941e-01  +4.9704e-01  9.76e-02  4.21e-05  7.38e-03  4.15e-06  1.42e-04  5.76e-01  
 13  +3.9003e-01  +4.5610e-01  6.61e-02  2.76e-05  4.83e-03  3.84e-06  9.65e-05  4.74e-01  
 14  +3.8382e-01  +4.2991e-01  4.61e-02  1.88e-05  3.30e-03  2.90e-06  6.79e-05  3.59e-01  
 15  +3.7449e-01  +3.9063e-01  1.61e-02  6.45e-06  1.13e-03  1.34e-06  2.44e-05  7.97e-01  
 16  +3.7019e-01  +3.7340e-01  3.21e-03  1.27e-06  2.23e-04  2.99e-07  4.97e-06  8.81e-01  
 17  +3.6908e-01  +3.6915e-01  7.60e-05  3.00e-08  5.28e-06  7.24e-09  1.19e-07  9.82e-01  
 18  +3.6905e-01  +3.6905e-01  7.61e-07  3.01e-10  5.28e-08  7.25e-11  1.19e-09  9.90e-01  
 19  +3.6905e-01  +3.6905e-01  7.68e-09  3.03e-12  5.33e-10  7.33e-13  1.20e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.1844ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:00 PM: Optimal value: 3.691e-01
(CVXPY) Oct 06 04:26:00 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:00 PM: Solver (including time spent in interface) took 1.723e-01 seconds
Iteration: 21, Objective: 0.3691
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:00 PM: Your problem has 2724 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:00 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2724
  constraints   = 5224
  nnz(P)        = 0
  nnz(A)        = 44502
  cones (total) = 1
    : Nonnegative = 1,  numel = 5224

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.81e-01  8.70e+01  1.00e+00  1.00e+00   ------   
  1  +5.7484e-01  +5.5041e+02  5.50e+02  4.46e-01  5.64e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2680e-01  +5.8241e+01  5.77e+01  1.67e-01  2.68e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0766e-01  +1.5005e+01  1.45e+01  1.01e-01  1.65e+01  5.44e-05  2.39e-01  4.59e-01  
  4  +5.0082e-01  +1.6598e+00  1.16e+00  1.16e-02  1.99e+00  8.60e-06  1.09e-01  7.93e-01  
  5  +5.0047e-01  +1.4501e+00  9.50e-01  8.22e-03  1.44e+00  2.24e-05  3.58e-02  8.05e-01  
  6  +4.9841e-01  +1.3311e+00  8.33e-01  1.40e-03  2.54e-01  1.48e-04  3.63e-03  9.14e-01  
  7  +4.9054e-01  +1.2053e+00  7.15e-01  4.18e-04  7.57e-02  3.82e-04  1.06e-03  7.31e-01  
  8  +4.7854e-01  +1.0447e+00  5.66e-01  2.96e-04  5.32e-02  2.55e-04  7.73e-04  4.01e-01  
  9  +4.6886e-01  +9.5523e-01  4.86e-01  2.44e-04  4.36e-02  1.95e-04  6.53e-04  2.27e-01  
 10  +4.5303e-01  +8.0932e-01  3.56e-01  1.80e-04  3.20e-02  6.39e-05  5.10e-04  5.53e-01  
 11  +4.2080e-01  +6.1397e-01  1.93e-01  8.70e-05  1.53e-02  2.48e-05  2.70e-04  6.13e-01  
 12  +3.9866e-01  +5.0378e-01  1.05e-01  4.55e-05  7.97e-03  1.20e-05  1.53e-04  5.02e-01  
 13  +3.8891e-01  +4.5828e-01  6.94e-02  2.92e-05  5.11e-03  7.91e-06  1.02e-04  4.88e-01  
 14  +3.8160e-01  +4.2609e-01  4.45e-02  1.83e-05  3.21e-03  5.06e-06  6.62e-05  4.04e-01  
 15  +3.7226e-01  +3.8487e-01  1.26e-02  5.07e-06  8.89e-04  1.41e-06  1.93e-05  9.17e-01  
 16  +3.6935e-01  +3.7316e-01  3.81e-03  1.52e-06  2.66e-04  4.15e-07  5.94e-06  9.29e-01  
 17  +3.6813e-01  +3.6862e-01  4.90e-04  1.95e-07  3.42e-05  5.32e-08  7.72e-07  8.85e-01  
 18  +3.6795e-01  +3.6796e-01  5.35e-06  2.12e-09  3.73e-07  5.80e-10  8.43e-09  9.89e-01  
 19  +3.6795e-01  +3.6795e-01  5.38e-08  2.13e-11  3.75e-09  5.83e-12  8.47e-11  9.90e-01  
 20  +3.6795e-01  +3.6795e-01  5.48e-10  2.17e-13  3.82e-11  5.95e-14  8.65e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 173.8939ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:00 PM: Optimal value: 3.680e-01
(CVXPY) Oct 06 04:26:00 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:00 PM: Solver (including time spent in interface) took 1.877e-01 seconds
Iteration: 22, Objective: 0.3680
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:01 PM: Your problem has 2734 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:01 PM: Finished problem compilation (took 4.735e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:01 PM: Invoking solver CLARABEL  to obtain a solution.
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = -------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2734
  constraints   = 5234
  nnz(P)        = 0
  nnz(A)        = 44623
  cones (total) = 1
    : Nonnegative = 1,  numel = 5234

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.69e+01  1.00e+00  1.00e+00   ------   
  1  +5.7466e-01  +5.5042e+02  5.50e+02  4.46e-01  5.63e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2671e-01  +5.8312e+01  5.78e+01  1.66e-01  2.67e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0774e-01  +1.4997e+01  1.45e+01  1.00e-01  1.64e+01  5.50e-05  2.36e-01  4.70e-01  
  4  +5.0081e-01  +1.6744e+00  1.17e+00  1.18e-02  2.02e+00  8.90e-06  1.10e-01  7.88e-01  
  5  +5.0041e-01  +1.4235e+00  9.23e-01  8.14e-03  1.42e+00  2.08e-05  3.67e-02  7.80e-01  
  6  +4.9799e-01  +1.3297e+00  8.32e-01  1.39e-03  2.51e-01  1.47e-04  3.59e-03  9.21e-01  
  7  +4.8824e-01  +1.1818e+00  6.94e-01  3.91e-04  7.06e-02  3.86e-04  9.91e-04  7.45e-01  
  8  +4.7767e-01  +1.0586e+00  5.81e-01  3.01e-04  5.40e-02  2.75e-04  7.84e-04  3.27e-01  
  9  +4.6974e-01  +9.7954e-01  5.10e-01  2.58e-04  4.62e-02  2.06e-04  6.88e-04  2.18e-01  
 10  +4.5135e-01  +8.0721e-01  3.56e-01  1.80e-04  3.20e-02  5.26e-05  5.10e-04  6.25e-01  
 11  +4.2346e-01  +6.3986e-01  2.16e-01  9.90e-05  1.74e-02  2.68e-05  3.04e-04  4.92e-01  
 12  +3.9775e-01  +5.0641e-01  1.09e-01  4.74e-05  8.29e-03  1.16e-05  1.59e-04  5.52e-01  
 13  +3.8915e-01  +4.6542e-01  7.63e-02  3.24e-05  5.66e-03  8.26e-06  1.13e-04  4.62e-01  
 14  +3.7868e-01  +4.1849e-01  3.98e-02  1.64e-05  2.87e-03  4.32e-06  5.99e-05  5.36e-01  
 15  +3.7219e-01  +3.8997e-01  1.78e-02  7.18e-06  1.26e-03  1.95e-06  2.73e-05  7.25e-01  
 16  +3.6683e-01  +3.6822e-01  1.39e-03  5.53e-07  9.69e-05  1.46e-07  2.20e-06  9.43e-01  
 17  +3.6636e-01  +3.6637e-01  1.55e-05  6.15e-09  1.08e-06  1.62e-09  2.45e-08  9.89e-01  
 18  +3.6635e-01  +3.6635e-01  1.55e-07  6.17e-11  1.08e-08  1.62e-11  2.46e-10  9.90e-01  
 19  +3.6635e-01  +3.6635e-01  1.57e-09  6.25e-13  1.10e-10  1.65e-13  2.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 165.8283ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:01 PM: Optimal value: 3.664e-01
(CVXPY) Oct 06 04:26:01 PM: Compilation took 4.735e-02 seconds
(CVXPY) Oct 06 04:26:01 PM: Solver (including time spent in interface) took 1.721e-01 seconds
Iteration: 23, Objective: 0.3664
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:01 PM: Your problem has 2744 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:01 PM: Finished problem compilation (took 3.024e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2744
  constraints   = 5244
  nnz(P)        = 0
  nnz(A)        = 44781
  cones (total) = 1
    : Nonnegative = 1,  numel = 5244

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.68e+01  1.00e+00  1.00e+00   ------   
  1  +5.7449e-01  +5.5043e+02  5.50e+02  4.46e-01  5.62e+01  3.76e-03  5.88e-01  5.75e-01  
  2  +5.2663e-01  +5.8385e+01  5.79e+01  1.66e-01  2.66e+01  1.85e-02  2.79e-01  9.90e-01  
  3  +5.0780e-01  +1.4942e+01  1.44e+01  9.97e-02  1.64e+01  5.54e-05  2.33e-01  4.83e-01  
  4  +5.0080e-01  +1.7035e+00  1.20e+00  1.22e-02  2.08e+00  9.24e-06  1.12e-01  7.76e-01  
  5  +5.0034e-01  +1.3780e+00  8.78e-01  7.90e-03  1.37e+00  1.92e-05  3.74e-02  7.66e-01  
  6  +4.9738e-01  +1.3147e+00  8.17e-01  1.32e-03  2.39e-01  1.52e-04  3.42e-03  9.29e-01  
  7  +4.8616e-01  +1.1573e+00  6.71e-01  3.75e-04  6.77e-02  3.84e-04  9.54e-04  7.44e-01  
  8  +4.7631e-01  +1.0580e+00  5.82e-01  2.98e-04  5.36e-02  3.01e-04  7.77e-04  2.73e-01  
  9  +4.6723e-01  +9.7361e-01  5.06e-01  2.52e-04  4.50e-02  2.27e-04  6.73e-04  2.19e-01  
 10  +4.3835e-01  +7.1956e-01  2.81e-01  1.38e-04  2.45e-02  2.08e-06  4.08e-04  8.27e-01  
 11  +4.1483e-01  +5.9468e-01  1.80e-01  8.24e-05  1.45e-02  9.08e-06  2.62e-04  6.31e-01  
 12  +3.8967e-01  +4.7063e-01  8.10e-02  3.51e-05  6.12e-03  4.56e-06  1.22e-04  6.23e-01  
 13  +3.8084e-01  +4.3078e-01  4.99e-02  2.09e-05  3.66e-03  3.49e-06  7.56e-05  5.34e-01  
 14  +3.7387e-01  +4.0067e-01  2.68e-02  1.10e-05  1.93e-03  2.14e-06  4.13e-05  5.98e-01  
 15  +3.6663e-01  +3.7046e-01  3.84e-03  1.55e-06  2.72e-04  3.17e-07  6.12e-06  8.82e-01  
 16  +3.6538e-01  +3.6547e-01  9.00e-05  3.63e-08  6.35e-06  7.88e-09  1.45e-07  9.83e-01  
 17  +3.6535e-01  +3.6535e-01  9.01e-07  3.63e-10  6.36e-08  7.89e-11  1.45e-09  9.90e-01  
 18  +3.6535e-01  +3.6535e-01  9.07e-09  3.66e-12  6.41e-10  7.97e-13  1.46e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 158.9787ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:01 PM: Optimal value: 3.654e-01
(CVXPY) Oct 06 04:26:01 PM: Compilation took 3.024e-02 seconds
(CVXPY) Oct 06 04:26:01 PM: Solver (including time spent in interface) took 1.727e-01 seconds
Iteration: 24, Objective: 0.3654
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:02 PM: Your problem has 2754 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:02 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2754
  constraints   = 5254
  nnz(P)        = 0
  nnz(A)        = 44906
  cones (total) = 1
    : Nonnegative = 1,  numel = 5254

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5013e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7446e-01  +5.5026e+02  5.50e+02  4.46e-01  5.61e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2661e-01  +5.8373e+01  5.78e+01  1.66e-01  2.65e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0780e-01  +1.4913e+01  1.44e+01  9.95e-02  1.63e+01  5.55e-05  2.32e-01  4.86e-01  
  4  +5.0080e-01  +1.7330e+00  1.23e+00  1.25e-02  2.13e+00  9.41e-06  1.13e-01  7.66e-01  
  5  +5.0031e-01  +1.3617e+00  8.61e-01  7.79e-03  1.35e+00  1.87e-05  3.77e-02  7.70e-01  
  6  +4.9706e-01  +1.3070e+00  8.10e-01  1.28e-03  2.30e-01  1.57e-04  3.30e-03  9.34e-01  
  7  +4.8524e-01  +1.1435e+00  6.58e-01  3.67e-04  6.62e-02  3.83e-04  9.35e-04  7.40e-01  
  8  +4.7581e-01  +1.0558e+00  5.80e-01  2.94e-04  5.29e-02  3.18e-04  7.67e-04  2.47e-01  
  9  +4.6718e-01  +9.7816e-01  5.11e-01  2.51e-04  4.50e-02  2.50e-04  6.70e-04  1.96e-01  
 10  +4.4171e-01  +7.5546e-01  3.14e-01  1.53e-04  2.71e-02  3.59e-05  4.44e-04  6.99e-01  
 11  +4.1883e-01  +6.2341e-01  2.05e-01  9.41e-05  1.65e-02  2.04e-05  2.93e-04  5.06e-01  
 12  +3.9385e-01  +4.9407e-01  1.00e-01  4.38e-05  7.66e-03  9.02e-06  1.49e-04  5.54e-01  
 13  +3.8530e-01  +4.5335e-01  6.80e-02  2.89e-05  5.05e-03  6.50e-06  1.02e-04  4.85e-01  
 14  +3.7860e-01  +4.2345e-01  4.48e-02  1.87e-05  3.26e-03  4.33e-06  6.80e-05  3.82e-01  
 15  +3.7018e-01  +3.8588e-01  1.57e-02  6.41e-06  1.12e-03  1.60e-06  2.45e-05  8.14e-01  
 16  +3.6559e-01  +3.6708e-01  1.48e-03  6.01e-07  1.05e-04  1.49e-07  2.38e-06  9.16e-01  
 17  +3.6511e-01  +3.6512e-01  1.65e-05  6.67e-09  1.17e-06  1.64e-09  2.65e-08  9.89e-01  
 18  +3.6510e-01  +3.6510e-01  1.65e-07  6.69e-11  1.17e-08  1.65e-11  2.66e-10  9.90e-01  
 19  +3.6510e-01  +3.6510e-01  1.67e-09  6.78e-13  1.19e-10  1.67e-13  2.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 175.5847ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:02 PM: Optimal value: 3.651e-01
(CVXPY) Oct 06 04:26:02 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:26:02 PM: Solver (including time spent in interface) took 1.882e-01 seconds
Iteration: 25, Objective: 0.3651
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:02 PM: Your problem has 2764 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:02 PM: Finished problem compilation (took 3.237e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2764
  constraints   = 5264
  nnz(P)        = 0
  nnz(A)        = 45192
  cones (total) = 1
    : Nonnegative = 1,  numel = 5264

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.67e+01  1.00e+00  1.00e+00   ------   
  1  +5.7434e-01  +5.5026e+02  5.50e+02  4.46e-01  5.60e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2651e-01  +5.8423e+01  5.79e+01  1.66e-01  2.65e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0785e-01  +1.4795e+01  1.43e+01  9.85e-02  1.61e+01  5.59e-05  2.28e-01  5.02e-01  
  4  +5.0083e-01  +1.8383e+00  1.34e+00  1.36e-02  2.31e+00  1.01e-05  1.19e-01  7.28e-01  
  5  +5.0027e-01  +1.3438e+00  8.44e-01  7.90e-03  1.37e+00  1.62e-05  4.29e-02  7.27e-01  
  6  +4.9640e-01  +1.3192e+00  8.23e-01  1.31e-03  2.36e-01  1.53e-04  3.39e-03  9.50e-01  
  7  +4.8335e-01  +1.1497e+00  6.66e-01  3.82e-04  6.89e-02  3.67e-04  9.76e-04  7.30e-01  
  8  +4.7199e-01  +1.0445e+00  5.72e-01  2.92e-04  5.24e-02  3.00e-04  7.66e-04  2.83e-01  
  9  +4.6316e-01  +9.6301e-01  5.00e-01  2.49e-04  4.45e-02  2.26e-04  6.71e-04  2.12e-01  
 10  +4.4179e-01  +7.8129e-01  3.39e-01  1.66e-04  2.93e-02  7.29e-05  4.77e-04  5.64e-01  
 11  +4.1219e-01  +5.9973e-01  1.88e-01  8.53e-05  1.49e-02  2.72e-05  2.70e-04  6.01e-01  
 12  +3.9086e-01  +4.9071e-01  9.99e-02  4.35e-05  7.59e-03  1.29e-05  1.49e-04  5.33e-01  
 13  +3.8150e-01  +4.4578e-01  6.43e-02  2.73e-05  4.77e-03  7.99e-06  9.75e-05  5.22e-01  
 14  +3.7128e-01  +3.9934e-01  2.81e-02  1.17e-05  2.04e-03  3.36e-06  4.41e-05  6.44e-01  
 15  +3.6585e-01  +3.7502e-01  9.17e-03  3.78e-06  6.60e-04  9.89e-07  1.48e-05  9.40e-01  
 16  +3.6317e-01  +3.6449e-01  1.32e-03  5.42e-07  9.48e-05  1.41e-07  2.16e-06  9.16e-01  
 17  +3.6271e-01  +3.6273e-01  2.25e-05  9.22e-09  1.61e-06  2.38e-09  3.70e-08  9.84e-01  
 18  +3.6270e-01  +3.6270e-01  2.26e-07  9.23e-11  1.62e-08  2.38e-11  3.70e-10  9.90e-01  
 19  +3.6270e-01  +3.6270e-01  2.27e-09  9.31e-13  1.63e-10  2.41e-13  3.74e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 161.1629ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:02 PM: Optimal value: 3.627e-01
(CVXPY) Oct 06 04:26:02 PM: Compilation took 3.237e-02 seconds
(CVXPY) Oct 06 04:26:02 PM: Solver (including time spent in interface) took 1.724e-01 seconds
Iteration: 26, Objective: 0.3627
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:02 PM: Your problem has 2766 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:02 PM: Finished problem compilation (took 3.116e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2766
  constraints   = 5266
  nnz(P)        = 0
  nnz(A)        = 45229
  cones (total) = 1
    : Nonnegative = 1,  numel = 5266

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7429e-01  +5.5029e+02  5.50e+02  4.46e-01  5.60e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2649e-01  +5.8452e+01  5.79e+01  1.66e-01  2.65e+01  1.85e-02  2.78e-01  9.90e-01  
  3  +5.0786e-01  +1.4772e+01  1.43e+01  9.83e-02  1.61e+01  5.59e-05  2.27e-01  5.05e-01  
  4  +5.0082e-01  +1.8405e+00  1.34e+00  1.36e-02  2.31e+00  1.02e-05  1.19e-01  7.26e-01  
  5  +5.0026e-01  +1.3340e+00  8.34e-01  7.82e-03  1.35e+00  1.59e-05  4.29e-02  7.25e-01  
  6  +4.9630e-01  +1.3160e+00  8.20e-01  1.31e-03  2.35e-01  1.53e-04  3.38e-03  9.49e-01  
  7  +4.8312e-01  +1.1455e+00  6.62e-01  3.81e-04  6.87e-02  3.64e-04  9.75e-04  7.30e-01  
  8  +4.7175e-01  +1.0417e+00  5.70e-01  2.91e-04  5.22e-02  3.00e-04  7.64e-04  2.83e-01  
  9  +4.6298e-01  +9.6131e-01  4.98e-01  2.49e-04  4.44e-02  2.26e-04  6.69e-04  2.12e-01  
 10  +4.3327e-01  +7.1209e-01  2.79e-01  1.35e-04  2.37e-02  1.94e-05  3.99e-04  7.74e-01  
 11  +4.0382e-01  +5.5165e-01  1.48e-01  6.65e-05  1.16e-02  9.36e-06  2.17e-04  5.04e-01  
 12  +3.8998e-01  +4.8523e-01  9.53e-02  4.14e-05  7.23e-03  6.71e-06  1.43e-04  4.62e-01  
 13  +3.7835e-01  +4.3057e-01  5.22e-02  2.21e-05  3.85e-03  4.54e-06  7.99e-05  6.75e-01  
 14  +3.7084e-01  +3.9721e-01  2.64e-02  1.10e-05  1.92e-03  2.47e-06  4.14e-05  6.31e-01  
 15  +3.6515e-01  +3.7252e-01  7.37e-03  3.03e-06  5.30e-04  7.86e-07  1.19e-05  9.90e-01  
 16  +3.6279e-01  +3.6345e-01  6.65e-04  2.73e-07  4.77e-05  7.03e-08  1.09e-06  9.14e-01  
 17  +3.6255e-01  +3.6256e-01  7.56e-06  3.10e-09  5.42e-07  7.92e-10  1.25e-08  9.90e-01  
 18  +3.6255e-01  +3.6255e-01  7.59e-08  3.11e-11  5.44e-09  7.94e-12  1.25e-10  9.90e-01  
 19  +3.6255e-01  +3.6255e-01  7.67e-10  3.14e-13  5.49e-11  8.03e-14  1.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.4359ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:03 PM: Optimal value: 3.626e-01
(CVXPY) Oct 06 04:26:03 PM: Compilation took 3.116e-02 seconds
(CVXPY) Oct 06 04:26:03 PM: Solver (including time spent in interface) took 1.727e-01 seconds
Iteration: 27, Objective: 0.3626
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:03 PM: Your problem has 2776 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:03 PM: Finished problem compilation (took 2.881e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2776
  constraints   = 5276
  nnz(P)        = 0
  nnz(A)        = 45397
  cones (total) = 1
    : Nonnegative = 1,  numel = 5276

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.66e+01  1.00e+00  1.00e+00   ------   
  1  +5.7414e-01  +5.5029e+02  5.50e+02  4.47e-01  5.59e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2640e-01  +5.8515e+01  5.80e+01  1.66e-01  2.64e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0789e-01  +1.4635e+01  1.41e+01  9.72e-02  1.60e+01  5.63e-05  2.24e-01  5.21e-01  
  4  +5.0078e-01  +1.8254e+00  1.32e+00  1.35e-02  2.29e+00  1.04e-05  1.19e-01  7.25e-01  
  5  +5.0023e-01  +1.3218e+00  8.22e-01  7.76e-03  1.34e+00  1.54e-05  4.29e-02  7.04e-01  
  6  +4.9592e-01  +1.2917e+00  7.96e-01  1.28e-03  2.31e-01  1.51e-04  3.33e-03  9.38e-01  
  7  +4.8202e-01  +1.1184e+00  6.36e-01  3.74e-04  6.74e-02  3.53e-04  9.60e-04  7.35e-01  
  8  +4.7091e-01  +1.0267e+00  5.56e-01  2.87e-04  5.14e-02  3.05e-04  7.53e-04  2.68e-01  
  9  +4.6418e-01  +9.6625e-01  5.02e-01  2.55e-04  4.56e-02  2.38e-04  6.84e-04  1.85e-01  
 10  +4.4049e-01  +7.7460e-01  3.34e-01  1.63e-04  2.89e-02  7.60e-05  4.71e-04  5.72e-01  
 11  +4.0580e-01  +5.6662e-01  1.61e-01  7.26e-05  1.27e-02  2.49e-05  2.33e-04  6.03e-01  
 12  +3.8957e-01  +4.8652e-01  9.69e-02  4.24e-05  7.39e-03  1.36e-05  1.45e-04  5.14e-01  
 13  +3.7677e-01  +4.2548e-01  4.87e-02  2.08e-05  3.62e-03  6.34e-06  7.57e-05  6.17e-01  
 14  +3.7256e-01  +4.0585e-01  3.33e-02  1.40e-05  2.44e-03  4.20e-06  5.21e-05  4.90e-01  
 15  +3.6581e-01  +3.7587e-01  1.01e-02  4.16e-06  7.26e-04  1.10e-06  1.62e-05  9.90e-01  
 16  +3.6256e-01  +3.6316e-01  5.96e-04  2.45e-07  4.27e-05  6.33e-08  9.84e-07  9.51e-01  
 17  +3.6235e-01  +3.6236e-01  7.77e-06  3.19e-09  5.57e-07  8.12e-10  1.29e-08  9.90e-01  
 18  +3.6235e-01  +3.6235e-01  7.81e-08  3.21e-11  5.60e-09  8.16e-12  1.29e-10  9.90e-01  
 19  +3.6235e-01  +3.6235e-01  7.96e-10  3.27e-13  5.71e-11  8.34e-14  1.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 156.6163ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:03 PM: Optimal value: 3.624e-01
(CVXPY) Oct 06 04:26:03 PM: Compilation took 2.881e-02 seconds
(CVXPY) Oct 06 04:26:03 PM: Solver (including time spent in interface) took 1.723e-01 seconds
Iteration: 28, Objective: 0.3624
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:03 PM: Your problem has 2786 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:03 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:03 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:03 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:03 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:03 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:03 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:03 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:03 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:03 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:03 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:03 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:03 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2786
  constraints   = 5286
  nnz(P)        = 0
  nnz(A)        = 45540
  cones (total) = 1
    : Nonnegative = 1,  numel = 5286

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.65e+01  1.00e+00  1.00e+00   ------   
  1  +5.7398e-01  +5.5035e+02  5.50e+02  4.47e-01  5.58e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2630e-01  +5.8576e+01  5.80e+01  1.66e-01  2.64e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0793e-01  +1.4487e+01  1.40e+01  9.61e-02  1.58e+01  5.66e-05  2.20e-01  5.36e-01  
  4  +5.0083e-01  +1.9758e+00  1.48e+00  1.50e-02  2.55e+00  1.12e-05  1.26e-01  6.71e-01  
  5  +5.0018e-01  +1.3055e+00  8.05e-01  7.70e-03  1.33e+00  1.44e-05  4.60e-02  7.14e-01  
  6  +4.9505e-01  +1.2936e+00  7.99e-01  1.25e-03  2.25e-01  1.58e-04  3.26e-03  9.48e-01  
  7  +4.7909e-01  +1.1057e+00  6.27e-01  3.60e-04  6.47e-02  3.61e-04  9.28e-04  7.35e-01  
  8  +4.6822e-01  +1.0174e+00  5.49e-01  2.83e-04  5.07e-02  3.08e-04  7.48e-04  2.43e-01  
  9  +4.4829e-01  +8.3865e-01  3.90e-01  1.97e-04  3.49e-02  1.10e-04  5.53e-04  5.19e-01  
 10  +4.1380e-01  +6.1352e-01  2.00e-01  9.29e-05  1.63e-02  2.07e-05  2.91e-04  7.68e-01  
 11  +3.9170e-01  +5.0032e-01  1.09e-01  4.84e-05  8.44e-03  1.05e-05  1.65e-04  5.47e-01  
 12  +3.8010e-01  +4.4477e-01  6.47e-02  2.82e-05  4.90e-03  6.25e-06  1.01e-04  4.77e-01  
 13  +3.7047e-01  +3.9965e-01  2.92e-02  1.24e-05  2.16e-03  2.92e-06  4.67e-05  6.87e-01  
 14  +3.6611e-01  +3.8000e-01  1.39e-02  5.85e-06  1.02e-03  1.40e-06  2.27e-05  8.07e-01  
 15  +3.6290e-01  +3.6673e-01  3.82e-03  1.59e-06  2.78e-04  3.90e-07  6.36e-06  8.39e-01  
 16  +3.6170e-01  +3.6198e-01  2.82e-04  1.17e-07  2.05e-05  2.86e-08  4.74e-07  9.28e-01  
 17  +3.6160e-01  +3.6160e-01  2.87e-06  1.19e-09  2.08e-07  2.91e-10  4.82e-09  9.90e-01  
 18  +3.6160e-01  +3.6160e-01  2.88e-08  1.19e-11  2.08e-09  2.91e-12  4.83e-11  9.90e-01  
 19  +3.6160e-01  +3.6160e-01  2.93e-10  1.22e-13  2.12e-11  2.97e-14  4.93e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 159.6293ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:03 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:03 PM: Optimal value: 3.616e-01
(CVXPY) Oct 06 04:26:03 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:26:03 PM: Solver (including time spent in interface) took 1.572e-01 seconds
Iteration: 29, Objective: 0.3616
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:04 PM: Your problem has 2796 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:04 PM: Finished problem compilation (took 4.717e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2796
  constraints   = 5296
  nnz(P)        = 0
  nnz(A)        = 45685
  cones (total) = 1
    : Nonnegative = 1,  numel = 5296

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.64e+01  1.00e+00  1.00e+00   ------   
  1  +5.7376e-01  +5.5048e+02  5.50e+02  4.47e-01  5.58e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2620e-01  +5.8683e+01  5.82e+01  1.66e-01  2.63e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0797e-01  +1.4323e+01  1.38e+01  9.49e-02  1.56e+01  5.70e-05  2.16e-01  5.53e-01  
  4  +5.0076e-01  +1.9266e+00  1.43e+00  1.46e-02  2.47e+00  1.14e-05  1.26e-01  6.75e-01  
  5  +5.0016e-01  +1.3063e+00  8.06e-01  7.75e-03  1.34e+00  1.42e-05  4.61e-02  6.86e-01  
  6  +4.9486e-01  +1.3183e+00  8.23e-01  1.32e-03  2.37e-01  1.53e-04  3.43e-03  9.47e-01  
  7  +4.7911e-01  +1.1172e+00  6.38e-01  3.80e-04  6.82e-02  3.37e-04  9.80e-04  7.50e-01  
  8  +4.6739e-01  +1.0207e+00  5.53e-01  2.90e-04  5.18e-02  2.87e-04  7.68e-04  2.71e-01  
  9  +4.4747e-01  +8.3414e-01  3.87e-01  2.00e-04  3.53e-02  7.53e-05  5.65e-04  6.04e-01  
 10  +4.1176e-01  +6.0587e-01  1.94e-01  9.06e-05  1.58e-02  1.75e-05  2.86e-04  7.80e-01  
 11  +3.9121e-01  +5.0179e-01  1.11e-01  4.97e-05  8.66e-03  9.63e-06  1.70e-04  5.07e-01  
 12  +3.7931e-01  +4.4448e-01  6.52e-02  2.87e-05  4.98e-03  5.77e-06  1.03e-04  4.83e-01  
 13  +3.7078e-01  +4.0405e-01  3.33e-02  1.44e-05  2.50e-03  3.14e-06  5.38e-05  6.48e-01  
 14  +3.6819e-01  +3.9232e-01  2.41e-02  1.03e-05  1.80e-03  2.32e-06  3.93e-05  4.09e-01  
 15  +3.6316e-01  +3.7060e-01  7.44e-03  3.14e-06  5.48e-04  7.20e-07  1.24e-05  7.25e-01  
 16  +3.6127e-01  +3.6267e-01  1.40e-03  5.88e-07  1.03e-04  1.36e-07  2.37e-06  8.92e-01  
 17  +3.6081e-01  +3.6085e-01  3.65e-05  1.53e-08  2.66e-06  3.53e-09  6.20e-08  9.76e-01  
 18  +3.6080e-01  +3.6080e-01  3.66e-07  1.53e-10  2.67e-08  3.54e-11  6.22e-10  9.90e-01  
 19  +3.6080e-01  +3.6080e-01  3.72e-09  1.55e-12  2.71e-10  3.60e-13  6.32e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.1957ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:04 PM: Optimal value: 3.608e-01
(CVXPY) Oct 06 04:26:04 PM: Compilation took 4.717e-02 seconds
(CVXPY) Oct 06 04:26:04 PM: Solver (including time spent in interface) took 1.722e-01 seconds
Iteration: 30, Objective: 0.3608
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:04 PM: Your problem has 2806 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:04 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:04 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:04 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:04 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:04 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:04 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:04 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:04 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:04 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:04 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:04 PM: Finished problem compilation (took 4.688e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:04 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2806
  constraints   = 5306
  nnz(P)        = 0
  nnz(A)        = 45813
  cones (total) = 1
    : Nonnegative = 1,  numel = 5306

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7379e-01  +5.5036e+02  5.50e+02  4.47e-01  5.57e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2620e-01  +5.8659e+01  5.81e+01  1.66e-01  2.63e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0796e-01  +1.4313e+01  1.38e+01  9.48e-02  1.56e+01  5.70e-05  2.16e-01  5.53e-01  
  4  +5.0077e-01  +1.9506e+00  1.45e+00  1.48e-02  2.51e+00  1.15e-05  1.26e-01  6.68e-01  
  5  +5.0013e-01  +1.2882e+00  7.88e-01  7.55e-03  1.30e+00  1.43e-05  4.44e-02  7.07e-01  
  6  +4.9453e-01  +1.3159e+00  8.21e-01  1.27e-03  2.27e-01  1.60e-04  3.30e-03  9.46e-01  
  7  +4.7737e-01  +1.1006e+00  6.23e-01  3.59e-04  6.44e-02  3.49e-04  9.29e-04  7.44e-01  
  8  +4.6713e-01  +1.0211e+00  5.54e-01  2.87e-04  5.13e-02  3.03e-04  7.61e-04  2.31e-01  
  9  +4.4916e-01  +8.5426e-01  4.05e-01  2.09e-04  3.70e-02  1.03e-04  5.88e-04  5.24e-01  
 10  +4.1070e-01  +6.0506e-01  1.94e-01  8.95e-05  1.56e-02  2.82e-05  2.82e-04  6.75e-01  
 11  +3.9192e-01  +5.0890e-01  1.17e-01  5.24e-05  9.12e-03  1.54e-05  1.78e-04  4.69e-01  
 12  +3.7863e-01  +4.4336e-01  6.47e-02  2.84e-05  4.93e-03  8.08e-06  1.02e-04  5.37e-01  
 13  +3.6925e-01  +3.9804e-01  2.88e-02  1.24e-05  2.15e-03  3.38e-06  4.68e-05  7.74e-01  
 14  +3.6651e-01  +3.8552e-01  1.90e-02  8.12e-06  1.41e-03  2.13e-06  3.14e-05  5.58e-01  
 15  +3.6467e-01  +3.7737e-01  1.27e-02  5.37e-06  9.34e-04  1.38e-06  2.10e-05  6.43e-01  
 16  +3.6185e-01  +3.6581e-01  3.96e-03  1.66e-06  2.89e-04  4.14e-07  6.68e-06  8.37e-01  
 17  +3.6059e-01  +3.6085e-01  2.56e-04  1.07e-07  1.87e-05  2.58e-08  4.37e-07  9.63e-01  
 18  +3.6050e-01  +3.6050e-01  2.59e-06  1.08e-09  1.89e-07  2.60e-10  4.42e-09  9.90e-01  
 19  +3.6050e-01  +3.6050e-01  2.59e-08  1.09e-11  1.89e-09  2.61e-12  4.42e-11  9.90e-01  
 20  +3.6050e-01  +3.6050e-01  2.66e-10  1.11e-13  1.94e-11  2.68e-14  4.54e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 162.4043ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:04 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:04 PM: Optimal value: 3.605e-01
(CVXPY) Oct 06 04:26:04 PM: Compilation took 4.688e-02 seconds
(CVXPY) Oct 06 04:26:04 PM: Solver (including time spent in interface) took 1.720e-01 seconds
Iteration: 31, Objective: 0.3605
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:05 PM: Your problem has 2809 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:05 PM: Finished problem compilation (took 3.133e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2809
  constraints   = 5309
  nnz(P)        = 0
  nnz(A)        = 45850
  cones (total) = 1
    : Nonnegative = 1,  numel = 5309

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7378e-01  +5.5037e+02  5.50e+02  4.47e-01  5.56e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2619e-01  +5.8663e+01  5.81e+01  1.66e-01  2.62e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0796e-01  +1.4302e+01  1.38e+01  9.47e-02  1.56e+01  5.70e-05  2.15e-01  5.54e-01  
  4  +5.0077e-01  +1.9506e+00  1.45e+00  1.48e-02  2.51e+00  1.16e-05  1.26e-01  6.67e-01  
  5  +5.0014e-01  +1.2928e+00  7.93e-01  7.60e-03  1.31e+00  1.43e-05  4.47e-02  7.04e-01  
  6  +4.9454e-01  +1.3180e+00  8.23e-01  1.27e-03  2.29e-01  1.60e-04  3.32e-03  9.46e-01  
  7  +4.7733e-01  +1.1011e+00  6.24e-01  3.59e-04  6.44e-02  3.49e-04  9.30e-04  7.46e-01  
  8  +4.6712e-01  +1.0220e+00  5.55e-01  2.88e-04  5.14e-02  3.02e-04  7.62e-04  2.31e-01  
  9  +4.4891e-01  +8.5223e-01  4.03e-01  2.09e-04  3.69e-02  9.97e-05  5.87e-04  5.33e-01  
 10  +4.1140e-01  +6.0984e-01  1.98e-01  9.17e-05  1.60e-02  2.81e-05  2.88e-04  6.74e-01  
 11  +3.9223e-01  +5.1089e-01  1.19e-01  5.33e-05  9.26e-03  1.53e-05  1.81e-04  4.69e-01  
 12  +3.7849e-01  +4.4290e-01  6.44e-02  2.83e-05  4.90e-03  7.86e-06  1.02e-04  5.54e-01  
 13  +3.7024e-01  +4.0296e-01  3.27e-02  1.41e-05  2.45e-03  3.84e-06  5.32e-05  6.68e-01  
 14  +3.6550e-01  +3.8138e-01  1.59e-02  6.76e-06  1.17e-03  1.79e-06  2.62e-05  7.11e-01  
 15  +3.6250e-01  +3.6866e-01  6.16e-03  2.59e-06  4.51e-04  6.74e-07  1.03e-05  7.16e-01  
 16  +3.6079e-01  +3.6160e-01  8.09e-04  3.39e-07  5.90e-05  7.95e-08  1.38e-06  9.90e-01  
 17  +3.6050e-01  +3.6051e-01  1.03e-05  4.33e-09  7.53e-07  1.01e-09  1.76e-08  9.88e-01  
 18  +3.6050e-01  +3.6050e-01  1.04e-07  4.34e-11  7.56e-09  1.02e-11  1.77e-10  9.90e-01  
 19  +3.6050e-01  +3.6050e-01  1.06e-09  4.45e-13  7.74e-11  1.04e-13  1.82e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.4548ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:05 PM: Optimal value: 3.605e-01
(CVXPY) Oct 06 04:26:05 PM: Compilation took 3.133e-02 seconds
(CVXPY) Oct 06 04:26:05 PM: Solver (including time spent in interface) took 1.725e-01 seconds
Iteration: 32, Objective: 0.3605
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:05 PM: Your problem has 2810 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:05 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:05 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:05 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:05 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:05 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:05 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:05 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:05 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:05 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:05 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:05 PM: Finished problem compilation (took 4.704e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:05 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2810
  constraints   = 5310
  nnz(P)        = 0
  nnz(A)        = 45896
  cones (total) = 1
    : Nonnegative = 1,  numel = 5310

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7377e-01  +5.5036e+02  5.50e+02  4.47e-01  5.56e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2618e-01  +5.8668e+01  5.81e+01  1.66e-01  2.62e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0797e-01  +1.4291e+01  1.38e+01  9.46e-02  1.56e+01  5.70e-05  2.15e-01  5.55e-01  
  4  +5.0078e-01  +1.9628e+00  1.46e+00  1.50e-02  2.53e+00  1.16e-05  1.27e-01  6.63e-01  
  5  +5.0013e-01  +1.2914e+00  7.91e-01  7.59e-03  1.31e+00  1.43e-05  4.48e-02  7.06e-01  
  6  +4.9447e-01  +1.3187e+00  8.24e-01  1.27e-03  2.28e-01  1.60e-04  3.31e-03  9.47e-01  
  7  +4.7695e-01  +1.0981e+00  6.21e-01  3.56e-04  6.38e-02  3.51e-04  9.21e-04  7.46e-01  
  8  +4.6704e-01  +1.0217e+00  5.55e-01  2.88e-04  5.13e-02  3.05e-04  7.61e-04  2.24e-01  
  9  +4.4894e-01  +8.5315e-01  4.04e-01  2.09e-04  3.69e-02  1.01e-04  5.88e-04  5.29e-01  
 10  +4.1214e-01  +6.1535e-01  2.03e-01  9.40e-05  1.64e-02  3.04e-05  2.95e-04  6.57e-01  
 11  +3.9325e-01  +5.1683e-01  1.24e-01  5.56e-05  9.67e-03  1.68e-05  1.88e-04  4.47e-01  
 12  +3.7999e-01  +4.5047e-01  7.05e-02  3.10e-05  5.38e-03  8.99e-06  1.11e-04  5.42e-01  
 13  +3.7110e-01  +4.0743e-01  3.63e-02  1.57e-05  2.73e-03  4.44e-06  5.90e-05  6.12e-01  
 14  +3.6877e-01  +3.9650e-01  2.77e-02  1.19e-05  2.07e-03  3.33e-06  4.52e-05  3.52e-01  
 15  +3.6367e-01  +3.7389e-01  1.02e-02  4.34e-06  7.54e-04  1.20e-06  1.71e-05  6.78e-01  
 16  +3.6167e-01  +3.6537e-01  3.70e-03  1.56e-06  2.71e-04  4.24e-07  6.26e-06  6.82e-01  
 17  +3.6058e-01  +3.6080e-01  2.18e-04  9.14e-08  1.59e-05  2.16e-08  3.72e-07  9.90e-01  
 18  +3.6050e-01  +3.6050e-01  2.21e-06  9.24e-10  1.61e-07  2.18e-10  3.77e-09  9.90e-01  
 19  +3.6050e-01  +3.6050e-01  2.21e-08  9.27e-12  1.61e-09  2.19e-12  3.78e-11  9.90e-01  
 20  +3.6050e-01  +3.6050e-01  2.28e-10  9.55e-14  1.66e-11  2.26e-14  3.90e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 180.5098ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:05 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:05 PM: Optimal value: 3.605e-01
(CVXPY) Oct 06 04:26:05 PM: Compilation took 4.704e-02 seconds
(CVXPY) Oct 06 04:26:05 PM: Solver (including time spent in interface) took 1.881e-01 seconds
Iteration: 33, Objective: 0.3605
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:26:06 PM: Your problem has 2813 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:26:06 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:26:06 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:26:06 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:26:06 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:06 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:26:06 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:26:06 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:26:06 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:26:06 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:26:06 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:26:06 PM: Finished problem compilation (took 3.126e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:06 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2813
  constraints   = 5313
  nnz(P)        = 0
  nnz(A)        = 45929
  cones (total) = 1
    : Nonnegative = 1,  numel = 5313

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5014e+03  2.50e+03  9.81e-01  8.63e+01  1.00e+00  1.00e+00   ------   
  1  +5.7376e-01  +5.5039e+02  5.50e+02  4.47e-01  5.56e+01  3.76e-03  5.87e-01  5.76e-01  
  2  +5.2617e-01  +5.8680e+01  5.82e+01  1.66e-01  2.62e+01  1.86e-02  2.78e-01  9.90e-01  
  3  +5.0797e-01  +1.4266e+01  1.38e+01  9.44e-02  1.55e+01  5.71e-05  2.15e-01  5.58e-01  
  4  +5.0077e-01  +1.9574e+00  1.46e+00  1.49e-02  2.52e+00  1.17e-05  1.27e-01  6.63e-01  
  5  +5.0013e-01  +1.2894e+00  7.89e-01  7.57e-03  1.30e+00  1.43e-05  4.46e-02  7.06e-01  
  6  +4.9440e-01  +1.3171e+00  8.23e-01  1.26e-03  2.27e-01  1.61e-04  3.30e-03  9.47e-01  
  7  +4.7668e-01  +1.0938e+00  6.17e-01  3.53e-04  6.32e-02  3.50e-04  9.14e-04  7.48e-01  
  8  +4.6698e-01  +1.0198e+00  5.53e-01  2.87e-04  5.12e-02  3.05e-04  7.60e-04  2.20e-01  
  9  +4.4843e-01  +8.4904e-01  4.01e-01  2.07e-04  3.65e-02  9.94e-05  5.83e-04  5.35e-01  
 10  +4.1248e-01  +6.1822e-01  2.06e-01  9.54e-05  1.67e-02  3.14e-05  2.99e-04  6.45e-01  
 11  +3.9333e-01  +5.1764e-01  1.24e-01  5.60e-05  9.74e-03  1.71e-05  1.89e-04  4.50e-01  
 12  +3.8007e-01  +4.5104e-01  7.10e-02  3.12e-05  5.42e-03  9.15e-06  1.12e-04  5.44e-01  
 13  +3.7111e-01  +4.0751e-01  3.64e-02  1.58e-05  2.74e-03  4.47e-06  5.91e-05  6.17e-01  
 14  +3.6883e-01  +3.9681e-01  2.80e-02  1.20e-05  2.09e-03  3.38e-06  4.57e-05  3.46e-01  
 15  +3.6366e-01  +3.7388e-01  1.02e-02  4.34e-06  7.53e-04  1.21e-06  1.71e-05  6.82e-01  
 16  +3.6167e-01  +3.6536e-01  3.70e-03  1.56e-06  2.70e-04  4.26e-07  6.26e-06  6.83e-01  
 17  +3.6058e-01  +3.6079e-01  2.14e-04  8.98e-08  1.56e-05  2.12e-08  3.66e-07  9.90e-01  
 18  +3.6050e-01  +3.6050e-01  2.16e-06  9.07e-10  1.58e-07  2.14e-10  3.70e-09  9.90e-01  
 19  +3.6050e-01  +3.6050e-01  2.17e-08  9.08e-12  1.58e-09  2.15e-12  3.70e-11  9.90e-01  
 20  +3.6050e-01  +3.6050e-01  2.23e-10  9.35e-14  1.63e-11  2.22e-14  3.82e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 166.5354ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:26:06 PM: Problem status: optimal
(CVXPY) Oct 06 04:26:06 PM: Optimal value: 3.605e-01
(CVXPY) Oct 06 04:26:06 PM: Compilation took 3.126e-02 seconds
(CVXPY) Oct 06 04:26:06 PM: Solver (including time spent in interface) took 1.882e-01 seconds
FULL MODEL:
  Accruacy: 0.6
  Our objective: 0.2

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                                                              <-- (term's our objective: 0.1372)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x8 = 1 AND x9 = 1)                       <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0044)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0012)
 OR (x0 = 0 AND x1 = 1 AND x3 = 1 AND x4 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 1)                       <-- (term's our objective: 0.0028)
 OR (x0 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 1)            <-- (term's our objective: 0.0032)
 OR (x0 = 0 AND x2 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 0)                       <-- (term's our objective: 0.0052)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0036)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0 AND x8 = 0 AND x9 = 0) <-- (term's our objective: 0.0016)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.0028)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 1)            <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1 AND x5 = 0 AND x7 = 0 AND x8 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0032)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x6 = 1 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x5 = 1 AND x6 = 0 AND x7 = 1 AND x8 = 0 AND x9 = 0)            <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0 AND x9 = 0)                       <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x5 = 1 AND x6 = 0 AND x8 = 1)                                             <-- (term's our objective: 0.0092)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0024)
 OR (x0 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 1 AND x8 = 1 AND x9 = 0)            <-- (term's our objective: 0.0032)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 22.31294083595276
Best over terms:
  Our final objective: 0.13719999999999996
    Its accruacy: 0.5686
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.13719999999999996
  Highest accruacy: 0.5686
1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 67 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 68 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 69 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 70 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 71 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 72 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 73 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 74 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 75 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 76 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 77 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 78 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 79 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 80 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 81 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 82 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 83 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 84 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 85 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 86 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 87 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 88 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 89 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 90 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 91 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 92 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 93 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 94 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 95 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 96 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 97 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 98 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 99 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 100 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 101 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 102 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

