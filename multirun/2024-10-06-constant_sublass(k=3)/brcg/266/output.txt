Command:
python test_script.py -s constant_subclass -d 7 -n 5000 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.15599999999999997
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 5000 remain. 
Dimension is 7.

Computed total variation: 0.21999999999999997
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:41 PM: Your problem has 2515 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:41 PM: Finished problem compilation (took 6.004e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2515
  constraints   = 5015
  nnz(P)        = 0
  nnz(A)        = 25015
  cones (total) = 1
    : Nonnegative = 1,  numel = 5015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0011e-01  +2.5008e+03  2.50e+03  9.79e-01  7.40e+01  1.00e+00  1.00e+00   ------   
  1  +5.8811e-01  +5.2570e+02  5.25e+02  4.01e-01  4.61e+01  3.86e-03  5.45e-01  6.11e-01  
  2  +5.3799e-01  +6.5521e+01  6.50e+01  1.52e-01  2.23e+01  1.31e-02  2.54e-01  8.67e-01  
  3  +5.0945e-01  +1.6566e+01  1.61e+01  1.04e-01  1.49e+01  3.37e-05  2.44e-01  1.77e-01  
  4  +5.0034e-01  +1.0618e+00  5.61e-01  5.42e-03  8.01e-01  6.81e-06  1.10e-01  9.90e-01  
  5  +5.0004e-01  +6.3834e-01  1.38e-01  1.31e-03  1.95e-01  4.63e-06  2.58e-02  8.31e-01  
  6  +4.9782e-01  +9.6658e-01  4.69e-01  7.52e-04  1.13e-01  1.54e-04  2.33e-03  9.64e-01  
  7  +4.9100e-01  +8.3272e-01  3.42e-01  2.07e-04  3.12e-02  3.31e-04  6.31e-04  7.38e-01  
  8  +4.8344e-01  +6.2943e-01  1.46e-01  9.19e-05  1.38e-02  3.01e-06  2.97e-04  7.44e-01  
  9  +4.7402e-01  +5.6262e-01  8.86e-02  4.73e-05  7.08e-03  2.77e-06  1.62e-04  5.63e-01  
 10  +4.6567e-01  +5.1040e-01  4.47e-02  2.05e-05  3.07e-03  3.67e-06  7.68e-05  9.90e-01  
 11  +4.5914e-01  +4.8084e-01  2.17e-02  9.40e-06  1.41e-03  1.93e-06  3.73e-05  9.90e-01  
 12  +4.5271e-01  +4.5399e-01  1.28e-03  5.31e-07  7.94e-05  9.75e-08  2.25e-06  9.48e-01  
 13  +4.5230e-01  +4.5232e-01  1.43e-05  5.90e-09  8.83e-07  1.10e-09  2.51e-08  9.90e-01  
 14  +4.5230e-01  +4.5230e-01  1.43e-07  5.90e-11  8.82e-09  1.10e-11  2.51e-10  9.90e-01  
 15  +4.5230e-01  +4.5230e-01  1.43e-09  5.90e-13  8.83e-11  1.11e-13  2.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 53.8004ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:41 PM: Optimal value: 4.523e-01
(CVXPY) Oct 06 04:03:41 PM: Compilation took 6.004e-02 seconds
(CVXPY) Oct 06 04:03:41 PM: Solver (including time spent in interface) took 6.035e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4523
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:41 PM: Your problem has 2525 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:41 PM: Finished problem compilation (took 1.836e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2525
  constraints   = 5025
  nnz(P)        = 0
  nnz(A)        = 29455
  cones (total) = 1
    : Nonnegative = 1,  numel = 5025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0009e-01  +2.5013e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8794e-01  +5.2590e+02  5.25e+02  4.01e-01  4.81e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3765e-01  +6.5191e+01  6.47e+01  1.52e-01  2.31e+01  1.32e-02  2.54e-01  8.70e-01  
  3  +5.0925e-01  +1.6359e+01  1.58e+01  1.04e-01  1.54e+01  3.37e-05  2.44e-01  1.86e-01  
  4  +5.0067e-01  +1.6671e+00  1.17e+00  1.13e-02  1.72e+00  8.40e-06  1.49e-01  6.77e-01  
  5  +5.0006e-01  +7.4889e-01  2.49e-01  2.37e-03  3.66e-01  4.24e-06  4.69e-02  7.58e-01  
  6  +4.9811e-01  +1.5046e+00  1.01e+00  2.51e-03  3.93e-01  8.21e-05  7.50e-03  9.83e-01  
  7  +4.8912e-01  +1.1449e+00  6.56e-01  4.41e-04  6.94e-02  2.43e-04  1.26e-03  8.33e-01  
  8  +4.8240e-01  +8.4878e-01  3.66e-01  2.18e-04  3.42e-02  1.02e-04  6.31e-04  6.01e-01  
  9  +4.7234e-01  +6.9735e-01  2.25e-01  1.08e-04  1.70e-02  6.12e-05  3.16e-04  5.94e-01  
 10  +4.7399e-01  +7.0236e-01  2.28e-01  1.02e-04  1.59e-02  6.03e-05  2.91e-04  1.99e-01  
 11  +4.8197e-01  +7.0337e-01  2.21e-01  9.27e-05  1.46e-02  3.94e-05  2.57e-04  5.79e-01  
 12  +4.7812e-01  +6.4182e-01  1.64e-01  7.78e-05  1.22e-02  1.01e-05  2.28e-04  8.54e-01  
 13  +4.6998e-01  +5.8827e-01  1.18e-01  5.26e-05  8.23e-03  1.19e-05  1.52e-04  9.90e-01  
 14  +4.4640e-01  +5.0438e-01  5.80e-02  1.92e-05  2.99e-03  7.01e-06  5.76e-05  6.84e-01  
 15  +4.2394e-01  +4.2767e-01  3.73e-03  1.18e-06  1.84e-04  2.00e-07  3.78e-06  9.75e-01  
 16  +4.2212e-01  +4.2216e-01  3.86e-05  1.21e-08  1.89e-06  2.01e-09  3.91e-08  9.90e-01  
 17  +4.2210e-01  +4.2210e-01  3.86e-07  1.21e-10  1.89e-08  2.01e-11  3.91e-10  9.90e-01  
 18  +4.2210e-01  +4.2210e-01  3.86e-09  1.21e-12  1.89e-10  2.02e-13  3.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 67.0542ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:41 PM: Optimal value: 4.221e-01
(CVXPY) Oct 06 04:03:41 PM: Compilation took 1.836e-02 seconds
(CVXPY) Oct 06 04:03:41 PM: Solver (including time spent in interface) took 7.624e-02 seconds
Iteration: 2, Objective: 0.4221
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:41 PM: Your problem has 2535 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:41 PM: Finished problem compilation (took 2.284e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2535
  constraints   = 5035
  nnz(P)        = 0
  nnz(A)        = 30265
  cones (total) = 1
    : Nonnegative = 1,  numel = 5035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5011e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8771e-01  +5.2623e+02  5.26e+02  4.02e-01  4.80e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3743e-01  +6.4999e+01  6.45e+01  1.52e-01  2.30e+01  1.33e-02  2.54e-01  8.73e-01  
  3  +5.0920e-01  +1.6311e+01  1.58e+01  1.04e-01  1.54e+01  3.39e-05  2.43e-01  1.90e-01  
  4  +5.0047e-01  +1.3316e+00  8.31e-01  8.05e-03  1.23e+00  7.88e-06  1.26e-01  8.37e-01  
  5  +5.0011e-01  +8.1473e-01  3.15e-01  3.00e-03  4.64e-01  5.69e-06  4.69e-02  7.11e-01  
  6  +4.9956e-01  +9.9318e-01  4.94e-01  2.72e-03  4.26e-01  3.27e-05  9.65e-03  9.09e-01  
  7  +4.9449e-01  +9.0269e-01  4.08e-01  4.15e-04  6.54e-02  1.92e-04  1.18e-03  8.79e-01  
  8  +4.9202e-01  +8.3800e-01  3.46e-01  2.66e-04  4.20e-02  1.72e-04  7.49e-04  5.11e-01  
  9  +4.9239e-01  +8.1678e-01  3.24e-01  2.56e-04  4.03e-02  1.31e-04  7.16e-04  1.88e-01  
 10  +4.8473e-01  +7.3755e-01  2.53e-01  1.37e-04  2.15e-02  1.24e-04  3.82e-04  5.80e-01  
 11  +4.8451e-01  +7.1787e-01  2.33e-01  1.17e-04  1.83e-02  7.10e-05  3.24e-04  5.16e-01  
 12  +4.8203e-01  +7.0257e-01  2.21e-01  1.01e-04  1.59e-02  6.05e-05  2.82e-04  2.93e-01  
 13  +4.7651e-01  +6.6683e-01  1.90e-01  8.46e-05  1.33e-02  3.64e-05  2.40e-04  4.45e-01  
 14  +4.4876e-01  +5.3949e-01  9.07e-02  3.42e-05  5.34e-03  6.58e-06  1.04e-04  9.42e-01  
 15  +4.3516e-01  +4.9096e-01  5.58e-02  1.99e-05  3.11e-03  4.01e-06  6.31e-05  4.18e-01  
 16  +4.1740e-01  +4.2758e-01  1.02e-02  3.44e-06  5.36e-04  1.06e-06  1.16e-05  9.33e-01  
 17  +4.1343e-01  +4.1396e-01  5.32e-04  1.79e-07  2.78e-05  6.54e-08  6.12e-07  9.75e-01  
 18  +4.1320e-01  +4.1321e-01  5.38e-06  1.81e-09  2.81e-07  6.61e-10  6.19e-09  9.90e-01  
 19  +4.1320e-01  +4.1320e-01  5.38e-08  1.81e-11  2.81e-09  6.61e-12  6.19e-11  9.90e-01  
 20  +4.1320e-01  +4.1320e-01  5.38e-10  1.81e-13  2.81e-11  6.61e-14  6.19e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 81.0019ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:41 PM: Optimal value: 4.132e-01
(CVXPY) Oct 06 04:03:41 PM: Compilation took 2.284e-02 seconds
(CVXPY) Oct 06 04:03:41 PM: Solver (including time spent in interface) took 8.993e-02 seconds
Iteration: 3, Objective: 0.4132
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:41 PM: Your problem has 2545 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:41 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:41 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:41 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:41 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:41 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:41 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:41 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:41 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:41 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:41 PM: Finished problem compilation (took 2.540e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:41 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2545
  constraints   = 5045
  nnz(P)        = 0
  nnz(A)        = 30799
  cones (total) = 1
    : Nonnegative = 1,  numel = 5045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8750e-01  +5.2630e+02  5.26e+02  4.02e-01  4.80e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3722e-01  +6.4785e+01  6.42e+01  1.51e-01  2.29e+01  1.33e-02  2.53e-01  8.75e-01  
  3  +5.0914e-01  +1.6246e+01  1.57e+01  1.03e-01  1.53e+01  3.40e-05  2.42e-01  1.95e-01  
  4  +5.0051e-01  +1.3981e+00  8.98e-01  8.70e-03  1.33e+00  8.09e-06  1.28e-01  8.08e-01  
  5  +5.0010e-01  +8.4006e-01  3.40e-01  3.24e-03  5.00e-01  6.51e-06  4.48e-02  8.02e-01  
  6  +4.9794e-01  +1.1229e+00  6.25e-01  1.45e-03  2.28e-01  9.50e-05  4.20e-03  9.90e-01  
  7  +4.8847e-01  +9.7504e-01  4.87e-01  3.04e-04  4.79e-02  3.17e-04  8.37e-04  8.03e-01  
  8  +4.8604e-01  +8.4078e-01  3.55e-01  1.92e-04  3.03e-02  1.54e-04  5.29e-04  6.24e-01  
  9  +4.8625e-01  +8.1850e-01  3.32e-01  1.87e-04  2.95e-02  1.20e-04  5.16e-04  1.51e-01  
 10  +4.7320e-01  +7.3015e-01  2.57e-01  1.11e-04  1.74e-02  1.00e-04  3.13e-04  4.82e-01  
 11  +4.4099e-01  +5.4071e-01  9.97e-02  3.83e-05  5.98e-03  1.02e-06  1.19e-04  8.89e-01  
 12  +4.2965e-01  +4.9830e-01  6.87e-02  2.55e-05  3.98e-03  4.49e-06  8.25e-05  6.16e-01  
 13  +4.2090e-01  +4.6610e-01  4.52e-02  1.64e-05  2.55e-03  3.72e-06  5.44e-05  5.08e-01  
 14  +4.1764e-01  +4.5419e-01  3.66e-02  1.31e-05  2.04e-03  3.24e-06  4.40e-05  2.86e-01  
 15  +4.1081e-01  +4.2935e-01  1.85e-02  6.52e-06  1.01e-03  1.87e-06  2.24e-05  6.18e-01  
 16  +4.0690e-01  +4.1498e-01  8.08e-03  2.81e-06  4.38e-04  1.10e-06  9.83e-06  9.90e-01  
 17  +4.0368e-01  +4.0409e-01  4.17e-04  1.45e-07  2.26e-05  5.57e-08  5.17e-07  9.65e-01  
 18  +4.0350e-01  +4.0351e-01  4.34e-06  1.51e-09  2.35e-07  5.79e-10  5.39e-09  9.90e-01  
 19  +4.0350e-01  +4.0350e-01  4.34e-08  1.51e-11  2.35e-09  5.79e-12  5.39e-11  9.90e-01  
 20  +4.0350e-01  +4.0350e-01  4.34e-10  1.51e-13  2.35e-11  5.79e-14  5.39e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.8326ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:42 PM: Optimal value: 4.035e-01
(CVXPY) Oct 06 04:03:42 PM: Compilation took 2.540e-02 seconds
(CVXPY) Oct 06 04:03:42 PM: Solver (including time spent in interface) took 8.460e-02 seconds
Iteration: 4, Objective: 0.4035
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:42 PM: Your problem has 2553 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:42 PM: Finished problem compilation (took 1.992e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2553
  constraints   = 5053
  nnz(P)        = 0
  nnz(A)        = 31367
  cones (total) = 1
    : Nonnegative = 1,  numel = 5053

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8738e-01  +5.2631e+02  5.26e+02  4.03e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3708e-01  +6.4631e+01  6.41e+01  1.51e-01  2.28e+01  1.33e-02  2.52e-01  8.76e-01  
  3  +5.0909e-01  +1.6194e+01  1.57e+01  1.03e-01  1.52e+01  3.41e-05  2.41e-01  1.97e-01  
  4  +5.0053e-01  +1.4354e+00  9.35e-01  9.07e-03  1.39e+00  8.23e-06  1.29e-01  7.94e-01  
  5  +5.0019e-01  +9.9231e-01  4.92e-01  4.70e-03  7.24e-01  7.56e-06  6.02e-02  6.76e-01  
  6  +4.9921e-01  +1.0229e+00  5.24e-01  2.28e-03  3.58e-01  4.39e-05  7.29e-03  9.88e-01  
  7  +4.9154e-01  +9.2518e-01  4.34e-01  3.30e-04  5.22e-02  2.61e-04  9.12e-04  8.76e-01  
  8  +4.8711e-01  +8.8206e-01  3.95e-01  2.25e-04  3.55e-02  2.74e-04  6.15e-04  4.19e-01  
  9  +4.8561e-01  +8.0277e-01  3.17e-01  1.58e-04  2.50e-02  8.54e-05  4.33e-04  7.77e-01  
 10  +4.6763e-01  +6.9214e-01  2.25e-01  9.48e-05  1.49e-02  5.10e-05  2.70e-04  5.35e-01  
 11  +4.5562e-01  +6.3196e-01  1.76e-01  7.44e-05  1.16e-02  2.72e-05  2.21e-04  4.72e-01  
 12  +4.3233e-01  +5.3148e-01  9.92e-02  3.86e-05  6.02e-03  1.24e-05  1.24e-04  5.40e-01  
 13  +4.1272e-01  +4.5341e-01  4.07e-02  1.51e-05  2.35e-03  4.51e-06  5.18e-05  6.16e-01  
 14  +4.0899e-01  +4.3920e-01  3.02e-02  1.11e-05  1.72e-03  3.38e-06  3.84e-05  2.96e-01  
 15  +4.0721e-01  +4.3216e-01  2.49e-02  9.03e-06  1.40e-03  2.89e-06  3.15e-05  3.34e-01  
 16  +4.0109e-01  +4.0892e-01  7.83e-03  2.79e-06  4.34e-04  1.02e-06  1.00e-05  9.90e-01  
 17  +3.9805e-01  +3.9842e-01  3.68e-04  1.31e-07  2.04e-05  4.70e-08  4.80e-07  9.69e-01  
 18  +3.9790e-01  +3.9791e-01  3.74e-06  1.33e-09  2.07e-07  4.77e-10  4.88e-09  9.90e-01  
 19  +3.9790e-01  +3.9790e-01  3.74e-08  1.34e-11  2.07e-09  4.77e-12  4.88e-11  9.90e-01  
 20  +3.9790e-01  +3.9790e-01  3.74e-10  1.34e-13  2.07e-11  4.77e-14  4.88e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 80.8735ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:42 PM: Optimal value: 3.979e-01
(CVXPY) Oct 06 04:03:42 PM: Compilation took 1.992e-02 seconds
(CVXPY) Oct 06 04:03:42 PM: Solver (including time spent in interface) took 9.019e-02 seconds
Iteration: 5, Objective: 0.3979
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:42 PM: Your problem has 2556 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:42 PM: Finished problem compilation (took 2.482e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2556
  constraints   = 5056
  nnz(P)        = 0
  nnz(A)        = 31587
  cones (total) = 1
    : Nonnegative = 1,  numel = 5056

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8728e-01  +5.2637e+02  5.26e+02  4.03e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3695e-01  +6.4497e+01  6.40e+01  1.51e-01  2.27e+01  1.34e-02  2.52e-01  8.78e-01  
  3  +5.0905e-01  +1.6155e+01  1.56e+01  1.03e-01  1.52e+01  3.42e-05  2.41e-01  2.00e-01  
  4  +5.0055e-01  +1.4792e+00  9.79e-01  9.50e-03  1.45e+00  8.36e-06  1.31e-01  7.77e-01  
  5  +5.0017e-01  +9.7013e-01  4.70e-01  4.50e-03  6.93e-01  7.27e-06  5.73e-02  6.31e-01  
  6  +4.9784e-01  +1.2696e+00  7.72e-01  1.79e-03  2.82e-01  9.54e-05  5.16e-03  9.90e-01  
  7  +4.8874e-01  +1.0725e+00  5.84e-01  4.20e-04  6.63e-02  2.65e-04  1.17e-03  7.76e-01  
  8  +4.8340e-01  +1.0306e+00  5.47e-01  2.98e-04  4.71e-02  3.00e-04  8.24e-04  3.24e-01  
  9  +4.8779e-01  +9.0719e-01  4.19e-01  2.48e-04  3.91e-02  6.97e-05  6.76e-04  6.16e-01  
 10  +4.7123e-01  +7.7292e-01  3.02e-01  1.28e-04  2.01e-02  6.00e-05  3.59e-04  5.62e-01  
 11  +4.6623e-01  +7.4349e-01  2.77e-01  1.14e-04  1.80e-02  5.34e-05  3.26e-04  1.33e-01  
 12  +4.6049e-01  +6.9839e-01  2.38e-01  1.05e-04  1.64e-02  3.60e-05  3.24e-04  1.15e-01  
 13  +4.5213e-01  +6.4682e-01  1.95e-01  8.53e-05  1.33e-02  2.76e-05  2.69e-04  2.36e-01  
 14  +4.4402e-01  +6.0236e-01  1.58e-01  6.78e-05  1.06e-02  2.13e-05  2.16e-04  3.21e-01  
 15  +4.2656e-01  +5.2441e-01  9.78e-02  3.75e-05  5.84e-03  1.25e-05  1.22e-04  7.74e-01  
 16  +4.1857e-01  +4.8887e-01  7.03e-02  2.65e-05  4.12e-03  8.92e-06  8.87e-05  4.91e-01  
 17  +4.0664e-01  +4.3971e-01  3.31e-02  1.22e-05  1.90e-03  4.11e-06  4.30e-05  6.02e-01  
 18  +4.0344e-01  +4.2651e-01  2.31e-02  8.41e-06  1.31e-03  2.92e-06  2.99e-05  4.90e-01  
 19  +3.9844e-01  +4.0657e-01  8.13e-03  2.95e-06  4.58e-04  1.04e-06  1.07e-05  9.90e-01  
 20  +3.9554e-01  +3.9637e-01  8.31e-04  3.01e-07  4.67e-05  1.07e-07  1.12e-06  9.18e-01  
 21  +3.9520e-01  +3.9521e-01  8.66e-06  3.14e-09  4.87e-07  1.11e-09  1.17e-08  9.90e-01  
 22  +3.9520e-01  +3.9520e-01  8.66e-08  3.14e-11  4.87e-09  1.11e-11  1.17e-10  9.90e-01  
 23  +3.9520e-01  +3.9520e-01  8.66e-10  3.14e-13  4.87e-11  1.11e-13  1.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 93.3797ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:42 PM: Optimal value: 3.952e-01
(CVXPY) Oct 06 04:03:42 PM: Compilation took 2.482e-02 seconds
(CVXPY) Oct 06 04:03:42 PM: Solver (including time spent in interface) took 1.003e-01 seconds
Iteration: 6, Objective: 0.3952
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:42 PM: Your problem has 2557 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:42 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:42 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:42 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:42 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:42 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:42 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:42 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:42 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:42 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:42 PM: Finished problem compilation (took 2.745e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2557
  constraints   = 5057
  nnz(P)        = 0
  nnz(A)        = 31667
  cones (total) = 1
    : Nonnegative = 1,  numel = 5057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0008e-01  +2.5012e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8727e-01  +5.2639e+02  5.26e+02  4.03e-01  4.79e+01  3.86e-03  5.47e-01  6.10e-01  
  2  +5.3693e-01  +6.4482e+01  6.39e+01  1.51e-01  2.27e+01  1.34e-02  2.52e-01  8.78e-01  
  3  +5.0905e-01  +1.6152e+01  1.56e+01  1.03e-01  1.52e+01  3.42e-05  2.41e-01  2.00e-01  
  4  +5.0055e-01  +1.4822e+00  9.82e-01  9.53e-03  1.46e+00  8.37e-06  1.31e-01  7.76e-01  
  5  +5.0017e-01  +9.7222e-01  4.72e-01  4.52e-03  6.96e-01  7.23e-06  5.78e-02  6.21e-01  
  6  +4.9842e-01  +1.3181e+00  8.20e-01  2.28e-03  3.59e-01  7.68e-05  6.69e-03  9.90e-01  
  7  +4.9028e-01  +1.1256e+00  6.35e-01  4.89e-04  7.72e-02  2.47e-04  1.35e-03  7.98e-01  
  8  +4.8378e-01  +1.0461e+00  5.62e-01  3.17e-04  5.00e-02  2.69e-04  8.77e-04  3.90e-01  
  9  +4.8882e-01  +9.3639e-01  4.48e-01  2.83e-04  4.47e-02  8.60e-05  7.73e-04  5.02e-01  
 10  +4.7756e-01  +8.4243e-01  3.65e-01  1.70e-04  2.67e-02  8.54e-05  4.72e-04  4.42e-01  
 11  +4.6408e-01  +7.3230e-01  2.68e-01  1.17e-04  1.83e-02  4.93e-05  3.37e-04  4.38e-01  
 12  +4.5956e-01  +6.9333e-01  2.34e-01  1.08e-04  1.69e-02  3.53e-05  3.37e-04  6.51e-02  
 13  +4.5154e-01  +6.4292e-01  1.91e-01  8.66e-05  1.35e-02  2.71e-05  2.76e-04  2.33e-01  
 14  +4.4508e-01  +6.0583e-01  1.61e-01  7.09e-05  1.11e-02  2.13e-05  2.26e-04  3.40e-01  
 15  +4.2768e-01  +5.2702e-01  9.93e-02  3.87e-05  6.02e-03  1.20e-05  1.26e-04  7.92e-01  
 16  +4.1647e-01  +4.7834e-01  6.19e-02  2.33e-05  3.63e-03  7.50e-06  7.88e-05  6.71e-01  
 17  +4.0266e-01  +4.2263e-01  2.00e-02  7.32e-06  1.14e-03  2.47e-06  2.61e-05  8.61e-01  
 18  +4.0177e-01  +4.1935e-01  1.76e-02  6.41e-06  9.96e-04  2.18e-06  2.30e-05  1.97e-01  
 19  +3.9723e-01  +4.0228e-01  5.05e-03  1.83e-06  2.84e-04  6.38e-07  6.71e-06  9.90e-01  
 20  +3.9525e-01  +3.9537e-01  1.24e-04  4.48e-08  6.95e-06  1.53e-08  1.66e-07  9.82e-01  
 21  +3.9520e-01  +3.9520e-01  1.24e-06  4.48e-10  6.95e-08  1.53e-10  1.66e-09  9.90e-01  
 22  +3.9520e-01  +3.9520e-01  1.24e-08  4.48e-12  6.95e-10  1.53e-12  1.66e-11  9.90e-01  
 23  +3.9520e-01  +3.9520e-01  1.24e-10  4.47e-14  6.95e-12  1.53e-14  1.66e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 92.1465ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:42 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:42 PM: Optimal value: 3.952e-01
(CVXPY) Oct 06 04:03:42 PM: Compilation took 2.745e-02 seconds
(CVXPY) Oct 06 04:03:42 PM: Solver (including time spent in interface) took 1.012e-01 seconds
Iteration: 7, Objective: 0.3952
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:43 PM: Your problem has 2562 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:43 PM: Finished problem compilation (took 2.463e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2562
  constraints   = 5062
  nnz(P)        = 0
  nnz(A)        = 31827
  cones (total) = 1
    : Nonnegative = 1,  numel = 5062

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.72e+01  1.00e+00  1.00e+00   ------   
  1  +5.8702e-01  +5.2669e+02  5.26e+02  4.03e-01  4.79e+01  3.86e-03  5.48e-01  6.10e-01  
  2  +5.3682e-01  +6.4405e+01  6.39e+01  1.51e-01  2.27e+01  1.34e-02  2.52e-01  8.80e-01  
  3  +5.0904e-01  +1.6148e+01  1.56e+01  1.03e-01  1.52e+01  3.44e-05  2.41e-01  2.02e-01  
  4  +5.0055e-01  +1.4806e+00  9.80e-01  9.52e-03  1.45e+00  8.38e-06  1.30e-01  7.79e-01  
  5  +5.0020e-01  +1.0105e+00  5.10e-01  4.90e-03  7.53e-01  7.36e-06  6.21e-02  5.64e-01  
  6  +4.9927e-01  +1.3507e+00  8.51e-01  3.39e-03  5.32e-01  4.95e-05  1.04e-02  9.90e-01  
  7  +4.9200e-01  +1.1351e+00  6.43e-01  5.19e-04  8.21e-02  2.26e-04  1.43e-03  8.66e-01  
  8  +4.8665e-01  +9.4835e-01  4.62e-01  2.67e-04  4.21e-02  1.55e-04  7.31e-04  6.90e-01  
  9  +4.8818e-01  +8.8236e-01  3.94e-01  2.36e-04  3.73e-02  7.41e-05  6.47e-04  4.94e-01  
 10  +4.7770e-01  +7.9527e-01  3.18e-01  1.54e-04  2.43e-02  6.01e-05  4.31e-04  4.82e-01  
 11  +4.6798e-01  +7.3460e-01  2.67e-01  1.21e-04  1.90e-02  4.36e-05  3.47e-04  3.57e-01  
 12  +4.5689e-01  +6.6606e-01  2.09e-01  9.41e-05  1.47e-02  2.41e-05  2.80e-04  5.50e-01  
 13  +4.4030e-01  +5.8597e-01  1.46e-01  6.13e-05  9.56e-03  1.51e-05  1.92e-04  4.62e-01  
 14  +4.1882e-01  +4.8965e-01  7.08e-02  2.76e-05  4.30e-03  6.96e-06  9.31e-05  8.13e-01  
 15  +4.1145e-01  +4.5897e-01  4.75e-02  1.80e-05  2.79e-03  5.36e-06  6.22e-05  6.90e-01  
 16  +4.0764e-01  +4.4399e-01  3.63e-02  1.36e-05  2.11e-03  4.22e-06  4.78e-05  3.84e-01  
 17  +4.0325e-01  +4.2698e-01  2.37e-02  8.80e-06  1.37e-03  2.82e-06  3.16e-05  4.75e-01  
 18  +3.9816e-01  +4.0724e-01  9.08e-03  3.35e-06  5.19e-04  1.15e-06  1.23e-05  9.90e-01  
 19  +3.9472e-01  +3.9503e-01  3.04e-04  1.12e-07  1.74e-05  3.63e-08  4.23e-07  9.89e-01  
 20  +3.9460e-01  +3.9460e-01  3.10e-06  1.14e-09  1.77e-07  3.70e-10  4.31e-09  9.90e-01  
 21  +3.9460e-01  +3.9460e-01  3.10e-08  1.14e-11  1.77e-09  3.70e-12  4.31e-11  9.90e-01  
 22  +3.9460e-01  +3.9460e-01  3.10e-10  1.14e-13  1.77e-11  3.70e-14  4.31e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 89.3164ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:43 PM: Optimal value: 3.946e-01
(CVXPY) Oct 06 04:03:43 PM: Compilation took 2.463e-02 seconds
(CVXPY) Oct 06 04:03:43 PM: Solver (including time spent in interface) took 9.529e-02 seconds
Iteration: 8, Objective: 0.3946
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:43 PM: Your problem has 2567 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:43 PM: Finished problem compilation (took 2.514e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2567
  constraints   = 5067
  nnz(P)        = 0
  nnz(A)        = 32030
  cones (total) = 1
    : Nonnegative = 1,  numel = 5067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5012e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8689e-01  +5.2681e+02  5.26e+02  4.04e-01  4.79e+01  3.86e-03  5.48e-01  6.10e-01  
  2  +5.3672e-01  +6.4320e+01  6.38e+01  1.51e-01  2.26e+01  1.34e-02  2.52e-01  8.81e-01  
  3  +5.0902e-01  +1.6129e+01  1.56e+01  1.02e-01  1.51e+01  3.45e-05  2.40e-01  2.04e-01  
  4  +5.0054e-01  +1.4684e+00  9.68e-01  9.41e-03  1.44e+00  8.39e-06  1.28e-01  7.87e-01  
  5  +5.0018e-01  +9.9863e-01  4.98e-01  4.77e-03  7.34e-01  7.97e-06  5.60e-02  6.34e-01  
  6  +4.9847e-01  +1.4152e+00  9.17e-01  2.52e-03  3.97e-01  7.97e-05  7.32e-03  9.90e-01  
  7  +4.8978e-01  +1.1734e+00  6.84e-01  4.91e-04  7.75e-02  2.65e-04  1.35e-03  8.23e-01  
  8  +4.8479e-01  +1.0371e+00  5.52e-01  2.98e-04  4.70e-02  2.30e-04  8.16e-04  5.28e-01  
  9  +4.8286e-01  +9.0889e-01  4.26e-01  2.34e-04  3.70e-02  8.95e-05  6.48e-04  5.25e-01  
 10  +4.7685e-01  +7.5660e-01  2.80e-01  1.63e-04  2.57e-02  2.82e-06  4.66e-04  9.90e-01  
 11  +4.6115e-01  +6.8300e-01  2.22e-01  1.06e-04  1.66e-02  1.33e-05  3.13e-04  7.16e-01  
 12  +4.4579e-01  +6.1095e-01  1.65e-01  7.30e-05  1.14e-02  1.04e-05  2.26e-04  3.70e-01  
 13  +4.3445e-01  +5.6170e-01  1.27e-01  5.38e-05  8.39e-03  8.28e-06  1.73e-04  3.08e-01  
 14  +4.1949e-01  +4.9835e-01  7.89e-02  3.18e-05  4.94e-03  5.33e-06  1.08e-04  4.53e-01  
 15  +4.1323e-01  +4.7247e-01  5.92e-02  2.33e-05  3.61e-03  4.61e-06  8.06e-05  4.05e-01  
 16  +4.0674e-01  +4.4615e-01  3.94e-02  1.51e-05  2.35e-03  3.37e-06  5.39e-05  4.54e-01  
 17  +4.0107e-01  +4.2354e-01  2.25e-02  8.49e-06  1.32e-03  2.13e-06  3.10e-05  5.80e-01  
 18  +3.9688e-01  +4.0672e-01  9.84e-03  3.69e-06  5.72e-04  1.17e-06  1.38e-05  9.90e-01  
 19  +3.9418e-01  +3.9692e-01  2.74e-03  1.03e-06  1.59e-04  3.27e-07  3.90e-06  7.67e-01  
 20  +3.9314e-01  +3.9325e-01  1.10e-04  4.11e-08  6.37e-06  1.24e-08  1.57e-07  9.90e-01  
 21  +3.9310e-01  +3.9310e-01  1.10e-06  4.13e-10  6.41e-08  1.25e-10  1.58e-09  9.90e-01  
 22  +3.9310e-01  +3.9310e-01  1.10e-08  4.13e-12  6.41e-10  1.25e-12  1.58e-11  9.90e-01  
 23  +3.9310e-01  +3.9310e-01  1.10e-10  4.13e-14  6.41e-12  1.25e-14  1.59e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 94.8599ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:43 PM: Optimal value: 3.931e-01
(CVXPY) Oct 06 04:03:43 PM: Compilation took 2.514e-02 seconds
(CVXPY) Oct 06 04:03:43 PM: Solver (including time spent in interface) took 9.689e-02 seconds
Iteration: 9, Objective: 0.3931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:43 PM: Your problem has 2573 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:43 PM: Finished problem compilation (took 2.538e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2573
  constraints   = 5073
  nnz(P)        = 0
  nnz(A)        = 32239
  cones (total) = 1
    : Nonnegative = 1,  numel = 5073

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8677e-01  +5.2697e+02  5.26e+02  4.04e-01  4.79e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3668e-01  +6.4294e+01  6.38e+01  1.51e-01  2.26e+01  1.35e-02  2.52e-01  8.82e-01  
  3  +5.0901e-01  +1.6128e+01  1.56e+01  1.02e-01  1.51e+01  3.45e-05  2.40e-01  2.05e-01  
  4  +5.0054e-01  +1.4659e+00  9.65e-01  9.39e-03  1.43e+00  8.39e-06  1.28e-01  7.89e-01  
  5  +5.0015e-01  +9.6687e-01  4.67e-01  4.46e-03  6.87e-01  8.05e-06  5.12e-02  6.74e-01  
  6  +4.9710e-01  +1.4131e+00  9.16e-01  1.69e-03  2.67e-01  1.28e-04  4.79e-03  9.82e-01  
  7  +4.8768e-01  +1.1072e+00  6.20e-01  4.18e-04  6.60e-02  2.66e-04  1.16e-03  7.90e-01  
  8  +4.8687e-01  +9.9037e-01  5.03e-01  3.19e-04  5.03e-02  1.65e-04  8.78e-04  4.44e-01  
  9  +4.7805e-01  +8.8408e-01  4.06e-01  2.05e-04  3.23e-02  1.35e-04  5.74e-04  4.62e-01  
 10  +4.7563e-01  +8.0581e-01  3.30e-01  1.83e-04  2.88e-02  4.91e-05  5.21e-04  4.91e-01  
 11  +4.6223e-01  +7.1493e-01  2.53e-01  1.20e-04  1.88e-02  3.02e-05  3.53e-04  6.21e-01  
 12  +4.5257e-01  +6.5945e-01  2.07e-01  9.41e-05  1.47e-02  2.20e-05  2.86e-04  4.31e-01  
 13  +4.3759e-01  +5.8445e-01  1.47e-01  6.29e-05  9.80e-03  1.44e-05  2.00e-04  4.95e-01  
 14  +4.1460e-01  +4.7790e-01  6.33e-02  2.51e-05  3.90e-03  6.00e-06  8.66e-05  8.82e-01  
 15  +4.1046e-01  +4.6130e-01  5.08e-02  1.98e-05  3.07e-03  4.96e-06  6.93e-05  2.73e-01  
 16  +4.0679e-01  +4.4629e-01  3.95e-02  1.51e-05  2.35e-03  4.06e-06  5.37e-05  3.77e-01  
 17  +4.0091e-01  +4.2286e-01  2.19e-02  8.29e-06  1.28e-03  2.40e-06  3.03e-05  6.26e-01  
 18  +3.9713e-01  +4.0757e-01  1.04e-02  3.91e-06  6.06e-04  1.27e-06  1.45e-05  9.90e-01  
 19  +3.9331e-01  +3.9384e-01  5.31e-04  1.99e-07  3.08e-05  6.20e-08  7.61e-07  9.71e-01  
 20  +3.9310e-01  +3.9311e-01  5.41e-06  2.02e-09  3.14e-07  6.31e-10  7.76e-09  9.90e-01  
 21  +3.9310e-01  +3.9310e-01  5.41e-08  2.03e-11  3.14e-09  6.31e-12  7.76e-11  9.90e-01  
 22  +3.9310e-01  +3.9310e-01  5.41e-10  2.02e-13  3.14e-11  6.31e-14  7.76e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 90.8828ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:43 PM: Optimal value: 3.931e-01
(CVXPY) Oct 06 04:03:43 PM: Compilation took 2.538e-02 seconds
(CVXPY) Oct 06 04:03:43 PM: Solver (including time spent in interface) took 9.987e-02 seconds
Iteration: 10, Objective: 0.3931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:43 PM: Your problem has 2574 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:43 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:43 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:43 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:43 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:43 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:43 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:43 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:43 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:43 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:43 PM: Finished problem compilation (took 2.534e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:43 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2574
  constraints   = 5074
  nnz(P)        = 0
  nnz(A)        = 32288
  cones (total) = 1
    : Nonnegative = 1,  numel = 5074

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0007e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8678e-01  +5.2695e+02  5.26e+02  4.04e-01  4.78e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3666e-01  +6.4273e+01  6.37e+01  1.51e-01  2.26e+01  1.35e-02  2.52e-01  8.82e-01  
  3  +5.0901e-01  +1.6123e+01  1.56e+01  1.02e-01  1.51e+01  3.45e-05  2.40e-01  2.05e-01  
  4  +5.0054e-01  +1.4638e+00  9.63e-01  9.37e-03  1.43e+00  8.38e-06  1.28e-01  7.90e-01  
  5  +5.0015e-01  +9.5889e-01  4.59e-01  4.38e-03  6.75e-01  8.09e-06  4.99e-02  6.86e-01  
  6  +4.9798e-01  +1.4696e+00  9.72e-01  2.24e-03  3.52e-01  9.88e-05  6.40e-03  9.90e-01  
  7  +4.8937e-01  +1.1956e+00  7.06e-01  5.13e-04  8.10e-02  2.58e-04  1.42e-03  7.91e-01  
  8  +4.8501e-01  +1.0378e+00  5.53e-01  2.99e-04  4.72e-02  2.11e-04  8.20e-04  5.80e-01  
  9  +4.8351e-01  +9.1269e-01  4.29e-01  2.39e-04  3.77e-02  8.29e-05  6.61e-04  5.19e-01  
 10  +4.7606e-01  +7.5448e-01  2.78e-01  1.58e-04  2.48e-02  6.96e-06  4.51e-04  9.90e-01  
 11  +4.6469e-01  +7.0033e-01  2.36e-01  1.18e-04  1.85e-02  1.24e-05  3.48e-04  5.29e-01  
 12  +4.5078e-01  +6.3441e-01  1.84e-01  8.42e-05  1.32e-02  1.00e-05  2.58e-04  3.02e-01  
 13  +4.3755e-01  +5.7598e-01  1.38e-01  5.98e-05  9.31e-03  8.48e-06  1.91e-04  3.86e-01  
 14  +4.1535e-01  +4.8070e-01  6.53e-02  2.60e-05  4.04e-03  5.16e-06  8.96e-05  7.54e-01  
 15  +4.1049e-01  +4.6078e-01  5.03e-02  1.95e-05  3.03e-03  4.69e-06  6.85e-05  4.98e-01  
 16  +4.0542e-01  +4.4070e-01  3.53e-02  1.35e-05  2.10e-03  3.45e-06  4.85e-05  4.06e-01  
 17  +4.0181e-01  +4.2621e-01  2.44e-02  9.25e-06  1.43e-03  2.58e-06  3.37e-05  5.22e-01  
 18  +3.9744e-01  +4.0884e-01  1.14e-02  4.29e-06  6.66e-04  1.38e-06  1.60e-05  9.90e-01  
 19  +3.9332e-01  +3.9389e-01  5.69e-04  2.14e-07  3.32e-05  6.53e-08  8.23e-07  9.76e-01  
 20  +3.9310e-01  +3.9311e-01  5.78e-06  2.18e-09  3.38e-07  6.64e-10  8.38e-09  9.90e-01  
 21  +3.9310e-01  +3.9310e-01  5.79e-08  2.18e-11  3.38e-09  6.64e-12  8.38e-11  9.90e-01  
 22  +3.9310e-01  +3.9310e-01  5.79e-10  2.18e-13  3.38e-11  6.64e-14  8.38e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 90.198ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:44 PM: Optimal value: 3.931e-01
(CVXPY) Oct 06 04:03:44 PM: Compilation took 2.534e-02 seconds
(CVXPY) Oct 06 04:03:44 PM: Solver (including time spent in interface) took 1.000e-01 seconds
Iteration: 11, Objective: 0.3931
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:44 PM: Your problem has 2575 variables, 2500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:44 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:44 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:44 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:44 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:44 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:44 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:44 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:44 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:44 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:44 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:44 PM: Finished problem compilation (took 2.506e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:44 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 2575
  constraints   = 5075
  nnz(P)        = 0
  nnz(A)        = 32310
  cones (total) = 1
    : Nonnegative = 1,  numel = 5075

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +5.0006e-01  +2.5011e+03  2.50e+03  9.79e-01  7.71e+01  1.00e+00  1.00e+00   ------   
  1  +5.8679e-01  +5.2693e+02  5.26e+02  4.04e-01  4.78e+01  3.86e-03  5.48e-01  6.09e-01  
  2  +5.3666e-01  +6.4269e+01  6.37e+01  1.50e-01  2.26e+01  1.35e-02  2.52e-01  8.82e-01  
  3  +5.0901e-01  +1.6121e+01  1.56e+01  1.02e-01  1.51e+01  3.45e-05  2.40e-01  2.05e-01  
  4  +5.0054e-01  +1.4619e+00  9.61e-01  9.35e-03  1.43e+00  8.38e-06  1.27e-01  7.91e-01  
  5  +5.0015e-01  +9.6389e-01  4.64e-01  4.43e-03  6.82e-01  8.11e-06  5.04e-02  6.82e-01  
  6  +4.9830e-01  +1.4530e+00  9.55e-01  2.44e-03  3.85e-01  8.73e-05  7.05e-03  9.90e-01  
  7  +4.8994e-01  +1.1968e+00  7.07e-01  5.24e-04  8.27e-02  2.56e-04  1.44e-03  8.05e-01  
  8  +4.8518e-01  +1.0632e+00  5.78e-01  3.15e-04  4.98e-02  2.33e-04  8.65e-04  5.28e-01  
  9  +4.8518e-01  +9.0664e-01  4.21e-01  2.48e-04  3.91e-02  5.46e-05  6.84e-04  6.18e-01  
 10  +4.7782e-01  +7.6393e-01  2.86e-01  1.62e-04  2.55e-02  1.69e-05  4.59e-04  9.90e-01  
 11  +4.6639e-01  +7.0967e-01  2.43e-01  1.22e-04  1.91e-02  1.79e-05  3.56e-04  5.62e-01  
 12  +4.5195e-01  +6.4018e-01  1.88e-01  8.60e-05  1.34e-02  1.37e-05  2.62e-04  2.95e-01  
 13  +4.3855e-01  +5.8065e-01  1.42e-01  6.13e-05  9.55e-03  1.09e-05  1.95e-04  4.15e-01  
 14  +4.1615e-01  +4.8414e-01  6.80e-02  2.71e-05  4.21e-03  5.73e-06  9.32e-05  7.45e-01  
 15  +4.1186e-01  +4.6648e-01  5.46e-02  2.13e-05  3.31e-03  5.18e-06  7.44e-05  4.33e-01  
 16  +4.0623e-01  +4.4408e-01  3.79e-02  1.46e-05  2.26e-03  3.70e-06  5.21e-05  3.85e-01  
 17  +4.0099e-01  +4.2321e-01  2.22e-02  8.44e-06  1.31e-03  2.34e-06  3.09e-05  6.02e-01  
 18  +3.9729e-01  +4.0825e-01  1.10e-02  4.13e-06  6.40e-04  1.32e-06  1.54e-05  9.90e-01  
 19  +3.9333e-01  +3.9394e-01  6.05e-04  2.28e-07  3.53e-05  7.04e-08  8.74e-07  9.66e-01  
 20  +3.9310e-01  +3.9311e-01  6.17e-06  2.33e-09  3.61e-07  7.18e-10  8.95e-09  9.90e-01  
 21  +3.9310e-01  +3.9310e-01  6.17e-08  2.33e-11  3.61e-09  7.18e-12  8.95e-11  9.90e-01  
 22  +3.9310e-01  +3.9310e-01  6.18e-10  2.33e-13  3.61e-11  7.18e-14  8.95e-13  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 91.7183ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:44 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:44 PM: Optimal value: 3.931e-01
(CVXPY) Oct 06 04:03:44 PM: Compilation took 2.506e-02 seconds
(CVXPY) Oct 06 04:03:44 PM: Solver (including time spent in interface) took 9.972e-02 seconds
FULL MODEL:
  Accruacy: 0.6006
  Our objective: 0.20119999999999993

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.156)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0)            <-- (term's our objective: 0.0088)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.0064)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 1)            <-- (term's our objective: 0.0056)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.0012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.002)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0044)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1) <-- (term's our objective: 0.0056)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x6 = 0) <-- (term's our objective: 0.0048)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 8.837929248809814
Best over terms:
  Our final objective: 0.15599999999999997
    Its accruacy: 0.578
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.15599999999999997
  Highest accruacy: 0.578
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

