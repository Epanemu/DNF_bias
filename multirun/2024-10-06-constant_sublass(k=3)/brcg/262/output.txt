Command:
python test_script.py -s constant_subclass -d 7 -n 1000 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.218
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 7.

Computed total variation: 0.39
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:00 PM: Your problem has 515 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:00 PM: Finished problem compilation (took 4.531e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 515
  constraints   = 1015
  nnz(P)        = 0
  nnz(A)        = 5015
  cones (total) = 1
    : Nonnegative = 1,  numel = 1015

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9988e-01  +5.0101e+02  5.01e+02  9.54e-01  3.26e+01  1.00e+00  1.00e+00   ------   
  1  +5.8768e-01  +1.0549e+02  1.05e+02  3.89e-01  2.01e+01  3.86e-03  5.46e-01  6.11e-01  
  2  +5.3626e-01  +1.3149e+01  1.26e+01  1.33e-01  8.67e+00  1.33e-02  2.47e-01  8.86e-01  
  3  +5.0492e-01  +2.8328e+00  2.33e+00  4.76e-02  2.99e+00  2.75e-05  2.22e-01  4.04e-01  
  4  +5.0058e-01  +8.6695e-01  3.66e-01  7.92e-03  5.18e-01  9.67e-06  6.82e-02  7.63e-01  
  5  +4.9166e-01  +1.0528e+00  5.61e-01  2.54e-03  1.72e-01  1.13e-04  7.21e-03  9.52e-01  
  6  +4.7319e-01  +7.6275e-01  2.90e-01  8.21e-04  5.53e-02  9.34e-05  2.42e-03  7.07e-01  
  7  +4.5730e-01  +6.2525e-01  1.68e-01  4.43e-04  2.96e-02  5.44e-05  1.41e-03  4.82e-01  
  8  +4.4371e-01  +5.2383e-01  8.01e-02  2.04e-04  1.36e-02  2.72e-05  7.01e-04  6.35e-01  
  9  +4.3432e-01  +4.5744e-01  2.31e-02  5.82e-05  3.86e-03  1.07e-05  2.13e-04  9.90e-01  
 10  +4.2925e-01  +4.3249e-01  3.24e-03  7.72e-06  5.12e-04  1.48e-06  3.07e-05  8.71e-01  
 11  +4.2815e-01  +4.2834e-01  1.81e-04  3.83e-07  2.54e-05  8.10e-08  1.72e-06  9.69e-01  
 12  +4.2810e-01  +4.2810e-01  1.82e-06  3.83e-09  2.54e-07  8.12e-10  1.72e-08  9.90e-01  
 13  +4.2810e-01  +4.2810e-01  1.82e-08  3.83e-11  2.54e-09  8.12e-12  1.72e-10  9.90e-01  
 14  +4.2810e-01  +4.2810e-01  1.82e-10  3.83e-13  2.54e-11  8.17e-14  1.73e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.2261ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:00 PM: Optimal value: 4.281e-01
(CVXPY) Oct 06 04:03:00 PM: Compilation took 4.531e-02 seconds
(CVXPY) Oct 06 04:03:00 PM: Solver (including time spent in interface) took 1.605e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4281
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:00 PM: Your problem has 525 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:00 PM: Finished problem compilation (took 9.905e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 525
  constraints   = 1025
  nnz(P)        = 0
  nnz(A)        = 6270
  cones (total) = 1
    : Nonnegative = 1,  numel = 1025

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9962e-01  +5.0122e+02  5.01e+02  9.55e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.8628e-01  +1.0584e+02  1.05e+02  3.93e-01  2.13e+01  3.85e-03  5.55e-01  6.08e-01  
  2  +5.3421e-01  +1.2768e+01  1.22e+01  1.31e-01  8.97e+00  1.39e-02  2.46e-01  9.08e-01  
  3  +5.0389e-01  +2.6247e+00  2.12e+00  4.41e-02  2.94e+00  2.83e-05  2.10e-01  5.27e-01  
  4  +5.0086e-01  +1.1529e+00  6.52e-01  1.40e-02  9.64e-01  1.27e-05  8.71e-02  6.10e-01  
  5  +4.9430e-01  +9.0564e-01  4.11e-01  3.29e-03  2.39e-01  5.62e-05  9.25e-03  9.59e-01  
  6  +4.7799e-01  +7.7423e-01  2.96e-01  1.01e-03  7.38e-02  1.05e-04  2.75e-03  7.20e-01  
  7  +4.7311e-01  +7.7406e-01  3.01e-01  7.94e-04  5.78e-02  1.33e-04  2.13e-03  3.96e-01  
  8  +4.6262e-01  +7.3058e-01  2.68e-01  5.94e-04  4.32e-02  1.34e-04  1.62e-03  3.69e-01  
  9  +4.3582e-01  +6.0298e-01  1.67e-01  3.42e-04  2.49e-02  7.94e-05  9.78e-04  6.59e-01  
 10  +4.1786e-01  +5.3018e-01  1.12e-01  2.16e-04  1.58e-02  5.54e-05  6.30e-04  5.14e-01  
 11  +3.8792e-01  +4.1220e-01  2.43e-02  4.30e-05  3.15e-03  1.34e-05  1.33e-04  9.41e-01  
 12  +3.8044e-01  +3.8599e-01  5.55e-03  9.62e-06  7.13e-04  3.36e-06  3.04e-05  8.32e-01  
 13  +3.7832e-01  +3.7848e-01  1.62e-04  2.81e-07  2.08e-05  9.17e-08  8.96e-07  9.71e-01  
 14  +3.7825e-01  +3.7825e-01  3.03e-06  5.28e-09  3.89e-07  1.60e-09  1.70e-08  9.83e-01  
 15  +3.7825e-01  +3.7825e-01  3.03e-08  5.28e-11  3.89e-09  1.60e-11  1.70e-10  9.90e-01  
 16  +3.7825e-01  +3.7825e-01  3.03e-10  5.28e-13  3.89e-11  1.60e-13  1.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.9307ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:00 PM: Optimal value: 3.783e-01
(CVXPY) Oct 06 04:03:00 PM: Compilation took 9.905e-03 seconds
(CVXPY) Oct 06 04:03:00 PM: Solver (including time spent in interface) took 9.927e-03 seconds
Iteration: 2, Objective: 0.3783
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:00 PM: Your problem has 535 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:00 PM: Finished problem compilation (took 9.880e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 535
  constraints   = 1035
  nnz(P)        = 0
  nnz(A)        = 6535
  cones (total) = 1
    : Nonnegative = 1,  numel = 1035

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9941e-01  +5.0171e+02  5.01e+02  9.55e-01  3.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.8391e-01  +1.0606e+02  1.05e+02  3.95e-01  2.13e+01  3.85e-03  5.57e-01  6.08e-01  
  2  +5.3243e-01  +1.2409e+01  1.19e+01  1.27e-01  8.67e+00  1.42e-02  2.39e-01  9.29e-01  
  3  +5.0302e-01  +2.4614e+00  1.96e+00  4.08e-02  2.73e+00  2.92e-05  1.92e-01  6.48e-01  
  4  +4.9959e-01  +1.1693e+00  6.70e-01  1.33e-02  9.29e-01  2.34e-05  5.91e-02  7.48e-01  
  5  +4.8463e-01  +1.2710e+00  7.86e-01  4.25e-03  3.08e-01  1.24e-04  1.20e-02  8.97e-01  
  6  +4.7410e-01  +1.0606e+00  5.86e-01  2.41e-03  1.74e-01  1.34e-04  6.68e-03  6.66e-01  
  7  +4.6137e-01  +9.4771e-01  4.86e-01  1.39e-03  1.00e-01  1.53e-04  3.85e-03  4.83e-01  
  8  +4.5851e-01  +8.8578e-01  4.27e-01  1.28e-03  9.20e-02  1.38e-04  3.60e-03  3.11e-01  
  9  +4.3159e-01  +6.6801e-01  2.36e-01  5.29e-04  3.80e-02  9.95e-05  1.53e-03  6.83e-01  
 10  +4.2607e-01  +6.3732e-01  2.11e-01  4.95e-04  3.54e-02  8.52e-05  1.47e-03  1.98e-01  
 11  +4.2017e-01  +6.0481e-01  1.85e-01  4.27e-04  3.06e-02  7.93e-05  1.30e-03  4.64e-01  
 12  +4.1814e-01  +5.9449e-01  1.76e-01  3.98e-04  2.86e-02  8.31e-05  1.20e-03  3.06e-01  
 13  +3.9464e-01  +4.7909e-01  8.45e-02  1.74e-04  1.25e-02  4.05e-05  5.43e-04  6.26e-01  
 14  +3.7548e-01  +4.0383e-01  2.84e-02  5.37e-05  3.88e-03  1.45e-05  1.75e-04  7.69e-01  
 15  +3.6878e-01  +3.7723e-01  8.45e-03  1.57e-05  1.15e-03  5.49e-06  5.34e-05  9.90e-01  
 16  +3.6561e-01  +3.6610e-01  4.96e-04  9.15e-07  6.72e-05  2.98e-07  3.22e-06  9.43e-01  
 17  +3.6540e-01  +3.6541e-01  4.99e-06  9.20e-09  6.76e-07  2.97e-09  3.26e-08  9.90e-01  
 18  +3.6540e-01  +3.6540e-01  4.99e-08  9.20e-11  6.76e-09  2.97e-11  3.26e-10  9.90e-01  
 19  +3.6540e-01  +3.6540e-01  4.99e-10  9.20e-13  6.76e-11  2.97e-13  3.26e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.9863ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:00 PM: Optimal value: 3.654e-01
(CVXPY) Oct 06 04:03:00 PM: Compilation took 9.880e-03 seconds
(CVXPY) Oct 06 04:03:00 PM: Solver (including time spent in interface) took 1.497e-02 seconds
Iteration: 3, Objective: 0.3654
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:00 PM: Your problem has 545 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:00 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:00 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:00 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:00 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:00 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:00 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:00 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:00 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:00 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:00 PM: Finished problem compilation (took 1.034e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 545
  constraints   = 1045
  nnz(P)        = 0
  nnz(A)        = 6807
  cones (total) = 1
    : Nonnegative = 1,  numel = 1045

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0175e+02  5.01e+02  9.55e-01  3.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.8236e-01  +1.0614e+02  1.06e+02  3.97e-01  2.12e+01  3.85e-03  5.57e-01  6.07e-01  
  2  +5.3132e-01  +1.2178e+01  1.16e+01  1.24e-01  8.45e+00  1.44e-02  2.35e-01  9.42e-01  
  3  +5.0262e-01  +2.3823e+00  1.88e+00  3.92e-02  2.63e+00  3.03e-05  1.80e-01  7.19e-01  
  4  +4.9987e-01  +1.5396e+00  1.04e+00  2.01e-02  1.39e+00  2.99e-05  7.91e-02  6.03e-01  
  5  +4.8260e-01  +1.3664e+00  8.84e-01  4.42e-03  3.21e-01  1.39e-04  1.19e-02  9.35e-01  
  6  +4.6746e-01  +1.1066e+00  6.39e-01  2.30e-03  1.66e-01  1.45e-04  6.18e-03  5.62e-01  
  7  +4.5585e-01  +1.0101e+00  5.54e-01  1.33e-03  9.60e-02  2.09e-04  3.58e-03  6.65e-01  
  8  +4.4583e-01  +9.0773e-01  4.62e-01  1.12e-03  8.08e-02  1.78e-04  3.11e-03  3.23e-01  
  9  +4.0726e-01  +6.2850e-01  2.21e-01  4.72e-04  3.35e-02  8.17e-05  1.43e-03  6.95e-01  
 10  +3.9521e-01  +5.6236e-01  1.67e-01  3.62e-04  2.56e-02  6.51e-05  1.15e-03  3.86e-01  
 11  +3.9711e-01  +5.7148e-01  1.74e-01  3.58e-04  2.54e-02  8.45e-05  1.11e-03  3.13e-01  
 12  +3.6987e-01  +4.3743e-01  6.76e-02  1.37e-04  9.64e-03  2.99e-05  4.75e-04  6.76e-01  
 13  +3.5305e-01  +3.6258e-01  9.52e-03  1.91e-05  1.33e-03  4.60e-06  7.44e-05  9.78e-01  
 14  +3.5045e-01  +3.5279e-01  2.34e-03  4.63e-06  3.22e-04  1.14e-06  1.91e-05  7.99e-01  
 15  +3.4961e-01  +3.4964e-01  2.84e-05  5.62e-08  3.91e-06  1.30e-08  2.36e-07  9.88e-01  
 16  +3.4960e-01  +3.4960e-01  2.84e-07  5.62e-10  3.91e-08  1.30e-10  2.36e-09  9.90e-01  
 17  +3.4960e-01  +3.4960e-01  2.84e-09  5.62e-12  3.91e-10  1.30e-12  2.36e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.898ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:00 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:00 PM: Optimal value: 3.496e-01
(CVXPY) Oct 06 04:03:00 PM: Compilation took 1.034e-02 seconds
(CVXPY) Oct 06 04:03:00 PM: Solver (including time spent in interface) took 1.492e-02 seconds
Iteration: 4, Objective: 0.3496
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:01 PM: Your problem has 546 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Finished problem compilation (took 8.680e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 546
  constraints   = 1046
  nnz(P)        = 0
  nnz(A)        = 6846
  cones (total) = 1
    : Nonnegative = 1,  numel = 1046

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9937e-01  +5.0181e+02  5.01e+02  9.55e-01  3.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.8220e-01  +1.0615e+02  1.06e+02  3.97e-01  2.12e+01  3.85e-03  5.57e-01  6.07e-01  
  2  +5.3121e-01  +1.2155e+01  1.16e+01  1.24e-01  8.43e+00  1.44e-02  2.34e-01  9.43e-01  
  3  +5.0254e-01  +2.3678e+00  1.87e+00  3.89e-02  2.61e+00  3.03e-05  1.78e-01  7.30e-01  
  4  +4.9972e-01  +1.5460e+00  1.05e+00  2.00e-02  1.39e+00  3.09e-05  7.72e-02  6.10e-01  
  5  +4.8152e-01  +1.3233e+00  8.42e-01  4.15e-03  3.02e-01  1.39e-04  1.11e-02  9.28e-01  
  6  +4.6711e-01  +1.1309e+00  6.64e-01  2.26e-03  1.64e-01  1.62e-04  6.00e-03  5.41e-01  
  7  +4.5387e-01  +1.0194e+00  5.66e-01  1.34e-03  9.70e-02  2.15e-04  3.57e-03  6.07e-01  
  8  +4.4161e-01  +8.9083e-01  4.49e-01  1.09e-03  7.90e-02  1.68e-04  3.01e-03  3.25e-01  
  9  +3.9989e-01  +5.9831e-01  1.98e-01  4.11e-04  2.93e-02  7.63e-05  1.24e-03  7.36e-01  
 10  +3.9544e-01  +5.6546e-01  1.70e-01  3.72e-04  2.65e-02  6.77e-05  1.16e-03  2.38e-01  
 11  +3.9100e-01  +5.4412e-01  1.53e-01  3.30e-04  2.35e-02  6.86e-05  1.04e-03  2.84e-01  
 12  +3.7990e-01  +4.9446e-01  1.15e-01  2.31e-04  1.64e-02  6.76e-05  7.40e-04  8.55e-01  
 13  +3.5726e-01  +3.8608e-01  2.88e-02  5.80e-05  4.11e-03  1.55e-05  2.02e-04  7.48e-01  
 14  +3.5057e-01  +3.5730e-01  6.73e-03  1.32e-05  9.49e-04  4.08e-06  4.61e-05  8.02e-01  
 15  +3.4909e-01  +3.5287e-01  3.79e-03  7.22e-06  5.26e-04  1.81e-06  2.50e-05  7.36e-01  
 16  +3.4778e-01  +3.4797e-01  1.87e-04  3.44e-07  2.55e-05  1.17e-07  1.18e-06  9.57e-01  
 17  +3.4770e-01  +3.4770e-01  1.89e-06  3.47e-09  2.57e-07  1.18e-09  1.19e-08  9.90e-01  
 18  +3.4770e-01  +3.4770e-01  1.89e-08  3.47e-11  2.57e-09  1.18e-11  1.19e-10  9.90e-01  
 19  +3.4770e-01  +3.4770e-01  1.89e-10  3.47e-13  2.57e-11  1.18e-13  1.19e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.204ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:01 PM: Optimal value: 3.477e-01
(CVXPY) Oct 06 04:03:01 PM: Compilation took 8.680e-03 seconds
(CVXPY) Oct 06 04:03:01 PM: Solver (including time spent in interface) took 1.504e-02 seconds
Iteration: 5, Objective: 0.3477
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:01 PM: Your problem has 556 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Finished problem compilation (took 1.046e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 556
  constraints   = 1056
  nnz(P)        = 0
  nnz(A)        = 7098
  cones (total) = 1
    : Nonnegative = 1,  numel = 1056

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0178e+02  5.01e+02  9.56e-01  3.47e+01  1.00e+00  1.02e+00   ------   
  1  +5.7992e-01  +1.0624e+02  1.06e+02  3.98e-01  2.11e+01  3.85e-03  5.58e-01  6.07e-01  
  2  +5.2968e-01  +1.1842e+01  1.13e+01  1.20e-01  8.13e+00  1.47e-02  2.27e-01  9.62e-01  
  3  +5.0180e-01  +2.2230e+00  1.72e+00  3.59e-02  2.42e+00  3.22e-05  1.58e-01  8.60e-01  
  4  +4.9648e-01  +1.4529e+00  9.56e-01  1.40e-02  9.93e-01  5.07e-05  4.26e-02  7.82e-01  
  5  +4.7874e-01  +1.1663e+00  6.88e-01  3.83e-03  2.78e-01  1.16e-04  1.02e-02  7.70e-01  
  6  +4.7342e-01  +1.2060e+00  7.33e-01  2.75e-03  2.00e-01  1.94e-04  7.08e-03  5.48e-01  
  7  +4.5448e-01  +1.0669e+00  6.12e-01  1.63e-03  1.19e-01  2.17e-04  4.31e-03  4.53e-01  
  8  +4.0642e-01  +6.9223e-01  2.86e-01  6.81e-04  4.86e-02  1.09e-04  2.00e-03  9.19e-01  
  9  +3.6588e-01  +4.7895e-01  1.13e-01  2.53e-04  1.79e-02  3.73e-05  8.34e-04  6.50e-01  
 10  +3.5880e-01  +4.4977e-01  9.10e-02  1.93e-04  1.37e-02  3.30e-05  6.49e-04  2.97e-01  
 11  +3.4865e-01  +4.0770e-01  5.90e-02  1.21e-04  8.57e-03  3.15e-05  4.24e-04  8.45e-01  
 12  +3.3630e-01  +3.5527e-01  1.90e-02  3.82e-05  2.69e-03  1.08e-05  1.43e-04  9.56e-01  
 13  +3.3082e-01  +3.3342e-01  2.60e-03  5.19e-06  3.65e-04  1.43e-06  2.04e-05  8.67e-01  
 14  +3.2992e-01  +3.2997e-01  4.97e-05  9.85e-08  6.93e-06  2.57e-08  3.94e-07  9.90e-01  
 15  +3.2990e-01  +3.2990e-01  4.98e-07  9.86e-10  6.93e-08  2.57e-10  3.95e-09  9.90e-01  
 16  +3.2990e-01  +3.2990e-01  4.98e-09  9.86e-12  6.93e-10  2.57e-12  3.95e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.1876ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:01 PM: Optimal value: 3.299e-01
(CVXPY) Oct 06 04:03:01 PM: Compilation took 1.046e-02 seconds
(CVXPY) Oct 06 04:03:01 PM: Solver (including time spent in interface) took 1.513e-02 seconds
Iteration: 6, Objective: 0.3299
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:01 PM: Your problem has 566 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Finished problem compilation (took 1.043e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 566
  constraints   = 1066
  nnz(P)        = 0
  nnz(A)        = 7255
  cones (total) = 1
    : Nonnegative = 1,  numel = 1066

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9924e-01  +5.0177e+02  5.01e+02  9.56e-01  3.46e+01  1.00e+00  1.02e+00   ------   
  1  +5.7937e-01  +1.0620e+02  1.06e+02  3.99e-01  2.09e+01  3.85e-03  5.57e-01  6.07e-01  
  2  +5.2911e-01  +1.1710e+01  1.12e+01  1.18e-01  7.95e+00  1.47e-02  2.24e-01  9.68e-01  
  3  +5.0157e-01  +2.1777e+00  1.68e+00  3.50e-02  2.36e+00  8.96e-05  1.49e-01  9.04e-01  
  4  +4.9422e-01  +1.4859e+00  9.92e-01  1.18e-02  8.46e-01  1.64e-04  3.36e-02  8.37e-01  
  5  +4.7784e-01  +1.2799e+00  8.02e-01  4.32e-03  3.13e-01  3.01e-04  1.14e-02  7.07e-01  
  6  +4.5644e-01  +1.1185e+00  6.62e-01  2.09e-03  1.51e-01  3.76e-04  5.52e-03  6.38e-01  
  7  +4.5021e-01  +1.0738e+00  6.24e-01  1.86e-03  1.34e-01  3.46e-04  4.96e-03  2.12e-01  
  8  +4.0832e-01  +7.6227e-01  3.54e-01  8.61e-04  6.14e-02  1.61e-04  2.49e-03  7.56e-01  
  9  +3.7424e-01  +5.6285e-01  1.89e-01  4.39e-04  3.10e-02  7.81e-05  1.40e-03  5.25e-01  
 10  +3.5037e-01  +4.4028e-01  8.99e-02  1.96e-04  1.38e-02  3.99e-05  6.71e-04  6.12e-01  
 11  +3.4397e-01  +4.1372e-01  6.97e-02  1.48e-04  1.04e-02  3.20e-05  5.22e-04  4.05e-01  
 12  +3.2804e-01  +3.4359e-01  1.55e-02  3.19e-05  2.24e-03  7.02e-06  1.23e-04  8.35e-01  
 13  +3.2390e-01  +3.2629e-01  2.38e-03  4.84e-06  3.39e-04  1.08e-06  1.95e-05  8.62e-01  
 14  +3.2311e-01  +3.2315e-01  3.43e-05  6.94e-08  4.86e-06  1.51e-08  2.83e-07  9.89e-01  
 15  +3.2310e-01  +3.2310e-01  3.43e-07  6.94e-10  4.86e-08  1.51e-10  2.83e-09  9.90e-01  
 16  +3.2310e-01  +3.2310e-01  3.43e-09  6.94e-12  4.86e-10  1.51e-12  2.83e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.7469ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:01 PM: Optimal value: 3.231e-01
(CVXPY) Oct 06 04:03:01 PM: Compilation took 1.043e-02 seconds
(CVXPY) Oct 06 04:03:01 PM: Solver (including time spent in interface) took 1.165e-02 seconds
Iteration: 7, Objective: 0.3231
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:01 PM: Your problem has 574 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Finished problem compilation (took 1.090e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 574
  constraints   = 1074
  nnz(P)        = 0
  nnz(A)        = 7374
  cones (total) = 1
    : Nonnegative = 1,  numel = 1074

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9920e-01  +5.0167e+02  5.01e+02  9.56e-01  3.45e+01  1.00e+00  1.02e+00   ------   
  1  +5.7848e-01  +1.0628e+02  1.06e+02  4.00e-01  2.08e+01  3.85e-03  5.58e-01  6.07e-01  
  2  +5.2784e-01  +1.1432e+01  1.09e+01  1.15e-01  7.74e+00  1.49e-02  2.19e-01  9.82e-01  
  3  +5.0156e-01  +2.2413e+00  1.74e+00  3.58e-02  2.42e+00  4.04e-04  1.39e-01  9.26e-01  
  4  +4.9362e-01  +1.7464e+00  1.25e+00  1.37e-02  9.77e-01  7.53e-04  3.78e-02  7.71e-01  
  5  +4.7514e-01  +1.3896e+00  9.14e-01  4.61e-03  3.33e-01  1.19e-03  1.21e-02  7.16e-01  
  6  +4.7381e-01  +1.3864e+00  9.13e-01  4.30e-03  3.11e-01  9.76e-04  1.13e-02  2.84e-01  
  7  +4.5218e-01  +1.2064e+00  7.54e-01  2.22e-03  1.60e-01  1.13e-03  5.86e-03  5.37e-01  
  8  +4.3646e-01  +1.0115e+00  5.75e-01  1.73e-03  1.24e-01  4.54e-04  4.78e-03  4.87e-01  
  9  +3.9116e-01  +6.9460e-01  3.03e-01  7.25e-04  5.11e-02  1.64e-04  2.18e-03  7.99e-01  
 10  +3.6132e-01  +5.1914e-01  1.58e-01  3.68e-04  2.57e-02  7.79e-05  1.22e-03  6.67e-01  
 11  +3.3971e-01  +4.0540e-01  6.57e-02  1.44e-04  9.99e-03  3.43e-05  5.21e-04  7.49e-01  
 12  +3.3799e-01  +3.9359e-01  5.56e-02  1.26e-04  8.69e-03  2.70e-05  4.74e-04  2.90e-01  
 13  +3.3766e-01  +3.9196e-01  5.43e-02  1.22e-04  8.48e-03  2.65e-05  4.62e-04  7.50e-02  
 14  +3.3620e-01  +3.8798e-01  5.18e-02  1.13e-04  7.79e-03  2.71e-05  4.17e-04  3.41e-01  
 15  +3.2554e-01  +3.4011e-01  1.46e-02  3.13e-05  2.16e-03  7.33e-06  1.25e-04  7.34e-01  
 16  +3.2184e-01  +3.2388e-01  2.04e-03  4.35e-06  3.00e-04  1.00e-06  1.81e-05  8.73e-01  
 17  +3.2121e-01  +3.2124e-01  3.27e-05  6.95e-08  4.78e-06  1.53e-08  2.93e-07  9.87e-01  
 18  +3.2120e-01  +3.2120e-01  3.27e-07  6.95e-10  4.78e-08  1.53e-10  2.93e-09  9.90e-01  
 19  +3.2120e-01  +3.2120e-01  3.27e-09  6.95e-12  4.78e-10  1.53e-12  2.93e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.6867ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:01 PM: Optimal value: 3.212e-01
(CVXPY) Oct 06 04:03:01 PM: Compilation took 1.090e-02 seconds
(CVXPY) Oct 06 04:03:01 PM: Solver (including time spent in interface) took 1.989e-02 seconds
Iteration: 8, Objective: 0.3212
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:01 PM: Your problem has 578 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:01 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:01 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:01 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:01 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:01 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:01 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:01 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:01 PM: Finished problem compilation (took 5.098e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 578
  constraints   = 1078
  nnz(P)        = 0
  nnz(A)        = 7426
  cones (total) = 1
    : Nonnegative = 1,  numel = 1078

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0162e+02  5.01e+02  9.56e-01  3.44e+01  1.00e+00  1.02e+00   ------   
  1  +5.7788e-01  +1.0628e+02  1.06e+02  4.00e-01  2.07e+01  3.86e-03  5.57e-01  6.07e-01  
  2  +5.2743e-01  +1.1343e+01  1.08e+01  1.14e-01  7.63e+00  1.49e-02  2.17e-01  9.86e-01  
  3  +5.0167e-01  +2.3251e+00  1.82e+00  3.71e-02  2.51e+00  6.52e-04  1.36e-01  9.13e-01  
  4  +4.8936e-01  +1.7300e+00  1.24e+00  9.87e-03  7.11e-01  1.55e-03  2.61e-02  8.80e-01  
  5  +4.8356e-01  +1.6324e+00  1.15e+00  7.34e-03  5.30e-01  1.65e-03  1.92e-02  2.99e-01  
  6  +4.7801e-01  +1.5667e+00  1.09e+00  5.55e-03  4.01e-01  1.20e-03  1.44e-02  5.57e-01  
  7  +4.5364e-01  +1.2788e+00  8.25e-01  2.57e-03  1.85e-01  1.35e-03  6.79e-03  5.50e-01  
  8  +4.3442e-01  +1.0249e+00  5.90e-01  1.76e-03  1.26e-01  9.41e-05  4.89e-03  8.90e-01  
  9  +3.9807e-01  +7.6343e-01  3.65e-01  9.35e-04  6.59e-02  1.05e-04  2.80e-03  6.79e-01  
 10  +3.7015e-01  +5.8309e-01  2.13e-01  5.24e-04  3.65e-02  5.95e-05  1.72e-03  4.45e-01  
 11  +3.4635e-01  +4.4972e-01  1.03e-01  2.37e-04  1.64e-02  4.92e-05  8.46e-04  9.10e-01  
 12  +3.4213e-01  +4.2971e-01  8.76e-02  1.96e-04  1.35e-02  4.24e-05  7.12e-04  1.93e-01  
 13  +3.2976e-01  +3.6550e-01  3.57e-02  7.91e-05  5.44e-03  1.89e-05  3.10e-04  9.90e-01  
 14  +3.2053e-01  +3.2414e-01  3.62e-03  7.95e-06  5.45e-04  1.63e-06  3.39e-05  9.27e-01  
 15  +3.1948e-01  +3.1970e-01  2.27e-04  4.98e-07  3.42e-05  1.00e-07  2.17e-06  9.75e-01  
 16  +3.1940e-01  +3.1940e-01  2.28e-06  4.99e-09  3.42e-07  1.00e-09  2.17e-08  9.90e-01  
 17  +3.1940e-01  +3.1940e-01  2.28e-08  4.99e-11  3.42e-09  1.00e-11  2.17e-10  9.90e-01  
 18  +3.1940e-01  +3.1940e-01  2.28e-10  4.99e-13  3.42e-11  1.00e-13  2.17e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 15.7855ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:01 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:01 PM: Optimal value: 3.194e-01
(CVXPY) Oct 06 04:03:01 PM: Compilation took 5.098e-03 seconds
(CVXPY) Oct 06 04:03:01 PM: Solver (including time spent in interface) took 1.975e-02 seconds
Iteration: 9, Objective: 0.3194
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:02 PM: Your problem has 588 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:02 PM: Finished problem compilation (took 5.358e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 588
  constraints   = 1088
  nnz(P)        = 0
  nnz(A)        = 7601
  cones (total) = 1
    : Nonnegative = 1,  numel = 1088

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9921e-01  +5.0163e+02  5.01e+02  9.56e-01  3.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.7730e-01  +1.0631e+02  1.06e+02  4.01e-01  2.06e+01  3.86e-03  5.57e-01  6.07e-01  
  2  +5.2710e-01  +1.1275e+01  1.07e+01  1.13e-01  7.52e+00  1.50e-02  2.16e-01  9.90e-01  
  3  +5.0147e-01  +2.2632e+00  1.76e+00  3.58e-02  2.42e+00  6.01e-04  1.30e-01  9.47e-01  
  4  +4.8759e-01  +1.7327e+00  1.25e+00  9.03e-03  6.51e-01  1.58e-03  2.36e-02  8.82e-01  
  5  +4.7880e-01  +1.5965e+00  1.12e+00  6.07e-03  4.38e-01  1.66e-03  1.57e-02  4.00e-01  
  6  +4.5084e-01  +1.2477e+00  7.97e-01  2.44e-03  1.76e-01  1.64e-03  6.44e-03  7.09e-01  
  7  +4.4576e-01  +1.1856e+00  7.40e-01  2.24e-03  1.60e-01  1.27e-03  5.96e-03  2.16e-01  
  8  +4.1229e-01  +9.1415e-01  5.02e-01  1.25e-03  8.84e-02  7.84e-04  3.52e-03  4.92e-01  
  9  +3.6336e-01  +5.5533e-01  1.92e-01  4.62e-04  3.21e-02  1.43e-04  1.53e-03  6.69e-01  
 10  +3.4374e-01  +4.5202e-01  1.08e-01  2.51e-04  1.73e-02  7.48e-05  9.05e-04  5.53e-01  
 11  +3.3920e-01  +4.3037e-01  9.12e-02  2.05e-04  1.41e-02  6.34e-05  7.55e-04  2.10e-01  
 12  +3.2847e-01  +3.7394e-01  4.55e-02  1.02e-04  7.02e-03  2.43e-05  4.03e-04  9.90e-01  
 13  +3.1772e-01  +3.2527e-01  7.54e-03  1.68e-05  1.15e-03  3.53e-06  7.22e-05  8.67e-01  
 14  +3.1570e-01  +3.1633e-01  6.37e-04  1.41e-06  9.67e-05  2.81e-07  6.31e-06  9.28e-01  
 15  +3.1550e-01  +3.1551e-01  6.55e-06  1.45e-08  9.94e-07  2.85e-09  6.51e-08  9.90e-01  
 16  +3.1550e-01  +3.1550e-01  6.55e-08  1.45e-10  9.94e-09  2.85e-11  6.51e-10  9.90e-01  
 17  +3.1550e-01  +3.1550e-01  6.55e-10  1.45e-12  9.94e-11  2.85e-13  6.52e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.2778ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:02 PM: Optimal value: 3.155e-01
(CVXPY) Oct 06 04:03:02 PM: Compilation took 5.358e-03 seconds
(CVXPY) Oct 06 04:03:02 PM: Solver (including time spent in interface) took 1.980e-02 seconds
Iteration: 10, Objective: 0.3155
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:02 PM: Your problem has 598 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:02 PM: Finished problem compilation (took 1.132e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 598
  constraints   = 1098
  nnz(P)        = 0
  nnz(A)        = 7794
  cones (total) = 1
    : Nonnegative = 1,  numel = 1098

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +5.0170e+02  5.01e+02  9.56e-01  3.43e+01  1.00e+00  1.02e+00   ------   
  1  +5.7570e-01  +1.0646e+02  1.06e+02  4.02e-01  2.05e+01  3.86e-03  5.58e-01  6.06e-01  
  2  +5.2631e-01  +1.1366e+01  1.08e+01  1.13e-01  7.46e+00  1.51e-02  2.16e-01  9.90e-01  
  3  +5.0236e-01  +2.2486e+00  1.75e+00  3.45e-02  2.37e+00  5.97e-04  1.08e-01  9.45e-01  
  4  +4.9037e-01  +2.2991e+00  1.81e+00  1.15e-02  8.32e-01  1.71e-03  2.86e-02  8.29e-01  
  5  +4.6781e-01  +1.6169e+00  1.15e+00  4.67e-03  3.37e-01  1.48e-03  1.20e-02  6.26e-01  
  6  +4.4503e-01  +1.3652e+00  9.20e-01  2.53e-03  1.82e-01  1.34e-03  6.57e-03  5.92e-01  
  7  +4.1800e-01  +9.7804e-01  5.60e-01  1.59e-03  1.12e-01  4.18e-05  4.55e-03  8.66e-01  
  8  +3.7076e-01  +6.3642e-01  2.66e-01  6.58e-04  4.56e-02  6.05e-05  2.13e-03  7.15e-01  
  9  +3.3757e-01  +4.4197e-01  1.04e-01  2.49e-04  1.71e-02  3.56e-05  9.31e-04  7.64e-01  
 10  +3.3241e-01  +4.1718e-01  8.48e-02  1.94e-04  1.33e-02  3.11e-05  7.39e-04  2.80e-01  
 11  +3.2414e-01  +3.7235e-01  4.82e-02  1.11e-04  7.55e-03  2.34e-05  4.50e-04  9.90e-01  
 12  +3.1344e-01  +3.2366e-01  1.02e-02  2.30e-05  1.56e-03  4.56e-06  1.02e-04  8.18e-01  
 13  +3.1203e-01  +3.1707e-01  5.04e-03  1.12e-05  7.65e-04  2.24e-06  5.10e-05  6.45e-01  
 14  +3.1091e-01  +3.1225e-01  1.34e-03  2.96e-06  2.01e-04  5.90e-07  1.37e-05  7.55e-01  
 15  +3.1051e-01  +3.1056e-01  4.45e-05  9.83e-08  6.69e-06  1.83e-08  4.60e-07  9.90e-01  
 16  +3.1050e-01  +3.1050e-01  4.45e-07  9.85e-10  6.70e-08  1.83e-10  4.60e-09  9.90e-01  
 17  +3.1050e-01  +3.1050e-01  4.45e-09  9.85e-12  6.70e-10  1.83e-12  4.61e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.1951ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:02 PM: Optimal value: 3.105e-01
(CVXPY) Oct 06 04:03:02 PM: Compilation took 1.132e-02 seconds
(CVXPY) Oct 06 04:03:02 PM: Solver (including time spent in interface) took 1.605e-02 seconds
Iteration: 11, Objective: 0.3105
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:03:02 PM: Your problem has 601 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:03:02 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:03:02 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:03:02 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:03:02 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:03:02 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:03:02 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:03:02 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:03:02 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:03:02 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:03:02 PM: Finished problem compilation (took 7.327e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 601
  constraints   = 1101
  nnz(P)        = 0
  nnz(A)        = 7834
  cones (total) = 1
    : Nonnegative = 1,  numel = 1101

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9915e-01  +5.0172e+02  5.01e+02  9.57e-01  3.42e+01  1.00e+00  1.02e+00   ------   
  1  +5.7551e-01  +1.0646e+02  1.06e+02  4.03e-01  2.05e+01  3.86e-03  5.58e-01  6.06e-01  
  2  +5.2606e-01  +1.1374e+01  1.08e+01  1.13e-01  7.44e+00  1.51e-02  2.16e-01  9.90e-01  
  3  +5.0256e-01  +2.2336e+00  1.73e+00  3.38e-02  2.33e+00  6.69e-04  1.02e-01  9.43e-01  
  4  +4.9129e-01  +2.1869e+00  1.70e+00  1.11e-02  8.02e-01  1.82e-03  2.75e-02  7.94e-01  
  5  +4.6934e-01  +1.5892e+00  1.12e+00  4.63e-03  3.34e-01  1.64e-03  1.18e-02  6.20e-01  
  6  +4.4633e-01  +1.3464e+00  9.00e-01  2.50e-03  1.80e-01  1.48e-03  6.49e-03  5.89e-01  
  7  +4.1972e-01  +1.0182e+00  5.98e-01  1.65e-03  1.17e-01  2.17e-04  4.65e-03  7.63e-01  
  8  +3.6913e-01  +6.2916e-01  2.60e-01  6.34e-04  4.40e-02  8.27e-05  2.05e-03  6.88e-01  
  9  +3.4478e-01  +4.9017e-01  1.45e-01  3.48e-04  2.39e-02  5.06e-05  1.25e-03  5.14e-01  
 10  +3.3205e-01  +4.2195e-01  8.99e-02  2.08e-04  1.42e-02  3.31e-05  7.95e-04  4.30e-01  
 11  +3.2007e-01  +3.5961e-01  3.95e-02  9.16e-05  6.23e-03  1.69e-05  3.81e-04  9.90e-01  
 12  +3.1201e-01  +3.1997e-01  7.96e-03  1.82e-05  1.24e-03  3.44e-06  8.15e-05  8.28e-01  
 13  +3.1076e-01  +3.1470e-01  3.94e-03  8.83e-06  5.99e-04  1.69e-06  4.04e-05  6.85e-01  
 14  +3.0966e-01  +3.1012e-01  4.64e-04  1.03e-06  7.03e-05  1.88e-07  4.83e-06  9.90e-01  
 15  +3.0950e-01  +3.0951e-01  5.31e-06  1.18e-08  8.04e-07  2.14e-09  5.55e-08  9.89e-01  
 16  +3.0950e-01  +3.0950e-01  5.32e-08  1.19e-10  8.05e-09  2.14e-11  5.56e-10  9.90e-01  
 17  +3.0950e-01  +3.0950e-01  5.32e-10  1.19e-12  8.05e-11  2.14e-13  5.56e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.7607ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:03:02 PM: Problem status: optimal
(CVXPY) Oct 06 04:03:02 PM: Optimal value: 3.095e-01
(CVXPY) Oct 06 04:03:02 PM: Compilation took 7.327e-03 seconds
(CVXPY) Oct 06 04:03:02 PM: Solver (including time spent in interface) took 1.762e-02 seconds
FULL MODEL:
  Accruacy: 0.652
  Our objective: 0.304

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0)                                             <-- (term's our objective: 0.218)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 0) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x6 = 0)                       <-- (term's our objective: 0.026)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x6 = 0)            <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x2 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1)            <-- (term's our objective: 0.012)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 8.125436782836914
Best over terms:
  Our final objective: 0.218
    Its accruacy: 0.609
    Its hamming distance: 0
  Shortest hamming distance: 0
    Its our objective: 0.218
  Highest accruacy: 0.609
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

