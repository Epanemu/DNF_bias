Command:
python test_script.py -s constant_subclass -d 5 -n 500 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.14400000000000002
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 500 remain. 
Dimension is 5.

Computed total variation: 0.252
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:49 PM: Your problem has 261 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:49 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:49 PM: Finished problem compilation (took 4.499e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:49 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 261
  constraints   = 511
  nnz(P)        = 0
  nnz(A)        = 2011
  cones (total) = 1
    : Nonnegative = 1,  numel = 511

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9952e-01  +2.5087e+02  2.50e+02  9.33e-01  2.00e+01  1.00e+00  1.01e+00   ------   
  1  +5.9860e-01  +5.0508e+01  4.99e+01  3.44e-01  1.14e+01  3.99e-03  5.05e-01  6.46e-01  
  2  +5.4260e-01  +7.2399e+00  6.70e+00  1.14e-01  4.66e+00  1.02e-02  2.23e-01  8.14e-01  
  3  +5.0111e-01  +1.3720e+00  8.71e-01  2.59e-02  1.02e+00  1.16e-03  1.91e-01  5.48e-01  
  4  +4.9929e-01  +6.9739e-01  1.98e-01  5.79e-03  2.35e-01  4.46e-04  3.89e-02  8.37e-01  
  5  +4.7639e-01  +7.1573e-01  2.39e-01  1.32e-03  5.50e-02  4.40e-03  4.05e-03  9.33e-01  
  6  +4.5115e-01  +5.2472e-01  7.36e-02  3.64e-04  1.50e-02  1.98e-04  1.29e-03  8.02e-01  
  7  +4.3180e-01  +4.4950e-01  1.77e-02  7.13e-05  2.94e-03  9.54e-06  2.96e-04  9.90e-01  
  8  +4.2724e-01  +4.3048e-01  3.24e-03  1.30e-05  5.34e-04  3.11e-06  5.54e-05  9.90e-01  
  9  +4.2611e-01  +4.2615e-01  3.43e-05  1.36e-07  5.62e-06  3.25e-08  5.89e-07  9.89e-01  
 10  +4.2610e-01  +4.2610e-01  3.43e-07  1.36e-09  5.62e-08  3.25e-10  5.89e-09  9.90e-01  
 11  +4.2610e-01  +4.2610e-01  3.43e-09  1.36e-11  5.62e-10  3.25e-12  5.89e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 2.9409ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:49 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:49 PM: Optimal value: 4.261e-01
(CVXPY) Oct 06 03:53:49 PM: Compilation took 4.499e-02 seconds
(CVXPY) Oct 06 03:53:49 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4261
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:49 PM: Your problem has 271 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:49 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:49 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:49 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:49 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:49 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:49 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:49 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:49 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:49 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Finished problem compilation (took 9.908e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 271
  constraints   = 521
  nnz(P)        = 0
  nnz(A)        = 2575
  cones (total) = 1
    : Nonnegative = 1,  numel = 521

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9913e-01  +2.5107e+02  2.51e+02  9.35e-01  2.13e+01  1.00e+00  1.01e+00   ------   
  1  +5.9564e-01  +5.0929e+01  5.03e+01  3.51e-01  1.22e+01  3.97e-03  5.15e-01  6.40e-01  
  2  +5.3980e-01  +6.9670e+00  6.43e+00  1.12e-01  4.79e+00  1.08e-02  2.21e-01  8.41e-01  
  3  +5.0055e-01  +1.3330e+00  8.32e-01  2.51e-02  1.05e+00  1.14e-03  1.79e-01  6.60e-01  
  4  +4.9899e-01  +8.5603e-01  3.57e-01  1.05e-02  4.49e-01  7.08e-04  6.22e-02  6.83e-01  
  5  +4.7522e-01  +8.1304e-01  3.38e-01  2.17e-03  9.61e-02  4.38e-03  6.64e-03  9.61e-01  
  6  +4.6358e-01  +7.4548e-01  2.82e-01  1.31e-03  5.80e-02  4.37e-03  3.95e-03  4.58e-01  
  7  +4.4937e-01  +6.2712e-01  1.78e-01  6.83e-04  3.01e-02  1.84e-03  2.13e-03  6.62e-01  
  8  +4.3909e-01  +5.4312e-01  1.04e-01  4.27e-04  1.88e-02  2.77e-04  1.40e-03  6.88e-01  
  9  +4.2332e-01  +4.7069e-01  4.74e-02  1.77e-04  7.78e-03  1.17e-04  6.07e-04  6.56e-01  
 10  +4.1310e-01  +4.2890e-01  1.58e-02  5.45e-05  2.38e-03  2.97e-05  1.88e-04  8.98e-01  
 11  +4.1204e-01  +4.2414e-01  1.21e-02  4.39e-05  1.92e-03  1.66e-05  1.66e-04  2.90e-01  
 12  +4.1198e-01  +4.2393e-01  1.20e-02  4.33e-05  1.90e-03  1.64e-05  1.63e-04  5.82e-02  
 13  +4.1099e-01  +4.2279e-01  1.18e-02  3.92e-05  1.72e-03  1.80e-05  1.36e-04  5.28e-01  
 14  +4.0633e-01  +4.0662e-01  2.98e-04  9.84e-07  4.31e-05  4.22e-07  3.49e-06  9.77e-01  
 15  +4.0620e-01  +4.0620e-01  2.99e-06  9.85e-09  4.31e-07  4.22e-09  3.50e-08  9.90e-01  
 16  +4.0620e-01  +4.0620e-01  2.99e-08  9.85e-11  4.31e-09  4.22e-11  3.50e-10  9.90e-01  
 17  +4.0620e-01  +4.0620e-01  2.99e-10  9.85e-13  4.31e-11  4.22e-13  3.50e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5289ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:50 PM: Optimal value: 4.062e-01
(CVXPY) Oct 06 03:53:50 PM: Compilation took 9.908e-03 seconds
(CVXPY) Oct 06 03:53:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.4062
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:50 PM: Your problem has 273 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Finished problem compilation (took 4.597e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 273
  constraints   = 523
  nnz(P)        = 0
  nnz(A)        = 2676
  cones (total) = 1
    : Nonnegative = 1,  numel = 523

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9903e-01  +2.5107e+02  2.51e+02  9.35e-01  2.15e+01  1.00e+00  1.01e+00   ------   
  1  +5.9452e-01  +5.1065e+01  5.05e+01  3.53e-01  1.23e+01  3.97e-03  5.17e-01  6.39e-01  
  2  +5.3892e-01  +6.8798e+00  6.34e+00  1.11e-01  4.79e+00  1.10e-02  2.19e-01  8.51e-01  
  3  +5.0031e-01  +1.3153e+00  8.15e-01  2.47e-02  1.04e+00  1.15e-03  1.74e-01  7.05e-01  
  4  +4.9840e-01  +8.9401e-01  3.96e-01  1.14e-02  4.92e-01  8.55e-04  6.15e-02  6.83e-01  
  5  +4.7689e-01  +7.9751e-01  3.21e-01  2.48e-03  1.11e-01  3.99e-03  7.70e-03  9.12e-01  
  6  +4.5890e-01  +6.7177e-01  2.13e-01  1.06e-03  4.72e-02  2.50e-03  3.34e-03  7.82e-01  
  7  +4.4775e-01  +6.0569e-01  1.58e-01  7.57e-04  3.37e-02  8.55e-04  2.45e-03  5.79e-01  
  8  +4.3194e-01  +5.3419e-01  1.02e-01  4.32e-04  1.92e-02  5.04e-04  1.44e-03  4.87e-01  
  9  +4.1500e-01  +4.6156e-01  4.66e-02  1.80e-04  8.01e-03  8.17e-05  6.31e-04  8.94e-01  
 10  +4.0095e-01  +4.0714e-01  6.18e-03  2.28e-05  1.02e-03  6.87e-06  8.50e-05  9.87e-01  
 11  +3.9833e-01  +3.9842e-01  8.21e-05  3.00e-07  1.34e-05  7.88e-08  1.14e-06  9.89e-01  
 12  +3.9830e-01  +3.9830e-01  8.21e-07  3.00e-09  1.34e-07  7.89e-10  1.14e-08  9.90e-01  
 13  +3.9830e-01  +3.9830e-01  8.21e-09  3.00e-11  1.34e-09  7.89e-12  1.14e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 3.8033ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:50 PM: Optimal value: 3.983e-01
(CVXPY) Oct 06 03:53:50 PM: Compilation took 4.597e-03 seconds
(CVXPY) Oct 06 03:53:50 PM: Solver (including time spent in interface) took 6.223e-03 seconds
Iteration: 3, Objective: 0.3983
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:50 PM: Your problem has 283 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Finished problem compilation (took 1.462e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 283
  constraints   = 533
  nnz(P)        = 0
  nnz(A)        = 2861
  cones (total) = 1
    : Nonnegative = 1,  numel = 533

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +2.5121e+02  2.51e+02  9.35e-01  2.15e+01  1.00e+00  1.02e+00   ------   
  1  +5.9188e-01  +5.1249e+01  5.07e+01  3.56e-01  1.22e+01  3.97e-03  5.19e-01  6.37e-01  
  2  +5.3733e-01  +6.7207e+00  6.18e+00  1.08e-01  4.61e+00  1.13e-02  2.13e-01  8.69e-01  
  3  +5.0006e-01  +1.3435e+00  8.43e-01  2.57e-02  1.08e+00  1.40e-03  1.61e-01  7.65e-01  
  4  +4.9532e-01  +9.9144e-01  4.96e-01  1.19e-02  5.17e-01  1.70e-03  4.65e-02  7.84e-01  
  5  +4.7410e-01  +8.6445e-01  3.90e-01  3.30e-03  1.47e-01  4.51e-03  1.04e-02  8.08e-01  
  6  +4.7052e-01  +8.6418e-01  3.94e-01  2.70e-03  1.20e-01  4.39e-03  8.31e-03  3.60e-01  
  7  +4.5445e-01  +7.4166e-01  2.87e-01  1.62e-03  7.19e-02  1.48e-03  5.16e-03  7.21e-01  
  8  +4.2705e-01  +5.9233e-01  1.65e-01  7.62e-04  3.37e-02  7.80e-04  2.61e-03  5.57e-01  
  9  +3.9803e-01  +4.4249e-01  4.45e-02  1.93e-04  8.46e-03  1.34e-04  7.44e-04  7.50e-01  
 10  +3.9412e-01  +4.2553e-01  3.14e-02  1.31e-04  5.75e-03  9.02e-05  5.07e-04  4.08e-01  
 11  +3.9370e-01  +4.2333e-01  2.96e-02  1.25e-04  5.48e-03  7.45e-05  4.91e-04  1.86e-01  
 12  +3.8738e-01  +3.9681e-01  9.43e-03  3.87e-05  1.69e-03  2.23e-05  1.57e-04  7.10e-01  
 13  +3.8498e-01  +3.8663e-01  1.65e-03  6.73e-06  2.95e-04  3.86e-06  2.77e-05  8.31e-01  
 14  +3.8463e-01  +3.8529e-01  6.55e-04  2.56e-06  1.12e-04  1.39e-06  1.07e-05  6.94e-01  
 15  +3.8442e-01  +3.8447e-01  4.75e-05  1.85e-07  8.11e-06  8.18e-08  7.83e-07  9.50e-01  
 16  +3.8440e-01  +3.8440e-01  4.85e-07  1.89e-09  8.28e-08  8.29e-10  8.00e-09  9.90e-01  
 17  +3.8440e-01  +3.8440e-01  4.85e-09  1.89e-11  8.28e-10  8.29e-12  8.00e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 5.3498ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:50 PM: Optimal value: 3.844e-01
(CVXPY) Oct 06 03:53:50 PM: Compilation took 1.462e-02 seconds
(CVXPY) Oct 06 03:53:50 PM: Solver (including time spent in interface) took 5.267e-03 seconds
Iteration: 4, Objective: 0.3844
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:50 PM: Your problem has 286 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Finished problem compilation (took 1.186e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 286
  constraints   = 536
  nnz(P)        = 0
  nnz(A)        = 2905
  cones (total) = 1
    : Nonnegative = 1,  numel = 536

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +2.5117e+02  2.51e+02  9.36e-01  2.14e+01  1.00e+00  1.02e+00   ------   
  1  +5.9163e-01  +5.1250e+01  5.07e+01  3.57e-01  1.22e+01  3.98e-03  5.18e-01  6.37e-01  
  2  +5.3721e-01  +6.7088e+00  6.17e+00  1.07e-01  4.56e+00  1.13e-02  2.12e-01  8.70e-01  
  3  +5.0007e-01  +1.3499e+00  8.50e-01  2.59e-02  1.09e+00  1.43e-03  1.60e-01  7.66e-01  
  4  +4.9546e-01  +1.0169e+00  5.21e-01  1.26e-02  5.46e-01  1.75e-03  4.94e-02  7.58e-01  
  5  +4.7884e-01  +9.1943e-01  4.41e-01  4.36e-03  1.94e-01  4.03e-03  1.38e-02  7.57e-01  
  6  +4.7043e-01  +8.8046e-01  4.10e-01  2.93e-03  1.31e-01  4.12e-03  9.12e-03  4.68e-01  
  7  +4.5349e-01  +7.3768e-01  2.84e-01  1.51e-03  6.73e-02  3.22e-04  4.77e-03  9.90e-01  
  8  +4.1448e-01  +5.3154e-01  1.17e-01  5.09e-04  2.24e-02  1.13e-04  1.79e-03  6.62e-01  
  9  +3.9705e-01  +4.5452e-01  5.75e-02  2.42e-04  1.06e-02  5.50e-05  9.23e-04  6.02e-01  
 10  +3.9135e-01  +4.3064e-01  3.93e-02  1.59e-04  6.94e-03  3.95e-05  6.19e-04  4.13e-01  
 11  +3.8268e-01  +3.9408e-01  1.14e-02  4.56e-05  1.99e-03  1.22e-05  1.88e-04  9.90e-01  
 12  +3.7881e-01  +3.7937e-01  5.66e-04  2.25e-06  9.81e-05  5.71e-07  9.56e-06  9.57e-01  
 13  +3.7860e-01  +3.7861e-01  6.82e-06  2.71e-08  1.18e-06  6.89e-09  1.15e-07  9.88e-01  
 14  +3.7860e-01  +3.7860e-01  6.82e-08  2.71e-10  1.18e-08  6.89e-11  1.15e-09  9.90e-01  
 15  +3.7860e-01  +3.7860e-01  6.82e-10  2.71e-12  1.18e-10  6.89e-13  1.15e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5933ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:50 PM: Optimal value: 3.786e-01
(CVXPY) Oct 06 03:53:50 PM: Compilation took 1.186e-02 seconds
(CVXPY) Oct 06 03:53:50 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 5, Objective: 0.3786
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:50 PM: Your problem has 287 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Finished problem compilation (took 9.513e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 287
  constraints   = 537
  nnz(P)        = 0
  nnz(A)        = 2922
  cones (total) = 1
    : Nonnegative = 1,  numel = 537

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9895e-01  +2.5113e+02  2.51e+02  9.36e-01  2.14e+01  1.00e+00  1.02e+00   ------   
  1  +5.9140e-01  +5.1265e+01  5.07e+01  3.57e-01  1.21e+01  3.98e-03  5.18e-01  6.37e-01  
  2  +5.3716e-01  +6.7028e+00  6.17e+00  1.07e-01  4.55e+00  1.13e-02  2.12e-01  8.71e-01  
  3  +4.9968e-01  +1.2996e+00  8.00e-01  2.44e-02  1.03e+00  1.35e-03  1.57e-01  8.12e-01  
  4  +4.9394e-01  +9.9164e-01  4.98e-01  1.12e-02  4.89e-01  1.91e-03  4.30e-02  7.86e-01  
  5  +4.6980e-01  +8.7373e-01  4.04e-01  3.11e-03  1.38e-01  5.04e-03  9.78e-03  8.25e-01  
  6  +4.6363e-01  +8.4264e-01  3.79e-01  2.53e-03  1.13e-01  4.61e-03  7.98e-03  2.79e-01  
  7  +4.2499e-01  +6.1178e-01  1.87e-01  8.26e-04  3.65e-02  2.16e-03  2.77e-03  7.78e-01  
  8  +3.9700e-01  +4.6732e-01  7.03e-02  3.06e-04  1.34e-02  5.31e-04  1.18e-03  6.47e-01  
  9  +3.8857e-01  +4.2843e-01  3.99e-02  1.66e-04  7.23e-03  2.81e-04  6.62e-04  5.12e-01  
 10  +3.8439e-01  +4.0707e-01  2.27e-02  9.54e-05  4.16e-03  2.92e-05  3.94e-04  9.90e-01  
 11  +3.7791e-01  +3.8190e-01  3.99e-03  1.64e-05  7.16e-04  4.74e-06  7.12e-05  8.46e-01  
 12  +3.7665e-01  +3.7681e-01  1.56e-04  6.40e-07  2.79e-05  1.82e-07  2.81e-06  9.62e-01  
 13  +3.7660e-01  +3.7660e-01  1.57e-06  6.42e-09  2.80e-07  1.83e-09  2.83e-08  9.90e-01  
 14  +3.7660e-01  +3.7660e-01  1.57e-08  6.42e-11  2.80e-09  1.83e-11  2.83e-10  9.90e-01  
 15  +3.7660e-01  +3.7660e-01  1.57e-10  6.42e-13  2.80e-11  1.83e-13  2.83e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.5587ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:50 PM: Optimal value: 3.766e-01
(CVXPY) Oct 06 03:53:50 PM: Compilation took 9.513e-03 seconds
(CVXPY) Oct 06 03:53:50 PM: Solver (including time spent in interface) took 5.091e-03 seconds
Iteration: 6, Objective: 0.3766
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:50 PM: Your problem has 288 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Finished problem compilation (took 5.179e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 288
  constraints   = 538
  nnz(P)        = 0
  nnz(A)        = 2942
  cones (total) = 1
    : Nonnegative = 1,  numel = 538

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9894e-01  +2.5111e+02  2.51e+02  9.36e-01  2.14e+01  1.00e+00  1.02e+00   ------   
  1  +5.9109e-01  +5.1314e+01  5.07e+01  3.57e-01  1.21e+01  3.98e-03  5.19e-01  6.36e-01  
  2  +5.3697e-01  +6.6860e+00  6.15e+00  1.07e-01  4.54e+00  1.13e-02  2.12e-01  8.73e-01  
  3  +4.9958e-01  +1.2892e+00  7.90e-01  2.41e-02  1.02e+00  1.34e-03  1.55e-01  8.28e-01  
  4  +4.9360e-01  +9.9915e-01  5.06e-01  1.13e-02  4.90e-01  1.95e-03  4.28e-02  7.84e-01  
  5  +4.7711e-01  +9.1786e-01  4.41e-01  4.36e-03  1.93e-01  4.07e-03  1.40e-02  7.14e-01  
  6  +4.6502e-01  +8.5880e-01  3.94e-01  2.77e-03  1.23e-01  4.24e-03  8.80e-03  4.66e-01  
  7  +4.1877e-01  +5.7021e-01  1.51e-01  6.37e-04  2.81e-02  1.51e-03  2.15e-03  9.21e-01  
  8  +4.1060e-01  +5.3617e-01  1.26e-01  5.22e-04  2.30e-02  1.14e-03  1.83e-03  2.43e-01  
  9  +3.8693e-01  +4.2876e-01  4.18e-02  1.77e-04  7.71e-03  2.03e-04  7.18e-04  7.77e-01  
 10  +3.7576e-01  +3.7914e-01  3.39e-03  1.42e-05  6.19e-04  1.26e-05  6.30e-05  9.23e-01  
 11  +3.7479e-01  +3.7507e-01  2.83e-04  1.18e-06  5.15e-05  9.65e-07  5.31e-06  9.25e-01  
 12  +3.7470e-01  +3.7470e-01  2.84e-06  1.19e-08  5.18e-07  9.69e-09  5.35e-08  9.90e-01  
 13  +3.7470e-01  +3.7470e-01  2.84e-08  1.19e-10  5.18e-09  9.69e-11  5.35e-10  9.90e-01  
 14  +3.7470e-01  +3.7470e-01  2.84e-10  1.19e-12  5.18e-11  9.69e-13  5.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.4737ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:50 PM: Optimal value: 3.747e-01
(CVXPY) Oct 06 03:53:50 PM: Compilation took 5.179e-03 seconds
(CVXPY) Oct 06 03:53:50 PM: Solver (including time spent in interface) took 4.629e-03 seconds
Iteration: 7, Objective: 0.3747
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:50 PM: Your problem has 289 variables, 250 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:50 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:50 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:50 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:50 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:50 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:50 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:50 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:50 PM: Finished problem compilation (took 6.145e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 289
  constraints   = 539
  nnz(P)        = 0
  nnz(A)        = 2951
  cones (total) = 1
    : Nonnegative = 1,  numel = 539

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9893e-01  +2.5110e+02  2.51e+02  9.36e-01  2.14e+01  1.00e+00  1.02e+00   ------   
  1  +5.9083e-01  +5.1323e+01  5.07e+01  3.58e-01  1.21e+01  3.98e-03  5.19e-01  6.36e-01  
  2  +5.3687e-01  +6.6754e+00  6.14e+00  1.07e-01  4.52e+00  1.14e-02  2.12e-01  8.74e-01  
  3  +4.9933e-01  +1.2604e+00  7.61e-01  2.33e-02  9.80e-01  1.31e-03  1.52e-01  8.61e-01  
  4  +4.9166e-01  +9.7637e-01  4.85e-01  9.85e-03  4.30e-01  2.21e-03  3.60e-02  8.23e-01  
  5  +4.6711e-01  +8.4477e-01  3.78e-01  2.87e-03  1.27e-01  5.08e-03  9.15e-03  7.82e-01  
  6  +4.6342e-01  +8.2029e-01  3.57e-01  2.43e-03  1.08e-01  3.14e-03  7.71e-03  4.68e-01  
  7  +4.2705e-01  +6.2077e-01  1.94e-01  8.91e-04  3.92e-02  2.04e-03  3.00e-03  6.55e-01  
  8  +4.0873e-01  +5.3085e-01  1.22e-01  5.37e-04  2.35e-02  1.04e-03  1.96e-03  4.39e-01  
  9  +3.8303e-01  +4.0923e-01  2.62e-02  1.12e-04  4.88e-03  9.37e-06  4.67e-04  9.47e-01  
 10  +3.7534e-01  +3.7730e-01  1.95e-03  8.24e-06  3.59e-04  8.01e-07  3.67e-05  9.34e-01  
 11  +3.7473e-01  +3.7481e-01  8.44e-05  3.56e-07  1.55e-05  3.76e-08  1.60e-06  9.60e-01  
 12  +3.7470e-01  +3.7470e-01  8.45e-07  3.56e-09  1.55e-07  3.76e-10  1.60e-08  9.90e-01  
 13  +3.7470e-01  +3.7470e-01  8.45e-09  3.56e-11  1.55e-09  3.76e-12  1.60e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 4.434ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:50 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:50 PM: Optimal value: 3.747e-01
(CVXPY) Oct 06 03:53:50 PM: Compilation took 6.145e-03 seconds
(CVXPY) Oct 06 03:53:50 PM: Solver (including time spent in interface) took 1.185e-02 seconds
FULL MODEL:
  Accruacy: 0.622
  Our objective: 0.244

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0)            <-- (term's our objective: 0.084)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1)                       <-- (term's our objective: 0.104)
 OR (x0 = 0 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.008)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 1)            <-- (term's our objective: 0.016)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.040445327758789
Best over terms:
  Our final objective: 0.10400000000000005
    Its accruacy: 0.552
    Its hamming distance: 2
  Shortest hamming distance: 1
    Its our objective: 0.08399999999999998
  Highest accruacy: 0.552
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

