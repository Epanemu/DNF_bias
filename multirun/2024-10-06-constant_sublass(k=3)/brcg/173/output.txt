Command:
python test_script.py -s constant_subclass -d 5 -n 100 --seed 34 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.12
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 100 remain. 
Dimension is 5.

Computed total variation: 0.52
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:18 PM: Your problem has 61 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:18 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:18 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:18 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:18 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:18 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:18 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:18 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:18 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:18 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:18 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:18 PM: Finished problem compilation (took 4.405e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:18 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 61
  constraints   = 111
  nnz(P)        = 0
  nnz(A)        = 411
  cones (total) = 1
    : Nonnegative = 1,  numel = 111

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9687e-01  +5.0957e+01  5.05e+01  8.62e-01  8.45e+00  1.00e+00  1.04e+00   ------   
  1  +5.9466e-01  +1.0456e+01  9.86e+00  3.19e-01  4.66e+00  3.97e-03  5.21e-01  6.46e-01  
  2  +5.2835e-01  +1.5410e+00  1.01e+00  6.81e-02  1.19e+00  1.14e-02  1.73e-01  9.51e-01  
  3  +4.9929e-01  +7.3321e-01  2.34e-01  1.48e-02  2.62e-01  6.41e-03  4.86e-02  8.89e-01  
  4  +4.8193e-01  +6.8501e-01  2.03e-01  5.81e-03  1.06e-01  1.02e-02  1.92e-02  6.53e-01  
  5  +4.6083e-01  +5.6145e-01  1.01e-01  2.32e-03  4.22e-02  3.20e-03  9.11e-03  6.74e-01  
  6  +4.3898e-01  +4.6433e-01  2.53e-02  5.31e-04  9.61e-03  3.21e-05  2.36e-03  9.13e-01  
  7  +4.3055e-01  +4.3184e-01  1.29e-03  2.57e-05  4.64e-04  1.45e-06  1.20e-04  9.51e-01  
  8  +4.3010e-01  +4.3012e-01  1.29e-05  2.57e-07  4.64e-06  1.46e-08  1.20e-06  9.90e-01  
  9  +4.3010e-01  +4.3010e-01  1.29e-07  2.57e-09  4.64e-08  1.46e-10  1.20e-08  9.90e-01  
 10  +4.3010e-01  +4.3010e-01  1.29e-09  2.57e-11  4.64e-10  1.46e-12  1.20e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 816.6µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:18 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:18 PM: Optimal value: 4.301e-01
(CVXPY) Oct 06 03:53:18 PM: Compilation took 4.405e-02 seconds
(CVXPY) Oct 06 03:53:18 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.4301
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:19 PM: Your problem has 71 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:19 PM: Finished problem compilation (took 1.161e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 71
  constraints   = 121
  nnz(P)        = 0
  nnz(A)        = 516
  cones (total) = 1
    : Nonnegative = 1,  numel = 121

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9209e-01  +5.1695e+01  5.12e+01  8.69e-01  8.64e+00  1.00e+00  1.06e+00   ------   
  1  +5.7014e-01  +1.0543e+01  9.97e+00  3.28e-01  4.62e+00  3.96e-03  5.31e-01  6.48e-01  
  2  +5.0294e-01  +1.7799e+00  1.28e+00  7.24e-02  1.31e+00  1.26e-02  1.79e-01  9.12e-01  
  3  +4.5448e-01  +1.3566e+00  9.02e-01  3.22e-02  5.95e-01  1.11e-02  8.79e-02  6.72e-01  
  4  +4.0355e-01  +6.9774e-01  2.94e-01  8.91e-03  1.61e-01  3.33e-03  3.11e-02  7.24e-01  
  5  +3.6990e-01  +4.8137e-01  1.11e-01  2.98e-03  5.32e-02  9.29e-04  1.33e-02  6.79e-01  
  6  +3.5392e-01  +3.7079e-01  1.69e-02  4.63e-04  8.19e-03  5.33e-05  2.49e-03  9.90e-01  
  7  +3.5028e-01  +3.5065e-01  3.64e-04  9.88e-06  1.75e-04  8.53e-07  5.62e-05  9.78e-01  
  8  +3.5020e-01  +3.5021e-01  9.01e-06  2.46e-07  4.34e-06  9.74e-09  1.49e-06  9.74e-01  
  9  +3.5020e-01  +3.5020e-01  8.95e-08  2.44e-09  4.31e-08  9.70e-11  1.49e-08  9.90e-01  
 10  +3.5020e-01  +3.5020e-01  8.96e-10  2.44e-11  4.31e-10  9.71e-13  1.49e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 734.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:19 PM: Optimal value: 3.502e-01
(CVXPY) Oct 06 03:53:19 PM: Compilation took 1.161e-02 seconds
(CVXPY) Oct 06 03:53:19 PM: Solver (including time spent in interface) took 5.922e-04 seconds
Iteration: 2, Objective: 0.3502
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:19 PM: Your problem has 81 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:19 PM: Finished problem compilation (took 6.086e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 81
  constraints   = 131
  nnz(P)        = 0
  nnz(A)        = 623
  cones (total) = 1
    : Nonnegative = 1,  numel = 131

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8901e-01  +5.1750e+01  5.13e+01  8.75e-01  8.83e+00  1.00e+00  1.07e+00   ------   
  1  +5.4913e-01  +1.0639e+01  1.01e+01  3.41e-01  4.67e+00  3.95e-03  5.43e-01  6.41e-01  
  2  +4.7950e-01  +2.1856e+00  1.71e+00  8.24e-02  1.48e+00  1.39e-02  2.00e-01  8.50e-01  
  3  +3.9050e-01  +1.2099e+00  8.19e-01  2.41e-02  4.47e-01  9.79e-03  6.91e-02  7.35e-01  
  4  +3.3475e-01  +6.3030e-01  2.96e-01  7.93e-03  1.45e-01  3.24e-03  2.63e-02  6.79e-01  
  5  +3.1087e-01  +4.8463e-01  1.74e-01  4.63e-03  8.53e-02  1.49e-03  1.66e-02  5.23e-01  
  6  +2.9589e-01  +4.0290e-01  1.07e-01  2.67e-03  5.07e-02  9.13e-04  1.00e-02  4.28e-01  
  7  +2.8830e-01  +3.5021e-01  6.19e-02  1.63e-03  2.99e-02  2.53e-04  6.49e-03  9.28e-01  
  8  +2.8222e-01  +3.2325e-01  4.10e-02  1.05e-03  1.95e-02  1.72e-04  4.28e-03  4.55e-01  
  9  +2.8061e-01  +3.1540e-01  3.48e-02  8.68e-04  1.63e-02  1.52e-04  3.50e-03  4.99e-01  
 10  +2.7107e-01  +2.7303e-01  1.96e-03  4.81e-05  9.08e-04  7.26e-06  2.05e-04  9.45e-01  
 11  +2.7057e-01  +2.7080e-01  2.24e-04  5.60e-06  1.05e-04  7.19e-07  2.46e-05  8.88e-01  
 12  +2.7050e-01  +2.7051e-01  7.39e-06  1.86e-07  3.46e-06  2.46e-08  8.50e-07  9.90e-01  
 13  +2.7050e-01  +2.7050e-01  7.39e-08  1.86e-09  3.46e-08  2.46e-10  8.52e-09  9.90e-01  
 14  +2.7050e-01  +2.7050e-01  7.39e-10  1.86e-11  3.46e-10  2.46e-12  8.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.251ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:19 PM: Optimal value: 2.705e-01
(CVXPY) Oct 06 03:53:19 PM: Compilation took 6.086e-03 seconds
(CVXPY) Oct 06 03:53:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.2705
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:19 PM: Your problem has 91 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:19 PM: Finished problem compilation (took 4.601e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 91
  constraints   = 141
  nnz(P)        = 0
  nnz(A)        = 689
  cones (total) = 1
    : Nonnegative = 1,  numel = 141

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8665e-01  +5.1846e+01  5.14e+01  8.80e-01  8.70e+00  1.00e+00  1.08e+00   ------   
  1  +5.3120e-01  +1.0861e+01  1.03e+01  3.56e-01  4.62e+00  3.95e-03  5.61e-01  6.28e-01  
  2  +4.5129e-01  +2.3199e+00  1.87e+00  8.68e-02  1.48e+00  1.53e-02  2.18e-01  8.39e-01  
  3  +3.6657e-01  +1.1682e+00  8.02e-01  2.60e-02  4.59e-01  8.76e-03  7.74e-02  7.25e-01  
  4  +3.1860e-01  +7.3688e-01  4.18e-01  1.19e-02  2.10e-01  4.51e-03  3.95e-02  5.32e-01  
  5  +2.7442e-01  +3.8414e-01  1.10e-01  3.12e-03  5.37e-02  7.74e-04  1.25e-02  7.81e-01  
  6  +2.5664e-01  +2.8168e-01  2.50e-02  7.12e-04  1.22e-02  1.05e-04  3.15e-03  9.02e-01  
  7  +2.5082e-01  +2.5173e-01  9.09e-04  2.58e-05  4.39e-04  3.26e-06  1.20e-04  9.64e-01  
  8  +2.5061e-01  +2.5067e-01  5.75e-05  1.64e-06  2.79e-05  1.91e-07  7.80e-06  9.53e-01  
  9  +2.5060e-01  +2.5060e-01  5.86e-07  1.68e-08  2.85e-07  1.94e-09  7.96e-08  9.90e-01  
 10  +2.5060e-01  +2.5060e-01  5.86e-09  1.68e-10  2.85e-09  1.95e-11  7.97e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 957.7µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:19 PM: Optimal value: 2.506e-01
(CVXPY) Oct 06 03:53:19 PM: Compilation took 4.601e-03 seconds
(CVXPY) Oct 06 03:53:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 4, Objective: 0.2506
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:53:19 PM: Your problem has 92 variables, 50 constraints, and 0 parameters.
(CVXPY) Oct 06 03:53:19 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:53:19 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:53:19 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:53:19 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:53:19 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:53:19 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:53:19 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:53:19 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:53:19 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:53:19 PM: Finished problem compilation (took 2.481e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 92
  constraints   = 142
  nnz(P)        = 0
  nnz(A)        = 695
  cones (total) = 1
    : Nonnegative = 1,  numel = 142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.8660e-01  +5.1840e+01  5.14e+01  8.81e-01  8.68e+00  1.00e+00  1.08e+00   ------   
  1  +5.3012e-01  +1.0881e+01  1.04e+01  3.57e-01  4.61e+00  3.95e-03  5.63e-01  6.27e-01  
  2  +4.5002e-01  +2.2702e+00  1.82e+00  8.46e-02  1.44e+00  1.56e-02  2.13e-01  8.53e-01  
  3  +3.6359e-01  +1.1898e+00  8.26e-01  2.63e-02  4.64e-01  9.24e-03  7.83e-02  7.20e-01  
  4  +3.1565e-01  +7.2765e-01  4.12e-01  1.18e-02  2.07e-01  4.44e-03  3.93e-02  5.42e-01  
  5  +2.7378e-01  +3.8861e-01  1.15e-01  3.26e-03  5.61e-02  9.30e-04  1.31e-02  7.50e-01  
  6  +2.5513e-01  +2.7451e-01  1.94e-02  5.50e-04  9.40e-03  8.15e-05  2.43e-03  9.40e-01  
  7  +2.5090e-01  +2.5212e-01  1.22e-03  3.48e-05  5.92e-04  4.71e-06  1.59e-04  9.36e-01  
  8  +2.5065e-01  +2.5082e-01  1.74e-04  5.00e-06  8.48e-05  5.95e-07  2.36e-05  9.56e-01  
  9  +2.5060e-01  +2.5060e-01  2.70e-06  7.78e-08  1.32e-06  8.91e-09  3.69e-07  9.85e-01  
 10  +2.5060e-01  +2.5060e-01  2.71e-08  7.78e-10  1.32e-08  8.91e-11  3.69e-09  9.90e-01  
 11  +2.5060e-01  +2.5060e-01  2.71e-10  7.78e-12  1.32e-10  8.91e-13  3.69e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 1.0537ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:53:19 PM: Problem status: optimal
(CVXPY) Oct 06 03:53:19 PM: Optimal value: 2.506e-01
(CVXPY) Oct 06 03:53:19 PM: Compilation took 2.481e-03 seconds
(CVXPY) Oct 06 03:53:19 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.75
  Our objective: 0.49999999999999994

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1)            <-- (term's our objective: 0.1)
 OR (x0 = 0 AND x2 = 0 AND x3 = 1 AND x4 = 1) <-- (term's our objective: 0.06)
 OR (x0 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0) <-- (term's our objective: 0.08)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1)            <-- (term's our objective: 0.06)
 OR (x0 = 1 AND x1 = 1 AND x3 = 0 AND x4 = 1) <-- (term's our objective: 0.16)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 4.858147144317627
Best over terms:
  Our final objective: 0.16000000000000006
    Its accruacy: 0.58
    Its hamming distance: 7
  Shortest hamming distance: 1
    Its our objective: 0.07999999999999997
  Highest accruacy: 0.58
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

