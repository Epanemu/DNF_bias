Command:
python test_script.py -s constant_subclass -d 10 -n 10 --seed 73 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.0
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 10.

Computed total variation: 1.0
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:16 PM: Your problem has 26 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:16 PM: Finished problem compilation (took 3.125e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 26
  constraints   = 31
  nnz(P)        = 0
  nnz(A)        = 86
  cones (total) = 1
    : Nonnegative = 1,  numel = 31

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.9978e-01  +6.5479e+00  6.15e+00  7.81e-01  2.80e+00  1.00e+00  1.37e+00   ------   
  1  +3.2265e-01  +1.0011e+00  6.78e-01  2.50e-01  1.04e+00  3.22e-03  5.58e-01  8.32e-01  
  2  +1.7681e-01  +4.3835e-01  2.62e-01  8.21e-02  3.72e-01  9.91e-03  2.59e-01  7.01e-01  
  3  +1.1177e-01  +1.6123e-01  4.95e-02  1.25e-02  6.24e-02  3.86e-03  5.37e-02  9.90e-01  
  4  +1.0048e-01  +1.0165e-01  1.17e-03  2.92e-04  1.48e-03  9.28e-05  1.33e-03  9.76e-01  
  5  +1.0021e-01  +1.0023e-01  2.15e-05  5.67e-06  2.85e-05  9.13e-07  2.60e-05  9.81e-01  
  6  +1.0020e-01  +1.0020e-01  2.33e-07  6.51e-08  3.19e-07  9.83e-09  3.05e-07  9.89e-01  
  7  +1.0020e-01  +1.0020e-01  2.33e-09  6.51e-10  3.19e-09  9.83e-11  3.05e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 269.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:16 PM: Optimal value: 1.002e-01
(CVXPY) Oct 06 04:22:16 PM: Compilation took 3.125e-02 seconds
(CVXPY) Oct 06 04:22:16 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.1002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:16 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:16 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 120
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.3999e-01  +6.6769e+00  6.34e+00  8.09e-01  2.93e+00  1.00e+00  1.39e+00   ------   
  1  +1.6907e-01  +8.8483e-01  7.16e-01  2.68e-01  1.03e+00  3.45e-03  5.38e-01  8.25e-01  
  2  -7.3793e-03  +2.2858e-01  2.36e-01  7.31e-02  3.26e-01  1.41e-02  2.24e-01  8.45e-01  
  3  +1.6519e-03  +1.1024e-02  9.37e-03  2.79e-03  1.33e-02  1.27e-03  1.01e-02  9.75e-01  
  4  +2.2175e-04  +3.4411e-04  1.22e-04  3.80e-05  1.81e-04  1.26e-05  1.39e-04  9.86e-01  
  5  +2.0045e-04  +2.0428e-04  3.83e-06  1.45e-06  6.45e-06  1.09e-07  5.45e-06  9.62e-01  
  6  +2.0000e-04  +2.0004e-04  3.91e-08  1.50e-08  6.63e-08  1.14e-09  5.65e-08  9.90e-01  
  7  +2.0000e-04  +2.0000e-04  3.91e-10  1.50e-10  6.63e-10  1.14e-11  5.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 216.9µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:16 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:22:16 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:22:16 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:16 PM: Your problem has 39 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:16 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 39
  constraints   = 44
  nnz(P)        = 0
  nnz(A)        = 131
  cones (total) = 1
    : Nonnegative = 1,  numel = 44

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.2070e-01  +6.5985e+00  6.28e+00  8.16e-01  2.97e+00  1.00e+00  1.37e+00   ------   
  1  +1.2661e-01  +8.4280e-01  7.16e-01  2.77e-01  1.04e+00  3.52e-03  5.25e-01  8.21e-01  
  2  -1.0306e-02  +1.3270e-01  1.43e-01  5.13e-02  2.34e-01  1.06e-02  1.46e-01  9.37e-01  
  3  +3.8230e-04  +4.7787e-03  4.40e-03  1.61e-03  7.47e-03  5.27e-04  4.98e-03  9.69e-01  
  4  +2.0125e-04  +2.9276e-04  9.15e-05  3.62e-05  1.65e-04  6.60e-06  1.12e-04  9.78e-01  
  5  +1.9711e-04  +2.0854e-04  1.14e-05  5.33e-06  2.18e-05  8.13e-07  1.61e-05  8.65e-01  
  6  +1.9997e-04  +2.0010e-04  1.30e-07  6.09e-08  2.48e-07  9.21e-09  1.84e-07  9.89e-01  
  7  +2.0000e-04  +2.0000e-04  1.30e-09  6.09e-10  2.48e-09  9.21e-11  1.84e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 236.5µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:16 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:22:16 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:16 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.0002
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:22:16 PM: Your problem has 40 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 04:22:16 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:22:16 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:22:16 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:22:16 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:22:16 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:22:16 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:22:16 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:22:16 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:22:16 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:22:16 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 40
  constraints   = 45
  nnz(P)        = 0
  nnz(A)        = 136
  cones (total) = 1
    : Nonnegative = 1,  numel = 45

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.0745e-01  +6.5490e+00  6.24e+00  8.19e-01  3.01e+00  1.00e+00  1.37e+00   ------   
  1  +1.0316e-01  +8.2612e-01  7.23e-01  2.82e-01  1.06e+00  7.92e-03  5.23e-01  8.18e-01  
  2  -8.5743e-03  +1.2396e-01  1.33e-01  4.96e-02  2.25e-01  1.34e-02  1.38e-01  9.90e-01  
  3  +3.5634e-04  +3.4836e-03  3.13e-03  1.16e-03  5.37e-03  4.93e-04  3.50e-03  9.77e-01  
  4  +2.0162e-04  +2.9306e-04  9.14e-05  3.73e-05  1.69e-04  9.59e-06  1.12e-04  9.68e-01  
  5  +1.9733e-04  +2.1053e-04  1.32e-05  6.34e-06  2.59e-05  1.14e-06  1.85e-05  8.91e-01  
  6  +1.9997e-04  +2.0011e-04  1.35e-07  6.51e-08  2.66e-07  1.17e-08  1.90e-07  9.90e-01  
  7  +2.0000e-04  +2.0000e-04  1.35e-09  6.51e-10  2.66e-09  1.17e-10  1.90e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 229.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:22:16 PM: Problem status: optimal
(CVXPY) Oct 06 04:22:16 PM: Optimal value: 2.000e-04
(CVXPY) Oct 06 04:22:16 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:22:16 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 1.0
  Our objective: 1.0

IF 
    (x2 = 1)                       <-- (term's our objective: 0.6)
 OR (x3 = 1 AND x6 = 1 AND x9 = 1) <-- (term's our objective: 0.8)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 2.1146020889282227
Best over terms:
  Our final objective: 0.8
    Its accruacy: 0.9
    Its hamming distance: 6
  Shortest hamming distance: 4
    Its our objective: 0.6
  Highest accruacy: 0.9
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

