Command:
python test_script.py -s constant_subclass -d 5 -n 10 --seed 56 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.2
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 5.

Computed total variation: 0.8
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:20 PM: Your problem has 16 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:20 PM: Finished problem compilation (took 3.595e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 16
  constraints   = 21
  nnz(P)        = 0
  nnz(A)        = 51
  cones (total) = 1
    : Nonnegative = 1,  numel = 21

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.6904e-01  +5.9361e+00  5.47e+00  7.27e-01  2.39e+00  1.00e+00  1.27e+00   ------   
  1  +5.2120e-01  +1.3233e+00  8.02e-01  2.58e-01  1.07e+00  3.86e-03  5.86e-01  6.96e-01  
  2  +3.8043e-01  +5.4297e-01  1.63e-01  5.25e-02  2.44e-01  9.67e-03  1.78e-01  8.10e-01  
  3  +3.2393e-01  +3.6381e-01  3.99e-02  1.02e-02  5.00e-02  2.87e-03  4.39e-02  7.91e-01  
  4  +3.0071e-01  +3.0185e-01  1.14e-03  2.85e-04  1.41e-03  3.98e-05  1.34e-03  9.77e-01  
  5  +3.0017e-01  +3.0027e-01  1.06e-04  2.62e-05  1.29e-04  3.37e-06  1.26e-04  9.07e-01  
  6  +3.0010e-01  +3.0010e-01  2.68e-06  6.28e-07  3.11e-06  1.15e-07  3.31e-06  9.90e-01  
  7  +3.0010e-01  +3.0010e-01  2.67e-08  6.26e-09  3.10e-08  1.15e-09  3.31e-08  9.90e-01  
  8  +3.0010e-01  +3.0010e-01  2.67e-10  6.26e-11  3.10e-10  1.15e-11  3.31e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 251.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:20 PM: Optimal value: 3.001e-01
(CVXPY) Oct 06 03:52:20 PM: Compilation took 3.595e-02 seconds
(CVXPY) Oct 06 03:52:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:20 PM: Your problem has 26 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:20 PM: Finished problem compilation (took 5.298e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 26
  constraints   = 31
  nnz(P)        = 0
  nnz(A)        = 71
  cones (total) = 1
    : Nonnegative = 1,  numel = 31

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.2799e-01  +6.1469e+00  5.72e+00  7.68e-01  2.30e+00  1.00e+00  1.28e+00   ------   
  1  +3.5197e-01  +1.2569e+00  9.05e-01  2.86e-01  9.97e-01  4.19e-03  5.85e-01  6.71e-01  
  2  +1.1465e-01  +3.9487e-01  2.80e-01  7.63e-02  3.01e-01  1.48e-02  2.38e-01  7.39e-01  
  3  +1.0496e-01  +1.2237e-01  1.74e-02  5.02e-03  2.01e-02  1.98e-03  1.91e-02  9.38e-01  
  4  +1.0037e-01  +1.0062e-01  2.48e-04  7.48e-05  2.98e-04  2.33e-05  2.91e-04  9.85e-01  
  5  +1.0030e-01  +1.0031e-01  7.96e-06  2.73e-06  1.06e-05  2.12e-07  1.13e-05  9.62e-01  
  6  +1.0030e-01  +1.0030e-01  8.05e-08  2.78e-08  1.07e-07  2.22e-09  1.16e-07  9.90e-01  
  7  +1.0030e-01  +1.0030e-01  8.05e-10  2.78e-10  1.07e-09  2.22e-11  1.16e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 169.4µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:20 PM: Optimal value: 1.003e-01
(CVXPY) Oct 06 03:52:20 PM: Compilation took 5.298e-03 seconds
(CVXPY) Oct 06 03:52:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.1003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:20 PM: Your problem has 36 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:20 PM: Finished problem compilation (took 5.590e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 36
  constraints   = 41
  nnz(P)        = 0
  nnz(A)        = 92
  cones (total) = 1
    : Nonnegative = 1,  numel = 41

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.8731e-01  +6.0170e+00  5.63e+00  7.94e-01  2.25e+00  1.00e+00  1.23e+00   ------   
  1  +2.5261e-01  +1.2729e+00  1.02e+00  3.41e-01  1.05e+00  4.49e-03  6.02e-01  6.09e-01  
  2  +1.6074e-01  +3.2341e-01  1.63e-01  6.08e-02  2.32e-01  1.53e-02  1.67e-01  8.90e-01  
  3  +1.0986e-01  +1.5235e-01  4.25e-02  1.29e-02  5.53e-02  4.31e-03  4.16e-02  8.15e-01  
  4  +1.0051e-01  +1.0125e-01  7.34e-04  2.30e-04  9.85e-04  6.25e-05  7.66e-04  9.82e-01  
  5  +1.0034e-01  +1.0040e-01  6.51e-05  2.66e-05  9.94e-05  1.26e-06  9.38e-05  8.85e-01  
  6  +1.0030e-01  +1.0030e-01  1.13e-06  4.80e-07  1.71e-06  5.45e-08  1.91e-06  9.88e-01  
  7  +1.0030e-01  +1.0030e-01  1.13e-08  4.79e-09  1.71e-08  5.44e-10  1.91e-08  9.90e-01  
  8  +1.0030e-01  +1.0030e-01  1.13e-10  4.79e-11  1.71e-10  5.44e-12  1.91e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 221.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:20 PM: Optimal value: 1.003e-01
(CVXPY) Oct 06 03:52:20 PM: Compilation took 5.590e-03 seconds
(CVXPY) Oct 06 03:52:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 3, Objective: 0.1003
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:52:20 PM: Your problem has 37 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:52:20 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:52:20 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:52:20 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:52:20 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:52:20 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:52:20 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:52:20 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:52:20 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:52:20 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:52:20 PM: Finished problem compilation (took 4.091e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 37
  constraints   = 42
  nnz(P)        = 0
  nnz(A)        = 96
  cones (total) = 1
    : Nonnegative = 1,  numel = 42

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.6608e-01  +6.0760e+00  5.71e+00  7.96e-01  2.31e+00  1.00e+00  1.24e+00   ------   
  1  +2.1293e-01  +1.2625e+00  1.05e+00  3.49e-01  1.09e+00  4.46e-03  6.15e-01  6.02e-01  
  2  +1.1455e-01  +3.0426e-01  1.90e-01  7.49e-02  2.78e-01  1.50e-02  2.01e-01  8.39e-01  
  3  +1.0058e-01  +1.1576e-01  1.52e-02  6.12e-03  2.32e-02  1.69e-03  1.89e-02  9.20e-01  
  4  +1.0032e-01  +1.0063e-01  3.13e-04  1.34e-04  5.03e-04  2.29e-05  4.19e-04  9.78e-01  
  5  +1.0030e-01  +1.0035e-01  5.10e-05  2.43e-05  8.57e-05  3.33e-06  8.48e-05  8.11e-01  
  6  +1.0030e-01  +1.0030e-01  9.69e-07  4.69e-07  1.65e-06  6.01e-08  1.65e-06  9.81e-01  
  7  +1.0030e-01  +1.0030e-01  9.69e-09  4.69e-09  1.65e-08  6.01e-10  1.65e-08  9.90e-01  
  8  +1.0030e-01  +1.0030e-01  9.69e-11  4.69e-11  1.65e-10  6.01e-12  1.65e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 226.8µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:52:20 PM: Problem status: optimal
(CVXPY) Oct 06 03:52:20 PM: Optimal value: 1.003e-01
(CVXPY) Oct 06 03:52:20 PM: Compilation took 4.091e-03 seconds
(CVXPY) Oct 06 03:52:20 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.9
  Our objective: 0.8

IF 
    (x0 = 0 AND x2 = 0 AND x4 = 0)                       <-- (term's our objective: 0.2)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 0 AND x4 = 0) <-- (term's our objective: 0.2)
 OR (x3 = 1 AND x4 = 1)                                  <-- (term's our objective: 0.4)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.8855783939361572
Best over terms:
  Our final objective: 0.4
    Its accruacy: 0.7
    Its hamming distance: 5
  Shortest hamming distance: 2
    Its our objective: 0.19999999999999996
  Highest accruacy: 0.7
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

