Command:
python test_script.py -s constant_subclass -d 8 -n 1000 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.122
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 1000 remain. 
Dimension is 8.

Computed total variation: 0.43000000000000005
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:25 PM: Your problem has 517 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:25 PM: Finished problem compilation (took 4.687e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 517
  constraints   = 1017
  nnz(P)        = 0
  nnz(A)        = 5517
  cones (total) = 1
    : Nonnegative = 1,  numel = 1017

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9995e-01  +5.0076e+02  5.00e+02  9.55e-01  3.42e+01  1.00e+00  1.00e+00   ------   
  1  +5.8386e-01  +1.0731e+02  1.07e+02  4.03e-01  2.15e+01  3.82e-03  5.62e-01  5.98e-01  
  2  +5.3340e-01  +1.2818e+01  1.23e+01  1.39e-01  9.41e+00  1.49e-02  2.60e-01  9.17e-01  
  3  +5.0621e-01  +3.1299e+00  2.62e+00  5.42e-02  3.55e+00  3.55e-05  2.34e-01  3.83e-01  
  4  +5.0053e-01  +7.2909e-01  2.29e-01  5.06e-03  3.49e-01  9.68e-06  6.51e-02  8.70e-01  
  5  +5.0011e-01  +6.4568e-01  1.46e-01  3.08e-03  2.13e-01  1.19e-05  2.18e-02  7.33e-01  
  6  +4.9737e-01  +6.2432e-01  1.27e-01  7.88e-04  5.53e-02  7.02e-05  2.57e-03  8.93e-01  
  7  +4.8973e-01  +5.7775e-01  8.80e-02  2.55e-04  1.79e-02  1.12e-04  8.22e-04  7.04e-01  
  8  +4.7905e-01  +5.2787e-01  4.88e-02  1.15e-04  8.06e-03  5.09e-05  4.14e-04  5.84e-01  
  9  +4.7641e-01  +5.1586e-01  3.95e-02  9.04e-05  6.34e-03  3.35e-05  3.36e-04  3.88e-01  
 10  +4.6664e-01  +4.7407e-01  7.43e-03  1.50e-05  1.05e-03  1.89e-06  6.16e-05  9.90e-01  
 11  +4.6420e-01  +4.6448e-01  2.78e-04  5.53e-07  3.87e-05  1.12e-07  2.33e-06  9.90e-01  
 12  +4.6410e-01  +4.6410e-01  2.79e-06  5.55e-09  3.89e-07  1.12e-09  2.34e-08  9.90e-01  
 13  +4.6410e-01  +4.6410e-01  2.79e-08  5.55e-11  3.89e-09  1.13e-11  2.34e-10  9.90e-01  
 14  +4.6410e-01  +4.6410e-01  2.79e-10  5.55e-13  3.89e-11  1.13e-13  2.35e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 10.4448ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:25 PM: Optimal value: 4.641e-01
(CVXPY) Oct 06 04:09:25 PM: Compilation took 4.687e-02 seconds
(CVXPY) Oct 06 04:09:25 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Initial LP solved
Iteration: 1, Objective: 0.4641
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:25 PM: Your problem has 527 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:25 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 527
  constraints   = 1027
  nnz(P)        = 0
  nnz(A)        = 6397
  cones (total) = 1
    : Nonnegative = 1,  numel = 1027

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9976e-01  +5.0136e+02  5.01e+02  9.55e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.8271e-01  +1.0751e+02  1.07e+02  4.05e-01  2.21e+01  3.81e-03  5.64e-01  5.97e-01  
  2  +5.3191e-01  +1.2520e+01  1.20e+01  1.36e-01  9.42e+00  1.52e-02  2.56e-01  9.34e-01  
  3  +5.0552e-01  +2.9864e+00  2.48e+00  5.16e-02  3.48e+00  3.62e-05  2.22e-01  4.61e-01  
  4  +5.0138e-01  +1.1553e+00  6.54e-01  1.45e-02  1.01e+00  1.47e-05  1.13e-01  5.58e-01  
  5  +4.9985e-01  +7.4006e-01  2.40e-01  4.95e-03  3.52e-01  1.41e-05  2.71e-02  8.27e-01  
  6  +4.9153e-01  +7.3458e-01  2.43e-01  1.10e-03  8.06e-02  1.01e-04  3.27e-03  9.21e-01  
  7  +4.8335e-01  +6.4999e-01  1.67e-01  6.29e-04  4.59e-02  6.72e-05  1.93e-03  5.18e-01  
  8  +4.8282e-01  +6.5251e-01  1.70e-01  5.24e-04  3.82e-02  7.55e-05  1.55e-03  4.00e-01  
  9  +4.7889e-01  +6.2901e-01  1.50e-01  3.62e-04  2.64e-02  7.48e-05  1.07e-03  5.56e-01  
 10  +4.7576e-01  +6.1296e-01  1.37e-01  2.90e-04  2.11e-02  7.25e-05  8.54e-04  4.48e-01  
 11  +4.6860e-01  +5.7037e-01  1.02e-01  2.31e-04  1.68e-02  4.50e-05  6.90e-04  5.65e-01  
 12  +4.5373e-01  +5.0744e-01  5.37e-02  1.02e-04  7.37e-03  2.54e-05  3.14e-04  6.67e-01  
 13  +4.3997e-01  +4.5074e-01  1.08e-02  1.87e-05  1.35e-03  4.59e-06  6.04e-05  8.24e-01  
 14  +4.3678e-01  +4.3825e-01  1.47e-03  2.50e-06  1.80e-04  9.43e-07  8.52e-06  9.83e-01  
 15  +4.3614e-01  +4.3622e-01  8.29e-05  1.39e-07  1.00e-05  5.22e-08  4.92e-07  9.59e-01  
 16  +4.3610e-01  +4.3611e-01  3.44e-06  5.77e-09  4.15e-07  2.24e-09  2.04e-08  9.76e-01  
 17  +4.3610e-01  +4.3610e-01  3.44e-08  5.78e-11  4.16e-09  2.24e-11  2.05e-10  9.90e-01  
 18  +4.3610e-01  +4.3610e-01  3.45e-10  5.78e-13  4.16e-11  2.25e-13  2.06e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 12.9999ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:25 PM: Optimal value: 4.361e-01
(CVXPY) Oct 06 04:09:25 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:25 PM: Solver (including time spent in interface) took 1.570e-02 seconds
Iteration: 2, Objective: 0.4361
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:25 PM: Your problem has 537 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:25 PM: Finished problem compilation (took 1.630e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 537
  constraints   = 1037
  nnz(P)        = 0
  nnz(A)        = 6800
  cones (total) = 1
    : Nonnegative = 1,  numel = 1037

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9968e-01  +5.0167e+02  5.01e+02  9.55e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.8144e-01  +1.0757e+02  1.07e+02  4.07e-01  2.21e+01  3.81e-03  5.65e-01  5.97e-01  
  2  +5.3086e-01  +1.2310e+01  1.18e+01  1.33e-01  9.17e+00  1.54e-02  2.51e-01  9.48e-01  
  3  +5.0497e-01  +2.8738e+00  2.37e+00  4.94e-02  3.35e+00  3.68e-05  2.11e-01  5.30e-01  
  4  +5.0132e-01  +1.2440e+00  7.43e-01  1.63e-02  1.14e+00  1.71e-05  1.04e-01  5.52e-01  
  5  +4.9791e-01  +1.0453e+00  5.47e-01  6.49e-03  4.71e-01  5.14e-05  2.02e-02  9.52e-01  
  6  +4.8602e-01  +8.8225e-01  3.96e-01  1.70e-03  1.25e-01  1.18e-04  4.90e-03  7.65e-01  
  7  +4.7551e-01  +7.7439e-01  2.99e-01  1.03e-03  7.55e-02  9.81e-05  3.08e-03  4.57e-01  
  8  +4.6568e-01  +7.0707e-01  2.41e-01  6.32e-04  4.61e-02  9.79e-05  1.88e-03  4.98e-01  
  9  +4.6097e-01  +6.8907e-01  2.28e-01  4.97e-04  3.62e-02  1.06e-04  1.48e-03  3.13e-01  
 10  +4.5328e-01  +6.2092e-01  1.68e-01  4.19e-04  3.04e-02  6.55e-05  1.30e-03  5.96e-01  
 11  +4.2706e-01  +5.0386e-01  7.68e-02  1.47e-04  1.06e-02  3.48e-05  4.82e-04  6.68e-01  
 12  +4.2242e-01  +4.8186e-01  5.94e-02  1.10e-04  7.91e-03  3.08e-05  3.65e-04  4.37e-01  
 13  +4.1590e-01  +4.4997e-01  3.41e-02  6.30e-05  4.54e-03  2.25e-05  2.15e-04  9.90e-01  
 14  +4.0752e-01  +4.1893e-01  1.14e-02  2.07e-05  1.49e-03  7.47e-06  7.34e-05  7.08e-01  
 15  +4.0357e-01  +4.0416e-01  5.89e-04  1.07e-06  7.69e-05  3.72e-07  3.86e-06  9.48e-01  
 16  +4.0338e-01  +4.0348e-01  9.07e-05  1.64e-07  1.18e-05  5.72e-08  5.94e-07  8.99e-01  
 17  +4.0335e-01  +4.0335e-01  9.24e-07  1.68e-09  1.20e-07  5.82e-10  6.06e-09  9.90e-01  
 18  +4.0335e-01  +4.0335e-01  9.25e-09  1.68e-11  1.21e-09  5.83e-12  6.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.2631ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:25 PM: Optimal value: 4.034e-01
(CVXPY) Oct 06 04:09:25 PM: Compilation took 1.630e-02 seconds
(CVXPY) Oct 06 04:09:25 PM: Solver (including time spent in interface) took 1.459e-02 seconds
Iteration: 3, Objective: 0.4034
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:25 PM: Your problem has 547 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:25 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:25 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:25 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:25 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:25 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:25 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:25 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:25 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:25 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:25 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 547
  constraints   = 1047
  nnz(P)        = 0
  nnz(A)        = 7051
  cones (total) = 1
    : Nonnegative = 1,  numel = 1047

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9957e-01  +5.0167e+02  5.01e+02  9.56e-01  3.53e+01  1.00e+00  1.01e+00   ------   
  1  +5.7936e-01  +1.0769e+02  1.07e+02  4.08e-01  2.20e+01  3.82e-03  5.66e-01  5.96e-01  
  2  +5.2945e-01  +1.2036e+01  1.15e+01  1.30e-01  8.90e+00  1.57e-02  2.44e-01  9.66e-01  
  3  +5.0444e-01  +2.7666e+00  2.26e+00  4.72e-02  3.21e+00  3.86e-05  1.96e-01  6.14e-01  
  4  +5.0095e-01  +1.2721e+00  7.71e-01  1.65e-02  1.16e+00  2.02e-05  8.54e-02  5.87e-01  
  5  +4.9025e-01  +1.1491e+00  6.59e-01  3.67e-03  2.71e-01  1.14e-04  9.96e-03  9.55e-01  
  6  +4.7256e-01  +8.5661e-01  3.84e-01  1.43e-03  1.05e-01  9.47e-05  4.06e-03  6.60e-01  
  7  +4.6226e-01  +8.2172e-01  3.59e-01  8.86e-04  6.49e-02  1.32e-04  2.51e-03  5.34e-01  
  8  +4.3963e-01  +6.3824e-01  1.99e-01  5.21e-04  3.78e-02  6.92e-05  1.63e-03  8.79e-01  
  9  +4.1100e-01  +4.9339e-01  8.24e-02  1.78e-04  1.28e-02  2.94e-05  6.04e-04  6.66e-01  
 10  +4.0605e-01  +4.7089e-01  6.48e-02  1.36e-04  9.76e-03  2.70e-05  4.72e-04  4.85e-01  
 11  +4.0404e-01  +4.6273e-01  5.87e-02  1.20e-04  8.64e-03  2.54e-05  4.20e-04  1.95e-01  
 12  +3.9539e-01  +4.2567e-01  3.03e-02  5.97e-05  4.28e-03  1.59e-05  2.14e-04  8.11e-01  
 13  +3.8664e-01  +3.8972e-01  3.07e-03  5.98e-06  4.28e-04  1.61e-06  2.25e-05  9.65e-01  
 14  +3.8586e-01  +3.8673e-01  8.65e-04  1.67e-06  1.19e-04  4.61e-07  6.36e-06  8.09e-01  
 15  +3.8557e-01  +3.8561e-01  4.59e-05  8.85e-08  6.33e-06  2.45e-08  3.38e-07  9.48e-01  
 16  +3.8555e-01  +3.8555e-01  4.60e-07  8.87e-10  6.35e-08  2.46e-10  3.39e-09  9.90e-01  
 17  +3.8555e-01  +3.8555e-01  4.60e-09  8.87e-12  6.35e-10  2.46e-12  3.40e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 14.4969ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:25 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:25 PM: Optimal value: 3.856e-01
(CVXPY) Oct 06 04:09:25 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:25 PM: Solver (including time spent in interface) took 1.561e-02 seconds
Iteration: 4, Objective: 0.3856
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:26 PM: Your problem has 557 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Finished problem compilation (took 9.465e-04 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 557
  constraints   = 1057
  nnz(P)        = 0
  nnz(A)        = 7276
  cones (total) = 1
    : Nonnegative = 1,  numel = 1057

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9956e-01  +5.0168e+02  5.01e+02  9.56e-01  3.52e+01  1.00e+00  1.01e+00   ------   
  1  +5.7811e-01  +1.0763e+02  1.07e+02  4.09e-01  2.18e+01  3.82e-03  5.65e-01  5.97e-01  
  2  +5.2853e-01  +1.1842e+01  1.13e+01  1.27e-01  8.63e+00  1.58e-02  2.38e-01  9.78e-01  
  3  +5.0406e-01  +2.6827e+00  2.18e+00  4.55e-02  3.10e+00  3.98e-05  1.83e-01  6.78e-01  
  4  +5.0054e-01  +1.2835e+00  7.83e-01  1.62e-02  1.14e+00  2.46e-05  7.16e-02  6.34e-01  
  5  +4.8510e-01  +1.2109e+00  7.26e-01  3.17e-03  2.35e-01  1.54e-04  8.33e-03  9.33e-01  
  6  +4.6205e-01  +9.2189e-01  4.60e-01  1.35e-03  9.90e-02  1.41e-04  3.75e-03  6.69e-01  
  7  +4.4383e-01  +7.8951e-01  3.46e-01  8.81e-04  6.42e-02  1.16e-04  2.58e-03  4.66e-01  
  8  +4.1305e-01  +5.9007e-01  1.77e-01  4.20e-04  3.02e-02  6.70e-05  1.38e-03  8.47e-01  
  9  +3.9509e-01  +4.9830e-01  1.03e-01  2.32e-04  1.66e-02  3.85e-05  8.24e-04  4.91e-01  
 10  +3.7842e-01  +4.1678e-01  3.84e-02  8.14e-05  5.80e-03  1.83e-05  3.14e-04  9.20e-01  
 11  +3.6825e-01  +3.7248e-01  4.23e-03  8.81e-06  6.26e-04  2.02e-06  3.68e-05  9.90e-01  
 12  +3.6689e-01  +3.6715e-01  2.54e-04  5.26e-07  3.73e-05  1.09e-07  2.27e-06  9.60e-01  
 13  +3.6680e-01  +3.6680e-01  3.26e-06  6.74e-09  4.79e-07  1.21e-09  2.96e-08  9.89e-01  
 14  +3.6680e-01  +3.6680e-01  3.26e-08  6.74e-11  4.79e-09  1.21e-11  2.96e-10  9.90e-01  
 15  +3.6680e-01  +3.6680e-01  3.26e-10  6.74e-13  4.79e-11  1.21e-13  2.96e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 13.9528ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:26 PM: Optimal value: 3.668e-01
(CVXPY) Oct 06 04:09:26 PM: Compilation took 9.465e-04 seconds
(CVXPY) Oct 06 04:09:26 PM: Solver (including time spent in interface) took 1.508e-02 seconds
Iteration: 5, Objective: 0.3668
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:26 PM: Your problem has 567 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 567
  constraints   = 1067
  nnz(P)        = 0
  nnz(A)        = 7510
  cones (total) = 1
    : Nonnegative = 1,  numel = 1067

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9951e-01  +5.0172e+02  5.01e+02  9.56e-01  3.51e+01  1.00e+00  1.01e+00   ------   
  1  +5.7653e-01  +1.0768e+02  1.07e+02  4.10e-01  2.17e+01  3.82e-03  5.65e-01  5.97e-01  
  2  +5.2730e-01  +1.1659e+01  1.11e+01  1.24e-01  8.41e+00  1.60e-02  2.33e-01  9.90e-01  
  3  +5.0395e-01  +2.6215e+00  2.12e+00  4.43e-02  3.04e+00  4.38e-05  1.63e-01  7.58e-01  
  4  +4.9983e-01  +1.3665e+00  8.67e-01  1.61e-02  1.15e+00  3.76e-05  5.63e-02  6.85e-01  
  5  +4.8130e-01  +1.2391e+00  7.58e-01  3.15e-03  2.35e-01  1.83e-04  8.20e-03  8.91e-01  
  6  +4.6587e-01  +1.0758e+00  6.10e-01  2.01e-03  1.48e-01  1.76e-04  5.40e-03  4.26e-01  
  7  +4.4395e-01  +8.8851e-01  4.45e-01  1.13e-03  8.29e-02  1.59e-04  3.21e-03  5.62e-01  
  8  +4.1704e-01  +6.6605e-01  2.49e-01  6.66e-04  4.81e-02  8.73e-05  2.12e-03  8.06e-01  
  9  +3.8257e-01  +4.6752e-01  8.49e-02  1.99e-04  1.42e-02  2.87e-05  7.08e-04  7.77e-01  
 10  +3.6861e-01  +3.9816e-01  2.95e-02  6.56e-05  4.67e-03  1.17e-05  2.53e-04  7.52e-01  
 11  +3.6714e-01  +3.9153e-01  2.44e-02  5.27e-05  3.76e-03  1.01e-05  2.04e-04  2.77e-01  
 12  +3.6502e-01  +3.8012e-01  1.51e-02  3.28e-05  2.33e-03  7.39e-06  1.31e-04  9.90e-01  
 13  +3.6132e-01  +3.6531e-01  3.99e-03  8.48e-06  6.02e-04  1.92e-06  3.50e-05  7.60e-01  
 14  +3.6021e-01  +3.6085e-01  6.35e-04  1.34e-06  9.48e-05  3.01e-07  5.66e-06  8.48e-01  
 15  +3.6000e-01  +3.6002e-01  1.18e-05  2.47e-08  1.75e-06  5.48e-09  1.05e-07  9.84e-01  
 16  +3.6000e-01  +3.6000e-01  1.18e-07  2.47e-10  1.75e-08  5.49e-11  1.05e-09  9.90e-01  
 17  +3.6000e-01  +3.6000e-01  1.18e-09  2.48e-12  1.76e-10  5.53e-13  1.06e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.3677ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:26 PM: Optimal value: 3.600e-01
(CVXPY) Oct 06 04:09:26 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:26 PM: Solver (including time spent in interface) took 1.558e-02 seconds
Iteration: 6, Objective: 0.3600
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:26 PM: Your problem has 577 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 577
  constraints   = 1077
  nnz(P)        = 0
  nnz(A)        = 7648
  cones (total) = 1
    : Nonnegative = 1,  numel = 1077

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9945e-01  +5.0170e+02  5.01e+02  9.56e-01  3.50e+01  1.00e+00  1.01e+00   ------   
  1  +5.7502e-01  +1.0778e+02  1.07e+02  4.11e-01  2.15e+01  3.82e-03  5.65e-01  5.96e-01  
  2  +5.2644e-01  +1.1779e+01  1.13e+01  1.24e-01  8.35e+00  1.62e-02  2.33e-01  9.90e-01  
  3  +5.0448e-01  +2.4355e+00  1.93e+00  4.08e-02  2.85e+00  4.98e-05  1.30e-01  8.53e-01  
  4  +4.9945e-01  +1.5046e+00  1.01e+00  1.46e-02  1.07e+00  6.77e-05  4.11e-02  7.24e-01  
  5  +4.8286e-01  +1.2954e+00  8.13e-01  3.43e-03  2.57e-01  2.06e-04  8.69e-03  8.04e-01  
  6  +4.6654e-01  +1.1158e+00  6.49e-01  2.18e-03  1.62e-01  1.92e-04  5.72e-03  4.13e-01  
  7  +4.5251e-01  +1.0048e+00  5.52e-01  1.64e-03  1.21e-01  1.89e-04  4.51e-03  5.46e-01  
  8  +4.2132e-01  +7.4964e-01  3.28e-01  8.61e-04  6.24e-02  1.10e-04  2.57e-03  5.79e-01  
  9  +4.0964e-01  +6.8072e-01  2.71e-01  6.93e-04  5.01e-02  1.08e-04  2.14e-03  5.44e-01  
 10  +3.7787e-01  +4.8383e-01  1.06e-01  2.57e-04  1.84e-02  3.53e-05  8.99e-04  6.29e-01  
 11  +3.6502e-01  +4.1167e-01  4.66e-02  1.09e-04  7.79e-03  2.14e-05  4.09e-04  8.76e-01  
 12  +3.5838e-01  +3.7955e-01  2.12e-02  4.76e-05  3.39e-03  1.02e-05  1.85e-04  6.14e-01  
 13  +3.5695e-01  +3.7171e-01  1.48e-02  3.33e-05  2.36e-03  6.87e-06  1.34e-04  8.96e-01  
 14  +3.5389e-01  +3.5919e-01  5.30e-03  1.16e-05  8.22e-04  2.46e-06  4.80e-05  7.13e-01  
 15  +3.5247e-01  +3.5329e-01  8.22e-04  1.78e-06  1.26e-04  3.75e-07  7.58e-06  8.54e-01  
 16  +3.5221e-01  +3.5223e-01  2.57e-05  5.53e-08  3.91e-06  1.15e-08  2.39e-07  9.80e-01  
 17  +3.5220e-01  +3.5220e-01  2.58e-07  5.54e-10  3.92e-08  1.15e-10  2.39e-09  9.90e-01  
 18  +3.5220e-01  +3.5220e-01  2.59e-09  5.56e-12  3.93e-10  1.16e-12  2.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 16.9086ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:26 PM: Optimal value: 3.522e-01
(CVXPY) Oct 06 04:09:26 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:09:26 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 7, Objective: 0.3522
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:26 PM: Your problem has 587 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 587
  constraints   = 1087
  nnz(P)        = 0
  nnz(A)        = 7819
  cones (total) = 1
    : Nonnegative = 1,  numel = 1087

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9944e-01  +5.0165e+02  5.01e+02  9.57e-01  3.48e+01  1.00e+00  1.01e+00   ------   
  1  +5.7461e-01  +1.0775e+02  1.07e+02  4.13e-01  2.14e+01  3.82e-03  5.65e-01  5.97e-01  
  2  +5.2622e-01  +1.1808e+01  1.13e+01  1.24e-01  8.24e+00  1.62e-02  2.32e-01  9.90e-01  
  3  +5.0455e-01  +2.3612e+00  1.86e+00  3.92e-02  2.74e+00  5.12e-05  1.22e-01  8.76e-01  
  4  +4.9882e-01  +1.5040e+00  1.01e+00  1.23e-02  9.09e-01  8.81e-05  3.30e-02  7.86e-01  
  5  +4.8220e-01  +1.2855e+00  8.03e-01  3.27e-03  2.45e-01  2.25e-04  8.22e-03  7.60e-01  
  6  +4.6943e-01  +1.1615e+00  6.92e-01  2.30e-03  1.72e-01  2.22e-04  5.93e-03  3.47e-01  
  7  +4.6111e-01  +1.0918e+00  6.31e-01  1.99e-03  1.48e-01  2.16e-04  5.26e-03  3.78e-01  
  8  +4.2956e-01  +8.2909e-01  4.00e-01  1.04e-03  7.62e-02  1.43e-04  2.94e-03  5.24e-01  
  9  +4.0716e-01  +6.7930e-01  2.72e-01  6.91e-04  5.04e-02  1.05e-04  2.09e-03  5.19e-01  
 10  +3.7681e-01  +4.9036e-01  1.14e-01  2.78e-04  2.03e-02  3.98e-05  9.40e-04  6.20e-01  
 11  +3.6442e-01  +4.2275e-01  5.83e-02  1.38e-04  1.01e-02  2.41e-05  4.97e-04  7.34e-01  
 12  +3.5746e-01  +3.8800e-01  3.05e-02  6.86e-05  5.08e-03  1.45e-05  2.55e-04  7.20e-01  
 13  +3.5557e-01  +3.7962e-01  2.41e-02  5.31e-05  3.93e-03  1.15e-05  2.00e-04  3.27e-01  
 14  +3.5015e-01  +3.5523e-01  5.09e-03  1.10e-05  8.13e-04  2.51e-06  4.41e-05  9.88e-01  
 15  +3.4871e-01  +3.4961e-01  9.00e-04  1.93e-06  1.41e-04  4.32e-07  7.97e-06  8.34e-01  
 16  +3.4841e-01  +3.4845e-01  3.98e-05  8.47e-08  6.19e-06  1.84e-08  3.55e-07  9.77e-01  
 17  +3.4840e-01  +3.4840e-01  4.00e-07  8.52e-10  6.23e-08  1.85e-10  3.57e-09  9.90e-01  
 18  +3.4840e-01  +3.4840e-01  4.00e-09  8.52e-12  6.23e-10  1.85e-12  3.57e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.2113ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:26 PM: Optimal value: 3.484e-01
(CVXPY) Oct 06 04:09:26 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:26 PM: Solver (including time spent in interface) took 1.599e-02 seconds
Iteration: 8, Objective: 0.3484
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:26 PM: Your problem has 597 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:26 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:26 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:26 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:26 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:26 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:26 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:26 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:26 PM: Finished problem compilation (took 1.571e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 597
  constraints   = 1097
  nnz(P)        = 0
  nnz(A)        = 7922
  cones (total) = 1
    : Nonnegative = 1,  numel = 1097

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9938e-01  +5.0175e+02  5.01e+02  9.57e-01  3.47e+01  1.00e+00  1.01e+00   ------   
  1  +5.7353e-01  +1.0778e+02  1.07e+02  4.13e-01  2.12e+01  3.83e-03  5.65e-01  5.97e-01  
  2  +5.2564e-01  +1.1879e+01  1.14e+01  1.24e-01  8.17e+00  1.63e-02  2.32e-01  9.90e-01  
  3  +5.0470e-01  +2.1777e+00  1.67e+00  3.47e-02  2.46e+00  5.48e-05  1.02e-01  9.21e-01  
  4  +4.9931e-01  +1.8227e+00  1.32e+00  1.16e-02  8.68e-01  1.37e-04  2.88e-02  7.72e-01  
  5  +4.8201e-01  +1.5111e+00  1.03e+00  3.66e-03  2.76e-01  2.62e-04  8.95e-03  7.02e-01  
  6  +4.5369e-01  +1.1228e+00  6.69e-01  1.85e-03  1.37e-01  2.15e-04  4.79e-03  5.90e-01  
  7  +4.2583e-01  +8.4570e-01  4.20e-01  1.16e-03  8.50e-02  1.31e-04  3.27e-03  5.41e-01  
  8  +3.9843e-01  +6.5467e-01  2.56e-01  6.64e-04  4.83e-02  7.71e-05  2.02e-03  4.29e-01  
  9  +3.6974e-01  +4.7951e-01  1.10e-01  2.67e-04  1.95e-02  3.54e-05  9.09e-04  6.52e-01  
 10  +3.5701e-01  +4.1401e-01  5.70e-02  1.32e-04  9.60e-03  2.28e-05  4.81e-04  7.27e-01  
 11  +3.5033e-01  +3.8172e-01  3.14e-02  7.09e-05  5.23e-03  1.33e-05  2.71e-04  5.73e-01  
 12  +3.4525e-01  +3.5799e-01  1.27e-02  2.86e-05  2.10e-03  5.38e-06  1.14e-04  6.08e-01  
 13  +3.4348e-01  +3.4956e-01  6.07e-03  1.35e-05  9.89e-04  2.66e-06  5.56e-05  7.19e-01  
 14  +3.4192e-01  +3.4291e-01  9.95e-04  2.19e-06  1.60e-04  4.27e-07  9.32e-06  8.42e-01  
 15  +3.4161e-01  +3.4166e-01  4.32e-05  9.47e-08  6.90e-06  1.84e-08  4.08e-07  9.75e-01  
 16  +3.4160e-01  +3.4160e-01  4.34e-07  9.51e-10  6.93e-08  1.85e-10  4.10e-09  9.90e-01  
 17  +3.4160e-01  +3.4160e-01  4.34e-09  9.51e-12  6.93e-10  1.85e-12  4.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 17.3731ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:26 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:26 PM: Optimal value: 3.416e-01
(CVXPY) Oct 06 04:09:26 PM: Compilation took 1.571e-02 seconds
(CVXPY) Oct 06 04:09:26 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 9, Objective: 0.3416
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:27 PM: Your problem has 607 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Finished problem compilation (took 1.561e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 607
  constraints   = 1107
  nnz(P)        = 0
  nnz(A)        = 8119
  cones (total) = 1
    : Nonnegative = 1,  numel = 1107

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +5.0181e+02  5.01e+02  9.57e-01  3.46e+01  1.00e+00  1.01e+00   ------   
  1  +5.7192e-01  +1.0782e+02  1.07e+02  4.14e-01  2.11e+01  3.83e-03  5.64e-01  5.97e-01  
  2  +5.2451e-01  +1.1988e+01  1.15e+01  1.23e-01  8.09e+00  1.65e-02  2.31e-01  9.90e-01  
  3  +5.0481e-01  +1.8630e+00  1.36e+00  2.64e-02  1.91e+00  6.18e-05  7.31e-02  9.66e-01  
  4  +5.0409e-01  +2.0005e+00  1.50e+00  1.62e-02  1.21e+00  1.21e-04  3.92e-02  5.13e-01  
  5  +4.9434e-01  +1.9535e+00  1.46e+00  6.04e-03  4.58e-01  3.00e-04  1.42e-02  7.59e-01  
  6  +4.7078e-01  +1.3326e+00  8.62e-01  3.05e-03  2.27e-01  2.08e-04  7.62e-03  6.14e-01  
  7  +4.5619e-01  +1.1822e+00  7.26e-01  2.17e-03  1.61e-01  2.09e-04  5.56e-03  3.85e-01  
  8  +4.4102e-01  +1.0434e+00  6.02e-01  1.66e-03  1.22e-01  1.86e-04  4.40e-03  3.06e-01  
  9  +4.0042e-01  +6.7305e-01  2.73e-01  7.50e-04  5.43e-02  1.08e-04  2.26e-03  9.90e-01  
 10  +3.6682e-01  +4.7410e-01  1.07e-01  2.66e-04  1.94e-02  4.03e-05  8.92e-04  7.03e-01  
 11  +3.5669e-01  +4.3019e-01  7.35e-02  1.70e-04  1.25e-02  2.99e-05  5.96e-04  4.75e-01  
 12  +3.4510e-01  +3.7819e-01  3.31e-02  7.28e-05  5.39e-03  1.42e-05  2.73e-04  6.73e-01  
 13  +3.3850e-01  +3.4936e-01  1.09e-02  2.32e-05  1.72e-03  4.86e-06  9.19e-05  7.66e-01  
 14  +3.3550e-01  +3.3687e-01  1.37e-03  2.89e-06  2.13e-04  6.38e-07  1.19e-05  9.77e-01  
 15  +3.3501e-01  +3.3504e-01  2.74e-05  5.77e-08  4.24e-06  1.15e-08  2.41e-07  9.83e-01  
 16  +3.3500e-01  +3.3500e-01  2.74e-07  5.77e-10  4.24e-08  1.15e-10  2.41e-09  9.90e-01  
 17  +3.3500e-01  +3.3500e-01  2.74e-09  5.78e-12  4.24e-10  1.15e-12  2.41e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 18.3213ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:27 PM: Optimal value: 3.350e-01
(CVXPY) Oct 06 04:09:27 PM: Compilation took 1.561e-02 seconds
(CVXPY) Oct 06 04:09:27 PM: Solver (including time spent in interface) took 1.639e-02 seconds
Iteration: 10, Objective: 0.3350
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:27 PM: Your problem has 617 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Finished problem compilation (took 1.508e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 617
  constraints   = 1117
  nnz(P)        = 0
  nnz(A)        = 8254
  cones (total) = 1
    : Nonnegative = 1,  numel = 1117

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +5.0184e+02  5.01e+02  9.57e-01  3.45e+01  1.00e+00  1.01e+00   ------   
  1  +5.7086e-01  +1.0784e+02  1.07e+02  4.15e-01  2.09e+01  3.83e-03  5.64e-01  5.97e-01  
  2  +5.2369e-01  +1.2043e+01  1.15e+01  1.23e-01  8.02e+00  1.66e-02  2.30e-01  9.90e-01  
  3  +5.0552e-01  +2.0600e+00  1.55e+00  2.80e-02  2.03e+00  6.79e-04  7.32e-02  8.93e-01  
  4  +5.0553e-01  +2.1458e+00  1.64e+00  2.12e-02  1.57e+00  9.47e-04  5.15e-02  3.26e-01  
  5  +5.0268e-01  +2.0792e+00  1.58e+00  1.93e-02  1.41e+00  7.18e-04  5.01e-02  2.12e-01  
  6  +4.9136e-01  +1.8606e+00  1.37e+00  5.13e-03  3.88e-01  2.01e-03  1.20e-02  7.73e-01  
  7  +4.6874e-01  +1.3766e+00  9.08e-01  3.18e-03  2.36e-01  8.88e-04  7.94e-03  5.04e-01  
  8  +4.5412e-01  +1.2217e+00  7.68e-01  2.31e-03  1.70e-01  5.85e-04  5.93e-03  5.34e-01  
  9  +4.1461e-01  +8.1942e-01  4.05e-01  1.13e-03  8.16e-02  8.75e-05  3.20e-03  9.39e-01  
 10  +3.8442e-01  +6.1391e-01  2.29e-01  6.01e-04  4.33e-02  5.15e-05  1.87e-03  4.71e-01  
 11  +3.5533e-01  +4.4764e-01  9.23e-02  2.22e-04  1.61e-02  2.80e-05  7.71e-04  7.13e-01  
 12  +3.4737e-01  +4.1130e-01  6.39e-02  1.48e-04  1.08e-02  2.15e-05  5.37e-04  4.31e-01  
 13  +3.3557e-01  +3.5712e-01  2.16e-02  4.76e-05  3.50e-03  7.82e-06  1.88e-04  7.35e-01  
 14  +3.3077e-01  +3.3560e-01  4.83e-03  1.05e-05  7.68e-04  2.16e-06  4.31e-05  9.56e-01  
 15  +3.2930e-01  +3.2988e-01  5.80e-04  1.25e-06  9.13e-05  2.51e-07  5.28e-06  9.01e-01  
 16  +3.2910e-01  +3.2911e-01  7.60e-06  1.64e-08  1.20e-06  3.14e-09  6.98e-08  9.87e-01  
 17  +3.2910e-01  +3.2910e-01  7.60e-08  1.64e-10  1.20e-08  3.13e-11  6.98e-10  9.90e-01  
 18  +3.2910e-01  +3.2910e-01  7.67e-10  1.65e-12  1.21e-10  3.17e-13  7.05e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.227ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:27 PM: Optimal value: 3.291e-01
(CVXPY) Oct 06 04:09:27 PM: Compilation took 1.508e-02 seconds
(CVXPY) Oct 06 04:09:27 PM: Solver (including time spent in interface) took 1.564e-02 seconds
Iteration: 11, Objective: 0.3291
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:27 PM: Your problem has 627 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 627
  constraints   = 1127
  nnz(P)        = 0
  nnz(A)        = 8385
  cones (total) = 1
    : Nonnegative = 1,  numel = 1127

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9934e-01  +5.0193e+02  5.01e+02  9.57e-01  3.44e+01  1.00e+00  1.01e+00   ------   
  1  +5.6955e-01  +1.0791e+02  1.07e+02  4.15e-01  2.08e+01  3.84e-03  5.63e-01  5.97e-01  
  2  +5.2307e-01  +1.2111e+01  1.16e+01  1.22e-01  7.90e+00  1.67e-02  2.29e-01  9.90e-01  
  3  +5.0648e-01  +2.5675e+00  2.06e+00  3.41e-02  2.45e+00  1.73e-03  8.44e-02  7.83e-01  
  4  +5.0603e-01  +2.6014e+00  2.10e+00  2.60e-02  1.90e+00  2.25e-03  6.17e-02  2.85e-01  
  5  +5.0276e-01  +2.4558e+00  1.95e+00  2.35e-02  1.70e+00  1.54e-03  5.98e-02  2.21e-01  
  6  +4.8879e-01  +2.0819e+00  1.59e+00  5.84e-03  4.40e-01  4.09e-03  1.37e-02  7.82e-01  
  7  +4.6673e-01  +1.5093e+00  1.04e+00  3.64e-03  2.69e-01  1.72e-03  9.03e-03  4.85e-01  
  8  +4.5147e-01  +1.3144e+00  8.63e-01  2.62e-03  1.93e-01  1.11e-03  6.72e-03  4.68e-01  
  9  +4.3471e-01  +1.1320e+00  6.97e-01  1.97e-03  1.44e-01  7.61e-04  5.25e-03  3.52e-01  
 10  +3.8838e-01  +6.5808e-01  2.70e-01  7.45e-04  5.31e-02  6.76e-06  2.29e-03  9.61e-01  
 11  +3.6931e-01  +5.5374e-01  1.84e-01  4.78e-04  3.40e-02  1.97e-05  1.56e-03  4.39e-01  
 12  +3.5020e-01  +4.5371e-01  1.04e-01  2.52e-04  1.79e-02  1.55e-05  8.98e-04  4.96e-01  
 13  +3.3187e-01  +3.6253e-01  3.07e-02  7.08e-05  5.02e-03  7.41e-06  2.82e-04  7.84e-01  
 14  +3.2431e-01  +3.2743e-01  3.12e-03  7.10e-06  5.02e-04  1.29e-06  3.03e-05  9.90e-01  
 15  +3.2332e-01  +3.2340e-01  7.68e-05  1.75e-07  1.23e-05  2.93e-08  7.58e-07  9.75e-01  
 16  +3.2330e-01  +3.2330e-01  7.77e-07  1.77e-09  1.25e-07  2.96e-10  7.69e-09  9.90e-01  
 17  +3.2330e-01  +3.2330e-01  7.79e-09  1.77e-11  1.25e-09  2.97e-12  7.70e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 19.2556ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:27 PM: Optimal value: 3.233e-01
(CVXPY) Oct 06 04:09:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:27 PM: Solver (including time spent in interface) took 3.064e-02 seconds
Iteration: 12, Objective: 0.3233
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:27 PM: Your problem has 637 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 637
  constraints   = 1137
  nnz(P)        = 0
  nnz(A)        = 8510
  cones (total) = 1
    : Nonnegative = 1,  numel = 1137

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9933e-01  +5.0191e+02  5.01e+02  9.57e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.6881e-01  +1.0796e+02  1.07e+02  4.16e-01  2.07e+01  3.84e-03  5.63e-01  5.97e-01  
  2  +5.2261e-01  +1.2158e+01  1.16e+01  1.22e-01  7.84e+00  1.67e-02  2.29e-01  9.90e-01  
  3  +5.0685e-01  +2.7759e+00  2.27e+00  3.59e-02  2.57e+00  2.19e-03  8.73e-02  7.44e-01  
  4  +5.0624e-01  +2.7826e+00  2.28e+00  2.77e-02  2.01e+00  2.76e-03  6.53e-02  2.67e-01  
  5  +5.0282e-01  +2.6161e+00  2.11e+00  2.50e-02  1.80e+00  1.85e-03  6.28e-02  2.37e-01  
  6  +4.8840e-01  +2.1496e+00  1.66e+00  6.23e-03  4.67e-01  4.56e-03  1.46e-02  7.79e-01  
  7  +4.6455e-01  +1.4943e+00  1.03e+00  3.63e-03  2.68e-01  1.66e-03  9.08e-03  5.42e-01  
  8  +4.5253e-01  +1.3565e+00  9.04e-01  2.80e-03  2.05e-01  1.14e-03  7.16e-03  4.45e-01  
  9  +4.3683e-01  +1.1741e+00  7.37e-01  2.12e-03  1.54e-01  7.86e-04  5.62e-03  3.52e-01  
 10  +3.9341e-01  +7.1000e-01  3.17e-01  8.90e-04  6.33e-02  7.07e-06  2.68e-03  9.82e-01  
 11  +3.6910e-01  +5.6080e-01  1.92e-01  5.06e-04  3.59e-02  1.63e-05  1.65e-03  4.70e-01  
 12  +3.5517e-01  +4.8629e-01  1.31e-01  3.30e-04  2.34e-02  1.53e-05  1.14e-03  3.67e-01  
 13  +3.3766e-01  +3.9532e-01  5.77e-02  1.38e-04  9.78e-03  1.16e-05  5.23e-04  6.57e-01  
 14  +3.2662e-01  +3.4167e-01  1.50e-02  3.50e-05  2.47e-03  3.33e-06  1.45e-04  7.58e-01  
 15  +3.2292e-01  +3.2460e-01  1.68e-03  3.85e-06  2.71e-04  5.19e-07  1.67e-05  9.39e-01  
 16  +3.2241e-01  +3.2245e-01  4.06e-05  9.32e-08  6.55e-06  1.44e-08  4.09e-07  9.90e-01  
 17  +3.2240e-01  +3.2240e-01  4.06e-07  9.33e-10  6.55e-08  1.45e-10  4.09e-09  9.90e-01  
 18  +3.2240e-01  +3.2240e-01  4.06e-09  9.33e-12  6.55e-10  1.45e-12  4.10e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.121ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:27 PM: Optimal value: 3.224e-01
(CVXPY) Oct 06 04:09:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:27 PM: Solver (including time spent in interface) took 3.322e-02 seconds
Iteration: 13, Objective: 0.3224
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:27 PM: Your problem has 642 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:27 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:27 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:27 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:27 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:27 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:27 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:27 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:27 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 642
  constraints   = 1142
  nnz(P)        = 0
  nnz(A)        = 8552
  cones (total) = 1
    : Nonnegative = 1,  numel = 1142

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0195e+02  5.01e+02  9.58e-01  3.42e+01  1.00e+00  1.01e+00   ------   
  1  +5.6816e-01  +1.0798e+02  1.07e+02  4.16e-01  2.06e+01  3.84e-03  5.63e-01  5.97e-01  
  2  +5.2232e-01  +1.2200e+01  1.17e+01  1.22e-01  7.81e+00  1.68e-02  2.28e-01  9.90e-01  
  3  +5.0701e-01  +2.8737e+00  2.37e+00  3.65e-02  2.61e+00  2.42e-03  8.78e-02  7.27e-01  
  4  +5.0634e-01  +2.8713e+00  2.36e+00  2.84e-02  2.06e+00  3.00e-03  6.66e-02  2.55e-01  
  5  +5.0273e-01  +2.6983e+00  2.20e+00  2.55e-02  1.83e+00  1.98e-03  6.38e-02  2.56e-01  
  6  +4.8725e-01  +2.1681e+00  1.68e+00  6.11e-03  4.58e-01  4.86e-03  1.44e-02  7.88e-01  
  7  +4.6376e-01  +1.5420e+00  1.08e+00  3.66e-03  2.70e-01  2.06e-03  9.09e-03  5.09e-01  
  8  +4.5062e-01  +1.3796e+00  9.29e-01  2.77e-03  2.03e-01  1.34e-03  7.06e-03  4.62e-01  
  9  +4.1299e-01  +8.9879e-01  4.86e-01  1.40e-03  1.00e-01  1.46e-04  3.93e-03  7.82e-01  
 10  +3.7381e-01  +6.0184e-01  2.28e-01  6.11e-04  4.33e-02  6.49e-05  1.93e-03  5.80e-01  
 11  +3.5368e-01  +4.9154e-01  1.38e-01  3.46e-04  2.45e-02  4.76e-05  1.18e-03  5.60e-01  
 12  +3.3504e-01  +3.9062e-01  5.56e-02  1.34e-04  9.46e-03  2.24e-05  5.08e-04  7.76e-01  
 13  +3.2471e-01  +3.3997e-01  1.53e-02  3.58e-05  2.52e-03  5.96e-06  1.48e-04  7.46e-01  
 14  +3.2102e-01  +3.2275e-01  1.72e-03  3.99e-06  2.80e-04  6.71e-07  1.74e-05  9.32e-01  
 15  +3.2052e-01  +3.2056e-01  4.82e-05  1.12e-07  7.82e-06  1.86e-08  4.92e-07  9.90e-01  
 16  +3.2050e-01  +3.2050e-01  4.83e-07  1.12e-09  7.83e-08  1.86e-10  4.93e-09  9.90e-01  
 17  +3.2050e-01  +3.2050e-01  4.83e-09  1.12e-11  7.83e-10  1.86e-12  4.94e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 20.1341ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:27 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:27 PM: Optimal value: 3.205e-01
(CVXPY) Oct 06 04:09:27 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:27 PM: Solver (including time spent in interface) took 3.198e-02 seconds
Iteration: 14, Objective: 0.3205
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:28 PM: Your problem has 644 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Finished problem compilation (took 1.509e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 644
  constraints   = 1144
  nnz(P)        = 0
  nnz(A)        = 8578
  cones (total) = 1
    : Nonnegative = 1,  numel = 1144

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9932e-01  +5.0192e+02  5.01e+02  9.58e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.6780e-01  +1.0800e+02  1.07e+02  4.16e-01  2.06e+01  3.84e-03  5.63e-01  5.96e-01  
  2  +5.2209e-01  +1.2230e+01  1.17e+01  1.22e-01  7.81e+00  1.68e-02  2.28e-01  9.90e-01  
  3  +5.0706e-01  +2.9222e+00  2.42e+00  3.66e-02  2.62e+00  2.55e-03  8.77e-02  7.18e-01  
  4  +5.0637e-01  +2.9136e+00  2.41e+00  2.87e-02  2.08e+00  3.13e-03  6.71e-02  2.47e-01  
  5  +5.0265e-01  +2.7404e+00  2.24e+00  2.57e-02  1.84e+00  2.05e-03  6.41e-02  2.67e-01  
  6  +4.8649e-01  +2.1800e+00  1.69e+00  6.04e-03  4.52e-01  5.03e-03  1.42e-02  7.93e-01  
  7  +4.6564e-01  +1.6437e+00  1.18e+00  3.90e-03  2.88e-01  2.67e-03  9.59e-03  4.38e-01  
  8  +4.5018e-01  +1.4228e+00  9.73e-01  2.84e-03  2.08e-01  1.68e-03  7.21e-03  4.55e-01  
  9  +4.1748e-01  +9.6032e-01  5.43e-01  1.65e-03  1.18e-01  1.95e-04  4.61e-03  7.01e-01  
 10  +3.7119e-01  +5.8117e-01  2.10e-01  5.64e-04  3.98e-02  6.70e-05  1.79e-03  6.77e-01  
 11  +3.5448e-01  +4.9880e-01  1.44e-01  3.63e-04  2.57e-02  5.34e-05  1.23e-03  5.04e-01  
 12  +3.3338e-01  +3.8679e-01  5.34e-02  1.28e-04  9.07e-03  2.12e-05  4.88e-04  7.40e-01  
 13  +3.2396e-01  +3.4038e-01  1.64e-02  3.85e-05  2.72e-03  6.38e-06  1.59e-04  7.00e-01  
 14  +3.2029e-01  +3.2268e-01  2.39e-03  5.54e-06  3.92e-04  9.66e-07  2.38e-05  9.24e-01  
 15  +3.1999e-01  +3.2147e-01  1.48e-03  3.35e-06  2.40e-04  6.16e-07  1.45e-05  4.90e-01  
 16  +3.1965e-01  +3.2008e-01  4.26e-04  9.48e-07  6.83e-05  1.76e-07  4.17e-06  9.90e-01  
 17  +3.1950e-01  +3.1951e-01  6.63e-06  1.47e-08  1.06e-06  2.68e-09  6.50e-08  9.86e-01  
 18  +3.1950e-01  +3.1950e-01  6.65e-08  1.47e-10  1.06e-08  2.69e-11  6.52e-10  9.90e-01  
 19  +3.1950e-01  +3.1950e-01  6.65e-10  1.47e-12  1.06e-10  2.70e-13  6.54e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.4088ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:28 PM: Optimal value: 3.195e-01
(CVXPY) Oct 06 04:09:28 PM: Compilation took 1.509e-02 seconds
(CVXPY) Oct 06 04:09:28 PM: Solver (including time spent in interface) took 1.572e-02 seconds
Iteration: 15, Objective: 0.3195
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:28 PM: Your problem has 646 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 646
  constraints   = 1146
  nnz(P)        = 0
  nnz(A)        = 8593
  cones (total) = 1
    : Nonnegative = 1,  numel = 1146

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0193e+02  5.01e+02  9.58e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.6733e-01  +1.0808e+02  1.08e+02  4.17e-01  2.06e+01  3.84e-03  5.64e-01  5.96e-01  
  2  +5.2190e-01  +1.2278e+01  1.18e+01  1.22e-01  7.80e+00  1.69e-02  2.28e-01  9.90e-01  
  3  +5.0714e-01  +2.9741e+00  2.47e+00  3.69e-02  2.64e+00  2.67e-03  8.78e-02  7.10e-01  
  4  +5.0643e-01  +2.9580e+00  2.45e+00  2.90e-02  2.10e+00  3.25e-03  6.77e-02  2.40e-01  
  5  +5.0258e-01  +2.7826e+00  2.28e+00  2.59e-02  1.85e+00  2.11e-03  6.44e-02  2.79e-01  
  6  +4.8578e-01  +2.1824e+00  1.70e+00  5.94e-03  4.45e-01  5.16e-03  1.39e-02  7.98e-01  
  7  +4.6707e-01  +1.7147e+00  1.25e+00  4.08e-03  3.01e-01  3.01e-03  9.96e-03  3.98e-01  
  8  +4.4955e-01  +1.4417e+00  9.92e-01  2.86e-03  2.10e-01  1.89e-03  7.24e-03  4.46e-01  
  9  +4.1757e-01  +9.6977e-01  5.52e-01  1.71e-03  1.22e-01  1.67e-04  4.79e-03  7.01e-01  
 10  +3.7201e-01  +5.8852e-01  2.17e-01  5.89e-04  4.15e-02  6.19e-05  1.87e-03  6.77e-01  
 11  +3.5740e-01  +5.1507e-01  1.58e-01  4.04e-04  2.85e-02  5.21e-05  1.35e-03  4.26e-01  
 12  +3.4005e-01  +4.2218e-01  8.21e-02  2.02e-04  1.43e-02  2.80e-05  7.36e-04  5.22e-01  
 13  +3.2705e-01  +3.5550e-01  2.84e-02  6.75e-05  4.77e-03  1.01e-05  2.70e-04  7.04e-01  
 14  +3.2121e-01  +3.2704e-01  5.83e-03  1.36e-05  9.61e-04  2.11e-06  5.78e-05  8.29e-01  
 15  +3.2006e-01  +3.2176e-01  1.71e-03  3.94e-06  2.80e-04  6.47e-07  1.70e-05  7.68e-01  
 16  +3.1979e-01  +3.2067e-01  8.87e-04  1.99e-06  1.43e-04  3.41e-07  8.68e-06  5.52e-01  
 17  +3.1953e-01  +3.1963e-01  9.69e-05  2.15e-07  1.55e-05  3.98e-08  9.50e-07  9.90e-01  
 18  +3.1950e-01  +3.1950e-01  1.01e-06  2.25e-09  1.62e-07  4.15e-10  9.95e-09  9.90e-01  
 19  +3.1950e-01  +3.1950e-01  1.02e-08  2.25e-11  1.62e-09  4.16e-12  9.96e-11  9.90e-01  
 20  +3.1950e-01  +3.1950e-01  1.02e-10  2.25e-13  1.62e-11  4.18e-14  1.00e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 23.1935ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:28 PM: Optimal value: 3.195e-01
(CVXPY) Oct 06 04:09:28 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:28 PM: Solver (including time spent in interface) took 3.252e-02 seconds
Iteration: 16, Objective: 0.3195
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:28 PM: Your problem has 648 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Finished problem compilation (took 1.563e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 648
  constraints   = 1148
  nnz(P)        = 0
  nnz(A)        = 8605
  cones (total) = 1
    : Nonnegative = 1,  numel = 1148

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0194e+02  5.01e+02  9.58e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.6672e-01  +1.0815e+02  1.08e+02  4.17e-01  2.05e+01  3.85e-03  5.64e-01  5.96e-01  
  2  +5.2163e-01  +1.2322e+01  1.18e+01  1.22e-01  7.78e+00  1.70e-02  2.28e-01  9.90e-01  
  3  +5.0711e-01  +2.9920e+00  2.48e+00  3.65e-02  2.60e+00  2.78e-03  8.64e-02  7.07e-01  
  4  +5.0640e-01  +2.9765e+00  2.47e+00  2.89e-02  2.10e+00  3.34e-03  6.73e-02  2.31e-01  
  5  +5.0258e-01  +2.8272e+00  2.32e+00  2.59e-02  1.85e+00  2.22e-03  6.39e-02  2.86e-01  
  6  +4.8547e-01  +2.1981e+00  1.71e+00  5.96e-03  4.45e-01  5.36e-03  1.39e-02  7.91e-01  
  7  +4.6747e-01  +1.7501e+00  1.28e+00  4.20e-03  3.10e-01  3.21e-03  1.02e-02  3.76e-01  
  8  +4.4884e-01  +1.4744e+00  1.03e+00  2.88e-03  2.11e-01  2.24e-03  7.25e-03  4.22e-01  
  9  +4.1591e-01  +9.6933e-01  5.53e-01  1.73e-03  1.24e-01  1.80e-05  4.89e-03  7.64e-01  
 10  +3.7108e-01  +5.9137e-01  2.20e-01  6.06e-04  4.27e-02  1.68e-05  1.92e-03  6.51e-01  
 11  +3.5470e-01  +5.0679e-01  1.52e-01  3.93e-04  2.78e-02  2.43e-05  1.33e-03  4.56e-01  
 12  +3.3483e-01  +3.9915e-01  6.43e-02  1.59e-04  1.12e-02  1.55e-05  5.96e-04  6.75e-01  
 13  +3.2450e-01  +3.4684e-01  2.23e-02  5.37e-05  3.79e-03  5.68e-06  2.19e-04  6.71e-01  
 14  +3.1978e-01  +3.2366e-01  3.88e-03  9.17e-06  6.48e-04  1.19e-06  3.95e-05  8.81e-01  
 15  +3.1905e-01  +3.2040e-01  1.35e-03  3.14e-06  2.24e-04  4.58e-07  1.36e-05  7.36e-01  
 16  +3.1874e-01  +3.1914e-01  4.03e-04  9.15e-07  6.58e-05  1.46e-07  4.04e-06  8.66e-01  
 17  +3.1860e-01  +3.1861e-01  9.63e-06  2.17e-08  1.56e-06  3.47e-09  9.63e-08  9.77e-01  
 18  +3.1860e-01  +3.1860e-01  9.65e-08  2.17e-10  1.57e-08  3.48e-11  9.65e-10  9.90e-01  
 19  +3.1860e-01  +3.1860e-01  9.65e-10  2.17e-12  1.57e-10  3.50e-13  9.70e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 22.1163ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:28 PM: Optimal value: 3.186e-01
(CVXPY) Oct 06 04:09:28 PM: Compilation took 1.563e-02 seconds
(CVXPY) Oct 06 04:09:28 PM: Solver (including time spent in interface) took 1.562e-02 seconds
Iteration: 17, Objective: 0.3186
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:28 PM: Your problem has 650 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Finished problem compilation (took 1.637e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 650
  constraints   = 1150
  nnz(P)        = 0
  nnz(A)        = 8668
  cones (total) = 1
    : Nonnegative = 1,  numel = 1150

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9931e-01  +5.0194e+02  5.01e+02  9.58e-01  3.41e+01  1.00e+00  1.01e+00   ------   
  1  +5.6677e-01  +1.0815e+02  1.08e+02  4.17e-01  2.05e+01  3.85e-03  5.64e-01  5.96e-01  
  2  +5.2162e-01  +1.2324e+01  1.18e+01  1.22e-01  7.76e+00  1.70e-02  2.28e-01  9.90e-01  
  3  +5.0709e-01  +2.9884e+00  2.48e+00  3.64e-02  2.59e+00  2.78e-03  8.62e-02  7.08e-01  
  4  +5.0639e-01  +2.9738e+00  2.47e+00  2.89e-02  2.09e+00  3.34e-03  6.72e-02  2.31e-01  
  5  +5.0258e-01  +2.8273e+00  2.32e+00  2.58e-02  1.85e+00  2.22e-03  6.37e-02  2.87e-01  
  6  +4.8546e-01  +2.2006e+00  1.72e+00  5.95e-03  4.45e-01  5.38e-03  1.39e-02  7.91e-01  
  7  +4.6752e-01  +1.7560e+00  1.29e+00  4.19e-03  3.10e-01  3.24e-03  1.02e-02  3.77e-01  
  8  +4.5040e-01  +1.5006e+00  1.05e+00  2.97e-03  2.18e-01  2.28e-03  7.46e-03  4.03e-01  
  9  +4.1520e-01  +9.5751e-01  5.42e-01  1.67e-03  1.19e-01  1.88e-05  4.70e-03  7.68e-01  
 10  +3.7030e-01  +5.8595e-01  2.16e-01  5.92e-04  4.18e-02  1.92e-05  1.88e-03  6.55e-01  
 11  +3.5539e-01  +5.1031e-01  1.55e-01  4.03e-04  2.85e-02  2.48e-05  1.35e-03  4.15e-01  
 12  +3.3521e-01  +4.0249e-01  6.73e-02  1.66e-04  1.18e-02  1.74e-05  6.20e-04  6.94e-01  
 13  +3.2483e-01  +3.5038e-01  2.55e-02  6.14e-05  4.40e-03  6.99e-06  2.47e-04  6.42e-01  
 14  +3.2098e-01  +3.3241e-01  1.14e-02  2.68e-05  1.94e-03  3.31e-06  1.12e-04  5.89e-01  
 15  +3.1823e-01  +3.1988e-01  1.65e-03  3.78e-06  2.77e-04  5.89e-07  1.65e-05  9.34e-01  
 16  +3.1771e-01  +3.1775e-01  3.47e-05  7.96e-08  5.81e-06  1.15e-08  3.52e-07  9.80e-01  
 17  +3.1770e-01  +3.1770e-01  3.47e-07  7.96e-10  5.81e-08  1.15e-10  3.52e-09  9.90e-01  
 18  +3.1770e-01  +3.1770e-01  3.47e-09  7.96e-12  5.81e-10  1.15e-12  3.52e-11  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 21.3945ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:28 PM: Optimal value: 3.177e-01
(CVXPY) Oct 06 04:09:28 PM: Compilation took 1.637e-02 seconds
(CVXPY) Oct 06 04:09:28 PM: Solver (including time spent in interface) took 1.625e-02 seconds
Iteration: 18, Objective: 0.3177
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:28 PM: Your problem has 660 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:28 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:28 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:28 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:28 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:28 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:28 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:28 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:28 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 660
  constraints   = 1160
  nnz(P)        = 0
  nnz(A)        = 8790
  cones (total) = 1
    : Nonnegative = 1,  numel = 1160

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9927e-01  +5.0209e+02  5.02e+02  9.58e-01  3.40e+01  1.00e+00  1.01e+00   ------   
  1  +5.6493e-01  +1.0830e+02  1.08e+02  4.18e-01  2.04e+01  3.85e-03  5.64e-01  5.95e-01  
  2  +5.2039e-01  +1.2427e+01  1.19e+01  1.21e-01  7.73e+00  1.72e-02  2.28e-01  9.90e-01  
  3  +5.0653e-01  +2.8881e+00  2.38e+00  3.29e-02  2.35e+00  2.93e-03  7.75e-02  7.18e-01  
  4  +5.0614e-01  +2.9632e+00  2.46e+00  2.78e-02  2.01e+00  3.43e-03  6.43e-02  2.08e-01  
  5  +5.0226e-01  +3.0913e+00  2.59e+00  2.42e-02  1.74e+00  2.70e-03  5.72e-02  4.27e-01  
  6  +4.8593e-01  +2.4219e+00  1.94e+00  7.07e-03  5.26e-01  5.03e-03  1.65e-02  7.18e-01  
  7  +4.6656e-01  +1.8593e+00  1.39e+00  4.82e-03  3.54e-01  2.64e-03  1.18e-02  4.38e-01  
  8  +4.4476e-01  +1.4988e+00  1.05e+00  3.06e-03  2.22e-01  1.71e-03  7.77e-03  4.89e-01  
  9  +4.1750e-01  +1.0488e+00  6.31e-01  1.99e-03  1.42e-01  2.82e-04  5.54e-03  6.18e-01  
 10  +3.6856e-01  +6.0982e-01  2.41e-01  6.60e-04  4.62e-02  9.51e-05  2.08e-03  6.99e-01  
 11  +3.6046e-01  +5.6803e-01  2.08e-01  5.53e-04  3.87e-02  8.42e-05  1.79e-03  2.12e-01  
 12  +3.4283e-01  +4.7335e-01  1.31e-01  3.30e-04  2.32e-02  5.63e-05  1.16e-03  5.62e-01  
 13  +3.2234e-01  +3.6034e-01  3.80e-02  9.23e-05  6.47e-03  1.60e-05  3.68e-04  7.97e-01  
 14  +3.1517e-01  +3.2417e-01  8.99e-03  2.15e-05  1.50e-03  3.69e-06  9.26e-05  8.02e-01  
 15  +3.1335e-01  +3.1541e-01  2.07e-03  4.93e-06  3.44e-04  8.40e-07  2.17e-05  8.20e-01  
 16  +3.1322e-01  +3.1486e-01  1.64e-03  3.79e-06  2.69e-04  6.65e-07  1.68e-05  5.22e-01  
 17  +3.1283e-01  +3.1322e-01  3.84e-04  8.77e-07  6.24e-05  1.51e-07  3.97e-06  9.90e-01  
 18  +3.1270e-01  +3.1271e-01  7.15e-06  1.63e-08  1.16e-06  2.77e-09  7.40e-08  9.84e-01  
 19  +3.1270e-01  +3.1270e-01  7.16e-08  1.63e-10  1.16e-08  2.78e-11  7.41e-10  9.90e-01  
 20  +3.1270e-01  +3.1270e-01  7.22e-10  1.64e-12  1.17e-10  2.81e-13  7.51e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 25.063ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:28 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:28 PM: Optimal value: 3.127e-01
(CVXPY) Oct 06 04:09:28 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:28 PM: Solver (including time spent in interface) took 3.118e-02 seconds
Iteration: 19, Objective: 0.3127
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:29 PM: Your problem has 670 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:29 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 670
  constraints   = 1170
  nnz(P)        = 0
  nnz(A)        = 8899
  cones (total) = 1
    : Nonnegative = 1,  numel = 1170

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0211e+02  5.02e+02  9.58e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.6360e-01  +1.0845e+02  1.08e+02  4.20e-01  2.03e+01  3.85e-03  5.66e-01  5.94e-01  
  2  +5.1926e-01  +1.2533e+01  1.20e+01  1.21e-01  7.70e+00  1.74e-02  2.29e-01  9.90e-01  
  3  +5.0588e-01  +2.7145e+00  2.21e+00  2.92e-02  2.09e+00  2.88e-03  6.89e-02  7.39e-01  
  4  +5.0561e-01  +2.8511e+00  2.35e+00  2.55e-02  1.84e+00  3.33e-03  5.91e-02  2.14e-01  
  5  +5.0127e-01  +3.2291e+00  2.73e+00  2.08e-02  1.50e+00  3.22e-03  4.80e-02  5.33e-01  
  6  +4.8529e-01  +2.5122e+00  2.03e+00  7.77e-03  5.75e-01  4.46e-03  1.81e-02  6.31e-01  
  7  +4.6336e-01  +1.9078e+00  1.44e+00  5.02e-03  3.66e-01  2.49e-03  1.23e-02  4.98e-01  
  8  +4.4410e-01  +1.5549e+00  1.11e+00  3.30e-03  2.39e-01  1.49e-03  8.41e-03  5.26e-01  
  9  +4.2120e-01  +1.1945e+00  7.73e-01  2.24e-03  1.60e-01  6.86e-04  6.03e-03  4.89e-01  
 10  +3.7131e-01  +6.2815e-01  2.57e-01  7.12e-04  4.97e-02  1.08e-04  2.23e-03  7.78e-01  
 11  +3.5380e-01  +5.4009e-01  1.86e-01  4.84e-04  3.39e-02  8.43e-05  1.61e-03  4.66e-01  
 12  +3.3280e-01  +4.2105e-01  8.82e-02  2.20e-04  1.54e-02  3.91e-05  8.12e-04  5.65e-01  
 13  +3.2010e-01  +3.5276e-01  3.27e-02  7.94e-05  5.54e-03  1.43e-05  3.20e-04  7.00e-01  
 14  +3.1368e-01  +3.2047e-01  6.79e-03  1.63e-05  1.13e-03  2.87e-06  6.98e-05  8.06e-01  
 15  +3.1243e-01  +3.1446e-01  2.04e-03  4.86e-06  3.39e-04  8.55e-07  2.12e-05  7.57e-01  
 16  +3.1229e-01  +3.1381e-01  1.53e-03  3.54e-06  2.50e-04  6.30e-07  1.55e-05  5.88e-01  
 17  +3.1191e-01  +3.1221e-01  3.05e-04  6.99e-07  4.96e-05  1.22e-07  3.13e-06  9.90e-01  
 18  +3.1180e-01  +3.1181e-01  4.74e-06  1.08e-08  7.67e-07  1.86e-09  4.86e-08  9.86e-01  
 19  +3.1180e-01  +3.1180e-01  4.75e-08  1.08e-10  7.69e-09  1.87e-11  4.87e-10  9.90e-01  
 20  +3.1180e-01  +3.1180e-01  4.79e-10  1.09e-12  7.75e-11  1.89e-13  4.93e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 27.6818ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:29 PM: Optimal value: 3.118e-01
(CVXPY) Oct 06 04:09:29 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:29 PM: Solver (including time spent in interface) took 3.134e-02 seconds
Iteration: 20, Objective: 0.3118
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:29 PM: Your problem has 675 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:29 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 675
  constraints   = 1175
  nnz(P)        = 0
  nnz(A)        = 8942
  cones (total) = 1
    : Nonnegative = 1,  numel = 1175

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0213e+02  5.02e+02  9.58e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.6311e-01  +1.0845e+02  1.08e+02  4.20e-01  2.03e+01  3.85e-03  5.65e-01  5.94e-01  
  2  +5.1907e-01  +1.2563e+01  1.20e+01  1.21e-01  7.66e+00  1.74e-02  2.28e-01  9.90e-01  
  3  +5.0568e-01  +2.6592e+00  2.15e+00  2.81e-02  2.02e+00  2.85e-03  6.64e-02  7.46e-01  
  4  +5.0541e-01  +2.8072e+00  2.30e+00  2.46e-02  1.78e+00  3.30e-03  5.70e-02  2.21e-01  
  5  +5.0068e-01  +3.2462e+00  2.75e+00  1.95e-02  1.41e+00  3.36e-03  4.48e-02  5.69e-01  
  6  +4.8391e-01  +2.4966e+00  2.01e+00  7.48e-03  5.53e-01  4.37e-03  1.75e-02  6.23e-01  
  7  +4.6320e-01  +2.0055e+00  1.54e+00  5.01e-03  3.66e-01  3.04e-03  1.22e-02  4.37e-01  
  8  +4.4259e-01  +1.5941e+00  1.15e+00  3.29e-03  2.38e-01  1.90e-03  8.33e-03  4.64e-01  
  9  +4.1412e-01  +1.1425e+00  7.28e-01  2.04e-03  1.45e-01  7.21e-04  5.53e-03  5.47e-01  
 10  +3.6565e-01  +6.0264e-01  2.37e-01  6.59e-04  4.59e-02  1.26e-04  2.09e-03  7.24e-01  
 11  +3.4589e-01  +5.0216e-01  1.56e-01  4.04e-04  2.83e-02  8.36e-05  1.38e-03  5.86e-01  
 12  +3.3007e-01  +4.1208e-01  8.20e-02  2.06e-04  1.44e-02  4.25e-05  7.66e-04  5.09e-01  
 13  +3.1795e-01  +3.4605e-01  2.81e-02  6.89e-05  4.81e-03  1.38e-05  2.80e-04  7.09e-01  
 14  +3.1229e-01  +3.1707e-01  4.78e-03  1.16e-05  8.06e-04  2.18e-06  4.99e-05  8.82e-01  
 15  +3.1148e-01  +3.1333e-01  1.85e-03  4.44e-06  3.11e-04  8.33e-07  1.94e-05  6.77e-01  
 16  +3.1129e-01  +3.1250e-01  1.21e-03  2.83e-06  2.00e-04  5.10e-07  1.25e-05  6.83e-01  
 17  +3.1095e-01  +3.1109e-01  1.41e-04  3.26e-07  2.31e-05  5.56e-08  1.46e-06  9.90e-01  
 18  +3.1090e-01  +3.1090e-01  1.57e-06  3.61e-09  2.56e-07  6.16e-10  1.62e-08  9.89e-01  
 19  +3.1090e-01  +3.1090e-01  1.57e-08  3.62e-11  2.57e-09  6.17e-12  1.63e-10  9.90e-01  
 20  +3.1090e-01  +3.1090e-01  1.58e-10  3.65e-13  2.59e-11  6.24e-14  1.65e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 26.3758ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:29 PM: Optimal value: 3.109e-01
(CVXPY) Oct 06 04:09:29 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:29 PM: Solver (including time spent in interface) took 3.073e-02 seconds
Iteration: 21, Objective: 0.3109
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 04:09:29 PM: Your problem has 676 variables, 500 constraints, and 0 parameters.
(CVXPY) Oct 06 04:09:29 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 04:09:29 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 04:09:29 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 04:09:29 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 04:09:29 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 04:09:29 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 04:09:29 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 04:09:29 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 04:09:29 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 04:09:29 PM: Finished problem compilation (took 0.000e+00 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 676
  constraints   = 1176
  nnz(P)        = 0
  nnz(A)        = 8951
  cones (total) = 1
    : Nonnegative = 1,  numel = 1176

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.9923e-01  +5.0213e+02  5.02e+02  9.58e-01  3.38e+01  1.00e+00  1.01e+00   ------   
  1  +5.6308e-01  +1.0846e+02  1.08e+02  4.20e-01  2.03e+01  3.85e-03  5.65e-01  5.94e-01  
  2  +5.1901e-01  +1.2568e+01  1.20e+01  1.21e-01  7.65e+00  1.74e-02  2.28e-01  9.90e-01  
  3  +5.0565e-01  +2.6503e+00  2.14e+00  2.80e-02  2.00e+00  2.85e-03  6.60e-02  7.47e-01  
  4  +5.0537e-01  +2.7995e+00  2.29e+00  2.45e-02  1.77e+00  3.29e-03  5.67e-02  2.22e-01  
  5  +5.0062e-01  +3.2408e+00  2.74e+00  1.93e-02  1.40e+00  3.38e-03  4.43e-02  5.71e-01  
  6  +4.8387e-01  +2.4922e+00  2.01e+00  7.48e-03  5.52e-01  4.34e-03  1.75e-02  6.20e-01  
  7  +4.6286e-01  +1.9989e+00  1.54e+00  4.98e-03  3.63e-01  3.03e-03  1.21e-02  4.41e-01  
  8  +4.4235e-01  +1.5935e+00  1.15e+00  3.28e-03  2.37e-01  1.88e-03  8.31e-03  4.69e-01  
  9  +4.0556e-01  +9.8932e-01  5.84e-01  1.67e-03  1.18e-01  2.41e-04  4.68e-03  7.54e-01  
 10  +3.6330e-01  +5.9989e-01  2.37e-01  6.57e-04  4.57e-02  8.20e-05  2.11e-03  6.28e-01  
 11  +3.4406e-01  +4.9294e-01  1.49e-01  3.88e-04  2.71e-02  5.89e-05  1.34e-03  5.68e-01  
 12  +3.2954e-01  +4.1019e-01  8.06e-02  2.04e-04  1.42e-02  3.16e-05  7.61e-04  4.71e-01  
 13  +3.1780e-01  +3.4545e-01  2.77e-02  6.81e-05  4.75e-03  1.09e-05  2.77e-04  7.18e-01  
 14  +3.1227e-01  +3.1691e-01  4.64e-03  1.13e-05  7.86e-04  1.83e-06  4.86e-05  9.01e-01  
 15  +3.1147e-01  +3.1327e-01  1.80e-03  4.34e-06  3.04e-04  7.19e-07  1.89e-05  6.71e-01  
 16  +3.1127e-01  +3.1241e-01  1.14e-03  2.68e-06  1.89e-04  4.50e-07  1.18e-05  7.06e-01  
 17  +3.1094e-01  +3.1106e-01  1.16e-04  2.68e-07  1.90e-05  4.52e-08  1.20e-06  9.90e-01  
 18  +3.1090e-01  +3.1090e-01  1.25e-06  2.88e-09  2.05e-07  4.85e-10  1.30e-08  9.89e-01  
 19  +3.1090e-01  +3.1090e-01  1.25e-08  2.89e-11  2.05e-09  4.86e-12  1.30e-10  9.90e-01  
 20  +3.1090e-01  +3.1090e-01  1.26e-10  2.91e-13  2.07e-11  4.92e-14  1.31e-12  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 28.104ms
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 04:09:29 PM: Problem status: optimal
(CVXPY) Oct 06 04:09:29 PM: Optimal value: 3.109e-01
(CVXPY) Oct 06 04:09:29 PM: Compilation took 0.000e+00 seconds
(CVXPY) Oct 06 04:09:29 PM: Solver (including time spent in interface) took 3.124e-02 seconds
FULL MODEL:
  Accruacy: 0.653
  Our objective: 0.30600000000000005

IF 
    (x0 = 0 AND x1 = 0 AND x2 = 0 AND x3 = 1 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.032)
 OR (x0 = 0 AND x1 = 0 AND x2 = 0 AND x7 = 0)                                             <-- (term's our objective: 0.09)
 OR (x0 = 0 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.016)
 OR (x0 = 0 AND x1 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1 AND x7 = 0)            <-- (term's our objective: 0.018)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 1 AND x7 = 1)            <-- (term's our objective: 0.01)
 OR (x0 = 0 AND x1 = 0 AND x3 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 1)                       <-- (term's our objective: 0.014)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x5 = 0 AND x6 = 0)                       <-- (term's our objective: 0.012)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.008)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 0 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 1) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.01)
 OR (x0 = 1 AND x1 = 0 AND x3 = 1 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0)            <-- (term's our objective: 0.012)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x3 = 0 AND x7 = 1)                                  <-- (term's our objective: 0.026)
 OR (x0 = 1 AND x1 = 1 AND x2 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 0)                       <-- (term's our objective: 0.016)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 0 AND x5 = 0 AND x6 = 0 AND x7 = 0) <-- (term's our objective: 0.006)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 0 AND x4 = 1 AND x5 = 0 AND x6 = 1 AND x7 = 0) <-- (term's our objective: 0.004)
 OR (x0 = 1 AND x1 = 1 AND x2 = 1 AND x3 = 1 AND x4 = 0 AND x5 = 1 AND x7 = 1)            <-- (term's our objective: 0.018)
 OR (x1 = 0 AND x2 = 0 AND x3 = 0 AND x4 = 1 AND x5 = 1 AND x6 = 1)                       <-- (term's our objective: 0.022)
 OR (x1 = 0 AND x2 = 1 AND x3 = 1 AND x4 = 1 AND x5 = 1 AND x6 = 0)                       <-- (term's our objective: 0.022)
 OR (x2 = 0 AND x3 = 0 AND x4 = 0 AND x5 = 1 AND x7 = 1)                                  <-- (term's our objective: 0.026)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 9.07150387763977
Best over terms:
  Our final objective: 0.09
    Its accruacy: 0.545
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.09
  Highest accruacy: 0.545
  static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step        static reg : on, ϵ1 = 1.0e-8, ϵ2 = 4.9e-32  dynamic reg: on, ϵ = 1.0e-13, δ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        μ       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 10 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 11 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 12 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 13 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 14 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 15 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 16 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 17 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 18 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 19 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 20 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 21 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 22 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 23 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 24 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 25 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 26 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 27 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 28 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 29 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 30 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 31 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 32 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 33 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 34 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 35 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 36 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 37 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 38 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 39 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 40 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 41 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 42 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 43 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 44 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 45 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 46 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 47 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 48 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 49 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 50 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 51 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 52 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 53 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 54 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 55 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 56 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 57 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 58 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 59 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 60 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 61 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 62 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 63 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 64 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 65 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 66 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

