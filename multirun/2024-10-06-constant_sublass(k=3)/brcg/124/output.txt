Command:
python test_script.py -s constant_subclass -d 4 -n 10 --seed 21 -m brcg -k 3 --verbose
Output:
The true theoretical sup(\mu - \nu) = 0.15000000000000002
The correct rule on sampled data has \hat{\mu} - \hat{\nu} = 0.4
TRIVIAL ACCURACY - always TRUE: 0.5
Balancing dropped 0 samples, 10 remain. 
Dimension is 4.

Computed total variation: 0.6
BRCG
Learning DNF rule with complexity parameters lambda0=0.0001, lambda1=0
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:52 PM: Your problem has 14 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:52 PM: Finished problem compilation (took 3.503e-02 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 14
  constraints   = 19
  nnz(P)        = 0
  nnz(A)        = 44
  cones (total) = 1
    : Nonnegative = 1,  numel = 19

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +4.0959e-01  +5.9570e+00  5.55e+00  7.25e-01  2.40e+00  1.00e+00  1.31e+00   ------   
  1  +4.8537e-01  +1.2590e+00  7.74e-01  2.39e-01  1.02e+00  3.88e-03  5.70e-01  7.23e-01  
  2  +3.2247e-01  +4.4341e-01  1.21e-01  4.23e-02  1.93e-01  7.66e-03  1.48e-01  8.48e-01  
  3  +3.0120e-01  +3.0763e-01  6.43e-03  2.30e-03  1.06e-02  5.32e-04  9.31e-03  9.42e-01  
  4  +3.0014e-01  +3.0026e-01  1.30e-04  4.70e-05  2.16e-04  9.68e-06  1.93e-04  9.79e-01  
  5  +3.0010e-01  +3.0011e-01  1.02e-05  3.62e-06  1.66e-05  6.65e-07  1.62e-05  9.26e-01  
  6  +3.0010e-01  +3.0010e-01  1.05e-07  3.69e-08  1.70e-07  6.85e-09  1.67e-07  9.90e-01  
  7  +3.0010e-01  +3.0010e-01  1.05e-09  3.70e-10  1.70e-09  6.85e-11  1.67e-09  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 205.2µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:52 PM: Optimal value: 3.001e-01
(CVXPY) Oct 06 03:48:52 PM: Compilation took 3.503e-02 seconds
(CVXPY) Oct 06 03:48:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Initial LP solved
Iteration: 1, Objective: 0.3001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:52 PM: Your problem has 15 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:52 PM: Finished problem compilation (took 8.927e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 15
  constraints   = 20
  nnz(P)        = 0
  nnz(A)        = 49
  cones (total) = 1
    : Nonnegative = 1,  numel = 20

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.8682e-01  +6.0650e+00  5.68e+00  7.36e-01  2.55e+00  1.00e+00  1.35e+00   ------   
  1  +4.3991e-01  +1.2309e+00  7.91e-01  2.47e-01  1.08e+00  3.83e-03  5.93e-01  7.24e-01  
  2  +2.7442e-01  +4.2260e-01  1.48e-01  4.73e-02  2.24e-01  7.78e-03  1.68e-01  8.10e-01  
  3  +2.0788e-01  +2.3399e-01  2.61e-02  6.65e-03  3.29e-02  1.42e-03  3.42e-02  8.83e-01  
  4  +2.0026e-01  +2.0078e-01  5.22e-04  1.35e-04  6.69e-04  2.70e-05  7.40e-04  9.79e-01  
  5  +2.0010e-01  +2.0011e-01  5.21e-06  1.35e-06  6.69e-06  2.69e-07  7.41e-06  9.90e-01  
  6  +2.0010e-01  +2.0010e-01  5.21e-08  1.35e-08  6.69e-08  2.69e-09  7.41e-08  9.90e-01  
  7  +2.0010e-01  +2.0010e-01  5.21e-10  1.35e-10  6.69e-10  2.69e-11  7.41e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 146.1µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:52 PM: Optimal value: 2.001e-01
(CVXPY) Oct 06 03:48:52 PM: Compilation took 8.927e-03 seconds
(CVXPY) Oct 06 03:48:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
Iteration: 2, Objective: 0.2001
===============================================================================
                                     CVXPY                                     
                                     v1.5.2                                    
===============================================================================
(CVXPY) Oct 06 03:48:52 PM: Your problem has 20 variables, 5 constraints, and 0 parameters.
(CVXPY) Oct 06 03:48:52 PM: It is compliant with the following grammars: DCP, DQCP
(CVXPY) Oct 06 03:48:52 PM: (If you need to solve this problem multiple times, but with different data, consider using parameters.)
(CVXPY) Oct 06 03:48:52 PM: CVXPY will first compile your problem; then, it will invoke a numerical solver to obtain a solution.
(CVXPY) Oct 06 03:48:52 PM: Your problem is compiled with the CPP canonicalization backend.
-------------------------------------------------------------------------------
                                  Compilation                                  
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Compiling problem (target solver=CLARABEL).
(CVXPY) Oct 06 03:48:52 PM: Reduction chain: Dcp2Cone -> CvxAttr2Constr -> ConeMatrixStuffing -> CLARABEL
(CVXPY) Oct 06 03:48:52 PM: Applying reduction Dcp2Cone
(CVXPY) Oct 06 03:48:52 PM: Applying reduction CvxAttr2Constr
(CVXPY) Oct 06 03:48:52 PM: Applying reduction ConeMatrixStuffing
(CVXPY) Oct 06 03:48:52 PM: Applying reduction CLARABEL
(CVXPY) Oct 06 03:48:52 PM: Finished problem compilation (took 5.517e-03 seconds).
-------------------------------------------------------------------------------
                                Numerical solver                               
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Invoking solver CLARABEL  to obtain a solution.
-------------------------------------------------------------
           Clarabel.rs v0.9.0  -  Clever Acronym                

                   (c) Paul Goulart                          
                University of Oxford, 2022                   
-------------------------------------------------------------

problem:
  variables     = 20
  constraints   = 25
  nnz(P)        = 0
  nnz(A)        = 64
  cones (total) = 1
    : Nonnegative = 1,  numel = 25

settings:
  linear algebra: direct / qdldl, precision: 64 bit
  max iter = 200, time limit = Inf,  max step = 0.990
  tol_feas = 1.0e-8, tol_gap_abs = 1.0e-8, tol_gap_rel = 1.0e-8,


  iter refine: on, reltol = 1.0e-13, abstol = 1.0e-12,
               max iter = 10, stop ratio = 5.0
  equilibrate: on, min_scale = 1.0e-4, max_scale = 1.0e4
               max iter = 10


---------------------------------------------------------------------------------------------
  0  +3.4520e-01  +5.9504e+00  5.61e+00  7.59e-01  2.60e+00  1.00e+00  1.30e+00   ------   
  1  +3.3656e-01  +1.1586e+00  8.22e-01  2.70e-01  1.10e+00  4.01e-03  5.75e-01  7.02e-01  
  2  +2.0740e-01  +2.8507e-01  7.77e-02  2.90e-02  1.29e-01  9.36e-03  9.21e-02  9.77e-01  
  3  +2.0035e-01  +2.0213e-01  1.77e-03  6.60e-04  2.92e-03  2.59e-04  2.21e-03  9.77e-01  
  4  +2.0021e-01  +2.0046e-01  2.58e-04  9.90e-05  4.34e-04  3.48e-05  3.34e-04  8.52e-01  
  5  +2.0013e-01  +2.0025e-01  1.21e-04  3.58e-05  1.70e-04  1.12e-05  1.78e-04  7.08e-01  
  6  +2.0010e-01  +2.0011e-01  4.90e-06  1.43e-06  6.88e-06  2.72e-07  8.01e-06  9.56e-01  
  7  +2.0010e-01  +2.0010e-01  5.03e-08  1.46e-08  7.02e-08  2.78e-09  8.34e-08  9.90e-01  
  8  +2.0010e-01  +2.0010e-01  5.02e-10  1.46e-10  7.01e-10  2.78e-11  8.34e-10  9.90e-01  
---------------------------------------------------------------------------------------------
Terminated with status = Solved
solve time = 248.3µs
-------------------------------------------------------------------------------
                                    Summary                                    
-------------------------------------------------------------------------------
(CVXPY) Oct 06 03:48:52 PM: Problem status: optimal
(CVXPY) Oct 06 03:48:52 PM: Optimal value: 2.001e-01
(CVXPY) Oct 06 03:48:52 PM: Compilation took 5.517e-03 seconds
(CVXPY) Oct 06 03:48:52 PM: Solver (including time spent in interface) took 0.000e+00 seconds
FULL MODEL:
  Accruacy: 0.8
  Our objective: 0.6000000000000001

IF 
    (x0 = 0 AND x1 = 0) <-- (term's our objective: 0.6)
THEN
 target = 1.0 ELSE target = 0.0

Seconds needed: 3.0167224407196045
Best over terms:
  Our final objective: 0.6000000000000001
    Its accruacy: 0.8
    Its hamming distance: 1
  Shortest hamming distance: 1
    Its our objective: 0.6000000000000001
  Highest accruacy: 0.8
  static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step        static reg : on, Ïµ1 = 1.0e-8, Ïµ2 = 4.9e-32  dynamic reg: on, Ïµ = 1.0e-13, Î´ = 2.0e-7iter    pcost        dcost       gap       pres      dres      k/t        Î¼       step      
Errors:
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 1 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 2 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 3 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 4 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 5 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 6 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 7 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 8 times so far.

  warnings.warn(msg, UserWarning)
C:\Users\illia\AppData\Local\Programs\Python\Python310\lib\site-packages\cvxpy\expressions\expression.py:650: UserWarning: 
This use of ``*`` has resulted in matrix multiplication.
Using ``*`` for matrix multiplication has been deprecated since CVXPY 1.1.
    Use ``*`` for matrix-scalar and vector-scalar multiplication.
    Use ``@`` for matrix-matrix and matrix-vector multiplication.
    Use ``multiply`` for elementwise multiplication.
This code path has been hit 9 times so far.

  warnings.warn(msg, UserWarning)
C:\personal\work\DNF_bias\src\aix360\aix360\algorithms\rbm\beam_search.py:58: FutureWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
  zOut = pd.Series(index=X.columns)

